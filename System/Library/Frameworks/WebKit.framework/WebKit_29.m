uint64_t WebKit::WebPage::mayPerformUploadDragDestinationAction(WebKit::WebPage *this)
{
  char *v1;
  unint64_t v3;
  uint64_t v4;

  v1 = (char *)this + 720;
  if (*((_DWORD *)this + 183))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 90) + 8 * v3);
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v4 + 8));
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v4 + 8), 0);
      ++v3;
    }
    while (v3 < *((unsigned int *)this + 183));
  }
  return WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v1, 0);
}

unsigned int *WebKit::WebPage::didStartDrag(unsigned int *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;

  *((_BYTE *)this + 795) = 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebCore::EventHandler::didStartDrag(*(WebCore::EventHandler **)(v1 + 640));
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return this;
}

unsigned int *WebKit::WebPage::dragCancelled(unsigned int *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;

  *((_BYTE *)this + 795) = 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebCore::EventHandler::dragCancelled(*(WebCore::EventHandler **)(v1 + 640));
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return this;
}

WTF *WebKit::WebPage::removeWebEditCommand(WebKit::WebPage *this, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  WTF *result;
  void *v5;
  WTF *v6;
  uint64_t v7;

  v7 = a2;
  v2 = (uint64_t *)((char *)this + 336);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 42, &v7);
  result = (WTF *)WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::take(v2, v3, &v6);
  if (v6)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)v6 + 1) + 48))(*((_QWORD *)v6 + 1));
    result = v6;
    v6 = 0;
    if (result)
      return WTF::RefCounted<WebKit::WebUndoStep>::deref(result, v5);
  }
  return result;
}

WTF *WebKit::WebPage::unapplyEditCommand(WebKit::WebPage *this, uint64_t a2)
{
  WTF *result;
  WTF *v3;
  void *v4;
  uint64_t v5;

  v5 = a2;
  result = (WTF *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 42, &v5);
  if (result)
  {
    v3 = result;
    ++*(_DWORD *)result;
    (*(void (**)(_QWORD))(**((_QWORD **)result + 1) + 16))(*((_QWORD *)result + 1));
    return WTF::RefCounted<WebKit::WebUndoStep>::deref(v3, v4);
  }
  return result;
}

WTF *WebKit::WebPage::reapplyEditCommand(WebKit::WebPage *this, uint64_t a2)
{
  WTF *result;
  WTF *v4;
  void *v5;
  uint64_t v6;

  v6 = a2;
  result = (WTF *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 42, &v6);
  if (result)
  {
    v4 = result;
    ++*(_DWORD *)result;
    *((_BYTE *)this + 185) = 1;
    (*(void (**)(_QWORD))(**((_QWORD **)result + 1) + 24))(*((_QWORD *)result + 1));
    *((_BYTE *)this + 185) = 0;
    return WTF::RefCounted<WebKit::WebUndoStep>::deref(v4, v5);
  }
  return result;
}

uint64_t WebKit::WebPage::closeCurrentTypingCommand(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::Editor *v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v2 = result;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v5 = *(_QWORD *)(result + 296);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      v6 = (WebCore::Editor *)WebCore::Document::editor((WebCore::Document *)v5);
      WebCore::Editor::closeTyping(v6);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::setActiveColorChooser(WebKit::WebPage *this, WebKit::WebColorChooser *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
    v4 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  else
  {
    v4 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v4;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::setActiveDataListSuggestionPicker(WebKit::WebPage *this, WebKit::WebDataListSuggestionPicker *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = (unsigned int *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didCloseSuggestions(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(this + 592);
  *(_QWORD *)(this + 592) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      return WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::setActiveDateTimeChooser(WebKit::WebPage *this, WebKit::WebDateTimeChooser *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = (unsigned int *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didChooseDate(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 600);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v5 = *(_QWORD *)(v4 + 8);
        v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v5 = 0;
        v6 = 0x100000000;
      }
      return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), v5, v6);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::didEndDateTimePicker(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(this + 600);
  *(_QWORD *)(this + 600) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 24))(*(_QWORD *)(v3 + 16));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      return WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::setTextIndicator(WebKit::WebPage *this, const WebCore::TextIndicatorData *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  __int128 v10;
  _QWORD v11[3];
  IPC::Encoder *v12;

  v3 = (char *)this + 32;
  v2 = *((_QWORD *)this + 4);
  v10 = *(_OWORD *)(*((_QWORD *)this + 11) + 80);
  v11[0] = &v10;
  v11[1] = a2;
  v11[2] = 1;
  v4 = (*(uint64_t (**)(char *))(v2 + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2048;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::TextIndicatorData const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::TextIndicatorData const&,unsigned long long>,0ul,1ul,2ul>((IPC::Encoder *)v5, (uint64_t)v11);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebPage::findString(uint64_t a1, WebCore::LocalFrame *a2, unsigned __int16 a3, uint64_t a4, unint64_t a5)
{
  WebKit::FindController::findString(*(_QWORD *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::findStringIncludingImages(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::FindController::findStringIncludingImages(*(_QWORD *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::findStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::FindController::findStringMatches(*(_QWORD *)(a1 + 448), a2, a3, a4, a5);
}

WTF *WebKit::WebPage::findRectsForStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::FindController::findRectsForStringMatches(*(_QWORD *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::findTextRangesForStringMatches(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::WebFoundTextRangeController::findTextRangesForStringMatches(*(_QWORD *)(a1 + 456), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::requestRectForFoundTextRange(uint64_t a1, uint64_t a2, WebCore::ScrollView **a3)
{
  return WebKit::WebFoundTextRangeController::requestRectForFoundTextRange(*(WebKit::WebFoundTextRangeController **)(a1 + 456), a2, a3);
}

uint64_t WebKit::WebPage::addLayerForFindOverlay(uint64_t a1, uint64_t *a2)
{
  return WebKit::WebFoundTextRangeController::addLayerForFindOverlay(*(_QWORD *)(a1 + 456), a2);
}

uint64_t WebKit::WebPage::removeLayerForFindOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebKit::WebFoundTextRangeController::removeLayerForFindOverlay(*(_QWORD *)(a1 + 456));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebPage::countStringMatches(uint64_t a1, WebCore::LocalFrame *a2, unsigned __int16 a3, unsigned int a4, uint64_t *a5)
{
  return WebKit::FindController::countStringMatches(*(_QWORD *)(a1 + 448), a2, a3, a4, a5);
}

uint64_t WebKit::WebPage::replaceMatches(uint64_t a1, unsigned int **a2, WTF::String *a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v6;
  uint64_t v7;

  v6 = WebKit::FindController::replaceMatches(*(_QWORD *)(a1 + 448), a2, a3);
  v7 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::WebPage::didChangeSelectedIndexForActivePopupMenu(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  v3 = *(_QWORD *)(this + 576);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4);
      if ((a2 & 0x80000000) == 0)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), a2, 1);
    }
    this = *(_QWORD *)(v2 + 576);
    *(_QWORD *)(v2 + 576) = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 8);
    }
  }
  else
  {
    *(_QWORD *)(this + 576) = 0;
  }
  return this;
}

WebCore::Icon *WebKit::WebPage::didChooseFilesForOpenPanelWithDisplayStringAndIcon(WebCore::Icon *result, int a2, int a3, UInt8 *bytes, CFIndex length)
{
  WebCore::Icon *v5;
  const __CFData *v6;
  CGDataProvider *v7;
  WebCore::Icon *v8;
  void *v9;
  WebCore::Icon *v10;
  CGImageRef v11;

  if (!*((_QWORD *)result + 76))
    return result;
  v5 = result;
  if (length)
  {
    v6 = CFDataCreate(0, bytes, length);
    v7 = CGDataProviderCreateWithCFData(v6);
    v11 = CGImageCreateWithPNGDataProvider(v7, 0, 1, kCGRenderingIntentDefault);
    WebCore::Icon::create();
    v8 = v10;
    if (v11)
    {
      CFRelease(v11);
      if (!v7)
      {
LABEL_6:
        if (v6)
          CFRelease(v6);
        goto LABEL_9;
      }
    }
    else if (!v7)
    {
      goto LABEL_6;
    }
    CFRelease(v7);
    goto LABEL_6;
  }
  v8 = 0;
LABEL_9:
  WebCore::FileChooser::chooseMediaFiles();
  result = (WebCore::Icon *)*((_QWORD *)v5 + 76);
  *((_QWORD *)v5 + 76) = 0;
  if (result)
    result = WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(result, v9);
  if (v8)
    return WTF::RefCounted<WebCore::Icon>::deref(v8);
  return result;
}

WebKit::WebOpenPanelResultListener *WebKit::WebPage::didChooseFilesForOpenPanel(WebKit::WebOpenPanelResultListener *result)
{
  WebKit::WebOpenPanelResultListener *v1;
  void *v2;

  if (*((_QWORD *)result + 76))
  {
    v1 = result;
    WebCore::FileChooser::chooseFiles();
    result = (WebKit::WebOpenPanelResultListener *)*((_QWORD *)v1 + 76);
    *((_QWORD *)v1 + 76) = 0;
    if (result)
      return WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(result, v2);
  }
  return result;
}

WebKit::WebOpenPanelResultListener *WebKit::WebPage::didCancelForOpenPanel(WebKit::WebOpenPanelResultListener *this)
{
  uint64_t v1;
  WebKit::WebOpenPanelResultListener *v2;
  void *v3;

  v1 = *((_QWORD *)this + 76);
  if (v1)
  {
    v2 = this;
    WebCore::FileChooser::cancelFileChoosing(*(WebCore::FileChooser **)(v1 + 16));
    this = (WebKit::WebOpenPanelResultListener *)*((_QWORD *)v2 + 76);
    *((_QWORD *)v2 + 76) = 0;
    if (this)
      return WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(this, v3);
  }
  return this;
}

_DWORD *WebKit::WebPage::userMediaAccessWasGranted(uint64_t a1, const WebKit::SandboxExtensionHandle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  WebKit::SandboxExtension::consumePermanently(a6, a2);
  return WebKit::UserMediaPermissionRequestManager::userMediaAccessWasGranted(*(_QWORD *)(a1 + 656), (uint64_t)a2, a3, a4, a5, a7);
}

uint64_t WebKit::WebPage::hasRichlyEditableSelection(WebCore::Page **this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t isContentRichlyEditable;
  uint64_t result;
  WebCore::FocusController *v8;

  WebCore::Page::checkedFocusController(this[6]);
  v2 = WebCore::FocusController::focusedOrMainFrame(v8);
  v3 = v2;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  if (!v2)
    return 0;
  if ((WebCore::DragCaretController::isContentRichlyEditable(*((WebCore::DragCaretController **)this[6] + 7)) & 1) != 0)
    isContentRichlyEditable = 1;
  else
    isContentRichlyEditable = WebCore::VisibleSelection::isContentRichlyEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v3 + 296) + 3064) + 56));
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  return isContentRichlyEditable;
}

uint64_t WebKit::WebPage::changeSpellingToWord(WebCore::Page **this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t result;
  WebCore::FocusController *v4;

  WebCore::Page::checkedFocusController(this[6]);
  v2 = WebCore::FocusController::focusedOrMainFrame(v4);
  WebCore::Document::editor(*(WebCore::Document **)(v2 + 296));
  result = WebCore::Editor::replaceSelectionWithText();
  if (v4)
  {
    if (*(_DWORD *)v4)
    {
      --*(_DWORD *)v4;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::unmarkAllMisspellings(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 48) + 160);
  if (v1)
  {
    do
    {
      if (!*(_BYTE *)(v1 + 144))
      {
        v2 = (unsigned int *)(v1 + 8);
        do
          v3 = __ldaxr(v2);
        while (__stlxr(v3 + 1, v2));
        v4 = *(_QWORD *)(v1 + 296);
        if (v4)
        {
          *(_DWORD *)(v4 + 24) += 2;
          if (!*(_QWORD *)(v4 + 1496))
            WebCore::Document::ensureMarkers((WebCore::Document *)v4);
          WebCore::DocumentMarkerController::removeMarkers();
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
      }
      this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v1 + 48), 0);
      v1 = this;
    }
    while (this);
  }
  return this;
}

uint64_t WebKit::WebPage::unmarkAllBadGrammar(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 48) + 160);
  if (v1)
  {
    do
    {
      if (!*(_BYTE *)(v1 + 144))
      {
        v2 = (unsigned int *)(v1 + 8);
        do
          v3 = __ldaxr(v2);
        while (__stlxr(v3 + 1, v2));
        v4 = *(_QWORD *)(v1 + 296);
        if (v4)
        {
          *(_DWORD *)(v4 + 24) += 2;
          if (!*(_QWORD *)(v4 + 1496))
            WebCore::Document::ensureMarkers((WebCore::Document *)v4);
          WebCore::DocumentMarkerController::removeMarkers();
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
      }
      this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v1 + 48), 0);
      v1 = this;
    }
    while (this);
  }
  return this;
}

unsigned int *WebKit::WebPage::restoreSelectionInFocusedEditableElement(WebCore::Page **this)
{
  unsigned int *result;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::Node *v6;
  WebCore::FocusController *v7;

  WebCore::Page::checkedFocusController(this[6]);
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v7);
  v2 = (uint64_t)result;
  if (result)
  {
    v3 = result + 2;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1977B1FFCLL);
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v5 = *((_QWORD *)result + 37);
    if (!*(_BYTE *)(*(_QWORD *)(v5 + 3064) + 153))
    {
      *(_DWORD *)(v5 + 24) += 2;
      v6 = *(WebCore::Node **)(v5 + 1248);
      if (v6)
      {
        *((_DWORD *)v6 + 6) += 2;
        (*(void (**)(WebCore::Node *, _QWORD, uint64_t))(*(_QWORD *)v6 + 680))(v6, 0, 3);
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v6);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

BOOL WebKit::WebPage::mainFrameHasCustomContentProvider(WebKit::WebPage *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 160);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return 0;
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 1072))(v5))
    v6 = 0;
  else
    v6 = v5;
  v7 = *(unsigned __int8 *)(v6 + 50) != 0;
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  return v7;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollOffsetPinningForMainFrame>(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1869;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode((IPC::Encoder *)v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PluginView>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  WTF **v34;
  uint64_t v36;
  int v37;
  unsigned int v38;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_6;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v31 = *(_DWORD *)(v8 - 4);
  if (!v31)
    goto LABEL_57;
  v32 = 0;
  v33 = v31 - 1;
  do
  {
    v34 = (WTF **)(v8 + 8 * v33);
    if ((unint64_t)*v34 + 1 >= 2 && !*((_QWORD *)*v34 + 1))
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(v34, (void *)a2);
      ++v32;
    }
  }
  while ((unint64_t)v33--);
  v8 = *(_QWORD *)a1;
  if (v32)
  {
    *(_DWORD *)(v8 - 16) += v32;
    v36 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    *(_DWORD *)(v36 - 12) = v37 - v32;
    v8 = *(_QWORD *)a1;
  }
  if (v8)
  {
    v38 = *(_DWORD *)(v8 - 4);
    if (v38 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v38)
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
LABEL_60:
      v9 = *(_DWORD *)(v8 - 12);
      v10 = 0x7FFFFFFF;
      if (v9 >= 0x7FFFFFFF)
        goto LABEL_5;
      goto LABEL_4;
    }
LABEL_57:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_60;
  }
LABEL_3:
  v9 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
  v10 = v9;
LABEL_5:
  *(_DWORD *)(a1 + 12) = 2 * v10;
LABEL_6:
  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WTF *)(a2 + 16), a2);
  v11 = *(WTF **)(a2 + 16);
  *(_DWORD *)v11 += 2;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand((uint64_t *)a1, 0), (v12 = *(_QWORD *)a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v14;
    v22 = (uint64_t *)(v12 + 8 * v21);
    result = *v22;
    if (*v22 != -1)
      break;
    v15 = (WTF **)(v12 + 8 * v21);
LABEL_15:
    v19 = i + v21;
  }
  if (!result)
  {
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      *v15 = v11;
    }
    else
    {
      *v22 = (uint64_t)v11;
      v15 = (WTF **)(v12 + 8 * v21);
    }
    v25 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
      {
LABEL_29:
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand((uint64_t *)a1, v15);
        v15 = (WTF **)result;
        v27 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
      }
    }
    else if (3 * v30 <= 4 * v29)
    {
      goto LABEL_29;
    }
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v27 + 8 * v30;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_32;
  }
  if ((WTF *)result != v11)
    goto LABEL_15;
  if ((v13 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v12 - 4);
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v12 + 8 * v24;
  *(_BYTE *)(a3 + 16) = 0;
  if (*(_DWORD *)v11 == 1)
    result = WTF::fastFree(v11, v15);
  else
    --*(_DWORD *)v11;
LABEL_32:
  if (*(_DWORD *)v11 == 1)
    return WTF::fastFree(v11, v15);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::PluginView>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  WTF **v26;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v32;
  unsigned int v33;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 <= v4)
    goto LABEL_6;
  v6 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v23 = *(_DWORD *)(v6 - 4);
  if (!v23)
    goto LABEL_36;
  v24 = 0;
  v25 = v23 - 1;
  do
  {
    v26 = (WTF **)(v6 + 8 * v25);
    if ((unint64_t)*v26 + 1 >= 2 && !*((_QWORD *)*v26 + 1))
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(v26, a2);
      ++v24;
    }
  }
  while ((unint64_t)v25--);
  v6 = *(_QWORD *)a1;
  if (v24)
  {
    *(_DWORD *)(v6 - 16) += v24;
    v28 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    *(_DWORD *)(v28 - 12) = v29 - v24;
    v6 = *(_QWORD *)a1;
  }
  if (v6)
  {
    v30 = *(_DWORD *)(v6 - 4);
    if (v30 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v30)
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_4;
      }
LABEL_45:
      v7 = *(_DWORD *)(v6 - 12);
      v8 = 0x7FFFFFFF;
      if (v7 >= 0x7FFFFFFF)
        goto LABEL_5;
      goto LABEL_4;
    }
LABEL_36:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_45;
  }
LABEL_3:
  v7 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
  v8 = v7;
LABEL_5:
  *(_DWORD *)(a1 + 12) = 2 * v8;
LABEL_6:
  v9 = a2[2];
  if (!v9)
    return 0;
  if (!*(_QWORD *)(v9 + 8))
    return 0;
  v10 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  for (i = 1; ; v15 = (v17 + i++) & v11)
  {
    v17 = v15;
    v18 = *(_QWORD *)(v10 + 8 * v15);
    if (v18 != -1)
    {
      if (!v18)
        return 0;
      if (v18 == v9)
        break;
    }
  }
  if ((_DWORD)v17 == *(_DWORD *)(v10 - 4))
    return 0;
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>((WTF **)(v10 + 8 * v17), a2);
  ++*(_DWORD *)(*(_QWORD *)a1 - 16);
  v20 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v21 = *(_DWORD *)(v20 - 12) - 1;
  else
    v21 = -1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v32 = 6 * *(_DWORD *)(v22 - 12);
    v33 = *(_DWORD *)(v22 - 4);
    if (v32 < v33 && v33 >= 9)
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v33 >> 1, 0);
  }
  return 1;
}

IPC::Encoder *WebKit::WebPage::sendSetWindowFrame(WebKit::WebPage *this, const WebCore::FloatRect *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = (char *)this + 32;
  v3 = *((_QWORD *)this + 4);
  *((_BYTE *)this + 199) = 0;
  v5 = (*(uint64_t (**)(char *))(v3 + 56))((char *)this + 32);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2050;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, (int *)a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebPage::setMainFrameIsScrollable(WebKit::WebPage *this, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  *((_BYTE *)this + 188) = a2;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 176))(*((_QWORD *)this + 9));
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 8);
  if (*(_BYTE *)(v5 + 144))
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 288);
  if (v6)
  {
    ++*(_DWORD *)(v6 + 8);
    result = WebCore::LocalFrameView::setCanHaveScrollbars((WebCore::LocalFrameView *)v6);
    *(_BYTE *)(v6 + 315) = a2 ^ 1;
    if (*(_DWORD *)(v6 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 8);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebPage::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::WebPage::didReceiveSyncWebPageMessage(a1 - 16, a2, a3, a4);
}

BOOL WebKit::WebPage::SandboxExtensionTracker::shouldReuseCommittedSandboxExtension(WebKit::WebPage::SandboxExtensionTracker *this, WebKit::WebFrame *a2)
{
  uint64_t v3;
  WebCore::FrameLoader *v4;
  _BOOL8 v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (*(_BYTE *)(v3 + 144))
    v3 = 0;
  v4 = *(WebCore::FrameLoader **)(v3 + 280);
  WebCore::FrameLoader::loadType(v4);
  if ((WebCore::isReload() & 1) == 0)
  {
    if (*(_QWORD *)this)
      return 0;
    v6 = (_DWORD *)*((_QWORD *)v4 + 11);
    if (v6)
    {
      v7 = v6[6];
      v6[6] = v7 + 1;
      v8 = (_DWORD *)*((_QWORD *)v4 + 12);
      if (!v8)
      {
        v5 = 0;
        if (v7)
          goto LABEL_18;
        goto LABEL_22;
      }
      ++v8[6];
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v6 + 218));
      v5 = 0;
      if (WTF::URL::protocolIs())
      {
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 218));
        if ((WTF::URL::protocolIs() & 1) != 0)
          v5 = 1;
      }
    }
    else
    {
      v8 = (_DWORD *)*((_QWORD *)v4 + 12);
      if (!v8)
        return 0;
      v5 = 0;
      ++v8[6];
    }
    if (v8[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
      if (!v6)
        return v5;
    }
    else
    {
      --v8[6];
      if (!v6)
        return v5;
    }
    v7 = v6[6] - 1;
    if (v6[6] != 1)
    {
LABEL_18:
      v6[6] = v7;
      return v5;
    }
LABEL_22:
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    return v5;
  }
  return 1;
}

const char ****WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>::operator=(const char ****a1, const char ****a2)
{
  const char ***v3;
  const char ***v4;

  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)v3;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v4);
  return a1;
}

const char ***WebKit::WebPage::SandboxExtensionTracker::didFailProvisionalLoad(const char ***this, WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char ***v4;
  uint64_t v5;

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
      {
        v4 = this;
        this = (const char ***)this[1];
        if (this)
        {
          v5 = (uint64_t)this[2] - 1;
          this[2] = (const char **)v5;
          if (v5)
          {
            v4[1] = 0;
            return WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
          }
          this[1][1] = 0;
          sandbox_extension_release();
          this = (const char ***)v4[1];
          v4[1] = 0;
          if (this)
            return WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
        }
      }
    }
  }
  return this;
}

void WebKit::WebPage::beginPrinting(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  NSObject *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::PrintContext *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  WebCore::PrintContext *v22;
  WebKit::WebProcess *v23;
  FloatRect v24;
  float v25;
  uint8_t buf[8];
  char v27;

  v8 = qword_1ECE715C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE715C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "Begin printing.", buf, 2u);
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(_QWORD *)buf = a1;
  v27 = *(_BYTE *)(a1 + 680);
  *(_BYTE *)(a1 + 680) = 1;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = WebKit::WebProcess::webFrame((uint64_t)v9, a2, a3);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = *(_QWORD *)(v11 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (!*(_BYTE *)(v13 + 144))
        {
          v14 = (unsigned int *)(v13 + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          if (!*(_QWORD *)(a1 + 672))
          {
            v16 = (WebCore::PrintContext *)WTF::fastMalloc((WTF *)0x38);
            WebCore::PrintContext::PrintContext(v16, (WebCore::LocalFrame *)v13);
            v17 = *(_QWORD *)(a1 + 672);
            *(_QWORD *)(a1 + 672) = v16;
            if (v17)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
            WebCore::Page::dispatchBeforePrintEvent(*(WebCore::Page **)(a1 + 48));
          }
          WebKit::WebPage::freezeLayerTree(a1, 16);
          WebCore::PrintContext::computedPageSize();
          v19 = v18;
          v21 = v20;
          WebCore::PrintContext::begin(*(WebCore::PrintContext **)(a1 + 672), v18, v20);
          v22 = *(WebCore::PrintContext **)(a1 + 672);
          if (v22)
          {
            v25 = 0.0;
            v24.m_location = 0;
            v24.m_size.m_width = v19;
            v24.m_size.m_height = v21;
            WebCore::PrintContext::computePageRects(v22, &v24, 0.0, 0.0, *a4, &v25);
          }
          else
          {
            WebKit::WebPage::unfreezeLayerTree(a1, 16);
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)buf);
}

uint64_t WebKit::WebPage::endPrinting(WebKit::WebPage *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint8_t v7[16];

  v4 = qword_1ECE715C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE715C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "End printing.", v7, 2u);
  }
  if (*((_BYTE *)a1 + 680))
    *((_BYTE *)a1 + 681) = 1;
  else
    WebKit::WebPage::endPrintingImmediately(a1);
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::WebPage::endPrintingImmediately(WebKit::WebPage *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 680))
  {
    result = 6453;
    __break(0xC471u);
  }
  else
  {
    *((_BYTE *)this + 681) = 0;
    WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 16);
    result = *((_QWORD *)this + 84);
    if (result)
    {
      *((_QWORD *)this + 84) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      return WebCore::Page::dispatchAfterPrintEvent(*((WebCore::Page **)this + 6));
    }
  }
  return result;
}

void WebKit::WebPage::computePagesForPrinting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  double v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  __int128 v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v17 = 0;
  v18 = a1;
  v19 = *(_BYTE *)(a1 + 680);
  *(_BYTE *)(a1 + 680) = 1;
  v15 = 0x3FF0000000000000;
  v16 = 0;
  v14 = *(_OWORD *)(a4 + 12);
  WebKit::WebPage::computePagesForPrintingImpl(a1, a2, a3, (float *)a4, (uint64_t)&v16, (double *)&v15, &v14);
  v10 = *(double *)&v15;
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **, __int128 *, double))(*(_QWORD *)v11 + 16))(v11, &v16, &v14, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v13 = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v13, v12);
  }
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v18);
}

void WebKit::WebPage::computePagesForPrintingImpl(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, double *a6, _DWORD *a7)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  FloatSize v27;
  __int128 v28;

  WebKit::WebPage::beginPrinting(a1, a2, a3, a4);
  if (*(_QWORD *)(a1 + 672))
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *(_QWORD *)&v28 = a1;
    BYTE8(v28) = *(_BYTE *)(a1 + 680);
    *(_BYTE *)(a1 + 680) = 1;
    v12 = *(_QWORD *)(a1 + 672);
    if (v12 + 24 != a5)
    {
      v13 = *(_DWORD *)(a5 + 12);
      v14 = *(_DWORD *)(v12 + 36);
      if (v13 <= v14)
      {
        if (v14 > *(_DWORD *)(a5 + 8))
        {
          WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a5, 0);
          WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a5, *(unsigned int *)(v12 + 36));
          v13 = *(_DWORD *)(a5 + 12);
        }
      }
      else
      {
        *(_DWORD *)(a5 + 12) = v14;
        v13 = v14;
      }
      if (v13)
      {
        memmove(*(void **)a5, *(const void **)(v12 + 24), 16 * v13);
        v13 = *(_DWORD *)(a5 + 12);
      }
      v15 = *(unsigned int *)(v12 + 36);
      if (v13 != (_DWORD)v15)
      {
        v16 = (_OWORD *)(*(_QWORD *)a5 + 16 * v13);
        v17 = (__int128 *)(*(_QWORD *)(v12 + 24) + 16 * v13);
        v18 = 16 * v15 - 16 * v13;
        do
        {
          v19 = *v17++;
          *v16++ = v19;
          v18 -= 16;
        }
        while (v18);
        v13 = *(_DWORD *)(v12 + 36);
      }
      *(_DWORD *)(a5 + 12) = v13;
    }
    WebCore::PrintContext::computedPageMargin();
    *a7 = v20;
    a7[1] = v21;
    a7[2] = v22;
    a7[3] = v23;
    WebCore::PrintContext::computedPageSize();
    v27.m_width = v24;
    v27.m_height = v25;
    WebCore::PrintContext::computeAutomaticScaleFactor(*(WebCore::PrintContext **)(a1 + 672), &v27);
    *a6 = (float)(v26 * *a4);
    WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v28);
  }
  if (!*(_DWORD *)(a5 + 12))
  {
    v28 = xmmword_1978D2700;
    if (*(_DWORD *)(a5 + 8))
      *(_OWORD *)*(_QWORD *)a5 = v28;
    else
      *(_OWORD *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 12)) = *(_OWORD *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, 1uLL, (unint64_t)&v28);
    ++*(_DWORD *)(a5 + 12);
  }
}

unsigned int *WebKit::WebPage::drawToPDF(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v6;
  BOOL v7;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int32x2_t v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  void *v22;
  const __CFData *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  unsigned int *v28;
  CFTypeRef v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WebCore::FragmentedSharedBuffer *v36;
  unsigned int *v37;
  unsigned int *v38;
  __int128 v39;
  int v40;
  CFTypeRef cf;
  int8x16_t v42;
  char v43;
  __int128 v44;
  int v45;
  Color v46;

  v6 = *(_QWORD *)(*((_QWORD *)result + 6) + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (v7)
  {
    v11 = result;
    v12 = (unsigned int *)(v6 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = *(_QWORD *)(v6 + 288);
    ++*(_DWORD *)(v14 + 8);
    if (*(_BYTE *)(a4 + 16))
    {
      v46.m_colorAndFlags = *(_QWORD *)(a4 + 8);
      WebCore::IntSize::IntSize((WebCore::IntSize *)&v44, (const FloatSize *)&v46);
      v15 = (int32x2_t)v44;
    }
    else
    {
      v15 = (int32x2_t)WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v14);
    }
    if (*(_BYTE *)(a4 + 16))
      v16 = (int)*(float *)a4 | ((unint64_t)(int)*(float *)(a4 + 4) << 32);
    else
      v16 = 0;
    v44 = *(_OWORD *)(v14 + 1088);
    v45 = *(_DWORD *)(v14 + 1104);
    v17.i64[0] = v16;
    v17.u64[1] = (unint64_t)v15;
    v18.i64[0] = 0xFE000000FE000000;
    v18.i64[1] = 0xFE000000FE000000;
    v19 = (int8x16_t)vcgtq_s32(v17, v18);
    v20.i64[0] = 0xFE000000FE000000;
    v20.i64[1] = 0xFE000000FE000000;
    v21.i64[0] = 0x8000000080000000;
    v21.i64[1] = 0x8000000080000000;
    v42 = vorrq_s8((int8x16_t)(*(_OWORD *)&v19 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v20, v17), v21, (int8x16_t)vshlq_n_s32(v17, 6uLL)), v19));
    v43 = 1;
    WebCore::LocalFrameView::setLayoutViewportOverrideRect();
    WebCore::LocalFrameView::paintBehavior((WebCore::LocalFrameView *)v14);
    WebCore::LocalFrameView::setPaintBehavior();
    WebCore::LocalFrameView::baseBackgroundColor((WebCore::LocalFrameView *)v14);
    if (a5)
    {
      WebCore::LocalFrameView::setTransparent((WebCore::LocalFrameView *)v14);
      cf = (CFTypeRef)0x1104000000000000;
      WebCore::LocalFrameView::setBaseBackgroundColor((WebCore::LocalFrameView *)v14, (const Color *)&cf);
      if (((unint64_t)cf & 0x8000000000000) != 0)
      {
        v33 = (unsigned int *)((unint64_t)cf & 0xFFFFFFFFFFFFLL);
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v22);
        }
      }
      WebKit::WebPage::pdfSnapshotAtSize(v11, v16, *(_QWORD *)&v15, v15, 0, (__CFData **)&cf);
      WebCore::LocalFrameView::setTransparent((WebCore::LocalFrameView *)v14);
      WebCore::LocalFrameView::setBaseBackgroundColor((WebCore::LocalFrameView *)v14, &v46);
    }
    else
    {
      WebKit::WebPage::pdfSnapshotAtSize(v11, v16, *(_QWORD *)&v15, v15, 0, (__CFData **)&cf);
    }
    v39 = v44;
    v40 = v45;
    WebCore::LocalFrameView::setLayoutViewportOverrideRect();
    WebCore::LocalFrameView::setPaintBehavior();
    v36 = (WebCore::FragmentedSharedBuffer *)cf;
    WebCore::SharedBuffer::create<__CFData const*>(&v36, v23, (uint64_t *)&v37);
    v24 = (uint64_t)v37;
    v37 = 0;
    v38 = (unsigned int *)v24;
    v25 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v25 + 16))(v25, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v27 = v38;
    v38 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v26);
    v28 = v37;
    v37 = 0;
    if (v28)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, v26);
    v29 = cf;
    cf = 0;
    if (v29)
      CFRelease(v29);
    if ((v46.m_colorAndFlags & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)(v46.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v26);
      }
    }
    if (*(_DWORD *)(v14 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    else
      --*(_DWORD *)(v14 + 8);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  return result;
}

void WebKit::WebPage::drawRectToImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const IntRect *a5, int32x2_t *a6, uint64_t *a7)
{
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::DestinationColorSpace *v16;
  uint64_t v17;
  uint64_t v18;
  WebKit *v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  CFTypeRef *v24;
  uint64_t v25;
  WebCore::GraphicsContext *v26;
  uint64_t v27;
  WebKit::WebProcess *v28;
  _BYTE v29[72];
  WebKit *v30[8];
  char v31;
  uint64_t v32;
  char v33;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v32 = a1;
  v33 = *(_BYTE *)(a1 + 680);
  *(_BYTE *)(a1 + 680) = 1;
  {
    v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v13 = WebKit::WebProcess::WebProcess(v28);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
  }
  v14 = WebKit::WebProcess::webFrame((uint64_t)v13, a2, a3);
  v15 = v14;
  if (!v14
    || (v16 = (WebCore::DestinationColorSpace *)CFRetain(*(CFTypeRef *)(v14 + 8)), (v17 = *(_QWORD *)(v15 + 24)) == 0)
    || (v18 = *(_QWORD *)(v17 + 8)) == 0
    || *(_BYTE *)(v18 + 144))
  {
    v19 = 0;
    v18 = 0;
    LOBYTE(v30[0]) = 0;
    v31 = 0;
    v20 = 1;
    goto LABEL_8;
  }
  v22 = (unsigned int *)(v18 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v24 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v16);
  WebKit::WebImage::create(a6, 2, v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 48) + 16), v30);
  v19 = v30[0];
  if (v30[0])
  {
    v25 = *((_QWORD *)v30[0] + 2);
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      v26 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v19 + 2) + 16))(*((_QWORD *)v19 + 2));
      *(float *)v30 = (float)a6->i32[0] / (float)a5->m_size.m_width;
      HIDWORD(v30[0]) = v30[0];
      (*(void (**)(WebCore::GraphicsContext *, WebKit **))(*(_QWORD *)v26 + 632))(v26, v30);
      WebCore::PrintContext::spoolRect(*(WebCore::PrintContext **)(a1 + 672), v26, a5);
      LOBYTE(v30[0]) = 0;
      v31 = 0;
      WebKit::WebImage::createHandle((uint64_t)v19, 0, v29);
      std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v30, (uint64_t)v29);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
      v20 = 0;
LABEL_8:
      v21 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v21 + 16))(v21, v30);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v30);
      if (!v19)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  LOBYTE(v30[0]) = 0;
  v31 = 0;
  v27 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, WebKit **))(*(_QWORD *)v27 + 16))(v27, v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v30);
  v20 = 0;
  if (v19)
LABEL_9:
    CFRelease(*((CFTypeRef *)v19 + 1));
LABEL_10:
  if ((v20 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v32);
}

void WebKit::WebPage::drawPagesToPDF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t *a7)
{
  CFMutableDataRef v14;
  const __CFData *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int *v20;
  WebCore::FragmentedSharedBuffer *v21;
  unsigned int *v22;
  unsigned int *v23;
  CFMutableDataRef v24;
  uint64_t v25;
  char v26;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v24 = 0;
  v25 = a1;
  v26 = *(_BYTE *)(a1 + 680);
  *(_BYTE *)(a1 + 680) = 1;
  WebKit::WebPage::drawPagesToPDFImpl(a1, a2, a3, a4, a5, a6, &v24);
  v14 = v24;
  v21 = v24;
  WebCore::SharedBuffer::create<__CFData *>(&v21, v15, (uint64_t *)&v22);
  v16 = (uint64_t)v22;
  v22 = 0;
  v23 = (unsigned int *)v16;
  v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v17 + 16))(v17, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v19 = v23;
  v23 = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v18);
  v20 = v22;
  v22 = 0;
  if (v20)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v18);
    if (!v14)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v14)
LABEL_5:
    CFRelease(v14);
LABEL_6:
  WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope((WebKit::WebPage::PrintContextAccessScope *)&v25);
}

void WebKit::WebPage::drawPagesToPDFImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, CFMutableDataRef *a7)
{
  unint64_t v9;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int *v20;
  unsigned int v21;
  CFMutableDataRef Mutable;
  CFMutableDataRef v23;
  CGDataConsumer *v24;
  uint64_t v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGContextRef v31;
  CGContext *v32;
  uint64_t v33;
  const CFDictionaryKeyCallBacks *v34;
  const CFDictionaryValueCallBacks *v35;
  const __CFDictionary *v36;
  uint64_t v37;
  uint64_t v38;
  WebKit::WebProcess *v39;
  CGDataConsumer *cf;
  char v41;
  FloatSize v42;
  CGRect mediaBox;
  _BYTE v44[752];
  uint64_t v45;

  LODWORD(v9) = a5;
  v45 = *MEMORY[0x1E0C80C00];
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v39);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  v15 = WebKit::WebProcess::webFrame((uint64_t)v14, a2, a3);
  v16 = v15;
  if (!v15)
    goto LABEL_7;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
    goto LABEL_7;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
  {
LABEL_8:
    v19 = 1;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v18 + 144))
  {
LABEL_7:
    v18 = 0;
    goto LABEL_8;
  }
  v20 = (unsigned int *)(v18 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v19 = 0;
LABEL_12:
  Mutable = CFDataCreateMutable(0, 0);
  v23 = *a7;
  *a7 = Mutable;
  if (v23)
    CFRelease(v23);
  if (v18)
  {
    v24 = CGDataConsumerCreateWithCFData(*a7);
    memset(&mediaBox, 0, 24);
    v25 = *(_QWORD *)(a1 + 672);
    if (v25 && *(_DWORD *)(v25 + 36))
    {
      WebCore::IntRect::operator CGRect();
      mediaBox.origin.x = v27;
      mediaBox.origin.y = v28;
      mediaBox.size.width = v29;
    }
    else
    {
      v30 = *(float *)(a4 + 4);
      v26 = *(float *)(a4 + 8);
      mediaBox.origin.x = 0.0;
      mediaBox.origin.y = 0.0;
      mediaBox.size.width = v30;
    }
    mediaBox.size.height = v26;
    v31 = CGPDFContextCreate(v24, &mediaBox, 0);
    v32 = v31;
    if (*(_QWORD *)(a1 + 672))
    {
      cf = v24;
      v41 = v19;
      if (a6 + (int)v9 > v9)
      {
        v33 = 16 * v9;
        v9 = v9;
        v34 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v35 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        do
        {
          if (v9 >= *(unsigned int *)(*(_QWORD *)(a1 + 672) + 36))
            break;
          v36 = CFDictionaryCreateMutable(0, 0, v34, v35);
          CGPDFContextBeginPage(v32, v36);
          WebCore::GraphicsContextCG::GraphicsContextCG();
          v42 = (FloatSize)0xBF8000003F800000;
          WebCore::GraphicsContextCG::scale((WebCore::GraphicsContextCG *)v44, &v42);
          v37 = *(_QWORD *)(a1 + 672);
          if (v9 < *(unsigned int *)(v37 + 36))
          {
            WebCore::GraphicsContextCG::translate((WebCore::GraphicsContextCG *)v44, 0.0, (float)-*(_DWORD *)(*(_QWORD *)(v37 + 24) + v33 + 12));
            v38 = *(_QWORD *)(a1 + 672);
            if (v9 < *(unsigned int *)(v38 + 36))
              continue;
          }
          __break(0xC471u);
          JUMPOUT(0x1977B3994);
          WebCore::PrintContext::spoolPage((WebCore::PrintContext *)v38, (WebCore::GraphicsContext *)v44, (float)*(int *)(*(_QWORD *)(v38 + 24) + v33 + 8));
          CGPDFContextEndPage(v32);
          WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)v44);
          if (v36)
            CFRelease(v36);
          ++v9;
          v33 += 16;
          --a6;
        }
        while (a6);
      }
      CGPDFContextClose(v32);
      if (v32)
        CFRelease(v32);
      v19 = v41;
      v24 = cf;
      if (!cf)
        goto LABEL_35;
    }
    else if (v31)
    {
      CFRelease(v31);
      if (!v24)
        goto LABEL_35;
    }
    else if (!v24)
    {
      goto LABEL_35;
    }
    CFRelease(v24);
  }
LABEL_35:
  if ((v19 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
}

uint64_t WebKit::WebPage::addResourceRequest(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *this)
{
  uint64_t result;
  const Document *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  _BYTE v9[24];
  uint64_t v10;

  v10 = a2;
  result = WebCore::ResourceRequestBase::url(this);
  if ((*(_BYTE *)(result + 8) & 2) != 0)
  {
    if (!*(_BYTE *)(a1 + 2024)
      || (result = WebCore::UserGestureIndicator::processingUserGesture(0, v5), (_DWORD)result))
    {
      v6 = (uint64_t *)(a1 + 872);
      v7 = *(_QWORD *)(a1 + 872);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 - 12);
        result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add(v6, &v10, (uint64_t)v9);
        if (v8)
          return result;
      }
      else
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add(v6, &v10, (uint64_t)v9);
      }
      v9[0] = 1;
      return IPC::MessageSender::send<Messages::WebPageProxy::SetNetworkRequestsInProgress>(a1 + 32, v9);
    }
  }
  return result;
}

_QWORD *WebKit::WebPage::removeResourceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;

  v8 = a2;
  v3 = (uint64_t *)(a1 + 872);
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 872), &v8);
  v5 = *(_QWORD *)(a1 + 872);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
  {
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
    v5 = *v3;
  }
  if (!v5 || !*(_DWORD *)(v5 - 12))
  {
    v7 = 0;
    return (_QWORD *)IPC::MessageSender::send<Messages::WebPageProxy::SetNetworkRequestsInProgress>(a1 + 32, &v7);
  }
  return result;
}

uint64_t WebKit::WebPage::stopMediaCapture(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  WebCore::Page::stopMediaCapture();
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::WebPage::setMayStartMediaWhenInWindow(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 328) != a2)
  {
    *(_BYTE *)(this + 328) = a2;
    if (a2)
    {
      if ((*(_WORD *)(*(_QWORD *)(this + 48) + 658) & 0x10) != 0)
        return WTF::RunLoop::TimerBase::start();
    }
  }
  return this;
}

uint64_t WebKit::WebPage::runModal(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  if (!*(_BYTE *)(this + 186) && !*(_BYTE *)(this + 794))
  {
    v2 = *(_QWORD *)(this + 32);
    v1 = this + 32;
    *(_BYTE *)(this + 794) = 1;
    v3 = (*(uint64_t (**)(uint64_t))(v2 + 56))(this + 32);
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 2020;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v9 = (IPC::Encoder *)v4;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v9, 0);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      v6 = (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
    return WTF::RunLoop::run(v6);
  }
  return this;
}

uint64_t WebKit::WebPage::handleAlternativeTextUIResult(WebCore::Page **this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::Editor *v7;
  WebCore::FocusController *v8;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v8);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    v7 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::handleAlternativeTextUIResult(v7, a2);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::setCompositionForTesting(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *result;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::FocusController *v11;
  WebCore::Editor *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WebCore::FocusController *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  Color v24;
  WebCore::FocusController *v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v25);
  v8 = result;
  if (result)
  {
    v9 = result + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = v25;
  v25 = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1977B3E58);
    }
    --*(_DWORD *)v11;
  }
  if (result)
  {
    v12 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)result + 37));
    if (WebCore::Editor::canEdit(v12))
    {
      v29 = 0;
      v30 = 0;
      if ((a5 & 1) == 0)
      {
        v13 = *a2;
        if (*a2)
          LODWORD(v13) = *(_DWORD *)(v13 + 4);
        v24.m_colorAndFlags = 0x11040000000000FFLL;
        LODWORD(v25) = 0;
        HIDWORD(v25) = v13;
        v26 = 1;
        WebCore::Color::Color((WebCore::Color *)&v27, &v24);
        v28 = 0;
        if (HIDWORD(v30) == (_DWORD)v30)
        {
          WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>((uint64_t)&v29, (unint64_t)&v25);
        }
        else
        {
          v15 = v29 + 32 * HIDWORD(v30);
          v16 = v25;
          *(_BYTE *)(v15 + 8) = v26;
          *(_QWORD *)v15 = v16;
          WebCore::Color::Color();
          *(_BYTE *)(v15 + 24) = v28;
          ++HIDWORD(v30);
        }
        if ((v27 & 0x8000000000000) != 0)
        {
          v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v14);
          }
        }
        if ((v24.m_colorAndFlags & 0x8000000000000) != 0)
        {
          v21 = (unsigned int *)(v24.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v14);
          }
        }
      }
      WebCore::Document::editor(*((WebCore::Document **)v8 + 37));
      WebCore::Editor::setComposition();
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v17);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8 + 2);
  }
  return result;
}

uint64_t WebKit::WebPage::hasCompositionForTesting(WebCore::Page **this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t (*v6)();
  _BOOL8 v7;
  uint64_t result;
  WebCore::FocusController *v9;

  WebCore::Page::checkedFocusController(this[6]);
  v1 = WebCore::FocusController::focusedOrMainFrame(v9);
  v2 = v1;
  if (v1)
  {
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v9;
  }
  if (!v1)
    return 0;
  v5 = WebCore::Document::editor(*(WebCore::Document **)(v1 + 296));
  v6 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  if (!*(_QWORD *)(v5 + 32))
    v6 = 0;
  v7 = v6 != 0;
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  return v7;
}

uint64_t WebKit::WebPage::confirmCompositionForTesting(WebCore::Page **this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::Editor *v7;
  WebCore::Editor *v8;
  WebCore::Editor *v9;
  WebCore::FocusController *v10;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v10);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v10;
  }
  if (result)
  {
    v7 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    if (WebCore::Editor::canEdit(v7))
    {
      if (!*(_QWORD *)a2)
      {
        v8 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
        WebCore::Editor::confirmComposition(v8);
      }
      v9 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
      WebCore::Editor::confirmComposition(v9, a2);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setTextAsync(WebCore::Page **this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::FocusController *v8;
  WebCore::Page *v9;
  int v10;
  WebCore::FocusController *v11[2];

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v11[0]);
  v5 = result;
  if (result)
  {
    v6 = (unsigned int *)(result + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064)
                                                                                                + 56)))
    {
      MEMORY[0x19AEB3138](v11, v5);
      WebCore::FrameSelection::selectAll(*(WebCore::FrameSelection **)(*(_QWORD *)(v5 + 296) + 3064));
      if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
      {
        WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
        WebCore::Editor::insertText();
      }
      else
      {
        WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
        WebCore::Editor::deleteSelectionWithSmartDelete();
      }
      WebCore::UserTypingGestureIndicator::~UserTypingGestureIndicator((WebCore::UserTypingGestureIndicator *)v11);
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    v9 = this[115];
    if (!v9)
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    v10 = *((_DWORD *)v9 + 6);
    *((_DWORD *)v9 + 6) = v10 + 2;
    if ((*((_WORD *)v9 + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
    {
      WebCore::HTMLInputElement::setValueForUser(v9, a2);
      v10 = *((_DWORD *)v9 + 6) - 2;
      if (*((_DWORD *)v9 + 6) != 2)
        goto LABEL_16;
    }
    else if (v10)
    {
LABEL_16:
      *((_DWORD *)v9 + 6) = v10;
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    if ((*((_WORD *)v9 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v9);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::insertTextAsync(uint64_t a1, const WTF::String *a2, _QWORD *a3, _BYTE *a4)
{
  unsigned int *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::FocusController *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WebCore *v22;
  WebCore::Node *v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  WebCore::FocusController *v27;
  char v28;
  uint64_t (*v29)();
  WebCore::Editor *v30;
  WebCore *inserted;
  WebCore::Document *v32;
  char v33;
  unint64_t StatusReg;
  uint64_t v35;
  WebCore::ThreadGlobalData *v36;
  WebCore *v37;
  uint64_t v38;
  WebCore::ThreadGlobalData *v39;
  WebCore::FocusController *v40;
  WebCore::FocusController *v41[13];
  _BYTE v42[40];
  _BYTE v43[48];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WebKit::WebPage::platformWillPerformEditingCommand((WebCore::Page **)a1);
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v41[0]);
  v9 = (uint64_t)result;
  if (result)
  {
    v10 = result + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v41[0];
  v41[0] = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1977B468CLL);
    }
    --*(_DWORD *)v12;
  }
  if (result)
  {
    v43[8] = 0;
    v43[24] = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator();
    if (*a3 != -1)
    {
      WebKit::EditingRange::toRange(v9, a4[4], (uint64_t)v42);
      if (v42[32])
      {
        v13 = *(_BYTE *)(a1 + 2026);
        *(_BYTE *)(a1 + 2026) = a4[1];
        WebCore::VisibleSelection::VisibleSelection();
        WebCore::FrameSelection::setSelection();
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v41);
        *(_BYTE *)(a1 + 2026) = v13;
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42);
    }
    if (*a4)
    {
      v15 = *(_QWORD *)(a1 + 32);
      v14 = a1 + 32;
      v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
      v17 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v17 = 2002;
      *(_QWORD *)(v17 + 8) = v16;
      *(_QWORD *)(v17 + 528) = v17 + 16;
      *(_QWORD *)(v17 + 536) = v17 + 16;
      *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v17 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      v41[0] = (WebCore::FocusController *)v17;
      (*(void (**)(uint64_t, WebCore::FocusController **, _QWORD))(*(_QWORD *)v14 + 32))(v14, v41, 0);
      v19 = v41[0];
      v41[0] = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v18);
        WTF::fastFree(v20, v21);
      }
    }
    v22 = *(WebCore **)(v9 + 296);
    if (v22 && (v23 = (WebCore::Node *)*((_QWORD *)v22 + 156)) != 0)
    {
      *((_DWORD *)v23 + 6) += 2;
      v25 = a4[3];
      v24 = a4 + 3;
      if (v25)
      {
        v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v26 || (v22 = *(WebCore **)(v26 + 96)) == 0)
          v22 = (WebCore *)WebCore::threadGlobalDataSlow(v22);
        if (!*((_QWORD *)v22 + 5))
          WebCore::ThreadGlobalData::initializeEventNames(v22);
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(_QWORD *)v23 + 48))(v23, v41[0]);
        v27 = v41[0];
        v41[0] = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 4) == 1)
            (*(void (**)(WebCore::FocusController *))(*(_QWORD *)v27 + 8))(v27);
          else
            --*((_DWORD *)v27 + 4);
        }
        v28 = 0;
        v22 = *(WebCore **)(v9 + 296);
      }
      else
      {
        v28 = 0;
      }
    }
    else
    {
      v23 = 0;
      v24 = a4 + 3;
      v28 = 1;
    }
    if (*(_QWORD *)(WebCore::Document::editor(v22) + 32))
      v29 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
    else
      v29 = 0;
    if (v29)
    {
      v30 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
      inserted = (WebCore *)WebCore::Editor::confirmComposition(v30, a2);
LABEL_42:
      if (*v24)
        v33 = v28;
      else
        v33 = 1;
      if ((v33 & 1) == 0)
      {
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v35 = *(_QWORD *)(StatusReg + 736);
        if (!v35 || (v36 = *(WebCore::ThreadGlobalData **)(v35 + 96)) == 0)
          v36 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(inserted);
        if (!*((_QWORD *)v36 + 5))
          WebCore::ThreadGlobalData::initializeEventNames(v36);
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(_QWORD *)v23 + 48))(v23, v41[0]);
        v37 = v41[0];
        v41[0] = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 4) == 1)
            v37 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v37 + 8))(v37);
          else
            --*((_DWORD *)v37 + 4);
        }
        v38 = *(_QWORD *)(StatusReg + 736);
        if (!v38 || (v39 = *(WebCore::ThreadGlobalData **)(v38 + 96)) == 0)
          v39 = (WebCore::ThreadGlobalData *)WebCore::threadGlobalDataSlow(v37);
        if (!*((_QWORD *)v39 + 5))
          WebCore::ThreadGlobalData::initializeEventNames(v39);
        WebCore::Event::create();
        (*(void (**)(WebCore::Node *, WebCore::FocusController *))(*(_QWORD *)v23 + 48))(v23, v41[0]);
        v40 = v41[0];
        v41[0] = 0;
        if (v40)
        {
          if (*((_DWORD *)v40 + 4) == 1)
          {
            (*(void (**)(WebCore::FocusController *))(*(_QWORD *)v40 + 8))(v40);
            if ((v28 & 1) == 0)
            {
LABEL_64:
              if (*((_DWORD *)v23 + 6) == 2)
              {
                if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v23);
              }
              else
              {
                *((_DWORD *)v23 + 6) -= 2;
              }
            }
LABEL_66:
            MEMORY[0x19AEB0CA8](v43);
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
          }
          --*((_DWORD *)v40 + 4);
        }
      }
      if ((v28 & 1) == 0)
        goto LABEL_64;
      goto LABEL_66;
    }
    if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v32 = *(WebCore::Document **)(v9 + 296);
    }
    else
    {
      v32 = *(WebCore::Document **)(v9 + 296);
      if (*(_BYTE *)(*((_QWORD *)v32 + 383) + 153) == 2)
      {
        WebCore::Document::editor(v32);
        inserted = (WebCore *)WebCore::Editor::deleteWithDirection();
        goto LABEL_42;
      }
    }
    WebCore::Document::editor(v32);
    inserted = (WebCore *)WebCore::Editor::insertText();
    goto LABEL_42;
  }
  return result;
}

uint64_t WebKit::WebPage::hasMarkedText(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  WebCore::FocusController *v11;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v11);
  v4 = v3;
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v11;
  }
  if (v3)
  {
    if (*(_QWORD *)(WebCore::Document::editor(*(WebCore::Document **)(v3 + 296)) + 32))
      v7 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
    v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v8 + 16))(v8, v7 != 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

uint64_t WebKit::WebPage::getMarkedRangeAsync(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  WebCore::Editor *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  WebCore::FocusController *v13[2];
  _QWORD v14[2];

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v13[0]);
  v4 = v3;
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v13[0];
  v13[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (v3)
  {
    v8 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
    WebCore::Editor::compositionRange(v8);
    v14[0] = WebKit::EditingRange::fromRange(v4, (uint64_t)v13);
    v14[1] = v9;
    v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *(_OWORD *)v13 = xmmword_1978CEF10;
    v12 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v12 + 16))(v12, v13);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

uint64_t WebKit::WebPage::getSelectedRangeAsync(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FocusController *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  WebCore::FocusController *v12[2];
  _QWORD v13[2];

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v3 = WebCore::FocusController::focusedOrMainFrame(v12[0]);
  v4 = v3;
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = v12[0];
  v12[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (v3)
  {
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v3 + 296) + 3064)
                                                                             + 56));
    v13[0] = WebKit::EditingRange::fromRange(v4, (uint64_t)v12);
    v13[1] = v8;
    v9 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *(_OWORD *)v12 = xmmword_1978CEF10;
    v11 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v11 + 16))(v11, v12);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t WebKit::WebPage::characterIndexForPointAsync(uint64_t result, int32x2_t *a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int8x8_t v9;
  uint64_t v10;
  WebCore::LocalFrame *v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::FocusController *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  IntPoint v20;
  _QWORD v21[5];
  WebCore::FocusController *v22;
  _BYTE v23[80];
  uint64_t v24;
  int v25;
  int v26;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = result;
    v7 = (unsigned int *)(v3 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
    v21[0] = vorr_s8((int8x8_t)(*(_QWORD *)&v9 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v9));
    WebCore::EventHandler::hitTestResultAtPoint();
    v10 = v24;
    if (v24)
    {
      v11 = (WebCore::LocalFrame *)WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v23);
    }
    else
    {
      WebCore::Page::checkedFocusController(*(WebCore::Page **)(v6 + 48));
      v11 = (WebCore::LocalFrame *)WebCore::FocusController::focusedOrMainFrame(v22);
    }
    v13 = (uint64_t)v11;
    if (v11)
    {
      v14 = (unsigned int *)((char *)v11 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    if (!v10)
    {
      v16 = v22;
      v22 = 0;
      if (v16)
      {
        if (!*(_DWORD *)v16)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        --*(_DWORD *)v16;
      }
    }
    if (v11)
    {
      v20.m_x = ((int)(v25 - (v12 & 0xFFFFFFC0) + 32) >> 6) + v25 / 64;
      v20.m_y = ((int)(v26 - (v12 & 0xFFFFFFC0) + 32) >> 6) + v26 / 64;
      WebCore::LocalFrame::rangeForPoint(v11, &v20);
      v17 = WebKit::EditingRange::fromRange(v13, (uint64_t)v21);
      v18 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
    }
    else
    {
      v19 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    MEMORY[0x19AEADBAC](v23);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  return result;
}

unsigned int *WebKit::WebPage::firstRectForCharacterRangeAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebCore::FocusController *v9;
  WebCore::ScrollView *v10;
  uint64_t BoundaryPoint;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::FocusController *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33[2];
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  WebCore::Node *v40;
  int v41;
  char v42;
  char v43;
  WebCore::Node *v44;
  _QWORD v45[2];
  WebCore::FocusController *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  int v53;
  WebCore::FocusController *v54;
  int v55;
  char v56;
  WebCore::Node *v57;
  int v58;
  uint64_t v59;
  int v60;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v5 = WebCore::FocusController::focusedOrMainFrame(v46);
  v6 = v5;
  if (v5)
  {
    v7 = (unsigned int *)(v5 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = v46;
  v46 = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      BoundaryPoint = 286;
      __break(0xC471u);
      goto LABEL_52;
    }
    --*(_DWORD *)v9;
  }
  if (!v5)
  {
    v46 = 0;
    v47 = 0;
    *(_OWORD *)v33 = xmmword_1978CEF10;
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **, WebCore::Node **))(*(_QWORD *)v14 + 16))(v14, &v46, v33);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  WebKit::EditingRange::toRange(v5, 0, (uint64_t)&v46);
  if (!v48)
  {
    v33[0] = 0;
    v33[1] = 0;
    v16 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::Node **, uint64_t))(*(_QWORD *)v16 + 16))(v16, v33, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_49;
  }
  v10 = *(WebCore::ScrollView **)(v6 + 288);
  if (v10)
    ++*((_DWORD *)v10 + 2);
  BoundaryPoint = WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
  if (!v48)
    goto LABEL_52;
  v33[0] = (WebCore::Node *)WebCore::Editor::firstRectForRange();
  v33[1] = v12;
  BoundaryPoint = WebCore::ScrollView::contentsToWindow(v10, (const WebCore::IntRect *)v33);
  v45[0] = BoundaryPoint;
  v45[1] = v13;
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
      BoundaryPoint = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 2);
  }
  if (!v48)
    goto LABEL_52;
  WebCore::makeContainerOffsetPosition();
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::endOfLine();
  BoundaryPoint = (uint64_t)v33[0];
  v33[0] = 0;
  if (BoundaryPoint)
  {
    if (*(_DWORD *)(BoundaryPoint + 24) == 2)
      goto LABEL_53;
    *(_DWORD *)(BoundaryPoint + 24) -= 2;
  }
  while (1)
  {
    if (v40)
      goto LABEL_27;
    WebCore::VisiblePosition::VisiblePosition();
    v17 = v33[0];
    v33[0] = 0;
    v18 = v40;
    v40 = v17;
    if (!v18)
      goto LABEL_26;
    if (*((_DWORD *)v18 + 6) != 2)
    {
      *((_DWORD *)v18 + 6) -= 2;
LABEL_26:
      v41 = (int)v33[1];
      v42 = BYTE4(v33[1]);
      v43 = v34;
      goto LABEL_27;
    }
    if ((*((_WORD *)v18 + 15) & 0x400) != 0)
      goto LABEL_26;
    WebCore::Node::removedLastRef(v18);
    v32 = v33[0];
    v41 = (int)v33[1];
    v42 = BYTE4(v33[1]);
    v43 = v34;
    v33[0] = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
LABEL_27:
    BoundaryPoint = WebCore::makeBoundaryPoint();
    if (!v39)
    {
      v33[0] = 0;
      v33[1] = 0;
      v29 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WebCore::Node **, uint64_t))(*(_QWORD *)v29 + 16))(v29, v33, a2);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      goto LABEL_41;
    }
    if (v48)
      break;
LABEL_52:
    __break(1u);
LABEL_53:
    if ((*(_WORD *)(BoundaryPoint + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)BoundaryPoint);
  }
  v19 = v46;
  v20 = v47;
  *((_DWORD *)v46 + 6) += 2;
  v53 = v20;
  v52 = 0;
  v54 = v19;
  v55 = v20;
  v56 = 1;
  v21 = v37;
  v37 = 0;
  v49 = v21;
  v50 = v38;
  v51 = 1;
  WebCore::SimpleRange::SimpleRange();
  v33[0] = v57;
  LODWORD(v33[1]) = v58;
  v22 = v59;
  v57 = 0;
  v59 = 0;
  v34 = v22;
  v35 = v60;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v59);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v57);
  v36 = 1;
  if (v51)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v49);
  if (v56)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v54);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v52);
  v23 = WebKit::EditingRange::fromRange(v6, (uint64_t)v33);
  v25 = v24;
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33);
  v26 = *(WebCore::Node **)a2;
  v27 = (char *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
  if (v23 > *(_QWORD *)a2)
    v26 = (WebCore::Node *)v23;
  if (v27 < (char *)v26)
    v26 = (WebCore::Node *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
  if (v27 >= (char *)v26 + v25)
    v27 = (char *)v26 + v25;
  v33[0] = v26;
  v33[1] = (WebCore::Node *)(v27 - (char *)v26);
  v28 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *, WebCore::Node **))(*(_QWORD *)v28 + 16))(v28, v45, v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_41:
  if (v39)
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v37);
  v30 = v40;
  v40 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  v31 = v44;
  v44 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
LABEL_49:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

uint64_t WebKit::WebPage::setCompositionAsync(WebCore::Page **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WebCore::FocusController *v13;
  WebCore::FocusController *v14;
  _BYTE v15[40];

  WebKit::WebPage::platformWillPerformEditingCommand(a1);
  WebCore::Page::checkedFocusController(a1[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v14);
  v10 = result;
  if (result)
  {
    v11 = (unsigned int *)(result + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (!*(_DWORD *)v13)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v13;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296) + 3064)
                                                                                                + 56)))
    {
      if (*a7 != -1)
      {
        WebKit::EditingRange::toRange(v10, 0, (uint64_t)v15);
        if (v15[32])
        {
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v14);
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
      }
      WebCore::Document::editor(*(WebCore::Document **)(v10 + 296));
      WebCore::Editor::setComposition();
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::setWritingSuggestion(WebCore::Page **this, const WTF::String *a2, const EditingRange *a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::FocusController *v8;

  WebKit::WebPage::platformWillPerformEditingCommand(this);
  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v8);
  v5 = result;
  if (result)
  {
    v6 = (unsigned int *)(result + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::setWritingSuggestion();
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::confirmCompositionAsync(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::Editor *v6;
  WebCore::FocusController *v7;

  WebKit::WebPage::platformWillPerformEditingCommand(this);
  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v7);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    v6 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(result + 296));
    WebCore::Editor::confirmComposition(v6);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::sendEditorStateUpdate(WebKit::WebPage *this)
{
  unsigned int *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  void *v14;
  IPC::Encoder *v15;
  WebCore::FocusController *v16[4];
  uint64_t v17;
  char v18;
  _QWORD v19[18];

  v19[17] = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 941) = 1;
  WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
  result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v16[0]);
  v3 = (uint64_t)result;
  if (result)
  {
    v4 = result + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = v16[0];
  v16[0] = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1977B55DCLL);
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    if (!*(_BYTE *)(WebCore::Document::editor(*((WebCore::Document **)result + 37)) + 88))
    {
      v7 = *(_QWORD *)(v3 + 296);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 1944) && !*(_BYTE *)(v7 + 3405))
        {
          *((_BYTE *)this + 940) = 0;
          WebKit::WebPage::editorState((uint64_t)this, 0, (uint64_t)v16);
          v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
          v9 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v9 = 1928;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)(v9 + 528) = v9 + 16;
          *(_QWORD *)(v9 + 536) = v9 + 16;
          *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v9 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
          v15 = (IPC::Encoder *)v9;
          IPC::ArgumentCoder<WebKit::EditorState,void>::encode((IPC::Encoder *)v9, (uint64_t *)v16);
          (*(void (**)(char *, IPC::Encoder **, _QWORD))(*((_QWORD *)this + 4) + 32))((char *)this + 32, &v15, 0);
          v11 = v15;
          v15 = 0;
          if (v11)
          {
            IPC::Encoder::~Encoder(v11, v10);
            WTF::fastFree(v12, v13);
          }
          if (!v18)
            WebKit::WebPage::scheduleFullEditorStateUpdate(this);
          std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
          if (v18)
            WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v17, v14);
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v6);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    if (!*(_BYTE *)(WebCore::Document::editor(*(WebCore::Document **)(result + 296)) + 488) && !*((_BYTE *)this + 2026))
      WebKit::WebPage::scheduleFullEditorStateUpdate(this);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

uint64_t WebKit::WebPage::didChangeSelection(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t result;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)this);
  result = WebCore::Page::updateStateForSelectedSuggestionIfNeeded(*((WebCore::Page **)this + 6));
  v5 = *((unsigned __int8 *)this + 1680);
  *((_BYTE *)this + 1680) = 0;
  if (v5)
  {
    CFRetain(*((CFTypeRef *)this + 1));
    v6 = (unsigned int *)((char *)a2 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E34FA488;
    v8[1] = this;
    v8[2] = a2;
    v9 = (uint64_t)v8;
    WTF::callOnMainRunLoop();
    result = v9;
    if (v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

void WebKit::WebPage::elementDidRefocus(WebKit::WebPage *a1, WebCore::Element *a2, uint64_t a3)
{
  WebKit::WebPage::elementDidFocus(a1, a2, a3);
  if (*((_BYTE *)a1 + 912))
    WebKit::WebPage::scheduleFullEditorStateUpdate(a1);
}

void WebKit::WebPage::elementDidFocus(WebKit::WebPage *this, WebCore::Element *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::FullscreenManager *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  char v14;
  uint64_t (*v15)();
  CFTypeRef *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  CFTypeRef *v24;
  uint64_t v25;
  CFTypeRef *v26;
  WebKit::WebProcess *v27;
  CFTypeRef *v28;
  CFTypeRef *v29;
  void *v30;
  IPC::Encoder *v31;
  _BYTE v32[416];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = v6 & 0xFDFFFFFFFFFFFFLL;
  if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)this + 1584));
  if ((*((WebCore::Element **)this + 115) == a2 || *((WebCore::Element **)this + 116) == a2) && *((_BYTE *)this + 1256))
  {
    WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded((uint64_t)this, a2);
    *((_DWORD *)a2 + 6) += 2;
    v7 = *((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = a2;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    v8 = *((_QWORD *)this + 116);
    *((_QWORD *)this + 116) = 0;
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
  }
  else if ((*((_WORD *)a2 + 14) & 0x10) != 0
         && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6218] + 24)
         || ((*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)a2 + 872))(a2) & 1) != 0
         || WebCore::Node::computeEditability())
  {
    v9 = *((_QWORD *)this + 115);
    *((_DWORD *)a2 + 6) += 2;
    *((_QWORD *)this + 115) = a2;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    *((_BYTE *)this + 936) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1992);
    if (!v10)
      v10 = WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8));
    if (*(_QWORD *)(v10 + 56))
    {
      v11 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 1992);
      if (!v11)
        v11 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8));
      WebCore::FullscreenManager::cancelFullscreen(v11);
    }
    if ((WebCore::Element *)v9 != a2 && (*((_BYTE *)this + 912) || *((_BYTE *)this + 1492)))
      *((_BYTE *)this + 1680) = 1;
    WebKit::WebPage::focusedElementInformation((WebCore::Page **)this, v32);
    if (v33)
    {
      v30 = 0;
      v12 = *((_QWORD *)this + 44);
      WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8), &v31);
      v13 = v31;
      (*(void (**)(uint64_t, WebKit::WebPage *, WebCore::Element *, IPC::Encoder *, _QWORD, void **))(*(_QWORD *)v12 + 96))(v12, this, a2, v31, *((unsigned __int8 *)this + 912), &v30);
      if (v13)
        CFRelease(*((CFTypeRef *)v13 + 1));
      if (!v33)
        __break(1u);
      v32[368] = *(_BYTE *)(a3 + 5);
      v14 = *((_BYTE *)this + 912);
      if (*((_QWORD *)this + 116))
        v15 = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::unspecifiedBoolTypeInstance;
      else
        v15 = 0;
      {
        v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v27);
      }
      v31 = (IPC::Encoder *)&off_1E34E0698;
      WebKit::UserData::transform(v30, (uint64_t)&v31, (WebKit **)&v28);
      v16 = v28;
      if (v28)
        CFRetain(v28[1]);
      v17 = v15 != 0;
      v29 = v16;
      v18 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
      v19 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v19 = 1930;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(v19 + 528) = v19 + 16;
      *(_QWORD *)(v19 + 536) = v19 + 16;
      *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v19 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
      v31 = (IPC::Encoder *)v19;
      IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode((IPC::Encoder *)v19, (uint64_t)v32);
      *IPC::Encoder::grow((IPC::Encoder *)v19, 1uLL, 1) = v14;
      *IPC::Encoder::grow((IPC::Encoder *)v19, 1uLL, 1) = v17;
      LOWORD(v18) = *((_WORD *)this + 457);
      *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v19, 2uLL, 2) = v18;
      IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v19, (uint64_t *)&v29);
      (*(void (**)(char *, IPC::Encoder **, _QWORD))(*((_QWORD *)this + 4) + 32))((char *)this + 32, &v31, 0);
      v21 = v31;
      v31 = 0;
      if (v21)
      {
        IPC::Encoder::~Encoder(v21, v20);
        WTF::fastFree(v22, v23);
      }
      if (v16)
        CFRelease(v16[1]);
      v24 = v28;
      v28 = 0;
      if (v24)
        CFRelease(v24[1]);
      v25 = *((_QWORD *)this + 116);
      *((_QWORD *)this + 116) = 0;
      if (v25)
      {
        if (*(_DWORD *)(v25 + 24) == 2)
        {
          if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v25);
        }
        else
        {
          *(_DWORD *)(v25 + 24) -= 2;
        }
      }
      v26 = (CFTypeRef *)v30;
      v30 = 0;
      if (v26)
        CFRelease(v26[1]);
      if (v33)
        WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v32, v20);
    }
  }
}

uint64_t WebKit::WebPage::elementDidBlur(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(WebCore::Element **)(this + 920) == a2)
  {
    v2 = this;
    *(_QWORD *)(this + 920) = 0;
    v3 = *(_QWORD *)(this + 928);
    *(_QWORD *)(v2 + 928) = a2;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E34FA4B0;
    v4[1] = v2;
    v5 = (uint64_t)v4;
    WTF::callOnMainRunLoop();
    this = v5;
    if (v5)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_BYTE *)(v2 + 936) = 0;
    *(_BYTE *)(v2 + 1680) = 0;
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::focusedElementDidChangeInputMode(IPC::Encoder *result, uint64_t a2, char a3)
{
  IPC::Encoder *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  if (*((_QWORD *)result + 115) == a2)
  {
    v4 = result;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 872))(a2) & 1) != 0
      || (result = (IPC::Encoder *)WebCore::Node::computeEditability(), (_DWORD)result))
    {
      v6 = *((_QWORD *)v4 + 4);
      v5 = (char *)v4 + 32;
      v7 = (*(uint64_t (**)(char *))(v6 + 56))(v5);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 1939;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v12 = (IPC::Encoder *)v8;
      *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
      (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
      result = v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v9);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didEndUserTriggeredSelectionChanges(WebCore::Page **this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::FocusController *v6;

  WebCore::Page::checkedFocusController(this[6]);
  result = WebCore::FocusController::focusedOrMainFrame(v6);
  v3 = result;
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    if (!*(_BYTE *)(WebCore::Document::editor(*(WebCore::Document **)(result + 296)) + 88))
      WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)this);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::discardedComposition(WebKit::WebPage *this, const WebCore::Document *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = (char *)this + 32;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1848;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v11, 0);
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
    result = (unsigned int *)WTF::fastFree(v9, v10);
  }
  if (*((_QWORD *)a2 + 243))
  {
    if (!*((_BYTE *)a2 + 3405))
      return WebKit::WebPage::sendEditorStateUpdate(this);
  }
  return result;
}

unsigned int *WebKit::WebPage::canceledComposition(WebKit::WebPage *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v10;

  v2 = (char *)this + 32;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1848;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v2 + 32))(v2, &v10, 0);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  return WebKit::WebPage::sendEditorStateUpdate(this);
}

uint64_t WebKit::WebPage::navigateServiceWorkerClient(WebCore::Document *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  v7 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v6, a2);
  if (v7)
  {
    v8 = v7;
    *(_DWORD *)(v7 + 24) += 2;
    result = WebCore::Document::navigateFromServiceWorker();
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebPage::setAlwaysShowsHorizontalScroller(uint64_t this, int a2)
{
  uint64_t v3;
  _DWORD *v4;

  if (*(unsigned __int8 *)(this + 189) != a2)
  {
    *(_BYTE *)(this + 189) = a2;
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 48) + 160) + 56))(*(_QWORD *)(*(_QWORD *)(this + 48) + 160));
    v4 = (_DWORD *)v3;
    if (v3)
    {
      ++*(_DWORD *)(v3 + 8);
      if (a2)
      {
LABEL_8:
        this = WebCore::ScrollView::setHorizontalScrollbarMode();
        if (v4[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        --v4[2];
        return this;
      }
    }
    else if ((a2 & 1) != 0)
    {
      return WebCore::ScrollView::setHorizontalScrollbarMode();
    }
    *(_BYTE *)(v3 + 313) = 0;
    goto LABEL_8;
  }
  return this;
}

uint64_t WebCore::ScrollView::setHorizontalScrollbarMode()
{
  WebCore::ScrollView::scrollbarModes();
  return WebCore::ScrollView::setScrollbarModes();
}

uint64_t WebKit::WebPage::setAlwaysShowsVerticalScroller(uint64_t this, int a2)
{
  uint64_t v3;
  _DWORD *v4;

  if (*(unsigned __int8 *)(this + 190) != a2)
  {
    *(_BYTE *)(this + 190) = a2;
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 48) + 160) + 56))(*(_QWORD *)(*(_QWORD *)(this + 48) + 160));
    v4 = (_DWORD *)v3;
    if (v3)
    {
      ++*(_DWORD *)(v3 + 8);
      if (a2)
      {
LABEL_8:
        this = WebCore::ScrollView::setVerticalScrollbarMode();
        if (v4[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        --v4[2];
        return this;
      }
    }
    else if ((a2 & 1) != 0)
    {
      return WebCore::ScrollView::setVerticalScrollbarMode();
    }
    *(_BYTE *)(v3 + 314) = 0;
    goto LABEL_8;
  }
  return this;
}

uint64_t WebCore::ScrollView::setVerticalScrollbarMode()
{
  WebCore::ScrollView::scrollbarModes();
  return WebCore::ScrollView::setScrollbarModes();
}

WebKit::WebPage *WebKit::WebPage::setSelectTrailingWhitespaceEnabled(WebKit::WebPage *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*((_QWORD *)this + 6) + 112);
  v3 = *(_QWORD *)(v2 + 696);
  if (((v3 >> 3) & 1) != a2)
  {
    v4 = v2 + 664;
    v5 = *(unsigned int *)(v2 + 720) | ((unint64_t)*(unsigned __int8 *)(v2 + 724) << 32);
    v6 = *(_QWORD *)(v2 + 712);
    v7 = *(_QWORD *)(v2 + 704);
    v8 = *(_QWORD *)(v2 + 688);
    v9 = *(_QWORD *)(v2 + 680);
    v10 = *(_QWORD *)(v2 + 672);
    v11 = *(_QWORD *)(v2 + 664);
    v12 = 8;
    if (!a2)
      v12 = 0;
    *(_QWORD *)v4 = v11;
    *(_QWORD *)(v4 + 8) = v10;
    *(_QWORD *)(v4 + 16) = v9;
    *(_QWORD *)(v4 + 24) = v8;
    *(_QWORD *)(v4 + 40) = v7;
    *(_QWORD *)(v4 + 48) = v6;
    *(_QWORD *)(v4 + 32) = v3 & 0xFFFFFFFFFFFFFFF7 | v12;
    *(_DWORD *)(v4 + 56) = v5;
    *(_BYTE *)(v4 + 60) = BYTE4(v5);
    return (WebKit::WebPage *)WebKit::WebPage::setSmartInsertDeleteEnabled(this, a2 != 1);
  }
  return this;
}

uint64_t WebKit::WebPage::isWebTransportEnabled(WebKit::WebPage *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 704) >> 33) & 1;
}

uint64_t WebKit::WebPage::canShowMIMEType(WebKit::WebPage *this, const WTF::String *a2)
{
  _QWORD *v4;
  uint64_t canShowMIMEType;
  _QWORD *v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34FA500;
  v4[1] = this;
  v7 = v4;
  canShowMIMEType = WebKit::WebPage::canShowMIMEType((uint64_t)this, a2, &v7);
  (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return canShowMIMEType;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v21;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

_DWORD *WebKit::WebPage::didFinishCheckingText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _DWORD *result;
  _DWORD *v7;
  uint64_t v8;

  v8 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(v4, v5, &v7);
  result = v7;
  if (v7)
  {
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 24))(v7, a3);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

_DWORD *WebKit::WebPage::didCancelCheckingText(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;

  v6 = a2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(v2, v3, &v5);
  result = v5;
  if (v5)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void WebKit::WebPage::willReplaceMultipartContent(WebKit::WebPage *this, const WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;
  int v7;

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
      {
        *((float *)this + 380) = (*(float (**)(_QWORD))(**((_QWORD **)this + 9) + 160))(*((_QWORD *)this + 9));
        *((_DWORD *)this + 381) = v5;
        *((_DWORD *)this + 382) = v6;
        *((_DWORD *)this + 383) = v7;
      }
    }
  }
}

unsigned int *WebKit::WebPage::startTextManipulationForFrame(unsigned int *this, WebCore::Frame *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;

  if (!*((_BYTE *)a2 + 144))
  {
    v2 = (uint64_t)this;
    v3 = (unsigned int *)((char *)a2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = *((_QWORD *)a2 + 37);
    if (!v5)
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
    v6 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v6 + 2;
    if (*(_QWORD *)(v5 + 3040))
    {
LABEL_19:
      if (v6)
      {
        *(_DWORD *)(v5 + 24) = v6;
      }
      else if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
    }
    if (*((_BYTE *)this + 2360))
    {
      v7 = this[589];
      v22 = 0;
      v23 = 0;
      v24 = v7;
      if (!(_DWORD)v7)
      {
LABEL_14:
        WebCore::Document::textManipulationController((WebCore::Document *)v5);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 24), v2 + 16);
        v16 = *(unsigned int **)(v2 + 24);
        if (v16)
        {
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v18 = &off_1E34FA6E8;
        v18[1] = v16;
        v21 = v18;
        WebCore::TextManipulationController::startObservingParagraphs();
        v20 = v21;
        v21 = 0;
        if (v20)
          (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v19);
        v6 = *(_DWORD *)(v5 + 24) - 2;
        goto LABEL_19;
      }
      if (!(v7 >> 27))
      {
        v8 = WTF::fastMalloc((WTF *)(32 * v7));
        v23 = v7;
        v22 = v8;
        v9 = *(unsigned int *)(v2 + 2356);
        if ((_DWORD)v9)
        {
          v10 = *(_QWORD *)(v2 + 2344);
          v11 = v10 + 32 * v9;
          v12 = (_DWORD *)(v8 + 24);
          v13 = v10 + 8;
          do
          {
            v14 = v13 - 8;
            *((_BYTE *)v12 - 24) = *(_BYTE *)(v13 - 8);
            *((_BYTE *)v12 - 16) = 0;
            *v12 = -1;
            v15 = *(unsigned int *)(v13 + 16);
            if ((_DWORD)v15 != -1)
            {
              ((void (*)(_QWORD **, _DWORD *, uint64_t))off_1E34FA6C0[v15])(&v21, v12 - 4, v13);
              *v12 = v15;
            }
            v12 += 8;
            v13 += 32;
          }
          while (v14 + 32 != v11);
        }
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
  }
  return this;
}

BOOL WebKit::WebPage::usesEphemeralSession(WebKit::WebPage *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  WebKit::WebProcess *v4;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v4);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *((unsigned __int8 *)v1 + 672);
  if (*((_BYTE *)v1 + 672))
  {
    v2 = *((_QWORD *)v1 + 83);
    if ((v2 & 0x8000000000000000) == 0)
      return 0;
  }
  else
  {
    __break(1u);
  }
  return v2 != -1;
}

void WebKit::WebPage::didSameDocumentNavigationForFrame(WebKit::WebPage *this, WebKit::WebFrame *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  CFTypeRef *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  CFTypeRef *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef *v22;
  WebKit::WebProcess *v23;
  IPC::Encoder *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[5];
  CFTypeRef *v30;
  CFTypeRef *v31;
  void *v32;

  v32 = 0;
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (*(_BYTE *)(v5 + 144))
      v6 = 0;
    else
      v6 = v5;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 280) + 88) + 2528);
    if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
      *((_QWORD *)this + 237) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(MEMORY[0x118] + 88) + 2528);
  }
  (*(void (**)(_QWORD, WebKit::WebPage *, WebKit::WebFrame *, _QWORD, void **))(**((_QWORD **)this + 45)
                                                                                         + 96))(*((_QWORD *)this + 45), this, a2, 0, &v32);
  *(_OWORD *)v29 = *((_OWORD *)a2 + 5);
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (*(_BYTE *)(v8 + 144))
    v8 = 0;
  v9 = (uint64_t *)(*(_QWORD *)(v8 + 296) + 736);
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v23);
  }
  v10 = (char *)this + 32;
  v24 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(v32, (uint64_t)&v24, (WebKit **)&v30);
  v11 = v30;
  if (v30)
    CFRetain(v30[1]);
  v31 = v11;
  v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 56))((char *)this + 32);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 1915;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v24 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, v29);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v7;
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = 0;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, v9);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v13, (uint64_t *)&v31);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))((char *)this + 32, &v24, 0);
  v15 = v24;
  v24 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v16, v17);
  }
  if (v11)
    CFRelease(v11[1]);
  v18 = v30;
  v30 = 0;
  if (v18)
    CFRelease(v18[1]);
  WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 20, v29);
  v19 = *((_QWORD *)this + 20);
  if (v19)
  {
    v21 = *(unsigned int *)(v19 - 4);
    v20 = v19 + 8 * v21;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v24 = (WebKit::WebPage *)((char *)this + 160);
  v25 = v20;
  v26 = v20;
  v27 = v20;
  v28 = v19 + 8 * v21;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
  while (v29[1] != v25)
  {
    WebKit::PluginView::didSameDocumentNavigationForFrame(*(unsigned __int8 **)(*(_QWORD *)v29[1] + 8), a2);
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v29);
  }
  v22 = (CFTypeRef *)v32;
  v32 = 0;
  if (v22)
    CFRelease(v22[1]);
}

uint64_t WebKit::WebPage::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  if (atomic_load((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount))
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    result = 7805;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebPage::currentSelectionAsRange@<X0>(WebKit **this@<X0>, WebCore::Page *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = WebKit::frameWithSelection(this[6], a2);
  if (result)
    return WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(result + 296)
                                                                                                + 3064)
                                                                                    + 56));
  *a3 = 0;
  a3[32] = 0;
  return result;
}

IPC::Encoder *WebKit::WebPage::loadAndDecodeImage(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebProcess *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  WebKit::WebProcess *v24;
  uint64_t v25[2];
  IPC::Encoder *v26;

  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v24);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v12) + 24);
  v14 = *a6;
  *a6 = 0;
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = &off_1E34FA528;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 16) = a3;
  *(_BYTE *)(v15 + 24) = a4;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 235;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v26 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v17, a2);
  v18 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v18;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = a5;
  v25[0] = v15;
  v25[1] = v16;
  IPC::Connection::sendMessageWithAsyncReply(v13, &v26, v25, 0, 0);
  v20 = v25[0];
  v25[0] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

uint64_t WebKit::WebPage::flushPendingEditorStateUpdate(uint64_t this)
{
  WebKit::WebPage *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::FocusController *v5;

  if (*(_BYTE *)(this + 940))
  {
    v1 = (WebKit::WebPage *)this;
    WebCore::Page::checkedFocusController(*(WebCore::Page **)(this + 48));
    this = WebCore::FocusController::focusedOrMainFrame(v5);
    v2 = this;
    if (this)
    {
      v3 = (unsigned int *)(this + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
    if (v5)
    {
      if (!*(_DWORD *)v5)
      {
        this = 286;
        __break(0xC471u);
        return this;
      }
      --*(_DWORD *)v5;
    }
    if (this)
    {
      if (!*(_BYTE *)(WebCore::Document::editor(*(WebCore::Document **)(this + 296)) + 88))
        WebKit::WebPage::sendEditorStateUpdate(v1);
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::updateWebsitePolicies(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  WebCore::LocalFrame *shouldIgnoreMetaViewport;

  v2 = *((_QWORD *)result + 6);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)(*((_QWORD *)result + 11) + 24);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && *(_BYTE *)(v5 + 144) && (result = *(unsigned int **)(v5 + 264)) != 0)
    {
      return WebKit::WebRemoteFrameClient::applyWebsitePolicies(result, (_WORD *)a2);
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 160);
      if (v6)
        v7 = *(_BYTE *)(v6 + 144) == 0;
      else
        v7 = 0;
      if (v7)
      {
        v8 = (unsigned int *)(v6 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = *(_DWORD **)(*(_QWORD *)(v6 + 280) + 88);
        if (v10)
        {
          ++v10[6];
          *((_BYTE *)v3 + 2248) = *(_BYTE *)(a2 + 102);
          WebKit::WebsitePoliciesData::applyToDocumentLoader(a2, (uint64_t)v10);
          WebCore::Page::updateMediaElementRateChangeRestrictions(*((WebCore::Page **)v3 + 6));
          shouldIgnoreMetaViewport = (WebCore::LocalFrame *)WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v3);
          WebKit::setCanIgnoreViewportArgumentsToAvoidExcessiveZoomIfNeeded((_QWORD *)v3 + 118, (WebCore::ViewportConfiguration *)v6, shouldIgnoreMetaViewport);
          if (v10[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
          else
            --v10[6];
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::extendIncrementalRenderingSuppression(WebKit::WebPage *this)
{
  unsigned int *v2;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;

  v10 = 0;
  v2 = (unsigned int *)((char *)this + 1824);
  v3 = (uint64_t *)((char *)this + 1816);
  v4 = (unsigned int *)((char *)this + 1824);
  do
  {
    do
    {
      v5 = *v4;
      v10 = *v4 + 1;
      v4 = &v10;
    }
    while (v5 > 0xFFFFFFFD);
    v4 = &v10;
  }
  while (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>(v3, (int *)&v10));
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v3, (int *)&v10, (uint64_t)&v9);
  v6 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v6)
    v7 = *(_BYTE *)(v6 + 144) == 0;
  else
    v7 = 0;
  if (v7)
    WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(*(WebCore::LocalFrameView **)(v6 + 288));
  result = v10;
  *v2 = v10;
  return result;
}

_DWORD *WebKit::WebPage::stopExtendingIncrementalRenderingSuppression(WebKit::WebPage *this, int a2)
{
  uint64_t *v3;
  _DWORD *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v8;
  int v9;

  v9 = a2;
  v3 = (uint64_t *)((char *)this + 1816);
  result = (_DWORD *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>((uint64_t *)this + 227, &v9);
  v5 = *((_QWORD *)this + 227);
  if (v5)
  {
    v6 = (_DWORD *)(v5 + 4 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(v3, result);
  v7 = *(_QWORD *)(*((_QWORD *)this + 6) + 160);
  if (v7)
    v8 = *(_BYTE *)(v7 + 144) == 0;
  else
    v8 = 0;
  if (v8)
    return (_DWORD *)WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(*(WebCore::LocalFrameView **)(v7 + 288));
  return result;
}

uint64_t WebKit::WebPage::setScrollbarOverlayStyle(uint64_t result, uint64_t a2)
{
  __int16 v2;
  uint64_t v3;
  BOOL v4;

  v2 = a2 | 0x100;
  if ((a2 & 0xFF00000000) == 0)
    v2 = 0;
  *(_WORD *)(result + 1829) = v2;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 48) + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (v4)
    return WebCore::LocalFrameView::recalculateScrollbarOverlayStyle(*(WebCore::LocalFrameView **)(v3 + 288));
  return result;
}

WTF::StringImpl *WebKit::WebPage::getBytecodeProfile(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::JSONImpl::Value *v9;
  WTF::StringImpl *v10;

  v3 = (uint64_t *)MEMORY[0x1E0DD1108];
  v4 = *MEMORY[0x1E0DD1108];
  if (!*MEMORY[0x1E0DD1108])
    v4 = WebCore::commonVMSlow(0);
  if (*(_QWORD *)(v4 + 93016))
  {
    v8 = *v3;
    if (!*v3)
      v8 = WebCore::commonVMSlow(0);
    JSC::Profiler::Database::toJSON(*(JSC::Profiler::Database **)(v8 + 93016));
    WTF::JSONImpl::Value::toJSONString(v9);
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v9;
    }
  }
  else
  {
    v10 = 0;
  }
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPage::getSamplingProfilerOutput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[21];

  v11[20] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0DD1108];
  if (!*MEMORY[0x1E0DD1108])
    v3 = WebCore::commonVMSlow(0);
  if (*(_QWORD *)(v3 + 93368))
  {
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v11);
    JSC::SamplingProfiler::reportTopFunctions();
    JSC::SamplingProfiler::reportTopBytecodes();
    WTF::StringPrintStream::toString((WTF::StringPrintStream *)v11);
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v11);
  }
  else
  {
    v11[0] = 0;
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v9 = v11[0];
    v11[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

void WebKit::WebPage::postMessage(WebKit::WebPage *this, const WTF::String *a2, API::Object *a3)
{
  char *v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WebKit *v12;
  API::Object *v13;
  WebKit::WebProcess *v14;
  WebKit::WebProcess *v15;
  WebKit *v16;
  WebKit *v17;
  IPC::Encoder *v18;

  v4 = (char *)this + 32;
  {
    v13 = a3;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v14);
    a3 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  v18 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(a3, (uint64_t)&v18, &v16);
  v5 = v16;
  v16 = 0;
  v17 = v5;
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 56))(v4);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1949;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v7, (uint64_t *)&v17);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v18, 0);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  if (v5)
    CFRelease(*((CFTypeRef *)v5 + 1));
  v12 = v16;
  v16 = 0;
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
}

void WebKit::WebPage::postMessageWithAsyncReply(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];
  IPC::Encoder *v20;

  v7 = a1 + 32;
  if (a3)
    CFRetain(*(CFTypeRef *)(a3 + 8));
  v18 = a3;
  v8 = *a4;
  *a4 = 0;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1950;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v20 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v10, &v18);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34FA590;
  v11[1] = v8;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19[0] = v11;
  v19[1] = v12;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v20, v19, 0);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  if (a3)
    CFRelease(*(CFTypeRef *)(a3 + 8));
}

void WebKit::WebPage::postMessageIgnoringFullySynchronousMode(WebKit::WebPage *this, const WTF::String *a2, API::Object *a3)
{
  char *v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WebKit *v12;
  API::Object *v13;
  WebKit::WebProcess *v14;
  WebKit::WebProcess *v15;
  WebKit *v16;
  WebKit *v17;
  IPC::Encoder *v18;

  v4 = (char *)this + 32;
  {
    v13 = a3;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v15 = WebKit::WebProcess::WebProcess(v14);
    a3 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v15;
  }
  v18 = (IPC::Encoder *)&off_1E34E0698;
  WebKit::UserData::transform(a3, (uint64_t)&v18, &v16);
  v5 = v16;
  v16 = 0;
  v17 = v5;
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 56))(v4);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1949;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v18 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v7, (uint64_t *)&v17);
  (*(void (**)(char *, IPC::Encoder **, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v18, 4);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  if (v5)
    CFRelease(*((CFTypeRef *)v5 + 1));
  v12 = v16;
  v16 = 0;
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
}

void WebKit::WebPage::postSynchronousMessageForTesting(uint64_t a1, uint64_t *a2, const void *a3, WebKit **a4)
{
  WebKit *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit *v12;
  WebKit *v13;
  WebKit *v14;
  WebKit *v15;
  WebKit *v16;
  WebKit::WebProcess *v17;
  WebKit::WebProcess *v18;
  const void *v19;
  WebKit *v20;
  WebKit *v21;
  uint64_t *v22[2];
  _QWORD v23[2];
  int v24;

  {
    v19 = a3;
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v18 = WebKit::WebProcess::WebProcess(v17);
    a3 = v19;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
  }
  v23[0] = &off_1E34E0698;
  WebKit::UserData::transform(a3, (uint64_t)v23, &v20);
  v7 = v20;
  v20 = 0;
  v21 = v7;
  v22[0] = a2;
  v22[1] = (uint64_t *)&v21;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = a1 + 32;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  if (v11)
  {
    IPC::Connection::sendSync<Messages::WebPageProxy::HandleSynchronousMessage>(v11, v22, v10, 1, (uint64_t)v23, INFINITY);
  }
  else
  {
    LOBYTE(v23[0]) = 3;
    v24 = 1;
  }
  v12 = v21;
  v21 = 0;
  if (v12)
    CFRelease(*((CFTypeRef *)v12 + 1));
  v13 = v20;
  v20 = 0;
  if (v13)
    CFRelease(*((CFTypeRef *)v13 + 1));
  if (!v24)
  {
    v22[0] = (uint64_t *)&off_1E34E0668;
    WebKit::UserData::transform((CFTypeRef)v23[1], (uint64_t)v22, &v21);
    v15 = v21;
    v21 = 0;
    v16 = *a4;
    *a4 = v15;
    if (!v16)
      goto LABEL_16;
    CFRelease(*((CFTypeRef *)v16 + 1));
    v14 = v21;
    v21 = 0;
    if (!v14)
      goto LABEL_16;
    goto LABEL_15;
  }
  v14 = *a4;
  *a4 = 0;
  if (v14)
LABEL_15:
    CFRelease(*((CFTypeRef *)v14 + 1));
LABEL_16:
  if (v24 != -1)
    ((void (*)(uint64_t **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy24HandleSynchronousMessageEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v24])(v22, v23);
}

IPC::Encoder *WebKit::WebPage::imageOrMediaDocumentSizeChanged(WebKit::WebPage *this, const WebCore::IntSize *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 32;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1958;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebPage::addUserScript(WTF *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  void *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  void *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[11];

  v10 = WTF::aboutBlankURL(a1);
  v11 = *(WTF::StringImpl **)v10;
  if (*(_QWORD *)v10)
    *(_DWORD *)v11 += 2;
  v20[1] = 0;
  v21 = v11;
  v12 = *(_OWORD *)(v10 + 24);
  v22 = *(_OWORD *)(v10 + 8);
  v23 = v12;
  v19[1] = 0;
  v20[0] = 0;
  v19[0] = 0;
  MEMORY[0x19AEAC7C0](v24, a2, &v21, v20, v19, a5, a4, 0);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v14);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (_DWORD *)*((_QWORD *)a1 + 78);
  ++v17[2];
  LOBYTE(v21) = 0;
  LOBYTE(v22) = 0;
  WebKit::WebUserContentController::addUserScriptInternal((uint64_t)v17, a3, (__int128 *)&v21, v24, 0);
  if (v17[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  else
    --v17[2];
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v24, v18);
}

WTF::StringImpl *WebKit::WebPage::addUserStyleSheet(WTF *a1)
{
  void *v2;
  void *v3;
  WebKit::InjectedBundleScriptWorld *v4;
  WebCore::UserContentProvider *v5;
  WebKit::InjectedBundleScriptWorld *v6;
  void *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _QWORD v12[2];
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  WTF::aboutBlankURL(a1);
  v17 = 0uLL;
  v12[0] = 0;
  v12[1] = 0;
  WebCore::UserStyleSheet::UserStyleSheet();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v2);
  v4 = (WebKit::InjectedBundleScriptWorld *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v3);
  v5 = (WebCore::UserContentProvider *)*((_QWORD *)a1 + 78);
  ++*((_DWORD *)v5 + 2);
  v6 = WebKit::InjectedBundleScriptWorld::normalWorld(v4);
  LOBYTE(v17) = 0;
  BYTE8(v17) = 0;
  WebKit::WebUserContentController::addUserStyleSheetInternal((uint64_t)v5, (uint64_t)v6, &v17, (uint64_t)&v13);
  WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(v5);
  if (*((_DWORD *)v5 + 2) == 1)
    (*(void (**)(WebCore::UserContentProvider *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v8);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebPage::removeAllUserContent(WebKit::WebPage *this, void *a2)
{
  WebKit::WebUserContentController *v2;
  uint64_t result;

  v2 = (WebKit::WebUserContentController *)*((_QWORD *)this + 78);
  ++*((_DWORD *)v2 + 2);
  result = WebKit::WebUserContentController::removeAllUserContent(v2, a2);
  if (*((_DWORD *)v2 + 2) == 1)
    return (*(uint64_t (**)(WebKit::WebUserContentController *))(*(_QWORD *)v2 + 8))(v2);
  --*((_DWORD *)v2 + 2);
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidChangeIntrinsicContentSize>(uint64_t a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1864;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::didRestoreScrollPosition(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1913;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::gamepadsRecentlyAccessed(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1942;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebPage::didGetLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(_DWORD **)(*(_QWORD *)(v4 + 280) + 88);
    if (v8)
    {
      ++v8[6];
      v9 = *a4;
      *a4 = 0;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34FA5B8;
      v10[1] = v9;
      v16 = v10;
      WebCore::DocumentLoader::didGetLoadDecisionForIcon();
      v11 = v16;
      v16 = 0;
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      if (v8[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
      else
        --v8[6];
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v14 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 16))(v14, &v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      IPC::SharedBufferReference::~SharedBufferReference((IPC::SharedBufferReference *)&v16, v15);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 16))(v12, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    IPC::SharedBufferReference::~SharedBufferReference((IPC::SharedBufferReference *)&v16, v13);
  }
}

WebKit::WebURLSchemeHandlerProxy **WebKit::WebPage::stopAllURLSchemeTasks(WebKit::WebPage *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  WebKit::WebURLSchemeHandlerProxy *v8;
  void *v9;
  WebKit::WebURLSchemeHandlerProxy *v10;
  WebKit::WebURLSchemeTaskProxy **v11;
  WebKit::WebURLSchemeTaskProxy **v12;
  WebKit::WebURLSchemeTaskProxy **v13;
  WebKit::WebURLSchemeHandlerProxy **result;
  WebKit::WebURLSchemeTaskProxy **v15;
  WebKit::WebURLSchemeTaskProxy *v16;
  char v17[24];
  WebKit::WebURLSchemeHandlerProxy *v18;
  WebKit::WebURLSchemeHandlerProxy **v19;

  v19 = 0;
  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 260);
  v3 = v2;
  v5 = v4;
  v6 = *((_QWORD *)this + 260);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != v2)
  {
    do
    {
      v8 = (WebKit::WebURLSchemeHandlerProxy *)v3[1];
      if (v8)
        ++*(_DWORD *)v8;
      v18 = v8;
      WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::add((uint64_t *)&v19, &v18, (uint64_t)v17);
      v10 = v18;
      v18 = 0;
      if (v10)
        WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v10, v9);
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_13;
      }
      v3 = v5;
LABEL_13:
      ;
    }
    while (v3 != v7);
  }
  v12 = (WebKit::WebURLSchemeTaskProxy **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v19);
  v13 = v11;
  result = v19;
  if (v19)
    v15 = &v19[*((unsigned int *)v19 - 1)];
  else
    v15 = 0;
  if (v15 != v12)
  {
    do
    {
      v16 = *v12++;
      WebKit::WebURLSchemeHandlerProxy::stopAllTasks(v16);
      while (v12 != v13)
      {
        if ((unint64_t)*v12 + 1 > 1)
          goto LABEL_23;
        ++v12;
      }
      v12 = v13;
LABEL_23:
      ;
    }
    while (v12 != v15);
    result = v19;
  }
  if (result)
    return (WebKit::WebURLSchemeHandlerProxy **)WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::deallocateTable(result, v11);
  return result;
}

void WebKit::WebPage::urlSchemeTaskWillPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::ResourceRequest *a5, uint64_t *a6)
{
  WebKit::WebURLSchemeHandlerProxy *v10;
  WebKit::WebURLSchemeHandlerProxy *v11;
  CFTypeRef v12;
  void *v13;
  CFTypeRef v14[24];
  CFTypeRef cf;
  uint64_t v16;

  v16 = a2;
  v10 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 2088), &v16);
  v11 = v10;
  if (v10)
    ++*(_DWORD *)v10;
  WebCore::ResourceRequest::ResourceRequest(v14, a5);
  WebKit::WebURLSchemeHandlerProxy::taskDidPerformRedirection((uint64_t)v11, a3, a4, (uint64_t)a5, a6);
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v14);
  if (v11)
    WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v11, v13);
}

WebKit::WebURLSchemeHandlerProxy *WebKit::WebPage::urlSchemeTaskDidPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebURLSchemeHandlerProxy *v8;
  WebKit::WebURLSchemeHandlerProxy *v9;
  WebKit::WebURLSchemeHandlerProxy *v10;
  void *v11;
  WebKit::WebURLSchemeHandlerProxy *result;
  WebKit::WebURLSchemeHandlerProxy *v13;
  uint64_t v14;

  v14 = a2;
  v8 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 2088), &v14);
  v9 = v8;
  if (v8)
    ++*(_DWORD *)v8;
  v10 = (WebKit::WebURLSchemeHandlerProxy *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E34FA5E0;
  v13 = v10;
  WebKit::WebURLSchemeHandlerProxy::taskDidPerformRedirection((uint64_t)v9, a3, a4, a5, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
    result = (WebKit::WebURLSchemeHandlerProxy *)(*(uint64_t (**)(WebKit::WebURLSchemeHandlerProxy *))(*(_QWORD *)result + 8))(result);
  if (v9)
    return WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v9, v11);
  return result;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebPage::urlSchemeTaskDidReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceResponse *a4)
{
  WebKit::WebURLSchemeHandlerProxy *v6;
  WebKit::WebURLSchemeHandlerProxy *v7;
  void *v8;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 2088), &v10);
  if (!v6)
    return WebKit::WebURLSchemeHandlerProxy::taskDidReceiveResponse(0, a3, a4);
  v7 = v6;
  ++*(_DWORD *)v6;
  WebKit::WebURLSchemeHandlerProxy::taskDidReceiveResponse((uint64_t)v6, a3, a4);
  return WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v7, v8);
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebPage::urlSchemeTaskDidReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::SharedBuffer **a4)
{
  WebKit::WebURLSchemeHandlerProxy *v6;
  WebKit::WebURLSchemeHandlerProxy *v7;
  void *v8;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 2088), &v10);
  if (!v6)
    return WebKit::WebURLSchemeHandlerProxy::taskDidReceiveData(0, a3, a4);
  v7 = v6;
  ++*(_DWORD *)v6;
  WebKit::WebURLSchemeHandlerProxy::taskDidReceiveData((uint64_t)v6, a3, a4);
  return WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v7, v8);
}

uint64_t *WebKit::WebPage::urlSchemeTaskDidComplete(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceError *a4)
{
  WebKit::WebURLSchemeHandlerProxy *v6;
  WebKit::WebURLSchemeHandlerProxy *v7;
  void *v8;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::WebURLSchemeHandlerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 2088), &v10);
  if (!v6)
    return WebKit::WebURLSchemeHandlerProxy::taskDidComplete(0, a3, a4);
  v7 = v6;
  ++*(_DWORD *)v6;
  WebKit::WebURLSchemeHandlerProxy::taskDidComplete((uint64_t)v6, a3, a4);
  return (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v7, v8);
}

void WebKit::WebPage::setIsSuspended(WebKit::WebPage *this, int a2)
{
  WebKit::WebProcess *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];

  if (*((unsigned __int8 *)this + 2108) != a2)
  {
    *((_BYTE *)this + 2108) = a2;
    if (a2)
    {
      WebKit::WebPage::freezeLayerTree((uint64_t)this, 8);
      WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 2);
      {
        v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v3);
      }
      WebKit::WebFrame::url(*((WebKit::WebFrame **)this + 11), (uint64_t)v6);
      WebKit::WebProcess::sendPrewarmInformation(v3, (const WTF::URL *)v6);
      v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      WebKit::WebPage::suspendForProcessSwap((CFTypeRef *)this);
    }
  }
}

uint64_t WebKit::WebPage::hasStorageAccess(uint64_t *a1, WebCore::RegistrableDomain *a2, WebCore::RegistrableDomain *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  WebKit::WebProcess *v12;
  os_unfair_lock_s *v13;
  WebKit::WebProcess *v14;
  __int128 v15;
  uint64_t *v16[4];

  if (WebKit::WebPage::hasPageLevelStorageAccess((WebKit::WebPage *)a1, (WTF::ASCIICaseInsensitiveHash **)a3, (WTF::ASCIICaseInsensitiveHash **)a2))
  {
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v14);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
    }
    v13 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v12) + 24);
    v15 = *(_OWORD *)(a4 + 80);
    v16[0] = (uint64_t *)a2;
    v16[1] = (uint64_t *)a3;
    v16[2] = (uint64_t *)&v15;
    v16[3] = a1 + 5;
    return IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(v13, v16, a5, 0, 0);
  }
}

uint64_t WebKit::WebPage::hasPageLevelStorageAccess(WebKit::WebPage *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 277, a2);
  v6 = *((_QWORD *)this + 277);
  if (v6)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if (v6 == v5)
    return 0;
  else
    return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v5 + 8), a3);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v20[2];
  IPC::Encoder *v21;

  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34FA608;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 231;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v21 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  v15 = v20[0];
  v20[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v17, v18);
  }
  if (v14)
    return 0;
  else
    return v11;
}

IPC::Encoder *WebKit::WebPage::requestStorageAccess(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::WebProcess *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *result;
  WTF *v24;
  void *v25;
  WebKit::WebProcess *v26;
  __int128 v27;
  uint64_t *v28[5];
  char v29;
  uint64_t v30[2];
  IPC::Encoder *v31;

  {
    v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v12 = WebKit::WebProcess::WebProcess(v26);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
  }
  v13 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v12) + 24);
  v27 = *(_OWORD *)(a4 + 80);
  v28[0] = a2;
  v28[1] = a3;
  v28[2] = (uint64_t *)&v27;
  v28[3] = (uint64_t *)(a1 + 40);
  v28[4] = (uint64_t *)(a1 + 2120);
  v29 = a5;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v14 = *a6;
  *a6 = 0;
  CFRetain(*(CFTypeRef *)(a4 + 8));
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a4 + 80);
  v17 = *(_QWORD *)(a4 + 88);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  *v18 = &off_1E34FA630;
  v18[1] = a1;
  v18[2] = a1;
  v18[3] = v14;
  v18[4] = a4;
  v18[5] = v15;
  v18[6] = v16;
  v18[7] = v17;
  v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v20 = 260;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 528) = v20 + 16;
  *(_QWORD *)(v20 + 536) = v20 + 16;
  *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v20 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
  v31 = (IPC::Encoder *)v20;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::StorageAccessScope>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::StorageAccessScope>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v20, v28);
  v30[0] = (uint64_t)v18;
  v30[1] = v19;
  IPC::Connection::sendMessageWithAsyncReply(v13, &v31, v30, 0, 0);
  v22 = v30[0];
  v30[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = v31;
  v31 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v24, v25);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::addDomainWithPageLevelStorageAccess(WebKit::WebPage *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  char v11;
  _BYTE v12[24];
  _QWORD v13[3];

  v5 = (uint64_t *)((char *)this + 2216);
  v10 = 0;
  WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((uint64_t *)this + 277, a2, (uint64_t *)&v10, (uint64_t)v13);
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v13[0] + 8), a3, (uint64_t)v12);
  if (v10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v10, v6);
  result = (WTF::StringImpl *)WebCore::NetworkStorageSession::findAdditionalLoginDomain();
  if (v11)
  {
    v9 = 0;
    result = (WTF::StringImpl *)WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(v5, a2, (uint64_t *)&v9, (uint64_t)v13);
    if (v11)
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v13[0] + 8), &v10, (uint64_t)v12);
      result = (WTF::StringImpl *)v9;
      if (v9)
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
      if (v11)
      {
        result = v10;
        v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  _QWORD *v14;
  int v15;
  WTF::StringImpl **result;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v9;
  v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) == 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (*(_QWORD *)v11 == -1)
      {
        v14 = (_QWORD *)v11;
      }
      else
      {
        result = (WTF::StringImpl **)WTF::equalIgnoringASCIICase(*(WTF **)v11, *a2, v13);
        if ((_DWORD)result)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(unsigned int *)(v25 - 4);
          else
            v26 = 0;
          v28 = 0;
          v27 = v25 + 16 * v26;
          goto LABEL_29;
        }
      }
      v10 = (v10 + v15) & v9;
      v11 = v8 + 16 * v10;
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v11, 0, v13));
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = (uint64_t)v14;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v11, (WTF::StringImpl *)a2);
  v18 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl ***)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v18;
  if (result)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v17);
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_23:
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v11);
      v11 = (uint64_t)result;
      v21 = *a1;
      if (*a1)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_23;
  }
  v27 = v21 + 16 * v24;
  v28 = 1;
LABEL_29:
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

WebCore::Document *WebKit::WebPage::wasLoadedWithDataTransferFromPrevalentResource(WebCore::Document *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 160);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        this = *(WebCore::Document **)(v2 + 296);
        if (this)
          return (WebCore::Document *)WebCore::Document::wasLoadedWithDataTransferFromPrevalentResource(this);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::getLoadedSubresourceDomains(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v5[2];
  char v6;

  v5[0] = 0;
  v5[1] = 0;
  WTF::Mapper<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::{lambda(WebCore::RegistrableDomain&&)#1},WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,void>::map(v5, (uint64_t *)(a1 + 2224), (const WTF::StringImpl *)&v6);
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a2, v5);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

uint64_t WebKit::WebPage::requestDOMPasteAccess(CFTypeRef *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl *v8;
  void *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD v14[2];
  _BYTE v15[8];
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  CFTypeRef *v21;
  _BYTE v22[16];
  _QWORD v23[2];

  v23[0] = a3;
  v23[1] = a4;
  WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)a1);
  CFRetain(a1[1]);
  v21 = a1;
  v8 = WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v22, (uint64_t *)&v21, 1);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification(v8, v9);
  CFRelease(a1[1]);
  v14[0] = WebKit::WebPage::rectForElementAtInteractionLocation((int32x2_t *)a1);
  v14[1] = v10;
  v15[0] = a2;
  v16 = v23;
  v17 = v14;
  v18 = a5;
  WebKit::WebPage::sendSyncWithDelayedReply<Messages::WebPageProxy::RequestDOMPasteAccess>((WebKit::WebPage *)a1, (uint64_t)v15, 0, (uint64_t)v19);
  v11 = v20;
  v12 = v19[8];
  if (v20 != -1)
    ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21RequestDOMPasteAccessEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v20])(v15, v19);
  if (v11)
    return 0;
  else
    return v12;
}

IPC::Encoder *WebKit::WebPage::sendSyncWithDelayedReply<Messages::WebPageProxy::RequestDOMPasteAccess>@<X0>(WebKit::WebPage *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  WebKit::WebPage *v6;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *result;

  v6 = a1;
  WebKit::WebPage::cancelCurrentInteractionInformationRequest(a1);
  v8 = *((_QWORD *)v6 + 4);
  v6 = (WebKit::WebPage *)((char *)v6 + 32);
  v9 = (*(uint64_t (**)(WebKit::WebPage *))(v8 + 56))(v6);
  result = (IPC::Encoder *)(*(uint64_t (**)(WebKit::WebPage *))(*(_QWORD *)v6 + 48))(v6);
  if (result)
    return IPC::Connection::sendSync<Messages::WebPageProxy::RequestDOMPasteAccess>((uint64_t)result, a2, v9, (void **)a3, a4, INFINITY);
  *(_BYTE *)a4 = 3;
  *(_DWORD *)(a4 + 16) = 1;
  return result;
}

WebCore::Document *WebKit::WebPage::simulateDeviceOrientationChange(WebCore::Document *this, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 160);
    if (v5)
    {
      if (!*(_BYTE *)(v5 + 144))
      {
        this = *(WebCore::Document **)(v5 + 296);
        if (this)
          return (WebCore::Document *)WebCore::Document::simulateDeviceOrientationChange(this, a2, a3, a4);
      }
    }
  }
  return this;
}

WebCore::Document *WebKit::WebPage::systemPreviewActionTriggered(WebCore::Document *a1, uint64_t a2)
{
  uint64_t *v3;
  WebCore::Document *result;
  char v5;

  v3 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  result = (WebCore::Document *)WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t *)(a2 + 32));
  if (result)
  {
    result = (WebCore::Document *)WebCore::Document::pageID(result);
    if (v5)
    {
      if (*(WebCore::Document **)(a2 + 16) == result)
        return (WebCore::Document *)WebCore::Document::dispatchSystemPreviewActionEvent();
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::speakingErrorOccurred(WebKit::WebPage *this)
{
  void *v1;
  unsigned int *result;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 6) + 272) + 24))(&v6);
  result = (unsigned int *)v6;
  if (v6)
  {
    v3 = *((_QWORD *)v6 + 1);
    if (v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 48))(*((_QWORD *)v6 + 1));
      result = (unsigned int *)v6;
      v6 = 0;
      if (!result)
        return result;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v1);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::boundaryEventOccurred(WebKit::WebPage *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  unsigned int *result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;

  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 6) + 272) + 24))(&v12);
  result = (unsigned int *)v12;
  if (v12)
  {
    v9 = *((_QWORD *)v12 + 1);
    if (v9)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 56))(*((_QWORD *)v12 + 1), a2, a3, a4);
      result = (unsigned int *)v12;
      v12 = 0;
      if (!result)
        return result;
    }
    else
    {
      v12 = 0;
    }
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::voicesDidChange(WebKit::WebPage *this)
{
  void *v1;
  unsigned int *result;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 6) + 272) + 24))(&v6);
  result = (unsigned int *)v6;
  if (v6)
  {
    v3 = *((_QWORD *)v6 + 1);
    if (v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 64))(*((_QWORD *)v6 + 1));
      result = (unsigned int *)v6;
      v6 = 0;
      if (!result)
        return result;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v1);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::insertAttachment(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl **a4, WTF::AtomStringImpl **a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t result;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v9 = WebCore::FocusController::focusedOrMainFrame(v21);
  v10 = v9;
  if (v9)
  {
    v11 = (unsigned int *)(v9 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (!*(_DWORD *)v13)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v13;
  }
  if (v9)
  {
    WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
    WTF::AtomString::AtomString((WTF::AtomString *)&v21, a4);
    WTF::AtomString::AtomString((WTF::AtomString *)&v20, a5);
    WebCore::Editor::insertAttachment();
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  }
  else
  {
    v16 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

uint64_t WebKit::WebPage::updateAttachmentAttributes(uint64_t a1, const WTF::String *a2, uint64_t a3, WTF::AtomStringImpl **a4, WTF::AtomStringImpl **a5, uint64_t a6, uint64_t *a7)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  unsigned int *v17;
  WebCore::Node *v18;
  uint64_t v19;
  WebCore::SharedBuffer *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::Node *v24;

  WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v24, *(const WTF::String **)(a1 + 48), a2);
  if (v24)
  {
    v11 = *(WTF::StringImpl **)(*((_QWORD *)v24 + 5) + 8);
    *((_DWORD *)v11 + 6) += 2;
    v23 = v11;
    WebCore::Document::updateLayout();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v23);
    WTF::AtomString::AtomString((WTF::AtomString *)&v23, a4);
    WTF::AtomString::AtomString((WTF::AtomString *)&v22, a5);
    WebCore::HTMLAttachmentElement::updateAttributes();
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*(_QWORD *)a6 || *(_QWORD *)(a6 + 8))
    {
      IPC::SharedBufferReference::unsafeBuffer((unsigned int *)a6, &v22);
      v15 = v22;
    }
    else
    {
      v21 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      v15 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v21);
    }
    v23 = v15;
    WebCore::HTMLAttachmentElement::updateAssociatedElementWithData();
    v17 = (unsigned int *)v23;
    v23 = 0;
    if (v17)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v16);
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
  }
  v19 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
}

unsigned int *WebKit::WebPage::attachmentElementWithIdentifier(unsigned int *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  if (a2 && (v3 = *((_QWORD *)a2 + 20)) != 0 && !*(_BYTE *)(v3 + 144))
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = *(_QWORD *)(v3 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      WebCore::Document::attachmentForIdentifier((WebCore::Document *)v6, a3);
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

WebCore::Node *WebKit::WebPage::updateAttachmentThumbnail(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  WebCore::Node *result;
  int v5;
  void *v6;
  WebCore::GraphicsContext *v7;
  IntSize v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *m_location;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  WebCore::ShareableBitmap *v21;
  uint64_t v22;
  IntRect v23;
  IntPoint v24;
  uint64_t v25;
  WebCore::ShareableBitmap *v26;
  WebCore::Node *v27;

  result = (WebCore::Node *)WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v27, *(const WTF::String **)(a1 + 48), a2);
  if (!v27)
    return result;
  if (*(_BYTE *)(a3 + 64))
  {
    WebCore::ShareableBitmap::create();
    if (v26)
    {
      if (*((_BYTE *)v27 + 112) != 1)
      {
        WebCore::ShareableBitmap::createImage(v26);
        WebCore::HTMLAttachmentElement::updateThumbnailForNarrowLayout();
        m_location = (_DWORD *)v23.m_location;
        v23.m_location = 0;
        if (m_location)
        {
          if (m_location[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)m_location + 8))(m_location);
          else
            --m_location[2];
        }
        goto LABEL_33;
      }
      *(float *)&v5 = (float)*((int *)v26 + 3);
      *(float *)&v23.m_location.m_x = (float)*((int *)v26 + 2);
      v23.m_location.m_y = v5;
      WebCore::DestinationColorSpace::SRGB(v26);
      WebCore::ImageBuffer::create();
      if (!v25)
        goto LABEL_33;
      v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      v8 = (IntSize)*((_QWORD *)v26 + 1);
      v23.m_location = 0;
      v23.m_size = v8;
      v24 = 0;
      WebCore::ShareableBitmap::paint(v26, v7, &v24, &v23);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::ImageBuffer::toData();
      v10 = (WTF::StringImpl *)v24;
      v24 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      WebCore::HTMLAttachmentElement::updateThumbnailForWideLayout();
      v12 = (WTF *)v23.m_location;
      if (v23.m_location)
      {
        v23.m_location = 0;
        v23.m_size.m_width = 0;
        WTF::fastFree(v12, v6);
      }
      v13 = v25;
      v25 = 0;
      if (!v13)
      {
LABEL_33:
        v21 = v26;
        v26 = 0;
        if (v21)
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v21, v6);
        goto LABEL_35;
      }
      v14 = *(_QWORD *)(v13 + 8);
      if (__ldaxr((unsigned __int8 *)v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v14))
      {
        goto LABEL_21;
      }
      MEMORY[0x19AEABB3C](v14);
LABEL_21:
      v16 = *(_QWORD *)(v14 + 8);
      v17 = v16 - 1;
      *(_QWORD *)(v14 + 8) = v16 - 1;
      if (v16 == 1)
      {
        v22 = *(_QWORD *)(v14 + 16);
        v18 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = 0;
        v19 = v22 != 0;
      }
      else
      {
        v18 = 0;
        v19 = 1;
      }
      v20 = __ldxr((unsigned __int8 *)v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
        {
LABEL_28:
          if (!v17)
          {
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            if (!v19)
              WTF::fastFree((WTF *)v14, v6);
          }
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      goto LABEL_28;
    }
  }
LABEL_35:
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebKit::WebPage::updateAttachmentIcon(uint64_t a1, const WTF::String *a2, uint64_t a3)
{
  WebCore::Node *result;
  int v5;
  void *v6;
  WebCore::GraphicsContext *v7;
  IntSize v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  _DWORD *m_location;
  WebCore::ShareableBitmap *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  WebCore::ShareableBitmap *v23;
  uint64_t v24;
  IntRect v25;
  IntPoint v26;
  uint64_t v27;
  WebCore::ShareableBitmap *v28;
  WebCore::Node *v29;

  result = (WebCore::Node *)WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v29, *(const WTF::String **)(a1 + 48), a2);
  if (!v29)
    return result;
  if (*(_BYTE *)(a3 + 64))
  {
    WebCore::ShareableBitmap::create();
    if (v28)
    {
      if (*((_BYTE *)v29 + 112) != 1)
      {
        WebCore::ShareableBitmap::createImage(v28);
        WebCore::HTMLAttachmentElement::updateIconForNarrowLayout();
        m_location = (_DWORD *)v25.m_location;
        v25.m_location = 0;
        if (m_location)
        {
          if (m_location[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)m_location + 8))(m_location);
          else
            --m_location[2];
        }
        goto LABEL_37;
      }
      *(float *)&v5 = (float)*((int *)v28 + 3);
      *(float *)&v25.m_location.m_x = (float)*((int *)v28 + 2);
      v25.m_location.m_y = v5;
      WebCore::DestinationColorSpace::SRGB(v28);
      WebCore::ImageBuffer::create();
      if (v27)
      {
        v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v8 = (IntSize)*((_QWORD *)v28 + 1);
        v25.m_location = 0;
        v25.m_size = v8;
        v26 = 0;
        WebCore::ShareableBitmap::paint(v28, v7, &v26, &v25);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::ImageBuffer::toData();
        v10 = (WTF::StringImpl *)v26;
        v26 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        WebCore::HTMLAttachmentElement::updateIconForWideLayout();
        v14 = (WTF *)v25.m_location;
        if (v25.m_location)
        {
          v25.m_location = 0;
          v25.m_size.m_width = 0;
          WTF::fastFree(v14, v11);
        }
        v15 = v27;
        v27 = 0;
        if (!v15)
          goto LABEL_37;
        v16 = *(_QWORD *)(v15 + 8);
        if (__ldaxr((unsigned __int8 *)v16))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v16))
        {
          goto LABEL_25;
        }
        MEMORY[0x19AEABB3C](v16);
LABEL_25:
        v18 = *(_QWORD *)(v16 + 8);
        v19 = v18 - 1;
        *(_QWORD *)(v16 + 8) = v18 - 1;
        if (v18 == 1)
        {
          v24 = *(_QWORD *)(v16 + 16);
          v20 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          v21 = v24 != 0;
        }
        else
        {
          v20 = 0;
          v21 = 1;
        }
        v22 = __ldxr((unsigned __int8 *)v16);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v16))
          {
LABEL_32:
            if (!v19)
            {
              if (v20)
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              if (!v21)
                WTF::fastFree((WTF *)v16, v11);
            }
LABEL_37:
            v23 = v28;
            v28 = 0;
            if (v23)
              WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v23, v11);
            goto LABEL_39;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
        goto LABEL_32;
      }
      v13 = v28;
      v28 = 0;
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v13, v6);
    }
  }
  if (*((_BYTE *)v29 + 112) == 1)
  {
    v25.m_location = 0;
    v25.m_size = 0;
    WebCore::HTMLAttachmentElement::updateIconForWideLayout();
  }
  else
  {
    WebCore::HTMLAttachmentElement::updateIconForNarrowLayout();
    v25.m_location = 0;
  }
LABEL_39:
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebKit::WebPage::requestAttachmentIcon(const WTF::String **this, const WTF::String *a2, const WebCore::FloatSize *a3)
{
  WebCore::Node *result;
  uint64_t v7;
  char *v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::Node *v22;
  IPC::Encoder *v23;

  WebKit::WebPage::attachmentElementWithIdentifier((unsigned int *)&v22, this[6], a2);
  result = v22;
  if (v22)
  {
    v21 = 0;
    v7 = WebCore::HTMLAttachmentElement::file(v22);
    if (v7)
      WTF::String::operator=(&v21, (WTF::StringImpl *)(v7 + 128));
    WebCore::HTMLAttachmentElement::attachmentType(v22);
    WebCore::HTMLAttachmentElement::attachmentTitle(v22);
    v9 = this[4];
    v8 = (char *)(this + 4);
    v10 = (*((uint64_t (**)(char *))v9 + 7))(v8);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 2007;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v23 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v20);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v21);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)&v19);
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v11, (int *)a3);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v8 + 32))(v8, &v23, 0);
    v13 = v23;
    v23 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v20;
    v20 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  return result;
}

void WebKit::WebPage::getApplicationManifest(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  _BYTE v9[264];
  char v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 8);
  if (*(_BYTE *)(v3 + 144))
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 296);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v5 = WebCore::Document::loader((WebCore::Document *)v4);
    if (v5)
    {
      v6 = (_DWORD *)v5;
      ++*(_DWORD *)(v5 + 24);
      WebCore::DocumentLoader::loadApplicationManifest();
      if (v6[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      else
        --v6[6];
LABEL_8:
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      return;
    }
  }
  v9[0] = 0;
  v10 = 0;
  v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v10)
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)v9, v8);
  if (v4)
    goto LABEL_8;
}

WTF::StringImpl *WebKit::WebPage::getTextFragmentMatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  char v35;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 144))
      {
        v8 = *(_QWORD *)(v4 + 296);
        if (v8)
        {
          *(_DWORD *)(v8 + 24) += 2;
          v9 = *(WTF::StringImpl **)(v8 + 3072);
          if (v9 && (v10 = *((_DWORD *)v9 + 1), *(_DWORD *)v9 += 2, v10))
          {
            result = (WTF::StringImpl *)WebCore::FragmentDirectiveParser::FragmentDirectiveParser();
            if (v35)
            {
              v30 = 0;
              v31 = 0;
              v32 = v34;
              if (v34)
              {
                if (v34 >> 27)
                {
                  __break(0xC471u);
                  return result;
                }
                v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v34));
                v31 = v34;
                v30 = v11;
                v12 = v33;
                v13 = (WTF::StringImpl *)((char *)v33 + 32 * v34);
                do
                {
                  v14 = *(_DWORD **)v12;
                  if (*(_QWORD *)v12)
                    *v14 += 2;
                  *(_QWORD *)v11 = v14;
                  v15 = (_DWORD *)*((_QWORD *)v12 + 1);
                  if (v15)
                    *v15 += 2;
                  *((_QWORD *)v11 + 1) = v15;
                  v16 = (_DWORD *)*((_QWORD *)v12 + 2);
                  if (v16)
                    *v16 += 2;
                  *((_QWORD *)v11 + 2) = v16;
                  v17 = (_DWORD *)*((_QWORD *)v12 + 3);
                  if (v17)
                    *v17 += 2;
                  *((_QWORD *)v11 + 3) = v17;
                  v12 = (WTF::StringImpl *)((char *)v12 + 32);
                  v11 = (WTF::StringImpl *)((char *)v11 + 32);
                }
                while (v12 != v13);
              }
              WebCore::FragmentDirectiveRangeFinder::findRangesFromTextDirectives();
              if (v29)
                WebCore::plainText();
              else
                v27 = 0;
              v23 = *a2;
              *a2 = 0;
              (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v23 + 16))(v23, &v27);
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              v25 = v27;
              v27 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v24);
                else
                  *(_DWORD *)v25 -= 2;
              }
              WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v24);
              WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v26);
            }
            else
            {
              v30 = 0;
              v20 = *a2;
              *a2 = 0;
              (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, &v30);
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              v22 = v30;
              v30 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v21);
                else
                  *(_DWORD *)v22 -= 2;
              }
            }
            result = (WTF::StringImpl *)WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v21);
          }
          else
          {
            v33 = 0;
            v18 = *a2;
            *a2 = 0;
            (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v33);
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            result = v33;
            v33 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
                if (!v9)
                  goto LABEL_44;
                goto LABEL_41;
              }
              *(_DWORD *)result -= 2;
            }
            if (!v9)
              goto LABEL_44;
          }
LABEL_41:
          if (*(_DWORD *)v9 == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v19);
          else
            *(_DWORD *)v9 -= 2;
LABEL_44:
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
          return result;
        }
      }
    }
  }
  v33 = 0;
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(v5, &v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebPage::setCanShowPlaceholder(WebKit::WebPage *this, const ElementContext *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = WebKit::WebPage::elementForContext((uint64_t)this, a2, &v4);
  v3 = v4;
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 872))(v3);
    if ((result & 1) != 0)
      result = WebCore::HTMLTextFormControlElement::setCanShowPlaceholder((WebCore::HTMLTextFormControlElement *)v3);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::elementForContext@<X0>(uint64_t this@<X0>, const ElementContext *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v10;

  if (a2->webPageIdentifier.m_identifier == *(_QWORD *)(this + 40)
    && (v5 = this, (this = WebCore::Element::fromIdentifier()) != 0))
  {
    v6 = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = v6 + 2;
    if ((*(_BYTE *)(this + 22) & 8) == 0)
      goto LABEL_17;
    v7 = *(_QWORD **)(*(_QWORD *)(this + 40) + 8);
    v8 = v7[53] == a2->m_processIdentifier.m_identifier && v7[52] == *(_QWORD *)&a2->documentIdentifier.m_object[8];
    if (!v8 || v7[54] != *(_QWORD *)&a2[1].boundingRect.m_location)
      goto LABEL_17;
    v10 = v7[66];
    if (v10)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (v10)
      {
        v10 = *(_QWORD *)(v10 + 24);
        if (v10)
          v10 = *(_QWORD *)(v10 + 8);
      }
    }
    if (v10 == *(_QWORD *)(v5 + 48))
    {
      *a3 = this;
    }
    else
    {
LABEL_17:
      *a3 = 0;
      if (v6)
      {
        *(_DWORD *)(this + 24) = v6;
      }
      else if ((*(_WORD *)(this + 30) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t *WebKit::WebPage::contextForElement@<X0>(WebKit::WebPage *this@<X0>, WebCore::Element *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v19 = v4;
  v5 = *((_QWORD *)this + 6);
  if (!v5)
    goto LABEL_7;
  v6 = *(_QWORD *)(v4 + 528);
  if (!v6)
    goto LABEL_7;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  v10 = *(_QWORD *)(v7 + 24);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if (v10 == v5)
  {
    v11 = (unsigned int *)(v7 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v18[0] = WebCore::Element::boundingBoxInRootViewCoordinates(a2);
    v18[1] = v13;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v20, (const WebCore::IntRect *)v18);
    *(_QWORD *)&v21 = *((_QWORD *)this + 5);
    v14 = *(_OWORD *)(v19 + 432);
    v22 = *(_OWORD *)(v19 + 416);
    v23 = v14;
    *(_QWORD *)&v24 = WebCore::Element::identifier(a2);
    v15 = v23;
    *(_OWORD *)(a3 + 32) = v22;
    *(_OWORD *)(a3 + 48) = v15;
    v16 = v21;
    *(_OWORD *)a3 = v20;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 64) = v24;
    *(_BYTE *)(a3 + 80) = 1;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
  }
  else
  {
LABEL_7:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 80) = 0;
  }
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v19);
}

uint64_t WebKit::WebPage::startTextManipulations(WebKit::WebPage *this, _DWORD *a2, int a3, uint64_t *a4)
{
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t Rendered;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  char v29;

  if (!*((_QWORD *)this + 6))
    goto LABEL_33;
  v8 = (WTF **)((char *)this + 2344);
  if (*((_BYTE *)this + 2360))
  {
    v9 = *((unsigned int *)this + 589);
    v10 = (WTF *)*((_QWORD *)this + 293);
    if ((_DWORD)v9)
    {
      v11 = 32 * v9;
      v12 = (_DWORD *)((char *)v10 + 24);
      do
      {
        v13 = *v12;
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, _DWORD *))off_1E34FA1E0[v13])(&v29, v12 - 4);
        *v12 = -1;
        v12 += 8;
        v11 -= 32;
      }
      while (v11);
      v10 = *v8;
    }
    if (v10)
    {
      *((_QWORD *)this + 293) = 0;
      *((_DWORD *)this + 588) = 0;
      WTF::fastFree(v10, a2);
    }
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)this + 293) = v14;
    LODWORD(v14) = a2[2];
    a2[2] = 0;
    *((_DWORD *)this + 588) = v14;
    LODWORD(v14) = a2[3];
    a2[3] = 0;
    *((_DWORD *)this + 589) = v14;
  }
  else
  {
    *v8 = 0;
    *((_QWORD *)this + 294) = 0;
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)this + 293) = v15;
    LODWORD(v15) = a2[2];
    a2[2] = 0;
    *((_DWORD *)this + 588) = v15;
    LODWORD(v15) = a2[3];
    a2[3] = 0;
    *((_DWORD *)this + 589) = v15;
    *((_BYTE *)this + 2360) = 1;
  }
  *((_BYTE *)this + 2336) = a3;
  v16 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0)
  {
    if (*(_BYTE *)(v17 + 144))
      v18 = 0;
    else
      v18 = (unsigned int *)v17;
    if (a3)
    {
LABEL_19:
      if (v18)
      {
        v19 = v18 + 2;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
        WebKit::WebPage::startTextManipulationForFrame((unsigned int *)this, (WebCore::Frame *)v18);
        Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v18 + 12), 0);
        if (Rendered)
        {
          do
          {
            v22 = (unsigned int *)Rendered;
            v23 = (unsigned int *)(Rendered + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 + 1, v23));
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18 + 2);
            WebKit::WebPage::startTextManipulationForFrame((unsigned int *)this, (WebCore::Frame *)v22);
            Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v22 + 12), 0);
            v18 = v22;
          }
          while (Rendered);
        }
        else
        {
          v22 = v18;
        }
        v25 = v22 + 2;
        goto LABEL_32;
      }
      goto LABEL_33;
    }
  }
  else
  {
    v18 = 0;
    if (a3)
      goto LABEL_19;
  }
  if (v18)
  {
    v25 = v18 + 2;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    WebKit::WebPage::startTextManipulationForFrame((unsigned int *)this, (WebCore::Frame *)v18);
LABEL_32:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v25);
  }
LABEL_33:
  v27 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
}

WTF *WebKit::WebPage::completeTextManipulation(uint64_t a1, __int128 **a2, uint64_t *a3)
{
  unsigned int v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  __int128 *v28;
  void *v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  WebKit::WebProcess *v36;
  __int128 *v37[2];
  __int128 *v38[2];
  WTF *v39;
  WTF **v40;
  char v41;
  __int128 *v42;
  __int128 v43;
  WTF *v44;
  WTF **v45;

  if (*(_QWORD *)(a1 + 48) && (v5 = *((_DWORD *)a2 + 3)) != 0)
  {
    v6 = *a2;
    v43 = **a2;
    v42 = &v43;
    v7 = &v6[3 * v5];
    v9 = *((_QWORD *)&v43 + 1);
    v8 = v43;
    v10 = v6;
    do
    {
      if ((_QWORD)v43 != *(_QWORD *)v10 || *((_QWORD *)&v43 + 1) != *((_QWORD *)v10 + 1))
      {
        v21 = 0;
        v22 = 0;
        v39 = 0;
        v40 = 0;
        v44 = (WTF *)&v42;
        v45 = &v39;
        do
        {
          v23 = (char *)*((_QWORD *)&v43 + 1);
          if ((_QWORD)v43 != *(_QWORD *)v6 || *((_QWORD *)&v43 + 1) != *((_QWORD *)v6 + 1))
          {
            v25 = v21 - v22;
            if (v21 < v22)
            {
              __break(0xC471u);
              JUMPOUT(0x1977BA7E0);
            }
            v26 = *((unsigned int *)a2 + 3);
            v27 = v26 >= v25;
            v28 = (__int128 *)(v26 - v25);
            if (!v27 || (unint64_t)v28 < v22)
              goto LABEL_34;
            WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::TextManipulationItem const,18446744073709551615ul>((uint64_t)v38, (uint64_t)&(*a2)[3 * v25], v22);
            WebKit::WebPage::completeTextManipulation(WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_2::operator()((uint64_t)&v44, v25, v38);
            WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v29);
            v22 = 0;
            v43 = *v6;
          }
          ++v21;
          ++v22;
          v6 += 3;
        }
        while (v6 != v7);
        v25 = v21 - v22;
        if (v21 < v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1977BA800);
        }
        v28 = (__int128 *)*((unsigned int *)a2 + 3);
        v23 = (char *)v28 - v25;
        if ((unint64_t)v28 >= v25)
        {
          v28 = *a2;
          if (v22 == -1)
            goto LABEL_35;
          if ((unint64_t)v23 >= v22)
            goto LABEL_36;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        v22 = (unint64_t)v23;
LABEL_36:
        WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::TextManipulationItem const,18446744073709551615ul>((uint64_t)v37, (uint64_t)&v28[3 * v25], v22);
        WebKit::WebPage::completeTextManipulation(WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_2::operator()((uint64_t)&v44, v25, v37);
        WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v30);
        v20 = *a3;
        *a3 = 0;
        (*(void (**)(uint64_t, _QWORD, WTF **))(*(_QWORD *)v20 + 16))(v20, 0, &v39);
        goto LABEL_37;
      }
      v10 += 3;
    }
    while (v10 != v7);
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v36 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v36);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
      v9 = *((_QWORD *)&v43 + 1);
      v8 = v43;
    }
    v13 = WebKit::WebProcess::webFrame((uint64_t)v12, v8, v9);
    if (!v13)
      goto LABEL_17;
    v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    v15 = *(_QWORD *)(v14 + 24);
    if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0 || *(_BYTE *)(v16 + 144))
    {
      CFRelease(*(CFTypeRef *)(v14 + 8));
LABEL_17:
      v44 = 0;
      v45 = 0;
      v17 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v17 + 16))(v17, 1, &v44);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      result = v44;
      if (!v44)
        return result;
      v44 = 0;
      LODWORD(v45) = 0;
      return (WTF *)WTF::fastFree(result, v18);
    }
    v31 = (unsigned int *)(v16 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    v33 = *(_QWORD *)(*(_QWORD *)(v16 + 296) + 3040);
    if (v33)
    {
      WebCore::TextManipulationController::completeManipulation();
      v39 = v44;
      v40 = v45;
      v34 = 1;
    }
    else
    {
      v34 = 0;
      LOBYTE(v39) = 0;
    }
    v41 = v34;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v31);
    CFRelease(*(CFTypeRef *)(v14 + 8));
    if (!v33)
      goto LABEL_17;
    v35 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, WTF **))(*(_QWORD *)v35 + 16))(v35, 0, &v39);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (v41)
      goto LABEL_38;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, 1, &v39);
LABEL_37:
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_38:
    result = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      return (WTF *)WTF::fastFree(result, v18);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::completeTextManipulation(WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,WTF::Vector<WebCore::TextManipulationControllerManipulationFailure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)::$_2::operator()(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unsigned int v3;
  uint64_t **v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  void *v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  WebKit::WebProcess *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v7 = *(uint64_t ***)a1;
  v47[0] = *a3;
  v47[1] = a3[1];
  v46[0] = 0;
  *a3 = 0;
  v46[1] = 0;
  a3[1] = 0;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v42 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v42);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = WebKit::WebProcess::webFrame((uint64_t)v8, **v7, (*v7)[1]);
  if (v9)
  {
    v11 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v12 = *(_QWORD *)(v11 + 24);
    if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0 && !*(_BYTE *)(v13 + 144))
    {
      v16 = (unsigned int *)(v13 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (*(_QWORD *)(*(_QWORD *)(v13 + 296) + 3040))
      {
        WebCore::TextManipulationController::completeManipulation();
        v15 = (WTF *)v43;
        v3 = HIDWORD(v43);
        v14 = 1;
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v10);
  result = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v46, v18);
  if (!v14)
  {
    v31 = *((_DWORD *)a3 + 3);
    if (!v31)
      return result;
    v32 = *a3;
    v33 = (uint64_t)&(*a3)[3 * v31];
    do
    {
      v34 = *(_QWORD *)(a1 + 8);
      v43 = *v32;
      *(_QWORD *)&v44 = *((_QWORD *)v32 + 3);
      *((_QWORD *)&v44 + 1) = a2;
      LOBYTE(v45) = 0;
      v35 = *(unsigned int *)(v34 + 12);
      if ((_DWORD)v35 == *(_DWORD *)(v34 + 8))
      {
        result = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)&v43);
        v36 = *(_QWORD *)v34 + 40 * *(unsigned int *)(v34 + 12);
        v37 = *(_QWORD *)(result + 32);
        v38 = *(_OWORD *)(result + 16);
        *(_OWORD *)v36 = *(_OWORD *)result;
        *(_OWORD *)(v36 + 16) = v38;
        *(_QWORD *)(v36 + 32) = v37;
      }
      else
      {
        v39 = *(_QWORD *)v34 + 40 * v35;
        v40 = v43;
        v41 = v44;
        *(_QWORD *)(v39 + 32) = v45;
        *(_OWORD *)v39 = v40;
        *(_OWORD *)(v39 + 16) = v41;
      }
      ++*(_DWORD *)(v34 + 12);
      ++a2;
      v32 += 3;
    }
    while (v32 != (__int128 *)v33);
    goto LABEL_30;
  }
  if (!v3)
  {
LABEL_30:
    if (v14)
    {
      if (v15)
        return WTF::fastFree(v15, v20);
    }
    return result;
  }
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(unsigned int *)(v21 + 12);
  v23 = 40 * v3;
  v24 = (unint64_t)v15;
  while (1)
  {
    if (v22 == *(_DWORD *)(v21 + 8))
    {
      result = WTF::Vector<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, v24);
      v25 = *(_QWORD *)v21 + 40 * *(unsigned int *)(v21 + 12);
      v26 = *(_QWORD *)(result + 32);
      v27 = *(_OWORD *)(result + 16);
      *(_OWORD *)v25 = *(_OWORD *)result;
      *(_OWORD *)(v25 + 16) = v27;
      *(_QWORD *)(v25 + 32) = v26;
    }
    else
    {
      v28 = *(_QWORD *)v21 + 40 * v22;
      v29 = *(_OWORD *)v24;
      v30 = *(_OWORD *)(v24 + 16);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(v24 + 32);
      *(_OWORD *)v28 = v29;
      *(_OWORD *)(v28 + 16) = v30;
    }
    ++*(_DWORD *)(v21 + 12);
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(unsigned int *)(v21 + 12);
    if (!(_DWORD)v22)
      break;
    *(_QWORD *)(*(_QWORD *)v21 + 40 * v22 - 16) += a2;
    v24 += 40;
    v23 -= 40;
    if (!v23)
      goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *WebKit::WebPage::configureLoggingChannel(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  WebKit::WebProcess *v23;
  IPC::Encoder *v24;
  uint64_t *v25;
  char v26;
  char v27;

  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = *((_QWORD *)v8 + 42);
  if (!v9)
    goto LABEL_14;
  v10 = *(_QWORD *)(v9 + 16);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEABB3C](v10);
LABEL_8:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_13:
  v13 = *(_QWORD *)(v9 + 24);
  v25 = a2;
  v26 = a3;
  v27 = a4;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::ConfigureLoggingChannel>(v13, &v25, 0, 0, 0);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v14);
LABEL_14:
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v16 = *(_QWORD *)(a1 + 32);
  v15 = a1 + 32;
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 1849;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v24 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,0ul,1ul,2ul>((IPC::Encoder *)v18, &v25);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v15 + 32))(v15, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

_QWORD *WebKit::WebPage::textAutosizingUsesIdempotentModeChanged(_QWORD *this)
{
  if ((*(_QWORD *)(*(_QWORD *)(this[6] + 112) + 712) & 0x400000000000) == 0
    && (this[274] & 0xFFFFFFFFFFFFLL) != 0)
  {
    return (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 270));
  }
  return this;
}

uint64_t WebKit::WebPage::setOverriddenMediaType(const WTF::StringImpl **this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = WTF::equal(*a2, this[279], a3);
  if ((result & 1) == 0)
  {
    WTF::AtomString::AtomString((WTF::AtomString *)&v11, a2);
    v7 = v11;
    v11 = 0;
    v8 = this[279];
    this[279] = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_6:
        *(_DWORD *)v8 = v9;
        return WebCore::Page::updateStyleAfterChangeInEnvironment(this[6]);
      }
      WTF::StringImpl::destroy(v8, v6);
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, v10);
          return WebCore::Page::updateStyleAfterChangeInEnvironment(this[6]);
        }
        goto LABEL_6;
      }
    }
    return WebCore::Page::updateStyleAfterChangeInEnvironment(this[6]);
  }
  return result;
}

uint64_t WebKit::WebPage::updateCORSDisablingPatterns(uint64_t result, _DWORD *a2)
{
  WebKit::WebPage *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  void *v6;
  _BYTE v7[16];

  if (*(_QWORD *)(result + 48))
  {
    v3 = (WebKit::WebPage *)result;
    v4 = (WTF::StringImpl **)(result + 2368);
    v5 = *(unsigned int *)(result + 2380);
    if ((_DWORD)v5)
      WTF::VectorDestructor<true,WTF::String>::destruct(*v4, (WTF::StringImpl *)((char *)*v4 + 8 * v5));
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v4, a2);
    WebKit::WebPage::synchronizeCORSDisablingPatternsWithNetworkProcess(v3);
    WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((uint64_t)v4, (uint64_t)v7);
    WebCore::Page::setCORSDisablingPatterns();
    return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::isPlayingMediaDidChange(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1960;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 4uLL, 4) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WebCore::ShareableBitmap *WebKit::WebPage::requestTextRecognition(WebCore::ShareableBitmap *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::ShareableBitmap *v7;
  const WebCore::HTMLElement *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  char *v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  WTF::StringImpl *v63;
  int v64;
  uint64_t v65;
  void *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::Node *v73;
  char v74;
  char v75;
  char v76;
  char v77;
  WebCore::ShareableBitmap *v78;
  _QWORD v79[2];
  IPC::Encoder *v80;

  if ((*(_WORD *)(a2 + 28) & 0x10) != 0)
  {
    v7 = result;
    *(_DWORD *)(a2 + 24) += 2;
    result = (WebCore::ShareableBitmap *)WebCore::Page::hasCachedTextRecognitionResult(*((WebCore::Page **)result + 6), (const WebCore::HTMLElement *)a2);
    if ((_DWORD)result)
    {
      if (!*a4)
        goto LABEL_24;
      v73 = 0;
      if (WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)a2, v8))
      {
        *(_DWORD *)(a2 + 24) += 2;
        v73 = (WebCore::Node *)a2;
      }
      v9 = *a4;
LABEL_21:
      *a4 = 0;
      (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v9 + 16))(v9, &v73);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = v73;
      v73 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::ShareableBitmap *)WebCore::Node::removedLastRef(result);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      goto LABEL_24;
    }
    v10 = (_QWORD *)((char *)v7 + 2400);
    v11 = *((unsigned int *)v7 + 603);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = (_DWORD *)(*v10 + 20);
      while (1)
      {
        v14 = *(_QWORD *)(v13 - 5);
        if (v14)
        {
          if (*(_QWORD *)(v14 + 8) == a2)
            break;
        }
        ++v12;
        v13 += 6;
        if (v11 == v12)
          goto LABEL_12;
      }
      v21 = *a4;
      if (*a4)
      {
        if (v12 < v11)
        {
          v22 = *v13;
          if ((_DWORD)v22 == *(v13 - 1))
          {
            result = (WebCore::ShareableBitmap *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 - 3, v22 + 1, (unint64_t)a4);
            v23 = *v13;
            v24 = v23 + 1;
            v25 = *(_QWORD *)(v13 - 3);
            v26 = *(_QWORD *)result;
            *(_QWORD *)result = 0;
            *(_QWORD *)(v25 + 8 * v23) = v26;
          }
          else
          {
            v24 = v22 + 1;
            v30 = *(_QWORD *)(v13 - 3);
            *a4 = 0;
            *(_QWORD *)(v30 + 8 * v22) = v21;
          }
          *v13 = v24;
          goto LABEL_24;
        }
        __break(0xC471u);
        goto LABEL_92;
      }
LABEL_24:
      if (*(_DWORD *)(a2 + 24) != 2)
      {
        *(_DWORD *)(a2 + 24) -= 2;
        return result;
      }
      if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      {
        result = (WebCore::ShareableBitmap *)a2;
        return (WebCore::ShareableBitmap *)WebCore::Node::removedLastRef(result);
      }
      return result;
    }
LABEL_12:
    v15 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v15)
      goto LABEL_19;
    if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_93;
    }
    if ((((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) == 0)
    {
LABEL_19:
      v9 = *a4;
      if (!*a4)
        goto LABEL_24;
      v73 = 0;
      goto LABEL_21;
    }
    ++*(_DWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    LOBYTE(v73) = 0;
    v74 = 0;
    v75 = 0;
    v76 = *(_BYTE *)(a3 + 16);
    WebKit::createShareableBitmap(v15, (uint64_t)&v73, &v78);
    result = v78;
    if (v78)
    {
      WebCore::ShareableBitmap::createHandle();
      if (v77)
      {
        v71 = 0;
        v72 = 0;
        if (*a4)
        {
          v16 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v71, 1uLL, (unint64_t)a4);
          v17 = HIDWORD(v72);
          v18 = HIDWORD(v72) + 1;
          v19 = v71;
          v20 = *v16;
          *v16 = 0;
          *(_QWORD *)(v19 + 8 * v17) = v20;
          HIDWORD(v72) = v18;
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
        WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(a2 + 16), a2);
        v34 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
        if (v34)
        {
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          v19 = v71;
          v18 = HIDWORD(v72);
        }
        v67 = (WTF::StringImpl *)v34;
        v68 = v19;
        v36 = v72;
        v71 = 0;
        v72 = 0;
        v69 = v36;
        v70 = v18;
        v37 = *((unsigned int *)v7 + 603);
        if ((_DWORD)v37 == *((_DWORD *)v7 + 602))
        {
          v38 = WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7 + 2400, v37 + 1, (unint64_t)&v67);
          v39 = *((_QWORD *)v7 + 300) + 24 * *((unsigned int *)v7 + 603);
          v40 = *(_QWORD *)v38;
          *(_QWORD *)v38 = 0;
          *(_QWORD *)(v39 + 8) = 0;
          *(_QWORD *)(v39 + 16) = 0;
          *(_QWORD *)v39 = v40;
          v41 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          *(_QWORD *)(v39 + 8) = v41;
          LODWORD(v41) = *(_DWORD *)(v38 + 16);
          *(_DWORD *)(v38 + 16) = 0;
          *(_DWORD *)(v39 + 16) = v41;
          LODWORD(v41) = *(_DWORD *)(v38 + 20);
          *(_DWORD *)(v38 + 20) = 0;
          *(_DWORD *)(v39 + 20) = v41;
        }
        else
        {
          v42 = *v10 + 24 * v37;
          v67 = 0;
          *(_QWORD *)(v42 + 8) = 0;
          *(_QWORD *)(v42 + 16) = 0;
          *(_QWORD *)v42 = v34;
          v43 = v68;
          v68 = 0;
          *(_QWORD *)(v42 + 8) = v43;
          LODWORD(v43) = v69;
          v69 = 0;
          *(_DWORD *)(v42 + 16) = v43;
          LODWORD(v43) = v70;
          v70 = 0;
          *(_DWORD *)(v42 + 20) = v43;
        }
        ++*((_DWORD *)v7 + 603);
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v33);
        v45 = (unsigned int *)v67;
        v67 = 0;
        if (v45)
        {
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            atomic_store(1u, v45);
            WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v45 + 4), v44);
            WTF::fastFree((WTF *)v45, v66);
          }
        }
        v48 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v15 + 224) + 24));
        if (v48)
        {
          WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v48 + 160));
          WebCore::Document::completeURL();
        }
        else
        {
          v67 = 0;
          WTF::URL::invalidate((WTF::URL *)&v67);
        }
        if (!v77)
        {
LABEL_92:
          __break(1u);
LABEL_93:
          JUMPOUT(0x1977BB524);
        }
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v7 + 6, (uint64_t)v7 + 16);
        v49 = (unsigned int *)*((_QWORD *)v7 + 3);
        if (v49)
        {
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 + 1, v49));
        }
        v51 = (char *)v7 + 32;
        WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(a2 + 16), a2);
        v52 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
        if (v52)
        {
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 + 1, v52));
        }
        v54 = (*(uint64_t (**)(char *))(*(_QWORD *)v51 + 56))(v51);
        v55 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v55 = 2015;
        *(_QWORD *)(v55 + 8) = v54;
        *(_QWORD *)(v55 + 528) = v55 + 16;
        *(_QWORD *)(v55 + 536) = v55 + 16;
        *(_OWORD *)(v55 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v55 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v55);
        v80 = (IPC::Encoder *)v55;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v55, (uint64_t *)&v67);
        IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode((IPC::Encoder *)v55, (unint64_t)&v73);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v55, (uint64_t *)a3);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v55, (uint64_t *)(a3 + 8));
        v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v56 = &off_1E34FA710;
        v56[1] = v49;
        v56[2] = v52;
        v57 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v79[0] = v56;
        v79[1] = v57;
        (*(void (**)(char *, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v51 + 40))(v51, &v80, v79, 0);
        v59 = v79[0];
        v79[0] = 0;
        if (v59)
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        v60 = v80;
        v80 = 0;
        if (v60)
        {
          IPC::Encoder::~Encoder(v60, v58);
          WTF::fastFree(v61, v62);
        }
        v63 = v67;
        v67 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v58);
          else
            *(_DWORD *)v63 -= 2;
        }
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v58);
      }
      else
      {
        v31 = *a4;
        if (*a4)
        {
          v67 = 0;
          *a4 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v31 + 16))(v31, &v67);
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v32 = v67;
          v67 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v32);
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
          }
        }
      }
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v73);
    }
    else
    {
      v27 = *a4;
      if (!*a4)
      {
LABEL_72:
        v64 = *(_DWORD *)(v15 + 16);
        if (!v64)
        {
          __break(0xC471u);
          JUMPOUT(0x1977BB544);
        }
        *(_DWORD *)(v15 + 16) = v64 - 1;
        goto LABEL_24;
      }
      v73 = 0;
      *a4 = 0;
      (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v27 + 16))(v27, &v73);
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v29 = v73;
      v73 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
    }
    result = v78;
    v78 = 0;
    if (result)
      result = (WebCore::ShareableBitmap *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v28);
    goto LABEL_72;
  }
  v65 = *a4;
  if (*a4)
  {
    v73 = 0;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v65 + 16))(v65, &v73);
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    result = v73;
    v73 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) != 2)
      {
        *((_DWORD *)result + 6) -= 2;
        return result;
      }
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::ShareableBitmap *)WebCore::Node::removedLastRef(result);
    }
  }
  return result;
}

WebCore::Node *WebKit::WebPage::updateWithTextRecognitionResult(uint64_t a1, int a2, ElementContext *a3, float *a4, uint64_t *a5)
{
  WebCore::Node *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  float v15;
  int v16;
  float v17;
  int v18;
  int8x8_t v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  const Node *v22;
  const WebCore::HTMLElement *v23;
  const Node *v24;
  uint64_t isOverlayText;
  uint64_t v26;
  WebCore::Node *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  int8x8_t v33[3];
  char v34;

  WebKit::WebPage::elementForContext(a1, a3, &v32);
  v8 = v32;
  if (!v32)
  {
LABEL_5:
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_30;
  }
  v9 = *((_DWORD *)v32 + 6);
  *((_DWORD *)v32 + 6) = v9 + 2;
  if ((*((_WORD *)v8 + 14) & 0x10) == 0)
  {
    if (v9)
    {
      *((_DWORD *)v8 + 6) = v9;
    }
    else if ((*((_WORD *)v8 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v8);
    }
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v11)
    v12 = *(_BYTE *)(v11 + 144) == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v11 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    WebCore::ImageOverlay::updateWithTextRecognitionResult();
    v15 = roundf(*a4);
    if (v15 >= 2147500000.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147500000.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    v17 = roundf(a4[1]);
    if (v17 >= 2147500000.0)
    {
      v18 = 0x7FFFFFFF;
    }
    else if (v17 <= -2147500000.0)
    {
      v18 = 0x80000000;
    }
    else
    {
      v18 = (int)v17;
    }
    v19 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(v18, v16), (int32x2_t)0xFE000000FE000000);
    v33[0] = vorr_s8((int8x8_t)(*(_QWORD *)&v19 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v18, v16)), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v18, v16), 6uLL)), v19));
    WebCore::EventHandler::hitTestResultAtPoint();
    v20 = v31;
    if (v31)
    {
      *((_DWORD *)v31 + 6) += 2;
      v21 = (WebCore::Node *)WebCore::Node::shadowHost(v20);
      if (v32 == v21 && WebCore::ImageOverlay::isInsideOverlay(v20, v22))
      {
        WebCore::DataDetection::findDataDetectionResultElementInImageOverlay((WebCore::DataDetection *)a4, v8, v23);
        if (v34)
        {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v33);
          isOverlayText = 2;
        }
        else
        {
          isOverlayText = WebCore::ImageOverlay::isOverlayText(v20, v24);
        }
      }
      else
      {
        isOverlayText = 0;
      }
      v26 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, isOverlayText);
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
    else
    {
      v29 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    MEMORY[0x19AEADBAC](&v30);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
  }
  else
  {
    v28 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (*((_DWORD *)v8 + 6) == 2)
  {
    if ((*((_WORD *)v8 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v8);
  }
  else
  {
    *((_DWORD *)v8 + 6) -= 2;
  }
LABEL_30:
  result = v32;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 2)
    {
      if ((*((_WORD *)v32 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v32);
    }
    else
    {
      *((_DWORD *)v32 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::startVisualTranslation(uint64_t this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::ImageAnalysisQueue *v7;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 24) + 8);
  if (*(_BYTE *)(v3 + 144))
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 296);
  if (v4)
  {
    *(_DWORD *)(v4 + 24) += 2;
    v7 = (WebCore::ImageAnalysisQueue *)WebCore::Page::imageAnalysisQueue(*(WebCore::Page **)(this + 48));
    this = WebCore::ImageAnalysisQueue::enqueueAllImagesIfNeeded(v7, (Document *)v4, a2, a3);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebKit::WebPage::requestImageBitmap(uint64_t a1, const ElementContext *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::CachedImage *v6;
  WebCore::Image *v7;
  double v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  void *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[8];
  char v27;
  WTF *v28;
  _BYTE v29[12];
  __int16 v30;
  char v31;
  uint64_t v32;

  WebKit::WebPage::elementForContext(a1, a2, &v32);
  v4 = v32;
  if (v32)
  {
    v5 = *(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        goto LABEL_42;
      }
      if ((((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL)
                                                                                                  + 0x35)) != 0)
      {
        ++*(_DWORD *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        v29[0] = 0;
        v29[8] = 0;
        v30 = 1;
        WebKit::createShareableBitmap(v5, (uint64_t)v29, &v28);
        if (!v28)
        {
          v29[0] = 0;
          v31 = 0;
          v26[0] = 0;
          v19 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **))(*(_QWORD *)v19 + 16))(v19, v29, v26);
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          v11 = v26[0];
          v26[0] = 0;
          if (!v11)
            goto LABEL_32;
LABEL_24:
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
          goto LABEL_32;
        }
        WebCore::ShareableBitmap::createHandle();
        if (!v31)
        {
          LOBYTE(v26[0]) = 0;
          v27 = 0;
          v25 = 0;
          v20 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, v26, &v25);
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v22 = v25;
          v25 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v21);
            else
              *(_DWORD *)v22 -= 2;
          }
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
LABEL_32:
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
          result = (uint64_t)v28;
          v28 = 0;
          if (result)
            result = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v23);
          v24 = *(_DWORD *)(v5 + 16);
          if (v24)
          {
            *(_DWORD *)(v5 + 16) = v24 - 1;
LABEL_36:
            if (*(_DWORD *)(v4 + 24) == 2)
            {
              if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v4);
            }
            else
            {
              *(_DWORD *)(v4 + 24) -= 2;
            }
            return result;
          }
LABEL_43:
          result = 286;
          __break(0xC471u);
          return result;
        }
        v25 = 0;
        v6 = (WebCore::CachedImage *)WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v5 + 224) + 24));
        if (v6)
        {
          v7 = (WebCore::Image *)WebCore::CachedImage::image(v6);
          if (v7)
            WebCore::Image::mimeType(v7);
        }
        if (v31)
        {
          v8 = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v26, (uint64_t)v29);
          v27 = 1;
          v9 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, double))(*(_QWORD *)v9 + 16))(v9, v26, &v25, v8);
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v26);
          v11 = v25;
          v25 = 0;
          if (!v11)
            goto LABEL_32;
          goto LABEL_24;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    v29[0] = 0;
    v31 = 0;
    v26[0] = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, v29, v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v14 = v26[0];
    v26[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
    goto LABEL_36;
  }
  v29[0] = 0;
  v31 = 0;
  v26[0] = 0;
  v15 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, v29, v26);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v17 = v26[0];
  v26[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  return (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v29);
}

uint64_t WebKit::WebPage::createAppHighlightInSelectedRange(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WebCore::FocusController *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL8 v18;
  uint64_t v19;
  _QWORD *v20;
  id v22;
  _QWORD *v23;
  _DWORD *v24;
  WebCore::FocusController *v25;
  char v26;

  v6 = *(_BYTE *)(a1 + 196);
  *(_BYTE *)(a1 + 196) = a2;
  v7 = *(_BYTE *)(a1 + 197);
  *(_BYTE *)(a1 + 197) = a3;
  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  v8 = WebCore::FocusController::focusedOrMainFrame(v25);
  v9 = v8;
  if (v8)
  {
    v10 = (unsigned int *)(v8 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1977BBF24);
    }
    --*(_DWORD *)v12;
  }
  if (!v8)
  {
    v18 = 0;
LABEL_27:
    *(_BYTE *)(a1 + 197) = v7;
    *(_BYTE *)(a1 + 196) = v6;
    return v18;
  }
  v13 = *(_QWORD *)(v8 + 296);
  if (v13)
    *(_DWORD *)(v13 + 24) += 2;
  v14 = *(_QWORD *)(v13 + 528);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0)
  {
    v18 = 0;
    goto LABEL_24;
  }
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(v15 + 296) + 3064)
                                                                           + 56));
  v18 = v26 != 0;
  if (!v26)
  {
LABEL_23:
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
LABEL_24:
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
    goto LABEL_27;
  }
  WebCore::Document::appHighlightRegistry((WebCore::Document *)v13);
  WebCore::StaticRange::create();
  WebCore::HighlightRegistry::addAnnotationHighlightWithRange();
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)())(*(_QWORD *)v24 + 8))();
    else
      --v24[2];
  }
  WebCore::Document::appHighlightStorage((WebCore::Document *)v13);
  if (v26)
  {
    WebCore::StaticRange::create();
    v19 = *a4;
    *a4 = 0;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v20 = &off_1E34FA760;
    v20[1] = v19;
    v20[2] = a1;
    v20[3] = a1;
    v23 = v20;
    WebCore::AppHighlightStorage::storeAppHighlight();
    if (v23)
      (*(void (**)(_QWORD *))(*v23 + 8))(v23);
    goto LABEL_23;
  }
  v22 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebKit::WebPage::restoreAppHighlightsAndScrollToIndex(v22);
}

uint64_t WebKit::WebPage::restoreAppHighlightsAndScrollToIndex(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::SharedMemory *v11;

  WebCore::Page::checkedFocusController(*(WebCore::Page **)(a1 + 48));
  result = WebCore::FocusController::focusedOrMainFrame(v11);
  v4 = result;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v11;
  }
  if (result)
  {
    v7 = *(_QWORD *)(result + 296);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    v8 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v8)
    {
      v9 = *a2;
      v10 = 16 * v8;
      do
      {
        WebCore::SharedMemory::map();
        v9 += 16;
        v10 -= 16;
      }
      while (v10);
    }
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

unsigned int *WebKit::WebPage::setAppHighlightsVisibility(unsigned int *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t Rendered;

  *((_BYTE *)result + 2416) = a2;
  v2 = *(_QWORD *)(*((_QWORD *)result + 11) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 144))
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        while (1)
        {
          if (!*(_BYTE *)(v3 + 144))
          {
            v9 = (unsigned int *)(v3 + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 + 1, v9));
            v11 = *(_QWORD *)(v3 + 296);
            if (v11)
            {
              *(_DWORD *)(v11 + 24) += 2;
              WebCore::Document::appHighlightRegistry((WebCore::Document *)v11);
              WebCore::HighlightRegistry::setHighlightVisibility();
              if (*(_DWORD *)(v11 + 24) == 2)
              {
                if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v11);
              }
              else
              {
                *(_DWORD *)(v11 + 24) -= 2;
              }
            }
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
          }
          Rendered = WebCore::FrameTree::traverseNextRendered((WebCore::FrameTree *)(v3 + 48), 0);
          if (!Rendered)
            break;
          v6 = Rendered;
          v7 = (unsigned int *)(Rendered + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
          v3 = v6;
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebPage::lastNavigationWasAppInitiated(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3 && (v4 = *(_QWORD *)(v3 + 160)) != 0 && !*(_BYTE *)(v4 + 144))
  {
    v7 = (unsigned int *)(v4 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(unsigned __int8 *)(WebCore::Document::loader(*(WebCore::Document **)(v4 + 296)) + 3533);
    v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

IPC::Encoder *WebKit::WebPage::removeTextAnimationForAnimationID(WebKit::WebPage *this, const WTF::UUID *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 32;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2006;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::addDestinationTextAnimation(uint64_t a1, const WTF::UUID *a2, __int128 *a3, WTF::StringImpl **a4)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v4 = *(_QWORD *)(a1 + 2472);
  v5 = *a4;
  if (*a4)
    *(_DWORD *)v5 += 2;
  v8 = v5;
  WebKit::TextAnimationController::addDestinationTextAnimation(v4, a2, a3, (uint64_t **)&v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebKit::WebPage::scrollToRect(WebKit::WebPage *this, const WebCore::FloatRect *a2, const WebCore::FloatPoint *a3)
{
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;
  _BYTE v7[8];

  result = (_DWORD *)WebKit::WebPage::localMainFrameView(this);
  if (result)
  {
    v5 = result;
    ++result[2];
    v6 = *(_QWORD *)a2;
    WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v7, (const WebCore::FloatPoint *)&v6);
    result = (_DWORD *)WebCore::LocalFrameView::setScrollPosition();
    if (v5[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return result;
}

WebCore::RenderVideo *WebKit::WebPage::beginTextRecognitionForVideoInElementFullScreen(WebCore::RenderVideo *this, const WebCore::HTMLVideoElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ScrollView *v4;
  WebCore::RenderVideo *v6;
  char v7;
  WebCore::RenderVideo *v8;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  IPC::Encoder *v22;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(WebCore::ScrollView **)(v3 + 288);
      if (v4)
      {
        v6 = this;
        ++*((_DWORD *)v4 + 2);
        this = (WebCore::RenderVideo *)WebCore::HTMLMediaElement::playerIdentifier(a2);
        if (v7)
        {
          v8 = this;
          if (this)
          {
            this = (WebCore::RenderVideo *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL);
            if (this)
            {
              if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                goto LABEL_25;
              if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
                || (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1977BC630);
              }
              if (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
              {
LABEL_25:
                __break(0xC471u);
                JUMPOUT(0x1977BC610);
              }
              v20[0] = WebCore::RenderVideo::videoBox(this);
              v20[1] = v10;
              this = (WebCore::RenderVideo *)WebCore::ScrollView::contentsToRootView(v4, (const WebCore::IntRect *)v20);
              v21[0] = this;
              v21[1] = v11;
              if ((int)v11 >= 1 && SHIDWORD(v11) >= 1)
              {
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v20, (const WebCore::IntRect *)v21);
                v14 = *((_QWORD *)v6 + 4);
                v13 = (char *)v6 + 32;
                v15 = (*(uint64_t (**)(char *))(v14 + 56))(v13);
                v16 = WTF::fastMalloc((WTF *)0x240);
                *(_WORD *)v16 = 1840;
                *(_QWORD *)(v16 + 8) = v15;
                *(_QWORD *)(v16 + 528) = v16 + 16;
                *(_QWORD *)(v16 + 536) = v16 + 16;
                *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
                *(_OWORD *)(v16 + 560) = 0u;
                IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
                v22 = (IPC::Encoder *)v16;
                *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v8;
                IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v16, (int *)v20);
                (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v13, &v22, 0);
                this = v22;
                v22 = 0;
                if (this)
                {
                  IPC::Encoder::~Encoder(this, v17);
                  this = (WebCore::RenderVideo *)WTF::fastFree(v18, v19);
                }
              }
            }
          }
        }
        if (*((_DWORD *)v4 + 2) == 1)
          return (WebCore::RenderVideo *)(*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v4 + 8))(v4);
        else
          --*((_DWORD *)v4 + 2);
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::cancelTextRecognitionForVideoInElementFullScreen(WebKit::WebPage *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 32;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1842;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::WebPage::shouldAllowRemoveBackground(uint64_t a1, const ElementContext *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  WebKit::WebPage::elementForContext(a1, a2, &v20);
  v5 = v20;
  if (v20)
  {
    v6 = *(_QWORD *)(v20 + 16);
    ++*(_DWORD *)(a1 + 2456);
    v7 = v6 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8) && (v8 = *(_QWORD *)(a1 + 2448)) != 0)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (v7 + ~(v6 << 32)) ^ ((unint64_t)(v7 + ~(v6 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      for (i = 1; ; ++i)
      {
        v15 = *(_QWORD *)(v8 + 8 * v13);
        if (v15 != -1)
        {
          if (!v15)
            goto LABEL_10;
          if (v15 == v7)
            break;
        }
        v13 = (v13 + i) & v9;
      }
      v16 = 0;
    }
    else
    {
LABEL_10:
      v16 = 1;
    }
    v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v16);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  else
  {
    v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

unsigned int *WebKit::WebPage::insertTextPlaceholder(WebCore::Page **a1, const IntSize *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::FocusController *v10;
  WebCore::Editor *v11;
  uint64_t v12;
  uint64_t v14;
  WebCore::Node *v15;
  WebCore::FocusController *v16[10];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  WebCore::Page::checkedFocusController(a1[6]);
  v6 = WebCore::FocusController::focusedOrMainFrame(v16[0]);
  v7 = v6;
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = v16[0];
  v16[0] = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1977BCA00);
    }
    --*(_DWORD *)v10;
  }
  if (v6)
  {
    v11 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
    WebCore::Editor::insertTextPlaceholder(v11, a2);
    if (v15)
    {
      WebKit::WebPage::contextForElement((WebKit::WebPage *)a1, v15, (uint64_t)v16);
    }
    else
    {
      LOBYTE(v16[0]) = 0;
      v17 = 0;
    }
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v14 + 16))(v14, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  else
  {
    LOBYTE(v16[0]) = 0;
    v17 = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebCore::FocusController **))(*(_QWORD *)v12 + 16))(v12, v16);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

uint64_t WebKit::WebPage::removeTextPlaceholder(uint64_t a1, const ElementContext *a2, uint64_t *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  WebCore::Node *v11;

  WebKit::WebPage::elementForContext(a1, a2, &v11);
  v4 = v11;
  if (!v11)
    goto LABEL_10;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 5) + 8) + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
LABEL_8:
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v4);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
LABEL_10:
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
  v4 = v11;
  if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v11 + 888))(v11) & 1) != 0)
  {
    WebCore::Editor::removeTextPlaceholder();
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    goto LABEL_8;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::WebPage::generateTestReport(unsigned int *result)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*((_QWORD *)result + 6) + 160);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = *(_QWORD *)(v1 + 296);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      if (!*(_QWORD *)(v5 + 3184))
        WebCore::Document::ensureReportingScope((WebCore::Document *)v5);
      WebCore::ReportingScope::generateTestReport();
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  return result;
}

uint64_t WebKit::WebPage::pauseAllAnimations(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::Page::setImageAnimationEnabled(*(WebCore::Page **)(a1 + 48));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::WebPage::playAllAnimations(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::Page::setImageAnimationEnabled(*(WebCore::Page **)(a1 + 48));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

WTF::StringImpl **WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::ensure<WebKit::WebPage::setAllowedQueryParametersForAdvancedPrivacyProtections(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  int v13;
  WTF::StringImpl **result;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v7;
  v9 = (WTF::StringImpl **)(v6 + 16 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      if (*v9 == (WTF::StringImpl *)-1)
      {
        v12 = v9;
      }
      else
      {
        result = (WTF::StringImpl **)WTF::equalIgnoringASCIICase(*v9, *a2, v11);
        if ((_DWORD)result)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(unsigned int *)(v22 - 4);
          else
            v23 = 0;
          v25 = 0;
          v24 = v22 + 16 * v23;
          goto LABEL_27;
        }
      }
      v8 = (v8 + v13) & v7;
      v9 = (WTF::StringImpl **)(v6 + 16 * v8);
      ++v13;
    }
    while (!WTF::equal(*v9, 0, v11));
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v9 = v12;
    }
  }
  WTF::String::operator=(v9, (WTF::StringImpl *)a2);
  result = (WTF::StringImpl **)v9[1];
  v9[1] = 0;
  if (result)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v15);
  v16 = *a1;
  if (*a1)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
    {
LABEL_21:
      result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v9);
      v9 = result;
      v18 = *a1;
      if (*a1)
        v21 = *(unsigned int *)(v18 - 4);
      else
        v21 = 0;
    }
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_21;
  }
  v24 = v18 + 16 * v21;
  v25 = 1;
LABEL_27:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

uint64_t WebKit::WebPage::shouldSkipDecidePolicyForResponse(WebKit::WebPage *this, const WebCore::ResourceResponse *a2)
{
  int v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;

  if (!*((_BYTE *)this + 2255))
    return 0;
  v3 = WebCore::ResourceResponseBase::httpStatusCode(a2);
  result = 0;
  if (v3 == 204)
    return result;
  if (v3 > 399)
    return result;
  result = *(_QWORD *)WebCore::ResourceResponseBase::mimeType(a2);
  if (!result)
    return result;
  result = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(result, "text/html");
  if (!(_DWORD)result)
    return result;
  WebCore::ResourceResponseBase::url(a2);
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 0;
  WebCore::ResourceResponseBase::httpHeaderField();
  WTF::String::split();
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v8)
    WTF::String::trim();
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
  return 1;
}

void WebKit::WebPage::useRedirectionForCurrentNavigation(uint64_t a1, WebCore::ResourceResponseBase *a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::DocumentLoader *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  WebKit::WebProcess *v28;
  _BYTE v29[12];
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (unsigned int *)(v3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(_QWORD *)(v3 + 280);
    v9 = *(WebCore::DocumentLoader **)(v8 + 104);
    if (v9 || (v9 = *(WebCore::DocumentLoader **)(v8 + 96)) != 0)
    {
      ++*((_DWORD *)v9 + 6);
      v10 = WebCore::DocumentLoader::mainResourceLoader(v9);
      v11 = qword_1ECE71320;
      v12 = os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)v29 = 134218240;
          *(_QWORD *)&v29[4] = a1;
          v30 = 2048;
          v31 = v13;
          _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation to network process", v29, 0x16u);
        }
        {
          v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v14 = WebKit::WebProcess::WebProcess(v28);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
        }
        v15 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v14) + 24);
        v16 = *(_QWORD *)(v10 + 744);
        v17 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v17 = 279;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 528) = v17 + 16;
        *(_QWORD *)(v17 + 536) = v17 + 16;
        *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v17 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
        *(_QWORD *)v29 = v17;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v16;
        IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v17, a2);
        IPC::Connection::sendMessageImpl(v15, (uint64_t *)v29, 0, 0);
        v19 = *(IPC::Encoder **)v29;
        *(_QWORD *)v29 = 0;
        if (v19)
        {
          IPC::Encoder::~Encoder(v19, v18);
          WTF::fastFree(v20, v21);
        }
      }
      else
      {
        if (v12)
        {
          v22 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)v29 = 134218240;
          *(_QWORD *)&v29[4] = a1;
          v30 = 2048;
          v31 = v22;
          _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation as substiute data", v29, 0x16u);
        }
        WebCore::DocumentLoader::setRedirectionAsSubstituteData();
      }
      if (*((_DWORD *)v9 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v9 + 24))(v9);
      else
        --*((_DWORD *)v9 + 6);
    }
    else
    {
      v26 = qword_1ECE71320;
      if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)v29 = 134218240;
        *(_QWORD *)&v29[4] = a1;
        v30 = 2048;
        v31 = v27;
        _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation failed without loader", v29, 0x16u);
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    v23 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v29 = 134218240;
      *(_QWORD *)&v29[4] = a1;
      v30 = 2048;
      v31 = v25;
      _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::WebPage::useRedirectionForCurrentNavigation failed without frame", v29, 0x16u);
    }
  }
}

WebCore *WebKit::WebPage::dispatchLoadEventToFrameOwnerElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v4;
  WebCore *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  WebCore *v13;

  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = a2;
    v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v11);
    a2 = v12;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  result = (WebCore *)WebKit::WebProcess::webFrame((uint64_t)v4, a2, a3);
  if (result)
  {
    v6 = *((_QWORD *)result + 3);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 144))
        {
          v8 = *(_QWORD *)(v7 + 120);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v10 || (result = *(WebCore **)(v10 + 96)) == 0)
                result = (WebCore *)WebCore::threadGlobalDataSlow(result);
              if (!*((_QWORD *)result + 5))
                WebCore::ThreadGlobalData::initializeEventNames(result);
              WebCore::Event::create();
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
              result = v13;
              if (v13)
              {
                if (*((_DWORD *)v13 + 4) == 1)
                  return (WebCore *)(*(uint64_t (**)())(*(_QWORD *)v13 + 8))();
                else
                  --*((_DWORD *)v13 + 4);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPage::frameWasFocusedInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebProcess *v3;
  uint64_t result;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = a2;
    v7 = a3;
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v5);
    a2 = v6;
    a3 = v7;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  result = WebKit::WebProcess::webFrame((uint64_t)v3, a2, a3);
  if (result)
    return WebCore::FocusController::setFocusedFrame();
  return result;
}

void WebKit::WebPage::remotePostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::LocalFrame *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  WebKit::WebProcess *v21;
  CFTypeRef *v22;
  CFTypeRef *v23;
  _QWORD *v24;
  uint64_t v25;
  WebCore::WindowProxy *v26;
  WebCore::ScriptController *v27;
  WebCore::DOMWrapperWorld *v28;
  WebKit::WebProcess *v29;
  WebKit::WebProcess *v30;

  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v29);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = WebKit::WebProcess::webFrame((uint64_t)v10, a5, a6);
  if (v11)
  {
    v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v13 = *(_QWORD *)(v12 + 24);
    if (v13)
    {
      v14 = *(WebCore::LocalFrame **)(v13 + 8);
      if (v14)
      {
        if (!*((_BYTE *)v14 + 144))
        {
          v15 = (_DWORD *)WebCore::LocalFrame::window(v14);
          if (v15)
          {
            v16 = v15;
            ++v15[6];
            v17 = WebCore::LocalDOMWindow::frame((WebCore::LocalDOMWindow *)v15);
            if (v17)
            {
              v18 = v17;
              v19 = (unsigned int *)(v17 + 8);
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 + 1, v19));
              {
                v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
              }
              else
              {
                v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                v21 = WebKit::WebProcess::WebProcess(v30);
                WebKit::WebProcess::singleton(void)::process = (uint64_t)v21;
              }
              v22 = (CFTypeRef *)WebKit::WebProcess::webFrame((uint64_t)v21, a2, a3);
              v23 = v22;
              if (v22 && (v22 = (CFTypeRef *)CFRetain(v22[1]), (v24 = v23[3]) != 0) && (v25 = v24[1]) != 0)
              {
                v26 = *(WebCore::WindowProxy **)(v25 + 112);
                if (v26)
                  ++*(_DWORD *)v26;
              }
              else
              {
                v26 = 0;
              }
              v27 = *(WebCore::ScriptController **)(v18 + 304);
              v28 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld((WebCore *)v22);
              if (*(_QWORD *)(WebCore::ScriptController::jsWindowProxy(v27, v28) + 16))
                WebCore::LocalDOMWindow::postMessageFromRemoteFrame();
              if (v26)
                WTF::RefCounted<WebCore::WindowProxy>::deref(v26);
              if (v23)
                CFRelease(v23[1]);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
            }
            if (v16[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 72))(v16);
            else
              --v16[6];
          }
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

void WebKit::WebPage::renderTreeAsTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  WebCore *v20;
  const WebCore::RenderView *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebKit::WebProcess *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;

  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v31);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = WebKit::WebProcess::webFrame((uint64_t)v10, a2, a3);
  if (v11)
  {
    v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v13 = *(_QWORD *)(v12 + 24);
    if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0 && !*(_BYTE *)(v14 + 144))
    {
      v18 = (unsigned int *)(v14 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = (WebCore *)WebCore::LocalFrame::contentRenderer((WebCore::LocalFrame *)v14);
      if (v20)
      {
        WebCore::createTextStream(v20, v21);
        v35 = a4;
        WebCore::externalRepresentationForLocalFrame();
        WTF::TextStream::release((WTF::TextStream *)&v33);
        v22 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v32);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v24 = v32;
        v32 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        v26 = v34;
        v34 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v23);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v25 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 16))(v25, &v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      v27 = v33;
      v33 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v23);
        else
          *(_DWORD *)v27 -= 2;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v17 = v33;
      v33 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v30 = v33;
    v33 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
}

void WebKit::WebPage::frameTextForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = a2;
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v15);
    a2 = v16;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = WebKit::WebProcess::webFrame((uint64_t)v6, a2, a3);
  if (v7)
  {
    v8 = (CFTypeRef *)v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WebKit::WebFrame::frameTextForTesting((WTF::StringImpl *)v8, 1, &v17);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    CFRelease(v8[1]);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
}

uint64_t WebKit::WebPage::requestTargetedElement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _QWORD v11[2];

  v4 = *(WebCore::Page **)(a1 + 48);
  if (!v4)
  {
    v11[0] = 0;
    v11[1] = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 16))(v8, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v9);
  }
  ++*(_DWORD *)v4;
  WebCore::Page::checkedElementTargetingController(v4);
  WebCore::ElementTargetingController::findTargets();
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::Vector<WebCore::TargetedElementInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v6);
  if (v10)
  {
    if (!*v10)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*v10;
  }
  return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
}

_DWORD *WebKit::WebPage::requestTextExtraction(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  _BYTE v8[80];
  int v9;
  uint64_t v10;
  char v11;

  v4 = *(_DWORD **)(a1 + 48);
  ++*v4;
  WebCore::TextExtraction::extractItem();
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  if (v9 != -1)
    ((void (*)(char *, _BYTE *))off_1E34FA1F8[v9])(&v11, v8);
  v9 = -1;
  return WTF::RefCounted<WebCore::Page>::deref(v4);
}

uint64_t WebKit::WebPage::remoteViewRectToRootView(float a1, float a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  float v9;
  uint64_t v10;

  v9 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a6, a7, a1, a2, a3, a4);
  v10 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 16))(v10, v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

float WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  float v6;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WebCore::ScrollView *v16;
  float v17;
  WebKit::WebProcess *v19;
  _DWORD v20[4];

  v6 = a3;
  *(float *)v20 = a3;
  *(float *)&v20[1] = a4;
  *(float *)&v20[2] = a5;
  *(float *)&v20[3] = a6;
  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v10 = WebKit::WebProcess::webFrame((uint64_t)v9, a1, a2);
  if (v10)
  {
    v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v12 = *(_QWORD *)(v11 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 144))
        {
          v14 = (unsigned int *)(v13 + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          v16 = *(WebCore::ScrollView **)(v13 + 256);
          if (v16)
          {
            ++*((_DWORD *)v16 + 2);
            WebCore::ScrollView::contentsToRootView(v16, (const WebCore::FloatRect *)v20);
            v6 = v17;
            if (*((_DWORD *)v16 + 2) == 1)
              (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v16 + 8))(v16);
            else
              --*((_DWORD *)v16 + 2);
          }
          else
          {
            v6 = *(float *)v20;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v14);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  return v6;
}

uint64_t WebKit::WebPage::remoteViewPointToRootView(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  float v7;
  uint64_t v8;

  v7 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatPoint>(a4, a5, a1, a2);
  v8 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, float))(*(_QWORD *)v8 + 16))(v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

float WebKit::WebPage::remoteViewToRootView<WebCore::FloatPoint>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float v4;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::ScrollView *v14;
  float v15;
  WebKit::WebProcess *v17;
  _DWORD v18[2];

  v4 = a3;
  *(float *)v18 = a3;
  *(float *)&v18[1] = a4;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = WebKit::WebProcess::webFrame((uint64_t)v7, a1, a2);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 144))
        {
          v12 = (unsigned int *)(v11 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          v14 = *(WebCore::ScrollView **)(v11 + 256);
          if (v14)
          {
            ++*((_DWORD *)v14 + 2);
            WebCore::ScrollView::contentsToRootView(v14, (const WebCore::FloatPoint *)v18);
            v4 = v15;
            if (*((_DWORD *)v14 + 2) == 1)
              (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v14 + 8))(v14);
            else
              --*((_DWORD *)v14 + 2);
          }
          else
          {
            v4 = *(float *)v18;
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return v4;
}

void WebKit::WebPage::remoteDictionaryPopupInfoToRootView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float *v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  int v65;

  *(float *)a4 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatPoint>(a2, a3, *(float *)a4, *((float *)a4 + 1));
  *((_DWORD *)a4 + 1) = v9;
  *((float *)a4 + 2) = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *((float *)a4 + 2), *((float *)a4 + 3), *((float *)a4 + 4), *((float *)a4 + 5));
  *((_DWORD *)a4 + 3) = v10;
  *((_DWORD *)a4 + 4) = v11;
  *((_DWORD *)a4 + 5) = v12;
  *((float *)a4 + 6) = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *((float *)a4 + 6), *((float *)a4 + 7), *((float *)a4 + 8), *((float *)a4 + 9));
  *((_DWORD *)a4 + 7) = v13;
  *((_DWORD *)a4 + 8) = v14;
  *((_DWORD *)a4 + 9) = v15;
  *((float *)a4 + 10) = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *((float *)a4 + 10), *((float *)a4 + 11), *((float *)a4 + 12), *((float *)a4 + 13));
  *((_DWORD *)a4 + 11) = v16;
  *((_DWORD *)a4 + 12) = v17;
  *((_DWORD *)a4 + 13) = v18;
  if (*((_DWORD *)a4 + 17))
  {
    v19 = (float *)a4[7];
    do
    {
      *v19 = WebKit::WebPage::remoteViewToRootView<WebCore::FloatRect>(a2, a3, *v19, v19[1], v19[2], v19[3]);
      *((_DWORD *)v19 + 1) = v20;
      *((_DWORD *)v19 + 2) = v21;
      *((_DWORD *)v19 + 3) = v22;
      v19 += 4;
    }
    while (v19 != (float *)(a4[7] + 16 * *((unsigned int *)a4 + 17)));
  }
  v34 = *a4;
  v23 = *(_OWORD *)(a4 + 3);
  v35 = *(_OWORD *)(a4 + 1);
  v36 = v23;
  v37 = *(_OWORD *)(a4 + 5);
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v38, (uint64_t)(a4 + 7));
  v40 = *((_DWORD *)a4 + 18);
  v24 = a4[10];
  if (v24)
    ++*(_DWORD *)(v24 + 8);
  *(_QWORD *)&v41 = v24;
  v25 = a4[11];
  if (v25)
    ++*(_DWORD *)(v25 + 8);
  *((_QWORD *)&v41 + 1) = v25;
  v26 = a4[12];
  if (v26)
    ++*(_DWORD *)(v26 + 8);
  v42 = v26;
  WebCore::Color::Color((WebCore::Color *)&v43, (const Color *)a4 + 13);
  v44 = *((_DWORD *)a4 + 28);
  MEMORY[0x19AEAEEB4](&v45, a4 + 15);
  v27 = *a5;
  *a5 = 0;
  v47 = v35;
  v48 = v36;
  v49 = v37;
  v28 = v38;
  v38 = 0;
  v46 = v34;
  v50 = v28;
  v29 = v39;
  v39 = 0;
  v51 = v29;
  v52 = v40;
  v30 = v41;
  v41 = 0u;
  v53 = v30;
  v54 = v42;
  v42 = 0;
  WebCore::Color::Color();
  v55 = v44;
  WebCore::AttributedString::AttributedString();
  v57 = v47;
  v58 = v48;
  v59 = v49;
  v31 = v50;
  v50 = 0;
  v56 = v46;
  v60 = v31;
  v32 = v51;
  v51 = 0;
  v61 = v32;
  v62 = v52;
  v33 = v53;
  v53 = 0u;
  v63 = v33;
  v64 = v54;
  v54 = 0;
  WebCore::Color::Color();
  v65 = v55;
  WebCore::AttributedString::AttributedString();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 16))(v27, &v56);
  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)&v56);
  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)&v46);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)&v34);
}

uint64_t WebKit::WebPage::adjustVisibilityForTargetedElements(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;

  v4 = *(WebCore::Page **)(a1 + 48);
  if (v4)
  {
    ++*(_DWORD *)v4;
    WebCore::Page::checkedElementTargetingController(v4);
    v5 = WebCore::ElementTargetingController::adjustVisibility();
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v9)
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    if (*v9)
    {
      --*v9;
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    }
    result = 286;
    __break(0xC471u);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::WebPage::resetVisibilityAdjustmentsForTargetedElements(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Page *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;

  v4 = *(WebCore::Page **)(a1 + 48);
  if (v4)
  {
    ++*(_DWORD *)v4;
    WebCore::Page::checkedElementTargetingController(v4);
    v5 = WebCore::ElementTargetingController::resetVisibilityAdjustments();
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v9)
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    if (*v9)
    {
      --*v9;
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v4);
    }
    result = 286;
    __break(0xC471u);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

WTF::MachSendRight *WebKit::WebPage::takeSnapshotForTargetedElement(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  WebCore::Page *v5;
  __int128 v7;
  _DWORD *v8;
  float v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ShareableBitmap *v17;
  _DWORD *v18;
  uint64_t v20;
  CFTypeRef v21;
  char v22;
  FloatSize v23;
  uint64_t v24;
  WebCore::ShareableBitmap *v25;
  _DWORD *v26;
  _DWORD *v27;
  CFTypeRef cf;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *(WebCore::Page **)(a1 + 48);
  if (v5)
  {
    ++*(_DWORD *)v5;
    WebCore::Page::checkedElementTargetingController(v5);
    v7 = a3[1];
    v31 = *a3;
    v32 = v7;
    WebCore::ElementTargetingController::snapshotIgnoringVisibilityAdjustment();
    v8 = v27;
    v27 = 0;
    if (v8)
    {
      if (!*v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1977BE760);
      }
      --*v8;
    }
    if (v26)
    {
      v23.m_width = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v26 + 168))(v26, 0);
      v23.m_height = v9;
      WebCore::IntSize::IntSize((WebCore::IntSize *)&v24, &v23);
      LOBYTE(v21) = 0;
      v22 = 0;
      MEMORY[0x19AEB3600](&v27, &v24, &v21, 0);
      WebCore::ShareableBitmap::create();
      if (v29)
      {
        v10 = cf;
        cf = 0;
        if (v10)
          CFRelease(v10);
      }
      if (v22)
      {
        v11 = v21;
        v21 = 0;
        if (v11)
          CFRelease(v11);
      }
      if (v25)
      {
        WebCore::ShareableBitmap::createGraphicsContext(v25);
        if (v24)
        {
          v27 = 0;
          WebCore::GraphicsContext::drawImage();
          WebCore::ShareableBitmap::createHandle();
        }
        else
        {
          LOBYTE(v27) = 0;
          v30 = 0;
        }
        v15 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v15 + 16))(v15, &v27);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
        v16 = v24;
        v24 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      else
      {
        LOBYTE(v27) = 0;
        v30 = 0;
        v13 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v13 + 16))(v13, &v27);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
      }
      v17 = v25;
      v25 = 0;
      if (v17)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v17, v14);
    }
    else
    {
      LOBYTE(v27) = 0;
      v30 = 0;
      v12 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v12 + 16))(v12, &v27);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
    }
    v18 = v26;
    v26 = 0;
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      else
        --v18[2];
    }
    return (WTF::MachSendRight *)WTF::RefCounted<WebCore::Page>::deref(v5);
  }
  else
  {
    LOBYTE(v27) = 0;
    v30 = 0;
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v20 + 16))(v20, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
  }
}

uint64_t WebKit::WebPage::numberOfVisibilityAdjustmentRects(uint64_t a1, uint64_t *a2)
{
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  WebCore::ElementTargetingController *v8;

  v3 = *(WebCore::Page **)(a1 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::checkedElementTargetingController(v3);
    v4 = WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(v8);
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (!v8)
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v3);
    if (*(_DWORD *)v8)
    {
      --*(_DWORD *)v8;
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v3);
    }
    result = 286;
    __break(0xC471u);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::WebPage::startObservingNowPlayingMetadata(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  WebCore::PlatformMediaSessionManager *v6;
  uint64_t v7;

  if (!*(_QWORD *)(this + 2480))
  {
    v1 = this;
    v2 = (uint64_t *)(this + 2480);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(this + 24), this + 16);
    v3 = *(unsigned int **)(v1 + 24);
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v6 = (WebCore::PlatformMediaSessionManager *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = &off_1E34FA228;
    *((_QWORD *)v6 + 1) = v3;
    *v5 = 0;
    v5[1] = v6;
    v7 = *v2;
    *v2 = (uint64_t)v5;
    if (v7)
      std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)v2, v7);
    WebCore::PlatformMediaSessionManager::sharedManager(v6);
    return WebCore::PlatformMediaSessionManager::addNowPlayingMetadataObserver();
  }
  return this;
}

IPC::Encoder *WebKit::WebPage::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = a1 + 32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 56))(a1 + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1859;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebPage::frameNameWasChangedInAnotherProcess(uint64_t a1, uint64_t a2, uint64_t a3, WTF::AtomStringImpl **a4)
{
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::FrameTree *v14;
  WTF::StringImpl *v15;
  StringImpl *m_ptr;
  WebKit::WebProcess *v17;
  AtomString v18;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = WebKit::WebProcess::webFrame((uint64_t)v7, a2, a3);
  if (v8)
  {
    v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        v14 = (WebCore::FrameTree *)(v11 + 48);
        WTF::AtomString::AtomString((WTF::AtomString *)&v18, a4);
        WebCore::FrameTree::setSpecifiedName(v14, &v18);
        m_ptr = v18.var0.m_impl.m_ptr;
        v18.var0.m_impl.m_ptr = 0;
        if (m_ptr)
        {
          if (*(_DWORD *)m_ptr == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v15);
          else
            *(_DWORD *)m_ptr -= 2;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

WebCore::Document **WebKit::WebPage::updateLastNodeBeforeWritingSuggestions(WebCore::Document **this, const WebCore::KeyboardEvent *a2)
{
  WebCore::Document **v3;
  uint64_t v4;
  WebCore::Document **v5;
  WebCore::Document *v6;
  WebCore::Document **v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::Editor *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  void *v20;
  WebCore::FocusController *v21;

  v3 = this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(WebCore::Document ***)(v4 + 96)) == 0)
  {
    this = (WebCore::Document **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = this;
  }
  v6 = v5[5];
  if (!v6)
  {
    this = (WebCore::Document **)WebCore::ThreadGlobalData::initializeEventNames((WebCore::ThreadGlobalData *)v5);
    v6 = v5[5];
  }
  if (*((_QWORD *)a2 + 3) == *((_QWORD *)v6 + 131))
  {
    WebCore::Page::checkedFocusController(v3[6]);
    this = (WebCore::Document **)WebCore::FocusController::focusedOrMainFrame(v21);
    v7 = this;
    if (this)
    {
      v8 = (unsigned int *)(this + 1);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    if (v21)
    {
      if (!*(_DWORD *)v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1977BEC0CLL);
      }
      --*(_DWORD *)v21;
    }
    if (this)
    {
      v10 = (WebCore::Editor *)WebCore::Document::editor(this[37]);
      v11 = WebCore::Editor::nodeBeforeWritingSuggestions(v10);
      if (v11)
      {
        v13 = v11;
        WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(v11 + 16), v11);
        v14 = (unsigned int *)(*(_QWORD *)(v13 + 16) & 0xFFFFFFFFFFFFLL);
        if (v14)
        {
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
      }
      else
      {
        v14 = 0;
      }
      v16 = (unsigned int *)v3[291];
      v3[291] = (WebCore::Document *)v14;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          v19 = (WTF *)v16;
          WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v16 + 4), v12);
          WTF::fastFree(v19, v20);
        }
      }
      return (WebCore::Document **)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v7 + 2);
    }
  }
  return this;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::SetAllowsLayoutViewportHeightExpansion>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2029;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  LOBYTE(a2) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = (char)a2;
  v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v12, 0);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v9, v10);
  }
  return v7;
}

IPC::Encoder *WebKit::WebPage::hasActiveNowPlayingSessionChanged(WebKit::WebPage *this, char a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 32;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 56))((char *)this + 32);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1952;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)137>::type()
{
  return 137;
}

uint64_t API::InjectedBundle::FormClient::shouldNotifyOnFormChanges(API::InjectedBundle::FormClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageLoaderClient::shouldForceUniversalAccessFromLocalURL(API::InjectedBundle::PageLoaderClient *this, WebKit::WebPage *a2, const WTF::String *a3)
{
  return 0;
}

uint64_t API::InjectedBundle::PageLoaderClient::layoutMilestones(API::InjectedBundle::PageLoaderClient *this)
{
  return 0;
}

uint64_t API::InjectedBundle::ResourceLoadClient::shouldCacheResponse()
{
  return 1;
}

uint64_t API::InjectedBundle::ResourceLoadClient::shouldUseCredentialStorage()
{
  return 1;
}

uint64_t API::InjectedBundle::PageUIClient::statusBarIsVisible(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageUIClient::menuBarIsVisible(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageUIClient::toolbarsAreVisible(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2)
{
  return 0;
}

uint64_t API::InjectedBundle::PageUIClient::didExceedDatabaseQuota(API::InjectedBundle::PageUIClient *this, WebKit::WebPage *a2, API::SecurityOrigin *a3, const WTF::String *a4, const WTF::String *a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  return 0;
}

void API::InjectedBundle::PageUIClient::plugInStartLabelTitle(_QWORD *a1@<X8>)
{
  _DWORD *v3;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a1 = v3;
}

void API::InjectedBundle::PageUIClient::plugInStartLabelSubtitle(_QWORD *a1@<X8>)
{
  _DWORD *v3;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a1 = v3;
}

void API::InjectedBundle::PageUIClient::plugInExtraStyleSheet(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void API::InjectedBundle::PageUIClient::plugInExtraScript(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebKit::WebSpeechRecognitionProvider::~WebSpeechRecognitionProvider(WebKit::WebSpeechRecognitionProvider *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

unsigned int *WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v4 = a1[3];
    v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 72 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 72 * v4));
      a1[3] = v5;
      v4 = v5;
    }
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)a1;
    if (v4)
    {
      v8 = v6 + 72 * v4;
      do
      {
        WTF::String::operator=((WTF::StringImpl **)v7, (WTF::StringImpl *)v6);
        v9 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v7 + 8) = *(_OWORD *)(v6 + 8);
        *(_OWORD *)(v7 + 24) = v9;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 40), v6 + 40);
        WTF::String::operator=((WTF::StringImpl **)(v7 + 56), (WTF::StringImpl *)(v6 + 56));
        *(_BYTE *)(v7 + 64) = *(_BYTE *)(v6 + 64);
        v6 += 72;
        v7 += 72;
      }
      while (v6 != v8);
      v6 = *(_QWORD *)a2;
      v10 = a1[3];
      v7 = *(_QWORD *)a1;
    }
    else
    {
      v10 = 0;
    }
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Icon>::uninitializedCopy<WebCore::ApplicationManifest::Icon>(v6 + 72 * v10, v6 + 72 * a2[3], v7 + 72 * v10);
    a1[3] = a2[3];
  }
  return a1;
}

uint64_t WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::parseAndAllowAccessToCORSDisablingPatterns(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::OriginAccessPatternsForWebProcess *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int16 *v21;
  __int16 *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  __int16 v33;
  char v34;
  WTF::StringImpl *v35[2];
  WTF::StringImpl *v36;
  __int16 v37;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v3)
    return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, *(unsigned int *)(a2 + 12));
  if (!(v3 >> 27))
  {
    v4 = result;
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(a2 + 8) = v3;
    *(_QWORD *)a2 = v5;
    v6 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)v4;
      v8 = 8 * v6;
      do
      {
        v35[0] = 0;
        v35[1] = 0;
        v36 = 0;
        v37 = 1;
        v9 = (WebCore::OriginAccessPatternsForWebProcess *)WebCore::UserContentURLPattern::parse();
        LOBYTE(v37) = (_BYTE)v9;
        if ((_DWORD)v9)
        {
          LOBYTE(v31) = 0;
          v11 = v36;
          v34 = 0;
          v36 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        else
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(v9);
          WebCore::OriginAccessPatternsForWebProcess::allowAccessTo();
          v12 = *(_OWORD *)v35;
          v35[0] = 0;
          v35[1] = 0;
          v31 = v12;
          v32 = v36;
          v33 = v37;
          v34 = 1;
          v36 = 0;
        }
        v13 = v35[1];
        v35[1] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v10);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v35[0];
        v35[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
        if (v34)
        {
          v15 = v31;
          v31 = 0uLL;
          *(_OWORD *)v35 = v15;
          v16 = v32;
          v32 = 0;
          v36 = v16;
          v37 = v33;
          v17 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v17 == *(_DWORD *)(a2 + 8))
          {
            v26 = (_QWORD *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v17 + 1, (unint64_t)v35);
            v27 = (_QWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
            v28 = *v26;
            *v26 = 0;
            *v27 = v28;
            v29 = v26[1];
            v26[1] = 0;
            v27[1] = v29;
            v30 = v26[2];
            v26[2] = 0;
            v27[2] = v30;
            v21 = (__int16 *)(v27 + 3);
            v22 = (__int16 *)(v26 + 3);
          }
          else
          {
            v18 = (_QWORD *)(*(_QWORD *)a2 + 32 * v17);
            v35[0] = 0;
            *v18 = v15;
            v19 = v35[1];
            v35[1] = 0;
            v18[1] = v19;
            v20 = v36;
            v36 = 0;
            v18[2] = v20;
            v21 = (__int16 *)(v18 + 3);
            v22 = &v37;
          }
          *v21 = *v22;
          ++*(_DWORD *)(a2 + 12);
          v23 = v36;
          v36 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v35[1];
          v35[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v10);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v35[0];
          v35[0] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v10);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v10);
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
    }
    return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, *(unsigned int *)(a2 + 12));
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(unsigned int **a1, void *a2)
{
  unsigned int **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != (unsigned int *)-1)
        a1 = WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::~Ref(a1, a2);
      ++a1;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPage::LinkDecorationFilteringConditionals,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPage::LinkDecorationFilteringConditionals>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl ***)(v4 - 8);
        if (v5)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, (WTF::StringImpl *)a2);
        v6 = *(WTF::StringImpl **)(v4 - 16);
        *(_QWORD *)(v4 - 16) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

double WebCore::CachedPage::operator delete()
{
  uint64_t v0;
  void *v1;
  double result;

  v0 = MEMORY[0x19AEAC4B4]();
  if (*(_DWORD *)v0)
  {
    *(_QWORD *)(v0 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)v0 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v0, v1);
  }
  return result;
}

WebCore::HistoryItem **std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(WebCore::HistoryItem **result, WebCore::HistoryItem **a2, unint64_t a3, WebCore::HistoryItem **a4, uint64_t a5)
{
  WebCore::HistoryItem **v6;
  WebCore::HistoryItem **v7;
  WTF *v8;
  const WTF::String *v9;
  const WTF::String *v10;
  WebCore::HistoryItem **v13;
  unint64_t v14;
  WebCore::HistoryItem **v15;
  unint64_t v16;
  WebCore::HistoryItem **v17;
  uint64_t v18;
  WebCore::HistoryItem **v19;
  WebCore::HistoryItem **v20;
  WTF *v21;
  const WTF::String *v22;
  const WTF::String *v23;
  _DWORD *v24;
  WebCore::HistoryItem *v25;
  uint64_t i;
  _QWORD *v27;
  uint64_t v28;
  WebCore::HistoryItem **v29;
  WTF *v30;
  const WTF::String *v31;
  const WTF::String *v32;
  WebCore::HistoryItem **v33;
  WebCore::HistoryItem **v34;
  WebCore::HistoryItem **v35;
  WebCore::HistoryItem **v36;
  WTF *v37;
  const WTF::String *v38;
  const WTF::String *v39;
  WebCore::HistoryItem *v40;
  WebCore::HistoryItem *v41;
  uint64_t v42;
  WebCore::HistoryItem *v43;
  uint64_t v44;
  WebCore::HistoryItem *v45;
  unint64_t v46;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = a2 - 1;
      v8 = (WTF *)WebCore::HistoryItem::target(*(a2 - 1));
      v9 = (const WTF::String *)WebCore::HistoryItem::target(*v6);
      result = (WebCore::HistoryItem **)WTF::codePointCompare(v8, v9, v10);
      if ((result & 0x80000000) != 0)
        return (WebCore::HistoryItem **)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v6, v7);
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        v17 = result + 1;
        if (result + 1 != a2)
        {
          v18 = 0;
          v19 = result;
          do
          {
            v20 = v19;
            v19 = v17;
            v21 = (WTF *)WebCore::HistoryItem::target(v20[1]);
            v22 = (const WTF::String *)WebCore::HistoryItem::target(*v20);
            result = (WebCore::HistoryItem **)WTF::codePointCompare(v21, v22, v23);
            if ((result & 0x80000000) != 0)
            {
              v24 = 0;
              v25 = *v19;
              *v19 = 0;
              for (i = v18; ; i -= 8)
              {
                v27 = (WebCore::HistoryItem **)((char *)v6 + i);
                v28 = *(uint64_t *)((char *)v6 + i);
                *v27 = 0;
                v27[1] = v28;
                if (v24)
                  WTF::RefCounted<WebCore::HistoryItem>::deref(v24);
                if (!i)
                  break;
                v29 = (WebCore::HistoryItem **)((char *)v6 + i);
                v30 = (WTF *)WebCore::HistoryItem::target(v25);
                v31 = (const WTF::String *)WebCore::HistoryItem::target(*(WebCore::HistoryItem **)((char *)v6 + i - 8));
                if ((WTF::codePointCompare(v30, v31, v32) & 0x80000000) == 0)
                  goto LABEL_19;
                v24 = (_DWORD *)*v27;
              }
              v29 = v6;
LABEL_19:
              result = (WebCore::HistoryItem **)*v29;
              *v29 = v25;
              if (result)
                result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            }
            v17 = v19 + 1;
            v18 += 8;
          }
          while (v19 + 1 != a2);
        }
      }
    }
    else
    {
      v13 = a4;
      v14 = a3 >> 1;
      v15 = &result[a3 >> 1];
      v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>((uint64_t)result, v15, v16, a4);
        v33 = &v13[v14];
        result = (WebCore::HistoryItem **)std::__stable_sort_move<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v33);
        v34 = &v13[a3];
        v35 = v33;
        v36 = v13;
        while (v35 != v34)
        {
          v37 = (WTF *)WebCore::HistoryItem::target(*v35);
          v38 = (const WTF::String *)WebCore::HistoryItem::target(*v36);
          if ((WTF::codePointCompare(v37, v38, v39) & 0x80000000) != 0)
          {
            v41 = *v35;
            *v35 = 0;
            result = (WebCore::HistoryItem **)*v6;
            *v6 = v41;
            if (result)
              result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            ++v35;
          }
          else
          {
            v40 = *v36;
            *v36 = 0;
            result = (WebCore::HistoryItem **)*v6;
            *v6 = v40;
            if (result)
              result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            ++v36;
          }
          ++v6;
          if (v36 == v33)
          {
            if (v35 != v34)
            {
              v42 = 0;
              do
              {
                v43 = v35[v42];
                v35[v42] = 0;
                result = (WebCore::HistoryItem **)v6[v42];
                v6[v42] = v43;
                if (result)
                  result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
                ++v42;
              }
              while (&v35[v42] != v34);
            }
            goto LABEL_44;
          }
        }
        if (v36 != v33)
        {
          v44 = 0;
          do
          {
            v45 = v36[v44];
            v36[v44] = 0;
            result = (WebCore::HistoryItem **)v6[v44];
            v6[v44] = v45;
            if (result)
              result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            ++v44;
          }
          while (&v36[v44] != v33);
        }
LABEL_44:
        if (v13)
        {
          v46 = a3;
          do
          {
            result = (WebCore::HistoryItem **)*v13;
            *v13 = 0;
            if (result)
              result = (WebCore::HistoryItem **)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
            ++v13;
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(result, v15, v16, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v13, a5);
        return (WebCore::HistoryItem **)std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
      }
    }
  }
  return result;
}

_DWORD *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *result;

  v4 = (_DWORD *)*a1;
  *a1 = 0;
  v5 = (_DWORD *)*a2;
  *a2 = 0;
  v6 = (_DWORD *)*a1;
  *a1 = v5;
  if (v6)
    WTF::RefCounted<WebCore::HistoryItem>::deref(v6);
  result = (_DWORD *)*a2;
  *a2 = v4;
  if (result)
    return WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(uint64_t result, WebCore::HistoryItem **a2, unint64_t a3, WebCore::HistoryItem **a4)
{
  WebCore::HistoryItem **v4;
  WebCore::HistoryItem **v7;
  WebCore::HistoryItem *v8;
  WebCore::HistoryItem **v9;
  WTF *v10;
  const WTF::String *v11;
  const WTF::String *v12;
  WebCore::HistoryItem **v13;
  WebCore::HistoryItem **v14;
  WebCore::HistoryItem *v15;
  WebCore::HistoryItem *v16;
  WebCore::HistoryItem *v17;
  WebCore::HistoryItem **v18;
  uint64_t v19;
  WebCore::HistoryItem **v20;
  WebCore::HistoryItem **v21;
  WTF *v22;
  WebCore::HistoryItem *v23;
  const WTF::String *v24;
  const WTF::String *v25;
  WebCore::HistoryItem *v26;
  WebCore::HistoryItem *v27;
  uint64_t *v28;
  uint64_t v29;
  WTF *v30;
  const WTF::String *v31;
  const WTF::String *v32;
  _DWORD *v33;
  _DWORD *v34;
  WebCore::HistoryItem *v35;
  WebCore::HistoryItem **v36;
  WebCore::HistoryItem **v37;
  WTF *v38;
  const WTF::String *v39;
  const WTF::String *v40;
  WebCore::HistoryItem *v41;
  uint64_t v42;
  WebCore::HistoryItem *v43;
  uint64_t v44;
  WebCore::HistoryItem *v45;

  if (a3)
  {
    v4 = a4;
    v7 = (WebCore::HistoryItem **)result;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      v10 = (WTF *)WebCore::HistoryItem::target(*(a2 - 1));
      v11 = (const WTF::String *)WebCore::HistoryItem::target(*v7);
      result = WTF::codePointCompare(v10, v11, v12);
      if ((int)result >= 0)
        v13 = v7;
      else
        v13 = v9;
      if ((int)result >= 0)
        v14 = v9;
      else
        v14 = v7;
      v15 = *v13;
      *v13 = 0;
      *v4 = v15;
      v16 = *v14;
      *v14 = 0;
      v4[1] = v16;
    }
    else if (a3 == 1)
    {
      v8 = *(WebCore::HistoryItem **)result;
      *(_QWORD *)result = 0;
      *a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      v36 = (WebCore::HistoryItem **)(result + 8 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(result, v36, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v37 = &v7[a3 >> 1];
      while (v37 != a2)
      {
        v38 = (WTF *)WebCore::HistoryItem::target(*v37);
        v39 = (const WTF::String *)WebCore::HistoryItem::target(*v7);
        result = WTF::codePointCompare(v38, v39, v40);
        if ((result & 0x80000000) != 0)
        {
          v41 = *v37;
          *v37++ = 0;
        }
        else
        {
          v41 = *v7;
          *v7++ = 0;
        }
        *v4++ = v41;
        if (v7 == v36)
        {
          if (v37 != a2)
          {
            v42 = 0;
            do
            {
              v43 = v37[v42];
              v37[v42] = 0;
              v4[v42++] = v43;
            }
            while (&v37[v42] != a2);
          }
          return result;
        }
      }
      if (v7 != v36)
      {
        v44 = 0;
        do
        {
          v45 = v7[v44];
          v7[v44] = 0;
          v4[v44++] = v45;
        }
        while (&v7[v44] != v36);
      }
    }
    else if ((WebCore::HistoryItem **)result != a2)
    {
      v17 = *(WebCore::HistoryItem **)result;
      *(_QWORD *)result = 0;
      v18 = (WebCore::HistoryItem **)(result + 8);
      *a4 = v17;
      if ((WebCore::HistoryItem **)(result + 8) != a2)
      {
        v19 = 0;
        v20 = a4;
        do
        {
          v21 = v20;
          v22 = (WTF *)WebCore::HistoryItem::target(*v18);
          v23 = *v20++;
          v24 = (const WTF::String *)WebCore::HistoryItem::target(v23);
          result = WTF::codePointCompare(v22, v24, v25);
          if ((result & 0x80000000) != 0)
          {
            v27 = *v21;
            *v21 = 0;
            v21[1] = v27;
            v28 = (uint64_t *)v4;
            if (v21 != v4)
            {
              v29 = v19;
              while (1)
              {
                v28 = (uint64_t *)((char *)v4 + v29);
                v30 = (WTF *)WebCore::HistoryItem::target(*v18);
                v31 = (const WTF::String *)WebCore::HistoryItem::target(*(WebCore::HistoryItem **)((char *)v4 + v29 - 8));
                if ((WTF::codePointCompare(v30, v31, v32) & 0x80000000) == 0)
                  break;
                v34 = (_DWORD *)*(v28 - 1);
                v33 = (_DWORD *)*v28;
                *(v28 - 1) = 0;
                *v28 = (uint64_t)v34;
                if (v33)
                  WTF::RefCounted<WebCore::HistoryItem>::deref(v33);
                v29 -= 8;
                if (!v29)
                {
                  v28 = (uint64_t *)v4;
                  break;
                }
              }
            }
            v35 = *v18;
            *v18 = 0;
            result = *v28;
            *v28 = (uint64_t)v35;
            if (result)
              result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
          }
          else
          {
            v26 = *v18;
            *v18 = 0;
            *v20 = v26;
          }
          ++v18;
          v19 += 8;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(uint64_t result, WebCore::HistoryItem **a2, WebCore::HistoryItem **a3, uint64_t a4, uint64_t a5, WebCore::HistoryItem **a6, uint64_t a7)
{
  uint64_t v7;
  WebCore::HistoryItem **v8;
  uint64_t v9;
  WebCore::HistoryItem **v13;
  WTF *v14;
  WebCore::HistoryItem *i;
  const WTF::String *v16;
  const WTF::String *v17;
  WebCore::HistoryItem *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::HistoryItem **v21;
  unint64_t v22;
  WebCore::HistoryItem **v23;
  WebCore::HistoryItem **v24;
  WTF *v25;
  WebCore::HistoryItem **v26;
  WebCore::HistoryItem *v27;
  const WTF::String *v28;
  const WTF::String *v29;
  WebCore::HistoryItem **v30;
  uint64_t v31;
  unint64_t v32;
  WebCore::HistoryItem **v33;
  WebCore::HistoryItem **v34;
  WebCore::HistoryItem *v35;
  WTF *v36;
  const WTF::String *v37;
  const WTF::String *v38;
  int v39;
  WebCore::HistoryItem **v40;
  WebCore::HistoryItem **j;
  WebCore::HistoryItem **v42;
  WebCore::HistoryItem **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  WebCore::HistoryItem *v48;
  WebCore::HistoryItem **v49;
  uint64_t *v50;
  uint64_t *v51;
  WTF *v52;
  WebCore::HistoryItem **v53;
  const WTF::String *v54;
  const WTF::String *v55;
  uint64_t v56;
  WebCore::HistoryItem *v57;
  uint64_t v58;
  WebCore::HistoryItem *v59;
  WebCore::HistoryItem **v60;
  uint64_t v61;
  WebCore::HistoryItem **v62;
  WTF *v63;
  const WTF::String *v64;
  const WTF::String *v65;
  WebCore::HistoryItem *v66;
  WebCore::HistoryItem *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::HistoryItem *v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  WebCore::HistoryItem **v78;

  if (a5)
  {
    v7 = a7;
    v8 = a6;
    v9 = a5;
    v13 = (WebCore::HistoryItem **)result;
    while (a4 > v7 && v9 > v7)
    {
      if (!a4)
        return result;
      v14 = (WTF *)WebCore::HistoryItem::target(*a2);
      for (i = *v13; ; i = v18)
      {
        v16 = (const WTF::String *)WebCore::HistoryItem::target(i);
        result = WTF::codePointCompare(v14, v16, v17);
        if ((result & 0x80000000) != 0)
          break;
        if (!--a4)
          return result;
        v14 = (WTF *)WebCore::HistoryItem::target(*a2);
        v18 = v13[1];
        ++v13;
      }
      v78 = a3;
      if (a4 >= v9)
      {
        if (a4 == 1)
          return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v13, a2);
        if (a4 >= 0)
          v31 = a4;
        else
          v31 = a4 + 1;
        v77 = v31 >> 1;
        v23 = &v13[v31 >> 1];
        if (a3 == a2)
        {
          v21 = a2;
        }
        else
        {
          v32 = a3 - a2;
          v21 = a2;
          do
          {
            v33 = &v21[v32 >> 1];
            v35 = *v33;
            v34 = v33 + 1;
            v36 = (WTF *)WebCore::HistoryItem::target(v35);
            v37 = (const WTF::String *)WebCore::HistoryItem::target(*v23);
            v39 = WTF::codePointCompare(v36, v37, v38);
            if (v39 >= 0)
              v32 >>= 1;
            else
              v32 += ~(v32 >> 1);
            if (v39 < 0)
              v21 = v34;
          }
          while (v32);
          v8 = a6;
          v7 = a7;
        }
        v20 = v21 - a2;
      }
      else
      {
        if (v9 >= 0)
          v19 = v9;
        else
          v19 = v9 + 1;
        v20 = v19 >> 1;
        v21 = &a2[v19 >> 1];
        if (a2 == v13)
        {
          v23 = a2;
          v30 = a2;
        }
        else
        {
          v74 = v19 >> 1;
          v22 = a2 - v13;
          v23 = v13;
          do
          {
            v24 = &v23[v22 >> 1];
            v25 = (WTF *)WebCore::HistoryItem::target(*v21);
            v27 = *v24;
            v26 = v24 + 1;
            v28 = (const WTF::String *)WebCore::HistoryItem::target(v27);
            if ((int)WTF::codePointCompare(v25, v28, v29) < 0)
            {
              v22 >>= 1;
            }
            else
            {
              v23 = v26;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          v30 = v13;
          v8 = a6;
          v20 = v74;
          v7 = a7;
        }
        v77 = v23 - v30;
      }
      v40 = v21;
      if (v23 != a2)
      {
        v40 = v23;
        if (a2 != v21)
        {
          v75 = v20;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v23, a2);
          v40 = v23 + 1;
          for (j = a2 + 1; j != v21; ++j)
          {
            if (v40 == a2)
              a2 = j;
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v40++, j);
          }
          if (v40 == a2)
          {
            v40 = a2;
            a3 = v78;
          }
          else
          {
            v42 = v40;
            v43 = a2;
            do
            {
              while (1)
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *&>(v42++, a2);
                if (++a2 == v21)
                  break;
                if (v42 == v43)
                  v43 = a2;
              }
              a2 = v43;
            }
            while (v42 != v43);
            a3 = v78;
            v7 = a7;
          }
          v20 = v75;
        }
      }
      a4 -= v77;
      v9 -= v20;
      if (v77 + v20 >= a4 + v9)
      {
        v44 = a4;
        v45 = v20;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v40, v21, a3, v44, v9, v8, v7);
        v21 = v23;
        v9 = v45;
        a4 = v77;
        a3 = v40;
      }
      else
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebKit::dumpHistoryItem(WebCore::HistoryItem &,unsigned long,BOOL,WTF::StringBuilder &,WTF::String const&)::$_0 &,WTF::Ref<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>> *>(v13, v23, v40, v77, v20, v8, v7);
        v13 = v40;
      }
      a2 = v21;
      if (!v9)
        return result;
    }
    if (a4 > v9)
    {
      if (a2 == a3)
        return result;
      v46 = 0;
      v47 = 0;
      do
      {
        v48 = a2[v46];
        a2[v46] = 0;
        v8[v46] = v48;
        ++v47;
        ++v46;
      }
      while (&a2[v46] != a3);
      if (!(v46 * 8))
        goto LABEL_101;
      v49 = &v8[v46];
      v50 = (uint64_t *)(a3 - 1);
      while (1)
      {
        if (a2 == v13)
        {
          if (v49 != v8)
          {
            v68 = 0;
            do
            {
              v69 = (uint64_t)v49[v68 - 1];
              v49[v68 - 1] = 0;
              result = v50[v68];
              v50[v68] = v69;
              if (result)
                result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
              --v68;
            }
            while (&v49[v68] != v8);
          }
          goto LABEL_101;
        }
        v51 = (uint64_t *)(v49 - 1);
        v52 = (WTF *)WebCore::HistoryItem::target(*(v49 - 1));
        v53 = a2 - 1;
        v54 = (const WTF::String *)WebCore::HistoryItem::target(*(a2 - 1));
        if ((WTF::codePointCompare(v52, v54, v55) & 0x80000000) != 0)
          break;
        v56 = *v51;
        *v51 = 0;
        result = *v50;
        *v50 = v56;
        v53 = a2;
        --v49;
        if (result)
          goto LABEL_69;
LABEL_70:
        --v50;
        a2 = v53;
        if (v49 == v8)
          goto LABEL_101;
      }
      v57 = *v53;
      *v53 = 0;
      result = *v50;
      *v50 = (uint64_t)v57;
      if (!result)
        goto LABEL_70;
LABEL_69:
      result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
      goto LABEL_70;
    }
    if (v13 != a2)
    {
      v58 = 0;
      v47 = 0;
      do
      {
        v59 = v13[v58];
        v13[v58] = 0;
        v8[v58] = v59;
        ++v47;
        ++v58;
      }
      while (&v13[v58] != a2);
      if (!(v58 * 8))
        goto LABEL_101;
      v60 = &v8[v58];
      v61 = (uint64_t)&v8[v58 - 1];
      v62 = v8;
      while (a2 != a3)
      {
        v63 = (WTF *)WebCore::HistoryItem::target(*a2);
        v64 = (const WTF::String *)WebCore::HistoryItem::target(*v62);
        if ((WTF::codePointCompare(v63, v64, v65) & 0x80000000) != 0)
        {
          v67 = *a2;
          *a2 = 0;
          result = (uint64_t)*v13;
          *v13 = v67;
          if (result)
            result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
          ++a2;
        }
        else
        {
          v66 = *v62;
          *v62 = 0;
          result = (uint64_t)*v13;
          *v13 = v66;
          if (result)
            result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
          ++v62;
        }
        ++v13;
        if (v60 == v62)
          goto LABEL_101;
      }
      if (v60 != v62)
      {
        v70 = 0;
        do
        {
          v71 = v62[v70];
          v62[v70] = 0;
          result = (uint64_t)v13[v70];
          v13[v70] = v71;
          if (result)
            result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
          ++v70;
        }
        while ((WebCore::HistoryItem **)v61 != &v62[v70 - 1]);
      }
LABEL_101:
      if (v8)
      {
        v72 = 0;
        do
        {
          result = (uint64_t)v8[v72];
          v8[v72] = 0;
          if (result)
            result = (uint64_t)WTF::RefCounted<WebCore::HistoryItem>::deref((_DWORD *)result);
          ++v72;
        }
        while (v72 < v47);
      }
    }
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16ScreenToRootViewEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy16RootViewToScreenEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::detectDataInFrame(WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>> const&,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double> const&,WTF::UniqueRef<WebKit::DataDetectionResult> &&,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&)::$_0,void,NSArray *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  *a1 = &off_1E34FA1A8;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
    std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::detectDataInFrame(WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>> const&,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double> const&,WTF::UniqueRef<WebKit::DataDetectionResult> &&,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&)::$_0,void,NSArray *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34FA1A8;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::detectDataInFrame(WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>> const&,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double> const&,WTF::UniqueRef<WebKit::DataDetectionResult> &&,WTF::CompletionHandler<void ()(WebKit::DataDetectionResult const&)> &&)::$_0,void,NSArray *>::call(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  const void **v7;
  const void *v8;
  const void **v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  if (cf)
    CFRetain(cf);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (const void **)WebCore::LocalFrame::dataDetectionResults((WebCore::LocalFrame *)v4);
  if (cf)
    CFRetain(cf);
  v8 = *v7;
  *v7 = cf;
  if (v8)
    CFRelease(v8);
  if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
  {
    v9 = *(const void ***)(a1 + 16);
    if (cf)
      CFRetain(cf);
    v10 = *v9;
    *v9 = cf;
    if (v10)
      CFRelease(v10);
  }
  v11 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(*(_QWORD *)(a1 + 8) + 48), 0);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
    WebKit::detectDataInFrame(v11, *(_BYTE *)(a1 + 48), a1 + 24, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 40));
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  if (cf)
    CFRelease(cf);
}

uint64_t std::default_delete<WebKit::DataDetectionResult>::operator()[abi:sn180100](WTF *this, void *a2)
{
  const void *v3;

  v3 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

void WebKit::WebPage::PrintContextAccessScope::~PrintContextAccessScope(WebKit::WebPage::PrintContextAccessScope *this)
{
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int8 *)this + 8);
  v3 = *(_QWORD *)this;
  *(_BYTE *)(v3 + 680) = v2;
  if (v2 || !*(_BYTE *)(v3 + 681))
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    WebKit::WebPage::endPrintingImmediately((WebKit::WebPage *)v3);
    v3 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (!v3)
      return;
  }
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy24HandleSynchronousMessageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::deallocateTable(WebKit::WebURLSchemeHandlerProxy **a1, void *a2)
{
  uint64_t v3;
  WebKit::WebURLSchemeHandlerProxy **v4;
  WebKit::WebURLSchemeHandlerProxy *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebKit::WebURLSchemeHandlerProxy *)-1)
      {
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v5, a2);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21RequestDOMPasteAccessEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::startObservingNowPlayingMetadata(void)::$_0,void,WebCore::NowPlayingMetadata const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34FA228;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::startObservingNowPlayingMetadata(void)::$_0,void,WebCore::NowPlayingMetadata const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA228;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::startObservingNowPlayingMetadata(void)::$_0,void,WebCore::NowPlayingMetadata const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 56))(v3 + 16);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1986;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v11 = (IPC::Encoder *)v6;
      IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::encode((IPC::Encoder *)v6, a2);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 16) + 32))(v3 + 16, &v11, 0);
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        IPC::Encoder::~Encoder(v8, v7);
        WTF::fastFree(v9, v10);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

WebKit::WebURLSchemeHandlerProxy *WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(WebKit::WebURLSchemeHandlerProxy *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::WebURLSchemeHandlerProxy::~WebURLSchemeHandlerProxy(result, a2);
    return (WebKit::WebURLSchemeHandlerProxy *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::WebPage(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters &&)::$_0,void,PAL::HysteresisState>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  WebCore::HistoryController *v6;

  if (a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 88) + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 144))
        {
          v4 = (unsigned int *)(v3 + 8);
          do
            v5 = __ldaxr(v4);
          while (__stlxr(v5 + 1, v4));
          WebCore::Frame::checkedHistory((WebCore::Frame *)v3);
          WebCore::HistoryController::saveScrollPositionAndViewStateToItem(v6, *(WebCore::HistoryItem **)(*(_QWORD *)(v3 + 184) + 16));
          if (v6)
          {
            if (!*(_DWORD *)v6)
            {
              result = 286;
              __break(0xC471u);
              return result;
            }
            --*(_DWORD *)v6;
          }
          return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebPage::*&)(void),WebKit::WebPage*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(uint64_t result, unsigned int **a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  if ((unsigned int **)result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      v4 = *v3;
      *v3 = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v4 + 4), a2);
          result = WTF::fastFree((WTF *)v4, v7);
        }
      }
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1}::~Ref(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)a1 + 16))
    (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1},WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E34FA2C8;
  if (*(_BYTE *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1},WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FA2C8;
  if (*((_BYTE *)this + 24))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#1},WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1 + 8;
  v6 = a1 + 16;
  v7 = WTF::fastMalloc((WTF *)0x60);
  result = WebKit::WebLocalFrameLoaderClient::WebLocalFrameLoaderClient(v7, a2, v5, v6);
  *a3 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#2},WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E34FA2F0;
  if (*(_BYTE *)(a1 + 24))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#2},WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FA2F0;
  if (*((_BYTE *)this + 24))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::variant<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>> WebKit::clientCreatorForMainFrame<WebCore::Frame::FrameType>(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&,WebCore::Frame::FrameType)::{lambda(WTF::Ref<WebKit::WebFrame,WTF::RawPtrTraits<WebKit::WebFrame>,WTF::DefaultRefDerefTraits<WebKit::WebFrame>> &&&)#2},WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WTF::fastMalloc((WTF *)0x28);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(result + 24) = v6;
  LOBYTE(v6) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(result + 32) = v6;
  *(_QWORD *)result = &off_1E34F04C0;
  *(_QWORD *)(result + 8) = &unk_1E34F0550;
  *a2 = result;
  return result;
}

void WebKit::WebSpeechRecognitionProvider::~WebSpeechRecognitionProvider(WebKit::WebSpeechRecognitionProvider *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebSpeechRecognitionProvider::speechRecognitionConnection(WebKit::WebSpeechRecognitionProvider *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = WTF::fastMalloc((WTF *)0x38);
    result = WebKit::WebSpeechRecognitionConnection::WebSpeechRecognitionConnection(v4, v3);
    v5 = (_DWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = result;
    if (v5)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        return *((_QWORD *)this + 2);
      }
      else
      {
        --v5[2];
      }
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPage::updateThrottleState(void)::$_0,void>::call(uint64_t a1)
{
  {
    byte_1ECE73A78 = 0;
    WebKit::WebServiceWorkerProvider::singleton(void)::provider = (uint64_t)&off_1E34ED118;
  }
  return WebKit::WebServiceWorkerProvider::updateThrottleState((WebKit::WebServiceWorkerProvider *)&WebKit::WebServiceWorkerProvider::singleton(void)::provider, *(unsigned __int8 *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::markLayersVolatileOrRetry(WebKit::WebPage::MarkLayersVolatileDontRetryReason)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34FA3B8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::markLayersVolatileOrRetry(WebKit::WebPage::MarkLayersVolatileDontRetryReason)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34FA3B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::markLayersVolatileOrRetry(WebKit::WebPage::MarkLayersVolatileDontRetryReason)::$_0,void,BOOL>::call(uint64_t a1, void *a2)
{
  WebKit::WebPage::tryMarkLayersVolatileCompletionHandler(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 8), a2);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::ScreenToRootView>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  unint64_t v13;
  void *v14;
  unint64_t *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3685, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  v12 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v20;
LABEL_9:
      *(_DWORD *)(a5 + 16) = v12;
LABEL_10:
      ((void (*)(char *, unint64_t **))off_1E34FA3D0[v12])(&v24, &v20);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  v13 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(v20);
  if ((_BYTE)v14)
  {
    if (!v21)
    {
      v15 = v20;
      v20 = 0;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v13;
      goto LABEL_9;
    }
LABEL_16:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToScreen>(v19);
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v12 = v21;
  if (v21 != -1)
    goto LABEL_10;
LABEL_11:
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToScreen>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  void *v13;
  char v14;
  unint64_t *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  int v22;
  IPC::Encoder *v23;
  uint64_t v24;
  char v25;
  _BYTE v26[15];
  char v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3680, a3, &v24, (uint64_t *)&v23);
  v11 = v23;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v23 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v24, (uint64_t *)&v23, a4, (uint64_t)&v21, a6);
  if (!v22)
  {
    IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(v21, (uint64_t)&v25);
    if (!v27)
    {
      *(_BYTE *)a5 = 13;
      *(_DWORD *)(a5 + 24) = 1;
      v12 = v22;
      if (v22 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    v14 = v25;
    v28[0] = *(_QWORD *)v26;
    *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)&v26[7];
    v12 = v22;
    if (!v22)
    {
      v15 = v21;
      v21 = 0;
      *(_QWORD *)(a5 + 9) = v28[0];
      *(_QWORD *)(a5 + 16) = *(_QWORD *)((char *)v28 + 7);
      *(_QWORD *)a5 = v15;
      *(_BYTE *)(a5 + 8) = v14;
      *(_DWORD *)(a5 + 24) = 0;
      goto LABEL_10;
    }
LABEL_14:
    v19 = (unint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(v19, v20);
  }
  if (v22 != 1)
    goto LABEL_14;
  *(_BYTE *)a5 = (_BYTE)v21;
  v12 = 1;
  *(_DWORD *)(a5 + 24) = 1;
LABEL_10:
  ((void (*)(char *, unint64_t **))off_1E34FA3D0[v12])(&v25, &v21);
LABEL_11:
  result = v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IntRect>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::AccessibilityScreenToRootView>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  unint64_t v13;
  void *v14;
  unint64_t *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3649, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  v12 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v20;
LABEL_9:
      *(_DWORD *)(a5 + 16) = v12;
LABEL_10:
      ((void (*)(char *, unint64_t **))off_1E34FA3D0[v12])(&v24, &v20);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  v13 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(v20);
  if ((_BYTE)v14)
  {
    if (!v21)
    {
      v15 = v20;
      v20 = 0;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v13;
      goto LABEL_9;
    }
LABEL_16:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToAccessibilityScreen>(v19);
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v12 = v21;
  if (v21 != -1)
    goto LABEL_10;
LABEL_11:
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::RootViewToAccessibilityScreen>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  void *v13;
  char v14;
  unint64_t *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;
  _BYTE v25[15];
  char v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3679, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v11, *a2);
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  if (!v21)
  {
    IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(v20, (uint64_t)&v24);
    if (!v26)
    {
      *(_BYTE *)a5 = 13;
      *(_DWORD *)(a5 + 24) = 1;
      v12 = v21;
      if (v21 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    v14 = v24;
    v27[0] = *(_QWORD *)v25;
    *(_QWORD *)((char *)v27 + 7) = *(_QWORD *)&v25[7];
    v12 = v21;
    if (!v21)
    {
      v15 = v20;
      v20 = 0;
      *(_QWORD *)(a5 + 9) = v27[0];
      *(_QWORD *)(a5 + 16) = *(_QWORD *)((char *)v27 + 7);
      *(_QWORD *)a5 = v15;
      *(_BYTE *)(a5 + 8) = v14;
      *(_DWORD *)(a5 + 24) = 0;
      goto LABEL_10;
    }
LABEL_14:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::~CallableWrapper(v19);
  }
  if (v21 != 1)
    goto LABEL_14;
  *(_BYTE *)a5 = (_BYTE)v20;
  v12 = 1;
  *(_DWORD *)(a5 + 24) = 1;
LABEL_10:
  ((void (*)(char *, unint64_t **))off_1E34FA3D0[v12])(&v24, &v20);
LABEL_11:
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34FA3F0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34FA3F0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScript(WebKit::WebFrame *,WebCore::RunJavaScriptParameters &&,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler::optional<WebCore::ExceptionDetails> const&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<JSC::JSValue,WTF::CompletionHandler::optional>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::SerializedScriptValue *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::SerializedScriptValue *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  WebCore::SerializedScriptValue *v14;
  WebCore::ScriptController *v15;
  WebCore::DOMWrapperWorld *v16;
  const OpaqueJSValue **v17;
  OpaqueJSContext *v18[2];
  char v19;
  _DWORD *v20;
  unsigned int v21;
  WebCore::SerializedScriptValue *v22[2];
  char v23;
  _DWORD *v24;
  char v25;

  LOBYTE(v18[0]) = 0;
  v21 = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1
    || (((void (*)(WebCore::SerializedScriptValue **, OpaqueJSContext **, uint64_t))off_1E34FA418[v3])(v22, v18, a2), (v21 = v3) != 0))
  {
    v4 = 0;
LABEL_4:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v14 = (WebCore::SerializedScriptValue *)WebKit::WebFrame::jsContextForWorld(*(WebKit::WebFrame **)(a1 + 16), *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(a1 + 8) + 24));
  v15 = *(WebCore::ScriptController **)(*(_QWORD *)(a1 + 24) + 304);
  v16 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(a1 + 8) + 24);
  ++*(_DWORD *)v16;
  WebCore::ScriptController::jsWindowProxy(v15, v16);
  if (v21)
    goto LABEL_22;
  WebCore::SerializedScriptValue::create(v14, v18[0], 0, v17);
  v4 = v22[0];
  v22[0] = 0;
  WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v16);
  if (!v4)
    goto LABEL_4;
  v5 = *((_QWORD *)v4 + 1);
  v6 = *((unsigned int *)v4 + 5);
LABEL_5:
  LOBYTE(v22[0]) = 0;
  v25 = 0;
  if (!v21)
    goto LABEL_12;
  if (v21 != 1)
  {
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1977C13D0);
  }
  v7 = v18[0];
  if (v18[0])
    *(_DWORD *)v18[0] += 2;
  v22[0] = v7;
  v22[1] = v18[1];
  v23 = v19;
  v8 = v20;
  if (v20)
    *v20 += 2;
  v24 = v8;
  v25 = 1;
LABEL_12:
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WebCore::SerializedScriptValue **))(*(_QWORD *)v9 + 16))(v9, v5, v6, v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = std::__optional_destruct_base<WebCore::ExceptionDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v10);
  if (v4)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v4);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v4));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v4);
      v22[0] = v4;
      result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v22);
    }
  }
  if (v21 != -1)
    return off_1E34FA408[v21](v22, v18);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a3 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a2 + 24) = v5;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WebCore::ProcessQualified<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::String> const&,WTF::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0,void,unsigned char const,std::__1<WebCore::ExceptionDetails> const>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34FA438;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WebCore::ProcessQualified<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::String> const&,WTF::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0,void,unsigned char const,std::__1<WebCore::ExceptionDetails> const>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FA438;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::runJavaScriptInFrameInScriptWorld(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WebCore::ProcessQualified<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WTF::String> const&,WTF::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)::$_0,void,unsigned char const,std::__1<WebCore::ExceptionDetails> const>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = qword_1ECE71C68;
  if (*(_BYTE *)(a4 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(v8 + 40);
      WTF::String::utf8();
      if (v16)
        v11 = (char *)v16 + 16;
      else
        v11 = 0;
      *(_DWORD *)buf = 134218499;
      v18 = v8;
      v19 = 2048;
      v20 = v10;
      v21 = 2081;
      v22 = v11;
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "%p - [webPageID=%llu] WebPage::runJavaScriptInFrameInScriptWorld: Request to run JavaScript failed with error %{private}s", buf, 0x20u);
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v12);
        else
          --*(_DWORD *)v16;
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(v8 + 40);
    *(_DWORD *)buf = 134218240;
    v18 = v8;
    v19 = 2048;
    v20 = v13;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::runJavaScriptInFrameInScriptWorld: Request to run JavaScript succeeded", buf, 0x16u);
  }
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HTMLMediaElement,WTF::RawPtrTraits<WebCore::HTMLMediaElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLMediaElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::startPlayingPredominantVideo(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  WebCore::HTMLMediaElement **v13;

  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a2 + 1520))(a2);
  if ((_DWORD)result)
  {
    result = WebCore::HTMLMediaElement::isVisibleInViewport(a2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
      {
        v7 = v6 + (v6 >> 2);
        if (v7 >= 0x10)
          v8 = v7 + 1;
        else
          v8 = 16;
        if (v8 <= v6 + 1)
          v9 = v6 + 1;
        else
          v9 = v8;
        if (v9 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v10 = *(void **)v5;
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
        *(_DWORD *)(v5 + 8) = v9;
        *(_QWORD *)v5 = v11;
        result = (uint64_t)memcpy(v11, v10, 8 * v6);
        if (v10)
        {
          if (*(void **)v5 == v10)
          {
            *(_QWORD *)v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
          }
          result = WTF::fastFree((WTF *)v10, v12);
        }
        v6 = *(unsigned int *)(v5 + 12);
        v13 = (WebCore::HTMLMediaElement **)(*(_QWORD *)v5 + 8 * v6);
      }
      else
      {
        v13 = (WebCore::HTMLMediaElement **)(*(_QWORD *)v5 + 8 * v6);
      }
      *((_DWORD *)a2 + 6) += 2;
      *v13 = a2;
      *(_DWORD *)(v5 + 12) = v6 + 1;
    }
  }
  return result;
}

WTF *WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  WTF *result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    v20 = *a3;
    *a3 = 0;
    result = (WTF *)v16[1];
    *v16 = v11;
    v16[1] = v20;
    if (result)
      result = WTF::RefCounted<WebKit::WebUndoStep>::deref(result, a2);
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        result = (WTF *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a1, v16);
        v16 = (uint64_t *)result;
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = *a3;
  *a3 = 0;
  result = (WTF *)v16[1];
  v16[1] = v29;
  if (result)
    return WTF::RefCounted<WebKit::WebUndoStep>::deref(result, a2);
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WTF *)v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WTF **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<WebKit::WebUndoStep>::deref(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(a1, a2);
  return a1;
}

WTF *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  WTF *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = WTF::RefCounted<WebKit::WebUndoStep>::deref(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::TextIndicatorData const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::TextIndicatorData const&,unsigned long long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, *(int **)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

WTF *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>(WTF **a1, void *a2)
{
  WTF *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  *a1 = (WTF *)-1;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF *v26;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WTF **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
              WTF::fastFree(v26, v10);
            else
              --*(_DWORD *)v26;
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v4, a2);
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::CompositionUnderline>::destruct(*(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WTF::VectorDestructor<true,WebCore::CompositionUnderline>::destruct(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  for (; result != a2; result += 4)
  {
    v2 = result[2];
    if ((v2 & 0x8000000000000) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v6 = a2;
        v7 = result;
        WTF::fastFree((WTF *)v3, a2);
        a2 = v6;
        result = v7;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v3 + 8);
  *(_QWORD *)v4 = v5;
  WebCore::Color::Color();
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(v3 + 24);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1977C2294);
    }
    v4 = *(unsigned int **)a1;
    v5 = (unsigned int *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::CompositionUnderline>::move(v4, v5, v6);
    if (v4)
    {
      if (*(unsigned int **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
  }
  return 1;
}

unsigned int *WTF::VectorMover<false,WebCore::CompositionUnderline>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)v5;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 + 8);
      *(_QWORD *)a3 = v6;
      result = (unsigned int *)WebCore::Color::Color();
      *(_BYTE *)(a3 + 24) = *((_BYTE *)v5 + 24);
      v8 = *((_QWORD *)v5 + 2);
      if ((v8 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
        }
      }
      a3 += 32;
      v5 += 8;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::didChangeSelection(WebCore::LocalFrame &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34FA488;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didChangeSelection(WebCore::LocalFrame &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FA488;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPage::didChangeSelection(WebCore::LocalFrame &)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 296);
  if (v1 && *(_QWORD *)(v1 + 1944) && !*(_BYTE *)(v1 + 3405))
  {
    if (*(_BYTE *)(*(_QWORD *)(v1 + 3064) + 153))
      return WebKit::WebPage::preemptivelySendAutocorrectionContext(*((WebKit::WebPage **)result + 1));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::elementDidBlur(WebCore::Element &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA4B0;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::elementDidBlur(WebCore::Element &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA4B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::elementDidBlur(WebCore::Element &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v1 + 928))
  {
    v2 = result;
    v4 = *(_QWORD *)(v1 + 32);
    v3 = v1 + 32;
    v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1929;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v12 = (IPC::Encoder *)v6;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v12, 0);
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    v11 = *(_QWORD *)(v2 + 8);
    result = *(_QWORD *)(v11 + 928);
    *(_QWORD *)(v11 + 928) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(v1 + 928) = 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::canShowResponse(WebCore::ResourceResponse const&)::$_0,BOOL,WTF::String const&,WebCore::PluginData::AllowedPluginTypes>::call(uint64_t a1)
{
  WebCore::Page::pluginData(*(WebCore::Page **)(*(_QWORD *)(a1 + 8) + 48));
  WebCore::ResourceResponseBase::url(*(WebCore::ResourceResponseBase **)(a1 + 16));
  return WebCore::PluginData::supportsWebVisibleMimeTypeForURL();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::canShowMIMEType(WTF::String const&)::$_0,BOOL,WTF::String const&,WebCore::PluginData::AllowedPluginTypes>::call(uint64_t a1)
{
  WebCore::Page::pluginData(*(WebCore::Page **)(*(_QWORD *)(a1 + 8) + 48));
  return WebCore::PluginData::supportsWebVisibleMimeType();
}

uint64_t WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;

  if ((void *)result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 16);
      *(_DWORD *)(v5 + 16) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 20);
      *(_DWORD *)(v5 + 20) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      result = WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 8, a2);
      v8 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v8 + 4), a2);
          result = WTF::fastFree((WTF *)v8, v11);
        }
      }
      a3 += 24;
      v5 += 24;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::FloatSize><void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0>(WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  char v34;
  char v35;
  _BYTE v36[80];
  int v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  if (!a2 || (v4 = *a2) == 0)
  {
    v16 = a1 + 8;
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v16);
  }
  v6 = a2[1];
  if (v6 <= a2[2] - v4)
  {
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v24 = *a2;
        v25 = a2[1];
        v26 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v26)
        {
          if (v25)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
        }
      }
    }
    goto LABEL_5;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v7 + 1);
  v8 = *v7;
  if (v8 <= 1)
  {
    if (v8)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(a2, &v27);
      if (BYTE8(v27))
      {
        *(_QWORD *)&v39 = v27;
        v17 = 1;
        v47 = 1;
      }
      else
      {
        v17 = 0;
        LOBYTE(v39) = 0;
      }
      v48 = v17;
      v22 = 1;
      if (!v17)
        goto LABEL_5;
    }
    else
    {
      IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)&v27);
      if (v35)
      {
        v19 = v27;
        v27 = 0uLL;
        v39 = v19;
        v40 = v28;
        v41 = v29;
        LODWORD(v28) = v28 & 0xFFFFFFFE;
        v42 = v30;
        v43 = v31;
        v44 = v32;
        v20 = v33;
        v30 = 0;
        v33 = 0;
        v45 = v20;
        v46 = v34;
        v21 = 1;
        v47 = 0;
      }
      else
      {
        v21 = 0;
        LOBYTE(v39) = 0;
      }
      v48 = v21;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v18);
      v22 = 0;
      if (!v21)
        goto LABEL_5;
    }
    v36[0] = 0;
    v37 = -1;
    ((void (*)(__int128 *, _BYTE *, __int128 *))off_1E34FA550[v22])(&v27, v36, &v39);
    v37 = v22;
    v38 = 1;
    if (!v48)
      goto LABEL_24;
    if (v47 == -1)
      goto LABEL_24;
    ((void (*)(__int128 *, __int128 *))off_1E34FA540[v47])(&v27, &v39);
    if (v38)
      goto LABEL_24;
    goto LABEL_7;
  }
LABEL_5:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v11 = a2[3];
  if (v11 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  v36[0] = 0;
  v38 = 0;
LABEL_7:
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (!v14)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
  if (!v13)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  if (!v38)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v2);
LABEL_24:
  *(_QWORD *)&v39 = v2;
  *((_QWORD *)&v39 + 1) = v2;
  *(_QWORD *)&v40 = a1 + 16;
  if (v37 == -1)
  {
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(v16);
  }
  *(_QWORD *)&v27 = &v39;
  result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E34FA560[v37])(&v27, v36);
  if (v38)
  {
    if (v37 != -1)
      return ((uint64_t (*)(__int128 *, _BYTE *))off_1E34FA540[v37])(&v39, v36);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::LoadImageForDecoding,WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&::variant<WebCore::ResourceError,std::optional<WebCore::FloatSize>::Ref<WebCore::ShareableBitmap,std::optional<WebCore::FloatSize>::RawPtrTraits<std::optional<WebCore::FloatSize>::Ref>,std::optional<WebCore::FloatSize>::DefaultRefDerefTraits<std::optional<WebCore::FloatSize>::Ref>>> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[3];
  uint64_t **v4;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[3];
  char v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  v7[2] = 0;
  v7[0] = 0;
  *(_QWORD *)((char *)v7 + 6) = 0;
  v8 = 1;
  v9 = 0;
  v3[0] = a1;
  v3[1] = a1;
  v3[2] = a1 + 8;
  v4 = (uint64_t **)v3;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0::operator()(WTF::CompletionHandler<std::variant,WebCore::ResourceError<WebCore::FragmentedSharedBuffer,WebCore::ShareableBitmap<WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>,WTF::RawPtrTraits<WTF::Ref><WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>>> &&)::{lambda(std::variant&&)#1},WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &,WebCore::FloatSize,unsigned long,void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&))::WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)>::operator()(WTF::RawPtrTraits<WTF::Ref><WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>)::{lambda(WebCore::FragmentedSharedBuffer&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,WebCore::FragmentedSharedBuffer> &&>(&v4, &v5);
  if (v9 != -1)
    return ((uint64_t (*)(_QWORD *, uint64_t *))off_1E34FA540[v9])(v3, &v5);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v5;
  WTF::URL::URL(a2 + 8, a3 + 1);
  v6 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a3 + 30);
  *(_DWORD *)(a2 + 56) = v6;
  v7 = a3[8];
  a3[8] = 0;
  *(_QWORD *)(a2 + 64) = v7;
  *(_BYTE *)(a2 + 72) = *((_BYTE *)a3 + 72);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0::operator()(WTF::CompletionHandler<std::variant,WebCore::ResourceError<WebCore::FragmentedSharedBuffer,WebCore::ShareableBitmap<WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>,WTF::RawPtrTraits<WTF::Ref><WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>>> &&)::{lambda(std::variant&&)#1},WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &,WebCore::FloatSize,unsigned long,void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&))::WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)>::operator()(WTF::RawPtrTraits<WTF::Ref><WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>)::{lambda(WebCore::FragmentedSharedBuffer&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,WebCore::FragmentedSharedBuffer> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  _QWORD v12[6];
  int v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  v4 = *a2;
  *a2 = 0;
  v11 = v4;
  v5 = WTF::URL::URL((uint64_t)v12, a2 + 1);
  v6 = a2[6];
  a2[6] = 0;
  v12[5] = v6;
  v14 = *((_WORD *)a2 + 30);
  v13 = *((_DWORD *)a2 + 14);
  v7 = a2[8];
  a2[8] = 0;
  v15 = v7;
  v16 = *((_BYTE *)a2 + 72);
  v17 = 0;
  v8 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v8 + 16))(v8, &v11, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v17 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34FA570[v17])(&v10, &v11);
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &&,std::optional<WebCore::FloatSize>,unsigned long,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &&)::$_0::operator()(WTF::CompletionHandler<std::variant,WebCore::ResourceError<WebCore::FragmentedSharedBuffer,WebCore::ShareableBitmap<WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>,WTF::RawPtrTraits<WTF::Ref><WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>>> &&)::{lambda(std::variant&&)#1},WebKit::WebPage::loadAndDecodeImage(WebCore::ResourceRequest &,WebCore::FloatSize,unsigned long,void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&))::WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)>::operator()(WTF::RawPtrTraits<WTF::Ref><WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&)> &>)::{lambda(WebCore::FragmentedSharedBuffer&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,WebCore::FragmentedSharedBuffer> &&>(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  const FloatRect *v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  const void **v23;
  uint64_t v24;
  const void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t *v28;
  WebCore::ShareableBitmap *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WebCore::ShareableBitmap *v38;
  CFTypeRef v39;
  WebCore::NativeImage *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  _DWORD *result;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  CFTypeRef v54;
  char v55;
  WebCore::ShareableBitmap *v56;
  CFTypeRef v57;
  uint64_t v58;
  WebCore::NativeImage *v59;
  uint64_t v60;
  unsigned int *v61;
  CFTypeRef cf;
  char v63;
  _QWORD v64[2];
  uint64_t v65;
  char v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  WebCore::BitmapImage::create();
  v4 = *a2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v61 = v4;
  WebCore::Image::setData();
  v7 = v61;
  v61 = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
  (*(void (**)(WebCore::NativeImage **__return_ptr))(**(_QWORD **)(v60 + 64) + 128))(&v59);
  if (v59)
  {
    v8 = WebCore::NativeImage::size(v59);
    v10 = (float)(int)v8;
    v11 = (float)SHIDWORD(v8);
    v12 = *(_QWORD *)(v3 + 16);
    v13 = (float)(int)v8;
    v14 = (float)SHIDWORD(v8);
    if (*(_BYTE *)(v12 + 8))
    {
      v15 = *(float *)v12;
      v16 = *(float *)(v12 + 4);
      if (*(float *)v12 >= v10)
        v15 = (float)(int)v8;
      v61 = 0;
      if (v16 >= v11)
        v16 = (float)SHIDWORD(v8);
      cf = (CFTypeRef)__PAIR64__(LODWORD(v16), LODWORD(v15));
      WebCore::largestRectWithAspectRatioInsideRect((WebCore *)&v61, v10 / v11, v9);
    }
    v17 = floorf(v13);
    v18 = 0x7FFFFFFFLL;
    v19 = 0x80000000;
    if (v17 > -2147500000.0)
      v19 = (int)v17;
    if (v17 < 2147500000.0)
      v18 = v19;
    v20 = floorf(v14);
    v21 = 0x7FFFFFFF00000000;
    v22 = 0x8000000000000000;
    if (v20 > -2147500000.0)
      v22 = (unint64_t)(int)v20 << 32;
    if (v20 < 2147500000.0)
      v21 = v22;
    v58 = v21 | v18;
    v23 = &v57;
    WebCore::NativeImage::colorSpace(v59);
    v24 = WebCore::DestinationColorSpace::supportsOutput((WebCore::DestinationColorSpace *)&v57);
    if ((v24 & 1) == 0)
      v23 = (const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v24);
    v25 = *v23;
    if (v25)
    {
      CFRetain(v25);
      v54 = v25;
      CFRetain(v25);
    }
    else
    {
      v54 = 0;
    }
    v55 = 1;
    MEMORY[0x19AEB3600](&v61, &v58, &v54, 0);
    WebCore::ShareableBitmap::create();
    if (v63)
    {
      v26 = cf;
      cf = 0;
      if (v26)
        CFRelease(v26);
    }
    if (v55)
    {
      v27 = v54;
      v54 = 0;
      if (v27)
        CFRelease(v27);
    }
    if (v56)
    {
      WebCore::ShareableBitmap::createGraphicsContext(v56);
      if (v53)
      {
        v61 = 0;
        cf = (CFTypeRef)vcvt_f32_s32((int32x2_t)v58);
        v50 = 0;
        v51 = v10;
        v52 = v11;
        WebCore::GraphicsContext::drawNativeImage();
        v28 = *(uint64_t **)(v3 + 8);
        v29 = v56;
        v56 = 0;
        v61 = (unsigned int *)v29;
        v67 = 1;
        v30 = *v28;
        *v28 = 0;
      }
      else
      {
        v36 = *(uint64_t **)(v3 + 8);
        v61 = 0;
        cf = 0;
        WTF::URL::invalidate((WTF::URL *)&cf);
        v65 = 0;
        v64[0] = 0;
        *(_QWORD *)((char *)v64 + 6) = 0;
        v66 = 1;
        v67 = 0;
        v30 = *v36;
        *v36 = 0;
      }
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v30 + 16))(v30, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      if (v67 != -1)
        ((void (*)(uint64_t *, unsigned int **))off_1E34FA570[v67])(&v50, &v61);
      v37 = v53;
      v53 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
    else
    {
      v34 = *(uint64_t **)(v3 + 8);
      v61 = 0;
      cf = 0;
      WTF::URL::invalidate((WTF::URL *)&cf);
      v65 = 0;
      v64[0] = 0;
      *(_QWORD *)((char *)v64 + 6) = 0;
      v66 = 1;
      v67 = 0;
      v35 = *v34;
      *v34 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v35 + 16))(v35, &v61);
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      if (v67 != -1)
        ((void (*)(uint64_t *, unsigned int **))off_1E34FA570[v67])(&v50, &v61);
    }
    v38 = v56;
    v56 = 0;
    if (v38)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v38, v33);
    if (v25)
      CFRelease(v25);
    v39 = v57;
    v57 = 0;
    if (v39)
      CFRelease(v39);
  }
  else
  {
    v31 = *(uint64_t **)(v3 + 8);
    v61 = 0;
    cf = 0;
    WTF::URL::invalidate((WTF::URL *)&cf);
    v65 = 0;
    v64[0] = 0;
    *(_QWORD *)((char *)v64 + 6) = 0;
    v66 = 1;
    v67 = 0;
    v32 = *v31;
    *v31 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v32 + 16))(v32, &v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    if (v67 != -1)
      ((void (*)(CFTypeRef *, unsigned int **))off_1E34FA570[v67])(&v54, &v61);
  }
  v40 = v59;
  v59 = 0;
  if (v40)
  {
    v41 = *((_QWORD *)v40 + 1);
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v41))
    {
      goto LABEL_53;
    }
    MEMORY[0x19AEABB3C](v41);
LABEL_53:
    v43 = *(_QWORD *)(v41 + 8);
    v44 = v43 - 1;
    *(_QWORD *)(v41 + 8) = v43 - 1;
    if (v43 == 1)
    {
      v49 = *(_QWORD *)(v41 + 16);
      v45 = *(_QWORD *)(v41 + 24);
      *(_QWORD *)(v41 + 24) = 0;
      v46 = v49 != 0;
    }
    else
    {
      v45 = 0;
      v46 = 1;
    }
    v47 = __ldxr((unsigned __int8 *)v41);
    if (v47 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
        if (v44)
          goto LABEL_65;
LABEL_61:
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        if (!v46)
          WTF::fastFree((WTF *)v41, v33);
        goto LABEL_65;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    if (v44)
      goto LABEL_65;
    goto LABEL_61;
  }
LABEL_65:
  result = (_DWORD *)v60;
  v60 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

BOOL WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _BOOL8 result;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  v8 = *(_DWORD *)(v2 + 4 * v7);
  if (v8 == *a2)
    return 1;
  v10 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v10) & v3;
    v8 = *(_DWORD *)(v2 + 4 * v7);
    ++v10;
  }
  while (v8 != v4);
  return result;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v6 - 4);
        v24 = 0;
        v25 = v6 + 4 * v23;
        goto LABEL_27;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_18:
      result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(v4, v13);
      v13 = (int *)result;
      v19 = *v4;
      if (*v4)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_18;
  }
  v25 = v19 + 4 * v22;
  v24 = 1;
LABEL_27:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v24;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(4 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (int *)(v6 + 4 * v11);
      v14 = *v13;
      if ((*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = 0;
        v18 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
        v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
        do
        {
          v20 = v19 & v16;
          v19 = ++v17 + v20;
        }
        while (*(_DWORD *)(v15 + 4 * v20));
        v21 = (_DWORD *)(v15 + 4 * v20);
        *v21 = v14;
        if (v13 == a3)
          v12 = v21;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v2 = *(_DWORD *)(v3 - 12) - 1;
  *(_DWORD *)(v3 - 12) = v2;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<unsigned int>,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16)) & v3;
  v7 = *(_DWORD *)(v2 + 4 * v6);
  if (v7 == *a2)
    return v2 + 4 * v6;
  v8 = 1;
  while (v7)
  {
    v6 = ((_DWORD)v6 + v8) & v3;
    v7 = *(_DWORD *)(v2 + 4 * v6);
    ++v8;
    if (v7 == v4)
      return v2 + 4 * v6;
  }
  return v2 + 4 * *(unsigned int *)(v2 - 4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::HandleMessageWithAsyncReply,WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0>(WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA590;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::HandleMessageWithAsyncReply,WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0>(WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA590;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::HandleMessageWithAsyncReply,WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0>(WebKit::WebPage::postMessageWithAsyncReply(WTF::String const&,API::Object *,WTF::CompletionHandler<void ()(API::Object *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::UserData>>(a2, (uint64_t)&v9);
    if (v10)
    {
      v3 = v9;
      if (v9)
      {
        CFRetain(*(CFTypeRef *)(v9 + 8));
        v4 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        CFRelease(*(CFTypeRef *)(v3 + 8));
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      if (v10)
      {
        v5 = v9;
        v9 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::HandleSynchronousMessage>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  int v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t *v24;
  int v25;
  IPC::Encoder *v26;
  uint64_t v27;

  v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3672, a3, &v27, (uint64_t *)&v26);
  v11 = v26;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v26 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v11, a2[1]);
  IPC::Connection::sendSyncMessage(a1, v27, (uint64_t *)&v26, a4, (uint64_t)&v24, a6);
  if (!v25)
  {
    LOBYTE(v22) = 0;
    v23 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::UserData>>(v24, (uint64_t)&v22);
    if (v23)
    {
      if (v25)
        goto LABEL_19;
      v14 = v24;
      v24 = 0;
      v15 = v22;
      if (v22)
      {
        CFRetain(*(CFTypeRef *)(v22 + 8));
        CFRetain(*(CFTypeRef *)(v15 + 8));
        CFRelease(*(CFTypeRef *)(v15 + 8));
        v16 = v23;
        *(_QWORD *)a5 = v14;
        *(_QWORD *)(a5 + 8) = v15;
        *(_DWORD *)(a5 + 16) = 0;
        if (!v16)
          goto LABEL_13;
      }
      else
      {
        *(_QWORD *)a5 = v14;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 0;
      }
      v17 = v22;
      v22 = 0;
      if (v17)
        CFRelease(*(CFTypeRef *)(v17 + 8));
    }
    else
    {
      *(_BYTE *)a5 = 13;
      *(_DWORD *)(a5 + 16) = 1;
    }
LABEL_13:
    v12 = v25;
    if (v25 == -1)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v25 != 1)
  {
LABEL_19:
    v21 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::~CallableWrapper(v21);
  }
  *(_BYTE *)a5 = (_BYTE)v24;
  v12 = 1;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_14:
  ((void (*)(uint64_t *, uint64_t **))off_1E34FA3D0[v12])(&v22, &v24);
LABEL_15:
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA5B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA5B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPage::didGetLoadDecisionForIcon(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::$_0,void,WebCore::FragmentedSharedBuffer *>::call(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;

  if (a2)
  {
    do
      v2 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v2 + 1, (unsigned int *)a2));
    v3 = *(_QWORD *)(a2 + 48);
  }
  else
  {
    v3 = 0;
  }
  v8 = v3;
  v9 = (unsigned int *)a2;
  v10 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = v10;
  v10 = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
  result = v9;
  v9 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  WebKit::WebURLSchemeHandlerProxy *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebKit::WebURLSchemeHandlerProxy **v14;
  WebKit::WebURLSchemeHandlerProxy *v15;
  WebKit::WebURLSchemeHandlerProxy **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (WebKit::WebURLSchemeHandlerProxy *)*a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (WebKit::WebURLSchemeHandlerProxy **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == (WebKit::WebURLSchemeHandlerProxy *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (WebKit::WebURLSchemeHandlerProxy **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = (WebKit::WebURLSchemeHandlerProxy *)*a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
    result = (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref((WebKit::WebURLSchemeHandlerProxy *)result, a2);
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::expand(v4, v14);
      v14 = (WebKit::WebURLSchemeHandlerProxy **)result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_31:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

WebKit::WebURLSchemeHandlerProxy **WTF::HashTable<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>>::expand(uint64_t *a1, WebKit::WebURLSchemeHandlerProxy **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WebKit::WebURLSchemeHandlerProxy **v11;
  WebKit::WebURLSchemeHandlerProxy **v12;
  WebKit::WebURLSchemeHandlerProxy *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  WebKit::WebURLSchemeHandlerProxy **v23;
  WebKit::WebURLSchemeHandlerProxy *v24;
  WebKit::WebURLSchemeHandlerProxy *v25;
  WebKit::WebURLSchemeHandlerProxy **result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (WebKit::WebURLSchemeHandlerProxy **)(v4 + 8 * v10);
      v13 = *v12;
      if (*v12 != (WebKit::WebURLSchemeHandlerProxy *)-1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 8 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (WebKit::WebURLSchemeHandlerProxy **)(v14 + 8 * v21);
          *v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *v23 = v24;
          v25 = *v12;
          *v12 = 0;
          if (v25)
            WTF::RefCounted<WebKit::WebURLSchemeHandlerProxy>::deref(v25, v9);
          if (v12 == a2)
            v11 = v23;
        }
        else
        {
          *v12 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeHandlerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (uint64_t *)(v2 + 16 * v8);
      v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (unsigned int *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            do
            {
              v28 = __ldaxr(v25);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v25));
            if (!v29)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v7);
            }
          }
          *v24 = *v9;
          v26 = v2 + 16 * v8;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v12 = *(unsigned int **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (!v12)
            goto LABEL_21;
          do
          {
            v30 = __ldaxr(v12);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v12));
          if (v31)
            goto LABEL_21;
        }
        else
        {
          v11 = v2 + 16 * v8;
          v12 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (!v12)
            goto LABEL_21;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (v14)
            goto LABEL_21;
        }
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v7);
      }
LABEL_21:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA608;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA608;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::HasStorageAccess,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, a2[2]);
  return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, a2[3]);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StorageAccessScope<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0)#1},void,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34FA630;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageAccessScope<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0)#1},void,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34FA630;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::StorageAccessScope<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0)#1},void,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  WTF::ASCIICaseInsensitiveHash *v17;
  WTF::StringImpl *v18[2];
  char v19;

  v2 = a1 + 8;
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(a1 + 8);
  IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::decode(a2, (uint64_t)&v17);
  if (v19)
    goto LABEL_4;
  v8 = *a2;
  v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v10 = a2[3];
  if (!v10)
  {
    v9 = 0;
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  if (!v9)
    goto LABEL_17;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
  if (v19)
  {
LABEL_4:
    v12 = (__int16)v17;
    v13 = BYTE2(v17);
    v16 = 1;
    v14 = 0;
    v15 = 0;
    WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(v2, &v17);
    v5 = v18[1];
    v18[1] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v7 = v18[0];
    v18[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v4);
  }
  v11 = (WTF::StringImpl *)*a2;
  v9 = a2[1];
  v10 = a2[3];
LABEL_18:
  LOBYTE(v12) = 0;
  v16 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v10 && v9)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10, v11);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v11);
  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(v2);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::RequestStorageAccess,WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0>(uint64_t a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::ASCIICaseInsensitiveHash *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  LOWORD(v4) = 0;
  BYTE2(v4) = 0;
  v5 = 0;
  v6 = 0;
  WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(a1, &v4);
  v2 = v6;
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebPage::requestStorageAccess(WebCore::RegistrableDomain &&,WebCore::RegistrableDomain &,WebKit::WebFrame &,WebCore::StorageAccessScope,WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)> &&)::$_0::operator()(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  __int16 v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (*(_BYTE *)a2 == 1)
  {
    if (*((_BYTE *)a2 + 2))
    {
      WebKit::WebPage::addDomainWithPageLevelStorageAccess(*(WebKit::WebPage **)a1, a2 + 1, a2 + 2);
    }
    else
    {
      v4 = WebKit::WebFrame::localFrameLoaderClient(*(WebKit::WebFrame **)(a1 + 24));
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(unsigned __int8 *)(v4 + 80);
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(v4 + 72) = v5;
      if (!v6)
        *(_BYTE *)(v4 + 80) = 1;
    }
  }
  v12 = *(_WORD *)a2;
  v13 = *((_BYTE *)a2 + 2);
  v7 = a2[1];
  if (v7)
    *(_DWORD *)v7 += 2;
  v14 = v7;
  v8 = a2[2];
  if (v8)
    *(_DWORD *)v8 += 2;
  v15 = v8;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()((uint64_t *)(a1 + 16), (uint64_t)&v12);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::StorageAccessScope>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::StorageAccessScope>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, v2[2]);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, v2[3]);
  v4 = *v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2051;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34FA658;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::FrameInfoData const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA658;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA658;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShouldAllowDeviceOrientationAndMotionAccess,WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)>>(WTF::CompletionHandler<void ()(WebCore::DeviceOrientationOrMotionPermissionState)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2 || !*a2)
  {
LABEL_6:
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v4 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(a2);
  if (v4 <= 0xFFu)
  {
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v8 = a2[3];
    if (v8 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2064;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::encode((IPC::Encoder *)v10, *a2);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34FA680;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA680;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA680;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2053;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::encode((IPC::Encoder *)v10, *a2);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34FA6A8;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA6A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA6A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unsigned int v20;
  uint64_t result;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  WTF *v55;
  int v56;
  unsigned int v57;
  char v58;
  char v59;
  _QWORD v60[2];
  char v61;
  char v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>((uint64_t *)(a1 + 8));
  v4 = (char *)*a2;
  if (!v4)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - (uint64_t)v4)
  {
    v26 = 0;
    v27 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v26 = 0;
        v51 = *a2;
        v52 = a2[1];
        v53 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v27 = 0;
        if (v53 && v52)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
          v27 = (char *)*a2;
          v26 = a2[1];
        }
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    goto LABEL_29;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v26 = v5;
    v27 = v4;
LABEL_29:
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29 && v26)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27, v26);
    goto LABEL_48;
  }
  if (v8)
  {
    v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
    if (v5 < v9 || v5 - v9 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      v30 = a2[3];
      if (v30)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v31 = *a2;
        v32 = a2[1];
        v33 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v33)
        {
          if (v32)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
        }
      }
LABEL_47:
      v42 = *a2;
      v43 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v44 = a2[3];
      if (v44 && v43)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
LABEL_48:
      v45 = *a2;
      v46 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v47 = a2[3];
      if (v47 && v46)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
        v48 = *a2;
        v49 = a2[1];
        v50 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v50)
        {
          if (v49)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      return IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v2);
    }
    v11 = (unint64_t *)&v4[v9];
    v12 = *v11;
    a2[2] = (uint64_t)(v11 + 1);
    v75 = 0;
    v76 = 0;
    if (v12 >= 0x5555)
    {
      do
      {
        IPC::Decoder::decode<WebCore::ContactInfo>((uint64_t)&v65, a2);
        if (!v74)
          goto LABEL_46;
        v34 = HIDWORD(v76);
        if (HIDWORD(v76) == (_DWORD)v76)
        {
          WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContactInfo>((uint64_t)&v75, (unint64_t)&v65);
        }
        else
        {
          v35 = v75 + 48 * HIDWORD(v76);
          *(_QWORD *)v35 = 0;
          *(_QWORD *)(v35 + 8) = 0;
          v36 = v65;
          v65 = 0;
          *(_QWORD *)v35 = v36;
          LODWORD(v36) = v66;
          v66 = 0;
          *(_DWORD *)(v35 + 8) = v36;
          LODWORD(v36) = v67;
          v67 = 0;
          *(_DWORD *)(v35 + 12) = v36;
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 24) = 0;
          v37 = v68;
          v68 = 0;
          *(_QWORD *)(v35 + 16) = v37;
          LODWORD(v37) = v69;
          v69 = 0;
          *(_DWORD *)(v35 + 24) = v37;
          LODWORD(v37) = v70;
          v70 = 0;
          *(_DWORD *)(v35 + 28) = v37;
          *(_QWORD *)(v35 + 32) = 0;
          *(_QWORD *)(v35 + 40) = 0;
          v38 = v71;
          v71 = 0;
          *(_QWORD *)(v35 + 32) = v38;
          LODWORD(v38) = v72;
          v72 = 0;
          *(_DWORD *)(v35 + 40) = v38;
          LODWORD(v38) = v73;
          v73 = 0;
          *(_DWORD *)(v35 + 44) = v38;
          HIDWORD(v76) = v34 + 1;
        }
        result = std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v13);
        --v12;
      }
      while (v12);
      LODWORD(v12) = v76;
      v19 = (WTF *)v75;
      v54 = HIDWORD(v76);
      if (v76 > HIDWORD(v76))
      {
        v39 = (WTF *)v75;
        if (HIDWORD(v76))
        {
          if (HIDWORD(v76) >= 0x5555556)
          {
            __break(0xC471u);
            return result;
          }
          v40 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v76)));
          LODWORD(v12) = 48 * v54 / 0x30;
          if ((WTF *)v40 == v19)
          {
            v39 = v19;
          }
          else
          {
            v39 = (WTF *)v40;
            WTF::VectorMover<false,WebCore::ContactInfo>::move((uint64_t)v19, (char *)v19 + 48 * v54, v40);
          }
        }
        if (v19)
        {
          if (v39 == v19)
          {
            LODWORD(v12) = 0;
            v39 = 0;
            v75 = 0;
            LODWORD(v76) = 0;
          }
          WTF::fastFree(v19, v4);
        }
        v19 = v39;
      }
      v75 = 0;
      LODWORD(v76) = 0;
      v20 = v54;
      goto LABEL_24;
    }
    if (v12)
    {
      LODWORD(v76) = 48 * (int)v12 / 0x30u;
      v75 = WTF::fastMalloc((WTF *)(48 * v12));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ContactInfo>((uint64_t)&v65, a2);
        if (!v74)
          break;
        v14 = HIDWORD(v76);
        if (HIDWORD(v76) == (_DWORD)v76)
        {
          WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContactInfo>((uint64_t)&v75, (unint64_t)&v65);
        }
        else
        {
          v15 = v75 + 48 * HIDWORD(v76);
          *(_QWORD *)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
          v16 = v65;
          v65 = 0;
          *(_QWORD *)v15 = v16;
          LODWORD(v16) = v66;
          v66 = 0;
          *(_DWORD *)(v15 + 8) = v16;
          LODWORD(v16) = v67;
          v67 = 0;
          *(_DWORD *)(v15 + 12) = v16;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 24) = 0;
          v17 = v68;
          v68 = 0;
          *(_QWORD *)(v15 + 16) = v17;
          LODWORD(v17) = v69;
          v69 = 0;
          *(_DWORD *)(v15 + 24) = v17;
          LODWORD(v17) = v70;
          v70 = 0;
          *(_DWORD *)(v15 + 28) = v17;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0;
          v18 = v71;
          v71 = 0;
          *(_QWORD *)(v15 + 32) = v18;
          LODWORD(v18) = v72;
          v72 = 0;
          *(_DWORD *)(v15 + 40) = v18;
          LODWORD(v18) = v73;
          v73 = 0;
          *(_DWORD *)(v15 + 44) = v18;
          HIDWORD(v76) = v14 + 1;
        }
        std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v13);
        if (!--v12)
        {
          v19 = (WTF *)v75;
          LODWORD(v12) = v76;
          v20 = HIDWORD(v76);
          goto LABEL_23;
        }
      }
LABEL_46:
      std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v13);
      WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v41);
      goto LABEL_47;
    }
    v20 = 0;
    v19 = 0;
LABEL_23:
    v75 = 0;
    LODWORD(v76) = 0;
LABEL_24:
    HIDWORD(v76) = 0;
    v64 = 1;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v4);
    v63[0] = 0;
    v63[1] = 0;
    v61 = 1;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v22);
    v62 = 1;
    v60[0] = 0;
    v60[1] = 0;
    v55 = v19;
    v56 = v12;
    v57 = v20;
    v58 = 1;
    v59 = 1;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v23);
  }
  else
  {
    LOBYTE(v55) = 0;
    v58 = 0;
    v59 = 1;
  }
  v24 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, &v55);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v59 && v58)
    return WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v25);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  _BYTE v4[16];
  char v5;

  v4[0] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5)
    return WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ContactInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ContactInfo,void>::decode(a2, a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContactInfo>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v7 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  LODWORD(v7) = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1977C53F8);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (void *)(*(_QWORD *)result + 48 * *(unsigned int *)(result + 12));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::ContactInfo>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::ContactInfo>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if ((void *)result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 28) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v8 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 40);
      *(_DWORD *)(v5 + 40) = 0;
      *(_DWORD *)(a3 + 40) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 44);
      *(_DWORD *)(v5 + 44) = 0;
      *(_DWORD *)(a3 + 44) = v8;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 32, a2);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 16, v9);
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v10);
      v5 += 48;
      a3 += 48;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ContactInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v3);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v4);
  }
  return a1;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::RequestDOMPasteAccess>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  char v12;
  int v13;
  void *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void **v24;
  void *v25;
  IPC::Encoder *result;
  WTF *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void **v33;
  int v34;
  IPC::Encoder *v35;
  uint64_t v36;
  char v37;

  v36 = 0;
  IPC::Connection::createSyncMessageEncoder(3678, a3, &v36, (uint64_t *)&v35);
  v11 = v35;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v35 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  v12 = *(_BYTE *)a2;
  *IPC::Encoder::grow(v11, 1uLL, 1) = v12;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v11, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v11, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, *(uint64_t **)(a2 + 24));
  IPC::Connection::sendSyncMessage(a1, v36, (uint64_t *)&v35, (char)a4, (uint64_t)&v33, a6);
  v13 = v34;
  if (!v34)
  {
    a4 = v33;
    v14 = v33[1];
    v15 = (char *)*v33;
    v16 = (_BYTE *)v33[2] - (_BYTE *)*v33;
    if ((unint64_t)v14 <= v16)
    {
      v20 = 0;
      v21 = 0;
      *v33 = 0;
      a4[1] = 0;
      v22 = a4[3];
      if (v22)
      {
        if (v14)
        {
          (*(void (**)(void *, char *, void *))(*(_QWORD *)v22 + 16))(v22, v15, v14);
          v21 = *a4;
          v20 = a4[1];
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
      }
    }
    else
    {
      v17 = &v15[v16];
      v33[2] = v17 + 1;
      if (v15)
      {
        v18 = *v17;
        if (v18 < 3)
        {
          v19 = 0;
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      v20 = v14;
      v21 = 0;
    }
    *a4 = 0;
    a4[1] = 0;
    v23 = (uint64_t)a4[3];
    if (v23)
      goto LABEL_25;
    goto LABEL_12;
  }
  if (v34 == 1)
  {
    *(_BYTE *)a5 = (_BYTE)v33;
LABEL_16:
    *(_DWORD *)(a5 + 16) = v13;
LABEL_17:
    ((void (*)(char *, void ***))off_1E34FA3D0[v13])(&v37, &v33);
    goto LABEL_18;
  }
  while (1)
  {
    v23 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
    if (v20)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v23 + 16))(v23, v21);
LABEL_12:
    LOBYTE(v18) = 0;
    v19 = 1;
LABEL_13:
    if (v19)
      break;
    if (!v34)
    {
      v24 = v33;
      v33 = 0;
      *(_QWORD *)a5 = v24;
      *(_BYTE *)(a5 + 8) = v18;
      goto LABEL_16;
    }
  }
  v25 = *a4;
  v29 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v30 = a4[3];
  if (v30)
  {
    if (v29)
    {
      (*(void (**)(void *, void *))(*(_QWORD *)v30 + 16))(v30, v25);
      v25 = *a4;
      v31 = a4[1];
      v32 = a4[3];
      *a4 = 0;
      a4[1] = 0;
      if (v32)
      {
        if (v31)
          (*(void (**)(void *, void *))(*(_QWORD *)v32 + 16))(v32, v25);
      }
    }
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v13 = v34;
  if (v34 != -1)
    goto LABEL_17;
LABEL_18:
  result = v35;
  v35 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ParsedTextDirective,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    v5 = *(_QWORD *)a1 + 16;
    do
    {
      v6 = *(WTF::StringImpl **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(WTF::StringImpl **)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS9_13AttributeRuleENS9_9ClassRuleEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::startTextManipulationForFrame(WebCore::Frame &)::$_0,void,WebCore::Document &,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34FA6E8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::startTextManipulationForFrame(WebCore::Frame &)::$_0,void,WebCore::Document &,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA6E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPage::startTextManipulationForFrame(WebCore::Frame &)::$_0,void,WebCore::Document &,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>::call(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;

  v4 = result;
  v5 = *(_QWORD *)(a2 + 528);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_22;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
  {
LABEL_22:
    v9 = 1;
    goto LABEL_6;
  }
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = 0;
LABEL_6:
  v10 = *((_QWORD *)result + 1);
  if (v10 && *(_QWORD *)(v10 + 8))
  {
    if ((v9 & 1) != 0)
      return result;
    WebKit::WebFrame::fromCoreFrame(v6, &v22);
    if (v22)
    {
      v11 = *((_QWORD *)v4 + 1);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v13 = v12 - 16;
        else
          v13 = 0;
      }
      else
      {
        v13 = 0;
      }
      v15 = *(_QWORD *)(v13 + 32);
      v14 = v13 + 32;
      v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
      v17 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v17 = 1885;
      *(_QWORD *)(v17 + 8) = v16;
      *(_QWORD *)(v17 + 528) = v17 + 16;
      *(_QWORD *)(v17 + 536) = v17 + 16;
      *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v17 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      v23 = (IPC::Encoder *)v17;
      IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v17, a3);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v14 + 32))(v14, &v23, 0);
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v18);
        WTF::fastFree(v20, v21);
      }
      if (v22)
        CFRelease(*(CFTypeRef *)(v22 + 8));
    }
  }
  else if ((v9 & 1) != 0)
  {
    return result;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::TextManipulationItem const,18446744073709551615ul>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v3 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3)
    return v3;
  if (a3 < 0x5555556)
  {
    v5 = 48 * a3;
    v6 = WTF::fastMalloc((WTF *)(48 * a3));
    *(_DWORD *)(v3 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v3 = v6;
    v7 = v6 + 32;
    v8 = a2 + 32;
    do
    {
      v9 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(v7 - 16) = v9;
      v7 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v8)
         + 48;
      v8 += 48;
      v5 -= 48;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)(a2 + 8));
}

unint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,16ul,WTF::CrashOnOverflow>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = (void *)(*(_QWORD *)result + 24 * *(unsigned int *)(result + 12));
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = v6;
      result = WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move((uint64_t)v3, v4, v6);
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v7);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TextRecognitionOptions &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v10;

  *a1 = &off_1E34FA710;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v10);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextRecognitionOptions &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v10;

  *(_QWORD *)this = &off_1E34FA710;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 4), a2);
      WTF::fastFree((WTF *)v3, v10);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextRecognitionOptions &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)> &&>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[7];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v2 = a1 + 8;
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(a1 + 8);
  IPC::Decoder::decode<WebCore::TextRecognitionResult>(a2, (uint64_t)&v19);
  if (v26)
  {
    v5 = v19;
    v19 = 0;
    v17[0] = v5;
    v6 = v20;
    v20 = 0;
    v17[1] = v6;
    v7 = v21;
    v21 = 0;
    v17[2] = v7;
    v8 = v22;
    v22 = 0;
    v17[3] = v8;
    v9 = v23;
    v23 = 0;
    v17[4] = v9;
    v10 = v24;
    v24 = 0;
    v17[5] = v10;
    v11 = v25;
    v25 = 0;
    v17[6] = v11;
    v18 = 1;
    std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v4);
    WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1::operator()<WebCore::TextRecognitionResult>(v2);
    return std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v12);
  }
  else
  {
    LOBYTE(v17[0]) = 0;
    v18 = 0;
    std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v4);
    v14 = (void *)*a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v15)
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v16 + 16))(v16, v14);
    }
    std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v14);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::RequestTextRecognition,WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1>(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CFTypeRef cf;

  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1::operator()<WebCore::TextRecognitionResult>(a1);
  cf = 0;
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v1);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
  return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v3);
}

void IPC::Decoder::decode<WebCore::TextRecognitionResult>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t std::__optional_destruct_base<WebCore::TextRecognitionResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  const void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v3)
      CFRelease(v3);
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v4);
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v5);
  }
  return a1;
}

void WebKit::WebPage::requestTextRecognition(WebCore::Element &,WebCore::TextRecognitionOptions &&,WTF::CompletionHandler<void ()(WebCore::TextRecognitionOptions &&::RefPtr<WebCore::Element,WebCore::TextRecognitionOptions &&::RawPtrTraits<WebCore::Element>,WebCore::TextRecognitionOptions &&::DefaultRefDerefTraits<WebCore::Element>> &&)> &&)::$_1::operator()<WebCore::TextRecognitionResult>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  const WebCore::HTMLElement *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Node *v36;
  unsigned int **v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  WebCore::Node *v44;

  if (*(_QWORD *)a1)
  {
    v1 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v1)
    {
      v2 = a1;
      CFRetain(*(CFTypeRef *)(v1 - 8));
      v4 = *(_QWORD *)(v1 + 2384);
      v5 = *(_DWORD *)(v1 + 2396);
      v6 = v4 + 24 * v5;
      if (v5)
      {
        v43 = v2;
        v7 = 0;
        v8 = v4 + 24 * v5;
        v9 = v8;
        do
        {
          if (*(_QWORD *)v4 && *(_QWORD *)(*(_QWORD *)v4 + 8))
          {
            v10 = v9;
          }
          else
          {
            v11 = *(unsigned int *)(v4 + 20);
            if ((_DWORD)v11)
            {
              v12 = *(uint64_t **)(v4 + 8);
              v13 = 8 * v11;
              do
              {
                v44 = 0;
                v14 = *v12;
                *v12 = 0;
                (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v14 + 16))(v14, &v44);
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
                v15 = v44;
                v44 = 0;
                if (v15)
                {
                  if (*((_DWORD *)v15 + 6) == 2)
                  {
                    if ((*((_WORD *)v15 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v15);
                  }
                  else
                  {
                    *((_DWORD *)v15 + 6) -= 2;
                  }
                }
                ++v12;
                v13 -= 8;
              }
              while (v13);
            }
            v10 = v4;
            if (v9 != *(_QWORD *)(v1 + 2384) + 24 * *(unsigned int *)(v1 + 2396))
            {
              if (v8 == v4)
              {
                v10 = v9;
              }
              else
              {
                WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping(v8, (unsigned int **)v4, v9);
                v10 = v9 + v4 - v8;
              }
            }
            WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 8, v3);
            v16 = *(unsigned int **)v4;
            *(_QWORD *)v4 = 0;
            v8 = v4 + 24;
            if (v16)
            {
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v16 + 4), v3);
                WTF::fastFree((WTF *)v16, v19);
              }
            }
            ++v7;
            v9 = v10;
          }
          v4 += 24;
        }
        while (v4 < v6);
        v4 = *(_QWORD *)(v1 + 2384);
        v5 = *(_DWORD *)(v1 + 2396);
        v6 = v10;
        v2 = v43;
      }
      else
      {
        v7 = 0;
        v8 = *(_QWORD *)(v1 + 2384);
      }
      v20 = (unsigned int **)(v4 + 24 * v5);
      if ((unsigned int **)v8 != v20)
      {
        WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping(v8, v20, v6);
        v5 = *(_DWORD *)(v1 + 2396);
      }
      *(_DWORD *)(v1 + 2396) = v5 - v7;
      v21 = *(_QWORD *)(v2 + 8);
      if (!v21)
        goto LABEL_67;
      v22 = *(_QWORD *)(v21 + 8);
      if (!v22)
        goto LABEL_67;
      *(_DWORD *)(v22 + 24) += 2;
      if ((*(_WORD *)(v22 + 28) & 0x10) != 0)
      {
        WebCore::ImageOverlay::updateWithTextRecognitionResult();
        v24 = *(unsigned int *)(v1 + 2396);
        if (!(_DWORD)v24)
        {
LABEL_65:
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
LABEL_67:
          CFRelease(*(CFTypeRef *)(v1 - 8));
          return;
        }
        v25 = 0;
        v26 = 0;
        v27 = 24 * v24;
        while (1)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v1 + 2384) + v25);
          if (v28)
            v28 = *(_QWORD *)(v28 + 8);
          if (v28 == v22)
            break;
          ++v26;
          v25 += 24;
          if (v27 == v25)
            goto LABEL_65;
        }
        if (WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)v22, v23))
          v30 = v22;
        else
          v30 = 0;
        if (v30)
          *(_DWORD *)(v30 + 24) += 2;
        if (v26 < *(unsigned int *)(v1 + 2396))
        {
          v31 = *(_QWORD *)(v1 + 2384);
          v32 = *(unsigned int *)(v31 + v25 + 20);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)(v31 + v25 + 8);
            v34 = 8 * v32;
            do
            {
              if (v30)
                *(_DWORD *)(v30 + 24) += 2;
              v44 = (WebCore::Node *)v30;
              v35 = *v33;
              *v33 = 0;
              (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v35 + 16))(v35, &v44);
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
              v36 = v44;
              v44 = 0;
              if (v36)
              {
                if (*((_DWORD *)v36 + 6) == 2)
                {
                  if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v36);
                }
                else
                {
                  *((_DWORD *)v36 + 6) -= 2;
                }
              }
              ++v33;
              v34 -= 8;
            }
            while (v34);
            v31 = *(_QWORD *)(v1 + 2384);
          }
          v37 = (unsigned int **)(v31 + v25);
          WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31 + v25 + 8, v29);
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v39 + 4), v38);
              WTF::fastFree((WTF *)v39, v42);
            }
          }
          WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping((unint64_t)(v37 + 3), (unsigned int **)(*(_QWORD *)(v1 + 2384) + 24 * *(unsigned int *)(v1 + 2396)), (unint64_t)v37);
          --*(_DWORD *)(v1 + 2396);
          if (v30)
          {
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          goto LABEL_65;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1977C644CLL);
    }
  }
}

unint64_t WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::moveOverlapping(unint64_t result, unsigned int **a2, unint64_t a3)
{
  unsigned int **v3;
  unsigned int **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;

  v3 = a2;
  v4 = (unsigned int **)result;
  if (result > a3)
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>> &&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(result, a2, a3);
  if (a2 != (unsigned int **)result)
  {
    v5 = (char *)a2 + a3 - result;
    do
    {
      v6 = (uint64_t)v3;
      v7 = (uint64_t)*(v3 - 3);
      v3 -= 3;
      *v3 = 0;
      *((_QWORD *)v5 - 3) = v7;
      v5 -= 24;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      v8 = *(_QWORD *)(v6 - 16);
      v6 -= 16;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v5 + 1) = v8;
      v9 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 8) = 0;
      *((_DWORD *)v5 + 4) = v9;
      v10 = *(_DWORD *)(v6 + 12);
      *(_DWORD *)(v6 + 12) = 0;
      *((_DWORD *)v5 + 5) = v10;
      result = WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      v11 = *v3;
      *v3 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v11 + 4), a2);
          result = WTF::fastFree((WTF *)v11, v14);
        }
      }
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2060;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v10, *(int **)a2);
  IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v10, *(_QWORD *)(a2 + 8));
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34FA738;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(WTF::CompletionHandler<void ()(unsigned long long)> &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA738;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(WTF::CompletionHandler<void ()(unsigned long long)> &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA738;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(WTF::CompletionHandler<void ()(unsigned long long)> &,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<double>>(a2), v4))
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPage::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp,WTF::CompletionHandler<void ()(WebCore::AppHighlight &&)> &&)::$_0,void,WebCore::AppHighlight &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34FA760;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp,WTF::CompletionHandler<void ()(WebCore::AppHighlight &&)> &&)::$_0,void,WebCore::AppHighlight &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FA760;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp,WTF::CompletionHandler<void ()(WebCore::AppHighlight &&)> &&)::$_0,void,WebCore::AppHighlight &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_WORD *)(a2 + 24) = *(_WORD *)(*(_QWORD *)(a1 + 24) + 196);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::AddTextAnimationForAnimationID,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1834;
  *(_QWORD *)(v10 + 8) = a4;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebKit::TextAnimationData const&,WebCore::TextIndicatorData const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebKit::TextAnimationData const&,WebCore::TextIndicatorData const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34FA788;
  v12[1] = v11;
  v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v21[0] = v12;
  v21[1] = v13;
  v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v22, v21, a5);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return v13;
  else
    return 0;
}

char *IPC::ArgumentCoder<std::tuple<WTF::UUID const&,WebKit::TextAnimationData const&,WebCore::TextIndicatorData const&>,void>::encode<IPC::Encoder,std::tuple<WTF::UUID const&,WebKit::TextAnimationData const&,WebCore::TextIndicatorData const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, *(uint64_t **)a2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)v4;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(v4 + 16));
  return IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, *(int **)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::AddTextAnimationForAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34FA788;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::AddTextAnimationForAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34FA788;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::AddTextAnimationForAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::updatePrefersNonBlinkingCursor(void)::$_0,void,WebCore::Document &>::call(uint64_t a1, uint64_t a2)
{
  WebCore::FrameSelection *v2;
  WebKit::WebProcess *v4;
  WebKit::WebProcess *v5;
  WebCore::FrameSelection *v6;

  v2 = *(WebCore::FrameSelection **)(a2 + 3064);
  {
    v6 = *(WebCore::FrameSelection **)(a2 + 3064);
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v4);
    v2 = v6;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  return WebCore::FrameSelection::setPrefersNonBlinkingCursor(v2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::ASCIICaseInsensitiveHash **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  WTF::ASCIICaseInsensitiveHash *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = v4 << (6 * v5 >= 2 * v4);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = 8;
LABEL_6:
  v7 = WTF::fastMalloc((WTF *)(16 * v6 + 16));
  v10 = v7;
  v11 = v7 + 16;
  if (v6)
    bzero((void *)(v7 + 16), 16 * v6);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v12 = 0;
    v13 = 0;
    v14 = v4;
    do
    {
      v15 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v12);
      if (*v15 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v15, 0, v9))
        {
          v16 = *(WTF::StringImpl ***)(v3 + 16 * v12 + 8);
          if (v16)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v8);
          v17 = *v15;
          *v15 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v8);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::ASCIICaseInsensitiveHash::hash(*v15, v8);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = WTF::equal(*(WTF **)(v18 + 16 * v22), 0, v9);
            v20 = ++v21 + v22;
          }
          while (!v23);
          v24 = v18 + 16 * v22;
          v26 = (_QWORD *)(v24 + 8);
          v25 = *(WTF::StringImpl ***)(v24 + 8);
          if (v25)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v8);
          v27 = *(WTF::StringImpl **)v24;
          *(_QWORD *)v24 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v8);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *v15;
          *v15 = 0;
          *(_QWORD *)v24 = v28;
          v29 = v3 + 16 * v12;
          *v26 = 0;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *v26 = v30;
          v31 = *(WTF::StringImpl ***)(v29 + 8);
          if (v31)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v8);
          v32 = *v15;
          *v15 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v8);
            else
              *(_DWORD *)v32 -= 2;
          }
          if (v15 == a2)
            v13 = v24;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v3)
      return result;
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v13;
}

uint64_t IPC::handleMessage<Messages::WebPage::SetUnderPageBackgroundColorOverride,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::Color &&)>(uint64_t *a1)
{
  void *v1;
  _BYTE v3[16];

  IPC::Decoder::decode<std::tuple<WebCore::Color>>(a1, v3);
  if (v3[8])
    WebKit::WebPage::setUnderPageBackgroundColorOverride();
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3, v1);
}

uint64_t IPC::handleMessageAsync<Messages::WebPage::GetContentsAsString,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  char v7;
  char v8;
  _QWORD *v9;
  unsigned __int8 **v10;
  uint64_t v11;
  unsigned __int8 **v12;
  _QWORD *v13;

  result = IPC::Decoder::decode<std::tuple<WebCore::PreserveResolution>>(a2);
  if ((unsigned __int16)result >= 0x100u)
  {
    v7 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v8)
    {
      v11 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v9 = off_1E34FAD88;
      v9[1] = v11;
      v10 = v12;
      v12 = 0;
      v13 = v9;
      v9[2] = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
      WebKit::WebPage::getContentsAsString(a3, v7 != 0, (uint64_t *)&v13);
      result = (uint64_t)v13;
      v13 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 ***result;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v13[88];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;

  IPC::Decoder::decode<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>>(v13, a2);
  if (!v17)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v6);
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v6)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v6);
  *(_QWORD *)&v18 = v7;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v18 + 1, a1);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34FAF18;
  v8[1] = v18;
  v9 = *((_QWORD *)&v18 + 1);
  *((_QWORD *)&v18 + 1) = 0;
  v8[2] = v9;
  v12 = v8;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v18 + 1);
  if (v17)
  {
    v18 = v14;
    v19 = v15;
    WebKit::WebPage::runJavaScriptInFrameInScriptWorld(a3, (uint64_t)v13, (uint64_t)&v18, &v16, (uint64_t *)&v12);
    v11 = (uint64_t)v12;
    v12 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v6);
  }
  __break(1u);
  return result;
}

void IPC::handleMessage<Messages::WebPage::RegisterUIProcessAccessibilityTokens,WebKit::WebPage,WebKit::WebPage,void ()(std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3[2];
  char v4;

  IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>>(v3, a1);
  if (v4)
    WebKit::WebPage::registerUIProcessAccessibilityTokens(a2, v3[0], v3[1]);
}

uint64_t IPC::handleMessageAsync<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  _QWORD *v10;
  char v11[8];
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unsigned __int8 **v15[2];
  _QWORD v16[2];
  uint64_t v17;

  result = IPC::Decoder::decode<std::tuple<BOOL,WebKit::CallbackID>>(v11, a2);
  if (v13)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v14 = (uint64_t *)result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v15, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34FB850;
      v8[1] = v14;
      v9 = v15[0];
      v15[0] = 0;
      v8[2] = v9;
      v10 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v15);
      v17 = a3;
      v16[0] = WebKit::WebPage::didGetLoadDecisionForIcon;
      v16[1] = 0;
      v14 = &v17;
      v15[0] = (unsigned __int8 **)v16;
      v15[1] = (unsigned __int8 **)&v10;
      IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&),std::tuple<BOOL,WebKit::CallbackID>,void ()(IPC::SharedBufferReference const&)>(WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*,std::tuple<BOOL,WebKit::CallbackID> &&,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<BOOL,WebKit::CallbackID>((uint64_t)&v14, v11[0], v12);
      result = (uint64_t)v10;
      v10 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebPage::didReceiveSyncWebPageMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v8;
  uint64_t v9;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE6C:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::BindRemoteAccessibilityFrames,WebKit::WebPage,WebKit::WebPage,void ()(int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, WTF **, uint64_t))WebKit::WebPage::bindRemoteAccessibilityFrames, 0);
      goto LABEL_13;
    case 0xE6D:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::ComputePagesForPrintingiOS,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::PrintInfo const&,WTF::CompletionHandler<void ()(unsigned long)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD, uint64_t *, _QWORD **))WebKit::WebPage::computePagesForPrintingiOS, 0);
      goto LABEL_13;
    case 0xE6E:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::FrameTextForTesting,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD **))WebKit::WebPage::frameTextForTesting, 0);
      goto LABEL_13;
    case 0xE6F:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::GetDataSelectionForPasteboard,WebKit::WebPage,WebKit::WebPage,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, uint64_t))WebKit::WebPage::getDataSelectionForPasteboard, 0);
      goto LABEL_13;
    case 0xE70:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::GetStringSelectionForPasteboard,WebKit::WebPage,WebKit::WebPage,void ()(WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPage::getStringSelectionForPasteboard, 0);
      goto LABEL_13;
    case 0xE71:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::ReadSelectionFromPasteboard,WebKit::WebPage,WebKit::WebPage,void ()(WTF::String const&,WTF::CompletionHandler<void ()(BOOL &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::WebPage::readSelectionFromPasteboard, 0);
      goto LABEL_13;
    case 0xE72:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::RenderTreeAsTextForTesting,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))WebKit::WebPage::renderTreeAsTextForTesting, 0);
      goto LABEL_13;
    case 0xE73:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::ShouldDelayWindowOrderingEvent,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::WebMouseEvent const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPage::shouldDelayWindowOrderingEvent, 0);
      goto LABEL_13;
    case 0xE74:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::SyncApplyAutocorrection,WebKit::WebPage,WebKit::WebPage,void ()(WTF::String const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, char *, _BYTE *, _QWORD, _QWORD **))WebKit::WebPage::syncApplyAutocorrection, 0);
      goto LABEL_13;
    case 0xE75:
      v8 = IPC::handleMessageSynchronous<Messages::WebPage::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::WebPage,WebKit::WebPage,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPage::testProcessIncomingSyncMessagesWhenWaitingForSyncReply, 0);
LABEL_13:
      v9 = v8;
      break;
    default:
      v9 = 0;
      break;
  }
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return v9;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPage::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::WebPage,WebKit::WebPage,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FBD30;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::SyncApplyAutocorrection,WebKit::WebPage,WebKit::WebPage,void ()(WTF::String const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, char *, _BYTE *, _QWORD, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _BOOL8 result;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  char v22[8];
  _BYTE v23[16];
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,BOOL>>((uint64_t)v22, a2);
  v12 = v24;
  if (!v24)
  {
LABEL_7:
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
    return v12 != 0;
  }
  v13 = *a3;
  *a3 = 0;
  v19 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34FBD58;
  v14[1] = v19;
  v15 = v20[0];
  v20[0] = 0;
  v14[2] = v15;
  v21 = v14;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
  result = 0;
  if (v24)
  {
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, char *, _BYTE *, _QWORD, _QWORD **))(*v17 + a5);
    a5(v17, v22, v23, v23[8], &v21);
    v18 = v21;
    v21 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::ComputePagesForPrintingiOS,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::PrintInfo const&,WTF::CompletionHandler<void ()(unsigned long)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, uint64_t *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  _QWORD *v16;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _QWORD v21[2];
  uint64_t v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::PrintInfo>>((uint64_t)v21, a2);
  v11 = v23;
  if (v23)
  {
    v12 = *a3;
    *a3 = 0;
    v18 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34FBD80;
    v13[1] = v18;
    v14 = v19;
    v19 = 0;
    v13[2] = v14;
    v20 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD, uint64_t *, _QWORD **))(*v15 + a5);
    a5(v15, v21[0], v21[1], &v22, &v20);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return v11 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::BindRemoteAccessibilityFrames,WebKit::WebPage,WebKit::WebPage,void ()(int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t, uint64_t, uint64_t, WTF **, uint64_t), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  void *v16;
  _QWORD *v17;
  WTF *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  unsigned int v22[6];
  WTF *v23;
  int v24;
  unsigned __int8 v25;

  IPC::Decoder::decode<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, v22);
  v11 = v25;
  if (!v25)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v19 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FBDA8;
  v13[1] = v19;
  v14 = v20[0];
  v20[0] = 0;
  v13[2] = v14;
  v21 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
  result = 0;
  if (v25)
  {
    IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&),std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>(a4, a5, a6, v22, (uint64_t)&v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v25)
    {
      v18 = v23;
      if (v23)
      {
        v23 = 0;
        v24 = 0;
        WTF::fastFree(v18, v16);
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPage::GetStringSelectionForPasteboard,WebKit::WebPage,WebKit::WebPage,void ()(WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FBDD0;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::GetDataSelectionForPasteboard,WebKit::WebPage,WebKit::WebPage,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, uint64_t), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  WTF::StringImpl *v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v22);
  v11 = v23;
  if (!v23)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v19 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FBDF8;
  v13[1] = v19;
  v14 = v20[0];
  v20[0] = 0;
  v13[2] = v14;
  v21 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
  result = 0;
  if (v23)
  {
    IPC::callMemberFunction<WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&),std::tuple<WTF::String>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(a4, a5, a6, &v22, (uint64_t)&v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v23)
    {
      v18 = v22;
      v22 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::ReadSelectionFromPasteboard,WebKit::WebPage,WebKit::WebPage,void ()(WTF::String const&,WTF::CompletionHandler<void ()(BOOL &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FBE20;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::ShouldDelayWindowOrderingEvent,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::WebMouseEvent const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  _BYTE v23[96];
  WTF::StringImpl *v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebKit::WebMouseEvent>>((uint64_t)v23, a2);
  v11 = v25;
  if (v25)
  {
    v12 = *a3;
    *a3 = 0;
    v20 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34FBE48;
    v13[1] = v20;
    v14 = v21[0];
    v21[0] = 0;
    v13[2] = v14;
    v22 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v15 + a5);
    a5(v15, v23, &v22);
    v17 = v22;
    v22 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v25)
    {
      v18 = v24;
      v24 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
  }
  return v11 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::RenderTreeAsTextForTesting,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _QWORD v21[3];
  unsigned __int16 v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>>(a2, v21);
  v11 = v23;
  if (!v23)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FBE70;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v23)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))(*v16 + a5);
    a5(v16, v21[0], v21[1], v21[2], v22, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPage::FrameTextForTesting,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _QWORD v21[2];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>(a2, (uint64_t)v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FBE98;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD **))(*v16 + a5);
    a5(v16, v21[0], v21[1], &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<WebKit::WebKeyboardEvent>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::decode(a2, a1);
  if (!a1[96])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15SetInitialFocusEN6WebKit7WebPageES8_FvbbRKNSt3__18optionalINS7_16WebKeyboardEventEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15SetInitialFocusEN6WebKit7WebPageES8_FvbbRKNSt3__18optionalINS7_16WebKeyboardEventEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15SetInitialFocusEN6WebKit7WebPageES8_FvbbRKNSt3__18optionalINS7_16WebKeyboardEventEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3416;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16SetActivityStateEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore13ActivityStateEEEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

void IPC::Decoder::decode<std::tuple<float,WTF::MachSendRight>>(_BYTE *a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[8])
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder>(_BYTE *a1, IPC::Decoder *a2)
{
  uint64_t v4;

  v4 = IPC::Decoder::decode<float>(a2);
  if ((v4 & 0xFF00000000) != 0)
  {
    IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder,float>((uint64_t)a1, a2, (uint64_t)&v4);
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<float,WTF::MachSendRight>,void>::decode<IPC::Decoder,float>(uint64_t a1, IPC::Decoder *this, uint64_t a3)
{
  _BYTE v5[4];
  char v6;

  IPC::Decoder::takeLastAttachment(this, v5);
  if (v6)
  {
    if (*(_BYTE *)(a3 + 4))
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      WTF::MachSendRight::MachSendRight();
      *(_BYTE *)(a1 + 8) = 1;
      if (v6)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30ExecuteEditCommandWithCallbackEN6WebKit7WebPageES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30ExecuteEditCommandWithCallbackEN6WebKit7WebPageES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30ExecuteEditCommandWithCallbackEN6WebKit7WebPageES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3332;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebMouseEvent>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 112))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unsigned __int16 v7;
  char v8;
  unint64_t result;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;

  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (v5)
  {
    v6 = v4;
    v7 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>((uint64_t *)a2);
    if (v7 >= 0x100u)
    {
      v8 = v7;
      result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>((uint64_t *)a2);
      if (v10)
      {
        *(_QWORD *)a1 = v6;
        *(_BYTE *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = result;
        *(_BYTE *)(a1 + 24) = 1;
        return result;
      }
    }
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17SelectWithGestureEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_11GestureTypeENS7_22GestureRecognizerStateEbONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17SelectWithGestureEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_11GestureTypeENS7_22GestureRecognizerStateEbONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17SelectWithGestureEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_11GestureTypeENS7_22GestureRecognizerStateEbONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EE4callESC_SD_SE_SI_(uint64_t a1, _DWORD *a2, char a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  IPC::Encoder *result;
  WTF *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  void *v46;
  IPC::Encoder *v47;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 3413;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v47 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v11, a2);
  v13 = *(_QWORD *)(v11 + 544);
  v14 = v13 + 1;
  v15 = *(_QWORD *)(v11 + 552);
  if (v15 < v13 + 1)
  {
    v35 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v36 = v35;
      v35 *= 2;
    }
    while (v36 < v14);
    v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
    if (v37 == (char *)-1)
      goto LABEL_30;
    v16 = v37;
    memcpy(v37, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v38 = *(void **)(v11 + 528);
    if (v38 != v12)
      munmap(v38, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v16;
    *(_QWORD *)(v11 + 552) = v36;
    v17 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v16 = *(char **)(v11 + 528);
    v17 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v16[v17], v13 - v17);
  *(_QWORD *)(v11 + 544) = v14;
  v18 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v13);
  *(_QWORD *)(v11 + 536) = v18 + 1;
  *v18 = a3;
  v19 = *(_QWORD *)(v11 + 544);
  v20 = v19 + 1;
  v21 = *(_QWORD *)(v11 + 552);
  if (v21 < v19 + 1)
  {
    v39 = (2 * v21 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v40 = v39;
      v39 *= 2;
    }
    while (v40 < v20);
    v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
    if (v41 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1977C8EE4);
    }
    v22 = v41;
    memcpy(v41, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v42 = *(void **)(v11 + 528);
    if (v42 != v12)
      munmap(v42, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v22;
    *(_QWORD *)(v11 + 552) = v40;
    v23 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v22 = *(char **)(v11 + 528);
    v23 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v22[v23], v19 - v23);
  *(_QWORD *)(v11 + 544) = v20;
  v24 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v19);
  *(_QWORD *)(v11 + 536) = v24 + 1;
  *v24 = a4;
  v25 = *(_QWORD *)(v11 + 544);
  v26 = v25 + 1;
  v27 = *(_QWORD *)(v11 + 552);
  if (v27 >= v25 + 1)
  {
    v28 = *(char **)(v11 + 528);
    v29 = *(_QWORD *)(v11 + 544);
    goto LABEL_7;
  }
  v43 = (2 * v27 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v44 = v43;
    v43 *= 2;
  }
  while (v44 < v26);
  v45 = (char *)mmap(0, v44, 3, 4098, -1, 0);
  if (v45 == (char *)-1)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1977C8EDCLL);
  }
  v28 = v45;
  memcpy(v45, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
  v46 = *(void **)(v11 + 528);
  if (v46 != v12)
    munmap(v46, *(_QWORD *)(v11 + 552));
  *(_QWORD *)(v11 + 528) = v28;
  *(_QWORD *)(v11 + 552) = v44;
  v29 = *(_QWORD *)(v11 + 544);
LABEL_7:
  bzero(&v28[v29], v25 - v29);
  *(_QWORD *)(v11 + 544) = v26;
  v30 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v25);
  *(_QWORD *)(v11 + 536) = v30 + 1;
  *v30 = a5;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v47, 0, 0);
  result = v47;
  v47 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v33, v34);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateSelectionWithTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_14SelectionTouchEbONS_17CompletionHandlerIFvSC_SD_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateSelectionWithTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_14SelectionTouchEbONS_17CompletionHandlerIFvSC_SD_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateSelectionWithTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS7_14SelectionTouchEbONS_17CompletionHandlerIFvSC_SD_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SH_EE4callESC_SD_SH_(uint64_t a1, _DWORD *a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  IPC::Encoder *result;
  WTF *v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  IPC::Encoder *v35;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3434;
  *(_QWORD *)(v9 + 8) = v8;
  v10 = (void *)(v9 + 16);
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v35 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v9, a2);
  v11 = *(_QWORD *)(v9 + 544);
  v12 = v11 + 1;
  v13 = *(_QWORD *)(v9 + 552);
  if (v13 < v11 + 1)
  {
    v27 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v28 = v27;
      v27 *= 2;
    }
    while (v28 < v12);
    v29 = (char *)mmap(0, v28, 3, 4098, -1, 0);
    if (v29 == (char *)-1)
      goto LABEL_20;
    v14 = v29;
    memcpy(v29, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
    v30 = *(void **)(v9 + 528);
    if (v30 != v10)
      munmap(v30, *(_QWORD *)(v9 + 552));
    *(_QWORD *)(v9 + 528) = v14;
    *(_QWORD *)(v9 + 552) = v28;
    v15 = *(_QWORD *)(v9 + 544);
  }
  else
  {
    v14 = *(char **)(v9 + 528);
    v15 = *(_QWORD *)(v9 + 544);
  }
  bzero(&v14[v15], v11 - v15);
  *(_QWORD *)(v9 + 544) = v12;
  v16 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v11);
  *(_QWORD *)(v9 + 536) = v16 + 1;
  *v16 = a3;
  v17 = *(_QWORD *)(v9 + 544);
  v18 = v17 + 1;
  v19 = *(_QWORD *)(v9 + 552);
  if (v19 >= v17 + 1)
  {
    v20 = *(char **)(v9 + 528);
    v21 = *(_QWORD *)(v9 + 544);
    goto LABEL_5;
  }
  v31 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v32 = v31;
    v31 *= 2;
  }
  while (v32 < v18);
  v33 = (char *)mmap(0, v32, 3, 4098, -1, 0);
  if (v33 == (char *)-1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1977C9188);
  }
  v20 = v33;
  memcpy(v33, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
  v34 = *(void **)(v9 + 528);
  if (v34 != v10)
    munmap(v34, *(_QWORD *)(v9 + 552));
  *(_QWORD *)(v9 + 528) = v20;
  *(_QWORD *)(v9 + 552) = v32;
  v21 = *(_QWORD *)(v9 + 544);
LABEL_5:
  bzero(&v20[v21], v17 - v21);
  *(_QWORD *)(v9 + 544) = v18;
  v22 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v17);
  *(_QWORD *)(v9 + 536) = v22 + 1;
  *v22 = a4;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v35, 0, 0);
  result = v35;
  v35 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20SelectWithTwoTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointESC_NS7_11GestureTypeENS7_22GestureRecognizerStateEONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA8A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20SelectWithTwoTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointESC_NS7_11GestureTypeENS7_22GestureRecognizerStateEONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA8A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20SelectWithTwoTouchesEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointESC_NS7_11GestureTypeENS7_22GestureRecognizerStateEONS_17CompletionHandlerIFvSC_SD_SE_NS_9OptionSetINS7_14SelectionFlagsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SD_SE_SI_EE4callESC_SD_SE_SI_(uint64_t a1, _DWORD *a2, char a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  IPC::Encoder *result;
  WTF *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  void *v46;
  IPC::Encoder *v47;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 3414;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v47 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v11, a2);
  v13 = *(_QWORD *)(v11 + 544);
  v14 = v13 + 1;
  v15 = *(_QWORD *)(v11 + 552);
  if (v15 < v13 + 1)
  {
    v35 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v36 = v35;
      v35 *= 2;
    }
    while (v36 < v14);
    v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
    if (v37 == (char *)-1)
      goto LABEL_30;
    v16 = v37;
    memcpy(v37, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v38 = *(void **)(v11 + 528);
    if (v38 != v12)
      munmap(v38, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v16;
    *(_QWORD *)(v11 + 552) = v36;
    v17 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v16 = *(char **)(v11 + 528);
    v17 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v16[v17], v13 - v17);
  *(_QWORD *)(v11 + 544) = v14;
  v18 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v13);
  *(_QWORD *)(v11 + 536) = v18 + 1;
  *v18 = a3;
  v19 = *(_QWORD *)(v11 + 544);
  v20 = v19 + 1;
  v21 = *(_QWORD *)(v11 + 552);
  if (v21 < v19 + 1)
  {
    v39 = (2 * v21 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v40 = v39;
      v39 *= 2;
    }
    while (v40 < v20);
    v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
    if (v41 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1977C94F0);
    }
    v22 = v41;
    memcpy(v41, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v42 = *(void **)(v11 + 528);
    if (v42 != v12)
      munmap(v42, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v22;
    *(_QWORD *)(v11 + 552) = v40;
    v23 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v22 = *(char **)(v11 + 528);
    v23 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v22[v23], v19 - v23);
  *(_QWORD *)(v11 + 544) = v20;
  v24 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v19);
  *(_QWORD *)(v11 + 536) = v24 + 1;
  *v24 = a4;
  v25 = *(_QWORD *)(v11 + 544);
  v26 = v25 + 1;
  v27 = *(_QWORD *)(v11 + 552);
  if (v27 >= v25 + 1)
  {
    v28 = *(char **)(v11 + 528);
    v29 = *(_QWORD *)(v11 + 544);
    goto LABEL_7;
  }
  v43 = (2 * v27 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v44 = v43;
    v43 *= 2;
  }
  while (v44 < v26);
  v45 = (char *)mmap(0, v44, 3, 4098, -1, 0);
  if (v45 == (char *)-1)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1977C94E8);
  }
  v28 = v45;
  memcpy(v45, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
  v46 = *(void **)(v11 + 528);
  if (v46 != v12)
    munmap(v46, *(_QWORD *)(v11 + 552));
  *(_QWORD *)(v11 + 528) = v28;
  *(_QWORD *)(v11 + 552) = v44;
  v29 = *(_QWORD *)(v11 + 544);
LABEL_7:
  bzero(&v28[v29], v25 - v29);
  *(_QWORD *)(v11 + 544) = v26;
  v30 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v25);
  *(_QWORD *)(v11 + 536) = v30 + 1;
  *v30 = a5;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v47, 0, 0);
  result = v47;
  v47 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v33, v34);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ExtendSelectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA8C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ExtendSelectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA8C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ExtendSelectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3334;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29ExtendSelectionForReplacementEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA8F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29ExtendSelectionForReplacementEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA8F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29ExtendSelectionForReplacementEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3333;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21MoveSelectionByOffsetEN6WebKit7WebPageES8_FviONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21MoveSelectionByOffsetEN6WebKit7WebPageES8_FviONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21MoveSelectionByOffsetEN6WebKit7WebPageES8_FviONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3376;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebCore::TextGranularity,BOOL>>(unint64_t *a1)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (v3)
  {
    v4 = v2;
    if ((unsigned __int16)IPC::Decoder::decode<WebCore::TextGranularity>((uint64_t *)a1) < 0x100u)
      goto LABEL_3;
    v8 = a1[1];
    v9 = *a1;
    v10 = a1[2] - *a1;
    if (v8 <= v10)
    {
      v16 = 0;
      v17 = 0;
      *a1 = 0;
      a1[1] = 0;
      v18 = a1[3];
      if (v18)
      {
        if (v8)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v18 + 16))(v18);
          v17 = *a1;
          v16 = a1[1];
        }
        else
        {
          v16 = 0;
          v17 = 0;
        }
      }
    }
    else
    {
      v11 = (unsigned __int8 *)(v9 + v10);
      a1[2] = (unint64_t)(v11 + 1);
      if (v9)
      {
        if (*v11 < 2u)
          return v4;
LABEL_18:
        *a1 = 0;
        a1[1] = 0;
        v14 = a1[3];
        if (!v14 || !v8)
          goto LABEL_3;
        goto LABEL_20;
      }
      v16 = v8;
      v17 = 0;
    }
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v9 = *a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_18;
  }
  v9 = *a1;
  v13 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v14 = a1[3];
  if (v14)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (!v15)
LABEL_20:
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v9);
LABEL_3:
  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = a1[3];
  if (v7 && v6)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32SelectTextWithGranularityAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32SelectTextWithGranularityAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32SelectTextWithGranularityAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3412;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37SelectPositionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityENS9_18SelectionDirectionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37SelectPositionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityENS9_18SelectionDirectionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37SelectPositionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityENS9_18SelectionDirectionEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3410;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36MoveSelectionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityENS9_18SelectionDirectionEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36MoveSelectionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityENS9_18SelectionDirectionEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage36MoveSelectionAtBoundaryWithDirectionEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityENS9_18SelectionDirectionEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3375;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21SelectPositionAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA9B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21SelectPositionAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA9B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21SelectPositionAtPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3411;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25BeginSelectionInDirectionEN6WebKit7WebPageES8_FvN7WebCore18SelectionDirectionEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FA9E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25BeginSelectionInDirectionEN6WebKit7WebPageES8_FvN7WebCore18SelectionDirectionEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FA9E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25BeginSelectionInDirectionEN6WebKit7WebPageES8_FvN7WebCore18SelectionDirectionEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3310;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30UpdateSelectionWithExtentPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbNS7_22RespectSelectionAnchorEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAA08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30UpdateSelectionWithExtentPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbNS7_22RespectSelectionAnchorEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAA08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30UpdateSelectionWithExtentPointEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEbNS7_22RespectSelectionAnchorEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3433;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41UpdateSelectionWithExtentPointAndBoundaryEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAA30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41UpdateSelectionWithExtentPointAndBoundaryEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAA30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41UpdateSelectionWithExtentPointAndBoundaryEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointENS9_15TextGranularityEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3432;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAA58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAA58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3402;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::RevealItem,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN6WebKit7WebPageES8_FvN7WebCore8IntPointEONS_17CompletionHandlerIFvbRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAA80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN6WebKit7WebPageES8_FvN7WebCore8IntPointEONS_17CompletionHandlerIFvbRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAA80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN6WebKit7WebPageES8_FvN7WebCore8IntPointEONS_17CompletionHandlerIFvbRKNS7_10RevealItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSE_EE4callEbSE_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3386;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WebKit::RevealItem,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestAutocorrectionDataEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvNS7_21WebAutocorrectionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAAA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestAutocorrectionDataEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvNS7_21WebAutocorrectionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAAA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestAutocorrectionDataEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvNS7_21WebAutocorrectionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, id *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3395;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,BOOL>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<WTF::String>(a2, &v21);
  if (!v22)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_9;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v23);
  if (!v24)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_15;
  }
  v6 = a2[1];
  v5 = (WTF::StringImpl *)*a2;
  v7 = a2[2] - *a2;
  if (v6 <= v7)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
  }
  else
  {
    v8 = (unsigned __int8 *)v5 + v7;
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      if (v9 < 2)
      {
        if (v22)
        {
          v10 = 0;
          v11 = v21;
          v21 = 0;
          v12 = v23;
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v12;
          *(_BYTE *)(a1 + 16) = v9 != 0;
          *(_BYTE *)(a1 + 24) = 1;
          goto LABEL_16;
        }
        __break(1u);
LABEL_32:
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        goto LABEL_15;
      }
      goto LABEL_26;
    }
    v16 = v6;
    v17 = 0;
  }
  v6 = 0;
  v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19)
  {
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
      v5 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
  }
LABEL_26:
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result && v6)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                + 16))(result, v5);
  *(_BYTE *)a1 = 0;
  v20 = v24;
  *(_BYTE *)(a1 + 24) = 0;
  if (!v20)
    goto LABEL_15;
  result = v23;
  v23 = 0;
  if (!result)
    goto LABEL_15;
  if (*(_DWORD *)result == 2)
    goto LABEL_32;
  *(_DWORD *)result -= 2;
LABEL_15:
  v10 = 1;
LABEL_16:
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v10)
          return result;
        goto LABEL_9;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v10)
    return result;
LABEL_9:
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (!v15)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v13);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19ApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAAD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19ApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAAD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19ApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3309;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RequestEvasionRectsAboveSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAAF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RequestEvasionRectsAboveSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAAF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RequestEvasionRectsAboveSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3397;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22PerformActionOnElementEN6WebKit7WebPageES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAB20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22PerformActionOnElementEN6WebKit7WebPageES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAB20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22PerformActionOnElementEN6WebKit7WebPageES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3381;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23FocusNextFocusedElementEN6WebKit7WebPageES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAB48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23FocusNextFocusedElementEN6WebKit7WebPageES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAB48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23FocusNextFocusedElementEN6WebKit7WebPageES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3341;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetSelectionContextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringESC_SC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SC_SC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAB70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetSelectionContextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringESC_SC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SC_SC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAB70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetSelectionContextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringESC_SC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_SC_SC_EE4callESC_SC_SC_(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3362;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41GetRectsForGranularityWithSelectionOffsetEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEiONS_17CompletionHandlerIFvRKNS_6VectorINS9_17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAB98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41GetRectsForGranularityWithSelectionOffsetEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEiONS_17CompletionHandlerIFvRKNS_6VectorINS9_17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAB98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage41GetRectsForGranularityWithSelectionOffsetEN6WebKit7WebPageES8_FvN7WebCore15TextGranularityEiONS_17CompletionHandlerIFvRKNS_6VectorINS9_17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3356;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33GetRectsAtSelectionOffsetWithTextEN6WebKit7WebPageES8_FviRKNS_6StringEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FABC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33GetRectsAtSelectionOffsetWithTextEN6WebKit7WebPageES8_FviRKNS_6StringEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FABC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33GetRectsAtSelectionOffsetWithTextEN6WebKit7WebPageES8_FviRKNS_6StringEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore17SelectionGeometryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3355;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32RequestFocusedElementInformationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_25FocusedElementInformationEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FABE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32RequestFocusedElementInformationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_25FocusedElementInformationEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FABE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32RequestFocusedElementInformationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_25FocusedElementInformationEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3398;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 416);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 416))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAC10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAC10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24UpdateSelectionWithDeltaEN6WebKit7WebPageES8_FvxxONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3431;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29RequestDocumentEditingContextEN6WebKit7WebPageES8_FvONS7_29DocumentEditingContextRequestEONS_17CompletionHandlerIFvONS7_22DocumentEditingContextEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAC38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29RequestDocumentEditingContextEN6WebKit7WebPageES8_FvONS7_29DocumentEditingContextRequestEONS_17CompletionHandlerIFvONS7_22DocumentEditingContextEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAC38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29RequestDocumentEditingContextEN6WebKit7WebPageES8_FvONS7_29DocumentEditingContextRequestEONS_17CompletionHandlerIFvONS7_22DocumentEditingContextEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3396;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23TextInputContextsInRectEN6WebKit7WebPageES8_FvN7WebCore9FloatRectEONS_17CompletionHandlerIFvRKNS_6VectorINS9_14ElementContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAC60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23TextInputContextsInRectEN6WebKit7WebPageES8_FvN7WebCore9FloatRectEONS_17CompletionHandlerIFvRKNS_6VectorINS9_14ElementContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAC60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23TextInputContextsInRectEN6WebKit7WebPageES8_FvN7WebCore9FloatRectEONS_17CompletionHandlerIFvRKNS_6VectorINS9_14ElementContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3426;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34FocusTextInputContextAndPlaceCaretEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextERKNS9_8IntPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAC88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34FocusTextInputContextAndPlaceCaretEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextERKNS9_8IntPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAC88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34FocusTextInputContextAndPlaceCaretEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextERKNS9_8IntPointEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3342;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37ClearServiceWorkerEntitlementOverrideEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FACB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37ClearServiceWorkerEntitlementOverrideEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FACB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37ClearServiceWorkerEntitlementOverrideEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3312;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ElementContext>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v9[5];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::ElementContext>(a2, (uint64_t)v9);
  if (v10)
  {
    v5 = v9[3];
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v9[4];
    v6 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v8)
        return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18RequestImageBitmapEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEERKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FACD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18RequestImageBitmapEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEERKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FACD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18RequestImageBitmapEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEERKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_SL_EE4callESI_SL_(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3400;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebKit::GoToBackForwardItemParameters,false>::__tuple_leaf[abi:sn180100]<WebKit::GoToBackForwardItemParameters,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(__int128 *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(v5, (uint64_t *)a2 + 4);
    *(_BYTE *)(a1 + 144) = 1;
  }
  v6 = *(__int128 *)((char *)a2 + 152);
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_OWORD *)(a1 + 152) = v6;
  v7 = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  *(_QWORD *)(a1 + 176) = v7;
  v8 = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = 0;
  *(_QWORD *)(a1 + 184) = v8;
  return a1;
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  _BYTE v5[24];

  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[40] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  __int128 v7;
  char v8;

  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v7);
  if (v8)
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2, &v7, (uint64_t)a3);
  *a3 = 0;
  a3[40] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  result = IPC::Decoder::decode<WTF::String>(a1, &v10);
  v8 = v11;
  if (!v11)
  {
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 16) && *((_BYTE *)a3 + 16))
  {
    v9 = *a3;
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_OWORD *)(a4 + 16) = v9;
    *(_QWORD *)(a4 + 32) = v10;
    v8 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 40) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameInfoEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_13FrameInfoDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAD10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameInfoEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_13FrameInfoDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAD10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameInfoEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_13FrameInfoDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3348;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 296);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 296))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v5, (char *)a2);
  }
  else
  {
    *v7 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAD38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAD38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12GetFrameTreeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS7_17FrameTreeNodeDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3349;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v5, a2);
  IPC::VectorArgumentCoder<false,WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, (uint64_t)(a2 + 296));
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetPDFFirstPageSizeEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvNS9_9FloatSizeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAD60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetPDFFirstPageSizeEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvNS9_9FloatSizeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAD60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetPDFFirstPageSizeEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvNS9_9FloatSizeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, float a2, float a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  int v10[2];
  IPC::Encoder *v11;

  *(float *)v10 = a2;
  *(float *)&v10[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3353;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v10);
  if (v12)
  {
    *(_QWORD *)a1 = v10;
    v5 = v11;
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    result = WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetContentsAsStringEN6WebKit7WebPageES8_FvNS7_34ContentAsStringIncludesChildFramesEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAD88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetContentsAsStringEN6WebKit7WebPageES8_FvNS7_34ContentAsStringIncludesChildFramesEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAD88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetContentsAsStringEN6WebKit7WebPageES8_FvNS7_34ContentAsStringIncludesChildFramesEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  return IPC::handleMessageAsync<Messages::WebPage::GetContentsAsString,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::GetContentsAsString &&)#1}::operator()<WTF::String const&>((uint64_t *)(a1 + 8), a2);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::WebPage::GetContentsAsString,WebKit::WebPage,WebKit::WebPage,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebKit::ContentAsStringIncludesChildFrames,WTF::CompletionHandler<void ()(WTF::String const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::GetContentsAsString &&)#1}::operator()<WTF::String const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *a1;
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3347;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29GetContentsAsAttributedStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore16AttributedStringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FADB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29GetContentsAsAttributedStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore16AttributedStringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FADB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29GetContentsAsAttributedStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore16AttributedStringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3346;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26GetMainResourceDataOfFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FADD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26GetMainResourceDataOfFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FADD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26GetMainResourceDataOfFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3351;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  _BYTE *v7;

  v4 = a2[24];
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (a2[24])
    {
      IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(a1, (IPC::SharedBufferReference *)a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  _BYTE v5[24];

  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetResourceDataFromFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAE00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetResourceDataFromFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAE00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetResourceDataFromFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3358;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35GetRenderTreeExternalRepresentationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAE28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35GetRenderTreeExternalRepresentationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAE28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35GetRenderTreeExternalRepresentationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3357;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30GetSelectionOrContentsAsStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAE50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30GetSelectionOrContentsAsStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAE50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30GetSelectionOrContentsAsStringEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3363;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28GetSelectionAsWebArchiveDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAE78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28GetSelectionAsWebArchiveDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAE78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28GetSelectionAsWebArchiveDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3361;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17GetSourceForFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAEA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17GetSourceForFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAEA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17GetSourceForFrameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3364;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)&v8);
  if (v10)
  {
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetWebArchiveOfFrameEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvRKNSA_INS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAEC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetWebArchiveOfFrameEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvRKNSA_INS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAEC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetWebArchiveOfFrameEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvRKNSA_INS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3366;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MarkupExclusionRule>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::MarkupExclusionRule,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MarkupExclusionRule,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32GetWebArchiveOfFrameWithFileNameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6VectorINS9_19MarkupExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAEF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32GetWebArchiveOfFrameWithFileNameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6VectorINS9_19MarkupExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAEF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32GetWebArchiveOfFrameWithFileNameEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6VectorINS9_19MarkupExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EE4callESX_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3367;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[128])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  void *v4;
  _BYTE v6[96];

  IPC::Decoder::decode<WebCore::RunJavaScriptParameters>(v6, a2);
  if (v6[88])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters>(a1, a2, (uint64_t)v6);
  }
  else
  {
    *a1 = 0;
    a1[128] = 0;
  }
  return std::__optional_destruct_base<WebCore::RunJavaScriptParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

uint64_t *IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *result;
  _BYTE v7[32];

  result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)v7);
  if (v7[24])
    return (uint64_t *)IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, a2, a3, (uint64_t)v7);
  *a1 = 0;
  a1[128] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v7;
  uint64_t v9[2];
  char v10;

  IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>(a2, (uint64_t)v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>((uint64_t)a1, a3, a4, v9);
  }
  else
  {
    *a1 = 0;
    a1[128] = 0;
  }
  return std::__optional_destruct_base<WebKit::PolicyDecisionConsoleMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,void>::decode<IPC::Decoder,WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 88) && *(_BYTE *)(a3 + 24) && *((_BYTE *)a4 + 16))
  {
    result = std::__tuple_leaf<0ul,WebCore::RunJavaScriptParameters,false>::__tuple_leaf[abi:sn180100]<WebCore::RunJavaScriptParameters,void>(result, (uint64_t *)a2);
    *(_OWORD *)(result + 88) = *(_OWORD *)a3;
    v6 = *a4;
    v7 = a4[1];
    *(_QWORD *)(result + 104) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(result + 112) = v6;
    a4[1] = 0;
    *(_QWORD *)(result + 120) = v7;
    *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebCore::RunJavaScriptParameters,false>::__tuple_leaf[abi:sn180100]<WebCore::RunJavaScriptParameters,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  WTF::URL::URL(a1 + 16, a2 + 2);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_QWORD *)(a1 + 64) = 0;
    v5 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a1 + 64) = v5;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::RunJavaScriptParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RunJavaScriptInFrameInScriptWorldEN6WebKit7WebPageES8_FvON7WebCore23RunJavaScriptParametersENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEERKNSC_4pairINSF_INS7_26ContentWorldIdentifierTypeESI_yEENS_6StringEEEONS_17CompletionHandlerIFvNSC_4spanIKhLm18446744073709551615EEERKNSD_INS9_16ExceptionDetailsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_S10_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAF18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RunJavaScriptInFrameInScriptWorldEN6WebKit7WebPageES8_FvON7WebCore23RunJavaScriptParametersENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEERKNSC_4pairINSF_INS7_26ContentWorldIdentifierTypeESI_yEENS_6StringEEEONS_17CompletionHandlerIFvNSC_4spanIKhLm18446744073709551615EEERKNSD_INS9_16ExceptionDetailsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_S10_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAF18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33RunJavaScriptInFrameInScriptWorldEN6WebKit7WebPageES8_FvON7WebCore23RunJavaScriptParametersENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEERKNSC_4pairINSF_INS7_26ContentWorldIdentifierTypeESI_yEENS_6StringEEEONS_17CompletionHandlerIFvNSC_4spanIKhLm18446744073709551615EEERKNSD_INS9_16ExceptionDetailsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_S10_EE4callESW_S10_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  return IPC::handleMessageAsync<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::RunJavaScriptInFrameInScriptWorld &&)#1}::operator()<unsigned char const,std::__1<WebCore::ExceptionDetails> const>((uint64_t *)(a1 + 8), (uint64_t)v5, a4);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::WebPage::RunJavaScriptInFrameInScriptWorld,WebKit::WebPage,WebKit::WebPage,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(WebCore::RunJavaScriptParameters &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WebCore::RunJavaScriptParameters &&::pair<WTF<WebKit::ContentWorldIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long>,WebCore::ProcessQualified::String> const&,WebCore::ProcessQualified::CompletionHandler<void ()(WebCore::RunJavaScriptParameters &&::span<unsigned char const,18446744073709551615ul>,std::__1<WebCore::ExceptionDetails> const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::RunJavaScriptInFrameInScriptWorld &&)#1}::operator()<unsigned char const,std::__1<WebCore::ExceptionDetails> const>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *a1;
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3409;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, *(const void **)a2, *(_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionDetails>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionDetails> const&>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::RunJavaScriptParameters,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(WTF::StringImpl **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (v4)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetAccessibilityTreeDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAF40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetAccessibilityTreeDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAF40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24GetAccessibilityTreeDataEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalINS2_21SharedBufferReferenceEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3343;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAF68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAF68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32UpdateRenderingWithForcedRepaintEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3430;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21DetectDataInAllFramesEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore16DataDetectorTypeEEEONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAF90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21DetectDataInAllFramesEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore16DataDetectorTypeEEEONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAF90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21DetectDataInAllFramesEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore16DataDetectorTypeEEEONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, NSArray **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3318;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::encodeObjectDirectly<NSArray>((IPC::Encoder *)v5, *a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23RemoveDataDetectedLinksEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAFB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23RemoveDataDetectedLinksEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAFB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23RemoveDataDetectedLinksEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_19DataDetectionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, NSArray **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3390;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::encodeObjectDirectly<NSArray>((IPC::Encoder *)v5, *a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage7SuspendEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FAFE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage7SuspendEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FAFE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage7SuspendEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3423;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage6ResumeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage6ResumeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage6ResumeEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3408;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8TryCloseEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8TryCloseEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8TryCloseEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3427;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ValidateCommandEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ValidateCommandEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbiEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15ValidateCommandEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbiEE4callEbi(uint64_t a1, char a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3437;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 4uLL, 4) = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37RequestFontAttributesAtSelectionStartEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore14FontAttributesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37RequestFontAttributesAtSelectionStartEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore14FontAttributesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37RequestFontAttributesAtSelectionStartEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKN7WebCore14FontAttributesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3399;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::FontAttributes,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<double,WebCore::IntPoint>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (uint64_t *)(v5 + v6);
    a2[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
      if (v11)
      {
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = result;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      goto LABEL_13;
    }
    v12 = v4;
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (!v14)
      goto LABEL_14;
    if (v4)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
LABEL_13:
      v13 = *a2;
      v12 = a2[1];
      goto LABEL_14;
    }
    v12 = 0;
    v13 = 0;
  }
LABEL_14:
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v12)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::OptionSet<WebKit::FindOptions>,unsigned int>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _WORD *v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v24;
  int v25;
  __int16 v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  char v32;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v31);
  if (!v32)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    goto LABEL_11;
  }
  v7 = a2[1];
  v8 = *a2;
  v9 = ((a2[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a2;
  if (v7 < v9 || v7 - v9 <= 1)
  {
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v8, v7);
        v5 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_17;
  }
  v11 = (_WORD *)(v8 + v9);
  a2[2] = (uint64_t)(v11 + 1);
  if (!v8)
  {
    v6 = v7;
    v5 = 0;
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result && v6)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v5);
    goto LABEL_18;
  }
  v12 = (unsigned __int16)*v11;
  if (v12 <= 0xFFF)
  {
    v13 = v12 & 0xF00;
    v14 = *v11;
    v15 = 0x10000;
    goto LABEL_19;
  }
LABEL_18:
  v15 = 0;
  v14 = 0;
  v13 = 0;
LABEL_19:
  if (!HIWORD(v15))
  {
LABEL_39:
    v5 = (WTF::StringImpl *)*a2;
    v6 = a2[1];
    goto LABEL_40;
  }
  v20 = a2[1];
  v21 = *a2;
  v22 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v20 >= v22 && v20 - v22 > 3)
  {
    v24 = (int *)(v21 + v22);
    a2[2] = (uint64_t)(v24 + 1);
    if (v21)
    {
      if (v32)
      {
        v25 = 0;
        v26 = v14 | v15 | v13;
        v27 = *v24;
        v28 = v31;
        v31 = 0;
        *(_QWORD *)a1 = v28;
        *(_WORD *)(a1 + 8) = v26;
        *(_DWORD *)(a1 + 12) = v27;
        v29 = 1;
        goto LABEL_28;
      }
      __break(1u);
      goto LABEL_43;
    }
    v6 = v20;
    v5 = 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (!v30)
      goto LABEL_40;
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v21, v20);
      goto LABEL_39;
    }
    v6 = 0;
    v5 = 0;
  }
LABEL_40:
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
LABEL_43:
    if (v6)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v5);
  }
  v29 = 0;
  *(_BYTE *)a1 = 0;
  v25 = 1;
LABEL_28:
  *(_BYTE *)(a1 + 16) = v29;
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v25)
          return result;
        goto LABEL_11;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v25)
    return result;
LABEL_11:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage10FindStringEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SW_jibEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB0A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage10FindStringEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SW_jibEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB0A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage10FindStringEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SW_jibEE4callESQ_SW_jib(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 3338;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v18 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v13, a2);
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v13, a3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 4uLL, 4) = a4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 4uLL, 4) = a5;
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a6;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 16 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, v7);
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindStringIncludingImagesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SW_jibEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB0D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindStringIncludingImagesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SW_jibEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB0D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindStringIncludingImagesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSI_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_6VectorINSI_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjibEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SW_jibEE4callESQ_SW_jib(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 3336;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v18 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v13, a2);
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v13, a3);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 4uLL, 4) = a4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 4uLL, 4) = a5;
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a6;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17FindStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNS_6VectorINSG_IN7WebCore7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEELm0ESJ_Lm16ESK_EEiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_iEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB0F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17FindStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNS_6VectorINSG_IN7WebCore7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEELm0ESJ_Lm16ESK_EEiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_iEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB0F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17FindStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvNS_6VectorINSG_IN7WebCore7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEELm0ESJ_Lm16ESK_EEiEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_iEE4callESM_i(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3337;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  v8 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  v9 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)a2;
    v11 = 16 * v9;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v7, v10);
      v10 += 16;
      v11 -= 16;
    }
    while (v11);
  }
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 4uLL, 4) = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18CountStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18CountStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18CountStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3316;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14ReplaceMatchesEN6WebKit7WebPageES8_FvRKNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEbONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14ReplaceMatchesEN6WebKit7WebPageES8_FvRKNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEbONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14ReplaceMatchesEN6WebKit7WebPageES8_FvRKNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringEbONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3393;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindRectsForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindRectsForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25FindRectsForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3335;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(int **)a2;
    v9 = 16 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30FindTextRangesForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorINS7_17WebFoundTextRangeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30FindTextRangesForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorINS7_17WebFoundTextRangeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30FindTextRangesForStringMatchesEN6WebKit7WebPageES8_FvRKNS_6StringENS_9OptionSetINS7_11FindOptionsEEEjONS_17CompletionHandlerIFvONS_6VectorINS7_17WebFoundTextRangeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3339;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = 32 * v7;
    do
    {
      IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebKit::WebFoundTextRange>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<WebKit::WebFoundTextRange>(a2, (uint64_t)&v9);
  if (v12)
  {
    *(_OWORD *)a1 = v9;
    v5 = v11;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28RequestRectForFoundTextRangeEN6WebKit7WebPageES8_FvRKNS7_17WebFoundTextRangeEONS_17CompletionHandlerIFvN7WebCore9FloatRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB1C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28RequestRectForFoundTextRangeEN6WebKit7WebPageES8_FvRKNS7_17WebFoundTextRangeEONS_17CompletionHandlerIFvN7WebCore9FloatRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB1C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28RequestRectForFoundTextRangeEN6WebKit7WebPageES8_FvRKNS7_17WebFoundTextRangeEONS_17CompletionHandlerIFvN7WebCore9FloatRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  int v12[4];
  IPC::Encoder *v13;

  *(float *)v12 = a2;
  *(float *)&v12[1] = a3;
  *(float *)&v12[2] = a4;
  *(float *)&v12[3] = a5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3403;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v7, v12);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22AddLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSA_27PlatformLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB1E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22AddLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSA_27PlatformLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB1E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22AddLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSA_27PlatformLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10[2];
  IPC::Encoder *v11;

  v10[0] = a2;
  v10[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3307;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoveLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoveLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoveLayerForFindOverlayEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3391;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::DragData>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DragData,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 88))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::DragData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformDragControllerActionEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENS7_20DragControllerActionEONSB_8DragDataEONS_17CompletionHandlerIFvNSA_INSB_13DragOperationEEENSB_18DragHandlingMethodEbjNSB_7IntRectESR_NSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_bjSR_SR_ST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformDragControllerActionEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENS7_20DragControllerActionEONSB_8DragDataEONS_17CompletionHandlerIFvNSA_INSB_13DragOperationEEENSB_18DragHandlingMethodEbjNSB_7IntRectESR_NSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_bjSR_SR_ST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformDragControllerActionEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENS7_20DragControllerActionEONSB_8DragDataEONS_17CompletionHandlerIFvNSA_INSB_13DragOperationEEENSB_18DragHandlingMethodEbjNSB_7IntRectESR_NSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_bjSR_SR_ST_EE4callESP_SQ_bjSR_SR_ST_(uint64_t a1, __int16 a2, char a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  uint64_t v23[2];
  uint64_t v24[2];
  IPC::Encoder *v25;

  v24[0] = a6;
  v24[1] = a7;
  v23[0] = a9;
  v23[1] = a10;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 3382;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v25 = (IPC::Encoder *)v17;
  v18 = IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1);
  if ((a2 & 0xFF00) != 0)
  {
    *v18 = 1;
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a2;
  }
  else
  {
    *v18 = 0;
  }
  *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a3;
  *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 4uLL, 4) = a5;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v17, v24);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v17, v23);
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v17, a11);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v25, 0, 0);
  result = v25;
  v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20PerformDragOperationEN6WebKit7WebPageES8_FvON7WebCore8DragDataEONS7_22SandboxExtensionHandleEONS_6VectorISC_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB260;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20PerformDragOperationEN6WebKit7WebPageES8_FvON7WebCore8DragDataEONS7_22SandboxExtensionHandleEONS_6VectorISC_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB260;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20PerformDragOperationEN6WebKit7WebPageES8_FvON7WebCore8DragDataEONS7_22SandboxExtensionHandleEONS_6VectorISC_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3383;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DragEndedEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSB_8IntPointESK_NS_9OptionSetINSB_13DragOperationEEEONS_17CompletionHandlerIFvNSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DragEndedEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSB_8IntPointESK_NS_9OptionSetINSB_13DragOperationEEEONS_17CompletionHandlerIFvNSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DragEndedEN6WebKit7WebPageES8_FvNSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEENSB_8IntPointESK_NS_9OptionSetINSB_13DragOperationEEEONS_17CompletionHandlerIFvNSA_INSB_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3322;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebCore::IntPoint,WTF::OptionSet<WebCore::DragSourceAction>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v5)
  {
    v10 = *a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
      v16 = v14 == 0;
    else
      v16 = 1;
    if (v16)
      goto LABEL_19;
    goto LABEL_23;
  }
  v6 = v4;
  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v8)
    goto LABEL_17;
  v9 = a2[1];
  v10 = *a2;
  v11 = a2[2] - *a2;
  if (v9 <= v11)
  {
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v9)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_14;
  }
  v12 = (char *)(v10 + v11);
  a2[2] = (unint64_t)(v12 + 1);
  if (!v10)
  {
    v17 = v9;
    v18 = 0;
LABEL_14:
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (!v20)
      goto LABEL_18;
    if (!v17)
    {
      v9 = 0;
      v10 = 0;
      goto LABEL_18;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
LABEL_17:
    v10 = *a2;
    v9 = a2[1];
    goto LABEL_18;
  }
  v13 = *v12;
  if ((v13 & 0x80000000) == 0)
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 16) = v13;
    *(_BYTE *)(a1 + 20) = 1;
    return result;
  }
LABEL_18:
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v9)
LABEL_23:
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v10);
LABEL_19:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 20) = 0;
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v22)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore7IntSizeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNS9_INSA_7IntRectELm0ESC_Lm16ESD_EENSt3__18optionalINSA_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB2B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore7IntSizeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNS9_INSA_7IntRectELm0ESC_Lm16ESD_EENSt3__18optionalINSA_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB2B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore7IntSizeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNS9_INSA_7IntRectELm0ESC_Lm16ESD_EENSt3__18optionalINSA_17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EE4callESL_SP_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3371;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB2D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB2D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21InsertTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore7IntSizeEONS_17CompletionHandlerIFvRKNSt3__18optionalINS9_14ElementContextEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3372;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RemoveTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RemoveTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RemoveTextPlaceholderEN6WebKit7WebPageES8_FvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3392;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37createTextIndicatorForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37createTextIndicatorForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37createTextIndicatorForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore17TextIndicatorDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3439;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48updateUnderlyingTextVisibilityForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48updateUnderlyingTextVisibilityForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage48updateUnderlyingTextVisibilityForTextAnimationIDEN6WebKit7WebPageES8_FvRKNS_4UUIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3440;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25UserMediaAccessWasGrantedEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_13CaptureDeviceESG_ONSA_20MediaDeviceHashSaltsEONS_6VectorINS7_22SandboxExtensionHandleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25UserMediaAccessWasGrantedEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_13CaptureDeviceESG_ONSA_20MediaDeviceHashSaltsEONS_6VectorINS7_22SandboxExtensionHandleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25UserMediaAccessWasGrantedEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore30UserMediaRequestIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSA_13CaptureDeviceESG_ONSA_20MediaDeviceHashSaltsEONS_6VectorINS7_22SandboxExtensionHandleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3436;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestMediaPlaybackStateEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS7_18MediaPlaybackStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB3A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestMediaPlaybackStateEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS7_18MediaPlaybackStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB3A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RequestMediaPlaybackStateEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS7_18MediaPlaybackStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3401;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21PauseAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB3C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21PauseAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB3C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21PauseAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3380;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23SuspendAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB3F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23SuspendAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB3F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23SuspendAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3422;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22ResumeAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB418;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22ResumeAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB418;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22ResumeAllMediaPlaybackEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3407;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::PrintInfo>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int128 v10;
  char v11;
  _OWORD v12[2];
  char v13;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v10);
  if (v11 && (result = IPC::Decoder::decode<WebKit::PrintInfo>((uint64_t)v12, a2), v13))
  {
    if (v11)
    {
      v5 = v12[0];
      v6 = v12[1];
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::PrintInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::PrintInfo,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11EndPrintingEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11EndPrintingEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11EndPrintingEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3331;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34EndPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB468;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34EndPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB468;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34EndPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3330;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23ComputePagesForPrintingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_dSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB490;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23ComputePagesForPrintingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_dSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB490;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23ComputePagesForPrintingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_dSV_EE4callESR_dSV_(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3315;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v9, a2);
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a4;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v9, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage46ComputePagesForPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_dSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB4B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage46ComputePagesForPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_dSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB4B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage46ComputePagesForPrintingDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvRKNS_6VectorINS9_7IntRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEdRKNS9_9RectEdgesIfEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_dSV_EE4callESR_dSV_(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3314;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v9, a2);
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a4;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v9, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::PrintInfo,WebCore::IntRect,WebCore::IntSize>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  char v16;
  _OWORD v17[2];
  char v18;
  __int128 v19;
  char v20;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v15);
  if (v16)
  {
    IPC::Decoder::decode<WebKit::PrintInfo>((uint64_t)v17, a2);
    if (v18)
    {
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v19);
      if (v20)
      {
        result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
        if (v5)
        {
          if (v16 && v18 && v20)
          {
            v6 = v17[0];
            v7 = v17[1];
            *(_OWORD *)a1 = v15;
            *(_OWORD *)(a1 + 16) = v6;
            v8 = v19;
            *(_OWORD *)(a1 + 32) = v7;
            *(_OWORD *)(a1 + 48) = v8;
            *(_QWORD *)(a1 + 64) = result;
            *(_BYTE *)(a1 + 72) = 1;
            return result;
          }
          __break(1u);
        }
        v9 = *a2;
        v10 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v11 = a2[3];
        if (v11 && v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15DrawRectToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB4E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15DrawRectToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB4E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage15DrawRectToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3326;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage38DrawRectToImageDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage38DrawRectToImageDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage38DrawRectToImageDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoERKNS9_7IntRectERKNS9_7IntSizeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3325;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::PrintInfo,unsigned int,unsigned int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v9;
  unint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  _OWORD v29[2];
  char v30;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v27);
  if (v28)
  {
    result = IPC::Decoder::decode<WebKit::PrintInfo>((uint64_t)v29, a2);
    if (v30)
    {
      v5 = a2[1];
      v6 = *a2;
      v7 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
      if (v5 >= v7 && v5 - v7 > 3)
      {
        v9 = (int *)(v6 + v7);
        a2[2] = (uint64_t)(v9 + 1);
        if (!v6)
        {
          v17 = v5;
          v18 = 0;
          goto LABEL_17;
        }
        v10 = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v6;
        if (v5 < v10 || v5 - v10 <= 3)
        {
          *a2 = 0;
          a2[1] = 0;
          v20 = a2[3];
          if (v20)
          {
            if (v5)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
              v24 = *a2;
              v25 = a2[1];
              v26 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              if (v26)
              {
                if (v25)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
              }
            }
          }
          goto LABEL_21;
        }
        v12 = *v9;
        v14 = v6 + v10 + 4;
        v13 = *(_DWORD *)(v6 + v10);
        a2[2] = v14;
        if (v28)
        {
          v15 = v29[0];
          v16 = v29[1];
          *(_OWORD *)a1 = v27;
          *(_OWORD *)(a1 + 16) = v15;
          *(_OWORD *)(a1 + 32) = v16;
          *(_DWORD *)(a1 + 48) = v12;
          *(_DWORD *)(a1 + 52) = v13;
          *(_BYTE *)(a1 + 56) = 1;
          return result;
        }
        __break(1u);
      }
      else
      {
        v17 = 0;
        v18 = 0;
        *a2 = 0;
        a2[1] = 0;
        result = a2[3];
        if (!result)
          goto LABEL_17;
      }
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
LABEL_17:
      *a2 = 0;
      a2[1] = 0;
      v19 = a2[3];
      if (v19 && v17)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v18, v17);
    }
  }
LABEL_21:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v23 = v22 == 0;
  else
    v23 = 1;
  if (!v23)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14DrawPagesToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14DrawPagesToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage14DrawPagesToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3324;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37DrawPagesToPDFDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB558;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37DrawPagesToPDFDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB558;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage37DrawPagesToPDFDuringDOMPrintOperationEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEjjONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3323;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12DrawToPDFiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEmONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB580;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12DrawToPDFiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEmONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB580;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12DrawToPDFiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEmONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISM_EENS_21DefaultRefDerefTraitsISM_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3329;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11DrawToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB5A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11DrawToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB5A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage11DrawToImageEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3327;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DrawToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNSt3__18optionalINS9_9FloatRectEEEbONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISP_EENS_21DefaultRefDerefTraitsISP_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB5D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DrawToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNSt3__18optionalINS9_9FloatRectEEEbONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISP_EENS_21DefaultRefDerefTraitsISP_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB5D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage9DrawToPDFEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNSt3__18optionalINS9_9FloatRectEEEbONS_17CompletionHandlerIFvONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISP_EENS_21DefaultRefDerefTraitsISP_EEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3328;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8SetMutedEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore23MediaProducerMutedStateEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB5F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8SetMutedEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore23MediaProducerMutedStateEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB5F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage8SetMutedEN6WebKit7WebPageES8_FvNS_9OptionSetIN7WebCore23MediaProducerMutedStateEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3417;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16StopMediaCaptureEN6WebKit7WebPageES8_FvN7WebCore29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16StopMediaCaptureEN6WebKit7WebPageES8_FvN7WebCore29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16StopMediaCaptureEN6WebKit7WebPageES8_FvN7WebCore29MediaProducerMediaCaptureKindEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3421;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unint64_t *)a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntPoint>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;

  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    v7 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    __break(1u);
LABEL_12:
    result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
LABEL_10:
    v8 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_4;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = result;
  v8 = 1;
LABEL_4:
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::ViewWindowCoordinates>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _OWORD v9[3];
  uint64_t v10;
  char v11;

  result = IPC::Decoder::decode<WebKit::ViewWindowCoordinates>((uint64_t)v9, a2);
  if (v11)
  {
    v5 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_QWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::ViewWindowCoordinates>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::ViewWindowCoordinates,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 56))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WebKit::InsertTextOptions>(uint64_t *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  result = IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::decode(a1);
  if (!BYTE5(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::DictationAlternative>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DictationAlternative,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23AddDictationAlternativeEN6WebKit7WebPageES8_FvRKNS_6StringENS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23AddDictationAlternativeEN6WebKit7WebPageES8_FvRKNS_6StringENS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage23AddDictationAlternativeEN6WebKit7WebPageES8_FvRKNS_6StringENS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3306;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32DictationAlternativesAtSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32DictationAlternativesAtSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage32DictationAlternativesAtSelectionEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3319;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v15 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v10;
      v9 -= 8;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage13HasMarkedTextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage13HasMarkedTextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage13HasMarkedTextEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3369;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetMarkedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB6C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetMarkedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB6C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage19GetMarkedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3352;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  v6 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v7;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetSelectedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB6E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetSelectedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB6E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetSelectedRangeAsyncEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS7_12EditingRangeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3360;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  v6 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v7;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27CharacterIndexForPointAsyncEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27CharacterIndexForPointAsyncEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27CharacterIndexForPointAsyncEN6WebKit7WebPageES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3311;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31FirstRectForCharacterRangeAsyncEN6WebKit7WebPageES8_FvRKNS7_12EditingRangeEONS_17CompletionHandlerIFvRKN7WebCore7IntRectESB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31FirstRectForCharacterRangeAsyncEN6WebKit7WebPageES8_FvRKNS7_12EditingRangeEONS_17CompletionHandlerIFvRKN7WebCore7IntRectESB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31FirstRectForCharacterRangeAsyncEN6WebKit7WebPageES8_FvRKNS7_12EditingRangeEONS_17CompletionHandlerIFvRKN7WebCore7IntRectESB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_SB_EE4callESG_SB_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3340;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v14 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v7, a2);
  v8 = *a3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  v9 = a3[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v9;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::CompositionUnderline>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::CompositionUnderline,void>::decode(a2, a1);
  if (!a1[32])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::CompositionHighlight>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CompositionHighlight,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)(a1 + 40))
  {
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, a2);
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27ShouldAllowRemoveBackgroundEN6WebKit7WebPageES8_KFvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27ShouldAllowRemoveBackgroundEN6WebKit7WebPageES8_KFvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27ShouldAllowRemoveBackgroundEN6WebKit7WebPageES8_KFvRKN7WebCore14ElementContextEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3418;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18GetBytecodeProfileEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18GetBytecodeProfileEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18GetBytecodeProfileEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3345;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25GetSamplingProfilerOutputEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25GetSamplingProfilerOutputEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25GetSamplingProfilerOutputEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3359;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12TakeSnapshotEN6WebKit7WebPageES8_FvN7WebCore7IntRectENS9_7IntSizeEjONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12TakeSnapshotEN6WebKit7WebPageES8_FvN7WebCore7IntRectENS9_7IntSizeEjONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage12TakeSnapshotEN6WebKit7WebPageES8_FvN7WebCore7IntRectENS9_7IntSizeEjONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3425;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebKit::WebMouseEvent>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[6];
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebKit::WebMouseEvent>((uint64_t)v10, a2);
  if (v13)
  {
    v5 = v10[1];
    *(_OWORD *)a1 = v10[0];
    *(_OWORD *)(a1 + 16) = v5;
    v6 = v10[3];
    *(_OWORD *)(a1 + 32) = v10[2];
    *(_OWORD *)(a1 + 48) = v6;
    v7 = v10[5];
    *(_OWORD *)(a1 + 64) = v10[4];
    *(_OWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 96) = v11;
    *(_BYTE *)(a1 + 104) = v12;
    *(_BYTE *)(a1 + 112) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 112) = 0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v9)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformHitTestForMouseEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvONS7_20WebHitTestResultDataENS_9OptionSetINS7_16WebEventModifierEEEONS7_8UserDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_SH_SJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformHitTestForMouseEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvONS7_20WebHitTestResultDataENS_9OptionSetINS7_16WebEventModifierEEEONS7_8UserDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_SH_SJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27PerformHitTestForMouseEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvONS7_20WebHitTestResultDataENS_9OptionSetINS7_16WebEventModifierEEEONS7_8UserDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_SH_SJ_EE4callESE_SH_SJ_(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3384;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode((IPC::Encoder *)v9, a2);
  *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = a3;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v9, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EE4callEbSC_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3394;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,WebKit::CallbackID>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  __int16 v5;

  result = IPC::Decoder::decode<BOOL>(a2);
  v5 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder,BOOL>((uint64_t)a1, a2, &v5);
  *a1 = 0;
  a1[16] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WebKit::CallbackID>,void>::decode<IPC::Decoder,BOOL>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t result;
  char v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WebKit::CallbackID>(a2, &v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a1 = 0;
    goto LABEL_4;
  }
  if (a3[1])
  {
    *(_BYTE *)a1 = *a3;
    *(_QWORD *)(a1 + 8) = v7;
    v6 = 1;
LABEL_4:
    *(_BYTE *)(a1 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25DidGetLoadDecisionForIconEN6WebKit7WebPageES8_FvbNS7_10CallbackIDEONS_17CompletionHandlerIFvRKNS2_21SharedBufferReferenceEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25DidGetLoadDecisionForIconEN6WebKit7WebPageES8_FvbNS7_10CallbackIDEONS_17CompletionHandlerIFvRKNS2_21SharedBufferReferenceEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25DidGetLoadDecisionForIconEN6WebKit7WebPageES8_FvbNS7_10CallbackIDEONS_17CompletionHandlerIFvRKNS2_21SharedBufferReferenceEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, IPC::SharedBufferReference *a2)
{
  return IPC::handleMessageAsync<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon &&)#1}::operator()<IPC::SharedBufferReference const&>((uint64_t *)(a1 + 8), a2);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::WebPage::DidGetLoadDecisionForIcon,WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*)::{lambda(Messages::WebPage::DidGetLoadDecisionForIcon &&)#1}::operator()<IPC::SharedBufferReference const&>(uint64_t *a1, IPC::SharedBufferReference *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *a1;
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3320;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&),std::tuple<BOOL,WebKit::CallbackID>,void ()(IPC::SharedBufferReference const&)>(WebKit::WebPage *,void ()(BOOL,WebKit::CallbackID,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&) WebKit::WebPage::*,std::tuple<BOOL,WebKit::CallbackID> &&,WTF::CompletionHandler<void ()(IPC::SharedBufferReference const&)> &&)::{lambda(WebKit::WebPage &&)#1}::operator()<BOOL,WebKit::CallbackID>(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, BOOL, uint64_t *, _QWORD);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t (**)(_QWORD *, BOOL, uint64_t *, _QWORD))v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = (_QWORD *)(**(_QWORD **)a1 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, BOOL, uint64_t *, _QWORD))(*v6 + v4);
  v8 = a3;
  return v4(v6, a2 != 0, &v8, *(_QWORD *)(a1 + 16));
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v6, v5);
        v20 = *a1;
        v19 = a1[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_24;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v43 = 0;
    v44 = 0;
    if (v10 >= 0x3333)
    {
      while (1)
      {
        IPC::Decoder::decode<std::optional<WebKit::GamepadData>>(a1, (uint64_t)&v30);
        if (!v42)
          break;
        if (HIDWORD(v44) == (_DWORD)v44)
        {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::GamepadData>>((uint64_t)&v43, (unint64_t)&v30);
        }
        else
        {
          v23 = v43 + 80 * HIDWORD(v44);
          *(_BYTE *)v23 = 0;
          *(_BYTE *)(v23 + 72) = 0;
          if (v41)
          {
            *(_DWORD *)v23 = v30;
            v24 = v31;
            v31 = 0;
            *(_QWORD *)(v23 + 8) = v24;
            v25 = v32;
            v32 = 0;
            *(_QWORD *)(v23 + 24) = 0;
            *(_QWORD *)(v23 + 32) = 0;
            *(_QWORD *)(v23 + 16) = v25;
            v26 = v33;
            v33 = 0;
            *(_QWORD *)(v23 + 24) = v26;
            LODWORD(v26) = v34;
            v34 = 0;
            *(_DWORD *)(v23 + 32) = v26;
            LODWORD(v26) = v35;
            v35 = 0;
            *(_DWORD *)(v23 + 36) = v26;
            *(_QWORD *)(v23 + 40) = 0;
            *(_QWORD *)(v23 + 48) = 0;
            v27 = v36;
            v36 = 0;
            *(_QWORD *)(v23 + 40) = v27;
            LODWORD(v27) = v37;
            v37 = 0;
            *(_DWORD *)(v23 + 48) = v27;
            LODWORD(v27) = v38;
            v38 = 0;
            *(_DWORD *)(v23 + 52) = v27;
            *(_QWORD *)(v23 + 56) = v39;
            *(_QWORD *)(v23 + 64) = 0;
            v28 = v40;
            v40 = 0;
            *(_QWORD *)(v23 + 64) = v28;
            *(_BYTE *)(v23 + 72) = 1;
          }
          ++HIDWORD(v44);
        }
        if (v42)
          std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, a2);
        if (!--v10)
        {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v43, HIDWORD(v44));
          *(_QWORD *)a3 = v43;
          v29 = v44;
          v43 = 0;
          v44 = 0;
          *(_QWORD *)(a3 + 8) = v29;
          goto LABEL_22;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v17 = 0;
        v18 = 0;
LABEL_21:
        v43 = 0;
        v44 = 0;
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v18;
LABEL_22:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
      }
      LODWORD(v44) = 80 * (int)v10 / 0x50u;
      v43 = WTF::fastMalloc((WTF *)(80 * v10));
      while (1)
      {
        IPC::Decoder::decode<std::optional<WebKit::GamepadData>>(a1, (uint64_t)&v30);
        if (!v42)
          break;
        if (HIDWORD(v44) == (_DWORD)v44)
        {
          WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::GamepadData>>((uint64_t)&v43, (unint64_t)&v30);
        }
        else
        {
          v11 = v43 + 80 * HIDWORD(v44);
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 72) = 0;
          if (v41)
          {
            *(_DWORD *)v11 = v30;
            v12 = v31;
            v31 = 0;
            *(_QWORD *)(v11 + 8) = v12;
            v13 = v32;
            v32 = 0;
            *(_QWORD *)(v11 + 24) = 0;
            *(_QWORD *)(v11 + 32) = 0;
            *(_QWORD *)(v11 + 16) = v13;
            v14 = v33;
            v33 = 0;
            *(_QWORD *)(v11 + 24) = v14;
            LODWORD(v14) = v34;
            v34 = 0;
            *(_DWORD *)(v11 + 32) = v14;
            LODWORD(v14) = v35;
            v35 = 0;
            *(_DWORD *)(v11 + 36) = v14;
            *(_QWORD *)(v11 + 40) = 0;
            *(_QWORD *)(v11 + 48) = 0;
            v15 = v36;
            v36 = 0;
            *(_QWORD *)(v11 + 40) = v15;
            LODWORD(v15) = v37;
            v37 = 0;
            *(_DWORD *)(v11 + 48) = v15;
            LODWORD(v15) = v38;
            v38 = 0;
            *(_DWORD *)(v11 + 52) = v15;
            *(_QWORD *)(v11 + 56) = v39;
            *(_QWORD *)(v11 + 64) = 0;
            v16 = v40;
            v40 = 0;
            *(_QWORD *)(v11 + 64) = v16;
            *(_BYTE *)(v11 + 72) = 1;
          }
          ++HIDWORD(v44);
        }
        if (v42)
          std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, a2);
        if (!--v10)
        {
          v17 = v43;
          v18 = v44;
          goto LABEL_21;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
  }
  v19 = v5;
  v20 = 0;
LABEL_24:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v19)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::GamepadData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::GamepadData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = a1[1];
  v4 = (char *)*a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v19 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        a1 = v19;
        v15 = *v19;
        v14 = v19[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = &v4[v5];
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v14 = v3;
    v15 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v18 = a1;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        v4 = (char *)*v18;
        v3 = v18[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::GamepadData>(a1, (uint64_t)&v20);
      v8 = v28;
      if (v28)
      {
        *(_DWORD *)a2 = v20;
        v9 = v21;
        v21 = 0uLL;
        *(_OWORD *)(a2 + 8) = v9;
        v10 = v22;
        v22 = 0;
        *(_QWORD *)(a2 + 24) = v10;
        *(_QWORD *)&v9 = v23;
        v23 = 0;
        *(_QWORD *)(a2 + 32) = v9;
        v11 = v24;
        v24 = 0;
        *(_QWORD *)(a2 + 40) = v11;
        *(_QWORD *)&v9 = v25;
        v25 = 0;
        *(_QWORD *)(a2 + 48) = v9;
        v12 = v27;
        v27 = 0;
        *(_QWORD *)(a2 + 56) = v26;
        *(_QWORD *)(a2 + 64) = v12;
        v8 = 1;
        *(_BYTE *)(a2 + 72) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      v28 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 80) = v8;
    return std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v4);
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v3)
    result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::GamepadData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::GamepadData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::GamepadData>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _BYTE *v4;

  v3 = WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_BYTE *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12));
  *v4 = 0;
  v4[72] = 0;
  if (*(_BYTE *)(v3 + 72))
  {
    std::construct_at[abi:sn180100]<WebKit::GamepadData,WebKit::GamepadData,WebKit::GamepadData*>((uint64_t)v4, v3);
    v4[72] = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  void *v4;
  int v5;
  _BYTE *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1977D2698);
    }
    v3 = *(WTF **)a1;
    v4 = (void *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12));
    v5 = 80 * a2;
    v6 = (_BYTE *)WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::optional<WebKit::GamepadData>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::optional<WebKit::GamepadData>>::move(uint64_t result, void *a2, _BYTE *a3)
{
  uint64_t v5;

  if ((void *)result != a2)
  {
    v5 = result;
    do
    {
      *a3 = 0;
      a3[72] = 0;
      if (*(_BYTE *)(v5 + 72))
      {
        std::construct_at[abi:sn180100]<WebKit::GamepadData,WebKit::GamepadData,WebKit::GamepadData*>((uint64_t)a3, v5);
        a3[72] = 1;
      }
      result = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](v5, a2);
      a3 += 80;
      v5 += 80;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  if (*(unsigned int *)(result + 8) > this)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      result = *(_QWORD *)result + 80 * this;
      v5 = 80 * v4 - 80 * this;
      do
      {
        result = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100](result, (void *)this)+ 80;
        v5 -= 80;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v6 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      v7 = (WTF *)(80 * this);
      result = WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 8) = (v7 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v3 = result;
      if ((WTF *)result != v6)
        result = WTF::VectorMover<false,std::optional<WebKit::GamepadData>>::move((uint64_t)v6, (char *)v6 + 80 * v4, (_BYTE *)result);
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v6, (void *)this);
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse,WebCore::ResourceRequest>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v16[256];
  char v17;
  _BYTE v18[200];
  char v19;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v5
    || (v6 = v4,
        v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2),
        !v8))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 472) = 0;
LABEL_13:
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
      v15 = v13 == 0;
    else
      v15 = 1;
    if (!v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    return;
  }
  v9 = v7;
  IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v16);
  if (v17)
  {
    IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      if (!v17)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v9;
      std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1 + 16, (uint64_t)v16);
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 272, (uint64_t)v18);
      v11 = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 472) = v11;
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v18);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 472) = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v16, v10);
  if (!*(_BYTE *)(a1 + 472))
    goto LABEL_13;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35URLSchemeTaskWillPerformRedirectionEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericINS7_19WebURLSchemeHandlerENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_IN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSE_16ResourceResponseEONSE_15ResourceRequestEONS_17CompletionHandlerIFvSM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35URLSchemeTaskWillPerformRedirectionEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericINS7_19WebURLSchemeHandlerENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_IN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSE_16ResourceResponseEONSE_15ResourceRequestEONS_17CompletionHandlerIFvSM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35URLSchemeTaskWillPerformRedirectionEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericINS7_19WebURLSchemeHandlerENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_IN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSE_16ResourceResponseEONSE_15ResourceRequestEONS_17CompletionHandlerIFvSM_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3428;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse,WebCore::ResourceRequest>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;
  WTF::StringImpl *v3;
  const void *v4;

  if (*(_BYTE *)(a1 + 472))
  {
    v2 = *(const void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = 0;
    if (v2)
      CFRelease(v2);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 272));
    v4 = *(const void **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v4)
      CFRelease(v4);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 16), v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16InsertAttachmentEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB8A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16InsertAttachmentEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB8A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16InsertAttachmentEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3370;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateAttachmentAttributesEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_RKNS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB8C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateAttachmentAttributesEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_RKNS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB8C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage26UpdateAttachmentAttributesEN6WebKit7WebPageES8_FvRKNS_6StringEONSt3__18optionalIyEESB_SB_RKNS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3429;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22GetApplicationManifestEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore19ApplicationManifestEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB8F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22GetApplicationManifestEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore19ApplicationManifestEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB8F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22GetApplicationManifestEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN7WebCore19ApplicationManifestEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3344;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 264);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 264))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(v12);
    }
    IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage20GetTextFragmentMatchEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3365;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27GetLoadedSubresourceDomainsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27GetLoadedSubresourceDomainsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27GetLoadedSubresourceDomainsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3350;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SystemPreviewInfo>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 112))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::decode(a2, a1);
  if (!a1[32])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22StartTextManipulationsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore39TextManipulationControllerExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB980;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22StartTextManipulationsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore39TextManipulationControllerExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB980;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22StartTextManipulationsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore39TextManipulationControllerExclusionRuleELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3420;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  WTF *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  WTF *v31;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v6, v5);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v30 = 0;
    v31 = 0;
    if (v10 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextManipulationItem>(a1, (uint64_t)&v24);
        if (!v29)
          break;
        if (HIDWORD(v31) == (_DWORD)v31)
        {
          WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationItem>((uint64_t)&v30, (unint64_t)&v24);
        }
        else
        {
          v20 = v30 + 48 * HIDWORD(v31);
          v21 = v25;
          *(_OWORD *)v20 = v24;
          *(_OWORD *)(v20 + 16) = v21;
          *(_QWORD *)(v20 + 32) = 0;
          *(_QWORD *)(v20 + 40) = 0;
          v22 = v26;
          v26 = 0;
          *(_QWORD *)(v20 + 32) = v22;
          LODWORD(v22) = v27;
          v27 = 0;
          *(_DWORD *)(v20 + 40) = v22;
          LODWORD(v22) = v28;
          v28 = 0;
          *(_DWORD *)(v20 + 44) = v22;
          ++HIDWORD(v31);
        }
        if (v29)
          WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
        if (!--v10)
        {
          WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v30, HIDWORD(v31));
          *(_QWORD *)a3 = v30;
          v23 = v31;
          v30 = 0;
          v31 = 0;
          *(_QWORD *)(a3 + 8) = v23;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v14 = 0;
        v15 = 0;
LABEL_19:
        v30 = 0;
        v31 = 0;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
LABEL_20:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, a2);
      }
      LODWORD(v31) = 48 * (int)v10 / 0x30u;
      v30 = WTF::fastMalloc((WTF *)(48 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextManipulationItem>(a1, (uint64_t)&v24);
        if (!v29)
          break;
        if (HIDWORD(v31) == (_DWORD)v31)
        {
          WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationItem>((uint64_t)&v30, (unint64_t)&v24);
        }
        else
        {
          v11 = v30 + 48 * HIDWORD(v31);
          v12 = v25;
          *(_OWORD *)v11 = v24;
          *(_OWORD *)(v11 + 16) = v12;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 40) = 0;
          v13 = v26;
          v26 = 0;
          *(_QWORD *)(v11 + 32) = v13;
          LODWORD(v13) = v27;
          v27 = 0;
          *(_DWORD *)(v11 + 40) = v13;
          LODWORD(v13) = v28;
          v28 = 0;
          *(_DWORD *)(v11 + 44) = v13;
          ++HIDWORD(v31);
        }
        if (v29)
          WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
        if (!--v10)
        {
          v14 = v30;
          v15 = v31;
          goto LABEL_19;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, a2);
  }
  v16 = v5;
  v17 = 0;
LABEL_22:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v16)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextManipulationItem>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TextManipulationItem,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      v5 = 48 * v4 - 48 * this;
      result = (unsigned int *)(*(_QWORD *)result + 48 * this + 32);
      do
      {
        result = (unsigned int *)(WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, (void *)this)+ 48);
        v5 -= 48;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v6 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      v7 = (WTF *)(48 * this);
      result = (unsigned int *)WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 8) = (v7 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v6)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::TextManipulationItem>::move((uint64_t)v6, (char *)v6 + 48 * v4, (uint64_t)result);
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v6, (void *)this);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24CompleteTextManipulationEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore20TextManipulationItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbRKNS9_INSA_45TextManipulationControllerManipulationFailureELm0ESC_Lm16ESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB9A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24CompleteTextManipulationEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore20TextManipulationItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbRKNS9_INSA_45TextManipulationControllerManipulationFailureELm0ESC_Lm16ESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB9A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24CompleteTextManipulationEN6WebKit7WebPageES8_FvRKNS_6VectorIN7WebCore20TextManipulationItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbRKNS9_INSA_45TextManipulationControllerManipulationFailureELm0ESC_Lm16ESD_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EE4callEbSL_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3313;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  v8 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD **)a3;
    v11 = 40 * v9;
    do
    {
      IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::encode((IPC::Encoder *)v7, v10);
      v10 += 5;
      v11 -= 40;
    }
    while (v11);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetProcessDisplayNameEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB9D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetProcessDisplayNameEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB9D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21GetProcessDisplayNameEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3354;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33CreateAppHighlightInSelectedRangeEN6WebKit7WebPageES8_FbN7WebCore26CreateNewGroupForHighlightENS9_31HighlightRequestOriginatedInAppEONS_17CompletionHandlerIFvONS9_12AppHighlightEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FB9F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33CreateAppHighlightInSelectedRangeEN6WebKit7WebPageES8_FbN7WebCore26CreateNewGroupForHighlightENS9_31HighlightRequestOriginatedInAppEONS_17CompletionHandlerIFvONS9_12AppHighlightEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FB9F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33CreateAppHighlightInSelectedRangeEN6WebKit7WebPageES8_FbN7WebCore26CreateNewGroupForHighlightENS9_31HighlightRequestOriginatedInAppEONS_17CompletionHandlerIFvONS9_12AppHighlightEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3317;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::AppHighlight,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16HandleWheelEventEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventERKNS_9OptionSetINS9_25WheelEventProcessingStepsEEENSt3__18optionalIbEEONS_17CompletionHandlerIFvNSQ_INSA_INSB_INS9_19ScrollingNodeIDTypeESE_yEEEEEENSQ_INS9_23WheelScrollGestureStateEEEbNSQ_INS9_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_SY_bS10_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16HandleWheelEventEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventERKNS_9OptionSetINS9_25WheelEventProcessingStepsEEENSt3__18optionalIbEEONS_17CompletionHandlerIFvNSQ_INSA_INSB_INS9_19ScrollingNodeIDTypeESE_yEEEEEENSQ_INS9_23WheelScrollGestureStateEEEbNSQ_INS9_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_SY_bS10_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage16HandleWheelEventEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventERKNS_9OptionSetINS9_25WheelEventProcessingStepsEEENSt3__18optionalIbEEONS_17CompletionHandlerIFvNSQ_INSA_INSB_INS9_19ScrollingNodeIDTypeESE_yEEEEEENSQ_INS9_23WheelScrollGestureStateEEEbNSQ_INS9_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_SY_bS10_EE4callESW_SY_bS10_(uint64_t a1, uint64_t a2, __int16 a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  id v19;
  IPC::Encoder *v20;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 3368;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v20 = (IPC::Encoder *)v11;
  v12 = *(unsigned __int8 *)(a2 + 16);
  v13 = IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1);
  if (v12)
  {
    *v13 = 1;
    if (!*(_BYTE *)(a2 + 16))
    {
      v19 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v19);
    }
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v11, (uint64_t *)a2);
  }
  else
  {
    *v13 = 0;
  }
  v14 = IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1);
  if ((a3 & 0xFF00) != 0)
  {
    *v14 = 1;
    *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a3;
  }
  else
  {
    *v14 = 0;
  }
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a4;
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v11, a5);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBA48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBA48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage34DispatchWheelEventWithoutScrollingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_13WebWheelEventEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3321;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29LastNavigationWasAppInitiatedEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBA70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29LastNavigationWasAppInitiatedEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBA70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage29LastNavigationWasAppInitiatedEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3373;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31UpdateWithTextRecognitionResultEN6WebKit7WebPageES8_FvRKN7WebCore21TextRecognitionResultERKNS9_14ElementContextERKNS9_10FloatPointEONS_17CompletionHandlerIFvNS7_27TextRecognitionUpdateResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBA98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31UpdateWithTextRecognitionResultEN6WebKit7WebPageES8_FvRKN7WebCore21TextRecognitionResultERKNS9_14ElementContextERKNS9_10FloatPointEONS_17CompletionHandlerIFvNS7_27TextRecognitionUpdateResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBA98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage31UpdateWithTextRecognitionResultEN6WebKit7WebPageES8_FvRKN7WebCore21TextRecognitionResultERKNS9_14ElementContextERKNS9_10FloatPointEONS_17CompletionHandlerIFvNS7_27TextRecognitionUpdateResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3435;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  _BYTE v8[20];

  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)v8);
  if (v8[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder,WebCore::FloatRect>(a1, (uint64_t)v8, (uint64_t)a2);
  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
    result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>,void>::decode<IPC::Decoder,WebCore::FloatRect>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;

  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    v7 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    __break(1u);
LABEL_12:
    result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
LABEL_10:
    v8 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_4;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = result;
  v8 = 1;
LABEL_4:
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27NavigateServiceWorkerClientEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNS9_28ScheduleLocationChangeResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBAC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27NavigateServiceWorkerClientEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNS9_28ScheduleLocationChangeResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBAC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage27NavigateServiceWorkerClientEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNS9_28ScheduleLocationChangeResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3377;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18PauseAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBAE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18PauseAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBAE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18PauseAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3379;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17PlayAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBB10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17PlayAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBB10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage17PlayAllAnimationsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3385;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[104])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  _BYTE v5[24];

  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[104] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>(a1, a2, (uint64_t)&v8, a3);
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[104] = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t result;
  _BYTE v9[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v9);
  if (v9[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2, a3, (uint64_t)v9, a4);
  *a4 = 0;
  a4[104] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t result;
  BOOL v11;
  char v12;
  _BYTE v13[24];
  int v14;
  char v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(a1, (uint64_t)v13);
  if (v16)
  {
    result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>>(a1, a2, a3, a4, (uint64_t)v13, a5);
    if (v16)
      v11 = v15 == 0;
    else
      v11 = 1;
    if (!v11 && v14 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34FACF0[v14])(&v12, v13);
  }
  else
  {
    *a5 = 0;
    a5[104] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  void *v11;
  _BYTE v13[32];

  IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)v13);
  if (v13[24])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>(a2, a3, a4, a5, (uint64_t)v13, (uint64_t)a6);
  }
  else
  {
    *a6 = 0;
    a6[104] = 0;
  }
  return std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v11);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t result;

  result = a6;
  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 16) && *(_BYTE *)(a4 + 40) && *(_BYTE *)(a5 + 24))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS5_6StringESB_NS_8optionalINS3_18SecurityOriginDataEEENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4EEJSB_SC_SB_SF_SG_EJEJEJSB_SC_SB_SF_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(a6, (_OWORD *)a1, (uint64_t *)a2, (__int128 *)a3, a4, (uint64_t *)a5);
    *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS5_6StringESB_NS_8optionalINS3_18SecurityOriginDataEEENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4EEJSB_SC_SB_SF_SG_EJEJEJSB_SC_SB_SF_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, uint64_t *a3, __int128 *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *a2;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *a4;
  *(_BYTE *)(a1 + 40) = 0;
  v10 = a1 + 40;
  *(_OWORD *)(v10 - 16) = v9;
  *(_BYTE *)(v10 + 32) = 0;
  if (*(_BYTE *)(a5 + 32))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v10, a5);
    *(_BYTE *)(a1 + 72) = 1;
  }
  v11 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = a6[1];
  a6[1] = 0;
  *(_QWORD *)(a1 + 88) = v12;
  LODWORD(v12) = *((_DWORD *)a6 + 4);
  *((_DWORD *)a6 + 4) = 0;
  *(_DWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *((_DWORD *)a6 + 5);
  *((_DWORD *)a6 + 5) = 0;
  *(_DWORD *)(a1 + 100) = v12;
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::SerializedScriptValue *v10;
  char v11;

  if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(WTF **)(a1 + 88);
    if (v3)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(unsigned int **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v10 = (WebCore::SerializedScriptValue *)v4;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v10);
      }
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v7 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))off_1E34FACF0[v7])(&v11, a1 + 40);
      *(_DWORD *)(a1 + 64) = -1;
    }
    v8 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22RequestTargetedElementEN6WebKit7WebPageES8_FvON7WebCore22TargetedElementRequestEONS_17CompletionHandlerIFvONS_6VectorINS9_19TargetedElementInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBB50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22RequestTargetedElementEN6WebKit7WebPageES8_FvON7WebCore22TargetedElementRequestEONS_17CompletionHandlerIFvONS_6VectorINS9_19TargetedElementInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBB50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage22RequestTargetedElementEN6WebKit7WebPageES8_FvON7WebCore22TargetedElementRequestEONS_17CompletionHandlerIFvONS_6VectorINS9_19TargetedElementInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3404;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
  {
    v8 = *(_QWORD **)a2;
    v9 = 176 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::TargetedElementInfo,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 22;
      v9 -= 176;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RequestTextExtractionEN6WebKit7WebPageES8_FvONSt3__18optionalIN7WebCore9FloatRectEEEONS_17CompletionHandlerIFvONSB_14TextExtraction4ItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBB78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RequestTextExtractionEN6WebKit7WebPageES8_FvONSt3__18optionalIN7WebCore9FloatRectEEEONS_17CompletionHandlerIFvONSB_14TextExtraction4ItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBB78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage21RequestTextExtractionEN6WebKit7WebPageES8_FvONSt3__18optionalIN7WebCore9FloatRectEEEONS_17CompletionHandlerIFvONSB_14TextExtraction4ItemEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3405;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::WritingTools::Session>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28WillBeginWritingToolsSessionEN6WebKit7WebPageES8_FvRKNSt3__18optionalIN7WebCore12WritingTools7SessionEEEONS_17CompletionHandlerIFvRKNS_6VectorINSC_7ContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBBA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28WillBeginWritingToolsSessionEN6WebKit7WebPageES8_FvRKNSt3__18optionalIN7WebCore12WritingTools7SessionEEEONS_17CompletionHandlerIFvRKNS_6VectorINSC_7ContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBBA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28WillBeginWritingToolsSessionEN6WebKit7WebPageES8_FvRKNSt3__18optionalIN7WebCore12WritingTools7SessionEEEONS_17CompletionHandlerIFvRKNS_6VectorINSC_7ContextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3438;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::WritingTools::TextSuggestion>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::TextSuggestion>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;

  v3 = WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(v3 + 40);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::String,WTF::UUID>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a2, &v10);
  if (v11)
  {
    result = IPC::Decoder::decode<WTF::UUID>(a2, (uint64_t)&v12);
    if (v13)
    {
      if (!v11)
        __break(1u);
      *(_QWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a1 + 32) = 1;
      return result;
    }
    *(_BYTE *)a1 = 0;
    v6 = v11;
    *(_BYTE *)(a1 + 32) = 0;
    if (v6)
    {
      v7 = v10;
      v10 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result && v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v8);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30TakeSnapshotForTargetedElementEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBBC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30TakeSnapshotForTargetedElementEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBBC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage30TakeSnapshotForTargetedElementEN6WebKit7WebPageES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3424;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage45ResetVisibilityAdjustmentsForTargetedElementsEN6WebKit7WebPageES8_FvRKNS_6VectorINSt3__14pairINS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSD_16ProcessQualifiedINS_4UUIDEEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBBF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage45ResetVisibilityAdjustmentsForTargetedElementsEN6WebKit7WebPageES8_FvRKNS_6VectorINSt3__14pairINS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSD_16ProcessQualifiedINS_4UUIDEEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBBF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage45ResetVisibilityAdjustmentsForTargetedElementsEN6WebKit7WebPageES8_FvRKNS_6VectorINSt3__14pairINS_23ObjectIdentifierGenericIN7WebCore21ElementIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSD_16ProcessQualifiedINS_4UUIDEEEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3406;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TargetedElementAdjustment>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::TargetedElementAdjustment,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 64))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TargetedElementAdjustment>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;

  v3 = WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  v6 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v7 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TargetedElementAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x1977D51B0);
    }
    v3 = result;
    v4 = *(WTF **)result;
    v5 = (WTF::StringImpl *)(*(_QWORD *)result + ((unint64_t)*(unsigned int *)(result + 12) << 6));
    v6 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,WebCore::TargetedElementAdjustment>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::TargetedElementAdjustment>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  if ((WTF::StringImpl *)result != a2)
  {
    result += 48;
    do
    {
      v5 = *(_OWORD *)(result - 48);
      v6 = *(_OWORD *)(result - 16);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(result - 32);
      *(_OWORD *)(a3 + 32) = v6;
      *(_OWORD *)a3 = v5;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v7 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)(a3 + 48) = v7;
      LODWORD(v7) = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(a3 + 56) = v7;
      LODWORD(v7) = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = 0;
      *(_DWORD *)(a3 + 60) = v7;
      v8 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
      v9 = (WTF::StringImpl *)(v8 + 16);
      result = v8 + 64;
      a3 += 64;
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35AdjustVisibilityForTargetedElementsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore25TargetedElementAdjustmentELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBC18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35AdjustVisibilityForTargetedElementsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore25TargetedElementAdjustmentELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBC18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35AdjustVisibilityForTargetedElementsEN6WebKit7WebPageES8_FvONS_6VectorIN7WebCore25TargetedElementAdjustmentELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3308;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33NumberOfVisibilityAdjustmentRectsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBC40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33NumberOfVisibilityAdjustmentRectsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBC40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage33NumberOfVisibilityAdjustmentRectsEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3378;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24RemoteViewRectToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_9FloatRectEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBC68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24RemoteViewRectToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_9FloatRectEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBC68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage24RemoteViewRectToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_9FloatRectEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  int v12[4];
  IPC::Encoder *v13;

  *(float *)v12 = a2;
  *(float *)&v12[1] = a3;
  *(float *)&v12[2] = a4;
  *(float *)&v12[3] = a5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3389;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v7, v12);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoteViewPointToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_10FloatPointEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBC90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoteViewPointToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_10FloatPointEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBC90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage25RemoteViewPointToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_10FloatPointEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, float a2, float a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  int v10[2];
  IPC::Encoder *v11;

  *(float *)v10 = a2;
  *(float *)&v10[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3388;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v5, v10);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RemoteDictionaryPopupInfoToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_19DictionaryPopupInfoEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBCB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RemoteDictionaryPopupInfoToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_19DictionaryPopupInfoEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBCB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage35RemoteDictionaryPopupInfoToRootViewEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_19DictionaryPopupInfoEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3387;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18LoadAndDecodeImageEN6WebKit7WebPageES8_FvON7WebCore15ResourceRequestENSt3__18optionalINS9_9FloatSizeEEEmONS_17CompletionHandlerIFvONSC_7variantIJNS9_13ResourceErrorENS_3RefINS9_15ShareableBitmapENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBCE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18LoadAndDecodeImageEN6WebKit7WebPageES8_FvON7WebCore15ResourceRequestENSt3__18optionalINS9_9FloatSizeEEEmONS_17CompletionHandlerIFvONSC_7variantIJNS9_13ResourceErrorENS_3RefINS9_15ShareableBitmapENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBCE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage18LoadAndDecodeImageEN6WebKit7WebPageES8_FvON7WebCore15ResourceRequestENSt3__18optionalINS9_9FloatSizeEEEmONS_17CompletionHandlerIFvONSC_7variantIJNS9_13ResourceErrorENS_3RefINS9_15ShareableBitmapENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3374;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 80);
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v6;
  if ((_BYTE)v6)
  {
    if (v6 != 1)
      goto LABEL_7;
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::encode((IPC::Encoder *)v5, *(WebCore::ShareableBitmap **)a2);
      goto LABEL_7;
    }
LABEL_10:
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v11);
  }
  if (*(_DWORD *)(a2 + 80))
    goto LABEL_10;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v5, (WebCore::ResourceError *)a2);
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBD08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBD08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages7WebPage28StartPlayingPredominantVideoEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3419;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBD30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBD30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage23SyncApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBD58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage23SyncApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBD58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage23SyncApplyAutocorrectionEN6WebKit7WebPageES8_FvRKNS_6StringESB_bONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26ComputePagesForPrintingiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvmEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBD80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26ComputePagesForPrintingiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvmEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBD80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26ComputePagesForPrintingiOSEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS7_9PrintInfoEONS_17CompletionHandlerIFvmEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmEE4callEm(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

unint64_t IPC::Decoder::decode<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::callMemberFunction<WebKit::WebPage,WebKit::WebPage,void ()(int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&),std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>(uint64_t a1, void (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, WTF **, uint64_t), uint64_t a3, unsigned int *a4, uint64_t a5)
{
  void (*v5)(_QWORD *, uint64_t, uint64_t, uint64_t, WTF **, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *result;
  WTF *v13;
  uint64_t v14;

  v5 = a2;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, WTF **, uint64_t))(*v6 + a2);
  v7 = *a4;
  v8 = *((_QWORD *)a4 + 1);
  v9 = *((_QWORD *)a4 + 2);
  v13 = (WTF *)*((_QWORD *)a4 + 3);
  v10 = *((_QWORD *)a4 + 4);
  *((_QWORD *)a4 + 3) = 0;
  *((_QWORD *)a4 + 4) = 0;
  v14 = v10;
  v5(v6, v7, v8, v9, &v13, a5);
  result = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    a1[2] = (uint64_t)(v6 + 1);
    if (v3)
    {
      v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int>(a1, (uint64_t)&v14, a2);
    }
    v8 = v2;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        v9 = *v11;
        v8 = v11[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v8)
    {
      v12 = a2;
      result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[40] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t result;
  _BYTE v7[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v7);
  if (v7[16])
    return IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2, (uint64_t)v7, (uint64_t)a3);
  *a3 = 0;
  a3[40] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v8;
  _QWORD v9[2];
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9);
  v8 = v10;
  if (!v10)
  {
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 4) && *(_BYTE *)(a3 + 16))
  {
    *(_DWORD *)a4 = *(_DWORD *)a2;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)a3;
    *(_QWORD *)(a4 + 24) = v9[0];
    *(_QWORD *)(a4 + 32) = v9[1];
    v8 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 40) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29BindRemoteAccessibilityFramesEN6WebKit7WebPageES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSK_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_iEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBDA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29BindRemoteAccessibilityFramesEN6WebKit7WebPageES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSK_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_iEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBDA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29BindRemoteAccessibilityFramesEN6WebKit7WebPageES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSK_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_iEE4callESK_i(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  *(_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4) = a3;
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage31GetStringSelectionForPasteboardEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBDD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage31GetStringSelectionForPasteboardEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBDD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage31GetStringSelectionForPasteboardEN6WebKit7WebPageES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29GetDataSelectionForPasteboardEN6WebKit7WebPageES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBDF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29GetDataSelectionForPasteboardEN6WebKit7WebPageES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBDF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage29GetDataSelectionForPasteboardEN6WebKit7WebPageES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage27ReadSelectionFromPasteboardEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvObEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBE20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage27ReadSelectionFromPasteboardEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvObEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBE20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage27ReadSelectionFromPasteboardEN6WebKit7WebPageES8_FvRKNS_6StringEONS_17CompletionHandlerIFvObEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char *a2)
{
  uint64_t *v2;
  char v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = v3;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage30ShouldDelayWindowOrderingEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBE48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage30ShouldDelayWindowOrderingEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBE48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage30ShouldDelayWindowOrderingEventEN6WebKit7WebPageES8_FvRKNS7_13WebMouseEventEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  _QWORD v15[2];

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (_QWORD *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v15[0] = *v7;
      v15[1] = 1;
      return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long>(a1, a2, (uint64_t)v15, (uint64_t)a3);
    }
    v9 = v3;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v12 = a1;
      v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v4, v3);
        a1 = v12;
        a3 = v14;
        v10 = *v12;
        v9 = v12[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v9)
    {
      v13 = a3;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v8;

  result = IPC::Decoder::decode<WTF::OptionSet<WebCore::RenderAsTextFlag>>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v8 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + 16) && *(_BYTE *)(a3 + 8))
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
    *(_WORD *)(a4 + 24) = result;
    v8 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 32) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::RenderAsTextFlag>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebCore::RenderAsTextFlag>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebCore::RenderAsTextFlag>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 < v3 || v1 - v3 <= 1)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v5 = (unsigned __int16 *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    v10 = v1;
    v11 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    goto LABEL_11;
  }
  v6 = *v5;
  if (v6 > 0x7FF)
  {
LABEL_11:
    v9 = 0;
    v8 = 0;
    v7 = 0;
    return v8 | v9 | v7;
  }
  v7 = v6 & 0x700;
  v8 = v6;
  v9 = 0x10000;
  return v8 | v9 | v7;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26RenderTreeAsTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBE70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26RenderTreeAsTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBE70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage26RenderTreeAsTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage19FrameTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBE98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage19FrameTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FBE98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages7WebPage19FrameTextForTestingEN6WebKit7WebPageES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t WebKit::WebPageProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  const WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v9 = *(unsigned __int16 *)(a3 + 50);
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE41:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::AccessibilityScreenToRootView,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntPoint const&,WTF::CompletionHandler<void ()(WebCore::IntPoint)> &&)>(a2, (unint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t *, _QWORD **))WebKit::WebPageProxy::accessibilityScreenToRootView, 0);
      goto LABEL_53;
    case 0xE42:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardGoToItem,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::CompletionHandler<void ()(WebKit::WebBackForwardListCounts const&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPageProxy::backForwardGoToItem, 0);
      goto LABEL_53;
    case 0xE43:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardItemAtIndex,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, uint64_t, _QWORD **))WebKit::WebPageProxy::backForwardItemAtIndex, 0);
      goto LABEL_53;
    case 0xE44:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardListContainsItem,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPageProxy::backForwardListContainsItem, 0);
      goto LABEL_53;
    case 0xE45:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardListCounts,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(WebKit::WebBackForwardListCounts &&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::backForwardListCounts, 0);
      goto LABEL_53;
    case 0xE47:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::CanUndoRedo,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebKit::UndoOrRedo,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, BOOL, _QWORD **))WebKit::WebPageProxy::canUndoRedo, 0);
      goto LABEL_53;
    case 0xE48:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::CheckGrammarOfString,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,int)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::WebPageProxy::checkGrammarOfString, 0);
      goto LABEL_53;
    case 0xE49:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::CheckSpellingOfString,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(int,int)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::WebPageProxy::checkSpellingOfString, 0);
      goto LABEL_53;
    case 0xE4A:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::CheckTextOfParagraph,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::OptionSet<WebCore::TextCheckingType>,int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t, _QWORD **))WebKit::WebPageProxy::checkTextOfParagraph, 0);
      goto LABEL_53;
    case 0xE4B:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::CreateNewPage,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WebKit::NavigationActionData &::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WebKit::NavigationActionData &::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)>((uint64_t)a2, a3, (uint64_t)a4);
      goto LABEL_53;
    case 0xE4C:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::DecidePolicyForNavigationActionSync,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _BYTE *, _QWORD **))WebKit::WebPageProxy::decidePolicyForNavigationActionSync, 0);
      goto LABEL_53;
    case 0xE4D:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::DictationAlternatives,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::WebPageProxy::dictationAlternatives, 0);
      goto LABEL_53;
    case 0xE4E:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::ExceededDatabaseQuota,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)>(a2, (uint64_t *)a3, a4, a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))WebKit::WebPageProxy::exceededDatabaseQuota, 0);
      goto LABEL_53;
    case 0xE4F:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::ExecuteSavedCommandBySelector,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, WTF::StringImpl **, _QWORD **))WebKit::WebPageProxy::executeSavedCommandBySelector, 0);
      goto LABEL_53;
    case 0xE50:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::ExecuteUndoRedo,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebKit::UndoOrRedo,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, BOOL, _QWORD **))WebKit::WebPageProxy::executeUndoRedo, 0);
      goto LABEL_53;
    case 0xE52:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::GetGuessesForWord,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::String const&,int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, uint64_t, WTF::StringImpl **))WebKit::WebPageProxy::getGuessesForWord, 0);
      goto LABEL_53;
    case 0xE53:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::GetIsSpeaking,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::getIsSpeaking, 0);
      goto LABEL_53;
    case 0xE54:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::GetMenuBarIsVisible,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::getMenuBarIsVisible, 0);
      goto LABEL_53;
    case 0xE55:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::GetStatusBarIsVisible,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::getStatusBarIsVisible, 0);
      goto LABEL_53;
    case 0xE56:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::GetToolbarsAreVisible,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::getToolbarsAreVisible, 0);
      goto LABEL_53;
    case 0xE57:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::GetWindowFrame,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::getWindowFrame, 0);
      goto LABEL_53;
    case 0xE58:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::HandleSynchronousMessage,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, char *, uint64_t *, _QWORD **))WebKit::WebPageProxy::handleSynchronousMessage, 0);
      goto LABEL_53;
    case 0xE59:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::InterpretKeyEvent,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebKit::EditorState const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, BOOL, uint64_t *))WebKit::WebPageProxy::interpretKeyEvent, 0);
      goto LABEL_53;
    case 0xE5A:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::LoadRecentSearches,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, WTF::StringImpl **, _QWORD **))WebKit::WebPageProxy::loadRecentSearches, 0);
      goto LABEL_53;
    case 0xE5B:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::LoadSynchronousURLSchemeTask,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebKit::URLSchemeTaskParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&,WTF::CompletionHandler::ResourceError const&,WebKit::URLSchemeTaskParameters &&::Vector<unsigned char,0ul,WebKit::URLSchemeTaskParameters &&::CrashOnOverflow,16ul,WebKit::URLSchemeTaskParameters &&::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _BYTE *, _QWORD **))WebKit::WebPageProxy::loadSynchronousURLSchemeTask, 0);
      goto LABEL_53;
    case 0xE5C:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::PrintFrame,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, WTF::StringImpl **, unint64_t *, WTF::StringImpl **))WebKit::WebPageProxy::printFrame, 0);
      goto LABEL_53;
    case 0xE5E:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RequestDOMPasteAccess,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::DOMPasteAccessCategory,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::DOMPasteAccessResponse)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, uint64_t, _QWORD, _QWORD, __int128 *, WTF::StringImpl **, __int128 *))WebKit::WebPageProxy::requestDOMPasteAccess, 0);
      goto LABEL_53;
    case 0xE5F:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RootViewToAccessibilityScreen,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntRect const&,WTF::CompletionHandler<void ()(WebCore::IntRect)> &&)>(a2, (unint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPageProxy::rootViewToAccessibilityScreen, 0);
      goto LABEL_53;
    case 0xE60:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RootViewToScreen,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntRect const&,WTF::CompletionHandler<void ()(WebCore::IntRect const&)> &&)>(a2, (unint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPageProxy::rootViewToScreen, 0);
      goto LABEL_53;
    case 0xE61:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RunBeforeUnloadConfirmPanel,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **))WebKit::WebPageProxy::runBeforeUnloadConfirmPanel, 0);
      goto LABEL_53;
    case 0xE62:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RunJavaScriptAlert,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **))WebKit::WebPageProxy::runJavaScriptAlert, 0);
      goto LABEL_53;
    case 0xE63:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RunJavaScriptConfirm,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **))WebKit::WebPageProxy::runJavaScriptConfirm, 0);
      goto LABEL_53;
    case 0xE64:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RunJavaScriptPrompt,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, WTF::StringImpl **, WTF::StringImpl **, __int128 *))WebKit::WebPageProxy::runJavaScriptPrompt, 0);
      goto LABEL_53;
    case 0xE65:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::ScreenToRootView,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntPoint const&,WTF::CompletionHandler<void ()(WebCore::IntPoint const&)> &&)>(a2, (unint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t *, _QWORD **))WebKit::WebPageProxy::screenToRootView, 0);
      goto LABEL_53;
    case 0xE66:
      v11 = *(_QWORD *)(a1 + 224);
      {
        WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v11 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v8) & 1) != 0)
      {
        v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::SerializedAttachmentDataForIdentifiers,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPageProxy::serializedAttachmentDataForIdentifiers, 0);
      }
      else
      {
        v9 = *(unsigned __int16 *)(a3 + 50);
LABEL_44:
        v12 = 0;
        if (v9 > 3676)
        {
          if (v9 == 3677)
          {
            v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::RenderTreeAsTextForTesting,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))WebKit::WebPageProxy::renderTreeAsTextForTesting, 0);
          }
          else
          {
            if (v9 != 3687)
              goto LABEL_54;
            v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::SpeechSynthesisVoiceList,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::speechSynthesisVoiceList, 0);
          }
        }
        else if (v9 == 3654)
        {
          v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::BindRemoteAccessibilityFrames,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, WTF **, _QWORD **))WebKit::WebPageProxy::bindRemoteAccessibilityFrames, 0);
        }
        else
        {
          if (v9 != 3665)
            goto LABEL_54;
          v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::FrameTextForTesting,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD **))WebKit::WebPageProxy::frameTextForTesting, 0);
        }
      }
LABEL_53:
      v12 = v10;
LABEL_54:
      CFRelease(*(CFTypeRef *)(a1 + 8));
      return v12;
    case 0xE68:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::SpellingUIIsShowing,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebPageProxy::spellingUIIsShowing, 0);
      goto LABEL_53;
    case 0xE69:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::UnwrapCryptoKey,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WebCore::WrappedCryptoKey &&::Vector<unsigned char,0ul,WebCore::WrappedCryptoKey &&::CrashOnOverflow,16ul,WebCore::WrappedCryptoKey &&::FastMalloc>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebPageProxy::unwrapCryptoKey, 0);
      goto LABEL_53;
    case 0xE6A:
      v10 = IPC::handleMessageSynchronous<Messages::WebPageProxy::WrapCryptoKey,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF **, _QWORD **))WebKit::WebPageProxy::wrapCryptoKey, 0);
      goto LABEL_53;
    default:
      goto LABEL_44;
  }
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::CreateNewPage,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::WindowFeatures &&,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(std::optional<WebKit::NavigationActionData &::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WebKit::NavigationActionData &::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<WebKit::WebPageCreationParameters>)> &&)>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, unsigned __int8 **, _OWORD *, _BYTE *, _OWORD *);
  void (*v7)(_QWORD *, unsigned __int8 **, _OWORD *, _BYTE *, _OWORD *);
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder **v10;
  IPC::Encoder **v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  _QWORD *v18;
  unsigned __int8 **v19;
  void *v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  char v38;
  _OWORD v39[2];
  _OWORD v40[2];
  _QWORD v41[2];
  _BYTE v42[2560];
  char v43;
  IPC::Encoder *v44;
  unsigned __int8 **v45[319];
  char v46;
  uint64_t v47;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = (unsigned __int8 **)v3;
  v47 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::WindowFeatures,void>::decode(v12, (uint64_t)v34);
  if (!v38)
    goto LABEL_22;
LABEL_2:
  IPC::Decoder::decode<WebKit::NavigationActionData>(v13, (uint64_t)&v44);
  if (!v46)
  {
    LOBYTE(v39[0]) = 0;
    v43 = 0;
LABEL_7:
    if (v38)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v15);
    goto LABEL_9;
  }
  if (v38)
  {
    v39[0] = v34[0];
    v39[1] = v34[1];
    v40[0] = v35[0];
    *(_OWORD *)((char *)v40 + 10) = *(_OWORD *)((char *)v35 + 10);
    v41[0] = v36;
    v16 = v37;
    v36 = 0;
    v37 = 0;
    v41[1] = v16;
    WebKit::NavigationActionData::NavigationActionData((uint64_t)v42, (uint64_t)&v44);
    v43 = 1;
    if (v46)
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v44);
    goto LABEL_7;
  }
  do
  {
    __break(1u);
LABEL_22:
    v28 = *v13;
    v29 = v13[1];
    *v13 = 0;
    v13[1] = 0;
    v30 = v13[3];
    if (v30)
      v31 = v29 == 0;
    else
      v31 = 1;
    if (!v31)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
      if (v38)
        goto LABEL_2;
    }
    LOBYTE(v39[0]) = 0;
    v43 = 0;
LABEL_9:
    if (!v43)
    {
      v32 = *v13;
      v33 = v13[1];
      *v13 = 0;
      v13[1] = 0;
      result = v13[3];
      if (!result)
        return result;
      if (!v33)
        return 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v32);
      if (!v43)
        return 0;
    }
    v17 = *v11;
    *v11 = 0;
    v44 = v17;
    v11 = (IPC::Encoder **)v45;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v45, v14);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v18 = off_1E34FC448;
    v18[1] = v44;
    v19 = v45[0];
    v44 = 0;
    v45[0] = 0;
    v18[2] = v19;
    *(_QWORD *)&v34[0] = v18;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v45);
    v21 = v44;
    v44 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
  }
  while (!v43);
  v24 = (_QWORD *)(v9 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v7 = *(void (**)(_QWORD *, unsigned __int8 **, _OWORD *, _BYTE *, _OWORD *))(*v24 + v7);
  v7(v24, v14, v39, v42, v34);
  v25 = *(_QWORD *)&v34[0];
  *(_QWORD *)&v34[0] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v43)
  {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v42);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v26);
  }
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::RunJavaScriptAlert,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v22, a2);
  v12 = v25;
  if (v25)
  {
    v13 = *a3;
    *a3 = 0;
    v19 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34FC470;
    v14[1] = v19;
    v15 = v20[0];
    v20[0] = 0;
    v14[2] = v15;
    v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    if (!v25)
      __break(1u);
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **))(*v16 + a5);
    a5(v16, a1, v22[0], v22[1], &v23, &v24, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
  return v12 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::RunJavaScriptConfirm,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v22, a2);
  v12 = v25;
  if (v25)
  {
    v13 = *a3;
    *a3 = 0;
    v19 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34FC498;
    v14[1] = v19;
    v15 = v20[0];
    v20[0] = 0;
    v14[2] = v15;
    v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    if (!v25)
      __break(1u);
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **))(*v16 + a5);
    a5(v16, a1, v22[0], v22[1], &v23, &v24, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
  return v12 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::RunJavaScriptPrompt,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::String const,WTF::CompletionHandler<void ()(WTF::String const)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, WTF::StringImpl **, WTF::StringImpl **, __int128 *), uint64_t a6)
{
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  IPC::Encoder *v16;
  _QWORD *v17;
  unsigned __int8 **v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef cf;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  char v48;
  IPC::Encoder *v49;
  unsigned __int8 **v50[36];
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v33);
  if (!v34)
    goto LABEL_45;
  IPC::Decoder::decode<WebKit::FrameInfoData>(a2, (uint64_t)&v49);
  if (v51 && (IPC::Decoder::decode<WTF::String>(a2, &v35), v36))
  {
    IPC::Decoder::decode<WTF::String>(a2, &v37);
    v13 = v38;
    if (v38)
    {
      if (!v34 || !v51 || !v36)
        goto LABEL_44;
      v39 = v33;
      std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v40, (uint64_t)&v49);
      v14 = v35;
      v35 = 0;
      v46 = v14;
      v47 = v37;
      v13 = 1;
    }
    else
    {
      LOBYTE(v39) = 0;
    }
    v48 = v13;
    if (v36)
    {
      v15 = v35;
      v35 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v39) = 0;
    v48 = 0;
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v12);
  if (!v48)
    goto LABEL_46;
  while (1)
  {
    v16 = *a3;
    *a3 = 0;
    v49 = v16;
    a3 = (IPC::Encoder **)v50;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v50, a1);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = off_1E34FC4C0;
    v17[1] = v49;
    v18 = v50[0];
    v49 = 0;
    v50[0] = 0;
    v17[2] = v18;
    *(_QWORD *)&v33 = v17;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v50);
    v20 = v49;
    v49 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v21, v22);
    }
    if (v48)
      break;
LABEL_44:
    __break(1u);
LABEL_45:
    LOBYTE(v39) = 0;
    v48 = 0;
LABEL_46:
    v31 = *a2;
    v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (!result)
      return result;
    if (v32)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v31);
      if (v48)
        continue;
    }
    return 0;
  }
  v23 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, WTF::StringImpl **, WTF::StringImpl **, __int128 *))(*v23 + a5);
  a5(v23, a1, v39, *((_QWORD *)&v39 + 1), &v40, &v46, &v47, &v33);
  v25 = v33;
  *(_QWORD *)&v33 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v48)
  {
    v26 = v47;
    v47 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v46;
    v46 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v24);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v24);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v44 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))off_1E34FBEB0[v44])(&v49, &v43);
    v44 = -1;
    v29 = cf;
    cf = 0;
    if (v29)
      CFRelease(v29);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v41);
  }
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::GetToolbarsAreVisible,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC4E8;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::GetMenuBarIsVisible,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC510;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::GetStatusBarIsVisible,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC538;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::GetWindowFrame,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(WebCore::FloatRect const&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC560;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::ScreenToRootView,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntPoint const&,WTF::CompletionHandler<void ()(WebCore::IntPoint const&)> &&)>(unsigned __int8 **a1, unint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t *, _QWORD **), uint64_t a6)
{
  int v11;
  uint64_t v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  unint64_t v22;
  int v23;

  v22 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(a2);
  v23 = v11;
  v12 = v11;
  if ((_BYTE)v11)
  {
    v13 = *a3;
    *a3 = 0;
    v19 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34FC588;
    v14[1] = v19;
    v15 = v20[0];
    v20[0] = 0;
    v14[2] = v15;
    v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t *, _QWORD **))(*v16 + a5);
    a5(v16, &v22, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return v12 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::RootViewToScreen,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntRect const&,WTF::CompletionHandler<void ()(WebCore::IntRect const&)> &&)>(unsigned __int8 **a1, unint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _BYTE v21[16];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(a2, (uint64_t)v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC5B0;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v16 + a5);
    a5(v16, v21, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::AccessibilityScreenToRootView,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntPoint const&,WTF::CompletionHandler<void ()(WebCore::IntPoint)> &&)>(unsigned __int8 **a1, unint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t *, _QWORD **), uint64_t a6)
{
  int v11;
  uint64_t v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  unint64_t v22;
  int v23;

  v22 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(a2);
  v23 = v11;
  v12 = v11;
  if ((_BYTE)v11)
  {
    v13 = *a3;
    *a3 = 0;
    v19 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34FC5D8;
    v14[1] = v19;
    v15 = v20[0];
    v20[0] = 0;
    v14[2] = v15;
    v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t *, _QWORD **))(*v16 + a5);
    a5(v16, &v22, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return v12 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::RootViewToAccessibilityScreen,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::IntRect const&,WTF::CompletionHandler<void ()(WebCore::IntRect)> &&)>(unsigned __int8 **a1, unint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _BYTE v21[16];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::IntRect>>(a2, (uint64_t)v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC600;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v16 + a5);
    a5(v16, v21, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::RunBeforeUnloadConfirmPanel,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData &&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v22, a2);
  v12 = v25;
  if (v25)
  {
    v13 = *a3;
    *a3 = 0;
    v19 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34FC628;
    v14[1] = v19;
    v15 = v20[0];
    v20[0] = 0;
    v14[2] = v15;
    v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    if (!v25)
      __break(1u);
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD **))(*v16 + a5);
    a5(v16, a1, v22[0], v22[1], &v23, &v24, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
  return v12 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::PrintFrame,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WebCore::FloatSize const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, WTF::StringImpl **, unint64_t *, WTF::StringImpl **), uint64_t a6)
{
  unint64_t v12;
  char v13;
  IPC::Encoder *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t result;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  char v35;
  IPC::Encoder *v36[2];
  char v37;
  WTF::StringImpl *v38;
  char v39;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)v36);
  if (v37)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v38);
    if (v39)
    {
      v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
      if (v13)
      {
        if (v37 && v39)
        {
          v32 = *(_OWORD *)v36;
          v33 = v38;
          v34 = v12;
          v35 = 1;
          v14 = *a3;
          *a3 = 0;
          v36[0] = v14;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v36[1], a1);
          v15 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v15 = off_1E34FC650;
          *(IPC::Encoder **)(v15 + 8) = v36[0];
          v16 = v36[1];
          v36[0] = 0;
          v36[1] = 0;
          *(_QWORD *)(v15 + 16) = v16;
          v38 = (WTF::StringImpl *)v15;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v36[1]);
          v18 = v36[0];
          v36[0] = 0;
          if (v18)
          {
            IPC::Encoder::~Encoder(v18, v17);
            WTF::fastFree(v19, v20);
          }
          v21 = (_QWORD *)(a4 + (a6 >> 1));
          if ((a6 & 1) != 0)
            a5 = *(void (**)(_QWORD *, unsigned __int8 **, _QWORD, _QWORD, WTF::StringImpl **, unint64_t *, WTF::StringImpl **))(*v21 + a5);
          a5(v21, a1, v32, *((_QWORD *)&v32 + 1), &v33, &v34, &v38);
          v23 = v38;
          v38 = 0;
          if (v23)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
          if (v35)
          {
            v24 = v33;
            v33 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v22);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          return 1;
        }
        __break(1u);
      }
      v26 = (WTF::StringImpl *)*a2;
      v27 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v28 = a2[3];
      if (v28 && v27)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v28 + 16))(v28, v26);
      if (v39)
      {
        v29 = v38;
        v38 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v26);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
    }
  }
  v30 = *a2;
  v31 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v31)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v30);
    return 0;
  }
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::DecidePolicyForNavigationActionSync,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebKit::NavigationActionData &&,WTF::CompletionHandler<void ()(WebKit::PolicyDecision &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  _QWORD *v16;
  IPC::Encoder *v18;
  unsigned __int8 **v19[2];
  _QWORD *v20;
  _BYTE v21[2560];
  unsigned __int8 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>(a2, v21);
  v11 = v22;
  if (v22)
  {
    v12 = *a3;
    *a3 = 0;
    v18 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v19, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34FC678;
    v13[1] = v18;
    v14 = v19[0];
    v19[0] = 0;
    v13[2] = v14;
    v20 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v19);
    if (!v22)
      __break(1u);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, _BYTE *, _QWORD **))(*v15 + a5);
    a5(v15, a1, v21, &v20);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    if (v22)
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v21);
  }
  return v11 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::InterpretKeyEvent,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebKit::EditorState const&,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, BOOL, uint64_t *), uint64_t a6)
{
  char *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  IPC::Encoder *v24;
  uint64_t v25;
  IPC::Encoder *v26;
  void *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];
  _BYTE v40[320];
  uint64_t v41;
  BOOL v42;
  char v43;
  IPC::Encoder *v44[60];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::EditorState>(a2, (uint64_t)v44);
  v13 = v45;
  if (v45)
  {
    v14 = a2[1];
    v12 = (char *)*a2;
    v15 = a2[2] - *a2;
    if (v14 <= v15)
    {
      v19 = 0;
      v20 = 0;
      *a2 = 0;
      a2[1] = 0;
      v21 = a2[3];
      if (v21)
      {
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
          v20 = *a2;
          v19 = a2[1];
        }
        else
        {
          v19 = 0;
          v20 = 0;
        }
      }
    }
    else
    {
      v16 = &v12[v15];
      a2[2] = (uint64_t)(v16 + 1);
      if (v12)
      {
        v17 = *v16;
        if (v17 < 2)
        {
          v18 = v17 != 0;
          std::__tuple_leaf<0ul,WebKit::EditorState,false>::__tuple_leaf[abi:sn180100]<WebKit::EditorState,void>((uint64_t)v39, (__int128 *)v44);
          v42 = v18;
          v13 = 1;
          goto LABEL_11;
        }
        goto LABEL_8;
      }
      v19 = v14;
      v20 = 0;
    }
    v14 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        v12 = (char *)*a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v12 = 0;
      }
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23 && v14)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v12);
    v13 = 0;
  }
  v39[0] = 0;
LABEL_11:
  v43 = v13;
  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](v44, v12);
  if (!v43)
  {
    v36 = *a2;
    v37 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (!result)
      return result;
    if (!v37)
      return 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v36);
    if (!v43)
      return 0;
  }
  v24 = *a3;
  *a3 = 0;
  v44[0] = v24;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v44[1], a1);
  v25 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v25 = off_1E34FC6A0;
  *(IPC::Encoder **)(v25 + 8) = v44[0];
  v26 = v44[1];
  v44[0] = 0;
  v44[1] = 0;
  *(_QWORD *)(v25 + 16) = v26;
  v38 = v25;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v44[1]);
  v28 = v44[0];
  v44[0] = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  if (!v43)
    __break(1u);
  v31 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _BYTE *, BOOL, uint64_t *))(*v31 + a5);
  a5(v31, v39, v42, &v38);
  v33 = v38;
  v38 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (v43)
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v32);
    if (v40[304])
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v40, v34);
  }
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardGoToItem,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::CompletionHandler<void ()(WebKit::WebBackForwardListCounts const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _BYTE v21[16];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>(a2, (uint64_t)v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC6C8;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v16 + a5);
    a5(v16, v21, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardItemAtIndex,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, uint64_t, _QWORD **), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;

  v11 = IPC::Decoder::decode<std::tuple<float>>(a2);
  v12 = v11 & 0xFF00000000;
  if ((v11 & 0xFF00000000) != 0)
  {
    v13 = v11;
    v14 = *a3;
    *a3 = 0;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34FC6F0;
    v15[1] = v20;
    v16 = v21[0];
    v21[0] = 0;
    v15[2] = v16;
    v22 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, uint64_t, _QWORD **))(*v17 + a5);
    a5(v17, a1, v13, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardListContainsItem,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _BYTE v21[16];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>(a2, (uint64_t)v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC718;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v16 + a5);
    a5(v16, v21, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::BackForwardListCounts,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(WebKit::WebBackForwardListCounts &&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC740;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::CanUndoRedo,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebKit::UndoOrRedo,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, BOOL, _QWORD **), uint64_t a6)
{
  unsigned __int16 v11;
  unsigned int v12;
  char v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;

  v11 = IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>(a2);
  v12 = v11;
  if (v11 >= 0x100u)
  {
    v13 = v11;
    v14 = *a3;
    *a3 = 0;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34FC768;
    v15[1] = v20;
    v16 = v21[0];
    v21[0] = 0;
    v15[2] = v16;
    v22 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, BOOL, _QWORD **))(*v17 + a5);
    a5(v17, v13 != 0, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12 > 0xFF;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::ExecuteUndoRedo,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebKit::UndoOrRedo,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, BOOL, _QWORD **), uint64_t a6)
{
  unsigned __int16 v11;
  unsigned int v12;
  char v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;

  v11 = IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>(a2);
  v12 = v11;
  if (v11 >= 0x100u)
  {
    v13 = v11;
    v14 = *a3;
    *a3 = 0;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34FC790;
    v15[1] = v20;
    v16 = v21[0];
    v21[0] = 0;
    v15[2] = v16;
    v22 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, BOOL, _QWORD **))(*v17 + a5);
    a5(v17, v13 != 0, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12 > 0xFF;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::RequestDOMPasteAccess,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::DOMPasteAccessCategory,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IntRect const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::DOMPasteAccessResponse)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t, _QWORD, _QWORD, __int128 *, WTF::StringImpl **, __int128 *), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  void *v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  WTF::StringImpl *v39;
  char v40;
  IPC::Encoder *v41[2];
  unsigned __int8 v42;
  __int128 v43;
  unsigned __int8 v44;
  WTF::StringImpl *v45;
  char v46;

  v8 = a2[2];
  v9 = *a2;
  v10 = a2[1];
  v11 = v8 - v9;
  if (v10 <= v11)
  {
    v20 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v19 = *a2;
        v20 = a2[1];
      }
      else
      {
        v20 = 0;
        v19 = 0;
      }
    }
LABEL_22:
    v10 = 0;
    v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = (_QWORD *)a2[3];
    if (!v18)
      goto LABEL_23;
    goto LABEL_31;
  }
  v12 = (unsigned __int8 *)(v9 + v11);
  a2[2] = (uint64_t)(v12 + 1);
  if (!v9)
  {
    v20 = v10;
    v19 = 0;
    goto LABEL_22;
  }
  v13 = *v12;
  if (v13 >= 2)
    goto LABEL_23;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)v41);
  if (v42)
  {
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v43);
    if (v44)
    {
      v18 = IPC::Decoder::decode<WTF::String>(a2, &v45);
      if (v46)
      {
        v20 = v42;
        if (v42)
        {
          v20 = v44;
          if (v44)
          {
            v37 = *(_OWORD *)v41;
            v38 = v43;
            v39 = v45;
            v40 = 1;
            v21 = *a3;
            *a3 = 0;
            v41[0] = v21;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v41[1], a1);
            v22 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v22 = off_1E34FC7B8;
            *(IPC::Encoder **)(v22 + 8) = v41[0];
            v23 = v41[1];
            v41[0] = 0;
            v41[1] = 0;
            *(_QWORD *)(v22 + 16) = v23;
            *(_QWORD *)&v43 = v22;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v41[1]);
            v25 = v41[0];
            v41[0] = 0;
            if (v25)
            {
              IPC::Encoder::~Encoder(v25, v24);
              WTF::fastFree(v26, v27);
            }
            v28 = (_QWORD *)(a4 + (a6 >> 1));
            if ((a6 & 1) != 0)
              a5 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, __int128 *, WTF::StringImpl **, __int128 *))(*v28 + a5);
            a5(v28, v13, v37, *((_QWORD *)&v37 + 1), &v38, &v39, &v43);
            v30 = v43;
            *(_QWORD *)&v43 = 0;
            if (v30)
              (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            if (v40)
            {
              v31 = v39;
              v39 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v29);
                else
                  *(_DWORD *)v31 -= 2;
              }
            }
            return 1;
          }
        }
        __break(1u);
LABEL_31:
        if (v20)
        {
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + 16))(v18, v19, v20);
          v9 = *a2;
          v10 = a2[1];
        }
        else
        {
          v10 = 0;
          v9 = 0;
        }
LABEL_23:
        *a2 = 0;
        a2[1] = 0;
        v34 = a2[3];
        if (v34 && v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v9);
      }
    }
  }
  v35 = *a2;
  v36 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v36)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v35);
    return 0;
  }
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::ExceededDatabaseQuota,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, uint64_t (*a5)(_QWORD *, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _BOOL8 result;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19[2];
  _QWORD *v20;
  _QWORD v21[9];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(a2, v21);
  v12 = v22;
  if (!v22)
    goto LABEL_5;
  v13 = *a3;
  *a3 = 0;
  v18 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v19, a1);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34FC7E0;
  v14[1] = v18;
  v15 = v19[0];
  v19[0] = 0;
  v14[2] = v15;
  v20 = v14;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v19);
  result = 0;
  if (v22)
  {
    IPC::callMemberFunction<WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&),std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,void ()(unsigned long long)>(a4, a5, a6, v21, (uint64_t)&v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
LABEL_5:
    std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v11);
    return v12 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::CheckTextOfParagraph,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::OptionSet<WebCore::TextCheckingType>,int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t, _QWORD **), uint64_t a6)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  unsigned __int8 **v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  WTF::StringImpl *v44;
  char v45;
  int v46;
  char v47;
  WTF::StringImpl *v48;
  unsigned __int8 **v49;

  IPC::Decoder::decode<WTF::String>(a2, &v48);
  if (!(_BYTE)v49)
  {
    v16 = 0;
    LOBYTE(v44) = 0;
    v47 = 0;
    goto LABEL_5;
  }
  v14 = IPC::Decoder::decode<WTF::OptionSet<WebCore::TextCheckingType>>(a2);
  v6 = v14;
  if ((unsigned __int16)v14 <= 0xFFu)
    goto LABEL_3;
  v22 = a2[1];
  v23 = *a2;
  v24 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v22 < v24 || v22 - v24 <= 3)
  {
    v41 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (!v14)
      goto LABEL_39;
    goto LABEL_43;
  }
  v26 = (unsigned int *)(v23 + v24);
  a2[2] = (uint64_t)(v26 + 1);
  if (!v23)
  {
    v41 = v22;
    v15 = 0;
    goto LABEL_39;
  }
  v23 = v49;
  if (!(_BYTE)v49)
  {
    __break(1u);
LABEL_43:
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v23, v22);
      v15 = (WTF::StringImpl *)*a2;
      v41 = a2[1];
    }
    else
    {
      v41 = 0;
      v15 = 0;
    }
LABEL_39:
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42 && v41)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v42 + 16))(v42, v15);
LABEL_3:
    v16 = 0;
    LOBYTE(v44) = 0;
    v17 = 1;
    goto LABEL_18;
  }
  v17 = 0;
  v7 = *v26;
  v27 = v48;
  v48 = 0;
  v44 = v27;
  v45 = v14;
  v46 = v7;
  v16 = 1;
LABEL_18:
  v47 = v16;
  if ((_BYTE)v49)
  {
    v28 = v48;
    v48 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v15);
        if (!v17)
          goto LABEL_23;
        goto LABEL_5;
      }
      *(_DWORD *)v28 -= 2;
    }
  }
  if (!v17)
    goto LABEL_23;
LABEL_5:
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20)
    v21 = v19 == 0;
  else
    v21 = 1;
  if (!v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
LABEL_23:
  if ((_DWORD)v16)
  {
    v29 = *a3;
    *a3 = 0;
    v48 = v29;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, a1);
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v30 = off_1E34FC808;
    v30[1] = v48;
    v31 = v49;
    v48 = 0;
    v49 = 0;
    v30[2] = v31;
    v43 = v30;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v49);
    v33 = v48;
    v48 = 0;
    if (v33)
    {
      IPC::Encoder::~Encoder(v33, v32);
      WTF::fastFree(v34, v35);
    }
    v36 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t, _QWORD **))(*v36 + a5);
    a5(v36, &v44, v6, v7, &v43);
    v38 = v43;
    v43 = 0;
    if (v38)
      (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    if (v47)
    {
      v39 = v44;
      v44 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v37);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
  }
  return v16;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::CheckSpellingOfString,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(int,int)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC830;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::CheckGrammarOfString,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int,int)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC858;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::SpellingUIIsShowing,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC880;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::GetGuessesForWord,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::String const&,WTF::String const&,int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, uint64_t, WTF::StringImpl **), uint64_t a6)
{
  uint64_t v6;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned __int8 **v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  _QWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  char v47;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  unsigned __int8 **v51;

  IPC::Decoder::decode<WTF::String>(a2, &v48);
  if (!v49)
  {
    v22 = 0;
    LOBYTE(v44) = 0;
    v47 = 0;
    goto LABEL_12;
  }
  v13 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v50);
  if ((_BYTE)v51)
  {
    v15 = a2[1];
    v16 = *a2;
    v17 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
    if (v15 >= v17 && v15 - v17 > 3)
    {
      v19 = (unsigned int *)(v16 + v17);
      a2[2] = (uint64_t)(v19 + 1);
      if (v16)
      {
        if (v49)
        {
          v20 = 0;
          v6 = *v19;
          v21 = v48;
          v48 = 0;
          v44 = v21;
          v45 = v50;
          v46 = v6;
          v22 = 1;
          v47 = 1;
          goto LABEL_19;
        }
        __break(1u);
        goto LABEL_50;
      }
      v41 = v15;
      v14 = 0;
    }
    else
    {
      v41 = 0;
      v14 = 0;
      *a2 = 0;
      a2[1] = 0;
      v42 = a2[3];
      if (v42)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v16, v15);
          v14 = (WTF::StringImpl *)*a2;
          v41 = a2[1];
        }
        else
        {
          v41 = 0;
          v14 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v43 = a2[3];
    if (v43 && v41)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v43 + 16))(v43, v14);
    LOBYTE(v44) = 0;
    v47 = 0;
    if (!(_BYTE)v51)
      goto LABEL_51;
    v13 = v50;
    v50 = 0;
    if (!v13)
      goto LABEL_51;
    if (*(_DWORD *)v13 != 2)
    {
      v22 = 0;
      *(_DWORD *)v13 -= 2;
      goto LABEL_18;
    }
LABEL_50:
    WTF::StringImpl::destroy(v13, v14);
LABEL_51:
    v22 = 0;
    goto LABEL_18;
  }
  v22 = 0;
  LOBYTE(v44) = 0;
  v47 = 0;
LABEL_18:
  v20 = 1;
LABEL_19:
  if (v49)
  {
    v27 = v48;
    v48 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::destroy(v27, v14);
        if (!v20)
          goto LABEL_24;
        goto LABEL_12;
      }
      *(_DWORD *)v27 -= 2;
    }
  }
  if (!v20)
    goto LABEL_24;
LABEL_12:
  v23 = *a2;
  v24 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v25 = a2[3];
  if (v25)
    v26 = v24 == 0;
  else
    v26 = 1;
  if (!v26)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
LABEL_24:
  if ((_DWORD)v22)
  {
    v28 = *a3;
    *a3 = 0;
    v50 = v28;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v51, a1);
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v29 = off_1E34FC8A8;
    *((_QWORD *)v29 + 1) = v50;
    v30 = v51;
    v50 = 0;
    v51 = 0;
    *((_QWORD *)v29 + 2) = v30;
    v48 = v29;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v51);
    v32 = v50;
    v50 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v31);
      WTF::fastFree(v33, v34);
    }
    v35 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **, uint64_t, WTF::StringImpl **))(*v35 + a5);
    a5(v35, &v44, &v45, v6, &v48);
    v37 = v48;
    v48 = 0;
    if (v37)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
    if (v47)
    {
      v38 = v45;
      v45 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v36);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = v44;
      v44 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v36);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
  }
  return v22;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::ExecuteSavedCommandBySelector,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC8D0;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, a1, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::GetIsSpeaking,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FC8F8;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::DictationAlternatives,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34FC920;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::LoadRecentSearches,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC948;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, a1, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::WrapCryptoKey,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  WTF *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  WTF *v23;
  int v24;
  unsigned __int8 v25;

  IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, (uint64_t)&v23);
  v11 = v25;
  if (!v25)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FC970;
  v13[1] = v20;
  v14 = v21;
  v21 = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
  result = 0;
  if (v25)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v25)
    {
      v19 = v23;
      if (v23)
      {
        v23 = 0;
        v24 = 0;
        WTF::fastFree(v19, v17);
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::UnwrapCryptoKey,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WebCore::WrappedCryptoKey &&::Vector<unsigned char,0ul,WebCore::WrappedCryptoKey &&::CrashOnOverflow,16ul,WebCore::WrappedCryptoKey &&::FastMalloc>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  WTF *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  _BYTE v23[24];
  WTF *v24;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::WrappedCryptoKey>>(a2, (uint64_t)v23);
  v11 = v26;
  if (v26)
  {
    v12 = *a3;
    *a3 = 0;
    v20 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34FC998;
    v13[1] = v20;
    v14 = v21;
    v21 = 0;
    v13[2] = v14;
    v22 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
    if (!v26)
      __break(1u);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v15 + a5);
    a5(v15, v23, &v22);
    v17 = v22;
    v22 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v26)
    {
      v18 = v24;
      if (v24)
      {
        v24 = 0;
        v25 = 0;
        WTF::fastFree(v18, v16);
      }
    }
  }
  return v11 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::HandleSynchronousMessage,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, char *, uint64_t *, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _BOOL8 result;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20;
  _QWORD *v21;
  char v22[8];
  uint64_t v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(a2, v22);
  v12 = v24;
  if (!v24)
  {
LABEL_7:
    std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
    return v12 != 0;
  }
  v13 = *a3;
  *a3 = 0;
  v19 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34FC9C0;
  v14[1] = v19;
  v15 = v20;
  v20 = 0;
  v14[2] = v15;
  v21 = v14;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
  result = 0;
  if (v24)
  {
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, char *, uint64_t *, _QWORD **))(*v17 + a5);
    a5(v17, a1, v22, &v23, &v21);
    v18 = v21;
    v21 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::LoadSynchronousURLSchemeTask,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(IPC::Connection &,WebKit::URLSchemeTaskParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&,WTF::CompletionHandler::ResourceError const&,WebKit::URLSchemeTaskParameters &&::Vector<unsigned char,0ul,WebKit::URLSchemeTaskParameters &&::CrashOnOverflow,16ul,WebKit::URLSchemeTaskParameters &&::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, _BYTE *, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  _BYTE v22[512];
  unsigned __int8 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>(a2, v22);
  v12 = v23;
  if (v23)
  {
    v13 = *a3;
    *a3 = 0;
    v19 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34FC9E8;
    v14[1] = v19;
    v15 = v20[0];
    v20[0] = 0;
    v14[2] = v15;
    v21 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    if (!v23)
      __break(1u);
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, _BYTE *, _QWORD **))(*v16 + a5);
    a5(v16, a1, v22, &v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
  return v12 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::SerializedAttachmentDataForIdentifiers,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20;
  _QWORD *v21;
  _BYTE v22[16];
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v22);
  v11 = v23;
  if (!v23)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v19 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FCA10;
  v13[1] = v19;
  v14 = v20;
  v20 = 0;
  v13[2] = v14;
  v21 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
  result = 0;
  if (v23)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v16 + a5);
    a5(v16, v22, &v21);
    v18 = v21;
    v21 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v23)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebPageProxy::SpeechSynthesisVoiceList,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34FCA38;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::RenderTreeAsTextForTesting,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _QWORD v21[3];
  unsigned __int16 v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag>>>(a2, v21);
  v11 = v23;
  if (!v23)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FCA60;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v23)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))(*v16 + a5);
    a5(v16, v21[0], v21[1], v21[2], v22, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::FrameTextForTesting,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _QWORD v21[2];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>(a2, (uint64_t)v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FCA88;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD **))(*v16 + a5);
    a5(v16, v21[0], v21[1], &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebPageProxy::BindRemoteAccessibilityFrames,WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, uint64_t, uint64_t, WTF **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  WTF *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  int v27;
  unsigned __int8 v28;

  IPC::Decoder::decode<std::tuple<int,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, &v23);
  v11 = v28;
  if (!v28)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34FCAB0;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v28)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, WTF **, _QWORD **))(*v16 + a5);
    a5(v16, v23, v24, v25, &v26, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v28)
    {
      v19 = v26;
      if (v26)
      {
        v26 = 0;
        v27 = 0;
        WTF::fastFree(v19, v17);
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::WebPageProxy::didReceiveSyncMessage(a1 - 16, a2, a3, a4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22FocusFromServiceWorkerEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBED0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22FocusFromServiceWorkerEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBED0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22FocusFromServiceWorkerEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3277;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14ShowShareSheetEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore22ShareDataWithParsedURLEONS_17CompletionHandlerIFvbEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBEF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14ShowShareSheetEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore22ShareDataWithParsedURLEONS_17CompletionHandlerIFvbEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBEF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14ShowShareSheetEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore22ShareDataWithParsedURLEONS_17CompletionHandlerIFvbEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3298;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy17ShowContactPickerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore19ContactsRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSB_11ContactInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBF20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy17ShowContactPickerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore19ContactsRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSB_11ContactInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBF20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy17ShowContactPickerEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKN7WebCore19ContactsRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSB_11ContactInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  id v16;
  IPC::Encoder *v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3296;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v17 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 16))
    {
      v16 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSD_15ResourceRequestEbRKNS_6StringEbNSD_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(v16);
    }
    v8 = *(unsigned int *)(a2 + 12);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v8;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)a2;
      v11 = 48 * v9;
      do
      {
        IPC::ArgumentCoder<WebCore::ContactInfo,void>::encode((IPC::Encoder *)v5, v10);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
  else
  {
    *v7 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSD_15ResourceRequestEbRKNS_6StringEbNSD_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBF48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSD_15ResourceRequestEbRKNS_6StringEbNSD_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBF48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSD_15ResourceRequestEbRKNS_6StringEbNSD_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3274;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit12WebPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBF70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit12WebPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBF70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit12WebPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3272;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30DecidePolicyForNewWindowActionEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataERKNS_6StringEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBF98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30DecidePolicyForNewWindowActionEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataERKNS_6StringEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBF98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30DecidePolicyForNewWindowActionEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataERKNS_6StringEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3273;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::UserData>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v11);
  if (v12)
  {
    IPC::Decoder::decode<WebKit::UserData>(a2, (uint64_t)&v13);
    if (v14)
    {
      if (v12)
      {
        *(_OWORD *)a1 = v11;
        v4 = v13;
        if (v13)
        {
          CFRetain(*(CFTypeRef *)(v13 + 8));
          v5 = v14;
          *(_QWORD *)(a1 + 16) = v4;
          *(_BYTE *)(a1 + 24) = 1;
          if (v5)
          {
            v6 = v13;
            v13 = 0;
            if (v6)
              CFRelease(*(CFTypeRef *)(v6 + 8));
          }
          return;
        }
      }
      else
      {
        __break(1u);
      }
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 1;
      return;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v7 = *a2;
  v8 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9 = a2[3];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14WillSubmitFormEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESI_RKNS_6VectorINSt3__14pairINS_6StringESM_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS7_8UserDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBFC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14WillSubmitFormEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESI_RKNS_6VectorINSt3__14pairINS_6StringESM_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS7_8UserDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBFC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy14WillSubmitFormEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEESI_RKNS_6VectorINSt3__14pairINS_6StringESM_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS7_8UserDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3304;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::InteractionInformationAtPosition>>(_BYTE *a1, unint64_t *a2)
{
  void *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13[40];
  unsigned __int8 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::decode(a2, v13);
  if (v14
    || ((v6 = *a2, v7 = a2[1], *a2 = 0, a2[1] = 0, (v8 = a2[3]) != 0) ? (v9 = v7 == 0) : (v9 = 1),
        !v9 && ((*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v8 + 16))(v8, v6), v14)))
  {
    WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((uint64_t)a1, (uint64_t)v13);
    v5 = v14;
    a1[640] = 1;
    if (!v5)
      return;
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v13, v4);
    if (a1[640])
      return;
  }
  else
  {
    *a1 = 0;
    a1[640] = 0;
  }
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = a2[3];
  if (v12)
  {
    if (v11)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
  }
}

uint64_t std::__tuple_leaf<0ul,WebKit::EditorState,false>::__tuple_leaf[abi:sn180100]<WebKit::EditorState,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 336) = 0;
  if (*((_BYTE *)a2 + 336))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData*>(v5, a2 + 2);
    *(_BYTE *)(a1 + 336) = 1;
  }
  std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](a1 + 352, a2 + 22);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22RequestTextRecognitionEN6WebKit12WebPageProxyES8_FvRKNS_3URLEON7WebCore21ShareableBitmapHandleERKNS_6StringESH_ONS_17CompletionHandlerIFvONSC_21TextRecognitionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FBFE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22RequestTextRecognitionEN6WebKit12WebPageProxyES8_FvRKNS_3URLEON7WebCore21ShareableBitmapHandleERKNS_6StringESH_ONS_17CompletionHandlerIFvONSC_21TextRecognitionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FBFE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22RequestTextRecognitionEN6WebKit12WebPageProxyES8_FvRKNS_3URLEON7WebCore21ShareableBitmapHandleERKNS_6StringESH_ONS_17CompletionHandlerIFvONSC_21TextRecognitionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3294;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::TextRecognitionResult,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy28ShowMediaControlsContextMenuEN6WebKit12WebPageProxyES8_FvON7WebCore9FloatRectEONS_6VectorINS9_28MediaControlsContextMenuItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC010;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy28ShowMediaControlsContextMenuEN6WebKit12WebPageProxyES8_FvON7WebCore9FloatRectEONS_6VectorINS9_28MediaControlsContextMenuItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC010;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy28ShowMediaControlsContextMenuEN6WebKit12WebPageProxyES8_FvON7WebCore9FloatRectEONS_6VectorINS9_28MediaControlsContextMenuItemELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3297;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebPopupItem>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebPopupItem,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPopupItem>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * a1[3];
  *(_BYTE *)v4 = *(_BYTE *)result;
  v5 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_WORD *)(v4 + 16) = *(_WORD *)(result + 16);
  v6 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  v7 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  LOWORD(v7) = *(_WORD *)(result + 40);
  *(_BYTE *)(v4 + 42) = *(_BYTE *)(result + 42);
  *(_WORD *)(v4 + 40) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1977DBB4CLL);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 48 * *((unsigned int *)result + 3));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebKit::WebPopupItem>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebPopupItem>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_BYTE *)a3 = *(_BYTE *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v6;
      *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v7;
      v8 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      LOWORD(v8) = *((_WORD *)v5 + 20);
      *(_BYTE *)(a3 + 42) = *((_BYTE *)v5 + 42);
      *(_WORD *)(a3 + 40) = v8;
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29EnumerateMediaDevicesForFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNSB_18SecurityOriginDataESL_ONS_17CompletionHandlerIFvRKNS_6VectorINSB_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSB_20MediaDeviceHashSaltsEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_SV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC038;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29EnumerateMediaDevicesForFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNSB_18SecurityOriginDataESL_ONS_17CompletionHandlerIFvRKNS_6VectorINSB_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSB_20MediaDeviceHashSaltsEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_SV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC038;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29EnumerateMediaDevicesForFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNSB_18SecurityOriginDataESL_ONS_17CompletionHandlerIFvRKNS_6VectorINSB_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSB_20MediaDeviceHashSaltsEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_SV_EE4callEST_SV_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3276;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  v8 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  if (v9)
  {
    v10 = *(_QWORD *)a2;
    v11 = v10 + 232 * v9;
    do
    {
      IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode((IPC::Encoder *)v7, v10);
      IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode((IPC::Encoder *)v7, (int *)(v10 + 40));
      v10 += 232;
    }
    while (v10 != v11);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3 + 1);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29RequestNotificationPermissionEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC060;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29RequestNotificationPermissionEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC060;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29RequestNotificationPermissionEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3292;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::TextIndicatorData,WebCore::TextIndicatorData,WebCore::TextIndicatorData*>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v3 = result;
    v4 = *a2;
    v5 = a2[2];
    *(_OWORD *)(result + 16) = a2[1];
    *(_OWORD *)(result + 32) = v5;
    *(_OWORD *)result = v4;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    v6 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(result + 48) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = 0;
    *(_DWORD *)(result + 56) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = 0;
    *(_DWORD *)(result + 60) = v6;
    *(_DWORD *)(result + 64) = *((_DWORD *)a2 + 16);
    v7 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = 0;
    *(_QWORD *)(result + 72) = v7;
    v8 = *((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = 0;
    *(_QWORD *)(result + 80) = v8;
    v9 = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = 0;
    *(_QWORD *)(result + 88) = v9;
    WebCore::Color::Color();
    *(_DWORD *)(v3 + 104) = *((_DWORD *)a2 + 26);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebKit::FocusedElementInformation,false>::__tuple_leaf[abi:sn180100]<WebKit::FocusedElementInformation,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[10];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  v13 = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  v14 = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = 0;
  *(_QWORD *)(a1 + 200) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = 0;
  *(_DWORD *)(a1 + 208) = v14;
  *(_QWORD *)&v10 = *(_QWORD *)((char *)a2 + 212);
  *((_DWORD *)a2 + 53) = 0;
  *(_QWORD *)(a1 + 212) = v10;
  v15 = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = 0;
  *(_QWORD *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  v16 = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = 0;
  *(_QWORD *)(a1 + 240) = v16;
  *(_WORD *)(a1 + 248) = *((_WORD *)a2 + 124);
  WTF::URL::URL(a1 + 256, (uint64_t *)a2 + 32);
  *(_WORD *)(a1 + 296) = *((_WORD *)a2 + 148);
  v17 = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = 0;
  *(_QWORD *)(a1 + 304) = v17;
  v18 = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = 0;
  *(_QWORD *)(a1 + 312) = v18;
  v19 = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = 0;
  *(_QWORD *)(a1 + 320) = v19;
  *(_WORD *)(a1 + 328) = *((_WORD *)a2 + 164);
  WebCore::Color::Color();
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v20 = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = 0;
  *(_QWORD *)(a1 + 344) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 88);
  *((_DWORD *)a2 + 88) = 0;
  *(_DWORD *)(a1 + 352) = v20;
  LODWORD(v20) = *((_DWORD *)a2 + 89);
  *((_DWORD *)a2 + 89) = 0;
  *(_DWORD *)(a1 + 356) = v20;
  v21 = *(__int128 *)((char *)a2 + 360);
  v22 = *(__int128 *)((char *)a2 + 376);
  v23 = *(__int128 *)((char *)a2 + 392);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_OWORD *)(a1 + 376) = v22;
  *(_OWORD *)(a1 + 392) = v23;
  *(_OWORD *)(a1 + 360) = v21;
  return a1;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v8);
  if (v10)
  {
    *(_OWORD *)a1 = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::ShareableResourceHandle>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebCore::ShareableResourceHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ShareableResourceHandle>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _BYTE v4[24];
  unsigned __int8 v5;

  IPC::Decoder::decode<WebCore::ShareableResourceHandle>(a1, (uint64_t)v4);
  if (v5)
  {
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v4[8];
    v3 = v5;
    *(_BYTE *)(a2 + 24) = 1;
    if (v3)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC088;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC088;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3293;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy27HandleMessageWithAsyncReplyEN6WebKit12WebPageProxyES8_FvRKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC0B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy27HandleMessageWithAsyncReplyEN6WebKit12WebPageProxyES8_FvRKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC0B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy27HandleMessageWithAsyncReplyEN6WebKit12WebPageProxyES8_FvRKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSC_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3278;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy43ShouldAllowDeviceOrientationAndMotionAccessEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEbONS_17CompletionHandlerIFvNSB_40DeviceOrientationOrMotionPermissionStateEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC0D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy43ShouldAllowDeviceOrientationAndMotionAccessEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEbONS_17CompletionHandlerIFvNSB_40DeviceOrientationOrMotionPermissionStateEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC0D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy43ShouldAllowDeviceOrientationAndMotionAccessEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEbONS_17CompletionHandlerIFvNSB_40DeviceOrientationOrMotionPermissionStateEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3295;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30AddTextAnimationForAnimationIDEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_4UUIDERKNS7_17TextAnimationDataERKN7WebCore17TextIndicatorDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC100;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30AddTextAnimationForAnimationIDEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_4UUIDERKNS7_17TextAnimationDataERKN7WebCore17TextIndicatorDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC100;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30AddTextAnimationForAnimationIDEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_4UUIDERKNS7_17TextAnimationDataERKN7WebCore17TextIndicatorDataEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3270;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisSpeakEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_fffNS_13MonotonicTimeESB_SB_SB_bbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC128;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisSpeakEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_fffNS_13MonotonicTimeESB_SB_SB_bbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC128;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisSpeakEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_fffNS_13MonotonicTimeESB_SB_SB_bbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3302;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy34SpeechSynthesisSetFinishedCallbackEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC150;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy34SpeechSynthesisSetFinishedCallbackEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC150;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy34SpeechSynthesisSetFinishedCallbackEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3301;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisPauseEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC178;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisPauseEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC178;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20SpeechSynthesisPauseEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3299;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21SpeechSynthesisResumeEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC1A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21SpeechSynthesisResumeEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC1A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21SpeechSynthesisResumeEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3300;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebKit::ModelIdentifier>(&v8, a2);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::ModelIdentifier>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::ModelIdentifier,void>::decode(a2, a1);
  if (!a1[16])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  char v19;

  result = IPC::Decoder::decode<WebKit::ModelIdentifier>(&v18, a2);
  if (v19)
  {
    v5 = a2[1];
    v6 = *a2;
    v7 = a2[2] - *a2;
    if (v5 <= v7)
    {
      v10 = 0;
      v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          v11 = *a2;
          v10 = a2[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
      }
    }
    else
    {
      v8 = (unsigned __int8 *)(v6 + v7);
      a2[2] = (uint64_t)(v8 + 1);
      if (v6)
      {
        v9 = *v8;
        if (v9 < 2)
        {
          *(_OWORD *)a1 = v18;
          *(_BYTE *)(a1 + 16) = v9 != 0;
          *(_BYTE *)(a1 + 24) = 1;
          return result;
        }
        goto LABEL_8;
      }
      v10 = v5;
      v11 = 0;
    }
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v6 = *a2;
        v5 = a2[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v6);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementGetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC1C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementGetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC1C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementGetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIN7WebCore22HTMLModelElementCameraENSE_13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3281;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  v6 = *((_DWORD *)a2 + 20);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*((_DWORD *)a2 + 20) == 1)
    {
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v5, a2);
      goto LABEL_6;
    }
LABEL_9:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v12);
  }
  *v7 = 1;
  if (*((_DWORD *)a2 + 20))
    goto LABEL_9;
  IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC1F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC1F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy21ModelElementSetCameraEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEN7WebCore22HTMLModelElementCameraEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3288;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsPlayingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC218;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsPlayingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC218;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsPlayingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3285;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, WebCore::ResourceError *a2)
{
  int v4;
  char *v5;
  char v6;
  uint64_t v7;

  v4 = *((_DWORD *)a2 + 20);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*((_DWORD *)a2 + 20) == 1)
    {
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, a2);
      return;
    }
  }
  else
  {
    *v5 = 1;
    if (!*((_DWORD *)a2 + 20))
    {
      v6 = *(_BYTE *)a2;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      return;
    }
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v7);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC240;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC240;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetAnimationIsPlayingEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3287;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC268;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC268;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy30ModelElementIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3283;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC290;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC290;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy33ModelElementSetIsLoopingAnimationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3289;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29ModelElementAnimationDurationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC2B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29ModelElementAnimationDurationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC2B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy29ModelElementAnimationDurationEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3280;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy32ModelElementAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC2E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy32ModelElementAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC2E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy32ModelElementAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3279;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy35ModelElementSetAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierENS_7SecondsEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC308;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy35ModelElementSetAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierENS_7SecondsEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC308;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy35ModelElementSetAnimationCurrentTimeEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierENS_7SecondsEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3286;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20ModelElementHasAudioEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC330;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20ModelElementHasAudioEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC330;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20ModelElementHasAudioEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3282;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy19ModelElementIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC358;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy19ModelElementIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC358;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy19ModelElementIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIbN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3284;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22ModelElementSetIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC380;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22ModelElementSetIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC380;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy22ModelElementSetIsMutedEN6WebKit12WebPageProxyES8_FvNS7_15ModelIdentifierEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3290;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy25StartApplePayAMSUISessionEN6WebKit12WebPageProxyES8_FvONS_3URLEON7WebCore20ApplePayAMSUIRequestEONS_17CompletionHandlerIFvONSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC3A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy25StartApplePayAMSUISessionEN6WebKit12WebPageProxyES8_FvONS_3URLEON7WebCore20ApplePayAMSUIRequestEONS_17CompletionHandlerIFvONSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC3A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy25StartApplePayAMSUISessionEN6WebKit12WebPageProxyES8_FvONS_3URLEON7WebCore20ApplePayAMSUIRequestEONS_17CompletionHandlerIFvONSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3303;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy18BeginSystemPreviewEN6WebKit12WebPageProxyES8_FvRKNS_3URLERKN7WebCore18SecurityOriginDataERKNSC_17SystemPreviewInfoEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC3D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy18BeginSystemPreviewEN6WebKit12WebPageProxyES8_FvRKNS_3URLERKN7WebCore18SecurityOriginDataERKNSC_17SystemPreviewInfoEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC3D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy18BeginSystemPreviewEN6WebKit12WebPageProxyES8_FvRKNS_3URLERKN7WebCore18SecurityOriginDataERKNSC_17SystemPreviewInfoEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3271;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20RequestCookieConsentEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvN7WebCore27CookieConsentDecisionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC3F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20RequestCookieConsentEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvN7WebCore27CookieConsentDecisionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC3F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy20RequestCookieConsentEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvN7WebCore27CookieConsentDecisionResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3291;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy24DocumentURLForConsoleLogEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS_3URLEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC420;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy24DocumentURLForConsoleLogEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS_3URLEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FC420;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy24DocumentURLForConsoleLogEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS_3URLEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3275;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13CreateNewPageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEON7WebCore14WindowFeaturesEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSI_INS7_25WebPageCreationParametersEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC448;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13CreateNewPageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEON7WebCore14WindowFeaturesEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSI_INS7_25WebPageCreationParametersEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC448;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13CreateNewPageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEON7WebCore14WindowFeaturesEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSI_INS7_25WebPageCreationParametersEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EE4callESO_SQ_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  IPC::Encoder *v7;
  int v8;
  char *v9;
  id v11;
  uint64_t *v12;
  uint64_t v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v6 = (uint64_t *)(a1 + 8);
  v7 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(v7, v13);
  v8 = *(unsigned __int8 *)(a4 + 1488);
  v9 = IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v8)
  {
    *v9 = 0;
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v6, 0, 0);
  }
  *v9 = 1;
  if (*(_BYTE *)(a4 + 1488))
  {
    IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::encode(v7, a4);
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v6, 0, 0);
  }
  v11 = std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>>((uint64_t)v11, v12);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  _BYTE v13[296];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v9);
  if (!v10)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 320) = 0;
LABEL_13:
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v8)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
    }
    return result;
  }
  IPC::Decoder::decode<WebKit::FrameInfoData>(a2, (uint64_t)v13);
  if (v14)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v11);
    v5 = v12;
    if (v12)
    {
      if (!v10 || !v14)
        __break(1u);
      *(_OWORD *)a1 = v9;
      std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1 + 16, (uint64_t)v13);
      *(_QWORD *)(a1 + 312) = v11;
      v5 = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 320) = v5;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 320) = 0;
  }
  result = std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
  if (!*(_BYTE *)(a1 + 320))
    goto LABEL_13;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18RunJavaScriptAlertEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC470;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18RunJavaScriptAlertEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC470;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18RunJavaScriptAlertEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const void *v6;
  char v8;

  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(WTF::StringImpl **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(unsigned int *)(a1 + 248);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E34FBEB0[v5])(&v8, a1 + 224);
    *(_DWORD *)(a1 + 248) = -1;
    v6 = *(const void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20RunJavaScriptConfirmEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC498;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20RunJavaScriptConfirmEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC498;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20RunJavaScriptConfirmEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19RunJavaScriptPromptEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringESN_ONS_17CompletionHandlerIFvSN_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC4C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19RunJavaScriptPromptEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringESN_ONS_17CompletionHandlerIFvSN_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC4C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19RunJavaScriptPromptEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringESN_ONS_17CompletionHandlerIFvSN_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetToolbarsAreVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC4E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetToolbarsAreVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC4E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetToolbarsAreVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19GetMenuBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC510;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19GetMenuBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC510;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19GetMenuBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetStatusBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC538;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetStatusBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC538;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21GetStatusBarIsVisibleEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy14GetWindowFrameEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvRKN7WebCore9FloatRectEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC560;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy14GetWindowFrameEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvRKN7WebCore9FloatRectEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC560;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy14GetWindowFrameEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvRKN7WebCore9FloatRectEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, int *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16ScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC588;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16ScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC588;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16ScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, _DWORD *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16RootViewToScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC5B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16RootViewToScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC5B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy16RootViewToScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSC_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC5D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC5D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29AccessibilityScreenToRootViewEN6WebKit12WebPageProxyES8_FvRKN7WebCore8IntPointEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = a2;
  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(*(IPC::Encoder **)(a1 + 8), &v4);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC600;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC600;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29RootViewToAccessibilityScreenEN6WebKit12WebPageProxyES8_FvRKN7WebCore7IntRectEONS_17CompletionHandlerIFvSA_EEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(*(IPC::Encoder **)(a1 + 8), v5);
  return IPC::Connection::sendMessageImpl(v3[1], v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC628;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC628;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy10PrintFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringERKNSB_9FloatSizeEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC650;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy10PrintFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringERKNSB_9FloatSizeEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC650;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy10PrintFrameEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringERKNSB_9FloatSizeEONS_17CompletionHandlerIFvvEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC678;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC678;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17InterpretKeyEventEN6WebKit12WebPageProxyES8_FvRKNS7_11EditorStateEbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC6A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17InterpretKeyEventEN6WebKit12WebPageProxyES8_FvRKNS7_11EditorStateEbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC6A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17InterpretKeyEventEN6WebKit12WebPageProxyES8_FvRKNS7_11EditorStateEbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC6C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC6C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  IPC::Encoder *v4;
  int v5;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 8);
  v4 = *(IPC::Encoder **)(a1 + 8);
  v5 = *a2;
  *(_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4) = v5;
  LODWORD(v2) = v2[1];
  *(_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4) = (_DWORD)v2;
  return IPC::Connection::sendMessageImpl(v3[1], v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy22BackForwardItemAtIndexEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEiONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC6F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy22BackForwardItemAtIndexEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEiONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC6F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy22BackForwardItemAtIndexEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEiONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  int v6;
  char *v7;
  id v9;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 0;
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  *v7 = 1;
  if (*(_BYTE *)(a2 + 16))
  {
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v5, (uint64_t *)a2);
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v9 = std::__throw_bad_optional_access[abi:sn180100]();
  return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v9);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy27BackForwardListContainsItemEN6WebKit12WebPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21BackForwardListCountsEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC740;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21BackForwardListCountsEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC740;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21BackForwardListCountsEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  IPC::Encoder *v4;
  int v5;

  v2 = a2;
  v3 = (uint64_t *)(a1 + 8);
  v4 = *(IPC::Encoder **)(a1 + 8);
  v5 = *a2;
  *(_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4) = v5;
  LODWORD(v2) = v2[1];
  *(_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4) = (_DWORD)v2;
  return IPC::Connection::sendMessageImpl(v3[1], v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy11CanUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC768;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy11CanUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC768;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy11CanUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15ExecuteUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC790;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15ExecuteUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC790;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15ExecuteUndoRedoEN6WebKit12WebPageProxyES8_FvNS7_10UndoOrRedoEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21RequestDOMPasteAccessEN6WebKit12WebPageProxyES8_FvN7WebCore22DOMPasteAccessCategoryENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS9_7IntRectERKNS_6StringEONS_17CompletionHandlerIFvNS9_22DOMPasteAccessResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC7B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21RequestDOMPasteAccessEN6WebKit12WebPageProxyES8_FvN7WebCore22DOMPasteAccessCategoryENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS9_7IntRectERKNS_6StringEONS_17CompletionHandlerIFvNS9_22DOMPasteAccessResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC7B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21RequestDOMPasteAccessEN6WebKit12WebPageProxyES8_FvN7WebCore22DOMPasteAccessCategoryENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS9_7IntRectERKNS_6StringEONS_17CompletionHandlerIFvNS9_22DOMPasteAccessResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebPageProxy,WebKit::WebPageProxy,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(unsigned long long)> &&),std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,void ()(unsigned long long)>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD *, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  _QWORD *v6;

  v5 = a2;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*v6 + a2);
  return v5(v6, *a4, a4[1], a4 + 2, a4 + 3, a4 + 4, a4[5], a4[6], a4[7], a4[8], a5);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  _BYTE v5[24];

  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[72] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v33);
  if (!v34)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 72) = 0;
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v35);
  if (v36)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v37);
    if (!v38)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 72) = 0;
LABEL_37:
      if (v36)
      {
        result = v35;
        v35 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
          else
            *(_DWORD *)result -= 2;
        }
      }
      goto LABEL_42;
    }
    v8 = a1[1];
    v7 = (WTF::StringImpl *)*a1;
    v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v8 >= v9 && v8 - v9 > 7)
    {
      v11 = (uint64_t *)((char *)v7 + v9);
      a1[2] = (uint64_t)(v11 + 1);
      if (!v7)
      {
        v30 = v8;
        v31 = 0;
LABEL_55:
        *a1 = 0;
        a1[1] = 0;
        result = (WTF::StringImpl *)a1[3];
        if (result && v30)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v31, v30);
LABEL_56:
        v28 = 0;
        *(_BYTE *)a3 = 0;
        goto LABEL_29;
      }
      v12 = (((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v7;
      if (v8 < v12 || v8 - v12 <= 7)
        goto LABEL_48;
      v14 = *v11;
      a1[2] = (uint64_t)v7 + v12 + 8;
      v16 = (uint64_t)v7 + v12 + 15;
      v15 = *(_QWORD *)((char *)v7 + v12);
      v17 = (v16 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v7;
      v18 = v8 >= v17 && v8 - v17 > 7;
      if (!v18
        || ((a1[2] = (uint64_t)v7 + v17 + 8,
             v20 = (uint64_t)v7 + v17 + 15,
             v19 = *(_QWORD *)((char *)v7 + v17),
             v21 = (v20 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v7,
             v8 >= v21)
          ? (v22 = v8 - v21 > 7)
          : (v22 = 0),
            !v22))
      {
LABEL_48:
        *a1 = 0;
        a1[1] = 0;
        result = (WTF::StringImpl *)a1[3];
        if (result)
        {
          if (v8)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
            v7 = (WTF::StringImpl *)*a1;
            v29 = a1[1];
            result = (WTF::StringImpl *)a1[3];
            *a1 = 0;
            a1[1] = 0;
            if (result)
            {
              if (v29)
                result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v7);
            }
          }
        }
        goto LABEL_56;
      }
      v24 = (uint64_t)v7 + v21 + 8;
      v23 = *(_QWORD *)((char *)v7 + v21);
      a1[2] = v24;
      if (*(_BYTE *)(a2 + 16) && v34 && v36)
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        v25 = v33;
        v33 = 0;
        v26 = v35;
        v35 = 0;
        *(_QWORD *)(a3 + 16) = v25;
        *(_QWORD *)(a3 + 24) = v26;
        v27 = v37;
        v37 = 0;
        *(_QWORD *)(a3 + 32) = v27;
        *(_QWORD *)(a3 + 40) = v14;
        *(_QWORD *)(a3 + 48) = v15;
        *(_QWORD *)(a3 + 56) = v19;
        v28 = 1;
        *(_QWORD *)(a3 + 64) = v23;
LABEL_29:
        *(_BYTE *)(a3 + 72) = v28;
        if (v38)
        {
          result = v37;
          v37 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_37;
      }
      __break(1u);
    }
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_55;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 72) = 0;
LABEL_42:
  if (v34)
  {
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21ExceededDatabaseQuotaEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESJ_SJ_yyyyONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC7E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21ExceededDatabaseQuotaEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESJ_SJ_yyyyONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC7E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21ExceededDatabaseQuotaEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_6StringESJ_SJ_yyyyONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckTextOfParagraphEN6WebKit12WebPageProxyES8_FvRKNS_6StringENS_9OptionSetIN7WebCore16TextCheckingTypeEEEiONS_17CompletionHandlerIFvONS_6VectorINSD_18TextCheckingResultELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC808;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckTextOfParagraphEN6WebKit12WebPageProxyES8_FvRKNS_6StringENS_9OptionSetIN7WebCore16TextCheckingTypeEEEiONS_17CompletionHandlerIFvONS_6VectorINSD_18TextCheckingResultELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC808;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckTextOfParagraphEN6WebKit12WebPageProxyES8_FvRKNS_6StringENS_9OptionSetIN7WebCore16TextCheckingTypeEEEiONS_17CompletionHandlerIFvONS_6VectorINSD_18TextCheckingResultELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 48 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::encode(v5, v8);
      v8 += 48;
      v9 -= 48;
    }
    while (v9);
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21CheckSpellingOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFviiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJiiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC830;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21CheckSpellingOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFviiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJiiEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC830;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21CheckSpellingOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFviiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJiiEE4callEii(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  *(_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4) = a2;
  *(_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4) = a3;
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckGrammarOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore13GrammarDetailELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEiiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_iiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC858;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckGrammarOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore13GrammarDetailELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEiiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_iiEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC858;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy20CheckGrammarOfStringEN6WebKit12WebPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore13GrammarDetailELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEiiEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_iiEE4callESJ_ii(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t *v8;
  IPC::Encoder *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = (uint64_t *)(a1 + 8);
  v9 = *(IPC::Encoder **)(a1 + 8);
  v10 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(v9, 8uLL, 8) = v10;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)a2;
    v13 = 40 * v11;
    do
    {
      IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode(v9, v12);
      v12 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  *(_DWORD *)IPC::Encoder::grow(v9, 4uLL, 4) = a3;
  *(_DWORD *)IPC::Encoder::grow(v9, 4uLL, 4) = a4;
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v8, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19SpellingUIIsShowingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC880;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19SpellingUIIsShowingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC880;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19SpellingUIIsShowingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17GetGuessesForWordEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_iONS_17CompletionHandlerIFvONS_6VectorIS9_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC8A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17GetGuessesForWordEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_iONS_17CompletionHandlerIFvONS_6VectorIS9_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC8A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy17GetGuessesForWordEN6WebKit12WebPageProxyES8_FvRKNS_6StringESB_iONS_17CompletionHandlerIFvONS_6VectorIS9_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29ExecuteSavedCommandBySelectorEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC8D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29ExecuteSavedCommandBySelectorEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC8D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29ExecuteSavedCommandBySelectorEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13GetIsSpeakingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC8F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13GetIsSpeakingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC8F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13GetIsSpeakingEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21DictationAlternativesEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC920;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21DictationAlternativesEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC920;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy21DictationAlternativesEN6WebKit12WebPageProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore20DictationContextTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18LoadRecentSearchesEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore12RecentSearchELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC948;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18LoadRecentSearchesEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore12RecentSearchELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC948;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy18LoadRecentSearchesEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore12RecentSearchELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = &v8[2 * v7];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v5, v8);
      v10 = v8[1];
      *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v10;
      v8 += 2;
    }
    while (v8 != v9);
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  _QWORD v5[2];
  char v6;

  result = IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5);
  v4 = v6;
  if (v6)
  {
    *(_QWORD *)a2 = v5[0];
    *(_QWORD *)(a2 + 8) = v5[1];
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13WrapCryptoKeyEN6WebKit12WebPageProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC970;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13WrapCryptoKeyEN6WebKit12WebPageProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC970;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy13WrapCryptoKeyEN6WebKit12WebPageProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

WTF *IPC::Decoder::decode<std::tuple<WebCore::WrappedCryptoKey>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::WrappedCryptoKey>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WebCore::WrappedCryptoKey>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::WrappedCryptoKey>(a1, (uint64_t)&v6);
  v4 = v11;
  if (v11)
  {
    *(_OWORD *)a2 = v6;
    v5 = v8;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 40) = v10;
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 56) = v4;
  return result;
}

WTF *IPC::Decoder::decode<WebCore::WrappedCryptoKey>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15UnwrapCryptoKeyEN6WebKit12WebPageProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC998;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15UnwrapCryptoKeyEN6WebKit12WebPageProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC998;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy15UnwrapCryptoKeyEN6WebKit12WebPageProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24HandleSynchronousMessageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC9C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24HandleSynchronousMessageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC9C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24HandleSynchronousMessageEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_23URLSchemeTaskParametersEONS_17CompletionHandlerIFvRKN7WebCore16ResourceResponseERKNSE_13ResourceErrorEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_SP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FC9E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_23URLSchemeTaskParametersEONS_17CompletionHandlerIFvRKN7WebCore16ResourceResponseERKNSE_13ResourceErrorEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_SP_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FC9E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEN6WebKit12WebPageProxyES8_FvRNS2_10ConnectionEONS7_23URLSchemeTaskParametersEONS_17CompletionHandlerIFvRKN7WebCore16ResourceResponseERKNSE_13ResourceErrorEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_SP_EE4callESH_SK_SP_(uint64_t a1, WebCore::ResourceResponseBase *a2, WebCore::ResourceError *a3, uint64_t a4)
{
  uint64_t *v6;
  IPC::Encoder *v7;

  v6 = (uint64_t *)(a1 + 8);
  v7 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v7, a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v7, a3);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v7, *(const void **)a4, *(unsigned int *)(a4 + 12));
  return IPC::Connection::sendMessageImpl(v6[1], v6, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEN6WebKit12WebPageProxyES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IN7WebCore24SerializedAttachmentDataELm0ESB_Lm16ESC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCA10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEN6WebKit12WebPageProxyES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IN7WebCore24SerializedAttachmentDataELm0ESB_Lm16ESC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCA10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEN6WebKit12WebPageProxyES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IN7WebCore24SerializedAttachmentDataELm0ESB_Lm16ESC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 24 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::encode(v5, v8);
      v8 += 24;
      v9 -= 24;
    }
    while (v9);
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_23WebSpeechSynthesisVoiceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCA38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_23WebSpeechSynthesisVoiceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCA38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEN6WebKit12WebPageProxyES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_23WebSpeechSynthesisVoiceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = 32 * v7;
    do
    {
      IPC::ArgumentCoder<WebKit::WebSpeechSynthesisVoice,void>::encode(v5, v8);
      v8 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCA60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCA60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEmNS_9OptionSetINS9_16RenderAsTextFlagEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19FrameTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCA88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19FrameTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCA88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19FrameTextForTestingEN6WebKit12WebPageProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEN6WebKit12WebPageProxyES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSK_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_iEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCAB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEN6WebKit12WebPageProxyES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSK_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_iEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCAB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEN6WebKit12WebPageProxyES8_FviN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvSK_iEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_iEE4callESK_i(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  *(_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4) = a3;
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

void WebKit::WebPageTesting::didReceiveMessage(WebKit::WebPageTesting *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  BOOL v13[8];
  char v14;
  _QWORD *v15;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x82E:
      WebKit::WebPageTesting::clearNotificationPermissionState(this);
      break;
    case 0x82F:
      WebKit::WebPageTesting::clearWheelEventTestMonitor(this);
      break;
    case 0x830:
      v5 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v6)
      {
        v12 = v5;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v13, a2);
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v7 = off_1E34FCAD8;
        v7[1] = v12;
        v8 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        v7[2] = v8;
        v15 = v7;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
        WebKit::WebPageTesting::isLayerTreeFrozen((uint64_t)this, (uint64_t *)&v15);
        v9 = (uint64_t)v15;
        v15 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      break;
    case 0x831:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebKit::WebPageTesting::setDefersLoading(this);
      break;
    case 0x832:
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((uint64_t *)a3, &v12);
      if (v14)
      {
        WebKit::WebPageTesting::setPermissionLevel(this, &v12, v13[0]);
        if (v14)
        {
          v11 = v12;
          v12 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
      }
      break;
    default:
      return;
  }
}

BOOL WebKit::WebPageTesting::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  _BOOL8 v7;
  IPC::Encoder *v8;
  _QWORD *v9;
  unsigned __int8 **v10;
  _BOOL8 result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;
  WTF::StringImpl *v18;
  char v19;

  if (*(_WORD *)(a3 + 50) != 3691)
    return 0;
  IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v18);
  v7 = v19 != 0;
  if (!v19)
    return v7;
  v8 = *a4;
  *a4 = 0;
  v15 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a2);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E34FCB00;
  v9[1] = v15;
  v10 = v16[0];
  v16[0] = 0;
  v9[2] = v10;
  v17 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  result = 0;
  if (v19)
  {
    WebKit::WebPageTesting::isEditingCommandEnabled(a1, (const WTF::String *)&v18, (uint64_t *)&v17);
    v13 = (uint64_t)v17;
    v17 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v19)
    {
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting17IsLayerTreeFrozenEN6WebKit14WebPageTestingES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCAD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting17IsLayerTreeFrozenEN6WebKit14WebPageTestingES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FCAD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebPageTesting17IsLayerTreeFrozenEN6WebKit14WebPageTestingES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3305;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebPageTesting23IsEditingCommandEnabledEN6WebKit14WebPageTestingES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCB00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebPageTesting23IsEditingCommandEnabledEN6WebKit14WebPageTestingES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCB00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebPageTesting23IsEditingCommandEnabledEN6WebKit14WebPageTestingES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

void WebKit::WebPasteboardProxy::didReceiveMessage(WebKit::WebPasteboardProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  void *v6;
  int v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  WTF::StringImpl *v53;
  __int128 v54;
  WTF::StringImpl *v55;
  __int128 v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  char v68;
  WTF::StringImpl *v69;
  char v70;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x9CF:
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, a2, (uint64_t)&v67);
      if (!v68)
      {
        v9 = 0;
        LOBYTE(v49) = 0;
        v50[24] = 0;
        goto LABEL_27;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v69);
      if (v70)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v58);
        if ((_BYTE)v59)
        {
          if (!v68 || !v70)
            goto LABEL_82;
          v7 = 0;
          v8 = *((_QWORD *)&v67 + 1);
          *(_QWORD *)&v49 = v67;
          v67 = 0uLL;
          *((_QWORD *)&v49 + 1) = v8;
          *(_QWORD *)v50 = v69;
          *(_OWORD *)&v50[8] = v58;
          v9 = 1;
          v50[24] = 1;
LABEL_71:
          if (v68)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v6);
          if (!v7)
          {
LABEL_74:
            if (v9)
            {
              WebKit::WebPasteboardProxy::updateSupportedTypeIdentifiers((uint64_t)this, (uint64_t)&v49, (uint64_t)v50);
              if (v50[24])
              {
                v36 = *(WTF::StringImpl **)v50;
                *(_QWORD *)v50 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, v35);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v35);
              }
            }
            return;
          }
LABEL_27:
          v25 = *(_QWORD *)a3;
          v26 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v27 = *((_QWORD *)a3 + 3);
          if (v27 && v26)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
          goto LABEL_74;
        }
        LOBYTE(v49) = 0;
        v50[24] = 0;
        if (v70)
        {
          v32 = v69;
          v69 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 != 2)
            {
              v9 = 0;
              *(_DWORD *)v32 -= 2;
              goto LABEL_70;
            }
            WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v6);
          }
        }
        v9 = 0;
        goto LABEL_70;
      }
      v9 = 0;
      LOBYTE(v49) = 0;
      v50[24] = 0;
LABEL_70:
      v7 = 1;
      goto LABEL_71;
    case 0x9D0:
      IPC::ArgumentCoder<WebCore::PasteboardImage,void>::decode(a3, (uint64_t)&v58);
      if (!v66)
        goto LABEL_83;
      goto LABEL_9;
    case 0x9D1:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v49, (uint64_t *)a3);
      if (v50[24])
        WebKit::WebPasteboardProxy::writeStringToPasteboard(this, a2, (uint64_t)&v49, (uint64_t)&v49 + 8, (uint64_t *)v50, *(uint64_t *)&v50[8], v50[16]);
      std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v16);
      return;
    case 0x9D2:
      IPC::Decoder::decode<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v49, (uint64_t *)a3);
      if (BYTE8(v52))
        WebKit::WebPasteboardProxy::writeURLToPasteboard(this, a2, (uint64_t)&v49, (uint64_t *)&v51, *((uint64_t *)&v51 + 1), v52);
      std::__optional_destruct_base<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49, v17);
      return;
    case 0x9D3:
      IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::decode((uint64_t *)a3, (uint64_t)&v58);
      if (!(_BYTE)v63)
      {
        v43 = *(_QWORD *)a3;
        v44 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v45 = *((_QWORD *)a3 + 3);
        if (!v45 || !v44 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43), !(_BYTE)v63))
        {
          v24 = 0;
          LOBYTE(v49) = 0;
          LOBYTE(v55) = 0;
LABEL_89:
          v46 = *(_QWORD *)a3;
          v47 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v48 = *((_QWORD *)a3 + 3);
          if (v48 && v47)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
LABEL_61:
          if (v24)
          {
            WebKit::WebPasteboardProxy::writeWebContentToPasteboard(this, a2, (uint64_t)&v49, (uint64_t *)&v53, v54, SBYTE8(v54));
            if ((_BYTE)v55)
            {
              v34 = v53;
              v53 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, v33);
                else
                  *(_DWORD *)v34 -= 2;
              }
              WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v49, v33);
            }
          }
          return;
        }
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v69);
      if (!v70)
      {
        v24 = 0;
        LOBYTE(v49) = 0;
        LOBYTE(v55) = 0;
LABEL_57:
        v19 = 1;
LABEL_58:
        if ((_BYTE)v63)
          WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v58, v18);
        if (!v19)
          goto LABEL_61;
        goto LABEL_89;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v67);
      if (!v68)
      {
        LOBYTE(v49) = 0;
        LOBYTE(v55) = 0;
        if (v70)
        {
          v29 = v69;
          v69 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 != 2)
            {
              v24 = 0;
              *(_DWORD *)v29 -= 2;
              goto LABEL_57;
            }
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v18);
          }
        }
        v24 = 0;
        goto LABEL_57;
      }
      if ((_BYTE)v63 && v70)
      {
        v19 = 0;
        *(_QWORD *)&v49 = v58;
        BYTE8(v49) = BYTE8(v58);
        *(_QWORD *)&v52 = v62;
        v53 = v69;
        *(_QWORD *)&v58 = 0;
        v20 = v59;
        v21 = v60;
        v59 = 0u;
        v60 = 0u;
        *(_OWORD *)v50 = v20;
        *(_OWORD *)&v50[16] = v21;
        v22 = v61;
        v61 = 0u;
        v51 = v22;
        v23 = *((_QWORD *)&v62 + 1);
        v62 = 0uLL;
        *((_QWORD *)&v52 + 1) = v23;
        v54 = v67;
        v24 = 1;
        LOBYTE(v55) = 1;
        goto LABEL_58;
      }
      while (1)
      {
LABEL_82:
        __break(1u);
LABEL_83:
        v37 = *(_QWORD *)a3;
        v38 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v39 = *((_QWORD *)a3 + 3);
        if (!v39)
          goto LABEL_84;
        if (!v38)
          goto LABEL_84;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
        if (!v66)
          goto LABEL_84;
LABEL_9:
        IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v69);
        if (!v70)
        {
          v15 = 0;
          LOBYTE(v49) = 0;
          v57 = 0;
          goto LABEL_42;
        }
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v67);
        if (!v68)
          break;
        if (v66 && v70)
        {
          v11 = v58;
          v58 = 0u;
          v49 = v11;
          *(_OWORD *)v50 = v59;
          LODWORD(v59) = v59 & 0xFFFFFFFE;
          *(_OWORD *)&v50[16] = v60;
          v51 = v61;
          v12 = v62;
          v61 = 0u;
          v62 = 0u;
          v52 = v12;
          v53 = v63;
          v13 = v64;
          v63 = 0;
          v64 = 0;
          *(_QWORD *)&v54 = v13;
          *((_QWORD *)&v54 + 1) = v65;
          v14 = v69;
          v69 = 0;
          v55 = v14;
          v56 = v67;
          v15 = 1;
          v57 = 1;
          goto LABEL_34;
        }
      }
      v15 = 0;
      LOBYTE(v49) = 0;
      v57 = 0;
      if (!v70)
        goto LABEL_42;
LABEL_34:
      v28 = v69;
      v69 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v10);
        else
          *(_DWORD *)v28 -= 2;
      }
LABEL_42:
      if (v66)
        WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v58, v10);
      if (!v15)
      {
LABEL_84:
        v40 = *(_QWORD *)a3;
        v41 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v42 = *((_QWORD *)a3 + 3);
        if (v42 && v41)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40);
        return;
      }
      WebKit::WebPasteboardProxy::writeImageToPasteboard(this, a2, (uint64_t)&v49, (uint64_t *)&v55, v56, SBYTE8(v56));
      if (v57)
      {
        v31 = v55;
        v55 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
        WebCore::PasteboardImage::~PasteboardImage((WebCore::PasteboardImage *)&v49, v30);
      }
      return;
    default:
      return;
  }
}

uint64_t WebKit::WebPasteboardProxy::didReceiveSyncMessage(WebKit::WebPasteboardProxy *a1, unsigned __int8 **a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  void *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  unint64_t v28;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  void *v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  void *v55;
  IPC::Encoder *v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  void *v62;
  IPC::Encoder *v63;
  WTF *v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  int v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  void *v79;
  IPC::Encoder *v80;
  WTF *v81;
  void *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  void *v86;
  IPC::Encoder *v87;
  WTF *v88;
  void *v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  void *v97;
  IPC::Encoder *v98;
  WTF *v99;
  void *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  void *v104;
  IPC::Encoder *v105;
  WTF *v106;
  void *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  unint64_t v112;
  WTF::StringImpl **v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  void *v120;
  IPC::Encoder *v121;
  WTF *v122;
  void *v123;
  void *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  void *v130;
  IPC::Encoder *v131;
  WTF *v132;
  void *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  void *v138;
  IPC::Encoder *v139;
  WTF *v140;
  void *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  void *v145;
  IPC::Encoder *v146;
  WTF *v147;
  void *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  void *v153;
  IPC::Encoder *v154;
  WTF *v155;
  void *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  void *v160;
  IPC::Encoder *v161;
  WTF *v162;
  void *v163;
  void *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  void *v171;
  IPC::Encoder *v172;
  WTF *v173;
  void *v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  void *v178;
  IPC::Encoder *v179;
  WTF *v180;
  void *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  void *v188;
  IPC::Encoder *v189;
  WTF *v190;
  void *v191;
  WTF::StringImpl *v192;
  void *v193;
  char v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  void *v199;
  IPC::Encoder *v200;
  WTF *v201;
  void *v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  void *v211;
  IPC::Encoder *v212;
  WTF *v213;
  void *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  void *v228;
  IPC::Encoder *v229;
  WTF *v230;
  void *v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  WTF::StringImpl *v234;
  uint64_t v235;
  void *v236;
  IPC::Encoder *v237;
  WTF *v238;
  void *v239;
  WTF::StringImpl *v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  void *v247;
  IPC::Encoder *v248;
  WTF *v249;
  void *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  unsigned int *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  void *v260;
  IPC::Encoder *v261;
  WTF *v262;
  void *v263;
  WTF::StringImpl *v264;
  unsigned int *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  WTF::StringImpl *v270;
  uint64_t v271;
  void *v272;
  IPC::Encoder *v273;
  WTF *v274;
  void *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  WTF::StringImpl *v290;
  uint64_t v291;
  void *v292;
  IPC::Encoder *v293;
  WTF *v294;
  void *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  WTF::StringImpl *v306;
  uint64_t v307;
  uint64_t v308;
  BOOL v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  WTF::StringImpl *v317[2];
  unsigned __int8 v318;
  WTF::StringImpl *v319[2];
  _BYTE v320[32];
  uint64_t v321[2];
  uint64_t v322;
  unsigned __int8 v323;
  WTF::StringImpl *v324;
  unsigned __int8 v325;
  WTF::StringImpl *v326;
  unsigned __int8 v327;
  __int128 v328;
  char v329;

  v5 = a3;
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE76:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[24] != 0;
      if (!v320[24])
        goto LABEL_129;
      v9 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v10 = off_1E34FCDF8;
      *((_QWORD *)v10 + 1) = v328;
      v11 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v10 + 2) = v11;
      v317[0] = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v14 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      v17 = v320[24];
      if (!v320[24])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::addPasteboardTypes(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t *)&v319[1], *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
      goto LABEL_127;
    case 0xE77:
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v317);
      if (!LOBYTE(v317[1]))
        goto LABEL_387;
      v109 = (WTF::StringImpl *)IPC::Decoder::decode<long long>((uint64_t *)v5);
      if ((_BYTE)v108)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
        if (v329)
        {
          v17 = LOBYTE(v317[1]);
          if (!LOBYTE(v317[1]))
            goto LABEL_338;
          v110 = v317[0];
          v317[0] = 0;
          v319[0] = v110;
          v319[1] = v109;
          *(_OWORD *)v320 = v328;
          v111 = 1;
        }
        else
        {
          v111 = 0;
          LOBYTE(v319[0]) = 0;
        }
        v320[16] = v111;
      }
      else
      {
        v111 = 0;
        LOBYTE(v319[0]) = 0;
        v320[16] = 0;
      }
      if (LOBYTE(v317[1]))
      {
        v222 = v317[0];
        v317[0] = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2)
            WTF::StringImpl::destroy(v222, v108);
          else
            *(_DWORD *)v222 -= 2;
        }
      }
      if (!v111)
        goto LABEL_387;
      v225 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v225;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v226 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v226 = off_1E34FCB78;
      *((_QWORD *)v226 + 1) = v328;
      v227 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v226 + 2) = v227;
      v317[0] = v226;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v229 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v229)
      {
        IPC::Encoder::~Encoder(v229, v228);
        WTF::fastFree(v230, v231);
      }
      WebKit::WebPasteboardProxy::allPasteboardItemInfo(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t)v109, *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      v232 = v317[0];
      v317[0] = 0;
      if (v232)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v232 + 8))(v232);
      if (!v320[16])
        return 1;
      goto LABEL_297;
    case 0xE78:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[16] != 0;
      if (!v320[16])
        goto LABEL_182;
      v83 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v83;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v84 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v84 = off_1E34FCC68;
      *((_QWORD *)v84 + 1) = v328;
      v85 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v84 + 2) = v85;
      v317[0] = v84;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v87 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v87)
      {
        IPC::Encoder::~Encoder(v87, v86);
        WTF::fastFree(v88, v89);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(a1, (IPC::Connection *)a2, (uint64_t)v319, &v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      goto LABEL_180;
    case 0xE79:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v94 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v94;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v95 = off_1E34FCEE8;
      *((_QWORD *)v95 + 1) = v328;
      v96 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v95 + 2) = v96;
      v317[0] = v95;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v98 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v98)
      {
        IPC::Encoder::~Encoder(v98, v97);
        WTF::fastFree(v99, v100);
      }
      WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
      goto LABEL_155;
    case 0xE7A:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v44 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v44;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v45 = off_1E34FCC90;
      *((_QWORD *)v45 + 1) = v328;
      v46 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v45 + 2) = v46;
      v317[0] = v45;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v48 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v48)
      {
        IPC::Encoder::~Encoder(v48, v47);
        WTF::fastFree(v49, v50);
      }
      WebKit::WebPasteboardProxy::getNumberOfFiles(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
      goto LABEL_155;
    case 0xE7B:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[16] != 0;
      if (!v320[16])
        goto LABEL_182;
      v135 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v135;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v136 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v136 = off_1E34FCD58;
      *((_QWORD *)v136 + 1) = v328;
      v137 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v136 + 2) = v137;
      v317[0] = v136;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v139 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v139)
      {
        IPC::Encoder::~Encoder(v139, v138);
        WTF::fastFree(v140, v141);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::getPasteboardBufferForType(a1, (IPC::Connection *)a2, v319, (uint64_t)&v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      goto LABEL_180;
    case 0xE7C:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v157 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v157;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v158 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v158 = off_1E34FCD80;
      *((_QWORD *)v158 + 1) = v328;
      v159 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v158 + 2) = v159;
      v317[0] = v158;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v161 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v161)
      {
        IPC::Encoder::~Encoder(v161, v160);
        WTF::fastFree(v162, v163);
      }
      WebKit::WebPasteboardProxy::getPasteboardChangeCount(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
      goto LABEL_155;
    case 0xE7D:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v101 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v101;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v102 = off_1E34FCDA8;
      *((_QWORD *)v102 + 1) = v328;
      v103 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v102 + 2) = v103;
      v317[0] = v102;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v105 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v105)
      {
        IPC::Encoder::~Encoder(v105, v104);
        WTF::fastFree(v106, v107);
      }
      WebKit::WebPasteboardProxy::getPasteboardColor(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
      goto LABEL_155;
    case 0xE7E:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v175 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v175;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v176 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v176 = off_1E34FCBC8;
      *((_QWORD *)v176 + 1) = v328;
      v177 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v176 + 2) = v177;
      v317[0] = v176;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v179 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v179)
      {
        IPC::Encoder::~Encoder(v179, v178);
        WTF::fastFree(v180, v181);
      }
      WebKit::WebPasteboardProxy::getPasteboardItemsCount(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
      goto LABEL_155;
    case 0xE7F:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[16] != 0;
      if (!v320[16])
        goto LABEL_182;
      v59 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v59;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v60 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v60 = off_1E34FCCE0;
      *((_QWORD *)v60 + 1) = v328;
      v61 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v60 + 2) = v61;
      v317[0] = v60;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v63 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v63)
      {
        IPC::Encoder::~Encoder(v63, v62);
        WTF::fastFree(v64, v65);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(a1, (IPC::Connection *)a2, v319, (uint64_t)&v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      goto LABEL_180;
    case 0xE80:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[16] != 0;
      if (!v320[16])
        goto LABEL_182;
      v168 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v168;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v169 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v169 = off_1E34FCD08;
      *((_QWORD *)v169 + 1) = v328;
      v170 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v169 + 2) = v170;
      v317[0] = v169;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v172 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v172)
      {
        IPC::Encoder::~Encoder(v172, v171);
        WTF::fastFree(v173, v174);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::getPasteboardStringForType(a1, (IPC::Connection *)a2, v319, (uint64_t)&v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      goto LABEL_180;
    case 0xE81:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[16] != 0;
      if (!v320[16])
        goto LABEL_182;
      v37 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v37;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v38 = off_1E34FCD30;
      *((_QWORD *)v38 + 1) = v328;
      v39 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v38 + 2) = v39;
      v317[0] = v38;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v41 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v41)
      {
        IPC::Encoder::~Encoder(v41, v40);
        WTF::fastFree(v42, v43);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::getPasteboardStringsForType(a1, (IPC::Connection *)a2, v319, (uint64_t)&v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      goto LABEL_180;
    case 0xE82:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v52 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v53 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v53 = off_1E34FCCB8;
      *((_QWORD *)v53 + 1) = v328;
      v54 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v53 + 2) = v54;
      v317[0] = v53;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v56 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v56)
      {
        IPC::Encoder::~Encoder(v56, v55);
        WTF::fastFree(v57, v58);
      }
      WebKit::WebPasteboardProxy::getPasteboardTypes(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
      goto LABEL_155;
    case 0xE83:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v150 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v150;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v151 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v151 = off_1E34FCDD0;
      *((_QWORD *)v151 + 1) = v328;
      v152 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v151 + 2) = v152;
      v317[0] = v151;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v154 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v154)
      {
        IPC::Encoder::~Encoder(v154, v153);
        WTF::fastFree(v155, v156);
      }
      WebKit::WebPasteboardProxy::getPasteboardURL(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (WTF::RefCountedBase *)v317);
      goto LABEL_155;
    case 0xE84:
      v13 = *(_QWORD *)(a3 + 8);
      v17 = *(_QWORD *)a3;
      v28 = ((*(_QWORD *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v13 < v28 || v13 - v28 <= 7)
        goto LABEL_339;
      v30 = (WTF::StringImpl **)(v17 + v28);
      *(_QWORD *)(a3 + 16) = v30 + 1;
      if (!v17)
        goto LABEL_412;
      v31 = *v30;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v317);
      if (!LOBYTE(v317[1]))
        goto LABEL_387;
      v33 = IPC::Decoder::decode<long long>((uint64_t *)v5);
      if ((_BYTE)v32)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
        if (v329)
        {
          v17 = LOBYTE(v317[1]);
          if (!LOBYTE(v317[1]))
            goto LABEL_338;
          v34 = v317[0];
          v317[0] = 0;
          v319[0] = v31;
          v319[1] = v34;
          *(_QWORD *)v320 = v33;
          *(_OWORD *)&v320[8] = v328;
          v35 = 1;
        }
        else
        {
          v35 = 0;
          LOBYTE(v319[0]) = 0;
        }
        v320[24] = v35;
      }
      else
      {
        v35 = 0;
        LOBYTE(v319[0]) = 0;
        v320[24] = 0;
      }
      if (LOBYTE(v317[1]))
      {
        v224 = v317[0];
        v317[0] = 0;
        if (v224)
        {
          if (*(_DWORD *)v224 == 2)
            WTF::StringImpl::destroy(v224, v32);
          else
            *(_DWORD *)v224 -= 2;
        }
      }
      if (!v35)
        goto LABEL_387;
      v244 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v244;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v245 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v245 = off_1E34FCBA0;
      *((_QWORD *)v245 + 1) = v328;
      v246 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v245 + 2) = v246;
      v317[0] = v245;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v248 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v248)
      {
        IPC::Encoder::~Encoder(v248, v247);
        WTF::fastFree(v249, v250);
      }
      WebKit::WebPasteboardProxy::informationForItemAtIndex(a1, (IPC::Connection *)a2, (uint64_t)v319[0], &v319[1], v33, *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
      v251 = v317[0];
      v317[0] = 0;
      if (v251)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v251 + 8))(v251);
      if (v320[24])
        goto LABEL_265;
      return 1;
    case 0xE85:
      IPC::Decoder::decode<std::optional<unsigned long>>((uint64_t *)a3, v317);
      if (!v318 || (IPC::Decoder::decode<WTF::String>((uint64_t *)v5, &v324), !v325))
      {
        v93 = 0;
        LOBYTE(v319[0]) = 0;
        LOBYTE(v321[0]) = 0;
        goto LABEL_184;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)v5, &v326);
      if (v327)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
        if (v329)
        {
          v17 = v318;
          if (!v318)
            goto LABEL_338;
          v17 = v325;
          if (!v325)
            goto LABEL_338;
          v17 = v327;
          if (!v327)
            goto LABEL_338;
          v91 = 0;
          *(_OWORD *)v319 = *(_OWORD *)v317;
          v92 = v324;
          v324 = 0;
          *(_QWORD *)v320 = v92;
          *(_QWORD *)&v320[8] = v326;
          *(_OWORD *)&v320[16] = v328;
          v93 = 1;
          LOBYTE(v321[0]) = 1;
LABEL_320:
          if (v325)
          {
            v268 = v324;
            v324 = 0;
            if (v268)
            {
              if (*(_DWORD *)v268 == 2)
                WTF::StringImpl::destroy(v268, v90);
              else
                *(_DWORD *)v268 -= 2;
            }
          }
          if (!v91)
          {
LABEL_326:
            v5 = v93 != 0;
            if (!v93)
              return v5;
            v269 = *a4;
            *a4 = 0;
            *(_QWORD *)&v328 = v269;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
            v270 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v270 = off_1E34FCC40;
            *((_QWORD *)v270 + 1) = v328;
            v271 = *((_QWORD *)&v328 + 1);
            v328 = 0uLL;
            *((_QWORD *)v270 + 2) = v271;
            v317[0] = v270;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
            v273 = (IPC::Encoder *)v328;
            *(_QWORD *)&v328 = 0;
            if (v273)
            {
              IPC::Encoder::~Encoder(v273, v272);
              WTF::fastFree(v274, v275);
            }
            WebKit::WebPasteboardProxy::readBufferFromPasteboard(a1, (IPC::Connection *)a2, (uint64_t)v319[0], (uint64_t)v319[1], (uint64_t)v320, (WTF::StringImpl **)&v320[8], *(uint64_t *)&v320[16], v320[24], (uint64_t *)v317);
            v276 = v317[0];
            v317[0] = 0;
            if (v276)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v276 + 8))(v276);
            if (!LOBYTE(v321[0]))
              return v5;
            v277 = *(WTF::StringImpl **)&v320[8];
            *(_QWORD *)&v320[8] = 0;
            if (v277)
            {
              if (*(_DWORD *)v277 == 2)
                WTF::StringImpl::destroy(v277, v51);
              else
                *(_DWORD *)v277 -= 2;
            }
            v183 = *(WTF::StringImpl **)v320;
            *(_QWORD *)v320 = 0;
            if (!v183)
              return v5;
LABEL_159:
            if (*(_DWORD *)v183 == 2)
              WTF::StringImpl::destroy(v183, v51);
            else
              *(_DWORD *)v183 -= 2;
            return v5;
          }
LABEL_184:
          v204 = *(_QWORD *)v5;
          v205 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
          v206 = *(_QWORD *)(v5 + 24);
          if (v206 && v205)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v206 + 16))(v206, v204);
          goto LABEL_326;
        }
        LOBYTE(v319[0]) = 0;
        LOBYTE(v321[0]) = 0;
        if (v327)
        {
          v253 = v326;
          v326 = 0;
          if (v253)
          {
            if (*(_DWORD *)v253 != 2)
            {
              v93 = 0;
              *(_DWORD *)v253 -= 2;
              goto LABEL_319;
            }
            WTF::StringImpl::destroy(v253, v90);
          }
        }
        v93 = 0;
        goto LABEL_319;
      }
      v93 = 0;
      LOBYTE(v319[0]) = 0;
      LOBYTE(v321[0]) = 0;
LABEL_319:
      v91 = 1;
      goto LABEL_320;
    case 0xE86:
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(_QWORD *)a3;
      v20 = ((*(_QWORD *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v18 < v20 || v18 - v20 <= 7)
      {
        v282 = 0;
        v283 = 0;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v284 = *(_QWORD *)(v5 + 24);
        if (v284)
        {
          if (v18)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v284 + 16))(v284, v19, v18);
            v283 = *(_QWORD *)v5;
            v282 = *(_QWORD *)(v5 + 8);
          }
          else
          {
            v282 = 0;
            v283 = 0;
          }
        }
        goto LABEL_344;
      }
      v22 = (WTF::StringImpl **)(v19 + v20);
      *(_QWORD *)(a3 + 16) = v22 + 1;
      if (!v19)
      {
        v282 = v18;
        v283 = 0;
LABEL_344:
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v285 = *(_QWORD *)(v5 + 24);
        if (v285 && v282)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v285 + 16))(v285, v283);
        goto LABEL_345;
      }
      v23 = *v22;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v326);
      if (!v327)
      {
LABEL_345:
        v27 = 0;
        LOBYTE(v319[0]) = 0;
        v320[24] = 0;
LABEL_346:
        v286 = *(_QWORD *)v5;
        v287 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v288 = *(_QWORD *)(v5 + 24);
        if (v288 && v287)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v288 + 16))(v288, v286);
        goto LABEL_347;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)v5, v317);
      if (!LOBYTE(v317[1]))
      {
        v27 = 0;
        LOBYTE(v319[0]) = 0;
        v320[24] = 0;
LABEL_309:
        v25 = 1;
        goto LABEL_310;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
      if (!v329)
      {
        LOBYTE(v319[0]) = 0;
        v320[24] = 0;
        if (LOBYTE(v317[1]))
        {
          v223 = v317[0];
          v317[0] = 0;
          if (v223)
          {
            if (*(_DWORD *)v223 != 2)
            {
              v27 = 0;
              *(_DWORD *)v223 -= 2;
              goto LABEL_309;
            }
            WTF::StringImpl::destroy(v223, v24);
          }
        }
        v27 = 0;
        goto LABEL_309;
      }
      v17 = v327;
      if (!v327)
        goto LABEL_338;
      v17 = LOBYTE(v317[1]);
      if (!LOBYTE(v317[1]))
        goto LABEL_338;
      v25 = 0;
      v26 = v326;
      v326 = 0;
      v319[0] = v23;
      v319[1] = v26;
      *(WTF::StringImpl **)v320 = v317[0];
      *(_OWORD *)&v320[8] = v328;
      v27 = 1;
      v320[24] = 1;
LABEL_310:
      if (v327)
      {
        v267 = v326;
        v326 = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
            WTF::StringImpl::destroy(v267, v24);
          else
            *(_DWORD *)v267 -= 2;
        }
      }
      if (v25)
        goto LABEL_346;
LABEL_347:
      v5 = v27 != 0;
      if (v27)
      {
        v289 = *a4;
        *a4 = 0;
        *(_QWORD *)&v328 = v289;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
        v290 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v290 = off_1E34FCBF0;
        *((_QWORD *)v290 + 1) = v328;
        v291 = *((_QWORD *)&v328 + 1);
        v328 = 0uLL;
        *((_QWORD *)v290 + 2) = v291;
        v317[0] = v290;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
        v293 = (IPC::Encoder *)v328;
        *(_QWORD *)&v328 = 0;
        if (v293)
        {
          IPC::Encoder::~Encoder(v293, v292);
          WTF::fastFree(v294, v295);
        }
        WebKit::WebPasteboardProxy::readStringFromPasteboard(a1, (IPC::Connection *)a2, (uint64_t)v319[0], (uint64_t)&v319[1], (WTF::StringImpl **)v320, *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
        v296 = v317[0];
        v317[0] = 0;
        if (v296)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v296 + 8))(v296);
        if (v320[24])
        {
          v297 = *(WTF::StringImpl **)v320;
          *(_QWORD *)v320 = 0;
          if (v297)
          {
            if (*(_DWORD *)v297 == 2)
              WTF::StringImpl::destroy(v297, v51);
            else
              *(_DWORD *)v297 -= 2;
          }
          v183 = v319[1];
          v319[1] = 0;
          if (v183)
            goto LABEL_159;
        }
      }
      return v5;
    case 0xE87:
      v13 = *(_QWORD *)(a3 + 8);
      v17 = *(_QWORD *)a3;
      v112 = ((*(_QWORD *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v13 < v112 || v13 - v112 <= 7)
        goto LABEL_339;
      v114 = (WTF::StringImpl **)(v17 + v112);
      *(_QWORD *)(a3 + 16) = v114 + 1;
      if (!v17)
      {
LABEL_412:
        v278 = v13;
        v279 = v17;
        goto LABEL_340;
      }
      v115 = *v114;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v317);
      if (!LOBYTE(v317[1]))
        goto LABEL_387;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
      if (!v329)
      {
        if (LOBYTE(v317[1]))
        {
          v220 = v317[0];
          v317[0] = 0;
          if (v220)
          {
            if (*(_DWORD *)v220 == 2)
              WTF::StringImpl::destroy(v220, v116);
            else
              *(_DWORD *)v220 -= 2;
          }
        }
        goto LABEL_387;
      }
      v17 = LOBYTE(v317[1]);
      if (!LOBYTE(v317[1]))
        goto LABEL_338;
      v319[0] = v115;
      v319[1] = v317[0];
      *(_OWORD *)v320 = v328;
      v320[16] = 1;
      v117 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v117;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v118 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v118 = off_1E34FCC18;
      *((_QWORD *)v118 + 1) = v328;
      v119 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v118 + 2) = v119;
      v317[0] = v118;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v121 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v121)
      {
        IPC::Encoder::~Encoder(v121, v120);
        WTF::fastFree(v122, v123);
      }
      WebKit::WebPasteboardProxy::readURLFromPasteboard(a1, (IPC::Connection *)a2, (uint64_t)v115, &v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      v125 = v317[0];
      v317[0] = 0;
      if (v125)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v125 + 8))(v125);
      if (v320[16])
      {
LABEL_265:
        v252 = v319[1];
        v319[1] = 0;
        if (v252)
          goto LABEL_298;
      }
      return 1;
    case 0xE88:
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v324);
      if (!v325)
        goto LABEL_387;
      IPC::Decoder::decode<WTF::String>((uint64_t *)v5, &v326);
      if (v327)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((uint64_t *)v5, v317);
        if (LOBYTE(v317[1]))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
          if (v329)
          {
            v17 = v325;
            if (!v325)
              goto LABEL_338;
            v17 = v327;
            if (!v327)
              goto LABEL_338;
            v17 = LOBYTE(v317[1]);
            if (!LOBYTE(v317[1]))
              goto LABEL_338;
            v165 = v324;
            v324 = 0;
            v166 = v326;
            v326 = 0;
            v319[0] = v165;
            v319[1] = v166;
            *(WTF::StringImpl **)v320 = v317[0];
            *(_OWORD *)&v320[8] = v328;
            v167 = 1;
            v320[24] = 1;
          }
          else
          {
            LOBYTE(v319[0]) = 0;
            v320[24] = 0;
            if (LOBYTE(v317[1]))
            {
              v254 = (unsigned int *)v317[0];
              v317[0] = 0;
              if (v254)
                WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v254, v164);
            }
            v167 = 0;
          }
        }
        else
        {
          v167 = 0;
          LOBYTE(v319[0]) = 0;
          v320[24] = 0;
        }
        if (v327)
        {
          v255 = v326;
          v326 = 0;
          if (v255)
          {
            if (*(_DWORD *)v255 == 2)
              WTF::StringImpl::destroy(v255, (WTF::StringImpl *)v164);
            else
              *(_DWORD *)v255 -= 2;
          }
        }
      }
      else
      {
        v167 = 0;
        LOBYTE(v319[0]) = 0;
        v320[24] = 0;
      }
      if (v325)
      {
        v256 = v324;
        v324 = 0;
        if (v256)
        {
          if (*(_DWORD *)v256 == 2)
            WTF::StringImpl::destroy(v256, (WTF::StringImpl *)v164);
          else
            *(_DWORD *)v256 -= 2;
        }
      }
      if (!v167)
        goto LABEL_387;
      v257 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v257;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v258 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v258 = off_1E34FCEC0;
      *((_QWORD *)v258 + 1) = v328;
      v259 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v258 + 2) = v259;
      v317[0] = v258;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v261 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v261)
      {
        IPC::Encoder::~Encoder(v261, v260);
        WTF::fastFree(v262, v263);
      }
      WebKit::WebPasteboardProxy::setPasteboardBufferForType(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t)&v319[1], (uint64_t)v320, *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
      v264 = v317[0];
      v317[0] = 0;
      if (v264)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v264 + 8))(v264);
      if (!v320[24])
        return 1;
      v265 = *(unsigned int **)v320;
      *(_QWORD *)v320 = 0;
      if (v265)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v265, v124);
      v266 = v319[1];
      v319[1] = 0;
      if (v266)
      {
        if (*(_DWORD *)v266 == 2)
          WTF::StringImpl::destroy(v266, (WTF::StringImpl *)v124);
        else
          *(_DWORD *)v266 -= 2;
      }
      goto LABEL_297;
    case 0xE89:
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v326);
      if (v327)
      {
        IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v5, v317);
        if (LOBYTE(v317[1])
          || (v193 = *(void **)v5,
              v314 = *(_QWORD *)(v5 + 8),
              *(_QWORD *)v5 = 0,
              *(_QWORD *)(v5 + 8) = 0,
              (v315 = *(_QWORD *)(v5 + 24)) != 0)
          && v314
          && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v315 + 16))(v315, v193), LOBYTE(v317[1])))
        {
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
          v194 = v329;
          if (v329)
          {
            v17 = v327;
            if (!v327)
              goto LABEL_338;
            v17 = LOBYTE(v317[1]);
            if (!LOBYTE(v317[1]))
              goto LABEL_338;
            v195 = v326;
            v326 = 0;
            v319[0] = v195;
            WebCore::Color::Color();
            *(_OWORD *)v320 = v328;
            v194 = 1;
          }
          else
          {
            LOBYTE(v319[0]) = 0;
          }
          v320[16] = v194;
        }
        else
        {
          LOBYTE(v319[0]) = 0;
          v320[16] = 0;
        }
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v317, v193);
        if (v327)
        {
          v219 = v326;
          v326 = 0;
          if (v219)
          {
            if (*(_DWORD *)v219 == 2)
              WTF::StringImpl::destroy(v219, v218);
            else
              *(_DWORD *)v219 -= 2;
          }
        }
      }
      else
      {
        LOBYTE(v319[0]) = 0;
        v320[16] = 0;
      }
      if (!v320[16])
      {
        v302 = *(_QWORD *)v5;
        v303 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v304 = *(_QWORD *)(v5 + 24);
        if (!v304)
          return 0;
        if (!v303)
          return 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v304 + 16))(v304, v302);
        if (!v320[16])
          return 0;
      }
      v233 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v233;
      v5 = (unint64_t)&v328 + 8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v234 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v234 = off_1E34FCE70;
      *((_QWORD *)v234 + 1) = v328;
      v235 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v234 + 2) = v235;
      v317[0] = v234;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v237 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v237)
      {
        IPC::Encoder::~Encoder(v237, v236);
        WTF::fastFree(v238, v239);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::setPasteboardColor(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t)&v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
      v240 = v317[0];
      v317[0] = 0;
      if (v240)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v240 + 8))(v240);
      if (v320[16])
      {
        if (((unint64_t)v319[1] & 0x8000000000000) != 0)
        {
          v241 = (unsigned int *)((unint64_t)v319[1] & 0xFFFFFFFFFFFFLL);
          do
          {
            v242 = __ldaxr(v241);
            v243 = v242 - 1;
          }
          while (__stlxr(v243, v241));
          if (!v243)
          {
            atomic_store(1u, v241);
            WTF::fastFree((WTF *)v241, v124);
          }
        }
LABEL_297:
        v252 = v319[0];
        v319[0] = 0;
        if (v252)
        {
LABEL_298:
          if (*(_DWORD *)v252 == 2)
            WTF::StringImpl::destroy(v252, (WTF::StringImpl *)v124);
          else
            *(_DWORD *)v252 -= 2;
        }
      }
      return 1;
    case 0xE8A:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[24] != 0;
      if (!v320[24])
        goto LABEL_116;
      v127 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v127;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v128 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v128 = off_1E34FCE98;
      *((_QWORD *)v128 + 1) = v328;
      v129 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v128 + 2) = v129;
      v317[0] = v128;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v131 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v131)
      {
        IPC::Encoder::~Encoder(v131, v130);
        WTF::fastFree(v132, v133);
      }
      v17 = v320[24];
      if (!v320[24])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::setPasteboardStringForType(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t)&v319[1], (uint64_t)v320, *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
      v134 = v317[0];
      v317[0] = 0;
      if (v134)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v134 + 8))(v134);
LABEL_116:
      std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v319, v126);
      return v5;
    case 0xE8B:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[24] != 0;
      if (!v320[24])
        goto LABEL_129;
      v142 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v142;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v143 = off_1E34FCE20;
      *((_QWORD *)v143 + 1) = v328;
      v144 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v143 + 2) = v144;
      v317[0] = v143;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v146 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v146)
      {
        IPC::Encoder::~Encoder(v146, v145);
        WTF::fastFree(v147, v148);
      }
      v17 = v320[24];
      if (!v320[24])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::setPasteboardTypes(a1, (IPC::Connection *)a2, (uint64_t *)v319, (uint64_t *)&v319[1], *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
LABEL_127:
      v149 = v317[0];
      v317[0] = 0;
      if (v149)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v149 + 8))(v149);
LABEL_129:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v319, v8);
      return v5;
    case 0xE8C:
      IPC::Decoder::decode<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v323 != 0;
      if (!v323)
        goto LABEL_168;
      v185 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v185;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v186 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v186 = off_1E34FCE48;
      *((_QWORD *)v186 + 1) = v328;
      v187 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v186 + 2) = v187;
      v317[0] = v186;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v189 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v189)
      {
        IPC::Encoder::~Encoder(v189, v188);
        WTF::fastFree(v190, v191);
      }
      v17 = v323;
      if (!v323)
        goto LABEL_338;
      WebKit::WebPasteboardProxy::setPasteboardURL(a1, (IPC::Connection *)a2, (uint64_t)v319, v321, v321[1], v322, (uint64_t *)v317);
      v192 = v317[0];
      v317[0] = 0;
      if (v192)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v192 + 8))(v192);
LABEL_168:
      std::__optional_destruct_base<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v319, v184);
      return v5;
    case 0xE8D:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[16] != 0;
      if (!v320[16])
        goto LABEL_182;
      v196 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v196;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v197 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v197 = off_1E34FCB50;
      *((_QWORD *)v197 + 1) = v328;
      v198 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v197 + 2) = v198;
      v317[0] = v197;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v200 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v200)
      {
        IPC::Encoder::~Encoder(v200, v199);
        WTF::fastFree(v201, v202);
      }
      v17 = v320[16];
      if (!v320[16])
        goto LABEL_338;
      WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(a1, (IPC::Connection *)a2, v319, &v319[1], *(uint64_t *)v320, v320[8], (uint64_t *)v317);
LABEL_180:
      v203 = v317[0];
      v317[0] = 0;
      if (v203)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v203 + 8))(v203);
LABEL_182:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v319, v36);
      return v5;
    case 0xE8E:
      IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v319, (uint64_t *)a3);
      v5 = v320[8] != 0;
      if (!v320[8])
        return v5;
      v76 = *a4;
      *a4 = 0;
      *(_QWORD *)&v328 = v76;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
      v77 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v77 = off_1E34FCF10;
      *((_QWORD *)v77 + 1) = v328;
      v78 = *((_QWORD *)&v328 + 1);
      v328 = 0uLL;
      *((_QWORD *)v77 + 2) = v78;
      v317[0] = v77;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
      v80 = (IPC::Encoder *)v328;
      *(_QWORD *)&v328 = 0;
      if (v80)
      {
        IPC::Encoder::~Encoder(v80, v79);
        WTF::fastFree(v81, v82);
      }
      WebKit::WebPasteboardProxy::urlStringSuitableForLoading(a1, (IPC::Connection *)a2, v319, (uint64_t)v319[1], v320[0], (uint64_t *)v317);
LABEL_155:
      v182 = v317[0];
      v317[0] = 0;
      if (v182)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v182 + 8))(v182);
      if (v320[8])
      {
        v183 = v319[0];
        v319[0] = 0;
        if (v183)
          goto LABEL_159;
      }
      return v5;
    case 0xE8F:
      v66 = *(_QWORD *)(a3 + 8);
      v67 = *(_QWORD *)a3;
      v68 = ((*(_QWORD *)(a3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v66 >= v68 && v66 - v68 > 7)
      {
        v70 = (unint64_t *)(v67 + v68);
        *(_QWORD *)(a3 + 16) = v70 + 1;
        if (v67)
        {
          v71 = *v70;
          v328 = 0uLL;
          if (v71 < 0xAAAA)
          {
            if (v71)
            {
              DWORD2(v328) = 24 * (int)v71 / 0x18u;
              *(_QWORD *)&v328 = WTF::fastMalloc((WTF *)(24 * v71));
              do
              {
                IPC::Decoder::decode<WebCore::PasteboardCustomData>(v319, (uint64_t *)v5);
                if (!v320[8])
                  goto LABEL_381;
                v73 = HIDWORD(v328);
                if (HIDWORD(v328) == DWORD2(v328))
                {
                  WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData>((uint64_t)&v328, (unint64_t)v319);
                }
                else
                {
                  WebCore::PasteboardCustomData::PasteboardCustomData();
                  HIDWORD(v328) = v73 + 1;
                }
                if (v320[8])
                  WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)v319);
                --v71;
              }
              while (v71);
              v74 = (WTF::StringImpl *)v328;
              LODWORD(v71) = DWORD2(v328);
              v75 = HIDWORD(v328);
            }
            else
            {
              v75 = 0;
              v74 = 0;
            }
            v328 = 0uLL;
            v317[0] = v74;
            v317[1] = (WTF::StringImpl *)__PAIR64__(v75, v71);
LABEL_190:
            v318 = 1;
            WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v328, a2);
            IPC::Decoder::decode<WTF::String>((uint64_t *)v5, &v326);
            if (v327)
            {
              IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v5, &v328);
              if (v329)
              {
                v17 = v327;
                if (v327)
                {
                  v317[0] = 0;
                  v317[1] = 0;
                  v319[0] = v74;
                  v319[1] = (WTF::StringImpl *)__PAIR64__(v75, v71);
                  *(_QWORD *)v320 = v326;
                  *(_OWORD *)&v320[8] = v328;
                  v320[24] = 1;
                  WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v317, v207);
                  v208 = *a4;
                  *a4 = 0;
                  *(_QWORD *)&v328 = v208;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v328 + 1, a2);
                  v209 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)v209 = off_1E34FCB28;
                  *((_QWORD *)v209 + 1) = v328;
                  v210 = *((_QWORD *)&v328 + 1);
                  v328 = 0uLL;
                  *((_QWORD *)v209 + 2) = v210;
                  v317[0] = v209;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v328 + 1);
                  v212 = (IPC::Encoder *)v328;
                  *(_QWORD *)&v328 = 0;
                  if (v212)
                  {
                    IPC::Encoder::~Encoder(v212, v211);
                    WTF::fastFree(v213, v214);
                  }
                  WebKit::WebPasteboardProxy::writeCustomData(a1, (IPC::Connection *)a2, (uint64_t)v319, (uint64_t *)v320, *(uint64_t *)&v320[8], v320[16], (uint64_t *)v317);
                  v216 = v317[0];
                  v317[0] = 0;
                  if (v216)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v216 + 8))(v216);
                  if (v320[24])
                  {
                    v217 = *(WTF::StringImpl **)v320;
                    *(_QWORD *)v320 = 0;
                    if (v217)
                    {
                      if (*(_DWORD *)v217 == 2)
                        WTF::StringImpl::destroy(v217, v215);
                      else
                        *(_DWORD *)v217 -= 2;
                    }
                    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v319, v215);
                  }
                  return 1;
                }
LABEL_338:
                __break(1u);
LABEL_339:
                v278 = 0;
                v279 = 0;
                *(_QWORD *)v5 = 0;
                *(_QWORD *)(v5 + 8) = 0;
                v280 = *(_QWORD *)(v5 + 24);
                if (v280)
                {
                  if (v13)
                  {
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v280 + 16))(v280, v17, v13);
                    v279 = *(_QWORD *)v5;
                    v278 = *(_QWORD *)(v5 + 8);
                  }
                  else
                  {
                    v278 = 0;
                    v279 = 0;
                  }
                }
LABEL_340:
                *(_QWORD *)v5 = 0;
                *(_QWORD *)(v5 + 8) = 0;
                v281 = *(_QWORD *)(v5 + 24);
                if (!v281 || !v278)
                {
LABEL_387:
                  v310 = *(_QWORD *)v5;
                  v311 = *(_QWORD *)(v5 + 8);
                  *(_QWORD *)v5 = 0;
                  *(_QWORD *)(v5 + 8) = 0;
                  v312 = *(_QWORD *)(v5 + 24);
                  if (v312 && v311)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v312 + 16))(v312, v310);
                  return 0;
                }
LABEL_342:
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v281 + 16))(v281, v279);
                goto LABEL_387;
              }
              if (v327)
              {
                v221 = v326;
                v326 = 0;
                if (v221)
                {
                  if (*(_DWORD *)v221 == 2)
                    WTF::StringImpl::destroy(v221, (WTF::StringImpl *)v207);
                  else
                    *(_DWORD *)v221 -= 2;
                }
              }
            }
            WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v317, v207);
            goto LABEL_387;
          }
          while (1)
          {
            IPC::Decoder::decode<WebCore::PasteboardCustomData>(v319, (uint64_t *)v5);
            if (!v320[8])
              break;
            v305 = HIDWORD(v328);
            if (HIDWORD(v328) == DWORD2(v328))
            {
              WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData>((uint64_t)&v328, (unint64_t)v319);
            }
            else
            {
              WebCore::PasteboardCustomData::PasteboardCustomData();
              HIDWORD(v328) = v305 + 1;
            }
            if (v320[8])
              WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)v319);
            if (!--v71)
            {
              LODWORD(v71) = DWORD2(v328);
              v74 = (WTF::StringImpl *)v328;
              v316 = HIDWORD(v328);
              if (DWORD2(v328) > HIDWORD(v328))
              {
                v306 = (WTF::StringImpl *)v328;
                if (HIDWORD(v328))
                {
                  if (HIDWORD(v328) >= 0xAAAAAAB)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1977E3378);
                  }
                  v307 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v328)));
                  LODWORD(v71) = 24 * v316 / 0x18;
                  if ((WTF::StringImpl *)v307 == v74)
                  {
                    v306 = v74;
                  }
                  else
                  {
                    v306 = (WTF::StringImpl *)v307;
                    WTF::VectorMover<false,WebCore::PasteboardCustomData>::move(v74, (WTF::StringImpl *)((char *)v74 + 24 * v316), v307);
                  }
                }
                if (v74)
                {
                  if (v306 == v74)
                  {
                    LODWORD(v71) = 0;
                    v306 = 0;
                  }
                  WTF::fastFree(v74, a2);
                }
                v74 = v306;
              }
              v328 = 0uLL;
              v317[0] = v74;
              v75 = v316;
              v317[1] = (WTF::StringImpl *)__PAIR64__(v316, v71);
              goto LABEL_190;
            }
          }
LABEL_381:
          WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v328, v72);
LABEL_382:
          v279 = *(_QWORD *)v5;
          v308 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
          v281 = *(_QWORD *)(v5 + 24);
          if (v281)
            v309 = v308 == 0;
          else
            v309 = 1;
          if (v309)
            goto LABEL_387;
          goto LABEL_342;
        }
        v298 = v66;
        v299 = 0;
      }
      else
      {
        v298 = 0;
        v299 = 0;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v300 = *(_QWORD *)(v5 + 24);
        if (v300)
        {
          if (v66)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v300 + 16))(v300, v67, v66);
            v299 = *(_QWORD *)v5;
            v298 = *(_QWORD *)(v5 + 8);
          }
          else
          {
            v298 = 0;
            v299 = 0;
          }
        }
      }
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      v301 = *(_QWORD *)(v5 + 24);
      if (v301 && v298)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v299);
      goto LABEL_382;
    default:
      return 0;
  }
}

void WebKit::WebPasteboardProxy::~WebPasteboardProxy(WebKit::WebPasteboardProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FCF38;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34FCF38;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(_QWORD *)(v4 - 16) != -1)
      {
        WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 16);
        *(_QWORD *)(v4 - 16) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[5];
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  __int128 v17;
  char v18;

  IPC::Decoder::decode<WebCore::PasteboardURL>(a2, (uint64_t)v12);
  if (v14 && (IPC::Decoder::decode<WTF::String>(a2, &v15), v16))
  {
    result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v17);
    v6 = v18;
    if (v18)
    {
      if (!v14 || !v16)
      {
        __break(1u);
        return result;
      }
      WTF::URL::URL(a1, v12);
      v7 = v13;
      v13 = 0;
      v8 = v15;
      v15 = 0;
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 56) = v17;
      v6 = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 72) = v6;
    if (v16)
    {
      v9 = v15;
      v15 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v4);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  result = std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v4);
  if (!*(_BYTE *)(a1 + 72))
  {
    v10 = *a2;
    v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v11)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::PasteboardURL,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  unsigned __int8 v18;
  __int128 v19;
  char v20;

  IPC::Decoder::decode<WTF::String>(a2, &v13);
  if (!v14)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_10;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v15);
  if (v16)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v17);
    if (v18)
    {
      result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v19);
      if (v20)
      {
        if (!v14 || !v16 || !v18)
        {
          __break(1u);
          return result;
        }
        v6 = v13;
        v13 = 0;
        v7 = v15;
        v15 = 0;
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 24) = v19;
        v8 = 1;
        *(_BYTE *)(a1 + 40) = 1;
        goto LABEL_23;
      }
      *(_BYTE *)a1 = 0;
      v12 = v18;
      *(_BYTE *)(a1 + 40) = 0;
      if (v12)
      {
        result = v17;
        v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result != 2)
          {
            v8 = 0;
            *(_DWORD *)result -= 2;
            goto LABEL_23;
          }
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
      }
      v8 = 0;
      goto LABEL_23;
    }
    v8 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
LABEL_23:
    if (v16)
    {
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_28;
  }
  v8 = 0;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
LABEL_28:
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v8)
          return result;
        goto LABEL_10;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v8)
    return result;
LABEL_10:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  return result;
}

void IPC::Decoder::decode<WebCore::PasteboardCustomData>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::PasteboardCustomData,void>::decode(a2, a1);
  if (!a1[24])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardCustomData>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WebCore::PasteboardCustomData::PasteboardCustomData();
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WebCore::PasteboardCustomData *v3;
  WebCore::PasteboardCustomData *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1977E3AA8);
    }
    v3 = *(WebCore::PasteboardCustomData **)a1;
    v4 = (WebCore::PasteboardCustomData *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::PasteboardCustomData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WebCore::PasteboardCustomData **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::PasteboardCustomData>::move(WebCore::PasteboardCustomData *a1, WebCore::PasteboardCustomData *a2, uint64_t a3)
{
  WebCore::PasteboardCustomData *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebCore::PasteboardCustomData::PasteboardCustomData();
      WebCore::PasteboardCustomData::~PasteboardCustomData(v5);
      a3 += 24;
      v5 = (WebCore::PasteboardCustomData *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::PasteboardCustomData *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::PasteboardCustomData **)a1;
    v5 = 24 * v3;
    do
    {
      WebCore::PasteboardCustomData::~PasteboardCustomData(v4);
      v4 = (WebCore::PasteboardCustomData *)(v6 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy15WriteCustomDataEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6VectorIN7WebCore20PasteboardCustomDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSC_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCB28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy15WriteCustomDataEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6VectorIN7WebCore20PasteboardCustomDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSC_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCB28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy15WriteCustomDataEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6VectorIN7WebCore20PasteboardCustomDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSC_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 >= v7 + 8)
  {
    v10 = *(char **)(v5 + 528);
LABEL_3:
    bzero(&v10[v6], v7 - v6);
    *(_QWORD *)(v5 + 544) = v8;
    v11 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v7);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v8);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v14;
    v6 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  unsigned __int8 v16;
  __int128 v17;
  char v18;

  IPC::Decoder::decode<WTF::String>(a2, &v13);
  if (!v14)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_8;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v15);
  if (v16)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v17);
    if (v18)
    {
      if (!v14 || !v16)
      {
        __break(1u);
        return result;
      }
      v6 = 0;
      v7 = v13;
      v13 = 0;
      v8 = v15;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_OWORD *)(a1 + 16) = v17;
      *(_BYTE *)(a1 + 32) = 1;
      goto LABEL_20;
    }
    *(_BYTE *)a1 = 0;
    v12 = v16;
    *(_BYTE *)(a1 + 32) = 0;
    if (v12)
    {
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  v6 = 1;
LABEL_20:
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v6)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v6)
    return result;
LABEL_8:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCB50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCB50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INS_6VectorINSH_18PasteboardItemInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCB78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INS_6VectorINSH_18PasteboardItemInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCB78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INS_6VectorINSH_18PasteboardItemInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 0;
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  *v7 = 1;
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = *(unsigned int *)(a2 + 12);
    *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = v8;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)a2;
      v11 = 120 * v9;
      do
      {
        IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::encode(v5, v10);
        v10 += 120;
        v11 -= 120;
      }
      while (v11);
    }
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = std::__throw_bad_optional_access[abi:sn180100]();
  return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(v13);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCBA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCBA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringExNSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSF_INSH_18PasteboardItemInfoEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  IPC::Encoder *v5;
  int v6;
  char *v7;
  id v9;
  uint64_t *v10;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  v6 = *(unsigned __int8 *)(a2 + 120);
  v7 = IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v6)
  {
    *v7 = 0;
    return (uint64_t *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  *v7 = 1;
  if (*(_BYTE *)(a2 + 120))
  {
    IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::encode(v5, a2);
    return (uint64_t *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v9 = std::__throw_bad_optional_access[abi:sn180100]();
  return IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)v9, v10);
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12;
  __int128 v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a2, &v11);
  if (v12)
  {
    result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v13);
    if (v14)
    {
      if (v12)
      {
        *(_QWORD *)a1 = v11;
        *(_OWORD *)(a1 + 8) = v13;
        *(_BYTE *)(a1 + 24) = 1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    *(_BYTE *)a1 = 0;
    v6 = v12;
    *(_BYTE *)(a1 + 24) = 0;
    if (v6)
    {
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (uint64_t *)a2[3];
  if (result)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCBC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCBC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCBF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCBF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_SO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCC18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_SO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCC18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionEmRKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_SO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EE4callESO_SO_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionENSt3__18optionalImEERKNS_6StringESG_NSC_INS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6RefPtrINSI_12SharedBufferENS_12RawPtrTraitsISQ_EENS_21DefaultRefDerefTraitsISQ_EEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCC40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionENSt3__18optionalImEERKNS_6StringESG_NSC_INS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6RefPtrINSI_12SharedBufferENS_12RawPtrTraitsISQ_EENS_21DefaultRefDerefTraitsISQ_EEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCC40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionENSt3__18optionalImEERKNS_6StringESG_NSC_INS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6RefPtrINSI_12SharedBufferENS_12RawPtrTraitsISQ_EENS_21DefaultRefDerefTraitsISQ_EEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCC68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCC68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetNumberOfFilesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCC90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetNumberOfFilesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCC90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetNumberOfFilesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCCB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCCB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSO_INS7_22SandboxExtensionHandleELm0ESP_Lm16ESQ_EEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_SV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCCE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSO_INS7_22SandboxExtensionHandleELm0ESP_Lm16ESQ_EEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_SV_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCCE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSO_INS7_22SandboxExtensionHandleELm0ESP_Lm16ESQ_EEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_SV_EE4callESS_SV_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCD08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCD08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCD30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCD30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSH_16PasteboardBufferEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCD58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSH_16PasteboardBufferEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCD58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSH_16PasteboardBufferEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCD80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCD80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSH_5ColorEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCDA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSH_5ColorEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCDA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18GetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSH_5ColorEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, WebCore::Color *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvSD_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCDD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvSD_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCDD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16GetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvSD_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  WTF::StringImpl *result;
  void *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  __int128 v21;
  char v22;

  IPC::Decoder::decode<WTF::String>(a2, &v16);
  if (!v17)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_8;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v18);
  if (!v20)
  {
    v14 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_16;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v21);
  if (v22)
  {
    if (!v17 || !v20)
    {
      __break(1u);
      return result;
    }
    v7 = v16;
    v16 = 0;
    v8 = v18;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = v19;
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 24) = v21;
    v10 = 1;
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v10 = 0;
    v14 = 0;
    *(_BYTE *)a1 = 0;
    v15 = v20;
    *(_BYTE *)(a1 + 40) = 0;
    if (!v15)
      goto LABEL_16;
  }
  result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v6);
  v14 = v10;
LABEL_16:
  if (v17)
  {
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
        if (v14)
          return result;
        goto LABEL_8;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v14)
    return result;
LABEL_8:
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18AddPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCDF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18AddPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCDF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18AddPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCE20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCE20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardTypesEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKNS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16SetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKN7WebCore13PasteboardURLERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCE48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16SetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKN7WebCore13PasteboardURLERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCE48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy16SetPasteboardURLEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKN7WebCore13PasteboardURLERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericINSB_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKN7WebCore5ColorENSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCE70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKN7WebCore5ColorENSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCE70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy18SetPasteboardColorEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringERKN7WebCore5ColorENSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_SD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCE98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_SD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCE98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_SD_NSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_ONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENSt3__18optionalINS_23ObjectIdentifierGenericINSF_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCEC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_ONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENSt3__18optionalINS_23ObjectIdentifierGenericINSF_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCEC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringESD_ONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENSt3__18optionalINS_23ObjectIdentifierGenericINSF_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvxEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCEE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCEE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvbEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_SO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCF10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_SO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FCF10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEN6WebKit18WebPasteboardProxyES8_FvRNS2_10ConnectionERKNS_6StringENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvOSB_SO_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EE4callESO_SO_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

void WebKit::WebPaymentCoordinator::didReceiveMessage(WebKit::WebPaymentCoordinator *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  CFTypeRef v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20[2];
  WTF::StringImpl *v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[21];
  char v26;
  CFTypeRef cf[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[21];
  char v33;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x9E1:
      IPC::ArgumentCoder<WebCore::Payment,void>::decode((uint64_t *)a3, (uint64_t)cf);
      if (!(_BYTE)v28)
      {
        v17 = *(_QWORD *)a3;
        v13 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v14 = *((_QWORD *)a3 + 3);
        if (!v14)
          goto LABEL_66;
        if (!v13)
          goto LABEL_67;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v17);
        if (!(_BYTE)v28)
          goto LABEL_72;
      }
      v20[0] = (CFTypeRef)(MEMORY[0x1E0DD8FF8] + 16);
      v20[1] = cf[1];
      if (cf[1])
      {
        CFRetain(cf[1]);
        LOBYTE(v21[0]) = 1;
        if (!(_BYTE)v28)
          goto LABEL_34;
      }
      else
      {
        LOBYTE(v21[0]) = 1;
      }
      WebCore::Payment::~Payment((WebCore::Payment *)cf);
LABEL_34:
      WebCore::PaymentCoordinator::didAuthorizePayment();
      WebCore::Payment::~Payment((WebCore::Payment *)v20);
      return;
    case 0x9E2:
      IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::decode((uint64_t *)a3, (uint64_t)cf);
      if (!LOBYTE(cf[1]))
      {
        v18 = *(_QWORD *)a3;
        v13 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v14 = *((_QWORD *)a3 + 3);
        if (!v14)
          goto LABEL_66;
        if (!v13)
          goto LABEL_67;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v18);
        if (!LOBYTE(cf[1]))
          goto LABEL_72;
      }
      v20[0] = cf[0];
      LOBYTE(v20[1]) = 1;
      WebCore::PaymentCoordinator::didCancelPaymentSession();
      v5 = v20[0];
      v20[0] = 0;
      if (v5)
        CFRelease(v5);
      return;
    case 0x9E3:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      if (LOBYTE(cf[1]))
      {
        WebCore::PaymentCoordinator::didChangeCouponCode();
        goto LABEL_25;
      }
      return;
    case 0x9E4:
      IPC::ArgumentCoder<WebCore::PaymentMethod,void>::decode((uint64_t *)a3, (uint64_t)cf);
      if ((_BYTE)v28)
        goto LABEL_12;
      v19 = *(_QWORD *)a3;
      v13 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v14 = *((_QWORD *)a3 + 3);
      if (!v14)
      {
LABEL_66:
        v13 = 0;
LABEL_67:
        v12 = 0;
        goto LABEL_68;
      }
      if (!v13)
        goto LABEL_67;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v19);
      if ((_BYTE)v28)
      {
LABEL_12:
        v20[0] = (CFTypeRef)(MEMORY[0x1E0DD8F80] + 16);
        v20[1] = cf[1];
        if (cf[1])
        {
          CFRetain(cf[1]);
          LOBYTE(v21[0]) = 1;
          if (!(_BYTE)v28)
          {
LABEL_37:
            WebCore::PaymentCoordinator::didSelectPaymentMethod(*(WebCore::PaymentCoordinator **)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 1240), (const WebCore::PaymentMethod *)v20);
            if (LOBYTE(v21[0]))
              WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)v20);
            return;
          }
        }
        else
        {
          LOBYTE(v21[0]) = 1;
        }
        WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)cf);
        goto LABEL_37;
      }
LABEL_72:
      v12 = *(_QWORD *)a3;
      v13 = *((_QWORD *)a3 + 1);
      v14 = *((_QWORD *)a3 + 3);
LABEL_68:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (v14)
        goto LABEL_30;
      return;
    case 0x9E5:
      IPC::Decoder::decode<WebCore::PaymentContact>((uint64_t *)a3, (uint64_t)cf);
      if (!(_BYTE)v28)
        goto LABEL_29;
      v20[0] = (CFTypeRef)(MEMORY[0x1E0DD8F88] + 16);
      v20[1] = cf[1];
      if (cf[1])
      {
        CFRetain(cf[1]);
        LOBYTE(v21[0]) = 1;
        if (!(_BYTE)v28)
          goto LABEL_41;
      }
      else
      {
        LOBYTE(v21[0]) = 1;
      }
      WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)cf);
LABEL_41:
      WebCore::PaymentCoordinator::didSelectShippingContact(*(WebCore::PaymentCoordinator **)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 1240), (const WebCore::PaymentContact *)v20);
      if (LOBYTE(v21[0]))
        WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v20);
      return;
    case 0x9E6:
      IPC::Decoder::decode<WebCore::ApplePayShippingMethod>((uint64_t *)a3, (uint64_t)cf);
      if (v33)
      {
        v8 = *(_OWORD *)cf;
        v9 = v28;
        *(_OWORD *)cf = 0u;
        v28 = 0u;
        *(_OWORD *)v20 = v8;
        *(_OWORD *)v21 = v9;
        v24 = v31;
        *(_OWORD *)v25 = *(_OWORD *)v32;
        *(_QWORD *)&v25[13] = *(_QWORD *)&v32[13];
        v22 = v29;
        v23 = v30;
        v26 = 1;
        std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v7);
        WebCore::PaymentCoordinator::didSelectShippingMethod();
        v10 = v21[1];
        v21[1] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v6);
          else
            *(_DWORD *)v10 -= 2;
        }
        v15 = v21[0];
        v21[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v6);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = (WTF::StringImpl *)v20[1];
        v20[1] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v6);
          else
            *(_DWORD *)v16 -= 2;
        }
        v11 = (WTF::StringImpl *)v20[0];
        v20[0] = 0;
        if (v11)
          goto LABEL_53;
      }
      else
      {
        std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)cf, v7);
LABEL_29:
        v12 = *(_QWORD *)a3;
        v13 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v14 = *((_QWORD *)a3 + 3);
        if (v14)
        {
LABEL_30:
          if (v13)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
        }
      }
      return;
    case 0x9E7:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      if (LOBYTE(cf[1]))
      {
        WebKit::WebPaymentCoordinator::validateMerchant(this, (WTF::StringImpl **)cf);
LABEL_25:
        if (LOBYTE(cf[1]))
        {
          v11 = (WTF::StringImpl *)cf[0];
          cf[0] = 0;
          if (v11)
          {
LABEL_53:
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v6);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
      }
      return;
    default:
      return;
  }
}

void `non-virtual thunk to'WebKit::WebPaymentCoordinator::didReceiveMessage(WebKit::WebPaymentCoordinator *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebPaymentCoordinator::didReceiveMessage((WebKit::WebPaymentCoordinator *)((char *)this - 8), a2, a3);
}

void WebKit::WebPaymentCoordinatorProxy::didReceiveMessage(id *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  WTF::StringImpl *v6;
  char v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  void *v13;
  char v14;
  void *v15;
  WTF::StringImpl *v16;
  const void *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  const void *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char v42;
  CFTypeRef v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  char v50;
  WTF::StringImpl *v51;
  id *v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;
  void *v58;
  char v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  _QWORD *v63;
  WTF::StringImpl *v64;
  const void *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void *v84;
  WTF::StringImpl *v85;
  _QWORD *v86;
  WTF::StringImpl *v87;
  const void *v88;
  CFTypeRef v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  CFTypeRef cf;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  __int128 v160;
  WTF::StringImpl *v161[2];
  char v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  __int128 v175;
  __int128 v176;
  char v177;
  char v178;
  CFTypeRef v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  char v187;
  const void *v188;
  char v189;

  v3 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x9D4:
    case 0x9D7:
      WebKit::WebPaymentCoordinatorProxy::abortPaymentSession((WebKit::WebPaymentCoordinatorProxy *)this);
      return;
    case 0x9D5:
      IPC::Decoder::decode<WebKit::PaymentSetupConfiguration>((uint64_t)&cf, (uint64_t *)a3);
      if (v164)
      {
        IPC::Decoder::decode<WebKit::PaymentSetupFeatures>(v3, (uint64_t)&v188);
        v42 = v189;
        if (v189)
        {
          if (!v164)
            goto LABEL_143;
          std::__tuple_leaf<0ul,WebKit::PaymentSetupConfiguration,false>::__tuple_leaf[abi:sn180100]<WebKit::PaymentSetupConfiguration,void>((uint64_t)&v172, (uint64_t *)&cf);
          v179 = v188;
          v42 = 1;
        }
        else
        {
          LOBYTE(v172) = 0;
        }
        v180 = v42;
      }
      else
      {
        LOBYTE(v172) = 0;
        v180 = 0;
      }
      std::__optional_destruct_base<WebKit::PaymentSetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v41);
      if (v180
        || (v146 = *v3, v147 = v3[1], *v3 = 0, v3[1] = 0, (v148 = v3[3]) != 0)
        && v147
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v146), v180))
      {
        v84 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if ((_BYTE)v85)
        {
          cf = v84;
          v3 = (uint64_t *)&v158;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v158, a2);
          v86 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v86 = off_1E34FCFE8;
          v86[1] = cf;
          v87 = v158;
          v158 = 0;
          v86[2] = v87;
          v188 = v86;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v158);
          if (!v180)
            goto LABEL_143;
          WebKit::WebPaymentCoordinatorProxy::beginApplePaySetup((uint64_t)this, (uint64_t *)&v172, &v179, (uint64_t *)&v188);
          v88 = v188;
          v188 = 0;
          if (v88)
            (*(void (**)(const void *))(*(_QWORD *)v88 + 8))(v88);
        }
        if (v180)
        {
          v89 = v179;
          v179 = 0;
          if (v89)
            CFRelease(v89);
          v90 = (WTF::StringImpl *)v176;
          *(_QWORD *)&v176 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, v85);
            else
              *(_DWORD *)v90 -= 2;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v85);
          v95 = v174;
          v174 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, v91);
            else
              *(_DWORD *)v95 -= 2;
          }
          v96 = v173;
          v173 = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 2)
              WTF::StringImpl::destroy(v96, v91);
            else
              *(_DWORD *)v96 -= 2;
          }
          v94 = v172;
          v172 = 0;
          if (v94)
            goto LABEL_139;
        }
      }
      return;
    case 0x9D6:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)a3, &v172);
      if (!(_BYTE)v174)
        goto LABEL_29;
      v29 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v16)
        goto LABEL_29;
      cf = v29;
      v3 = (uint64_t *)&v158;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v158, a2);
      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v30 = off_1E34FCF70;
      v30[1] = cf;
      v31 = v158;
      v158 = 0;
      v30[2] = v31;
      v188 = v30;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v158);
      if (!(_BYTE)v174)
        goto LABEL_143;
      WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard((uint64_t)this, &v172, &v173, (uint64_t *)&v188);
      goto LABEL_27;
    case 0x9D8:
      v8 = *((_QWORD *)a3 + 1);
      v9 = (char *)*v3;
      v10 = v3[2] - *v3;
      if (v8 <= v10)
      {
        v100 = 0;
        v101 = 0;
        *v3 = 0;
        v3[1] = 0;
        v102 = v3[3];
        if (v102)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v102 + 16))(v102);
            v101 = *v3;
            v100 = v3[1];
          }
          else
          {
            v100 = 0;
            v101 = 0;
          }
        }
        goto LABEL_149;
      }
      v11 = &v9[v10];
      v3[2] = (uint64_t)(v11 + 1);
      if (!v9)
      {
        v100 = v8;
        v101 = 0;
LABEL_149:
        v8 = 0;
        v9 = 0;
        *v3 = 0;
        v3[1] = 0;
        v103 = v3[3];
        if (v103)
        {
          if (v100)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v101, v100);
            v9 = (char *)*v3;
            v8 = v3[1];
          }
          else
          {
            v8 = 0;
            v9 = 0;
          }
        }
        goto LABEL_150;
      }
      v12 = *v11;
      if (v12 >= 2)
      {
LABEL_150:
        *v3 = 0;
        v3[1] = 0;
        v104 = v3[3];
        if (v104 && v8)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v104 + 16))(v104, v9);
        LOBYTE(v172) = 0;
        v186 = 0;
LABEL_152:
        v15 = (void *)*v3;
        v105 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v106 = v3[3];
        if (v106 && v105)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v106 + 16))(v106, v15);
        goto LABEL_72;
      }
      if (!v12)
      {
        LOBYTE(cf) = 0;
        LOBYTE(v169) = 0;
        LOBYTE(v172) = 0;
        LOBYTE(v185) = 0;
        v186 = 1;
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v9);
        goto LABEL_72;
      }
      IPC::ArgumentCoder<WebCore::ApplePayCouponCodeUpdate,void>::decode(v3, &cf);
      if ((_BYTE)v169
        || (v13 = (void *)*v3, v149 = v3[1], *v3 = 0, v3[1] = 0, (v150 = v3[3]) != 0)
        && v149
        && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v150 + 16))(v150, v13), (_BYTE)v169))
      {
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)&v172, (uint64_t)&cf);
        v14 = 1;
      }
      else
      {
        v14 = 0;
        LOBYTE(v172) = 0;
      }
      v186 = v14;
      std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v13);
      if (!v186)
        goto LABEL_152;
LABEL_72:
      if (!v186)
      {
        LOBYTE(cf) = 0;
        v170 = 0;
        goto LABEL_184;
      }
      LOBYTE(cf) = 0;
      LOBYTE(v169) = 0;
      if (!(_BYTE)v185)
      {
        v170 = 1;
LABEL_77:
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&v172, v15);
        if (v170)
          goto LABEL_78;
LABEL_184:
        v131 = *v3;
        v132 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v133 = v3[3];
        if (!v133)
          return;
        if (!v132)
          return;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v131);
        if (!v170)
          return;
        goto LABEL_78;
      }
      WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&cf, (uint64_t)&v172);
      v67 = v181;
      v181 = 0;
      v165 = v67;
      v68 = v182;
      v182 = 0;
      v166 = v68;
      v69 = v183;
      v183 = 0;
      v167 = v69;
      v70 = v184;
      v184 = 0;
      v168 = v70;
      LOBYTE(v169) = 1;
      v170 = 1;
      if (v186)
        goto LABEL_77;
LABEL_78:
      WebKit::WebPaymentCoordinatorProxy::completeCouponCodeChange((uint64_t)this, (uint64_t)&cf);
      if (v170)
LABEL_79:
        std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v71);
      return;
    case 0x9D9:
      IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::decode((uint64_t *)a3, (uint64_t)&v172);
      if ((_BYTE)v173)
      {
        cf = v172;
        LOBYTE(v158) = 1;
        WebKit::WebPaymentCoordinatorProxy::completeMerchantValidation((uint64_t)this, &cf);
        if ((_BYTE)v158)
        {
          v43 = cf;
          cf = 0;
          if (v43)
            CFRelease(v43);
        }
        return;
      }
      v115 = *v3;
      v113 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v114 = v3[3];
      if (v114)
      {
        if (v113)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v115);
LABEL_238:
          v116 = *v3;
          v113 = v3[1];
          v114 = v3[3];
LABEL_166:
          *v3 = 0;
          v3[1] = 0;
          if (v114 && v113)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v116);
          return;
        }
      }
      else
      {
LABEL_164:
        v113 = 0;
      }
LABEL_165:
      v116 = 0;
      goto LABEL_166;
    case 0x9DA:
      v44 = *((_QWORD *)a3 + 1);
      v45 = (WTF::StringImpl *)*v3;
      v46 = v3[2] - *v3;
      if (v44 <= v46)
      {
        v117 = 0;
        v118 = 0;
        *v3 = 0;
        v3[1] = 0;
        v119 = v3[3];
        if (v119)
        {
          if (v44)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
            v118 = *v3;
            v117 = v3[1];
          }
          else
          {
            v117 = 0;
            v118 = 0;
          }
        }
      }
      else
      {
        v47 = (unsigned __int8 *)v45 + v46;
        v3[2] = (uint64_t)(v47 + 1);
        if (v45)
        {
          v48 = *v47;
          if (v48 < 2)
          {
            if (!v48)
            {
              LOBYTE(cf) = 0;
              v170 = 0;
              LOBYTE(v172) = 0;
              v186 = 0;
              v187 = 1;
              std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v45);
              goto LABEL_88;
            }
            IPC::ArgumentCoder<WebCore::ApplePayPaymentMethodUpdate,void>::decode(v3, &cf);
            if (v170
              || (v49 = (WTF::StringImpl *)*v3, v153 = v3[1], *v3 = 0, v3[1] = 0, (v154 = v3[3]) != 0)
              && v153
              && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v154 + 16))(v154, v49), v170))
            {
              std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayPaymentMethodUpdate>((uint64_t)&v172, (uint64_t)&cf);
              v50 = 1;
            }
            else
            {
              v50 = 0;
              LOBYTE(v172) = 0;
            }
            v187 = v50;
            std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v49);
            if (!v187)
              goto LABEL_173;
LABEL_88:
            if (v187)
            {
              LOBYTE(cf) = 0;
              v170 = 0;
              if (v186)
              {
                WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&cf, (uint64_t)&v172);
                v74 = v181;
                v181 = 0;
                v165 = v74;
                v75 = v182;
                v182 = 0;
                v166 = v75;
                v76 = v183;
                v183 = 0;
                v167 = v76;
                v77 = v184;
                v184 = 0;
                v168 = v77;
                v78 = v185;
                v185 = 0;
                v169 = v78;
                v170 = 1;
                v171 = 1;
                if (!v187)
                {
LABEL_94:
                  WebKit::WebPaymentCoordinatorProxy::completePaymentMethodSelection((uint64_t)this, (uint64_t)&cf);
                  if (v171)
                    std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v79);
                  return;
                }
              }
              else
              {
                v171 = 1;
              }
              std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172, v51);
              if (v171)
                goto LABEL_94;
            }
            else
            {
              LOBYTE(cf) = 0;
              v171 = 0;
            }
            v140 = *v3;
            v141 = v3[1];
            *v3 = 0;
            v3[1] = 0;
            v142 = v3[3];
            if (!v142)
              return;
            if (!v141)
              return;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 16))(v142, v140);
            if (!v171)
              return;
            goto LABEL_94;
          }
LABEL_171:
          *v3 = 0;
          v3[1] = 0;
          v121 = v3[3];
          if (v121 && v44)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v121 + 16))(v121, v45);
          LOBYTE(v172) = 0;
          v187 = 0;
LABEL_173:
          v51 = (WTF::StringImpl *)*v3;
          v122 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v123 = v3[3];
          if (v123 && v122)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v123 + 16))(v123, v51);
          goto LABEL_88;
        }
        v117 = v44;
        v118 = 0;
      }
      v44 = 0;
      v45 = 0;
      *v3 = 0;
      v3[1] = 0;
      v120 = v3[3];
      if (v120)
      {
        if (v117)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v120 + 16))(v120, v118, v117);
          v45 = (WTF::StringImpl *)*v3;
          v44 = v3[1];
        }
        else
        {
          v44 = 0;
          v45 = 0;
        }
      }
      goto LABEL_171;
    case 0x9DB:
      IPC::ArgumentCoder<WebCore::ApplePayPaymentAuthorizationResult,void>::decode((uint64_t *)a3, &v172);
      if (v178)
        goto LABEL_31;
      v112 = *v3;
      v113 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v114 = v3[3];
      if (!v114)
        goto LABEL_164;
      if (!v113)
        goto LABEL_165;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v112);
      if (!v178)
        goto LABEL_238;
LABEL_31:
      LOWORD(cf) = (_WORD)v172;
      v34 = v173;
      v173 = 0;
      v158 = v34;
      v35 = v174;
      v174 = 0;
      v159 = v35;
      LOBYTE(v160) = 0;
      v162 = 0;
      if (v177)
      {
        v36 = v175;
        v175 = 0u;
        v160 = v36;
        v37 = v176;
        v176 = 0u;
        *(_OWORD *)v161 = v37;
        v162 = 1;
      }
      v163 = 1;
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v175, v33);
      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v173, v38);
      WebKit::WebPaymentCoordinatorProxy::completePaymentSession((uint64_t)this, (WebCore::ApplePayPaymentAuthorizationResult *)&cf);
      if (v163)
      {
        std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v160, v39);
        WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v158, v40);
      }
      return;
    case 0x9DC:
      v53 = *((_QWORD *)a3 + 1);
      v54 = (char *)*v3;
      v55 = v3[2] - *v3;
      if (v53 <= v55)
      {
        v124 = 0;
        v125 = 0;
        *v3 = 0;
        v3[1] = 0;
        v126 = v3[3];
        if (v126)
        {
          if (v53)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v126 + 16))(v126);
            v125 = *v3;
            v124 = v3[1];
          }
          else
          {
            v124 = 0;
            v125 = 0;
          }
        }
      }
      else
      {
        v56 = &v54[v55];
        v3[2] = (uint64_t)(v56 + 1);
        if (v54)
        {
          v57 = *v56;
          if (v57 < 2)
          {
            if (!v57)
            {
              LOBYTE(cf) = 0;
              LOBYTE(v169) = 0;
              LOBYTE(v172) = 0;
              LOBYTE(v185) = 0;
              v186 = 1;
              std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v54);
              goto LABEL_97;
            }
            IPC::ArgumentCoder<WebCore::ApplePayShippingContactUpdate,void>::decode(v3, &cf);
            if ((_BYTE)v169
              || (v58 = (void *)*v3, v155 = v3[1], *v3 = 0, v3[1] = 0, (v156 = v3[3]) != 0)
              && v155
              && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v156 + 16))(v156, v58), (_BYTE)v169))
            {
              std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::__optional_destruct_base[abi:sn180100]<WebCore::ApplePayShippingContactUpdate>((uint64_t)&v172, (uint64_t)&cf);
              v59 = 1;
            }
            else
            {
              v59 = 0;
              LOBYTE(v172) = 0;
            }
            v186 = v59;
            std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v58);
            if (!v186)
              goto LABEL_180;
LABEL_97:
            if (v186)
            {
              LOBYTE(cf) = 0;
              LOBYTE(v169) = 0;
              if ((_BYTE)v185)
              {
                WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&cf, (uint64_t)&v172);
                v80 = v181;
                v181 = 0;
                v165 = v80;
                v81 = v182;
                v182 = 0;
                v166 = v81;
                v82 = v183;
                v183 = 0;
                v167 = v82;
                v83 = v184;
                v184 = 0;
                v168 = v83;
                LOBYTE(v169) = 1;
                v170 = 1;
                if (!v186)
                {
LABEL_103:
                  WebKit::WebPaymentCoordinatorProxy::completeShippingContactSelection((uint64_t)this, (uint64_t)&cf);
                  if (v170)
                    goto LABEL_79;
                  return;
                }
              }
              else
              {
                v170 = 1;
              }
              std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&v172, v60);
              if (v170)
                goto LABEL_103;
            }
            else
            {
              LOBYTE(cf) = 0;
              v170 = 0;
            }
            v143 = *v3;
            v144 = v3[1];
            *v3 = 0;
            v3[1] = 0;
            v145 = v3[3];
            if (!v145)
              return;
            if (!v144)
              return;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, v143);
            if (!v170)
              return;
            goto LABEL_103;
          }
LABEL_178:
          *v3 = 0;
          v3[1] = 0;
          v128 = v3[3];
          if (v128 && v53)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v128 + 16))(v128, v54);
          LOBYTE(v172) = 0;
          v186 = 0;
LABEL_180:
          v60 = (void *)*v3;
          v129 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v130 = v3[3];
          if (v130 && v129)
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v130 + 16))(v130, v60);
          goto LABEL_97;
        }
        v124 = v53;
        v125 = 0;
      }
      v53 = 0;
      v54 = 0;
      *v3 = 0;
      v3[1] = 0;
      v127 = v3[3];
      if (v127)
      {
        if (v124)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v127 + 16))(v127, v125, v124);
          v54 = (char *)*v3;
          v53 = v3[1];
        }
        else
        {
          v53 = 0;
          v54 = 0;
        }
      }
      goto LABEL_178;
    case 0x9DD:
      v20 = *((_QWORD *)a3 + 1);
      v21 = *v3;
      v22 = v3[2] - *v3;
      if (v20 <= v22)
      {
        v107 = 0;
        v108 = 0;
        *v3 = 0;
        v3[1] = 0;
        v109 = v3[3];
        if (v109)
        {
          if (v20)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
            v108 = *v3;
            v107 = v3[1];
          }
          else
          {
            v107 = 0;
            v108 = 0;
          }
        }
      }
      else
      {
        v23 = (unsigned __int8 *)(v21 + v22);
        v3[2] = (uint64_t)(v23 + 1);
        if (v21)
        {
          v24 = *v23;
          if (v24 < 2)
          {
            if (v24)
            {
              IPC::ArgumentCoder<WebCore::ApplePayShippingMethodUpdate,void>::decode(v3, (uint64_t)&cf);
              if ((_BYTE)v167
                || (v25 = (void *)*v3, v151 = v3[1], *v3 = 0, v3[1] = 0, (v152 = v3[3]) != 0)
                && v151
                && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v152 + 16))(v152, v25), (_BYTE)v167))
              {
                WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)&v172, (uint64_t)&cf);
                v26 = v165;
                v165 = 0;
                v181 = v26;
                v27 = v166;
                v166 = 0;
                v182 = v27;
                v28 = 1;
                LOBYTE(v183) = 1;
              }
              else
              {
                v28 = 0;
                LOBYTE(v172) = 0;
              }
            }
            else
            {
              LOBYTE(cf) = 0;
              LOBYTE(v167) = 0;
              std::__optional_copy_assign_base<WebCore::ApplePayShippingMethodUpdate,false>::__optional_copy_assign_base[abi:sn180100](&v172, (uint64_t)&cf);
              v28 = 1;
            }
            LOBYTE(v184) = v28;
            std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v25);
            goto LABEL_82;
          }
LABEL_157:
          *v3 = 0;
          v3[1] = 0;
          v111 = v3[3];
          if (v111 && v20)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v111 + 16))(v111, v21);
          LOBYTE(v172) = 0;
          LOBYTE(v184) = 0;
LABEL_82:
          if ((_BYTE)v184
            || (v134 = *v3, v135 = v3[1], *v3 = 0, v3[1] = 0, (v136 = v3[3]) != 0)
            && v135
            && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 16))(v136, v134), (_BYTE)v184))
          {
            std::__optional_copy_assign_base<WebCore::ApplePayShippingMethodUpdate,false>::__optional_copy_assign_base[abi:sn180100](&cf, (uint64_t)&v172);
            LOBYTE(v168) = 1;
            if (!(_BYTE)v184
              || (std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&v172, v72), (_BYTE)v168))
            {
LABEL_85:
              WebKit::WebPaymentCoordinatorProxy::completeShippingMethodSelection((uint64_t)this, (uint64_t)&cf);
              if ((_BYTE)v168)
                std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ApplePayDetailsUpdateBase *)&cf, v73);
              return;
            }
          }
          else
          {
            LOBYTE(cf) = 0;
            LOBYTE(v168) = 0;
          }
          v137 = *v3;
          v138 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v139 = v3[3];
          if (!v139)
            return;
          if (!v138)
            return;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v139 + 16))(v139, v137);
          if (!(_BYTE)v168)
            return;
          goto LABEL_85;
        }
        v107 = v20;
        v108 = 0;
      }
      v20 = 0;
      v21 = 0;
      *v3 = 0;
      v3[1] = 0;
      v110 = v3[3];
      if (v110)
      {
        if (v107)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v108, v107);
          v21 = *v3;
          v20 = v3[1];
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
      }
      goto LABEL_157;
    case 0x9DE:
      v52 = this + 10;
      objc_msgSend(objc_loadWeak(this + 10), "dismissViewControllerAnimated:completion:", 1, 0);
      objc_storeWeak(v52, 0);
      return;
    case 0x9DF:
      IPC::Decoder::decode<WebKit::PaymentSetupConfiguration>((uint64_t)&v172, (uint64_t *)a3);
      v7 = (char)v179;
      if ((_BYTE)v179)
      {
        std::__tuple_leaf<0ul,WebKit::PaymentSetupConfiguration,false>::__tuple_leaf[abi:sn180100]<WebKit::PaymentSetupConfiguration,void>((uint64_t)&cf, (uint64_t *)&v172);
        v7 = 1;
      }
      else
      {
        LOBYTE(cf) = 0;
      }
      v164 = v7;
      std::__optional_destruct_base<WebKit::PaymentSetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172, v6);
      if (v164)
        goto LABEL_62;
      goto LABEL_144;
    case 0x9E0:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)a3, &v172);
      if (!(_BYTE)v174)
        goto LABEL_29;
      v17 = (const void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v16)
        goto LABEL_29;
      cf = v17;
      v3 = (uint64_t *)&v158;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v158, a2);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v18 = off_1E34FCF98;
      v18[1] = cf;
      v19 = v158;
      v158 = 0;
      v18[2] = v19;
      v188 = v18;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v158);
      if ((_BYTE)v174)
      {
        WebKit::WebPaymentCoordinatorProxy::openPaymentSetup((uint64_t)this, &v172, &v173, (uint64_t *)&v188);
LABEL_27:
        v32 = v188;
        v188 = 0;
        if (v32)
          (*(void (**)(const void *))(*(_QWORD *)v32 + 8))(v32);
LABEL_29:
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v172, v16);
      }
      else
      {
LABEL_143:
        while (1)
        {
          __break(1u);
LABEL_144:
          v97 = *v3;
          v98 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v99 = v3[3];
          if (!v99)
            break;
          if (!v98)
            break;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v97);
          if (!v164)
            break;
LABEL_62:
          v61 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
          if (!(_BYTE)v62)
            goto LABEL_66;
          v172 = v61;
          v3 = (uint64_t *)&v173;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v173, a2);
          v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v63 = off_1E34FCFC0;
          v63[1] = v172;
          v64 = v173;
          v173 = 0;
          v63[2] = v64;
          v188 = v63;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v173);
          if (v164)
          {
            WebKit::WebPaymentCoordinatorProxy::getSetupFeatures((uint64_t)this, (uint64_t *)&cf, (uint64_t *)&v188);
            v65 = v188;
            v188 = 0;
            if (v65)
              (*(void (**)(const void *))(*(_QWORD *)v65 + 8))(v65);
LABEL_66:
            if (v164)
            {
              v66 = v161[0];
              v161[0] = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, v62);
                else
                  *(_DWORD *)v66 -= 2;
              }
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v160, v62);
              v92 = v159;
              v159 = 0;
              if (v92)
              {
                if (*(_DWORD *)v92 == 2)
                  WTF::StringImpl::destroy(v92, v91);
                else
                  *(_DWORD *)v92 -= 2;
              }
              v93 = v158;
              v158 = 0;
              if (v93)
              {
                if (*(_DWORD *)v93 == 2)
                  WTF::StringImpl::destroy(v93, v91);
                else
                  *(_DWORD *)v93 -= 2;
              }
              v94 = (WTF::StringImpl *)cf;
              cf = 0;
              if (v94)
              {
LABEL_139:
                if (*(_DWORD *)v94 == 2)
                  WTF::StringImpl::destroy(v94, v91);
                else
                  *(_DWORD *)v94 -= 2;
              }
            }
            return;
          }
        }
      }
      return;
    default:
      return;
  }
}

uint64_t WebKit::WebPaymentCoordinatorProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  IPC::Encoder *v4;
  unsigned __int8 **v5;
  IPC::Encoder **v6;
  int v9;
  IPC::Encoder *v10;
  IPC::Encoder *v11;
  unsigned __int8 **v12;
  IPC::Encoder *v13;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  void *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  IPC::Encoder *v25;
  _QWORD *v26;
  unsigned __int8 **v27;
  void *v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  IPC::Encoder *v41;
  IPC::Encoder *v42;
  unsigned __int8 **v43;
  WTF::StringImpl *v44;
  _QWORD v45[2];
  _BYTE v46[896];
  char v47;
  WTF::StringImpl *v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  IPC::Encoder *v53;
  unsigned __int8 **v54[111];
  char v55;

  v6 = a4;
  v9 = *(unsigned __int16 *)(a3 + 50);
  if (v9 == 3729)
  {
    v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (!v16
      || (v4 = (IPC::Encoder *)v15,
          v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
          !v18))
    {
      LOBYTE(v41) = 0;
      v47 = 0;
      goto LABEL_36;
    }
    v5 = (unsigned __int8 **)v17;
    IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v48);
    if (!v49)
    {
      LOBYTE(v41) = 0;
      v47 = 0;
      goto LABEL_23;
    }
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v19, (uint64_t)&v50);
    if (!v52)
    {
      LOBYTE(v41) = 0;
      v47 = 0;
      goto LABEL_18;
    }
    IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::decode((uint64_t *)a3, (WebCore::ApplePaySessionPaymentRequest *)&v53);
    if (v55)
      goto LABEL_10;
    while (1)
    {
      v20 = *(void **)a3;
      v39 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v40 = *(_QWORD *)(a3 + 24);
      if (v40 && v39 && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v40 + 16))(v40, v20), v55))
      {
LABEL_10:
        if (!v49 || !v52)
          goto LABEL_41;
        v41 = v4;
        v43 = v5;
        v21 = v48;
        v48 = 0;
        v22 = (uint64_t)v50;
        v50 = 0;
        v44 = v21;
        v45[0] = v22;
        v23 = v51;
        v51 = 0;
        v45[1] = v23;
        WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest((WebCore::ApplePaySessionPaymentRequest *)v46, (const WebCore::ApplePaySessionPaymentRequest *)&v53);
        v47 = 1;
        if (v55)
          MEMORY[0x19AEB36F0](&v53);
      }
      else
      {
        LOBYTE(v41) = 0;
        v47 = 0;
      }
      if (v52)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v20);
LABEL_18:
      if (v49)
      {
        v24 = v48;
        v48 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
LABEL_23:
      if (!v47)
      {
LABEL_36:
        v37 = *(_QWORD *)a3;
        v38 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        result = *(_QWORD *)(a3 + 24);
        if (!result)
          return result;
        if (!v38)
          return 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v37);
        if (!v47)
          return 0;
      }
      v25 = *v6;
      *v6 = 0;
      v53 = v25;
      v6 = (IPC::Encoder **)v54;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v54, a2);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v26 = off_1E34FD038;
      v26[1] = v53;
      v27 = v54[0];
      v53 = 0;
      v54[0] = 0;
      v26[2] = v27;
      v50 = v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v54);
      v29 = v53;
      v53 = 0;
      if (v29)
      {
        IPC::Encoder::~Encoder(v29, v28);
        WTF::fastFree(v30, v31);
      }
      if (v47)
      {
        WebKit::WebPaymentCoordinatorProxy::showPaymentUI(a1, (uint64_t)v41, (uint64_t)v43, &v44, (uint64_t)v45, (uint64_t)v46, (uint64_t *)&v50);
        v32 = (uint64_t)v50;
        v50 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (v47)
        {
          MEMORY[0x19AEB36F0](v46);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v33);
          v35 = v44;
          v44 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v34);
            else
              *(_DWORD *)v35 -= 2;
          }
        }
        return 1;
      }
LABEL_41:
      __break(1u);
    }
  }
  if (v9 == 3728)
  {
    v10 = *a4;
    *a4 = 0;
    v42 = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v43, a2);
    v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v11 = off_1E34FD010;
    *((_QWORD *)v11 + 1) = v42;
    v12 = v43;
    v43 = 0;
    *((_QWORD *)v11 + 2) = v12;
    v53 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v43);
    WebKit::WebPaymentCoordinatorProxy::canMakePayments(a1, &v53);
    v13 = v53;
    v53 = 0;
    if (v13)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v13 + 8))(v13);
    return 1;
  }
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy29CanMakePaymentsWithActiveCardEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCF70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy29CanMakePaymentsWithActiveCardEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FCF70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy29CanMakePaymentsWithActiveCardEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3442;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16OpenPaymentSetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCF98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16OpenPaymentSetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FCF98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16OpenPaymentSetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS_6StringESB_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3444;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

WebCore::ApplePayDetailsUpdateBase *std::__optional_destruct_base<WebCore::ApplePayShippingMethodUpdate,false>::~__optional_destruct_base[abi:sn180100](WebCore::ApplePayDetailsUpdateBase *a1, void *a2)
{
  void *v3;

  if (*((_BYTE *)a1 + 632))
  {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 616, a2);
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(a1, v3);
  }
  return a1;
}

double std::__optional_copy_assign_base<WebCore::ApplePayShippingMethodUpdate,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  uint64_t updated;
  double result;
  uint64_t v5;

  *a1 = 0;
  a1[632] = 0;
  if (*(_BYTE *)(a2 + 632))
  {
    updated = WebCore::ApplePayDetailsUpdateBase::ApplePayDetailsUpdateBase((uint64_t)a1, a2);
    result = 0.0;
    *(_OWORD *)(updated + 616) = 0u;
    v5 = *(_QWORD *)(a2 + 616);
    *(_QWORD *)(a2 + 616) = 0;
    *(_QWORD *)(updated + 616) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 624);
    *(_DWORD *)(a2 + 624) = 0;
    *(_DWORD *)(updated + 624) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 628);
    *(_DWORD *)(a2 + 628) = 0;
    *(_DWORD *)(updated + 628) = v5;
    *(_BYTE *)(updated + 632) = 1;
  }
  return result;
}

WebCore::ApplePayDetailsUpdateBase *std::__optional_destruct_base<WebCore::ApplePayShippingContactUpdate,false>::~__optional_destruct_base[abi:sn180100](WebCore::ApplePayDetailsUpdateBase *a1, void *a2)
{
  WTF::StringImpl *v3;
  void *v4;

  if (*((_BYTE *)a1 + 648))
  {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 632, a2);
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 616, v3);
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase(a1, v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ApplePayPaymentMethodUpdate,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 656))
  {
    v3 = *(WTF::StringImpl **)(a1 + 648);
    *(_QWORD *)(a1 + 648) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 632, a2);
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 616, v4);
    WebCore::ApplePayDetailsUpdateBase::~ApplePayDetailsUpdateBase((WebCore::ApplePayDetailsUpdateBase *)a1, v5);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::PaymentSetupConfiguration>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::PaymentSetupConfiguration,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 80))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebKit::PaymentSetupConfiguration,false>::__tuple_leaf[abi:sn180100]<WebKit::PaymentSetupConfiguration,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  v4 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v6;
  WTF::URL::URL(a1 + 40, a2 + 5);
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::PaymentSetupConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16GetSetupFeaturesEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationEONS_17CompletionHandlerIFvONS7_20PaymentSetupFeaturesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCFC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16GetSetupFeaturesEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationEONS_17CompletionHandlerIFvONS7_20PaymentSetupFeaturesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FCFC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy16GetSetupFeaturesEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationEONS_17CompletionHandlerIFvONS7_20PaymentSetupFeaturesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, NSArray **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3443;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::encodeObjectDirectly<NSArray>((IPC::Encoder *)v5, *a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy18BeginApplePaySetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationERKNS7_20PaymentSetupFeaturesEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FCFE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy18BeginApplePaySetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationERKNS7_20PaymentSetupFeaturesEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34FCFE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26WebPaymentCoordinatorProxy18BeginApplePaySetupEN6WebKit26WebPaymentCoordinatorProxyES8_FvRKNS7_25PaymentSetupConfigurationERKNS7_20PaymentSetupFeaturesEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3441;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy15CanMakePaymentsEN6WebKit26WebPaymentCoordinatorProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FD010;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy15CanMakePaymentsEN6WebKit26WebPaymentCoordinatorProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FD010;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy15CanMakePaymentsEN6WebKit26WebPaymentCoordinatorProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEN6WebKit26WebPaymentCoordinatorProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_26WebPageProxyIdentifierTypeESD_yEERKNS_6StringERKNS_6VectorISH_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSA_29ApplePaySessionPaymentRequestEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34FD038;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEN6WebKit26WebPaymentCoordinatorProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_26WebPageProxyIdentifierTypeESD_yEERKNS_6StringERKNS_6VectorISH_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSA_29ApplePaySessionPaymentRequestEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34FD038;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26WebPaymentCoordinatorProxy13ShowPaymentUIEN6WebKit26WebPaymentCoordinatorProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INS7_26WebPageProxyIdentifierTypeESD_yEERKNS_6StringERKNS_6VectorISH_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSA_29ApplePaySessionPaymentRequestEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPreferences::isFeatureEnabled(WebKit::WebPreferences *this, const API::Feature *a2)
{
  WTF::StringImpl *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *);
  _QWORD *v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v3)
    *(_DWORD *)v3 += 2;
  v4 = (uint64_t *)&unk_1E34FD068;
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = v4 - 3;
    v7 = v5 != 0;
    v8 = v5 - 1;
    v9 = v7 ? v8 : 0;
    if (MEMORY[0x19AEABBCC](v3, *(v4 - 3), v9))
      break;
    v4 += 4;
    if (v6 + 4 == (uint64_t *)&WebKit::WebPreferences::setFeatureEnabledForKey(WTF::String const&,BOOL)::setters)
    {
      v11 = 0;
      goto LABEL_13;
    }
  }
  v12 = (uint64_t (*)(_QWORD *))*(v4 - 1);
  v13 = (_QWORD *)((char *)this + (*v4 >> 1));
  if ((*v4 & 1) != 0)
    v12 = *(uint64_t (**)(_QWORD *))(*v13 + v12);
  v11 = v12(v13);
LABEL_13:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v10);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v11;
}

uint64_t WebKit::WebPreferences::setFeatureEnabled(WebKit::WebPreferences *this, const API::Feature *a2, char a3)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v6 = v3;
    result = WebKit::WebPreferences::setFeatureEnabledForKey(this, (const WTF::String *)&v6, a3);
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
  else
  {
    v6 = 0;
    return WebKit::WebPreferences::setFeatureEnabledForKey(this, (const WTF::String *)&v6, a3);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setFeatureEnabledForKey(WebKit::WebPreferences *this, const WTF::String *a2, char a3)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t (*v12)(_QWORD *, char *);
  _QWORD *v13;
  char v14;

  v14 = a3;
  for (i = (uint64_t *)&unk_1E3500F48; ; i += 4)
  {
    v6 = *(i - 2);
    v7 = i - 3;
    v8 = v6 != 0;
    v9 = v6 - 1;
    v10 = v8 ? v9 : 0;
    result = MEMORY[0x19AEABBCC](*(_QWORD *)a2, *(i - 3), v10);
    if ((_DWORD)result)
      break;
    if (v7 + 4 == (uint64_t *)off_1E3504E10)
      return result;
  }
  v12 = (uint64_t (*)(_QWORD *, char *))*(i - 1);
  v13 = (_QWORD *)((char *)this + (*i >> 1));
  if ((*i & 1) != 0)
    v12 = *(uint64_t (**)(_QWORD *, char *))(*v13 + v12);
  return v12(v13, &v14);
}

_QWORD *WebKit::WebPreferences::enableAllExperimentalFeatures(WebKit::WebPreferences *this)
{
  int v2;
  _QWORD *result;
  int v4;
  BOOL v5;

  v2 = *((_DWORD *)this + 26);
  if (!v2)
    *((_BYTE *)this + 108) = 0;
  *((_DWORD *)this + 26) = v2 + 1;
  v5 = 1;
  WebKit::WebPreferences::setGrammarAndSpellingPseudoElementsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setThumbAndTrackPseudoElementsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSelectShowPickerEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAbortSignalAnyOperationEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAccessHandleEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAllowWebGLInWorkers(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setPerElementSpeakerSelectionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setExposeSpeakersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAlternateWebMPlayerEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAsyncClipboardAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setExtendedAudioDescriptionsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAudioDescriptionsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDOMAudioSessionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDOMAudioSessionFullEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setBeaconAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setBroadcastChannelEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setBroadcastChannelOriginPartitioningEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSCounterStyleAtRuleImageSymbolsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSCounterStyleAtRulesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSFontFaceSizeAdjustEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSStartingStyleAtRuleEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAccentColorEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSAnchorPositioningEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSContentVisibilityEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSInputSecurityEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMasonryEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSMotionPathEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSNestingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setOverscrollBehaviorEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSPaintingAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSRhythmicSizingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSScopeAtRuleEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSScrollAnchoringEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTypedOMColorEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSColorContrastEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSDPropertyEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSFieldSizingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSFontVariantEmojiEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSLightDarkEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSMarginTrimEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSScrollbarColorEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSScrollbarGutterEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSScrollbarWidthEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSStyleQueriesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTextBoxTrimEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTextGroupAlignEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTextJustifyEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTextSpacingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTextWrapStyleEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSTextWrapPrettyEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSOMViewScrollingAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCSSOMViewSmoothScrollingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCanvasColorSpaceEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCanvasFiltersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCanvasLayersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setClearSiteDataHTTPHeaderEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCompressionStreamEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setContactPickerAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCookieStoreAPIExtendedAttributesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCookieStoreAPIServiceWorkerEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCookieStoreAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCrossOriginEmbedderPolicyEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCrossOriginOpenerPolicyEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCustomStateSetEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDeclarativeShadowRootsParserAPIsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDeclarativeShadowRootsSerializerAPIsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDeprecateAESCFBWebCryptoEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDeprecateRSAESPKCSWebCryptoEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDeprecationReportingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setUAVisualTransitionDetectionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDigitalCredentialsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDisallowSyncXHRDuringPageDismissalEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setEmbedElementEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCanvasFingerprintingQuirkEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setBackgroundFetchAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setCFNetworkNetworkLoaderEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMediaSourceInlinePaintingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setFetchPriorityEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setFileSystemAccessEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setFilterLinkDecorationByDefaultEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setFullScreenKeyboardLock(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setUseGPUProcessForCanvasRenderingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setUseGPUProcessForDOMRenderingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setGamepadTriggerRumbleEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setGamepadVibrationActuatorEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setGenericCueAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setGraphicsContextFiltersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setDetailsNameAttributeEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setModelElementEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setModelDocumentEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setInvokerAttributesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setPopoverAttributeEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSwitchControlEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setHighlightAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setImageAnimationControlEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setImageCaptureEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setJavaScriptEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLazyIframeLoadingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLazyImageLoadingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLinkPreloadResponsiveImagesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLinkModulePreloadEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLinkPreconnectEarlyHintsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLinkPrefetchEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLiveRangeSelectionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLoadWebArchiveWithEphemeralStorageEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLocalStorageEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLockdownFontParserEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setLoginStatusAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setManagedMediaSourceEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setManagedMediaSourceNeedsAirPlay(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMediaCapabilitiesExtensionsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMediaSessionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMediaRecorderEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMediaSourceInWorkerEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setMediaStreamTrackProcessingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setNavigationAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setNotificationsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setOffscreenCanvasInWorkersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setOffscreenCanvasEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setOffscreenCanvasDeprecatedCommitEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setOpusDecoderEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setOverlappingBackingStoreProvidersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setBlobRegistryTopOriginPartitioningEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setPermissionsAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setPreferPageRenderingUpdatesNear60FPSEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setPrivateClickMeasurementFraudPreventionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setPrivateTokenUsageByThirdPartyEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setGoogleAntiFlickerOptimizationQuirkEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setReadableByteStreamAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setRemotePlaybackEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setReportingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setRequestVideoFrameCallbackEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScreenOrientationLockingAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScreenOrientationAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScreenWakeLockAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScreenCaptureEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScrollToTextFragmentFeatureDetectionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScrollToTextFragmentEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setScrollDrivenAnimationsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSelectionAPIForShadowDOMEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSendMouseEventsToDisabledFormControlsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setServiceWorkerNavigationPreloadEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setServiceWorkersEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setShapeDetection(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSharedWorkerEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSidewaysWritingModesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setSpeechRecognitionEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setStorageAPIEstimateEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setStorageAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setProcessSwapOnCrossSiteNavigationEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setTrackConfigurationEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setTrustedTypesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setUpgradeMixedContentEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setUserActivationAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setVerifyWindowOpenUserGestureFromUIProcess(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setVerticalFormControlsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setViewTransitionsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setVisualViewportAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setVorbisDecoderEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebAnimationsCustomEffectsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebAnimationsCustomFrameRateEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebCryptoSafeCurvesEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebCryptoX25519Enabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebLocksAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebShareFileAPIEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebAssemblyESMIntegrationEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebCodecsAV1Enabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebCodecsAudioEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebCodecsHEVCEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebCodecsVideoEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebGLDraftExtensionsEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebGLEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebRTCAV1CodecEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebRTCEncodedTransformEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebRTCH265CodecEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebRTCSFrameTransformEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebRTCVP9Profile2CodecEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWebTransportEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWheelEventGesturesBecomeNonBlocking(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setWritingSuggestionsAttributeEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setAlignContentOnBlocksEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setElementCheckVisibilityEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setHTTPEquivEnabled(this, &v5);
  v5 = 1;
  WebKit::WebPreferences::setRequestIdleCallbackEnabled(this, &v5);
  v5 = 1;
  result = WebKit::WebPreferences::setCSSWordBreakAutoPhraseEnabled(this, &v5);
  v4 = *((_DWORD *)this + 26) - 1;
  *((_DWORD *)this + 26) = v4;
  if (!v4)
  {
    if (*((_BYTE *)this + 108))
      return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::resetAllInternalDebugFeatures(WebKit::WebPreferences *this)
{
  int v2;
  WebCore::CocoaApplication *v3;
  char isIBooks;
  char isAsyncTextInputFeatureFlagEnabled;
  char v6;
  WebKit *v7;
  WebCore::IOSApplication *v8;
  uint64_t isMobileSafari;
  char v10;
  WebKit *v11;
  char v12;
  WebKit *v13;
  WebKit *v14;
  WebKit *v15;
  _QWORD *result;
  int v17;
  BOOL v18;

  v2 = *((_DWORD *)this + 26);
  if (!v2)
    *((_BYTE *)this + 108) = 0;
  *((_DWORD *)this + 26) = v2 + 1;
  v18 = 0;
  WebKit::WebPreferences::setPageAtRuleSupportEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setAcceleratedFiltersEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setDOMTestingAPIsEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setAllowViewportShrinkToFitContent(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setAlwaysAllowLocalWebarchive(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setSWVPDecodersAlwaysEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setAppBadgeEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setAppHighlightsEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setAsyncFrameScrollingEnabled(this, &v18);
  v18 = 1;
  v3 = (WebCore::CocoaApplication *)WebKit::WebPreferences::setAsyncOverflowScrollingEnabled(this, &v18);
  isIBooks = WebCore::CocoaApplication::isIBooks(v3);
  isAsyncTextInputFeatureFlagEnabled = 0;
  if ((isIBooks & 1) == 0)
    isAsyncTextInputFeatureFlagEnabled = WebKit::isAsyncTextInputFeatureFlagEnabled(0);
  v18 = isAsyncTextInputFeatureFlagEnabled;
  WebKit::WebPreferences::setUseAsyncUIKitInteractions(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setBuiltInNotificationsEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setSpringTimingFunctionEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCSSTextUnderlinePositionLeftRightEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCaptureAudioInUIProcessEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCaptureVideoInUIProcessEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setClientBadgeEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCompositingBordersVisible(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCompositingRepaintCountersVisible(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setSampleBufferContentKeySessionSupportEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCookieConsentAPIEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setDOMPasteAccessRequestsEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setZoomOnDoubleTapWhenRoot(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setAlwaysZoomOnDoubleTap(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setDeclarativeWebPush(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setDisableScreenSizeOverride(this, &v18);
  {
    v6 = WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK;
  }
  else
  {
    v6 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK = v6;
  }
  v18 = v6;
  v7 = (WebKit *)WebKit::WebPreferences::setShouldDropNearSuspendedAssertionAfterDelay(this, &v18);
  v18 = WebKit::defaultAutomaticLiveResizeEnabled(v7);
  WebKit::WebPreferences::setAutomaticLiveResizeEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCryptoKitEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setEnumeratingAllNetworkInterfacesEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setEnumeratingVisibleNetworkInterfacesEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setICECandidateFilteringEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setMockCaptureDevicesEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setExperimentalSandboxEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setEnterKeyHintEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setEventHandlerDrivenSmoothKeyboardScrollingEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setPreferFasterClickOverDoubleTap(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setFasterClicksEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setRestrictedHTTPResponseAccess(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setForceAlwaysUserScalable(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setCaptureAudioInGPUProcessEnabled(this, &v18);
  v18 = 1;
  v8 = (WebCore::IOSApplication *)WebKit::WebPreferences::setBlockMediaLayerRehostingInWebContentProcess(this, &v18);
  isMobileSafari = WebCore::IOSApplication::isMobileSafari(v8);
  v10 = 0;
  if ((isMobileSafari & 1) == 0)
    v10 = WebCore::IOSApplication::isSafariViewService((WebCore::IOSApplication *)isMobileSafari) ^ 1;
  v18 = v10;
  WebKit::WebPreferences::setManageCaptureStatusBarInGPUProcessEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setCaptureVideoInGPUProcessEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setUseGPUProcessForWebGLEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setAcceleratedDrawingEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setBlockIOKitInWebContentSandbox(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setImageAnalysisDuringFindInPageEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setInWindowFullscreenEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setLayerBasedSVGEngineEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setLegacyOverflowScrollingTouchEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setLegacyLineLayoutVisualCoverageEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setMediaCaptureRequiresSecureConnection(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setLinkSanitizerEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setLocalFileContentSniffingEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setLogsPageMessagesToSystemConsoleEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setCoreMathMLEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setMomentumScrollingAnimatorEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setMouseEventsSimulationEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setMuteCameraOnMicrophoneInterruptionEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setNeedsInAppBrowserPrivacyQuirks(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setFlexFormattingContextIntegrationEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setNotificationEventEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setOpportunisticSweepingAndGarbageCollectionEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setPageVisibilityBasedProcessSuppressionEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setPhotoPickerPrefersOriginalImageFormat(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setPreferSandboxedMediaParsing(this, &v18);
  v18 = 0;
  v11 = (WebKit *)WebKit::WebPreferences::setLegacyPluginQuirkForMailSignaturesEnabled(this, &v18);
  v18 = WebKit::defaultRemoveBackgroundEnabled(v11);
  WebKit::WebPreferences::setRemoveBackgroundEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setSpeakerSelectionRequiresUserGesture(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setGetUserMediaRequiresFocus(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setResourceLoadSchedulingEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setResourceUsageOverlayVisible(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setIsSameSiteStrictEnforcementEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setScrollingPerformanceTestingEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setScrollToTextFragmentGenerationEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setSecureContextChecksEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setSiteIsolationEnabled(this, &v18);
  {
    v12 = WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK;
  }
  else
  {
    v12 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK = v12;
  }
  v18 = v12 ^ 1;
  WebKit::WebPreferences::setShouldTakeNearSuspendedAssertions(this, &v18);
  v18 = 1;
  v13 = (WebKit *)WebKit::WebPreferences::setTextAnimationsEnabled(this, &v18);
  v18 = WebKit::defaultTextRecognitionInVideosEnabled(v13);
  WebKit::WebPreferences::setTextRecognitionInVideosEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setThreadedAnimationResolutionEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setTiledScrollingIndicatorVisible(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setUndoManagerAPIEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setUpgradeKnownHostsToHTTPSEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setUseARKitForModel(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setUserGesturePromisePropagationEnabled(this, &v18);
  v18 = 1;
  v14 = (WebKit *)WebKit::WebPreferences::setServiceWorkersUserGestureEnabled(this, &v18);
  v18 = WebKit::defaultVisualTranslationEnabled(v14);
  WebKit::WebPreferences::setVisualTranslationEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setWebAPIStatisticsEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setWebAPIsInShadowRealmEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setWebArchiveTestingModeEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebGLUsingMetal(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setWebInspectorEngineeringSettingsAllowed(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCAudioLatencyAdaptationEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCDTMFEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCH264HardwareEncoderEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCH264LowLatencyEncoderEnabled(this, &v18);
  v18 = 0;
  WebKit::WebPreferences::setWebRTCMediaPipelineAdditionalLoggingEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCPlatformTCPSocketsEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCPlatformUDPSocketsEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCRemoteVideoFrameEnabled(this, &v18);
  v18 = 1;
  WebKit::WebPreferences::setWebRTCSocketsProxyingEnabled(this, &v18);
  v18 = 1;
  v15 = (WebKit *)WebKit::WebPreferences::setWebRTCVP9Profile0CodecEnabled(this, &v18);
  v18 = WebKit::isAsyncTextInputFeatureFlagEnabled(v15) ^ 1;
  WebKit::WebPreferences::setWriteRichTextDataWhenCopyingOrDragging(this, &v18);
  v18 = 0;
  result = WebKit::WebPreferences::setRequestStorageAccessThrowsExceptionUntilReload(this, &v18);
  v17 = *((_DWORD *)this + 26) - 1;
  *((_DWORD *)this + 26) = v17;
  if (!v17)
  {
    if (*((_BYTE *)this + 108))
      return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldDisplayCaptions(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDisplayCaptions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAcceleratedCompositingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedCompositingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAcceleratedCompositingForFixedPositionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedCompositingForFixedPositionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAggressiveTileRetentionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::aggressiveTileRetentionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowContentSecurityPolicySourceStarToMatchAnyProtocol(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowContentSecurityPolicySourceStarToMatchAnyProtocol(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowDisplayOfInsecureContent(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowDisplayOfInsecureContent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowFileAccessFromFileURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowFileAccessFromFileURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowMultiElementImplicitSubmission(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowMultiElementImplicitSubmission(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowRunningOfInsecureContent(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowRunningOfInsecureContent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowSettingAnyXHRHeaderFromFileURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsAirPlayForMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsInlineMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsInlineMediaPlaybackAfterFullscreen(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowsPictureInPictureMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::alternateFormControlDesignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAlternateFullScreenControlDesignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alternateFullScreenControlDesignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAnimatedImageAsyncDecodingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::animatedImageAsyncDecodingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAppleMailPaginationQuirkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::appleMailPaginationQuirkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::applePayCapabilityDisclosureAllowed(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::applePayEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAsynchronousSpellCheckingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asynchronousSpellCheckingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAudioControlsScaleWithPageZoom(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::audioControlsScaleWithPageZoom(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAuthorAndUserStylesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::authorAndUserStylesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBackspaceKeyNavigationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::backspaceKeyNavigationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCaretBrowsingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::caretBrowsingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::colorFilterEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setContentChangeObserverEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::contentChangeObserverEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setContentDispositionAttachmentSandboxEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::contentDispositionAttachmentSandboxEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCursiveFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setDNSPrefetchingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dnsPrefetchingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDOMPasteAllowed(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domPasteAllowed(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDatabasesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::databasesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setDefaultFixedFontSize(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setDefaultFontSize(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setDefaultTextEncodingName(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setDeveloperExtrasEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::developerExtrasEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeviceOrientationEventEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deviceOrientationEventEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::deviceOrientationPermissionAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDisabledAdaptationsMetaTagEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::disabledAdaptationsMetaTagEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDownloadAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::downloadAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setEditableLinkBehavior(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setEnableInheritURIQueryComponent(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::enableInheritURIQueryComponent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setEncryptedMediaAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::encryptedMediaAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setExtensibleSSOEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isExtensibleSSOEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFTPDirectoryTemplatePath(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setFantasyFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setFixedFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setForceCompositingMode(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceCompositingMode(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setForceFTPDirectoryListings(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceFTPDirectoryListings(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setForceWebGLUsesLowPower(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceWebGLUsesLowPower(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setHiddenPageCSSAnimationSuspensionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hiddenPageCSSAnimationSuspensionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setInactiveMediaCaptureSteamRepromptIntervalInMinutes(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::incompleteImageBorderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::inlineMediaPlaybackRequiresPlaysInlineAttribute(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setInspectorAttachedHeight(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setInspectorAttachedWidth(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setInspectorAttachmentSide(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setInspectorStartsAttached(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inspectorStartsAttached(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setInteractionRegionInlinePadding(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setInteractionRegionMinimumCornerRadius(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setInterruptAudioOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::interruptAudioOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInterruptVideoOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::interruptVideoOnPageVisibilityChangeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::invisibleAutoplayNotPermitted(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setJavaScriptCanAccessClipboard(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::javaScriptCanAccessClipboard(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::javaScriptCanOpenWindowsAutomatically(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::javaScriptMarkupEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setJavaScriptRuntimeFlags(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setLargeImageAsyncDecodingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::largeImageAsyncDecodingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkPreconnect(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreconnect(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkPreloadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreloadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLoadDeferringEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loadDeferringEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLoadsImagesAutomatically(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loadsImagesAutomatically(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLowPowerVideoAudioBufferSizeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lowPowerVideoAudioBufferSizeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMathMLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mathMLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaCapabilitiesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaCapabilitiesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaControlsContextMenusEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaControlsContextMenusEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaControlsScaleWithPageZoom(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaControlsScaleWithPageZoom(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaDataLoadsAutomatically(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setMediaPreferredFullscreenWidth(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMediaPreloadingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaPreloadingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaStreamEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaStreamEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaUserGestureInheritsFromDocument(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaUserGestureInheritsFromDocument(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setMinimumFontSize(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setMinimumZoomFontSize(WebKit::WebPreferences *this, double *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMockCaptureDevicesPromptEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mockCaptureDevicesPromptEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMockScrollbarsControllerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mockScrollbarsControllerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMockScrollbarsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mockScrollbarsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNeedsAdobeFrameReloadingQuirk(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsAdobeFrameReloadingQuirk(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNeedsFrameNameFallbackToIdQuirk(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsFrameNameFallbackToIdQuirk(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNeedsKeyboardEventDisambiguationQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsKeyboardEventDisambiguationQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPDFPluginEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pdfPluginEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPDFPluginHUDEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pdfPluginHUDEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPassiveTouchListenersAsDefaultOnDocument(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::passiveTouchListenersAsDefaultOnDocument(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPasswordEchoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::passwordEchoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPictographFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setPictureInPictureAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pictureInPictureAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setPitchCorrectionAlgorithm(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::punchOutWhiteBackgroundsInDarkMode(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRequiresPageVisibilityToPlayAudio(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requiresPageVisibilityToPlayAudio(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::requiresUserGestureForAudioPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRequiresUserGestureForMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requiresUserGestureForMediaPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::requiresUserGestureForVideoPlayback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::requiresUserGestureToLoadVideo(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSansSerifFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setSelectTrailingWhitespaceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectTrailingWhitespaceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSerifFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setServiceControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::serviceWorkerEntitlementDisabledForTesting(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldAllowUserInstalledFonts(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldConvertInvalidURLsToBlank(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldConvertInvalidURLsToBlank(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldConvertPositionStyleOnCopy(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldDecidePolicyBeforeLoadingQuickLookPreview(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldDisplaySubtitles(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDisplaySubtitles(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldDisplayTextDescriptions(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDisplayTextDescriptions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldEnableTextAutosizingBoost(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldEnableTextAutosizingBoost(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldIgnoreMetaViewport(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldPrintBackgrounds(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldRespectImageOrientation(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldRestrictBaseURLSchemes(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldSuppressTextInputFromEditingDuringProvisionalNavigation(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldUseServiceWorkerShortTimeout(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldUseServiceWorkerShortTimeout(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShowsToolTipOverTruncatedText(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showsToolTipOverTruncatedText(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShowsURLsInToolTipsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showsURLsInToolTipsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShrinksStandaloneImagesToFit(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shrinksStandaloneImagesToFit(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSmartInsertDeleteEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::smartInsertDeleteEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSourceBufferChangeTypeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sourceBufferChangeTypeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSpatialNavigationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::spatialNavigationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setStandalone(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::standalone(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setStandardFontFamily(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::suppressesIncrementalRendering(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::systemPreviewEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTabsToLinks(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::tabsToLinks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::telephoneNumberParsingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTemporaryTileCohortRetentionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::temporaryTileCohortRetentionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTextAreasAreResizable(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAreasAreResizable(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::textAutosizingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTextExtractionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textExtractionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTextInteractionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textInteractionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setThreadedScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::threadedScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTreatsAnyTextCSSLinkAsStylesheet(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::treatsAnyTextCSSLinkAsStylesheet(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseImageDocumentForSubframePDF(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useImageDocumentForSubframePDF(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUsePreHTML5ParserQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::usePreHTML5ParserQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUsesBackForwardCache(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::usesBackForwardCache(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUsesEncodingDetector(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::usesEncodingDetector(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVP8DecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::vp8DecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVP9DecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::vp9DecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::videoFullscreenRequiresElementFullscreen(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVideoPresentationModeAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::videoPresentationModeAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVideoQualityIncludesDisplayCompositingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::videoQualityIncludesDisplayCompositingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::setVisibleDebugOverlayRegions(WebKit::WebPreferences *this, const unsigned int *a2)
{
  WebKit::WebPreferencesStore *v4;
  uint64_t result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, *a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setVisualViewportEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::visualViewportEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWantsBalancedSetDefersLoadingBehavior(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::wantsBalancedSetDefersLoadingBehavior(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAudioEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAudioEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebMParserEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webMParserEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebSecurityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webSecurityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebSocketEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webSocketEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWindowFocusRestricted(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::windowFocusRestricted(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWirelessPlaybackTargetAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::wirelessPlaybackTargetAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGrammarAndSpellingPseudoElementsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::grammarAndSpellingPseudoElementsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setThumbAndTrackPseudoElementsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::thumbAndTrackPseudoElementsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSelectShowPickerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectShowPickerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPageAtRuleSupportEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pageAtRuleSupportEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAVFoundationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isAVFoundationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAbortSignalAnyOperationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::abortSignalAnyOperationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAcceleratedFiltersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedFiltersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAccessHandleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::accessHandleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDOMTestingAPIsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domTestingAPIsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowMediaContentTypesRequiringHardwareSupportAsFallback(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowViewportShrinkToFitContent(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowViewportShrinkToFitContent(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAllowWebGLInWorkers(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::allowWebGLInWorkers(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPerElementSpeakerSelectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::perElementSpeakerSelectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setExposeSpeakersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::exposeSpeakersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowTopNavigationToDataURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::allowUniversalAccessFromFileURLs(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAlternateWebMPlayerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alternateWebMPlayerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAlwaysAllowLocalWebarchive(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alwaysAllowLocalWebarchive(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSWVPDecodersAlwaysEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sWVPDecodersAlwaysEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAppBadgeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::appBadgeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::appHighlightsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAsyncFrameScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asyncFrameScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAsyncOverflowScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asyncOverflowScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseAsyncUIKitInteractions(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useAsyncUIKitInteractions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAsyncClipboardAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::asyncClipboardAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::attachmentElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::attachmentWideLayoutEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setExtendedAudioDescriptionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::extendedAudioDescriptionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAudioDescriptionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::audioDescriptionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDOMAudioSessionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domAudioSessionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDOMAudioSessionFullEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domAudioSessionFullEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAutomaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidth(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBeaconAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::beaconAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBroadcastChannelEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::broadcastChannelEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBroadcastChannelOriginPartitioningEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::broadcastChannelOriginPartitioningEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBuiltInNotificationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::builtInNotificationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSS3DTransformBackfaceVisibilityInteroperabilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::css3DTransformBackfaceVisibilityInteroperabilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSCounterStyleAtRuleImageSymbolsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssCounterStyleAtRuleImageSymbolsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSCounterStyleAtRulesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssCounterStyleAtRulesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSFontFaceSizeAdjustEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssFontFaceSizeAdjustEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSStartingStyleAtRuleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssStartingStyleAtRuleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAccentColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::accentColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSAnchorPositioningEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssAnchorPositioningEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSContentVisibilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssContentVisibilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSInputSecurityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssInputSecurityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMasonryEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::masonryEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSMotionPathEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssMotionPathEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSNestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssNestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOverscrollBehaviorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::overscrollBehaviorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSPaintingAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssPaintingAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSRhythmicSizingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssRhythmicSizingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSScopeAtRuleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScopeAtRuleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSScrollAnchoringEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollAnchoringEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSpringTimingFunctionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::springTimingFunctionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTypedOMColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTypedOMColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSUnprefixedBackdropFilterEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssUnprefixedBackdropFilterEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSColorContrastEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssColorContrastEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSDPropertyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssDPropertyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSFieldSizingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssFieldSizingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSFontVariantEmojiEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssFontVariantEmojiEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSLightDarkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssLightDarkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSMarginTrimEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssMarginTrimEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSScrollbarColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollbarColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSScrollbarGutterEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollbarGutterEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSScrollbarWidthEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssScrollbarWidthEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSStyleQueriesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssStyleQueriesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextBoxTrimEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextBoxTrimEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextGroupAlignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextGroupAlignEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextJustifyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextJustifyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextSpacingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextSpacingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextUnderlinePositionLeftRightEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextUnderlinePositionLeftRightEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextWrapStyleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextWrapStyleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSTextWrapPrettyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssTextWrapPrettyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSOMViewScrollingAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssOMViewScrollingAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSOMViewSmoothScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssOMViewSmoothScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCacheAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cacheAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCanvasColorSpaceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasColorSpaceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCanvasFiltersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasFiltersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCanvasLayersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasLayersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCanvasUsesAcceleratedDrawing(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasUsesAcceleratedDrawing(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCaptureAudioInUIProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureAudioInUIProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCaptureVideoInUIProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureVideoInUIProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setClearSiteDataHTTPHeaderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::clearSiteDataHTTPHeaderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setClientBadgeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::clientBadgeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInputTypeColorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeColorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCompositingBordersVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::compositingBordersVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCompositingRepaintCountersVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::compositingRepaintCountersVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCompressionStreamEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::compressionStreamEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setContactPickerAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::contactPickerAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSampleBufferContentKeySessionSupportEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sampleBufferContentKeySessionSupportEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCookieConsentAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieConsentAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCookieStoreAPIExtendedAttributesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieStoreAPIExtendedAttributesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCookieStoreAPIServiceWorkerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieStoreAPIServiceWorkerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCookieStoreAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieStoreAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCookieEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cookieEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCrossOriginEmbedderPolicyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::crossOriginEmbedderPolicyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCrossOriginOpenerPolicyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::crossOriginOpenerPolicyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCustomPasteboardDataEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::customPasteboardDataEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCustomStateSetEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::customStateSetEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDOMPasteAccessRequestsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domPasteAccessRequestsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDOMTimersThrottlingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::domTimersThrottlingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setZoomOnDoubleTapWhenRoot(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::zoomOnDoubleTapWhenRoot(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAlwaysZoomOnDoubleTap(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alwaysZoomOnDoubleTap(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDataTransferItemsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dataTransferItemsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDataListElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dataListElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInputTypeDateEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeDateEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDateTimeInputsEditableComponentsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::dateTimeInputsEditableComponentsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeclarativeShadowRootsParserAPIsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::declarativeShadowRootsParserAPIsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeclarativeShadowRootsSerializerAPIsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::declarativeShadowRootsSerializerAPIsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeclarativeWebPush(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::declarativeWebPush(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeprecateAESCFBWebCryptoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deprecateAESCFBWebCryptoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeprecateRSAESPKCSWebCryptoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deprecateRSAESPKCSWebCryptoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDeprecationReportingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::deprecationReportingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUAVisualTransitionDetectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::uAVisualTransitionDetectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::diagnosticLoggingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDigitalCredentialsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::digitalCredentialsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDirectoryUploadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::directoryUploadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIsThirdPartyCookieBlockingDisabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isThirdPartyCookieBlockingDisabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIsFirstPartyWebsiteDataRemovalDisabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFirstPartyWebsiteDataRemovalDisabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDisableScreenSizeOverride(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::disableScreenSizeOverride(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDisallowSyncXHRDuringPageDismissalEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::disallowSyncXHRDuringPageDismissalEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldDropNearSuspendedAssertionAfterDelay(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldDropNearSuspendedAssertionAfterDelay(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setEmbedElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::embedElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAutomaticLiveResizeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::automaticLiveResizeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCanvasFingerprintingQuirkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::canvasFingerprintingQuirkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCryptoKitEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cryptoKitEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::enumeratingAllNetworkInterfacesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setEnumeratingVisibleNetworkInterfacesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::enumeratingVisibleNetworkInterfacesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::iceCandidateFilteringEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::legacyEncryptedMediaAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mockCaptureDevicesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBackgroundWebContentRunningBoardThrottlingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::backgroundWebContentRunningBoardThrottlingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setBackgroundFetchAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::backgroundFetchAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCFNetworkNetworkLoaderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cFNetworkNetworkLoaderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setExperimentalSandboxEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::experimentalSandboxEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setEnterKeyHintEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::enterKeyHintEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setEventHandlerDrivenSmoothKeyboardScrollingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::eventHandlerDrivenSmoothKeyboardScrollingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaSourceInlinePaintingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSourceInlinePaintingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFTPEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::ftpEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPreferFasterClickOverDoubleTap(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::preferFasterClickOverDoubleTap(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFasterClicksEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fasterClicksEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFetchPriorityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fetchPriorityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFileSystemAccessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fileSystemAccessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFileReaderAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fileReaderAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRestrictedHTTPResponseAccess(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::restrictedHTTPResponseAccess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFilterLinkDecorationByDefaultEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::filterLinkDecorationByDefaultEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setForceAlwaysUserScalable(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::forceAlwaysUserScalable(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFullScreenKeyboardLock(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fullScreenKeyboardLock(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::fullScreenEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCaptureAudioInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureAudioInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBlockMediaLayerRehostingInWebContentProcess(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blockMediaLayerRehostingInWebContentProcess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseGPUProcessForCanvasRenderingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForCanvasRenderingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setManageCaptureStatusBarInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::manageCaptureStatusBarInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseGPUProcessForDOMRenderingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForDOMRenderingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseGPUProcessForMediaEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForMediaEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCaptureVideoInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::captureVideoInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseGPUProcessForWebGLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGPUProcessForWebGLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCPlatformCodecsInGPUProcessEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCPlatformCodecsInGPUProcessEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGamepadTriggerRumbleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::gamepadTriggerRumbleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGamepadVibrationActuatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::gamepadVibrationActuatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGamepadsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::gamepadsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGenericCueAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::genericCueAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGraphicsContextFiltersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::graphicsContextFiltersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAcceleratedDrawingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::acceleratedDrawingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setDetailsNameAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::detailsNameAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setModelElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::modelElementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setModelDocumentEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::modelDocumentEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelDocumentEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInteractiveFormValidationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::interactiveFormValidationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInvokerAttributesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::invokerAttributesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPopoverAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::popoverAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSwitchControlEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::switchControlEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingAutoIncreases(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hiddenPageDOMTimerThrottlingAutoIncreases(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hiddenPageDOMTimerThrottlingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setHighlightAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::highlightAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setHyperlinkAuditingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::hyperlinkAuditingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBlockIOKitInWebContentSandbox(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blockIOKitInWebContentSandbox(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setItpDebugModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::itpDebugModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTextAutosizingUsesIdempotentMode(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAutosizingUsesIdempotentMode(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setImageAnalysisDuringFindInPageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::imageAnalysisDuringFindInPageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setImageAnimationControlEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::imageAnimationControlEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setImageCaptureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::imageCaptureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setImageControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setInWindowFullscreenEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inWindowFullscreenEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIndexedDBAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::indexedDBAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIsAccessibilityIsolatedTreeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::javaScriptEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLayerBasedSVGEngineEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::layerBasedSVGEngineEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLazyIframeLoadingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lazyIframeLoadingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLazyImageLoadingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lazyImageLoadingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLegacyOverflowScrollingTouchEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyOverflowScrollingTouchEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLegacyLineLayoutVisualCoverageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyLineLayoutVisualCoverageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShowModalDialogEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showModalDialogEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaCaptureRequiresSecureConnection(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkSanitizerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkSanitizerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkPreloadResponsiveImagesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreloadResponsiveImagesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkModulePreloadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkModulePreloadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkPreconnectEarlyHintsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPreconnectEarlyHintsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLinkPrefetchEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::linkPrefetchEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLiveRangeSelectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::liveRangeSelectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLoadWebArchiveWithEphemeralStorageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loadWebArchiveWithEphemeralStorageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLocalFileContentSniffingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::localFileContentSniffingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLocalStorageEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::localStorageEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLockdownFontParserEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::lockdownFontParserEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLogsPageMessagesToSystemConsoleEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::logsPageMessagesToSystemConsoleEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLoginStatusAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::loginStatusAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mainContentUserGestureOverrideEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setManagedMediaSourceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::managedMediaSourceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setManagedMediaSourceNeedsAirPlay(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::managedMediaSourceNeedsAirPlay(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCoreMathMLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::coreMathMLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaCapabilitiesExtensionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaCapabilitiesExtensionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaCapabilityGrantsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaCapabilityGrantsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaSessionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSessionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaSourceEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::mediaDevicesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaRecorderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaRecorderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaSourceInWorkerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaSourceInWorkerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMediaStreamTrackProcessingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mediaStreamTrackProcessingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMomentumScrollingAnimatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::momentumScrollingAnimatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInputTypeMonthEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeMonthEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMouseEventsSimulationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::mouseEventsSimulationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setMuteCameraOnMicrophoneInterruptionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::muteCameraOnMicrophoneInterruptionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNavigationAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::navigationAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNeedsInAppBrowserPrivacyQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::needsInAppBrowserPrivacyQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::needsSiteSpecificQuirks(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::needsStorageAccessFromFileURLsQuirk(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFlexFormattingContextIntegrationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::flexFormattingContextIntegrationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNotificationEventEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::notificationEventEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setNotificationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::notificationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAccessibilityThreadTextApisEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::accessibilityThreadTextApisEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOffscreenCanvasInWorkersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::offscreenCanvasInWorkersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOffscreenCanvasEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::offscreenCanvasEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOffscreenCanvasDeprecatedCommitEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::offscreenCanvasDeprecatedCommitEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOpportunisticSweepingAndGarbageCollectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::opportunisticSweepingAndGarbageCollectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOpusDecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::opusDecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setOverlappingBackingStoreProvidersEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::overlappingBackingStoreProvidersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPageVisibilityBasedProcessSuppressionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pageVisibilityBasedProcessSuppressionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setBlobRegistryTopOriginPartitioningEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::blobRegistryTopOriginPartitioningEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPermissionsAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::permissionsAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPhotoPickerPrefersOriginalImageFormat(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::photoPickerPrefersOriginalImageFormat(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPreferPageRenderingUpdatesNear60FPSEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::preferPageRenderingUpdatesNear60FPSEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPreferSandboxedMediaParsing(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::preferSandboxedMediaParsing(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPrivateClickMeasurementDebugModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateClickMeasurementDebugModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPrivateClickMeasurementFraudPreventionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateClickMeasurementFraudPreventionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPrivateClickMeasurementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateClickMeasurementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPrivateTokenUsageByThirdPartyEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::privateTokenUsageByThirdPartyEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPushAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::pushAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setLegacyPluginQuirkForMailSignaturesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::legacyPluginQuirkForMailSignaturesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGoogleAntiFlickerOptimizationQuirkEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::googleAntiFlickerOptimizationQuirkEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setReadableByteStreamAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::readableByteStreamAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRemotePlaybackEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::remotePlaybackEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRemoveBackgroundEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::removeBackgroundEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setReportingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::reportingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRequestVideoFrameCallbackEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requestVideoFrameCallbackEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSpeakerSelectionRequiresUserGesture(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::speakerSelectionRequiresUserGesture(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setFullscreenRequirementForScreenOrientationLockingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::fullscreenRequirementForScreenOrientationLockingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setGetUserMediaRequiresFocus(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::getUserMediaRequiresFocus(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setResourceLoadSchedulingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::resourceLoadSchedulingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setResourceUsageOverlayVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::resourceUsageOverlayVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSKAttributionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sKAttributionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::safeBrowsingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIsSameSiteStrictEnforcementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isSameSiteStrictEnforcementEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScreenOrientationLockingAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenOrientationLockingAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScreenOrientationAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenOrientationAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScreenWakeLockAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenWakeLockAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScreenCaptureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::screenCaptureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollingPerformanceTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollingPerformanceTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollToTextFragmentFeatureDetectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentFeatureDetectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollToTextFragmentGenerationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentGenerationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollToTextFragmentIndicatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentIndicatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollToTextFragmentMarkingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentMarkingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollToTextFragmentEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollToTextFragmentEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollAnimatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollAnimatorEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setScrollDrivenAnimationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::scrollDrivenAnimationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSearchInputIncrementalAttributeAndSearchEventEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::searchInputIncrementalAttributeAndSearchEventEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSecureContextChecksEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::secureContextChecksEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSelectionAPIForShadowDOMEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectionAPIForShadowDOMEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSelectionFlippingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::selectionFlippingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSendMouseEventsToDisabledFormControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sendMouseEventsToDisabledFormControlsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setServiceWorkerNavigationPreloadEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::serviceWorkerNavigationPreloadEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::serviceWorkersEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShapeDetection(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shapeDetection(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSharedWorkerEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sharedWorkerEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShowMediaStatsContextMenuItemEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::showMediaStatsContextMenuItemEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSidewaysWritingModesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::sidewaysWritingModesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSiteIsolationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::siteIsolationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSpeechRecognitionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::speechRecognitionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setSpeechSynthesisAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::speechSynthesisAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setStorageAPIEstimateEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::storageAPIEstimateEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setStorageAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::storageAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setProcessSwapOnCrossSiteNavigationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::processSwapOnCrossSiteNavigationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setShouldTakeNearSuspendedAssertions(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::shouldTakeNearSuspendedAssertions(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTextAnimationsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textAnimationsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTextRecognitionInVideosEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::textRecognitionInVideosEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setThreadedAnimationResolutionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::threadedAnimationResolutionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTiledScrollingIndicatorVisible(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::tiledScrollingIndicatorVisible(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInputTypeTimeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeTimeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTrackConfigurationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::trackConfigurationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setTrustedTypesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::trustedTypesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::undoManagerAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUnifiedPDFEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::unifiedPDFEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIPAddressAndLocalhostMixedContentUpgradeTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::iPAddressAndLocalhostMixedContentUpgradeTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUpgradeKnownHostsToHTTPSEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::upgradeKnownHostsToHTTPSEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUpgradeMixedContentEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::upgradeMixedContentEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseARKitForModel(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useARKitForModel(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUseGiantTiles(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::useGiantTiles(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUserActivationAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::userActivationAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setUserGesturePromisePropagationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::userGesturePromisePropagationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setServiceWorkersUserGestureEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::serviceWorkersUserGestureEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVerifyWindowOpenUserGestureFromUIProcess(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::verifyWindowOpenUserGestureFromUIProcess(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVerticalFormControlsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::verticalFormControlsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setViewTransitionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::viewTransitionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setViewGestureDebuggingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::viewGestureDebuggingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVisualTranslationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::visualTranslationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVisualViewportAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::visualViewportAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setVorbisDecoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::vorbisDecoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAPIStatisticsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAPIStatisticsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAPIsInShadowRealmEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAPIsInShadowRealmEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAnimationsCustomEffectsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAnimationsCustomEffectsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAnimationsCustomFrameRateEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAnimationsCustomFrameRateEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebArchiveDebugModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webArchiveDebugModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebArchiveTestingModeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webArchiveTestingModeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAuthenticationASEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAuthenticationASEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAuthenticationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAuthenticationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebCryptoSafeCurvesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCryptoSafeCurvesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebCryptoX25519Enabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCryptoX25519Enabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebLocksAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webLocksAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebShareFileAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webShareFileAPIEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebShareEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webShareEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebAssemblyESMIntegrationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webAssemblyESMIntegrationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebCodecsAV1Enabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsAV1Enabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebCodecsAudioEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsAudioEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebCodecsHEVCEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsHEVCEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebCodecsVideoEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webCodecsVideoEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebGLDraftExtensionsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLDraftExtensionsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebGLTimerQueriesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLTimerQueriesEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebGLUsingMetal(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLUsingMetal(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebGLEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGLEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebGPUEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webGPUEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebInspectorEngineeringSettingsAllowed(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webInspectorEngineeringSettingsAllowed(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCAV1CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCAV1CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCAudioLatencyAdaptationEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCAudioLatencyAdaptationEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCDTMFEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCDTMFEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCEncodedTransformEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCEncodedTransformEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCH264HardwareEncoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCH264HardwareEncoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCH264LowLatencyEncoderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCH264LowLatencyEncoderEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCH265CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCH265CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCMediaPipelineAdditionalLoggingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCMediaPipelineAdditionalLoggingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPeerConnectionVideoScalingAdaptationDisabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::peerConnectionVideoScalingAdaptationDisabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPeerConnectionEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::peerConnectionEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCPlatformTCPSocketsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCPlatformTCPSocketsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCPlatformUDPSocketsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCPlatformUDPSocketsEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCRemoteVideoFrameEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCRemoteVideoFrameEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCSFrameTransformEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCSFrameTransformEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCSocketsProxyingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCSocketsProxyingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCVP9Profile0CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCVP9Profile0CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebRTCVP9Profile2CodecEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webRTCVP9Profile2CodecEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWebTransportEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::webTransportEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInputTypeWeekEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeWeekEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWheelEventGesturesBecomeNonBlocking(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::wheelEventGesturesBecomeNonBlocking(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setPassiveWheelListenersAsDefaultOnDocument(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::passiveWheelListenersAsDefaultOnDocument(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWriteRichTextDataWhenCopyingOrDragging(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::writeRichTextDataWhenCopyingOrDragging(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setWritingSuggestionsAttributeEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::writingSuggestionsAttributeEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIsFirstPartyWebsiteDataRemovalLiveOnTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setIsFirstPartyWebsiteDataRemovalReproTestingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::isFirstPartyWebsiteDataRemovalReproTestingEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setAlignContentOnBlocksEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::alignContentOnBlocksEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setInputTypeDateTimeLocalEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::inputTypeDateTimeLocalEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setElementCheckVisibilityEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::elementCheckVisibilityEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebPreferences::httpEquivEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRequestIdleCallbackEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requestIdleCallbackEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setRequestStorageAccessThrowsExceptionUntilReload(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::requestStorageAccessThrowsExceptionUntilReload(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key, a3);
}

_QWORD *WebKit::WebPreferences::setCSSWordBreakAutoPhraseEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::cssWordBreakAutoPhraseEnabled(WebKit::WebPreferences *this, uint64_t a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)this + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key, a3);
}

uint64_t *WebKit::WebPreferencesKey::textExtractionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssDPropertyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssDPropertyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssLightDarkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasLayersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasLayersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cryptoKitEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cryptoKitEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAnimationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::trustedTypesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::trustedTypesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(void)::key;
}

uint64_t IPC::handleMessage<Messages::WebProcess::RegisterURLSchemeAsWebExtension,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::String const&)const>(uint64_t *a1, WebKit::WebProcess *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  char v6;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a1, (uint64_t)&v5);
  if (v6)
    WebKit::WebProcess::registerURLSchemeAsWebExtension(a2, &v5);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess20InitializeWebProcessEN6WebKit10WebProcessES8_FvONS7_28WebProcessCreationParametersEONS_17CompletionHandlerIFvN7WebCore15ProcessIdentityEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504E40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess20InitializeWebProcessEN6WebKit10WebProcessES8_FvONS7_28WebProcessCreationParametersEONS_17CompletionHandlerIFvN7WebCore15ProcessIdentityEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504E40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess20InitializeWebProcessEN6WebKit10WebProcessES8_FvONS7_28WebProcessCreationParametersEONS_17CompletionHandlerIFvN7WebCore15ProcessIdentityEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3458;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::Encoder::addAttachment(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[1496])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t)a1, (unint64_t *)a2, (uint64_t)v5);
  }
  else
  {
    *a1 = 0;
    a1[1496] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageCreationParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  const char **v5[186];
  char v6;

  IPC::Decoder::decode<WebKit::WebPageCreationParameters>(a2, (uint64_t)v5);
  if (v6)
  {
    if (*(_BYTE *)(a3 + 8))
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      WebKit::WebPageCreationParameters::WebPageCreationParameters(a1 + 8, (uint64_t *)v5);
      *(_BYTE *)(a1 + 1496) = 1;
      if (v6)
        WebKit::WebPageCreationParameters::~WebPageCreationParameters(v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 1496) = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::PrewarmInformation>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 32))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v8);
  if (v9)
  {
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16FetchWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504E68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16FetchWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504E68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16FetchWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3456;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::WebsiteData,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess17DeleteWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504E90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess17DeleteWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504E90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess17DeleteWebsiteDataEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3454;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess27DeleteWebsiteDataForOriginsEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess27DeleteWebsiteDataForOriginsEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess27DeleteWebsiteDataForOriginsEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3453;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess26DeleteWebsiteDataForOriginEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess26DeleteWebsiteDataForOriginEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess26DeleteWebsiteDataForOriginEN6WebKit10WebProcessES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3452;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess32ReloadExecutionContextsForOriginEN6WebKit10WebProcessES8_FvRKN7WebCore12ClientOriginENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess32ReloadExecutionContextsForOriginEN6WebKit10WebProcessES8_FvRKN7WebCore12ClientOriginENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess32ReloadExecutionContextsForOriginEN6WebKit10WebProcessES8_FvRKN7WebCore12ClientOriginENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3462;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16DeleteAllCookiesEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16DeleteAllCookiesEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16DeleteAllCookiesEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3451;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16PrepareToSuspendEN6WebKit10WebProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit10WebProcessES8_FvNS7_16RemoteWorkerTypeENS_23ObjectIdentifierGenericINS7_23PageGroupIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_INS7_26WebPageProxyIdentifierTypeESD_yEENSA_IN7WebCore18PageIdentifierTypeESD_yEERKNS7_19WebPreferencesStoreEONSH_17RegistrableDomainENSt3__18optionalINSH_16ProcessQualifiedINS_4UUIDEEEEEONS7_30RemoteWorkerInitializationDataEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit10WebProcessES8_FvNS7_16RemoteWorkerTypeENS_23ObjectIdentifierGenericINS7_23PageGroupIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_INS7_26WebPageProxyIdentifierTypeESD_yEENSA_IN7WebCore18PageIdentifierTypeESD_yEERKNS7_19WebPreferencesStoreEONSH_17RegistrableDomainENSt3__18optionalINSH_16ProcessQualifiedINS_4UUIDEEEEEONS7_30RemoteWorkerInitializationDataEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit10WebProcessES8_FvNS7_16RemoteWorkerTypeENS_23ObjectIdentifierGenericINS7_23PageGroupIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSA_INS7_26WebPageProxyIdentifierTypeESD_yEENSA_IN7WebCore18PageIdentifierTypeESD_yEERKNS7_19WebPreferencesStoreEONSH_17RegistrableDomainENSt3__18optionalINSH_16ProcessQualifiedINS_4UUIDEEEEEONS7_30RemoteWorkerInitializationDataEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3455;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess19SetIsInProcessCacheEN6WebKit10WebProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess19SetIsInProcessCacheEN6WebKit10WebProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess19SetIsInProcessCacheEN6WebKit10WebProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3466;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31GetActivePagesOriginsForTestingEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3504FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31GetActivePagesOriginsForTestingEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31GetActivePagesOriginsForTestingEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3457;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess12IsJITEnabledEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess12IsJITEnabledEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess12IsJITEnabledEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3459;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess15ClearCachedPageEN6WebKit10WebProcessES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess15ClearCachedPageEN6WebKit10WebProcessES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess15ClearCachedPageEN6WebKit10WebProcessES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3450;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SeedResourceLoadStatisticsForTestingEN6WebKit10WebProcessES8_FvRKN7WebCore17RegistrableDomainESC_bONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SeedResourceLoadStatisticsForTestingEN6WebKit10WebProcessES8_FvRKN7WebCore17RegistrableDomainESC_bONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SeedResourceLoadStatisticsForTestingEN6WebKit10WebProcessES8_FvRKN7WebCore17RegistrableDomainESC_bONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3463;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31SetThirdPartyCookieBlockingModeEN6WebKit10WebProcessES8_FvN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31SetThirdPartyCookieBlockingModeEN6WebKit10WebProcessES8_FvN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess31SetThirdPartyCookieBlockingModeEN6WebKit10WebProcessES8_FvN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3467;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SetDomainsWithCrossPageStorageAccessEN6WebKit10WebProcessES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35050A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SetDomainsWithCrossPageStorageAccessEN6WebKit10WebProcessES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35050A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess36SetDomainsWithCrossPageStorageAccessEN6WebKit10WebProcessES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3465;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess41SendResourceLoadStatisticsDataImmediatelyEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35050D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess41SendResourceLoadStatisticsDataImmediatelyEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35050D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess41SendResourceLoadStatisticsDataImmediatelyEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3464;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess13ReleaseMemoryEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35050F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess13ReleaseMemoryEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35050F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess13ReleaseMemoryEN6WebKit10WebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3461;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::WebProcessPool::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v6;
  _BYTE v7[8];
  CFTypeRef *v8;
  char v9;

  CFRetain(this[1]);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x9EA:
      IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((uint64_t *)a3, v7);
      if (v9)
        WebKit::WebProcessPool::handleMessage((uint64_t)this, (uint64_t)a2, (uint64_t)v7, &v8);
      std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
      break;
    case 0x9EB:
      IPC::handleMessageAsync<Messages::WebProcessPool::PlayGamepadEffect,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(unsigned int,WTF::String const&,WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, WTF::StringImpl **, _QWORD, _OWORD *, WTF::StringImpl **))WebKit::WebProcessPool::playGamepadEffect, 0);
      break;
    case 0x9EC:
      IPC::Decoder::decode<std::tuple<WTF::Seconds,unsigned long long>>((uint64_t *)a3, v7);
      break;
    case 0x9ED:
      WebKit::WebProcessPool::startedUsingGamepads((WebKit::WebProcessPool *)this, (IPC::Connection *)a2);
      break;
    case 0x9EE:
      IPC::handleMessageAsync<Messages::WebProcessPool::StopGamepadEffects,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(unsigned int,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, WTF::StringImpl **, WTF::StringImpl **))WebKit::WebProcessPool::stopGamepadEffects, 0);
      break;
    case 0x9EF:
      IPC::handleMessageAsync<Messages::WebProcessPool::StoppedUsingGamepads,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(IPC::Connection &,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unsigned __int8 **, _QWORD **))WebKit::WebProcessPool::stoppedUsingGamepads, 0);
      break;
    default:
      break;
  }
  CFRelease(this[1]);
}

unint64_t IPC::handleMessageAsync<Messages::WebProcessPool::StoppedUsingGamepads,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(IPC::Connection &,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unsigned __int8 **, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E3505120;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, unsigned __int8 **, _QWORD **))(*v13 + a4);
    a4(v13, a1, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebProcessPool::PlayGamepadEffect,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(unsigned int,WTF::String const&,WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, WTF::StringImpl **, _QWORD, _OWORD *, WTF::StringImpl **), uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v10;
  unsigned int v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  unsigned __int8 v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  unsigned __int8 v37;
  _OWORD v38[3];
  char v39;
  WTF::StringImpl *v40;
  char v41;
  _OWORD v42[3];
  char v43;

  v6 = a2[1];
  v7 = *a2;
  v8 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v6 < v8 || v6 - v8 <= 3)
  {
    v21 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v7, v6);
        v17 = (WTF::StringImpl *)*a2;
        v21 = a2[1];
      }
      else
      {
        v21 = 0;
        v17 = 0;
      }
    }
LABEL_32:
    *a2 = 0;
    a2[1] = 0;
    v20 = (_QWORD *)a2[3];
    if (!v20)
      goto LABEL_33;
LABEL_40:
    if (v21)
      (*(void (**)(_QWORD *, WTF::StringImpl *))(*v20 + 16))(v20, v17);
    goto LABEL_33;
  }
  v10 = (unsigned int *)(v7 + v8);
  a2[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v21 = v6;
    v17 = 0;
    goto LABEL_32;
  }
  v15 = *v10;
  IPC::Decoder::decode<WTF::String>(a2, &v40);
  if (!v41)
    goto LABEL_33;
  v16 = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>(a2);
  v18 = v16;
  if (v16 > 0xFFu)
  {
    v20 = IPC::ArgumentCoder<WebCore::GamepadEffectParameters,void>::decode(a2, (uint64_t)v42);
    if (v43
      || (v17 = (WTF::StringImpl *)*a2, v33 = a2[1], *a2 = 0, a2[1] = 0, (v34 = a2[3]) != 0)
      && v33
      && (v20 = (_QWORD *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v34 + 16))(v34, v17), v43))
    {
      if (!v41)
      {
        __break(1u);
        goto LABEL_40;
      }
      v35 = v15;
      v22 = v40;
      v40 = 0;
      v36 = v22;
      v37 = v18;
      v38[0] = v42[0];
      v38[1] = v42[1];
      v19 = 1;
      v38[2] = v42[2];
    }
    else
    {
      v19 = 0;
      LOBYTE(v35) = 0;
    }
    v39 = v19;
  }
  else
  {
    v19 = 0;
    LOBYTE(v35) = 0;
    v39 = 0;
  }
  if (!v41)
    goto LABEL_18;
  v23 = v40;
  v40 = 0;
  if (!v23)
    goto LABEL_18;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_18:
    if (!v19)
      goto LABEL_33;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v23, v17);
  if (!v19)
  {
LABEL_33:
    v31 = *a2;
    v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v32)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v31);
    }
    return result;
  }
LABEL_19:
  v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v25)
    goto LABEL_25;
  *(_QWORD *)&v42[0] = v24;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v42 + 1, a1);
  v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v26 = off_1E3505148;
  *((_QWORD *)v26 + 1) = *(_QWORD *)&v42[0];
  v27 = *((_QWORD *)&v42[0] + 1);
  *((_QWORD *)&v42[0] + 1) = 0;
  *((_QWORD *)v26 + 2) = v27;
  v40 = v26;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v42 + 1);
  v28 = (_QWORD *)(a3 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(_QWORD *, _QWORD, WTF::StringImpl **, _QWORD, _OWORD *, WTF::StringImpl **))(*v28 + a4);
  a4(v28, v35, &v36, v18, v38, &v40);
  result = v40;
  v40 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
LABEL_25:
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebProcessPool::StopGamepadEffects,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(unsigned int,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  unsigned __int8 **v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  char v20;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<int,WTF::String>>(a2, &v18);
  if (v20)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v12 = off_1E3505170;
      *((_QWORD *)v12 + 1) = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      *((_QWORD *)v12 + 2) = v13;
      result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v14 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(*v14 + a4);
      a4(v14, v18, &v19, &v17);
      result = v17;
      v17 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
    if (v20)
    {
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebProcessPool::didReceiveMessage(CFTypeRef *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebProcessPool::didReceiveMessage(this - 2, a2, a3);
}

BOOL WebKit::WebProcessPool::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  _BOOL8 v8;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = *(_WORD *)(a3 + 50) == 3730
    && IPC::handleMessageSynchronous<Messages::WebProcessPool::HandleSynchronousMessage,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned __int8 **, char *, uint64_t *, _QWORD **))WebKit::WebProcessPool::handleSynchronousMessage, 0);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return v8;
}

BOOL IPC::handleMessageSynchronous<Messages::WebProcessPool::HandleSynchronousMessage,WebKit::WebProcessPool,WebKit::WebProcessPool,void ()(IPC::Connection &,WTF::String const&,WebKit::UserData const&,WTF::CompletionHandler<void ()(WebKit::UserData&&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned __int8 **, char *, uint64_t *, _QWORD **), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _BOOL8 result;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20;
  _QWORD *v21;
  char v22[8];
  uint64_t v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(a2, v22);
  v12 = v24;
  if (!v24)
  {
LABEL_7:
    std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
    return v12 != 0;
  }
  v13 = *a3;
  *a3 = 0;
  v19 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E3505198;
  v14[1] = v19;
  v15 = v20;
  v20 = 0;
  v14[2] = v15;
  v21 = v14;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
  result = 0;
  if (v24)
  {
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned __int8 **, char *, uint64_t *, _QWORD **))(*v17 + a5);
    a5(v17, a1, v22, &v23, &v21);
    v18 = v21;
    v21 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

BOOL `non-virtual thunk to'WebKit::WebProcessPool::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::WebProcessPool::didReceiveSyncMessage(a1 - 16, a2, a3, a4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool20StoppedUsingGamepadsEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool20StoppedUsingGamepadsEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool20StoppedUsingGamepadsEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3448;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool17PlayGamepadEffectEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEN7WebCore23GamepadHapticEffectTypeERKNSC_23GamepadEffectParametersEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool17PlayGamepadEffectEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEN7WebCore23GamepadHapticEffectTypeERKNSC_23GamepadEffectParametersEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool17PlayGamepadEffectEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEN7WebCore23GamepadHapticEffectTypeERKNSC_23GamepadEffectParametersEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3446;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool18StopGamepadEffectsEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool18StopGamepadEffectsEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14WebProcessPool18StopGamepadEffectsEN6WebKit14WebProcessPoolES8_FvjRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3447;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::Seconds,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Seconds,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::Seconds,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebProcessPool24HandleSynchronousMessageEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebProcessPool24HandleSynchronousMessageEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E3505198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14WebProcessPool24HandleSynchronousMessageEN6WebKit14WebProcessPoolES8_FvRNS2_10ConnectionERKNS_6StringERKNS7_8UserDataEONS_17CompletionHandlerIFvOSE_EEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t IPC::handleMessageSynchronous<Messages::WebProcessProxy::ShouldTerminate,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E35051F8;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::WebProcessProxy::GetNetworkProcessConnection,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E3505220;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

BOOL IPC::handleMessageSynchronous<Messages::WebProcessProxy::WrapCryptoKey,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  WTF *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  WTF *v23;
  int v24;
  unsigned __int8 v25;

  IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, (uint64_t)&v23);
  v11 = v25;
  if (!v25)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E3505248;
  v13[1] = v20;
  v14 = v21;
  v21 = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
  result = 0;
  if (v25)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v25)
    {
      v19 = v23;
      if (v23)
      {
        v23 = 0;
        v24 = 0;
        WTF::fastFree(v19, v17);
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::WebProcessProxy::UnwrapCryptoKey,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WebCore::WrappedCryptoKey &&::Vector<unsigned char,0ul,WebCore::WrappedCryptoKey &&::CrashOnOverflow,16ul,WebCore::WrappedCryptoKey &&::FastMalloc>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  WTF *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  _BYTE v23[24];
  WTF *v24;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::WrappedCryptoKey>>(a2, (uint64_t)v23);
  v11 = v26;
  if (v26)
  {
    v12 = *a3;
    *a3 = 0;
    v20 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E3505270;
    v13[1] = v20;
    v14 = v21;
    v21 = 0;
    v13[2] = v14;
    v22 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
    if (!v26)
      __break(1u);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v15 + a5);
    a5(v15, v23, &v22);
    v17 = v22;
    v22 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v26)
    {
      v18 = v24;
      if (v24)
      {
        v24 = 0;
        v25 = 0;
        WTF::fastFree(v18, v16);
      }
    }
  }
  return v11 != 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15WebProcessProxy16GetNotificationsEN6WebKit15WebProcessProxyES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35051C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15WebProcessProxy16GetNotificationsEN6WebKit15WebProcessProxyES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35051C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15WebProcessProxy16GetNotificationsEN6WebKit15WebProcessProxyES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3449;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 240 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::NotificationData,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 240;
      v9 -= 240;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15ShouldTerminateEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35051F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15ShouldTerminateEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E35051F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15ShouldTerminateEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvONS7_28NetworkProcessConnectionInfoEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy13WrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy13WrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E3505248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy13WrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt3__18optionalISC_EEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15UnwrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15UnwrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E3505270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy15UnwrapCryptoKeyEN6WebKit15WebProcessProxyES8_FvON7WebCore16WrappedCryptoKeyEONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

WebPushD::WebPushDaemon *WebPushD::WebPushDaemon::WebPushDaemon(WebPushD::WebPushDaemon *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = 0;
  *((_WORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  WebCore::Timer::Timer<WebPushD::WebPushDaemon,WebPushD::WebPushDaemon>((WebPushD::WebPushDaemon *)((char *)this + 64), (uint64_t)this, (uint64_t)WebPushD::WebPushDaemon::incomingPushTransactionTimerFired, 0);
  *((_QWORD *)this + 15) = 0;
  WebCore::Timer::Timer<WebPushD::WebPushDaemon,WebPushD::WebPushDaemon>((WebPushD::WebPushDaemon *)((char *)this + 128), (uint64_t)this, (uint64_t)WebPushD::WebPushDaemon::silentPushTimerFired, 0);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = (char *)this + 192;
  *((_QWORD *)this + 25) = (char *)this + 192;
  *((_QWORD *)this + 26) = 0;
  return this;
}

void sub_19780CED0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  WebPushD::PushService **v2;
  WebCore::TimerBase *v3;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (void *)v1[15];
  if (v5)

  v1[8] = (uint64_t)off_1E34B3740;
  v6 = v1[14];
  v1[14] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase(v3);
  v8 = v1[7];
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = v1[7];
      do
      {
        if (*(_QWORD *)(v10 + 16) ^ 1 | *(_QWORD *)(v10 + 24))
          v10 = WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>::~KeyValuePair(v10);
        v10 += 64;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  v11 = v1[3];
  v12 = v1[4];
  v13 = (WTF *)v1[5];
  if (v11 > v12)
  {
    if (v12)
    {
      v26 = 8 * v12;
      do
      {
        v27 = *(_QWORD *)v13;
        *(_QWORD *)v13 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v13 = (WTF *)((char *)v13 + 8);
        v26 -= 8;
      }
      while (v26);
      v13 = (WTF *)v1[5];
      v11 = v1[3];
    }
    v22 = *((unsigned int *)v1 + 12);
    if (v11 != v22)
    {
      v23 = (uint64_t *)((char *)v13 + 8 * v11);
      v24 = 8 * v22 - 8 * v11;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    if (v11 == v12)
    {
      if (!v13)
        goto LABEL_16;
LABEL_31:
      v1[5] = 0;
      *((_DWORD *)v1 + 12) = 0;
      WTF::fastFree(v13, v7);
LABEL_16:
      std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100](v2, 0);
      v15 = *v1;
      if (v15)
      {
        v16 = *(unsigned int *)(v15 - 4);
        if ((_DWORD)v16)
        {
          v17 = (_DWORD **)(v15 + 8);
          do
          {
            if (*(v17 - 1) != (_DWORD *)-1)
            {
              v18 = *v17;
              *v17 = 0;
              if (v18)
              {
                if (v18[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
                else
                  --v18[4];
              }
            }
            v17 += 2;
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((WTF *)(v15 - 16), v14);
      }
      _Unwind_Resume(a1);
    }
    v19 = (uint64_t *)((char *)v13 + 8 * v11);
    v20 = 8 * v12 - 8 * v11;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v13 = (WTF *)v1[5];
  if (!v13)
    goto LABEL_16;
  goto LABEL_31;
}

void WebPushD::WebPushDaemon::incomingPushTransactionTimerFired(WebPushD::WebPushDaemon *this)
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = qword_1ECE716B8;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR)
      || (*(_WORD *)v4 = 0,
          _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "UI process failed to fetch push before incoming push transaction timed out.", v4, 2u), (v2 = (void *)*((_QWORD *)this + 15)) != 0))
    {

    }
  }
  *((_QWORD *)this + 15) = 0;
}

void WebPushD::WebPushDaemon::silentPushTimerFired(WebPushD::WebPushDaemon *this)
{
  double v2;
  WTF *v3;
  double v4;
  const WTF::URL *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];
  WTF::StringImpl *v19;
  char v20;
  _BYTE v21[24];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now(this);
  v3 = (WTF *)*((_QWORD *)this + 25);
  if (v3 != (WebPushD::WebPushDaemon *)((char *)this + 192))
  {
    v4 = v2;
    do
    {
      if (*((double *)v3 + 7) > v4)
        break;
      WTF::URL::URL((uint64_t)v18, (WTF::StringImpl **)v3 + 6);
      WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)v18, v5);
      WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v21);
      if (v22 != -1)
        ((void (*)(char *, _BYTE *))off_1E35052D8[v22])(&v20, v21);
      v22 = -1;
      v7 = v18[0];
      v18[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *((_QWORD *)this + 1);
      v9 = (_DWORD *)*((_QWORD *)v3 + 2);
      if (v9)
        *v9 += 2;
      v10 = (_DWORD *)*((_QWORD *)v3 + 3);
      if (v10)
        *v10 += 2;
      v11 = *((_QWORD *)v3 + 4);
      v12 = *((_QWORD *)v3 + 5);
      v13 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v14 = &off_1E3505488;
      *((_QWORD *)v14 + 2) = v9;
      *((_QWORD *)v14 + 3) = v10;
      *((_QWORD *)v14 + 4) = v11;
      *((_QWORD *)v14 + 5) = v12;
      *((_QWORD *)v14 + 6) = v13;
      v18[0] = v14;
      WebPushD::PushService::incrementSilentPushCount(v8, (uint64_t)v3 + 16, &v19, (uint64_t *)v18);
      v15 = v18[0];
      v18[0] = 0;
      if (v15)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
      v3 = std::list<WebPushD::WebPushDaemon::PotentialSilentPush,WTF::FastAllocator<WebPushD::WebPushDaemon::PotentialSilentPush>>::erase((WebPushD::WebPushDaemon *)((char *)this + 192), v3);
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    while ((WebPushD::WebPushDaemon *)((char *)this + 192) != v3);
  }
  WebPushD::WebPushDaemon::rescheduleSilentPushTimer(this);
}

void sub_19780D31C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22)
{
  if (a9)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebPushD::WebPushDaemon::startMockPushService(WebPushD::WebPushDaemon *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;

  *((_BYTE *)this + 16) = 1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3505320;
  v2[1] = this;
  v6 = v2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3505348;
  v3[1] = this;
  v5 = v3;
  WebPushD::PushService::createMockService((uint64_t *)&v6, (uint64_t *)&v5);
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_19780D4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WebPushD::WebPushDaemon::startPushService(WebPushD::WebPushDaemon *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD *v10;
  _QWORD *v11;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3505370;
  v6[1] = this;
  v11 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3505398;
  v7[1] = this;
  v10 = v7;
  WebPushD::PushService::create(a2, a3, (uint64_t *)&v11, (uint64_t *)&v10);
  v8 = (uint64_t)v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v11;
  v11 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

void sub_19780D5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::WorkQueue *WebPushD::WebPushDaemon::setPushService(uint64_t a1, WebPushD::PushService **a2)
{
  WebPushD::PushService *v3;
  WTF::WorkQueue *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::WorkQueue *v8;
  WTF::WorkQueue *v9;

  v3 = *a2;
  *a2 = 0;
  result = std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 8), v3);
  *(_BYTE *)(a1 + 17) = 1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (v5 > v6)
    v6 += *(unsigned int *)(a1 + 48);
  if (v6 != v5)
  {
    v7 = WTF::WorkQueue::main(result);
    v8 = (WTF::WorkQueue *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = off_1E35053C0;
    *((_QWORD *)v8 + 1) = a1;
    v9 = v8;
    (*(void (**)(uint64_t, WTF::WorkQueue **))(*(_QWORD *)v7 + 32))(v7, &v9);
    result = v9;
    v9 = 0;
    if (result)
      return (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19780D690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebPushD::WebPushDaemon::releaseIncomingPushTransaction(WebPushD::WebPushDaemon *this)
{
  void *v2;

  if ((*((_QWORD *)this + 12) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebPushD::WebPushDaemon *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)

  *((_QWORD *)this + 15) = 0;
}

void WebPushD::WebPushDaemon::connectionEventHandler(uint64_t *a1, id a2)
{
  uint64_t uint64;
  xpc_connection_t remote_connection;
  xpc_connection_t v6;
  _xpc_connection_s *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  xpc_connection_t v14;
  int v15;
  uint64_t v16;
  const void *data;
  void *v18;
  xpc_object_t reply;
  IPC::Decoder *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _xpc_connection_s *v25;
  NSObject *v26;
  _xpc_connection_s *v27;
  NSObject *v28;
  _xpc_connection_s *v29;
  NSObject *v30;
  _xpc_connection_s *v31;
  IPC::Decoder *v32;
  WTF *v33;
  void *v34;
  IPC::Decoder *v35;
  size_t length;
  _BYTE buf[22];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (object_getClass(a2) != (Class)MEMORY[0x1E0C812F8])
    return;
  uint64 = xpc_dictionary_get_uint64(a2, "protocol version");
  if (uint64 == 4)
  {
    remote_connection = xpc_dictionary_get_remote_connection(a2);
    v6 = remote_connection;
    if (remote_connection)
      v7 = remote_connection;
    v8 = *a1;
    if (*a1)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(xpc_connection_t *)(v8 + 16 * v13);
      if (v14 == v6)
      {
LABEL_11:
        v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
        if (v16)
        {
          length = 0;
          data = xpc_dictionary_get_data(a2, "encoded message", &length);
          if (data)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            IPC::Decoder::create((WTF *)length, data, (uint64_t *)buf, &v35);
            WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v18);
            if (v35)
            {
              reply = xpc_dictionary_create_reply(a2);
              v20 = v35;
              v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v21 = &off_1E35053E8;
              v21[1] = v6;
              v21[2] = reply;
              *(_QWORD *)buf = v21;
              (*(void (**)(uint64_t, IPC::Decoder *, _BYTE *))(*(_QWORD *)v16 + 24))(v16, v20, buf);
              v22 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              v6 = 0;
            }
            else
            {
              v30 = qword_1ECE716B8;
              if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - Failed to create decoder for xpc messasge", buf, 2u);
              }
              v31 = xpc_dictionary_get_remote_connection(a2);
              if (v31)
                xpc_connection_cancel(v31);
            }
            v32 = v35;
            v35 = 0;
            if (v32)
            {
              IPC::Decoder::~Decoder(v32);
              WTF::fastFree(v33, v34);
            }
          }
          else
          {
            v28 = qword_1ECE716B8;
            if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_196BCC000, v28, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - No encoded message data in xpc message", buf, 2u);
            }
            v29 = xpc_dictionary_get_remote_connection(a2);
            if (v29)
              xpc_connection_cancel(v29);
          }
LABEL_25:
          if (v6)

          return;
        }
      }
      else
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(xpc_connection_t *)(v8 + 16 * v13);
          ++v15;
          if (v14 == v6)
            goto LABEL_11;
        }
      }
    }
    v26 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "WebPushDaemon::connectionEventHandler - Could not find a PushClientConnection mapped to this xpc request", buf, 2u);
    }
    v27 = xpc_dictionary_get_remote_connection(a2);
    if (v27)
      xpc_connection_cancel(v27);
    goto LABEL_25;
  }
  v23 = uint64;
  v24 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 4;
    _os_log_error_impl(&dword_196BCC000, v24, OS_LOG_TYPE_ERROR, "Received request with protocol version %llu not matching daemon protocol version %llu", buf, 0x16u);
  }
  v25 = xpc_dictionary_get_remote_connection(a2);
  if (v25)
    xpc_connection_cancel(v25);
}

void sub_19780DA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, IPC::Decoder *a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  WTF *v13;
  void *v14;

  if (a9)
  {
    IPC::Decoder::~Decoder(a9);
    WTF::fastFree(v13, v14);
  }
  if (v11)

  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::connectionAdded(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(*a1, a2))
  {
    result = 198;
    __break(0xC471u);
    return result;
  }
  WebPushD::PushClientConnection::create((void *)a2, &v22);
  v4 = *a1;
  if (*a1
    || (WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(a1),
        (v4 = *a1) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(v4 + 16 * v9);
  v11 = *v10;
  if (*v10)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != a2)
    {
      if (v11 == -1)
        v12 = v10;
      v9 = (v9 + v13) & v5;
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      ++v13;
      if (!*v10)
      {
        if (v12)
        {
          *v12 = 0;
          v12[1] = 0;
          --*(_DWORD *)(*a1 - 16);
          v10 = v12;
        }
        goto LABEL_13;
      }
    }
    result = v10[1];
    v10[1] = v22;
    if (result)
      goto LABEL_28;
  }
  else
  {
LABEL_13:
    *v10 = a2;
    v14 = v22;
    v22 = 0;
    result = v10[1];
    v10[1] = v14;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        return result;
    }
    else if (3 * v21 > 4 * v20)
    {
      return result;
    }
    WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(a1);
    result = v22;
    if (v22)
    {
LABEL_28:
      if (*(_DWORD *)(result + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
  }
  return result;
}

void sub_19780DCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[4] == 1)
      (*(void (**)(void))(*(_QWORD *)a10 + 8))();
    else
      --a10[4];
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::WebPushDaemon::connectionRemoved(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebPushD::PushClientConnection *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v4 = *a1;
  if ((WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(*a1, a2) & 1) == 0)
  {
    __break(0xC471u);
    return;
  }
  if (!v4)
    goto LABEL_10;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(_QWORD *)(v4 + 16 * v9);
  if (v10 != a2)
  {
    v11 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v11) & v5;
      v10 = *(_QWORD *)(v4 + 16 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_9;
    }
    v9 = *(unsigned int *)(v4 - 4);
  }
LABEL_9:
  if (v9 == *(_DWORD *)(v4 - 4))
  {
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  v13 = (_QWORD *)(v4 + 16 * v9);
  v14 = v13 + 1;
  v12 = (WebPushD::PushClientConnection *)v13[1];
  if (v12)
  {
    *v14 = 0;
    v4 = *a1;
    if (!*a1)
    {
      v15 = 0;
      goto LABEL_21;
    }
  }
  v15 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  if (v15 != v13)
  {
LABEL_21:
    if (v15 != v13)
    {
      *v13 = -1;
      *v14 = 0;
      ++*(_DWORD *)(*a1 - 16);
      v16 = *a1;
      v17 = *a1 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *a1;
      if (*a1)
      {
        v19 = 6 * *(_DWORD *)(v18 - 12);
        v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
          WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(a1, v20 >> 1);
      }
    }
  }
LABEL_11:
  WebPushD::PushClientConnection::connectionClosed(v12);
  if (v12)
  {
    if (*((_DWORD *)v12 + 4) == 1)
      (*(void (**)(WebPushD::PushClientConnection *))(*(_QWORD *)v12 + 8))(v12);
    else
      --*((_DWORD *)v12 + 4);
  }
}

void sub_19780DEEC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(uint64_t a1, WebPushD::PushClientConnection *this, WTF::StringImpl **a3, char a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[4];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)v20);
  v9 = *a3;
  if (v9)
    *(_DWORD *)v9 += 2;
  v10 = *a5;
  *a5 = 0;
  v11 = WTF::fastMalloc((WTF *)0x60);
  v12 = v11;
  *(_QWORD *)v11 = &off_1E3505410;
  *(_QWORD *)(v11 + 16) = a1;
  v13 = v20[0];
  v14 = v20[1];
  v20[0] = 0uLL;
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)(v11 + 48) = v14;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(v11 + 64) = v9;
  *(_BYTE *)(v11 + 72) = a4;
  *(_QWORD *)(v11 + 80) = v10;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(v11);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v9)
      return result;
    goto LABEL_12;
  }
  result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v17) = v12;
  if (v17 == *(unsigned int *)(a1 + 48) - 1)
    v18 = 0;
  else
    v18 = v17 + 1;
  *(_QWORD *)(a1 + 32) = v18;
  if (v9)
  {
LABEL_12:
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v16);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

void sub_19780E09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v15);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v15);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebPushD::WebPushDaemon::injectPushMessageForTesting(uint64_t a1, uint64_t a2, uint64_t a3, WTF::RefCountedBase *a4)
{
  __int128 v8;
  const WTF::String *v9;
  WTF *v10;
  const char *v11;
  NSObject *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char *v16;
  void *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WebCore::ApplePayInstallmentItem *v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  int i;
  uint64_t v36;
  uint64_t v37;
  const WebCore::PushSubscriptionSetIdentifier *v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  WTF *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t j;
  _DWORD *v57;
  _DWORD *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  void *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  WTF *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  WTF::StringImpl *v100;
  __int128 v101;
  _BYTE v102[22];
  __int16 v103;
  char *v104;
  __int16 v105;
  char *v106;
  __int16 v107;
  char *v108;
  __int16 v109;
  unint64_t v110;
  __int16 v111;
  char *v112;
  _BYTE buf[56];
  __int128 v114;
  char v115[8];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _WORD v119[8];
  unsigned __int8 v120;
  char v121;
  int v122;
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)buf = *(_OWORD *)(a2 + 40);
    *(_OWORD *)&buf[16] = v8;
    if (WTF::hasEntitlement())
    {
      v10 = *(WTF **)a3;
      if (!*(_QWORD *)a3 || !*((_DWORD *)v10 + 1) || (*(_BYTE *)(a3 + 24) & 1) == 0)
      {
        v11 = "Attempting to inject an invalid push message";
        goto LABEL_8;
      }
      if (!*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a3 + 64))
        goto LABEL_51;
      WebCore::NotificationPayload::parseJSON((WebCore::NotificationPayload *)(a3 + 56), v9);
      v15 = v122;
      if (v122)
      {
        if (v122 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          goto LABEL_182;
        }
        WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a4, (uint64_t)&buf[8]);
      }
      else
      {
        v22 = (WTF::StringImpl **)(a3 + 72);
        if (*(_BYTE *)(a3 + 208))
        {
          WTF::String::operator=(v22, (WTF::StringImpl *)buf);
          v23 = *(_OWORD *)&buf[24];
          *(_OWORD *)(a3 + 80) = *(_OWORD *)&buf[8];
          *(_OWORD *)(a3 + 96) = v23;
          WTF::String::operator=((WTF::StringImpl **)(a3 + 112), (WTF::StringImpl *)&buf[40]);
          *(_QWORD *)(a3 + 120) = *(_QWORD *)&buf[48];
          *(_BYTE *)(a3 + 128) = v114;
          if (*(unsigned __int8 *)(a3 + 192) == v120)
          {
            if (*(_BYTE *)(a3 + 192))
            {
              *(_BYTE *)(a3 + 136) = BYTE8(v114);
              WTF::String::operator=((WTF::StringImpl **)(a3 + 144), (WTF::StringImpl *)v115);
              WTF::String::operator=((WTF::StringImpl **)(a3 + 152), (WTF::StringImpl *)&v116);
              WTF::String::operator=((WTF::StringImpl **)(a3 + 160), (WTF::StringImpl *)&v117);
              WTF::String::operator=((WTF::StringImpl **)(a3 + 168), (WTF::StringImpl *)&v118);
              WTF::String::operator=((WTF::StringImpl **)(a3 + 176), (WTF::StringImpl *)v119);
              *(_WORD *)(a3 + 184) = v119[4];
            }
          }
          else
          {
            v25 = (WebCore::ApplePayInstallmentItem *)(a3 + 136);
            if (*(_BYTE *)(a3 + 192))
            {
              WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem(v25, v24);
              *(_BYTE *)(a3 + 192) = 0;
            }
            else
            {
              std::construct_at[abi:sn180100]<WebCore::NotificationOptionsPayload,WebCore::NotificationOptionsPayload const&,WebCore::NotificationOptionsPayload*>((uint64_t)v25, (uint64_t)&v114 + 8);
              *(_BYTE *)(a3 + 192) = 1;
            }
          }
          *(_BYTE *)(a3 + 200) = v121;
        }
        else
        {
          std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>((uint64_t)v22, (uint64_t)buf);
          *(_BYTE *)(a3 + 208) = 1;
        }
      }
      if (v122 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E35052C8[v122])(v102, buf);
      if (v15)
        return;
      v10 = *(WTF **)a3;
      if (*(_QWORD *)a3)
LABEL_51:
        *(_DWORD *)v10 += 2;
      v99 = v10;
      v26 = *(WTF::StringImpl **)(a3 + 8);
      if (v26)
        *(_DWORD *)v26 += 2;
      v101 = 0uLL;
      v100 = v26;
      v29 = *(_QWORD *)(a1 + 56);
      v27 = (uint64_t *)(a1 + 56);
      v28 = v29;
      if (v29
        || (WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand(v27, 0), (v28 = *v27) != 0))
      {
        v30 = *(_DWORD *)(v28 - 8);
      }
      else
      {
        v30 = 0;
      }
      *(_DWORD *)buf = -1640531527;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 0;
      WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>((unsigned int *)buf, (uint64_t *)&v99);
      v31 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf);
      v34 = 0;
      for (i = 1; ; ++i)
      {
        v36 = v31 & v30;
        v37 = v28 + (v36 << 6);
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(v37, v32, v33) & 1) != 0)break;
        if ((WTF::PushSubscriptionSetIdentifierHash::equal((WTF **)(v28 + (v36 << 6)), &v99, v38) & 1) != 0)
          goto LABEL_81;
        if (!(*(_QWORD *)(v37 + 16) ^ 1 | *(_QWORD *)(v37 + 24)))
          v34 = v28 + (v36 << 6);
        v31 = i + v36;
      }
      if (v34)
      {
        v39 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v39 += 4;
        *(_QWORD *)v34 = v39;
        *(_QWORD *)(v34 + 8) = v39;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        --*(_DWORD *)(*v27 - 16);
        v37 = v34;
      }
      WTF::String::operator=((WTF::StringImpl **)v37, (WTF::StringImpl *)&v99);
      WTF::String::operator=((WTF::StringImpl **)(v37 + 8), (WTF::StringImpl *)&v100);
      *(_OWORD *)(v37 + 16) = v101;
      v41 = *(_QWORD *)(v37 + 32);
      v40 = *(_QWORD *)(v37 + 40);
      *(_QWORD *)(v37 + 32) = 0;
      *(_QWORD *)(v37 + 40) = 0;
      v42 = *(WTF::StringImpl **)(v37 + 48);
      *(_QWORD *)(v37 + 48) = 0;
      v43 = *(_DWORD *)(v37 + 56);
      *(_DWORD *)(v37 + 56) = 0;
      if (v41 <= v40)
      {
        v44 = (WTF::StringImpl *)((char *)v42 + 216 * v41);
        v45 = (WTF::StringImpl *)((char *)v42 + 216 * v40);
      }
      else
      {
        WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v42, (WTF::StringImpl *)((char *)v42 + 216 * v40));
        v44 = (WTF::StringImpl *)((char *)v42 + 216 * v41);
        v45 = (WTF::StringImpl *)((char *)v42 + 216 * v43);
      }
      WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v44, v45);
      if (v42)
        WTF::fastFree(v42, v46);
      v47 = *v27;
      if (*v27)
        v48 = *(_DWORD *)(v47 - 12) + 1;
      else
        v48 = 1;
      *(_DWORD *)(v47 - 12) = v48;
      v49 = *v27;
      if (*v27)
        v50 = *(_DWORD *)(v49 - 12);
      else
        v50 = 0;
      v51 = (*(_DWORD *)(v49 - 16) + v50);
      v52 = *(unsigned int *)(v49 - 4);
      if (v52 > 0x400)
      {
        if (v52 > 2 * v51)
        {
LABEL_81:
          WTF::String::utf8();
          v53 = v98;
          if (v98)
          {
            v54 = *((_QWORD *)v98 + 1);
            if (v54)
            {
              if (!HIDWORD(v54))
              {
                v55 = WTF::fastMalloc(*((WTF **)v98 + 1));
                for (j = 0; j != v54; ++j)
                  *(_BYTE *)(v55 + j) = *((_BYTE *)v53 + j + 16);
LABEL_86:
                *(_QWORD *)buf = v55;
                *(_DWORD *)&buf[8] = v54;
                *(_DWORD *)&buf[12] = v54;
                buf[16] = 1;
                v57 = *(_DWORD **)(a3 + 8);
                if (v57)
                  *v57 += 2;
                *(_QWORD *)&buf[24] = v57;
                v58 = *(_DWORD **)(a3 + 16);
                if (v58)
                  *v58 += 2;
                *(_QWORD *)&buf[32] = v58;
                v59 = *(_OWORD *)(a3 + 40);
                *(_OWORD *)&buf[40] = *(_OWORD *)(a3 + 24);
                v114 = v59;
                std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v115, a3 + 72);
                v60 = *(_QWORD *)(v37 + 32);
                v61 = *(_QWORD *)(v37 + 40);
                if (v60)
                {
                  if (v61 + 1 != v60)
                    goto LABEL_100;
                }
                else
                {
                  v62 = *(unsigned int *)(v37 + 56);
                  if (v61)
                  {
                    if (v61 != v62 - 1)
                    {
LABEL_100:
                      v63 = *(_QWORD *)(v37 + 48);
                      std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](v63 + 216 * v61, (uint64_t)buf);
                      v64 = *(_QWORD *)&buf[24];
                      if (*(_QWORD *)&buf[24])
                        **(_DWORD **)&buf[24] += 2;
                      *(_QWORD *)(v63 + 216 * v61 + 24) = v64;
                      v65 = *(_QWORD *)&buf[32];
                      if (*(_QWORD *)&buf[32])
                        **(_DWORD **)&buf[32] += 2;
                      *(_QWORD *)(v63 + 216 * v61 + 32) = v65;
                      v66 = v63 + 216 * v61;
                      v67 = *(_OWORD *)&buf[40];
                      v68 = v114;
                      *(_BYTE *)(v66 + 72) = 0;
                      v69 = v66 + 72;
                      *(_OWORD *)(v69 - 32) = v67;
                      *(_OWORD *)(v69 - 16) = v68;
                      *(_BYTE *)(v69 + 136) = 0;
                      if (v123)
                      {
                        std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload const&,WebCore::NotificationPayload*>(v69, (uint64_t)v115);
                        *(_BYTE *)(v69 + 136) = 1;
                      }
                      v70 = *(_QWORD *)(v37 + 40);
                      if (v70 == *(unsigned int *)(v37 + 56) - 1)
                        v71 = 0;
                      else
                        v71 = v70 + 1;
                      *(_QWORD *)(v37 + 40) = v71;
                      v72 = qword_1ECE716B8;
                      if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
                      {
                        WebPushD::PushClientConnection::subscriptionSetIdentifier((WebPushD::PushClientConnection *)a2, &v94);
                        WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v94);
                        WTF::String::utf8();
                        if (v97)
                          v74 = (char *)v97 + 16;
                        else
                          v74 = 0;
                        WTF::String::utf8();
                        if (v93)
                          v75 = (char *)v93 + 16;
                        else
                          v75 = 0;
                        WTF::String::utf8();
                        if (v92)
                          v76 = (char *)v92 + 16;
                        else
                          v76 = 0;
                        v77 = *(_QWORD *)(v37 + 32);
                        v78 = *(_QWORD *)(v37 + 40);
                        if (v77 > v78)
                          v78 += *(unsigned int *)(v37 + 56);
                        WTF::String::utf8();
                        if (v91)
                          v79 = (char *)v91 + 16;
                        else
                          v79 = 0;
                        *(_DWORD *)v102 = 136447746;
                        *(_QWORD *)&v102[4] = "injectPushMessageForTesting";
                        *(_WORD *)&v102[12] = 2048;
                        *(_QWORD *)&v102[14] = a2;
                        v103 = 2082;
                        v104 = v74;
                        v105 = 2082;
                        v106 = v75;
                        v107 = 2082;
                        v108 = v76;
                        v109 = 2048;
                        v110 = v78 - v77;
                        v111 = 2082;
                        v112 = v79;
                        _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Injected a test push message for %{public}s at %{public}s with %zu pending messages, payload: %{public}s", v102, 0x48u);
                        if (v91)
                        {
                          if (*(_DWORD *)v91 == 1)
                            WTF::fastFree(v91, v73);
                          else
                            --*(_DWORD *)v91;
                        }
                        if (v92)
                        {
                          if (*(_DWORD *)v92 == 1)
                            WTF::fastFree(v92, v73);
                          else
                            --*(_DWORD *)v92;
                        }
                        if (v93)
                        {
                          if (*(_DWORD *)v93 == 1)
                            WTF::fastFree(v93, v73);
                          else
                            --*(_DWORD *)v93;
                        }
                        v80 = v97;
                        v97 = 0;
                        if (v80)
                        {
                          if (*(_DWORD *)v80 == 1)
                            WTF::fastFree(v80, v73);
                          else
                            --*(_DWORD *)v80;
                        }
                        v81 = v96;
                        v96 = 0;
                        if (v81)
                        {
                          if (*(_DWORD *)v81 == 2)
                            WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v81 -= 2;
                        }
                        v82 = v95;
                        v95 = 0;
                        if (v82)
                        {
                          if (*(_DWORD *)v82 == 2)
                            WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v82 -= 2;
                        }
                        v83 = v94;
                        v94 = 0;
                        if (v83)
                        {
                          if (*(_DWORD *)v83 == 2)
                            WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v83 -= 2;
                        }
                      }
                      WebPushD::WebPushDaemon::notifyClientPushMessageIsAvailable((WebPushD::WebPushDaemon *)&v99, (const WebCore::PushSubscriptionSetIdentifier *)v73);
                      *(_QWORD *)v102 = 0;
                      WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a4, (uint64_t)v102);
                      v85 = *(WTF::StringImpl **)v102;
                      *(_QWORD *)v102 = 0;
                      if (v85)
                      {
                        if (*(_DWORD *)v85 == 2)
                          WTF::StringImpl::destroy(v85, v84);
                        else
                          *(_DWORD *)v85 -= 2;
                      }
                      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v115, v84);
                      v86 = *(WTF::StringImpl **)&buf[32];
                      *(_QWORD *)&buf[32] = 0;
                      if (v86)
                      {
                        if (*(_DWORD *)v86 == 2)
                          WTF::StringImpl::destroy(v86, v13);
                        else
                          *(_DWORD *)v86 -= 2;
                      }
                      v87 = *(WTF::StringImpl **)&buf[24];
                      *(_QWORD *)&buf[24] = 0;
                      if (v87)
                      {
                        if (*(_DWORD *)v87 == 2)
                          WTF::StringImpl::destroy(v87, v13);
                        else
                          *(_DWORD *)v87 -= 2;
                      }
                      if (buf[16])
                      {
                        v88 = *(WTF **)buf;
                        if (*(_QWORD *)buf)
                        {
                          *(_QWORD *)buf = 0;
                          *(_DWORD *)&buf[8] = 0;
                          WTF::fastFree(v88, v13);
                        }
                      }
                      v89 = v98;
                      v98 = 0;
                      if (v89)
                      {
                        if (*(_DWORD *)v89 == 1)
                          WTF::fastFree(v89, v13);
                        else
                          --*(_DWORD *)v89;
                      }
                      v90 = v100;
                      v100 = 0;
                      if (v90)
                      {
                        if (*(_DWORD *)v90 == 2)
                          WTF::StringImpl::destroy(v90, v13);
                        else
                          *(_DWORD *)v90 -= 2;
                      }
                      v14 = v99;
                      v99 = 0;
                      if (v14)
                        goto LABEL_10;
                      return;
                    }
                  }
                  else if ((_DWORD)v62)
                  {
                    v61 = 0;
                    goto LABEL_100;
                  }
                }
                WTF::Deque<WebKit::WebPushMessage,0ul>::expandCapacity((WTF::StringImpl *)(v37 + 32));
                v61 = *(_QWORD *)(v37 + 40);
                goto LABEL_100;
              }
LABEL_182:
              __break(0xC471u);
              return;
            }
          }
          else
          {
            LODWORD(v54) = 0;
          }
          v55 = 0;
          goto LABEL_86;
        }
      }
      else if (3 * v52 > 4 * v51)
      {
        goto LABEL_81;
      }
      v37 = WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand(v27, (uint64_t *)v37);
      goto LABEL_81;
    }
  }
  v11 = "Attempting to inject a push message from an unentitled process";
LABEL_8:
  v12 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
  {
    WebPushD::PushClientConnection::subscriptionSetIdentifier((WebPushD::PushClientConnection *)a2, (WTF::StringImpl **)v102);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)v102);
    WTF::String::utf8();
    if (v99)
      v16 = (char *)v99 + 16;
    else
      v16 = 0;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "injectPushMessageForTesting";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a2;
    *(_WORD *)&buf[22] = 2082;
    *(_QWORD *)&buf[24] = v16;
    *(_WORD *)&buf[32] = 2082;
    *(_QWORD *)&buf[34] = v11;
    _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: %{public}s", buf, 0x2Au);
    v18 = v99;
    v99 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v17);
      else
        --*(_DWORD *)v18;
    }
    v19 = v94;
    v94 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(WTF::StringImpl **)&v102[8];
    *(_QWORD *)&v102[8] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(WTF::StringImpl **)v102;
    *(_QWORD *)v102 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a4, (uint64_t)buf);
  v14 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v14)
  {
LABEL_10:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
}

void sub_19780EC14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, WTF *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF *a21,WTF *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,int a39,char a40,WTF::StringImpl *a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55)
{
  WTF::StringImpl *v56;

  if (a13)
  {
    if (*(_DWORD *)a13 == 1)
      WTF::fastFree(a13, a2);
    else
      --*(_DWORD *)a13;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
      WTF::fastFree(a14, a2);
    else
      --*(_DWORD *)a14;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 1)
      WTF::fastFree(a21, a2);
    else
      --*(_DWORD *)a21;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a11, (WTF::StringImpl *)a2);
  if (a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, v56);
    else
      *(_DWORD *)a42 -= 2;
  }
  if (a41)
  {
    if (*(_DWORD *)a41 == 2)
      WTF::StringImpl::destroy(a41, v56);
    else
      *(_DWORD *)a41 -= 2;
  }
  if (a40 && a37)
    WTF::fastFree(a37, v56);
  if (a22)
  {
    if (*(_DWORD *)a22 == 1)
      WTF::fastFree(a22, v56);
    else
      --*(_DWORD *)a22;
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, v56);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, v56);
    else
      *(_DWORD *)a23 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::notifyClientPushMessageIsAvailable(WebPushD::WebPushDaemon *this, const WebCore::PushSubscriptionSetIdentifier *a2)
{
  NSObject *v3;
  char *v4;
  char *v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD v27[3];
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v21)
      v4 = (char *)v21 + 16;
    else
      v4 = 0;
    WebCore::PushSubscriptionSetIdentifier::debugDescription(this);
    WTF::String::utf8();
    if (v20)
      v5 = (char *)v20 + 16;
    else
      v5 = 0;
    *(_DWORD *)buf = 136446466;
    v29 = v4;
    v30 = 2082;
    v31 = v5;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "Launching %{public}s in response to push for %{public}s", buf, 0x16u);
    v7 = v20;
    v20 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
    v8 = v19;
    v19 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v21;
    v21 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v6);
      else
        --*(_DWORD *)v9;
    }
  }
  v10 = (void *)MEMORY[0x1E0C99E98];
  if (*((_QWORD *)this + 1))
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E351F1B8;
  v12 = objc_msgSend(v10, "URLWithString:", objc_msgSend(CFSTR("webapp://web-push/"), "stringByAppendingFormat:", CFSTR("%@"), v11, v19, v20, v21));
  v26[0] = *MEMORY[0x1E0D22CF0];
  v24 = *MEMORY[0x1E0D22BB0];
  v25 = MEMORY[0x1E0C9AA70];
  v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v14 = *MEMORY[0x1E0D22D78];
  v27[0] = v13;
  v27[1] = v12;
  v15 = *MEMORY[0x1E0D22D70];
  v26[1] = v14;
  v26[2] = v15;
  v22 = *MEMORY[0x1E0CEB2B0];
  v23 = CFSTR("com.apple.WebKit.webpushd");
  v27[2] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
  v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 3);
  v17 = objc_alloc_init(MEMORY[0x1E0CA5938]);
  objc_msgSend(v17, "setSensitive:", 1);
  objc_msgSend(v17, "setFrontBoardOptions:", v16);
  objc_msgSend(v17, "setAllowURLOverrides:", 0);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace"), "openURL:configuration:completionHandler:", v12, v17, &__block_literal_global_39);
}

void sub_19780F200(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4)
{
  __int128 v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  _BYTE buf[32];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 72)
    && (v8 = *(_OWORD *)(a2 + 56),
        *(_OWORD *)buf = *(_OWORD *)(a2 + 40),
        *(_OWORD *)&buf[16] = v8,
        (WTF::hasEntitlement() & 1) != 0))
  {
    v9 = *a3;
    if (*a3)
      *v9 += 2;
    v10 = *a4;
    *a4 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v12 = v11;
    *v11 = &off_1E3505438;
    v11[1] = a1;
    v11[2] = v9;
    v11[3] = v10;
    if (*(_BYTE *)(a1 + 17))
    {
      WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call((uint64_t)v11);
      return (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
    }
    else
    {
      result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v16) = v12;
      if (v16 == *(unsigned int *)(a1 + 48) - 1)
        v17 = 0;
      else
        v17 = v16 + 1;
      *(_QWORD *)(a1 + 32) = v17;
    }
  }
  else
  {
    v14 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::subscriptionSetIdentifier((WebPushD::PushClientConnection *)a2, &v24);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v24);
      WTF::String::utf8();
      if (v27)
        v18 = (char *)v27 + 16;
      else
        v18 = 0;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "injectEncryptedPushMessageForTesting";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v18;
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Attempting to inject a push message from an unentitled process", buf, 0x20u);
      v20 = v27;
      v27 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, v19);
        else
          --*(_DWORD *)v20;
      }
      v21 = v26;
      v26 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v25;
      v25 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v24;
      v24 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

void sub_19780F500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::handleIncomingPush(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  const WebCore::PushSubscriptionSetIdentifier *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const WebCore::PushSubscriptionSetIdentifier *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v42;
  __int16 v43;
  char v44;

  if (!*(_QWORD *)(a1 + 120))
  {
    v6 = os_transaction_create();
    v7 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v6;
    if (v7)

  }
  WebCore::TimerBase::start();
  v10 = *(_QWORD *)(a1 + 56);
  v8 = (uint64_t *)(a1 + 56);
  v9 = v10;
  if (v10
    || (WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand(v8, 0), (v9 = *v8) != 0))
  {
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
  }
  v42 = -1640531527;
  v43 = 0;
  v44 = 0;
  WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>(&v42, (uint64_t *)a2);
  v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42) & v11;
  v13 = v9 + (v12 << 6);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(v13, v14, v15) & 1) != 0)
  {
LABEL_17:
    WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)a2);
    WTF::String::operator=((WTF::StringImpl **)(v13 + 8), (WTF::StringImpl *)(a2 + 8));
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 16);
    v23 = *(_QWORD *)(v13 + 32);
    v22 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    v24 = *(WTF::StringImpl **)(v13 + 48);
    *(_QWORD *)(v13 + 48) = 0;
    v25 = *(_DWORD *)(v13 + 56);
    *(_DWORD *)(v13 + 56) = 0;
    if (v23 <= v22)
    {
      v26 = (WTF::StringImpl *)((char *)v24 + 216 * v23);
      v27 = (WTF::StringImpl *)((char *)v24 + 216 * v22);
    }
    else
    {
      WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v24, (WTF::StringImpl *)((char *)v24 + 216 * v22));
      v26 = (WTF::StringImpl *)((char *)v24 + 216 * v23);
      v27 = (WTF::StringImpl *)((char *)v24 + 216 * v25);
    }
    WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v26, v27);
    if (v24)
      WTF::fastFree(v24, v28);
    v29 = *v8;
    if (*v8)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v8;
    if (*v8)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        goto LABEL_31;
    }
    else if (3 * v34 > 4 * v33)
    {
      goto LABEL_31;
    }
    v13 = WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand(v8, (uint64_t *)v13);
    goto LABEL_31;
  }
  v17 = 0;
  v18 = 1;
  while ((WTF::PushSubscriptionSetIdentifierHash::equal((WTF **)v13, (const WTF::StringImpl **)a2, v16) & 1) == 0)
  {
    if (!(*(_QWORD *)(v13 + 16) ^ 1 | *(_QWORD *)(v13 + 24)))
      v17 = v13;
    v12 = ((_DWORD)v12 + v18) & v11;
    v13 = v9 + (v12 << 6);
    ++v18;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(v13, v19, v20))
    {
      if (v17)
      {
        v21 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v21 += 4;
        *(_QWORD *)v17 = v21;
        *(_QWORD *)(v17 + 8) = v21;
        *(_OWORD *)(v17 + 16) = 0u;
        *(_OWORD *)(v17 + 32) = 0u;
        *(_OWORD *)(v17 + 48) = 0u;
        --*(_DWORD *)(*v8 - 16);
        v13 = v17;
      }
      goto LABEL_17;
    }
  }
LABEL_31:
  v36 = *(_QWORD *)(v13 + 32);
  v35 = *(_QWORD *)(v13 + 40);
  if (v36)
  {
    if (v35 + 1 != v36)
      goto LABEL_41;
    goto LABEL_40;
  }
  v37 = *(unsigned int *)(v13 + 56);
  if (!v35)
  {
    if ((_DWORD)v37)
    {
      v35 = 0;
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v35 == v37 - 1)
  {
LABEL_40:
    WTF::Deque<WebKit::WebPushMessage,0ul>::expandCapacity((WTF::StringImpl *)(v13 + 32));
    v35 = *(_QWORD *)(v13 + 40);
  }
LABEL_41:
  WebKit::WebPushMessage::WebPushMessage(*(_QWORD *)(v13 + 48) + 216 * v35, a3);
  v39 = *(_QWORD *)(v13 + 40);
  if (v39 == *(unsigned int *)(v13 + 56) - 1)
    v40 = 0;
  else
    v40 = v39 + 1;
  *(_QWORD *)(v13 + 40) = v40;
  return WebPushD::WebPushDaemon::notifyClientPushMessageIsAvailable((WebPushD::WebPushDaemon *)a2, v38);
}

void ___ZN8WebPushD13WebPushDaemon34notifyClientPushMessageIsAvailableERKN7WebCore29PushSubscriptionSetIdentifierE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v4 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      v5 = 138543362;
      v6 = a3;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Failed to open app to handle push: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void WebPushD::WebPushDaemon::rescheduleSilentPushTimer(WebPushD::WebPushDaemon *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  if (*((_QWORD *)this + 26))
  {
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::start();
    if (!*((_QWORD *)this + 23))
    {
      v2 = os_transaction_create();
      v3 = (void *)*((_QWORD *)this + 23);
      *((_QWORD *)this + 23) = v2;
      if (v3)

    }
  }
  else
  {
    if ((*((_QWORD *)this + 20) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebPushD::WebPushDaemon *)((char *)this + 128));
    v4 = (void *)*((_QWORD *)this + 23);
    if (v4)

    *((_QWORD *)this + 23) = 0;
  }
}

WTF *std::list<WebPushD::WebPushDaemon::PotentialSilentPush,WTF::FastAllocator<WebPushD::WebPushDaemon::PotentialSilentPush>>::erase(WTF *result, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (this == result)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    *(_QWORD *)(v3 + 8) = v4;
    **((_QWORD **)this + 1) = v3;
    --*((_QWORD *)result + 2);
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, this);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, this);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, this);
      else
        *(_DWORD *)v7 -= 2;
    }
    WTF::fastFree(this, this);
    return (WTF *)v4;
  }
  return result;
}

WTF::StringImpl *WebPushD::WebPushDaemon::getPendingPushMessage(uint64_t a1, WebPushD::PushClientConnection *this, uint64_t *a3)
{
  WTF::StringImpl *v6;
  int v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  char *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  char *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _BYTE buf[32];
  __int16 v66;
  _BYTE v67[14];
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = *WebPushD::PushClientConnection::hostAppCodeSigningIdentifier(this);
  if (!v6 || (v7 = *((_DWORD *)v6 + 1), *(_DWORD *)v6 += 2, !v7))
  {
    buf[0] = 0;
    v68 = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v13);
    if (!v6)
      return result;
    goto LABEL_92;
  }
  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)buf);
  v8 = (uint64_t *)(a1 + 56);
  v10 = WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>>,WebCore::PushSubscriptionSetIdentifier>((uint64_t *)(a1 + 56), (uint64_t *)buf);
  v11 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v16 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *v8;
  if (*v8)
    v17 += (unint64_t)*(unsigned int *)(v17 - 4) << 6;
  if (v17 == v10)
  {
    v27 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      WebPushD::PushClientConnection::subscriptionSetIdentifier(this, &v58);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v58);
      WTF::String::utf8();
      if (v55)
        v28 = (char *)v55 + 16;
      else
        v28 = 0;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "getPendingPushMessage";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = this;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v28;
      _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: No pending push message", buf, 0x20u);
      v30 = v55;
      v55 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
          WTF::fastFree(v30, v29);
        else
          --*(_DWORD *)v30;
      }
      v50 = v64;
      v64 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = v59;
      v59 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = v58;
      v58 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
    buf[0] = 0;
    v68 = 0;
    v53 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v53 + 16))(v53, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v54);
    goto LABEL_92;
  }
  v18 = *(_QWORD *)(v10 + 32);
  if (v18 == *(_QWORD *)(v10 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x19781011CLL);
  }
  WebKit::WebPushMessage::WebPushMessage((uint64_t)&v58, (uint64_t *)(*(_QWORD *)(v10 + 48) + 216 * v18));
  v19 = *(_QWORD *)(v10 + 32);
  if (v19 == *(_QWORD *)(v10 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x19781013CLL);
  }
  WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct((WTF::StringImpl *)(*(_QWORD *)(v10 + 48) + 216 * v19), (WTF::StringImpl *)(*(_QWORD *)(v10 + 48) + 216 * v19 + 216));
  v20 = *(unsigned int *)(v10 + 56);
  v21 = *(_QWORD *)(v10 + 32);
  v22 = *(_QWORD *)(v10 + 40);
  if (v21 == v20 - 1)
    v23 = 0;
  else
    v23 = v21 + 1;
  *(_QWORD *)(v10 + 32) = v23;
  if (v23 <= v22)
    v20 = 0;
  v24 = v20 + v22;
  v25 = v24 - v23;
  if (v24 == v23)
  {
    if (*v8)
    {
      v26 = *v8 + ((unint64_t)*(unsigned int *)(*v8 - 4) << 6);
      if (v26 == v10)
        goto LABEL_38;
LABEL_36:
      if (v26 != v10)
        WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::remove((uint64_t *)(a1 + 56), v10);
      goto LABEL_38;
    }
    if (v10)
    {
      v26 = 0;
      goto LABEL_36;
    }
  }
LABEL_38:
  v31 = WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)buf);
  v32 = v62;
  if (v62)
    *(_DWORD *)v62 += 2;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v31);
  v34 = 1.0;
  if (!*(_BYTE *)(a1 + 16))
    v34 = 30.0;
  v35 = v33 + v34;
  *(double *)&v67[6] = v33 + v34;
  v36 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v36 = 0;
  *(_OWORD *)(v36 + 16) = *(_OWORD *)buf;
  *(_OWORD *)(v36 + 32) = *(_OWORD *)&buf[16];
  *(_QWORD *)(v36 + 48) = v32;
  *(double *)(v36 + 56) = v35;
  *(_QWORD *)(v36 + 8) = a1 + 192;
  v37 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)v36 = v37;
  *(_QWORD *)(v37 + 8) = v36;
  *(_QWORD *)(a1 + 192) = v36;
  v38 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v38 + 1;
  if (!v38)
    WebPushD::WebPushDaemon::rescheduleSilentPushTimer((WebPushD::WebPushDaemon *)a1);
  v39 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    WebPushD::PushClientConnection::subscriptionSetIdentifier(this, &v55);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v55);
    WTF::String::utf8();
    if (v64)
      v40 = (char *)v64 + 16;
    else
      v40 = 0;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "getPendingPushMessage";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = this;
    *(_WORD *)&buf[22] = 2082;
    *(_QWORD *)&buf[24] = v40;
    v66 = 2048;
    *(_QWORD *)v67 = v25;
    _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Fetched 1 push message, %zu remaining", buf, 0x2Au);
    v42 = v64;
    v64 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
        WTF::fastFree(v42, v41);
      else
        --*(_DWORD *)v42;
    }
    v43 = v57;
    v57 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v41);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = v56;
    v56 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v41);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v55;
    v55 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v41);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  WebKit::WebPushMessage::WebPushMessage((uint64_t)buf, (uint64_t *)&v58);
  v68 = 1;
  v46 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 16))(v46, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v47);
  if (!*v8 || !*(_DWORD *)(*v8 - 12))
    WebPushD::WebPushDaemon::releaseIncomingPushTransaction((WebPushD::WebPushDaemon *)a1);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v48);
  v49 = v62;
  v62 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v15);
    else
      *(_DWORD *)v49 -= 2;
  }
  result = v61;
  v61 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if (v60)
  {
    result = v58;
    if (v58)
    {
      v58 = 0;
      LODWORD(v59) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(result, v15);
    }
  }
LABEL_92:
  if (*(_DWORD *)v6 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v15);
  *(_DWORD *)v6 -= 2;
  return result;
}

void sub_197810144(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF *a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44)
{
  WTF::StringImpl *v44;

  if (a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, a2);
    else
      *(_DWORD *)a42 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (*(_DWORD *)v44 == 2)
    WTF::StringImpl::destroy(v44, a2);
  else
    *(_DWORD *)v44 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::WebPushDaemon::getPendingPushMessages(uint64_t *a1, WebPushD::PushClientConnection *this, uint64_t *a3)
{
  WTF::StringImpl *v6;
  int v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  void *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unint64_t v22;
  NSObject *v23;
  WTF::StringImpl *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  NSObject *v34;
  WTF::StringImpl *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  void *v48;
  unsigned int v49;
  WebPushD::WebPushDaemon *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _BYTE buf[22];
  __int16 v58;
  WTF::StringImpl *v59;
  _QWORD v60[5];
  _QWORD v61[21];

  v61[19] = *MEMORY[0x1E0C80C00];
  v6 = *WebPushD::PushClientConnection::hostAppCodeSigningIdentifier(this);
  if (!v6 || (v7 = *((_DWORD *)v6 + 1), *(_DWORD *)v6 += 2, !v7))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v13);
    goto LABEL_86;
  }
  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)buf);
  v8 = a1 + 7;
  v10 = WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>>,WebCore::PushSubscriptionSetIdentifier>(a1 + 7, (uint64_t *)buf);
  v11 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v16 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*v8)
  {
    v17 = *v8 + ((unint64_t)*(unsigned int *)(*v8 - 4) << 6);
    if (v17 == v10)
      goto LABEL_21;
LABEL_17:
    v50 = (WebPushD::WebPushDaemon *)a1;
    if (v17 == v10)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(v10 + 32);
      v19 = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      v20 = *(WTF::StringImpl **)(v10 + 48);
      *(_QWORD *)(v10 + 48) = 0;
      v21 = *(_DWORD *)(v10 + 56);
      *(_DWORD *)(v10 + 56) = 0;
      if (*v8)
      {
        v22 = *v8 + ((unint64_t)*(unsigned int *)(*v8 - 4) << 6);
        if (v22 == v10)
          goto LABEL_33;
LABEL_31:
        if (v22 != v10)
          WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::remove(v8, v10);
        goto LABEL_33;
      }
      if (v10)
      {
        v22 = 0;
        goto LABEL_31;
      }
    }
LABEL_33:
    v52 = 0;
    v53 = 0;
    if (v19 >= v18)
      v27 = 0;
    else
      v27 = v21;
    WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v52, v19 - v18 + v27);
    if (v19 != v18)
    {
      v49 = v21;
      v28 = v21 - 1;
      do
      {
        WebKit::WebPushMessage::WebPushMessage((uint64_t)buf, (uint64_t *)v20 + 27 * v18);
        if (v18 == v19)
        {
          __break(0xC471u);
          JUMPOUT(0x197810A40);
        }
        WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct((WTF::StringImpl *)((char *)v20 + 216 * v18), (WTF::StringImpl *)((char *)v20 + 216 * v18 + 216));
        if (v18 == v28)
          v18 = 0;
        else
          ++v18;
        if (HIDWORD(v53) == (_DWORD)v53)
        {
          WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPushMessage>((uint64_t)&v52, (unint64_t)buf);
        }
        else
        {
          WebKit::WebPushMessage::WebPushMessage((uint64_t)v52 + 216 * HIDWORD(v53), (uint64_t *)buf);
          ++HIDWORD(v53);
        }
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v29);
        v31 = (WTF::StringImpl *)v60[0];
        v60[0] = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v59;
        v59 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (buf[16])
        {
          v33 = *(WTF **)buf;
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)buf = 0;
            *(_DWORD *)&buf[8] = 0;
            WTF::fastFree(v33, v30);
          }
        }
      }
      while (v18 != v19);
      v18 = v19;
      v21 = v49;
    }
    v34 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      WebPushD::PushClientConnection::subscriptionSetIdentifier(this, &v54);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v54);
      WTF::String::utf8();
      if (v56)
        v35 = (WTF::StringImpl *)((char *)v56 + 16);
      else
        v35 = 0;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "getPendingPushMessages";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = this;
      v58 = 2082;
      v59 = v35;
      LOWORD(v60[0]) = 2048;
      *(_QWORD *)((char *)v60 + 2) = HIDWORD(v53);
      _os_log_impl(&dword_196BCC000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: Fetched %zu pending push messages", buf, 0x2Au);
      v37 = v56;
      v56 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
          WTF::fastFree(v37, v36);
        else
          --*(_DWORD *)v37;
      }
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v51 -= 2;
      }
      v38 = v55;
      v55 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = v54;
      v54 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v36);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    v40 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v40 + 16))(v40, &v52);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    if (!*v8 || !*(_DWORD *)(*v8 - 12))
      WebPushD::WebPushDaemon::releaseIncomingPushTransaction(v50);
    WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v41);
    if (v18 <= v19)
    {
      v42 = (WTF::StringImpl *)((char *)v20 + 216 * v18);
      v43 = (WTF::StringImpl *)((char *)v20 + 216 * v19);
    }
    else
    {
      WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v20, (WTF::StringImpl *)((char *)v20 + 216 * v19));
      v42 = (WTF::StringImpl *)((char *)v20 + 216 * v18);
      v43 = (WTF::StringImpl *)((char *)v20 + 216 * v21);
    }
    result = (uint64_t)WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v42, v43);
    if (v20)
      result = WTF::fastFree(v20, v15);
LABEL_86:
    if (!v6)
      return result;
    goto LABEL_102;
  }
  if (v10)
  {
    v17 = 0;
    goto LABEL_17;
  }
LABEL_21:
  v23 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    WebPushD::PushClientConnection::subscriptionSetIdentifier(this, &v54);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v54);
    WTF::String::utf8();
    if (v52)
      v24 = (WTF *)((char *)v52 + 16);
    else
      v24 = 0;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "getPendingPushMessages";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = this;
    v58 = 2082;
    v59 = v24;
    _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s [connection=%p, app=%{public}s]: No pending push messages", buf, 0x20u);
    v26 = v52;
    v52 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        WTF::fastFree(v26, v25);
      else
        --*(_DWORD *)v26;
    }
    v44 = v56;
    v56 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v55;
    v55 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v54;
    v54 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v47 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v47 + 16))(v47, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  result = WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v48);
LABEL_102:
  if (*(_DWORD *)v6 == 2)
    return WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v15);
  *(_DWORD *)v6 -= 2;
  return result;
}

uint64_t WebPushD::WebPushDaemon::getPushTopicsForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22[2];
  uint64_t v23[2];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  _BYTE buf[32];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 72)
    && (v6 = *(_OWORD *)(a2 + 56),
        *(_OWORD *)buf = *(_OWORD *)(a2 + 40),
        *(_OWORD *)&buf[16] = v6,
        (WTF::hasEntitlement() & 1) != 0))
  {
    v7 = *a3;
    *a3 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v9 = v8;
    *v8 = &off_1E35054B0;
    v8[1] = a1;
    v8[2] = v7;
    if (*(_BYTE *)(a1 + 17))
    {
      WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::call((uint64_t)v8);
      return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
    }
    else
    {
      result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v14) = v9;
      if (v14 == *(unsigned int *)(a1 + 48) - 1)
        v15 = 0;
      else
        v15 = v14 + 1;
      *(_QWORD *)(a1 + 32) = v15;
    }
  }
  else
  {
    v11 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::subscriptionSetIdentifier((WebPushD::PushClientConnection *)a2, &v24);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v24);
      WTF::String::utf8();
      if (v27)
        v16 = (char *)v27 + 16;
      else
        v16 = 0;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "getPushTopicsForTesting";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v16;
      _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Need entitlement to get push topics", buf, 0x20u);
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          WTF::fastFree(v18, v17);
        else
          --*(_DWORD *)v18;
      }
      v19 = v26;
      v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v25;
      v25 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v24;
      v24 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    v23[0] = 0;
    v23[1] = 0;
    v22[0] = 0;
    v22[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v23, v22);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v12);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v13);
  }
  return result;
}

void sub_197810FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];

  v3 = *a1;
  *a1 = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v14[0] = 0;
  v16[0] = v4;
  v14[1] = 0;
  v6 = a2[1];
  a2[1] = 0;
  v16[1] = v6;
  v13[0] = 0;
  v15[0] = v5;
  v13[1] = 0;
  v7 = a3[1];
  a3[1] = 0;
  v15[1] = v7;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v16, v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v10);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_19781112C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  void *v16;
  void *v17;
  void *v18;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14 - 32, v16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v17);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::subscribeToPushService(uint64_t a1, WebPushD::PushClientConnection *this, _DWORD **a3, uint64_t a4, uint64_t *a5)
{
  _DWORD *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)v22);
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  v10 = *(unsigned int *)(a4 + 12);
  v23 = 0;
  v24 = 0;
  if ((_DWORD)v10)
  {
    v11 = (void *)WTF::fastMalloc((WTF *)v10);
    memcpy(v11, *(const void **)a4, *(unsigned int *)(a4 + 12));
  }
  else
  {
    v11 = 0;
  }
  v12 = *a5;
  *a5 = 0;
  v13 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v13 = &off_1E35054D8;
  *(_QWORD *)(v13 + 16) = a1;
  v14 = v22[0];
  v15 = v22[1];
  v22[0] = 0u;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 64) = v9;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_DWORD *)(v13 + 84) = v10;
  if ((_DWORD)v10)
  {
    v16 = (void *)WTF::fastMalloc((WTF *)v10);
    *(_DWORD *)(v13 + 80) = v10;
    *(_QWORD *)(v13 + 72) = v16;
    memcpy(v16, v11, v10);
  }
  *(_QWORD *)(v13 + 88) = v12;
  if (*(_BYTE *)(a1 + 17))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v11)
      return WTF::fastFree((WTF *)v11, v18);
  }
  else
  {
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v19) = v13;
    if (v19 == *(unsigned int *)(a1 + 48) - 1)
      v20 = 0;
    else
      v20 = v19 + 1;
    *(_QWORD *)(a1 + 32) = v20;
    if (v11)
      return WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

void sub_1978112D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  WTF *v12;
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v12)
    WTF::fastFree(v12, v15);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::unsubscribeFromPushService(uint64_t a1, WebPushD::PushClientConnection *this, _DWORD **a3, uint64_t a4, char a5, uint64_t *a6)
{
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  __int128 v22;

  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)v21);
  v11 = *a3;
  if (v11)
    *v11 += 2;
  *(_QWORD *)&v22 = a4;
  BYTE8(v22) = a5;
  v12 = *a6;
  *a6 = 0;
  v13 = WTF::fastMalloc((WTF *)0x60);
  v14 = v13;
  *(_QWORD *)v13 = &off_1E3505510;
  *(_QWORD *)(v13 + 16) = a1;
  v15 = v21[0];
  v16 = v21[1];
  v21[0] = 0uLL;
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)(v13 + 48) = v16;
  *(_QWORD *)(v13 + 64) = v11;
  *(_OWORD *)(v13 + 72) = v22;
  *(_QWORD *)(v13 + 88) = v12;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(v13);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v18) = v14;
    if (v18 == *(unsigned int *)(a1 + 48) - 1)
      v19 = 0;
    else
      v19 = v18 + 1;
    *(_QWORD *)(a1 + 32) = v19;
  }
  return result;
}

void sub_197811518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::getPushSubscription(uint64_t a1, WebPushD::PushClientConnection *this, _DWORD **a3, uint64_t *a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[3];

  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)v17);
  v7 = *a3;
  if (v7)
    *v7 += 2;
  v8 = *a4;
  *a4 = 0;
  v9 = WTF::fastMalloc((WTF *)0x50);
  v10 = v9;
  *(_QWORD *)v9 = &off_1E3505548;
  *(_QWORD *)(v9 + 16) = a1;
  v11 = v17[0];
  v12 = v17[1];
  v17[0] = 0uLL;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v12;
  *(_QWORD *)(v9 + 64) = v7;
  *(_QWORD *)(v9 + 72) = v8;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v14) = v10;
    if (v14 == *(unsigned int *)(a1 + 48) - 1)
      v15 = 0;
    else
      v15 = v14 + 1;
    *(_QWORD *)(a1 + 32) = v15;
  }
  return result;
}

void sub_197811698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebPushD::WebPushDaemon::incrementSilentPushCount(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v19[2];
  __int128 v20;
  WTF::StringImpl *v21[2];

  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, v19);
  WebCore::SecurityOriginData::toString(a3);
  v7 = *a4;
  *a4 = 0;
  v21[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x50);
  v9 = v8;
  *(_QWORD *)v8 = &off_1E3505580;
  *(_QWORD *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v19;
  *(_OWORD *)(v8 + 48) = v20;
  v10 = *(_OWORD *)v21;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v8 + 64) = v10;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()> &&)::$_0,void>::call(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12) = v9;
    if (v12 == *(unsigned int *)(a1 + 48) - 1)
      v13 = 0;
    else
      v13 = v12 + 1;
    *(_QWORD *)(a1 + 32) = v13;
  }
  v14 = v21[1];
  v21[1] = 0;
  if (v14)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v19[1];
  v19[1] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v19[0];
  v19[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1978118A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v18);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v18);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v18);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::removeAllPushSubscriptions(uint64_t a1, WebPushD::PushClientConnection *this, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)v14);
  v5 = *a3;
  *a3 = 0;
  v6 = WTF::fastMalloc((WTF *)0x50);
  v7 = v6;
  *(_QWORD *)v6 = &off_1E35055A8;
  *(_QWORD *)(v6 + 16) = a1;
  v8 = v14[0];
  v9 = v14[1];
  v14[0] = 0uLL;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 64) = v5;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()> &&)::$_0,void>::call((_QWORD *)v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11) = v7;
    if (v11 == *(unsigned int *)(a1 + 48) - 1)
      v12 = 0;
    else
      v12 = v11 + 1;
    *(_QWORD *)(a1 + 32) = v12;
  }
  return result;
}

void sub_197811A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(uint64_t a1, WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v19[2];
  __int128 v20;
  WTF::StringImpl *v21[2];

  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, v19);
  WebCore::SecurityOriginData::toString(a3);
  v7 = *a4;
  *a4 = 0;
  v21[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x50);
  v9 = v8;
  *(_QWORD *)v8 = &off_1E35055D0;
  *(_QWORD *)(v8 + 16) = a1;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v19;
  *(_OWORD *)(v8 + 48) = v20;
  v10 = *(_OWORD *)v21;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v8 + 64) = v10;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()> &&)::$_0,void>::call(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12) = v9;
    if (v12 == *(unsigned int *)(a1 + 48) - 1)
      v13 = 0;
    else
      v13 = v12 + 1;
    *(_QWORD *)(a1 + 32) = v13;
  }
  v14 = v21[1];
  v21[1] = 0;
  if (v14)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v19[1];
  v19[1] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v19[0];
  v19[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197811C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v18);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v18);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v18);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::setPublicTokenForTesting(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  __int128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t result;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  _BYTE buf[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 72)
    && (v8 = *(_OWORD *)(a2 + 56),
        *(_OWORD *)buf = *(_OWORD *)(a2 + 40),
        *(_OWORD *)&buf[16] = v8,
        (WTF::hasEntitlement() & 1) != 0))
  {
    v9 = *a3;
    if (*a3)
      *(_DWORD *)v9 += 2;
    v10 = *a4;
    *a4 = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v12 = v11;
    *v11 = &off_1E35055F8;
    v11[1] = a1;
    if (v9)
      *(_DWORD *)v9 += 2;
    v11[2] = v9;
    v11[3] = v10;
    if (*(_BYTE *)(a1 + 17))
    {
      WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call((uint64_t)v11);
      result = (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
      if (!v9)
        return result;
      goto LABEL_16;
    }
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v17) = v12;
    if (v17 == *(unsigned int *)(a1 + 48) - 1)
      v18 = 0;
    else
      v18 = v17 + 1;
    *(_QWORD *)(a1 + 32) = v18;
    if (v9)
    {
LABEL_16:
      if (*(_DWORD *)v9 == 2)
        return WTF::StringImpl::destroy(v9, v14);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    v15 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      WebPushD::PushClientConnection::subscriptionSetIdentifier((WebPushD::PushClientConnection *)a2, &v25);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v25);
      WTF::String::utf8();
      if (v28)
        v19 = (char *)v28 + 16;
      else
        v19 = 0;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "setPublicTokenForTesting";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v19;
      _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "%{public}s [connection=%p, app=%{public}s]: Need entitlement to set public token", buf, 0x20u);
      v21 = v28;
      v28 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::fastFree(v21, v20);
        else
          --*(_DWORD *)v21;
      }
      v22 = v27;
      v27 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v26;
      v26 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v25;
      v25 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

void sub_197811FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v16);
    else
      *(_DWORD *)v13 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::WebPushDaemon::didShowNotificationForTesting(uint64_t a1, WebPushD::PushClientConnection *this, _DWORD **a3, uint64_t *a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[3];

  WebPushD::PushClientConnection::subscriptionSetIdentifier(this, (WTF::StringImpl **)v17);
  v7 = *a3;
  if (v7)
    *v7 += 2;
  v8 = *a4;
  *a4 = 0;
  v9 = WTF::fastMalloc((WTF *)0x50);
  v10 = v9;
  *(_QWORD *)v9 = &off_1E3505620;
  *(_QWORD *)(v9 + 16) = a1;
  v11 = v17[0];
  v12 = v17[1];
  v17[0] = 0uLL;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v12;
  *(_QWORD *)(v9 + 64) = v7;
  *(_QWORD *)(v9 + 72) = v8;
  if (*(_BYTE *)(a1 + 17))
  {
    WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::didShowNotificationForTesting(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v14) = v10;
    if (v14 == *(unsigned int *)(a1 + 48) - 1)
      v15 = 0;
    else
      v15 = v14 + 1;
    *(_QWORD *)(a1 + 32) = v15;
  }
  return result;
}

void sub_19781219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>::~KeyValuePair(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(WTF::StringImpl **)(a1 + 48);
  if (v2 <= v3)
  {
    v7 = (WTF::StringImpl *)((char *)v4 + 216 * v3);
    v6 = (WTF::StringImpl *)((char *)v4 + 216 * v2);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v4, (WTF::StringImpl *)((char *)v4 + 216 * v3));
    v5 = *(_QWORD *)(a1 + 48);
    v6 = (WTF::StringImpl *)(v5 + 216 * *(_QWORD *)(a1 + 32));
    v7 = (WTF::StringImpl *)(v5 + 216 * *(unsigned int *)(a1 + 56));
  }
  WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v6, v7);
  v9 = *(WTF **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v9, v8);
  }
  v10 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19NotificationPayloadENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  if (*(_BYTE *)(a2 + 120))
    WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem((WebCore::ApplePayInstallmentItem *)(a2 + 64), (WTF::StringImpl *)a2);
  v3 = *(WTF::StringImpl **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19NotificationPayloadENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload,WebCore::NotificationPayload*>((uint64_t)a1, a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_1978123D4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPushMessage::WebPushMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*((_BYTE *)a2 + 16))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    *(_BYTE *)(a1 + 16) = 1;
  }
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v5;
  WTF::URL::URL(a1 + 32, a2 + 4);
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 72), (uint64_t)(a2 + 9));
  return a1;
}

void sub_19781247C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*(_BYTE *)(v2 + 16))
  {
    v7 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::TimerBase *WebCore::Timer::Timer<WebPushD::WebPushDaemon,WebPushD::WebPushDaemon>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E35052F8;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

void sub_197812554(_Unwind_Exception *a1)
{
  WebCore::TimerBase *v1;

  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebPushD::WebPushDaemon::*&)(void),WebPushD::WebPushDaemon*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startMockPushService(void)::$_0,void,WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebPushD::WebPushDaemon::handleIncomingPush(*(_QWORD *)(a1 + 8), a2, a3);
}

WTF::WorkQueue *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startMockPushService(void)::$_1,void,std::unique_ptr<WebPushD::PushService> &&>::call(uint64_t a1, WebPushD::PushService **a2)
{
  return WebPushD::WebPushDaemon::setPushService(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startPushService(WTF::String const&,WTF::String const&)::$_0,void,WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebPushD::WebPushDaemon::handleIncomingPush(*(_QWORD *)(a1 + 8), a2, a3);
}

WTF::WorkQueue *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::startPushService(WTF::String const&,WTF::String const&)::$_1,void,std::unique_ptr<WebPushD::PushService> &&>::call(uint64_t a1, WebPushD::PushService **a2)
{
  return WebPushD::WebPushDaemon::setPushService(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushService(std::unique_ptr<WebPushD::PushService> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(result + 8);
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(_QWORD *)(v1 + 32);
    v4 = v3;
    if (v2 > v3)
      v4 = v3 + *(unsigned int *)(v1 + 48);
    if (v4 == v2)
      break;
    if (v2 == v3)
    {
      result = 80;
      __break(0xC471u);
      return result;
    }
    v5 = *(_QWORD *)(v1 + 40);
    v6 = *(_QWORD *)(v5 + 8 * v2);
    *(_QWORD *)(v5 + 8 * v2) = 0;
    v7 = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v7 + 8 * v2);
    *(_QWORD *)(v7 + 8 * v2) = 0;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v2 = *(_QWORD *)(v1 + 24);
    }
    if (v2 == *(unsigned int *)(v1 + 48) - 1)
      v9 = 0;
    else
      v9 = v2 + 1;
    *(_QWORD *)(v1 + 24) = v9;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void sub_19781269C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::connectionEventHandler(NSObject  {objcproto13OS_xpc_object}*)::$_0,void,WTF::UniqueRef<IPC::Encoder> &&>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E35053E8;
  v2 = (void *)a1[2];
  if (v2)

  v3 = (void *)a1[1];
  if (v3)

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::connectionEventHandler(NSObject  {objcproto13OS_xpc_object}*)::$_0,void,WTF::UniqueRef<IPC::Encoder> &&>::~CallableWrapper(WTF *this, void *a2)
{
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E35053E8;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::connectionEventHandler(NSObject  {objcproto13OS_xpc_object}*)::$_0,void,WTF::UniqueRef<IPC::Encoder> &&>::call(uint64_t a1, IPC::Encoder **a2)
{
  id v3;
  xpc_object_t value;

  WebKit::encoderToXPCData(a2, &value);
  xpc_dictionary_set_uint64(*(xpc_object_t *)(a1 + 16), "protocol version", 4uLL);
  v3 = value;
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 16), "encoded message", value);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 8), *(xpc_object_t *)(a1 + 16));
  if (v3)

}

void sub_1978127BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>>,NSObject  {objcproto13OS_xpc_object}*>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _BOOL8 v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 16 * v6);
  if (v7 == a2)
    return 1;
  v8 = 1;
  do
  {
    v9 = v7 != 0;
    if (!v7)
      break;
    v6 = (v6 + v8) & v2;
    v7 = *(_QWORD *)(a1 + 16 * v6);
    ++v8;
  }
  while (v7 != a2);
  return v9;
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<NSObject  {objcproto13OS_xpc_object}*,WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashMap<NSObject  {objcproto13OS_xpc_object}*,WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>,WTF::DefaultHash<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>,WTF::HashTraits<WTF::Ref<WebPushD::PushClientConnection,WTF::RawPtrTraits<WebPushD::PushClientConnection>,WTF::DefaultRefDerefTraits<WebPushD::PushClientConnection>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<NSObject  {objcproto13OS_xpc_object}*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 *v24;
  __int128 v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(v4 + 16 * v9);
      if (v10 != -1)
      {
        if (v10)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = v13 + 16 * v20;
          v23 = *(_DWORD **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[4];
          }
          v24 = (__int128 *)(v4 + 16 * v9);
          v25 = *v24;
          *((_QWORD *)v24 + 1) = 0;
          *(_OWORD *)v22 = v25;
          v12 = (_DWORD *)*((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = 0;
          if (!v12)
            goto LABEL_25;
          if (v12[4] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            goto LABEL_25;
          }
          --v12[4];
        }
        else
        {
          v11 = v4 + 16 * v9;
          v12 = *(_DWORD **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            if (v12[4] == 1)
              goto LABEL_24;
            --v12[4];
          }
        }
      }
LABEL_25:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3505410;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3505410;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection &,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
    return WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a1 + 32, a1 + 64, *(unsigned __int8 *)(a1 + 72), (uint64_t *)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197812C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  _OWORD *v11;
  _DWORD **v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  char v38;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  if (a2)
  {
    v11 = (_OWORD *)(v8 + 32);
    v12 = (_DWORD **)MEMORY[0x1E0CBF738];
    do
    {
      v13 = *v12;
      if (*v12)
        *v13 += 4;
      *((_QWORD *)v11 - 2) = v13;
      *((_QWORD *)v11 - 1) = v13;
      *v11 = 0uLL;
      v11[1] = 0uLL;
      v11[2] = 0uLL;
      v11 += 4;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v14 = 0;
    v15 = 0;
    v16 = v5;
    do
    {
      v17 = (uint64_t *)(v4 + (v14 << 6));
      if (v17[2] ^ 1 | v17[3])
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(v4 + (v14 << 6), (uint64_t)v9, v10))
        {
          WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>::~KeyValuePair(v4 + (v14 << 6));
        }
        else
        {
          v18 = *a1;
          v35 = v15;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v36 = -1640531527;
          v37 = 0;
          v38 = 0;
          WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>(&v36, (uint64_t *)(v4 + (v14 << 6)));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36);
          v23 = 0;
          do
          {
            v24 = v20 & v19;
            v25 = v18 + (v24 << 6);
            v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(v25, v21, v22);
            v20 = ++v23 + v24;
          }
          while (!v26);
          WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>::~KeyValuePair(v18 + (v24 << 6));
          v27 = *v17;
          *v17 = 0;
          *(_QWORD *)v25 = v27;
          v28 = v17[1];
          v17[1] = 0;
          *(_QWORD *)(v25 + 8) = v28;
          v29 = v4 + (v14 << 6);
          *(_OWORD *)(v25 + 16) = *((_OWORD *)v17 + 1);
          *(_OWORD *)(v25 + 32) = 0u;
          *(_OWORD *)(v25 + 48) = 0u;
          *(_QWORD *)(v25 + 32) = *(_QWORD *)(v29 + 32);
          *(_QWORD *)(v29 + 32) = 0;
          v30 = *(_QWORD *)(v25 + 40);
          v31 = *(_QWORD *)(v29 + 48);
          *(_QWORD *)(v25 + 40) = *(_QWORD *)(v29 + 40);
          *(_QWORD *)(v25 + 48) = v31;
          *(_QWORD *)(v29 + 40) = v30;
          *(_QWORD *)(v29 + 48) = 0;
          *(_DWORD *)(v25 + 56) = *(_DWORD *)(v29 + 56);
          *(_DWORD *)(v29 + 56) = 0;
          WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>::~KeyValuePair(v29);
          v15 = v35;
          if (v17 == a3)
            v15 = v18 + (v24 << 6);
        }
      }
      ++v14;
    }
    while (v14 != v16);
  }
  else
  {
    v15 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v15;
}

unsigned int *WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;

  v2 = a2[3];
  v3 = *a2;
  v4 = a2[1];
  v7 = a2[2];
  v5 = a2 + 2;
  v6 = v7;
  if (v3)
    v8 = v3;
  else
    v8 = *MEMORY[0x1E0CBF738];
  if (v4)
    v9 = v4;
  else
    v9 = *MEMORY[0x1E0CBF738];
  if (v6 | v2)
  {
    if (!v8)
      goto LABEL_48;
    v10 = *(_DWORD *)(v8 + 4);
    v11 = v10 & 0xFFFFFFFE;
    if ((v10 & 0xFFFFFFFE) != 0)
    {
      v12 = 0;
      v13 = *result;
      do
      {
        v14 = *(unsigned int *)(v8 + 4);
        if (v12 >= v14)
        {
          v16 = 0;
        }
        else
        {
          v15 = *(_QWORD *)(v8 + 8);
          if ((*(_BYTE *)(v8 + 16) & 4) != 0)
            v16 = *(unsigned __int8 *)(v15 + v12);
          else
            v16 = *(unsigned __int16 *)(v15 + 2 * v12);
        }
        v17 = v12 + 1;
        if (v12 + 1 >= v14)
        {
          v19 = 0;
        }
        else
        {
          v18 = *(_QWORD *)(v8 + 8);
          if ((*(_BYTE *)(v8 + 16) & 4) != 0)
            v19 = *(unsigned __int8 *)(v18 + v12 + 1);
          else
            v19 = *(unsigned __int16 *)(v18 + 2 * v12 + 2);
        }
        v20 = (v16 << 11) ^ ((v13 + v19) << 16) ^ (v13 + v19);
        v13 = v20 + (v20 >> 11);
        *result = v13;
        v12 = v17 + 1;
      }
      while (v17 + 1 < v11);
      if ((v10 & 1) == 0)
      {
LABEL_48:
        if (v9)
        {
          v36 = *(_DWORD *)(v9 + 4);
          v37 = v36 & 0xFFFFFFFE;
          if ((v36 & 0xFFFFFFFE) != 0)
          {
            v38 = 0;
            v39 = *result;
            do
            {
              v40 = *(unsigned int *)(v9 + 4);
              if (v38 >= v40)
              {
                v42 = 0;
              }
              else
              {
                v41 = *(_QWORD *)(v9 + 8);
                if ((*(_BYTE *)(v9 + 16) & 4) != 0)
                  v42 = *(unsigned __int8 *)(v41 + v38);
                else
                  v42 = *(unsigned __int16 *)(v41 + 2 * v38);
              }
              v43 = v38 + 1;
              if (v38 + 1 >= v40)
              {
                v45 = 0;
              }
              else
              {
                v44 = *(_QWORD *)(v9 + 8);
                if ((*(_BYTE *)(v9 + 16) & 4) != 0)
                  v45 = *(unsigned __int8 *)(v44 + v38 + 1);
                else
                  v45 = *(unsigned __int16 *)(v44 + 2 * v38 + 2);
              }
              v46 = (v42 << 11) ^ ((v39 + v45) << 16) ^ (v39 + v45);
              v39 = v46 + (v46 >> 11);
              *result = v39;
              v38 = v43 + 1;
            }
            while (v43 + 1 < v37);
            if ((v36 & 1) == 0)
              return WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(result, v5);
            v47 = *(_DWORD *)(v9 + 4);
            goto LABEL_67;
          }
          if ((v36 & 1) != 0)
          {
            v47 = 1;
LABEL_67:
            if (v47 <= v37)
            {
              v49 = 0;
            }
            else
            {
              v48 = *(_QWORD *)(v9 + 8);
              if ((*(_BYTE *)(v9 + 16) & 4) != 0)
                v49 = *(unsigned __int8 *)(v48 + v37);
              else
                v49 = *(unsigned __int16 *)(v48 + 2 * v37);
            }
            *result = ((*result + v49) ^ ((*result + v49) << 16)) + (((*result + v49) ^ ((*result + v49) << 16)) >> 11);
          }
        }
        return WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(result, v5);
      }
      v21 = *(_DWORD *)(v8 + 4);
    }
    else
    {
      if ((v10 & 1) == 0)
        goto LABEL_48;
      v21 = 1;
    }
    if (v21 <= v11)
    {
      v35 = 0;
    }
    else
    {
      v34 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(v8 + 16) & 4) != 0)
        v35 = *(unsigned __int8 *)(v34 + v11);
      else
        v35 = *(unsigned __int16 *)(v34 + 2 * v11);
    }
    *result = ((*result + v35) ^ ((*result + v35) << 16)) + (((*result + v35) ^ ((*result + v35) << 16)) >> 11);
    goto LABEL_48;
  }
  if (v8)
  {
    v22 = *(_DWORD *)(v8 + 4);
    v23 = v22 & 0xFFFFFFFE;
    if ((v22 & 0xFFFFFFFE) == 0)
    {
      if ((v22 & 1) == 0)
        goto LABEL_78;
      v33 = 1;
      goto LABEL_74;
    }
    v24 = 0;
    v25 = *result;
    do
    {
      v26 = *(unsigned int *)(v8 + 4);
      if (v24 >= v26)
      {
        v28 = 0;
      }
      else
      {
        v27 = *(_QWORD *)(v8 + 8);
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          v28 = *(unsigned __int8 *)(v27 + v24);
        else
          v28 = *(unsigned __int16 *)(v27 + 2 * v24);
      }
      v29 = v24 + 1;
      if (v24 + 1 >= v26)
      {
        v31 = 0;
      }
      else
      {
        v30 = *(_QWORD *)(v8 + 8);
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          v31 = *(unsigned __int8 *)(v30 + v24 + 1);
        else
          v31 = *(unsigned __int16 *)(v30 + 2 * v24 + 2);
      }
      v32 = (v28 << 11) ^ ((v25 + v31) << 16) ^ (v25 + v31);
      v25 = v32 + (v32 >> 11);
      *result = v25;
      v24 = v29 + 1;
    }
    while (v29 + 1 < v23);
    if ((v22 & 1) != 0)
    {
      v33 = *(_DWORD *)(v8 + 4);
LABEL_74:
      if (v33 <= v23)
      {
        v51 = 0;
      }
      else
      {
        v50 = *(_QWORD *)(v8 + 8);
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          v51 = *(unsigned __int8 *)(v50 + v23);
        else
          v51 = *(unsigned __int16 *)(v50 + 2 * v23);
      }
      *result = ((*result + v51) ^ ((*result + v51) << 16)) + (((*result + v51) ^ ((*result + v51) << 16)) >> 11);
    }
  }
LABEL_78:
  if (!v9)
    return result;
  v52 = *(_DWORD *)(v9 + 4);
  v53 = v52 & 0xFFFFFFFE;
  if ((v52 & 0xFFFFFFFE) == 0)
  {
    if ((v52 & 1) == 0)
      return result;
    v63 = 1;
    goto LABEL_97;
  }
  v54 = 0;
  v55 = *result;
  do
  {
    v56 = *(unsigned int *)(v9 + 4);
    if (v54 >= v56)
    {
      v58 = 0;
    }
    else
    {
      v57 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        v58 = *(unsigned __int8 *)(v57 + v54);
      else
        v58 = *(unsigned __int16 *)(v57 + 2 * v54);
    }
    v59 = v54 + 1;
    if (v54 + 1 >= v56)
    {
      v61 = 0;
    }
    else
    {
      v60 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        v61 = *(unsigned __int8 *)(v60 + v54 + 1);
      else
        v61 = *(unsigned __int16 *)(v60 + 2 * v54 + 2);
    }
    v62 = (v58 << 11) ^ ((v55 + v61) << 16) ^ (v55 + v61);
    v55 = v62 + (v62 >> 11);
    *result = v55;
    v54 = v59 + 1;
  }
  while (v59 + 1 < v53);
  if ((v52 & 1) != 0)
  {
    v63 = *(_DWORD *)(v9 + 4);
LABEL_97:
    if (v63 <= v53)
    {
      v65 = 0;
    }
    else
    {
      v64 = *(_QWORD *)(v9 + 8);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        v65 = *(unsigned __int8 *)(v64 + v53);
      else
        v65 = *(unsigned __int16 *)(v64 + 2 * v53);
    }
    *result = ((*result + v65) ^ ((*result + v65) << 16)) + (((*result + v65) ^ ((*result + v65) << 16)) >> 11);
  }
  return result;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v4;
  const WTF::StringImpl *v5;
  WTF *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;

  v4 = (WTF **)MEMORY[0x1E0CBF738];
  v5 = (const WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *(_DWORD *)v5 += 4;
    v6 = *v4;
  }
  else
  {
    v6 = 0;
  }
  if (*(_QWORD *)a1)
    v7 = *(WTF **)a1;
  else
    v7 = v6;
  if (WTF::equal(v7, v5, a3))
  {
    if (*(_QWORD *)(a1 + 8))
      v10 = *(WTF **)(a1 + 8);
    else
      v10 = *v4;
    if (v5)
      v11 = v5;
    else
      v11 = *v4;
    v12 = WTF::equal(v10, v11, v9);
    if (*(_OWORD *)(a1 + 16) == 0)
      v13 = v12;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  if (v5)
  {
    v14 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v8);
      v14 = *(_DWORD *)v5;
    }
    else
    {
      *(_DWORD *)v5 = v14;
    }
    v15 = v14 - 2;
    if (v15)
      *(_DWORD *)v5 = v15;
    else
      WTF::StringImpl::destroy(v5, v8);
  }
  return v13;
}

void sub_1978133B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  int v4;
  int v5;

  if (v2)
  {
    v4 = *(_DWORD *)v2 - 2;
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      v4 = *(_DWORD *)v2;
    }
    else
    {
      *(_DWORD *)v2 = v4;
    }
    v5 = v4 - 2;
    if (v5)
      *(_DWORD *)v2 = v5;
    else
      WTF::StringImpl::destroy(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::PushSubscriptionSetIdentifierHash::equal(WTF **this, const WTF::StringImpl **a2, const WebCore::PushSubscriptionSetIdentifier *a3)
{
  _QWORD *v5;
  WTF *v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  WTF *v12;
  const WTF::StringImpl *v13;

  v5 = (_QWORD *)MEMORY[0x1E0CBF738];
  if (*this)
    v6 = *this;
  else
    v6 = (WTF *)*MEMORY[0x1E0CBF738];
  if (*a2)
    v7 = *a2;
  else
    v7 = (const WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  result = WTF::equal(v6, v7, a3);
  if ((_DWORD)result)
  {
    v10 = this[1] ? this[1] : (WTF *)*v5;
    v11 = a2[1] ? a2[1] : (const WTF::StringImpl *)*v5;
    result = WTF::equal(v10, v11, v9);
    if ((_DWORD)result)
    {
      v13 = this[2];
      v12 = this[3];
      return (*((_OWORD *)this + 1) != 0) == (*((_OWORD *)a2 + 1) != 0)
          && (v13 == a2[2] && v12 == a2[3] || ((unint64_t)v13 | (unint64_t)v12) == 0);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Deque<WebKit::WebPushMessage,0ul>::expandCapacity(WTF::StringImpl *result)
{
  unint64_t v1;
  unint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = *((unsigned int *)result + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x12F684B)
  {
    __break(0xC471u);
    return result;
  }
  v3 = result;
  v4 = (WTF::StringImpl *)*((_QWORD *)result + 2);
  v5 = 216 * v2 + 216;
  v6 = WTF::fastMalloc((WTF *)(216 * v2 + 216));
  *((_DWORD *)v3 + 6) = v5 / 0xD8;
  *((_QWORD *)v3 + 2) = v6;
  v7 = *((_QWORD *)v3 + 1);
  if (*(_QWORD *)v3 <= v7)
  {
    result = WTF::VectorMover<false,WebKit::WebPushMessage>::move((WTF::StringImpl *)((char *)v4 + 216 * *(_QWORD *)v3), (WTF::StringImpl *)((char *)v4 + 216 * v7), v6 + 216 * *(_QWORD *)v3);
    if (!v4)
      return result;
  }
  else
  {
    WTF::VectorMover<false,WebKit::WebPushMessage>::move(v4, (WTF::StringImpl *)((char *)v4 + 216 * v7), v6);
    v8 = *(_QWORD *)v3 - v1 + *((unsigned int *)v3 + 6);
    result = WTF::VectorMover<false,WebKit::WebPushMessage>::move((WTF::StringImpl *)((char *)v4 + 216 * *(_QWORD *)v3), (WTF::StringImpl *)((char *)v4 + 216 * v1), *((_QWORD *)v3 + 2) + 216 * v8);
    *(_QWORD *)v3 = v8;
    if (!v4)
      return result;
  }
  if (*((WTF::StringImpl **)v3 + 2) == v4)
  {
    *((_QWORD *)v3 + 2) = 0;
    *((_DWORD *)v3 + 6) = 0;
  }
  return (WTF::StringImpl *)WTF::fastFree(v4, v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E3505438;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E3505438;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *result;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v2 + 8))
  {
    WTF::String::utf8();
    if (v18)
    {
      v3 = (char *)v18 + 16;
      v4 = *((_QWORD *)v18 + 1);
    }
    else
    {
      v4 = 0;
      v3 = 0;
    }
    v5 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v3, v4);
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v5, 0, 0);
    if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v7 = *(_QWORD *)(v2 + 8);
      v8 = objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("topic"));
      v9 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("userInfo"));
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = &off_1E3505460;
      v11[1] = v10;
      v17 = v11;
      WebPushD::PushService::didReceivePushMessage(v7, v8, v9, (uint64_t *)&v17);
      v13 = (uint64_t)v17;
      v17 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    if (v5)
      CFRelease(v5);
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v12);
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

void sub_197813880(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  const void *v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (v10)
    CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3505460;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3505460;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1978139E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::silentPushTimerFired(void)::$_0,void,unsigned int>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E3505488;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::silentPushTimerFired(void)::$_0,void,unsigned int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E3505488;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::silentPushTimerFired(void)::$_0,void,unsigned int>::call(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t result;
  char *v6;
  char *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE716B8;
  result = os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(a1 + 16));
    WTF::String::utf8();
    WTF::String::utf8();
    v6 = (char *)v11 + 16;
    if (!v11)
      v6 = 0;
    *(_DWORD *)buf = 136446723;
    if (v9)
      v7 = (char *)v9 + 16;
    else
      v7 = 0;
    v13 = v6;
    v14 = 2085;
    v15 = v7;
    v16 = 1024;
    v17 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "showNotification not called in time for %{public}s (origin = %{sensitive}s), silent push count is now %u", buf, 0x1Cu);
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v8);
      else
        --*(_DWORD *)v11;
    }
    result = (uint64_t)v10;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        return WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return result;
}

void sub_197813CA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>>,WebCore::PushSubscriptionSetIdentifier>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  WTF **v7;
  const WebCore::PushSubscriptionSetIdentifier *v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  int v11;
  const WebCore::PushSubscriptionSetIdentifier *v12;
  unsigned int v14;
  __int16 v15;
  char v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v14 = -1640531527;
  v15 = 0;
  v16 = 0;
  WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>(&v14, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v14) & v5;
  v7 = (WTF **)(v2 + (v6 << 6));
  if ((WTF::PushSubscriptionSetIdentifierHash::equal(v7, (const WTF::StringImpl **)a2, v8) & 1) == 0)
  {
    v11 = 1;
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>((uint64_t)v7, v9, v10) & 1) == 0)
    {
      v6 = ((_DWORD)v6 + v11) & v5;
      v7 = (WTF **)(v2 + (v6 << 6));
      ++v11;
      if ((WTF::PushSubscriptionSetIdentifierHash::equal(v7, (const WTF::StringImpl **)a2, v12) & 1) != 0)
        return (unint64_t)v7;
    }
    if (*a1)
      return *a1 + ((unint64_t)*(unsigned int *)(*a1 - 4) << 6);
    return 0;
  }
  return (unint64_t)v7;
}

WTF *WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD **v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  WTF *result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD **)MEMORY[0x1E0CBF738];
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v7 += 2;
  *(_QWORD *)a2 = v7;
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(WTF::StringImpl **)(a2 + 48);
  if (v9 <= v10)
  {
    v14 = (WTF::StringImpl *)((char *)v11 + 216 * v10);
    v13 = (WTF::StringImpl *)((char *)v11 + 216 * v9);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v11, (WTF::StringImpl *)((char *)v11 + 216 * v10));
    v12 = *(_QWORD *)(a2 + 48);
    v13 = (WTF::StringImpl *)(v12 + 216 * *(_QWORD *)(a2 + 32));
    v14 = (WTF::StringImpl *)(v12 + 216 * *(unsigned int *)(a2 + 56));
  }
  WTF::VectorDestructor<true,WebKit::WebPushMessage>::destruct(v13, v14);
  result = *(WTF **)(a2 + 48);
  if (result)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    result = (WTF *)WTF::fastFree(result, v15);
  }
  ++*(_DWORD *)(*a1 - 16);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) - 1;
  else
    v18 = -1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
  {
    v20 = 6 * *(_DWORD *)(v19 - 12);
    v21 = *(_DWORD *)(v19 - 4);
    if (v20 < v21 && v21 >= 9)
      return (WTF *)WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>>>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashMap<WebCore::PushSubscriptionSetIdentifier,WTF::Deque<WebKit::WebPushMessage,0ul>,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WTF::Deque<WebKit::WebPushMessage,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::rehash(a1, v21 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E35054B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E35054B0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushTopicsForTesting(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7[2];
  uint64_t v8[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 40))(v8);
    (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)(v2 + 8) + 48))(v7);
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()((uint64_t *)(a1 + 16), v8, v7);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    v7[0] = 0;
    v7[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()((uint64_t *)(a1 + 16), v8, v7);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v4);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v5);
}

void sub_197814088(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v12;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::subscribeToPushService(WebPushD::PushClientConnection &,WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  *(_QWORD *)a1 = &off_1E35054D8;
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::subscribeToPushService(WebPushD::PushClientConnection &,WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  *(_QWORD *)this = &off_1E35054D8;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::subscribeToPushService(WebPushD::PushClientConnection &,WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[80];
  int v6;
  char v7;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    return WebPushD::PushService::subscribe(v2, a1 + 32, (_DWORD **)(a1 + 64), a1 + 72, (uint64_t *)(a1 + 88));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 8;
  v6 = 1;
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E35054F0[v6])(&v7, v5);
  return result;
}

void sub_197814300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E35054F0[a19])(v20 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3505510;
  v3 = a1[11];
  a1[11] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3505510;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::unsubscribeFromPushService(WebPushD::PushClientConnection &,WTF::URL const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[16];
  int v6;
  char v7;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    return WebPushD::PushService::unsubscribe(v2, a1 + 32, (_DWORD **)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t *)(a1 + 88));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 8;
  v6 = 1;
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3505528[v6])(&v7, v5);
  return result;
}

void sub_197814568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E3505528[a11])(v12 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3505548;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3505548;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::getPushSubscription(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  _BYTE v6[8];
  char v7[88];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    return WebPushD::PushService::getSubscription(v2, a1 + 32, (_DWORD **)(a1 + 64), (uint64_t *)(a1 + 72));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7[0] = 8;
  v8 = 1;
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v8 != -1)
    return ((uint64_t (*)(char *, char *))off_1E3505560[v8])(&v5, v7);
  return result;
}

void sub_197814818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = v27;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (a26 != -1)
    ((void (*)(char *, uint64_t))off_1E3505560[a26])(&a13, v26);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3505580;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3505580;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::incrementSilentPushCount(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
    return WebPushD::PushService::incrementSilentPushCount(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a1 + 32, (WTF::StringImpl **)(a1 + 64), (uint64_t *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197814A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E35055A8;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E35055A8;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removeAllPushSubscriptions(WebPushD::PushClientConnection &,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1[2] + 8))
    return WebPushD::PushService::removeRecordsForSubscriptionSet(*(_QWORD *)(a1[2] + 8), (WebCore::PushSubscriptionSetIdentifier *)(a1 + 4), a1 + 8);
  v2 = a1[8];
  a1[8] = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197814BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E35055D0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E35055D0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection &,WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
    return WebPushD::PushService::removeRecordsForSubscriptionSetAndOrigin(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (WebCore::PushSubscriptionSetIdentifier *)(a1 + 32), (_DWORD **)(a1 + 64), (uint64_t *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197814DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E35055F8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E35055F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::setPublicTokenForTesting(WebPushD::PushClientConnection &,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  WTF *v4;
  WTF *v5;
  char *v6;
  char v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  if (!v2)
  {
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = WTF::String::utf8();
  if (v12)
  {
    v4 = (WTF *)*((_QWORD *)v12 + 1);
    v13 = 0;
    LODWORD(v14) = 0;
    HIDWORD(v14) = (_DWORD)v4;
    if (v4)
    {
      if ((unint64_t)v4 >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v5 = (WTF *)WTF::fastMalloc(v4);
      v6 = (char *)v12 + 16;
      LODWORD(v14) = (_DWORD)v4;
      v13 = v5;
      do
      {
        v7 = *v6++;
        *(_BYTE *)v5 = v7;
        v5 = (WTF *)((char *)v5 + 1);
        v4 = (WTF *)((char *)v4 - 1);
      }
      while (v4);
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  (*(void (**)(_QWORD, WTF **))(*(_QWORD *)*v2 + 112))(*v2, &v13);
  v9 = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    WTF::fastFree(v9, v8);
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v8);
    else
      --*(_DWORD *)v12;
  }
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void sub_197814FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF *a11, int a12)
{
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::didShowNotificationForTesting(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E3505620;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::didShowNotificationForTesting(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3505620;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::WebPushDaemon::didShowNotificationForTesting(WebPushD::PushClientConnection &,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  const WTF::StringImpl *v3;
  double v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  WTF *v8;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  NSObject *v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint8_t buf[4];
  char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 16);
  if (v2[1])
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    v5 = v2[25];
    if ((_QWORD *)v5 != v2 + 24)
    {
      v6 = v4;
      v7 = (_QWORD *)MEMORY[0x1E0CBF738];
      while (1)
      {
        v8 = *(_QWORD *)(v5 + 16) ? *(WTF **)(v5 + 16) : (WTF *)*v7;
        v9 = *(_QWORD *)(a1 + 32) ? *(const WTF::StringImpl **)(a1 + 32) : (const WTF::StringImpl *)*v7;
        if (WTF::equal(v8, v9, v3))
        {
          v10 = *(_QWORD *)(v5 + 24) ? *(WTF **)(v5 + 24) : (WTF *)*v7;
          v11 = *(_QWORD *)(a1 + 40) ? *(const WTF::StringImpl **)(a1 + 40) : (const WTF::StringImpl *)*v7;
          if (WTF::equal(v10, v11, v3))
          {
            v12 = *(_QWORD *)(v5 + 32) == *(_QWORD *)(a1 + 48) && *(_QWORD *)(v5 + 40) == *(_QWORD *)(a1 + 56);
            v13 = !v12 && *(_OWORD *)(v5 + 32) != 0;
            if ((*(_OWORD *)(v5 + 32) != 0) == (*(_OWORD *)(a1 + 48) != 0)
              && !v13
              && WTF::equal(*(WTF **)(v5 + 48), *(const WTF::StringImpl **)(a1 + 64), v3)
              && *(double *)(v5 + 56) > v6)
            {
              break;
            }
          }
        }
        v5 = *(_QWORD *)(v5 + 8);
        if ((_QWORD *)v5 == v2 + 24)
          goto LABEL_29;
      }
      v16 = qword_1ECE716B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(v5 + 16));
        WTF::String::utf8();
        WTF::String::utf8();
        v17 = (char *)v23 + 16;
        if (!v23)
          v17 = 0;
        if (v21)
          v18 = (char *)v21 + 16;
        else
          v18 = 0;
        *(_DWORD *)buf = 136446467;
        v25 = v17;
        v26 = 2085;
        v27 = v18;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "showNotification called in time for %{public}s (origin = %{sensitive}s)", buf, 0x16u);
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v19);
          else
            --*(_DWORD *)v21;
        }
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
            WTF::fastFree(v23, v19);
          else
            --*(_DWORD *)v23;
        }
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      v20 = v2[25];
      std::list<WebPushD::WebPushDaemon::PotentialSilentPush,WTF::FastAllocator<WebPushD::WebPushDaemon::PotentialSilentPush>>::erase((WTF *)(v2 + 24), (WTF *)v5);
      if (v5 == v20)
        WebPushD::WebPushDaemon::rescheduleSilentPushTimer((WebPushD::WebPushDaemon *)v2);
    }
LABEL_29:
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

void sub_197815454(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPushDaemonMain(WebKit *this, char *const *a2, char **a3)
{
  int v4;
  WTF *v5;
  void *v6;
  WTF *v7;
  WebCore *v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  const char *v13;
  const char **v14;
  int v15;
  id v16;
  void *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35[3];
  int v36;
  char v37;
  const char *v38;
  int v39;
  char v40;
  uint64_t v41;

  v4 = (int)this;
  v41 = *MEMORY[0x1E0C80C00];
  v5 = (WTF *)MEMORY[0x19AEB9C30](this, a2, a3);
  WTF::initializeMainThread(v5);
  v6 = (void *)os_transaction_create();
  v7 = (WTF *)_CFPrefsSetDirectModeEnabled();
  WTF::logChannels(v7);
  LOBYTE(v33) = 0;
  v34 = 0;
  v8 = (WebCore *)WTF::LogChannels::initializeLogChannelsIfNecessary();
  WebCore::logChannels(v8);
  LOBYTE(v31) = 0;
  v32 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  {
LABEL_40:
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
    v9[3752] = 1;
  }
  LOBYTE(v29) = 0;
  v30 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v30)
  {
    v11 = v29;
    v29 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  v28 = 0;
  v13 = "com.apple.webkit.webpushd.service";
  v9 = "com.apple.aps.webkit.webpushd.incoming-push";
  v14 = (const char **)MEMORY[0x1E0C844D0];
  while (1)
  {
    while (1)
    {
      v15 = getopt_long(v4, a2, "", (const option *)&WebKit::WebPushDaemonMain(int,char **)::options, &v28);
      if (v15 != 109)
        break;
      v13 = *v14;
    }
    if (v15 == -1)
      break;
    if (v15 == 102)
    {
      v12 = 1;
    }
    else
    {
      if (v15 != 112)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknown option: %c\n", *MEMORY[0x1E0C844E8]);
        WTF::exitProcess((WTF *)1);
        __break(1u);
        goto LABEL_40;
      }
      v9 = (char *)*v14;
    }
  }
  WebKit::startListeningForMachServiceConnections(v13, (uint64_t)"com.apple.private.webkit.webpush", 33, (uint64_t)WebPushD::connectionAdded, (uint64_t)WebPushD::connectionRemoved, (uint64_t)WebPushD::connectionEventHandler);
  if ((v12 & 1) != 0)
  {
    {
      WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    }
    WebPushD::WebPushDaemon::startMockPushService((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
  }
  else
  {
    v16 = -[NSArray objectAtIndexedSubscript:](NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1), "objectAtIndexedSubscript:", 0);
    MEMORY[0x19AEABCC8](&v27, v16);
    v35[0] = (WTF::StringImpl *)"WebKit";
    LODWORD(v35[1]) = 6;
    BYTE4(v35[1]) = 1;
    v35[2] = (WTF::StringImpl *)"WebPush";
    v36 = 7;
    v37 = 1;
    v38 = "PushDatabase.db";
    v39 = 15;
    v40 = 1;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v24, (__int128 *)v35, 3uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    v18 = v24;
    if (v24)
    {
      v24 = 0;
      v25 = 0;
      WTF::fastFree(v18, v17);
    }
    {
      WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    }
    WTF::String::String((WTF::String *)v35, v9);
    WebPushD::WebPushDaemon::startPushService((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon, (const WTF::String *)v35, &v26);
    v20 = v35[0];
    v35[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v26;
    v26 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v19);
        if (!v6)
          goto LABEL_36;
        goto LABEL_35;
      }
      *(_DWORD *)v22 -= 2;
    }
  }
  if (v6)
LABEL_35:

LABEL_36:
  objc_autoreleasePoolPop(v5);
  CFRunLoopRun();
  return 0;
}

void sub_19781590C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21)
{
  void *v21;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (v21)

  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::connectionAdded(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v1 = a1;
  }
  return WebPushD::WebPushDaemon::connectionAdded(WebPushD::WebPushDaemon::singleton(void)::daemon, v1);
}

void WebPushD::connectionRemoved(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v1 = a1;
  }
  WebPushD::WebPushDaemon::connectionRemoved(WebPushD::WebPushDaemon::singleton(void)::daemon, v1);
}

void WebPushD::connectionEventHandler(id a1)
{
  id v1;

  v1 = a1;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)WebPushD::WebPushDaemon::singleton(void)::daemon);
    v1 = a1;
  }
  WebPushD::WebPushDaemon::connectionEventHandler(WebPushD::WebPushDaemon::singleton(void)::daemon, v1);
}

WTF *WebPushTool::Connection::connectToService(WTF *result, int a2)
{
  uint64_t v3;
  _xpc_connection_s *mach_service;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  _QWORD handler[4];
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v43;
  IPC::Encoder *v44;
  IPC::Encoder *v45;
  WTF *v46;
  int v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)result + 4))
    return result;
  v3 = (uint64_t)result;
  mach_service = xpc_connection_create_mach_service(*((const char **)result + 5), MEMORY[0x1E0C80D38], 0);
  v5 = *(const void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = mach_service;
  if (v5)
  {
    CFRelease(v5);
    mach_service = *(_xpc_connection_s **)(v3 + 32);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistE_block_invoke;
  handler[3] = &__block_descriptor_48_e8_32c83_ZTSKZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistEE3__0_e33_v16__0__NSObject_OS_xpc_object__8l;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
  v6 = *(unsigned int **)(v3 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v37 = v3;
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
  }
  else
  {
    v37 = v3;
  }
  v38 = (WTF *)v6;
  xpc_connection_set_event_handler(mach_service, handler);
  if (!v6)
    goto LABEL_11;
  do
  {
    v10 = __ldaxr(v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v6));
  if (!v11)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v9);
    if (a2)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if (a2)
    {
LABEL_12:
      v12 = WebPushTool::maybeConnectToService(*(WebPushTool **)(v3 + 40), (const char *)v9);
      if (!v12)
        printf("Waiting for service '%s' to be available\n", *(const char **)(v3 + 40));
      while (!v12)
      {
        usleep(0x3E8u);
        v12 = WebPushTool::maybeConnectToService(*(WebPushTool **)(v3 + 40), v13);
      }
    }
  }
  printf("Connecting to service '%s'\n", *(const char **)(v3 + 40));
  xpc_connection_activate(*(xpc_connection_t *)(v3 + 32));
  *(_OWORD *)task_info_out = 0u;
  v43 = 0u;
  task_info_outCnt = 8;
  if (task_info(*MEMORY[0x1E0C83DA0], 0xFu, task_info_out, &task_info_outCnt))
  {
    puts("Unable to get audit token to send");
  }
  else
  {
    LOBYTE(v46) = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    LOBYTE(v45) = 1;
    v39 = 0;
    v40 = 0;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v39, (WTF::FastMalloc *)0x20);
    v26 = v39;
    HIDWORD(v40) = 32;
    v27 = v43;
    *(_OWORD *)v39 = *(_OWORD *)task_info_out;
    *((_OWORD *)v26 + 1) = v27;
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v46, (uint64_t)&v39);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    v29 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v29 = 664;
    *(_QWORD *)(v29 + 8) = v28;
    *(_QWORD *)(v29 + 528) = v29 + 16;
    *(_QWORD *)(v29 + 536) = v29 + 16;
    *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v29 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
    v44 = (IPC::Encoder *)v29;
    IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode((IPC::Encoder *)v29, (uint64_t)&v45);
    (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v3 + 16))(v3, &v44);
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v14);
      WTF::fastFree(v31, v32);
    }
    v33 = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree(v33, v14);
    }
    v34 = v49;
    v49 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (v48)
    {
      v35 = v46;
      if (v46)
      {
        v46 = 0;
        v47 = 0;
        WTF::fastFree(v35, v14);
      }
    }
  }
  if (*(_BYTE *)(v3 + 20) && !*(_DWORD *)(v3 + 16))
  {
    printf("Now streaming debug messages via: log stream --debug --info --process webpushd");
    system("log stream --debug --info --process webpushd");
  }
  if (*(_QWORD *)(v3 + 48))
  {
    puts("Injecting push message");
    v15 = *(_QWORD *)(v3 + 48);
    v16 = *(_BYTE *)(v3 + 20);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 657;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v45 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::encode((IPC::Encoder *)v18, v15);
    v19 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = off_1E35056E8;
    *(_BYTE *)(v19 + 8) = v16 ^ 1;
    *(_QWORD *)task_info_out = v19;
    (*(void (**)(uint64_t, IPC::Encoder **, integer_t *))(*(_QWORD *)v3 + 24))(v3, &v45, task_info_out);
    v20 = *(_QWORD *)task_info_out;
    *(_QWORD *)task_info_out = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v45;
    v45 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v14);
      WTF::fastFree(v22, v23);
    }
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)result);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)result));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)result);
      return (WTF *)WTF::fastFree(result, v14);
    }
  }
  return result;
}

void sub_197815F7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,IPC::Encoder *a24,IPC::Encoder *a25,WTF *a26,int a27,int a28,char a29,WTF::StringImpl *a30)
{
  unsigned int v31;
  unsigned int v32;

  if (a15)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)a15);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)a15));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)a15);
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistE_block_invoke(uint64_t a1, id a2)
{
  uint64_t v2;
  WebPushTool::Connection *v4;
  const char *string;
  const char *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = *(WebPushTool::Connection **)(a1 + 32);
    if (a2 == (id)MEMORY[0x1E0C81260])
    {
      v6 = "Failed to start listening for connections to mach service";
    }
    else
    {
      if (a2 != (id)MEMORY[0x1E0C81258])
      {
        if (object_getClass(a2) == (Class)MEMORY[0x1E0C812F8])
        {
          string = xpc_dictionary_get_string(a2, "debug message");
          if (string)
            puts(string);
        }
        else
        {
          __break(0xC471u);
        }
        return;
      }
      puts("Connection closed");
      if (!*((_BYTE *)v4 + 24))
      {
LABEL_13:
        WebPushTool::Connection::connectionDropped(v4);
        return;
      }
      v6 = "===============\nReconnecting...";
    }
    puts(v6);
    goto LABEL_13;
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSKZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistEE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c83_ZTSKZN11WebPushTool10Connection16connectToServiceENS_21WaitForServiceToExistEE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebPushTool::maybeConnectToService(WebPushTool *this, const char *a2)
{
  mach_port_t sp;
  mach_port_t special_port;

  special_port = 0;
  task_get_special_port(*MEMORY[0x1E0C83DA0], 4, &special_port);
  sp = 0;
  if (bootstrap_look_up(special_port, (const char *)this, &sp))
    return 0;
  else
    return sp;
}

void WebPushTool::Connection::connectionDropped(WebPushTool::Connection *this)
{
  const void *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  __CFRunLoop *Current;
  _QWORD *v7;

  v2 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    CFRelease(v2);
  if (*((_BYTE *)this + 24))
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E3505710;
    v5[1] = this;
    v5[2] = v3;
    v7 = v5;
    WTF::callOnMainRunLoop();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  else
  {
    Current = CFRunLoopGetCurrent();
    CFRunLoopStop(Current);
  }
}

void sub_197816328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebPushTool::Connection::performSendWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder **a2)
{
  _xpc_connection_s *v3;
  xpc_object_t v4;
  xpc_object_t message;

  WebPushTool::messageDictionaryFromEncoder(&message, a2);
  v3 = *(_xpc_connection_s **)(a1 + 32);
  v4 = message;
  xpc_connection_send_message(v3, message);
  if (v4)

  return 1;
}

void sub_1978163C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

void WebPushTool::messageDictionaryFromEncoder(_QWORD *a1, IPC::Encoder **a2)
{
  xpc_object_t v3;
  id v4;
  xpc_object_t value;

  WebKit::encoderToXPCData(a2, &value);
  v3 = xpc_dictionary_create(0, 0, 0);
  *a1 = v3;
  xpc_dictionary_set_uint64(v3, "protocol version", 4uLL);
  v4 = value;
  xpc_dictionary_set_value(v3, "encoded message", value);
  if (v4)

}

void sub_197816464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

uint64_t WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder **a2, uint64_t *a3)
{
  _xpc_connection_s *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v10;

  WebPushTool::messageDictionaryFromEncoder(&v10, a2);
  v5 = *(_xpc_connection_s **)(a1 + 32);
  v6 = v10;
  v7 = *a3;
  *a3 = 0;
  v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v8 = MEMORY[0x1E0C809A0];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::descriptor;
  v8[4] = v7;
  xpc_connection_send_message_with_reply(v5, v6, MEMORY[0x1E0C80D38], v8);
  _Block_release(v8);
  if (v6)

  return 1;
}

void sub_19781654C(_Unwind_Exception *a1)
{
  void *v1;
  const void *v2;

  _Block_release(v2);
  if (v1)

  _Unwind_Resume(a1);
}

void WebPushTool::Connection::~Connection(WebPushTool::Connection *this)
{
  WTF *v1;
  void *v2;

  WebPushTool::Connection::~Connection(this);
  WTF::fastFree(v1, v2);
}

{
  _QWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  v2 = (_QWORD *)((char *)this + 48);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100]((uint64_t)v2, v3);
  v5 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    CFRelease(v5);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

uint64_t WebPushTool::Connection::messageSenderConnection(WebPushTool::Connection *this)
{
  return 0;
}

uint64_t WebPushTool::Connection::messageSenderDestinationID(WebPushTool::Connection *this)
{
  return 0;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

IPC::Decoder *WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0>(WebPushTool::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke(uint64_t a1, id a2)
{
  uint64_t v4;
  IPC::Decoder *result;
  const void *data;
  void *v7;
  IPC::Decoder *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13[2];
  IPC::Decoder *v14;
  size_t length;

  if (object_getClass(a2) == (Class)MEMORY[0x1E0C812F8])
  {
    if (xpc_dictionary_get_uint64(a2, "protocol version") == 4)
    {
      length = 0;
      data = xpc_dictionary_get_data(a2, "encoded message", &length);
      v13[0] = 0;
      v13[1] = 0;
      IPC::Decoder::create((WTF *)length, data, v13, &v14);
      WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v7);
      v8 = v14;
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, IPC::Decoder *))(*(_QWORD *)v9 + 16))(v9, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = v14;
      v14 = 0;
      if (result)
      {
        IPC::Decoder::~Decoder(result);
        return (IPC::Decoder *)WTF::fastFree(v10, v11);
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
      return (IPC::Decoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    return (IPC::Decoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_1978166F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Decoder *a11)
{
  uint64_t v11;
  WTF *v13;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
  {
    IPC::Decoder::~Decoder(a11);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (a2)
  {
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 72, a2);
    v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    JUMPOUT(0x19AEB936CLL);
  }
}

void WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::InjectPushMessageForTesting,WebPushTool::Connection::sendPushMessage(void)::$_0>(Messages::PushClientConnection::InjectPushMessageForTesting &&,WebPushTool::Connection::sendPushMessage(void)::$_0 &&)::{lambda(IPC::Decoder *)#1},void,WebPushTool::Connection::sendPushMessage(void)::$_0 &&>::call(uint64_t a1, uint64_t *a2)
{
  _BYTE *v2;
  const char *v3;
  void *v4;
  WTF *v5;
  __CFRunLoop *Main;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF *v10;

  v2 = (_BYTE *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v8);
    if (v9)
    {
      if (v8 && *((_DWORD *)v8 + 1))
      {
        WTF::String::utf8();
        if (v10)
          v3 = (char *)v10 + 16;
        else
          v3 = 0;
        printf("Push message injected. Error: %s\n", v3);
        v5 = v10;
        v10 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, v4);
          else
            --*(_DWORD *)v5;
        }
      }
      else
      {
        puts("Push message injected.");
      }
      if (*v2)
      {
        Main = CFRunLoopGetMain();
        CFRunLoopStop(Main);
      }
      if (v9)
      {
        v7 = v8;
        v8 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::PushClientConnection::InjectPushMessageForTesting,WebPushTool::Connection::sendPushMessage(void)::$_0>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::PushClientConnection::InjectPushMessageForTesting,WebPushTool::Connection::sendPushMessage(void)::$_0>((_BYTE *)(a1 + 8));
  }
}

void sub_197816980(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::PushClientConnection::InjectPushMessageForTesting,WebPushTool::Connection::sendPushMessage(void)::$_0>(_BYTE *a1)
{
  __CFRunLoop *Main;

  puts("Push message injected.");
  if (*a1)
  {
    Main = CFRunLoopGetMain();
    CFRunLoopStop(Main);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebPushTool::Connection::connectionDropped(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3505710;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushTool::Connection::connectionDropped(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3505710;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebPushTool::Connection::connectionDropped(void)::$_0,void>::call(WTF *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return WebPushTool::Connection::connectToService(*((WTF **)result + 1), 1);
  }
  return result;
}

uint64_t WebKit::WebPushToolMain(WebKit *this, int a2, char **a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  void *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WebPushTool::Connection *v35;
  const char *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;
  uint64_t result;
  __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  char v51;
  _BYTE v52[152];

  v3 = WTF::initializeMainThread(this);
  v46 = 0;
  v4 = (void *)MEMORY[0x19AEB9C30](v3);
  v5 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "arguments");
  if (objc_msgSend(v5, "count") != 1)
  {
    v6 = (void *)objc_msgSend((id)objc_msgSend(v5, "subarrayWithRange:", 1, objc_msgSend(v5, "count") - 1), "objectEnumerator");
    v7 = (void *)objc_msgSend(v6, "nextObject");
    v43 = 0;
    v44 = 0;
    v8 = 1;
    while (v7)
    {
      if ((objc_msgSend(v7, "isEqualToString:", CFSTR("--production")) & 1) != 0)
      {
        v8 = 0;
      }
      else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("--development")) & 1) != 0)
      {
        v8 = 1;
      }
      else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("--streamDebugMessages")) & 1) != 0)
      {
        v44 = 1;
      }
      else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("--reconnect")) & 1) != 0)
      {
        LOBYTE(v43) = 1;
      }
      else if ((objc_msgSend(v7, "isEqualToString:", CFSTR("--host")) & 1) != 0)
      {
        BYTE4(v43) = 1;
      }
      else
      {
        if (!objc_msgSend(v7, "isEqualToString:", CFSTR("--push")))
        {
          v42 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid option provided: %@"), v7);
          goto LABEL_77;
        }
        v9 = objc_msgSend(v6, "nextObject");
        if (v9
          && (v10 = objc_msgSend(v6, "nextObject")) != 0
          && (v11 = objc_msgSend(v6, "nextObject")) != 0
          && (v12 = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v11)) != 0
          && (v13 = objc_msgSend(v6, "nextObject")) != 0)
        {
          MEMORY[0x19AEABCC8](&v47, v9);
          MEMORY[0x19AEABCC8](&v48, v10);
          MEMORY[0x19AEABB18](&v49, v12);
          MEMORY[0x19AEABCC8](&v50, v13);
          v51 = 0;
          v52[0] = 0;
          v52[136] = 0;
          v14 = operator new();
          WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting(v14, (uint64_t *)&v47);
          v45 = (WTF::StringImpl *)v14;
          std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, v15);
          v17 = v50;
          v50 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v16);
            else
              *(_DWORD *)v17 -= 2;
          }
          v21 = v49;
          v49 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v16);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v48;
          v48 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v16);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v47;
          v47 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v16);
            else
              *(_DWORD *)v23 -= 2;
          }
          v18 = v45;
        }
        else
        {
          v18 = 0;
        }
        v19 = v46;
        v45 = 0;
        v46 = v18;
        if (v19)
        {
          std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100]((uint64_t)&v46, v19);
          v20 = v45;
          v45 = 0;
          if (v20)
            std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100]((uint64_t)&v45, v20);
          v18 = v46;
        }
        if (!v18)
        {
          v42 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid push arguments specified"));
          goto LABEL_77;
        }
      }
      v7 = (void *)objc_msgSend(v6, "nextObject");
    }
    objc_autoreleasePoolPop(v4);
    if (!(_DWORD)v44 && !v46)
    {
      v42 = CFSTR("No action provided");
LABEL_77:
      result = printUsageAndTerminate(&v42->isa);
      goto LABEL_78;
    }
    if ((v43 & 0x100000000) == 0)
      goto LABEL_64;
    v24 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "executablePath");
    v25 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v24, 0), "URLByDeletingLastPathComponent");
    v26 = (void *)objc_msgSend(v25, "URLByAppendingPathComponent:", CFSTR("webpushd"));
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", objc_msgSend(v26, "path")) & 1) != 0)
    {
      if ((v8 & 1) != 0)
        v27 = "org.webkit.webpushtestdaemon.service";
      else
        v27 = "com.apple.webkit.webpushd.service";
      v28 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_string(v28, "_ManagedBy", "webpushtool");
      xpc_dictionary_set_string(v28, "Label", "org.webkit.webpushtestdaemon");
      xpc_dictionary_set_BOOL(v28, "LaunchOnlyOnce", 1);
      xpc_dictionary_set_BOOL(v28, "RootedSimulatorPath", 1);
      v29 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_string(v29, "DYLD_FRAMEWORK_PATH", (const char *)objc_msgSend(v25, "fileSystemRepresentation"));
      xpc_dictionary_set_string(v29, "DYLD_LIBRARY_PATH", (const char *)objc_msgSend(v25, "fileSystemRepresentation"));
      xpc_dictionary_set_value(v28, "EnvironmentVariables", v29);
      if (v29)
        CFRelease(v29);
      v30 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_BOOL(v30, v27, 1);
      xpc_dictionary_set_value(v28, "MachServices", v30);
      if (v30)
        CFRelease(v30);
      v31 = xpc_array_create(0, 0);
      xpc_array_set_string(v31, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend((id)objc_msgSend(v26, "path"), "fileSystemRepresentation"));
      xpc_array_set_string(v31, 0xFFFFFFFFFFFFFFFFLL, "--machServiceName");
      xpc_array_set_string(v31, 0xFFFFFFFFFFFFFFFFLL, v27);
      xpc_dictionary_set_value(v28, "ProgramArguments", v31);
      if (v31)
        CFRelease(v31);
      v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CF9710]), "initWithPlist:", v28);
      v47 = 0;
      objc_msgSend(v32, "submit:", &v47);
      v33 = v47;
      if (v47)
        NSLog(CFSTR("Error setting up service: %@"), v47);
      if (v32)
        CFRelease(v32);
      if (v28)
        CFRelease(v28);
      if (!v33)
      {
LABEL_64:
        v34 = WTF::fastMalloc((WTF *)0x38);
        v35 = (WebPushTool::Connection *)v34;
        *(_QWORD *)v34 = off_1E3505648;
        *(_QWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = v44 << 32;
        *(_BYTE *)(v34 + 24) = v43 & 1;
        v36 = "com.apple.webkit.webpushd.service";
        if ((v8 & 1) != 0)
          v36 = "org.webkit.webpushtestdaemon.service";
        *(_QWORD *)(v34 + 32) = 0;
        *(_QWORD *)(v34 + 40) = v36;
        *(_QWORD *)(v34 + 48) = 0;
        v37 = v46;
        if (v46)
        {
          v46 = 0;
          *(_QWORD *)(v34 + 48) = v37;
        }
        WebPushTool::Connection::connectToService((WTF *)v34, (v43 & 0x100000000) == 0);
        CFRunLoopRun();
        WebPushTool::Connection::~Connection(v35);
        WTF::fastFree(v38, v39);
        v40 = v46;
        v46 = 0;
        if (v40)
          std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100]((uint64_t)&v46, v40);
        return 0;
      }
    }
    else
    {
      NSLog(CFSTR("Daemon executable does not exist at path %@"), objc_msgSend(v26, "path"));
    }
    v42 = CFSTR("Unable to install plist to host the service");
    goto LABEL_77;
  }
  result = printUsageAndTerminate(CFSTR("No arguments provided"));
LABEL_78:
  __break(1u);
  return result;
}

void sub_19781717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  uint64_t v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;

  MEMORY[0x19AEB936C](v26, 0x1022C40D7C2C35DLL);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a10, v28);
  v30 = a26;
  a26 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = a21;
  a21 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = a20;
  a20 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = a19;
  a19 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v29);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = a18;
  a18 = 0;
  if (v34)
    std::default_delete<WebKit::WebPushD::PushMessageForTesting>::operator()[abi:sn180100]((uint64_t)&a18, v34);
  _Unwind_Resume(a1);
}

uint64_t printUsageAndTerminate(NSString *a1)
{
  FILE **v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = (FILE **)MEMORY[0x1E0C80C10];
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n\n", -[NSString UTF8String](a1, "UTF8String"));
  fwrite("Usage: webpushtool [options]\n", 0x1DuLL, 1uLL, *v1);
  fputc(10, *v1);
  fwrite("  --development\n", 0x10uLL, 1uLL, *v1);
  fwrite("    Connects to mach service \"org.webkit.webpushtestdaemon.service\" (Default)\n", 0x4EuLL, 1uLL, *v1);
  fwrite("  --production\n", 0xFuLL, 1uLL, *v1);
  fwrite("    Connects to mach service \"com.apple.webkit.webpushd.service\"\n", 0x41uLL, 1uLL, *v1);
  fwrite("  --host\n", 9uLL, 1uLL, *v1);
  fwrite("    Dynamically registers the service with launchd so it is visible to other applications\n", 0x5AuLL, 1uLL, *v1);
  fwrite("    The service name of the registration depends on either the --development or --production option chosen\n", 0x6BuLL, 1uLL, *v1);
  fwrite("  --streamDebugMessages\n", 0x18uLL, 1uLL, *v1);
  fwrite("    Stream debug messages from webpushd\n", 0x28uLL, 1uLL, *v1);
  fwrite("  --reconnect\n", 0xEuLL, 1uLL, *v1);
  fwrite("    Reconnect after connection is lost\n", 0x27uLL, 1uLL, *v1);
  fwrite("  --push <target app identifier> <partition string> <registration URL> <message>\n", 0x51uLL, 1uLL, *v1);
  fwrite("    Inject a test push message to the target app, push partition, and registration URL\n", 0x57uLL, 1uLL, *v1);
  fputc(10, *v1);
  v2 = WTF::exitProcess((WTF *)0xFFFFFFFFLL);
  return WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting(v2, v3);
}

uint64_t WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  WTF::URL::URL(a1 + 16, a2 + 2);
  v6 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 72), (uint64_t)(a2 + 9));
  return a1;
}

void sub_197817514(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v5 = v2[7];
  v2[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v3;
  *v3 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v2[1];
  v2[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *v2;
  *v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::handleMessageAsync<Messages::WebResourceLoader::WillSendRequest,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  WTF::RefCountedBase *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  CFTypeRef v15;
  WTF::RefCountedBase *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[192];
  CFTypeRef v22;
  WTF::RefCountedBase *v23;
  _BYTE v24[240];
  CFTypeRef cf;
  char v26;
  uint64_t v27[25];
  char v28;
  WTF::RefCountedBase *v29;
  char v30;
  unint64_t v31;
  unsigned __int8 **v32[31];
  char v33;

  v4 = a2;
  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v27);
  if (v28 && (IPC::Decoder::decode<IPC::FormDataReference>(v4, &v29), v30))
  {
    IPC::Decoder::decode<WebCore::ResourceResponse>(v4, &v31);
    v7 = v33;
    if (v33)
    {
      if (!v28 || !v30)
        goto LABEL_26;
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v21, (uint64_t)v27);
      v8 = (uint64_t)v29;
      v29 = 0;
      v23 = (WTF::RefCountedBase *)v8;
      std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v24, (uint64_t)&v31);
      v7 = 1;
    }
    else
    {
      v21[0] = 0;
    }
    v26 = v7;
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v31, v6);
    if (v30)
    {
      v9 = v29;
      v29 = 0;
      if (v9)
        WTF::RefCounted<WebCore::FormData>::deref(v9);
    }
  }
  else
  {
    v21[0] = 0;
    v26 = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v27);
  if (!v26)
    goto LABEL_27;
  while (1)
  {
    v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
    if (!(_BYTE)v11)
      break;
    v31 = v10;
    v4 = (uint64_t *)v32;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v32, a1);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E3505738;
    v12[1] = v31;
    v13 = v32[0];
    v32[0] = 0;
    v12[2] = v13;
    v27[0] = (uint64_t)v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v32);
    if (v26)
    {
      WebKit::WebResourceLoader::willSendRequest(a3, (uint64_t)v21, (uint64_t *)&v23, (uint64_t)v24, v27);
      v14 = v27[0];
      v27[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    v18 = *v4;
    v19 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    v20 = v4[3];
    if (v20)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
        if (v26)
          continue;
      }
    }
    return;
  }
  if (v26)
  {
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v24, v11);
    v16 = v23;
    v23 = 0;
    if (v16)
      WTF::RefCounted<WebCore::FormData>::deref(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
      CFRelease(v17);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
  }
}

uint64_t IPC::handleMessage<Messages::WebResourceLoader::DidFailResourceLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>(uint64_t *a1, WebKit::WebResourceLoader *a2)
{
  WTF::StringImpl *v3;
  _BYTE v5[88];

  IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>(a1, v5);
  if (v5[80])
    WebKit::WebResourceLoader::didFailResourceLoad(a2, (const WebCore::ResourceError *)v5);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t IPC::handleMessage<Messages::WebResourceLoader::DidFailServiceWorkerLoad,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceError const&)>(uint64_t *a1, WebKit::WebResourceLoader *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v5[10];
  char v6;

  IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>(a1, v5);
  if (v6)
    WebKit::WebResourceLoader::didFailServiceWorkerLoad(a2, v5);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

WebCore::ResourceResponseBase *IPC::handleMessage<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied,WebKit::WebResourceLoader,WebKit::WebResourceLoader,void ()(WebCore::ResourceResponse const&)>(uint64_t *a1, WebKit::WebResourceLoader *a2)
{
  WTF::StringImpl *v3;
  _BYTE v5[264];

  IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>(a1, v5);
  if (v5[256])
    WebKit::WebResourceLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied(a2, (const WebCore::ResourceResponse *)v5);
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v5, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages17WebResourceLoader15WillSendRequestEN6WebKit17WebResourceLoaderES8_FvON7WebCore15ResourceRequestEONS2_17FormDataReferenceEONS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_bEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages17WebResourceLoader15WillSendRequestEN6WebKit17WebResourceLoaderES8_FvON7WebCore15ResourceRequestEONS2_17FormDataReferenceEONS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_bEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_bEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages17WebResourceLoader15WillSendRequestEN6WebKit17WebResourceLoaderES8_FvON7WebCore15ResourceRequestEONS2_17FormDataReferenceEONS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_bEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_bEE4callESB_b(uint64_t a1, WebCore::ResourceRequest *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3468;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v7, a2);
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WTF::String,WebCore::ResourceError,WTF::URL,WebCore::SubstituteData>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  uint64_t v22[5];
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  char v27;
  char v28;
  WTF::StringImpl *v29[5];
  char v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  CFTypeRef cf;
  char v35;
  uint64_t v36[12];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ContentFilterUnblockHandler>(a2, (uint64_t)v36);
  if (v37 && (IPC::Decoder::decode<WTF::String>(a2, &v19), v20))
  {
    IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)&v21);
    if (v28 && (IPC::Decoder::decode<WTF::URL>(a2, v29), v30))
    {
      IPC::ArgumentCoder<WebCore::SubstituteData,void>::decode(a2, &v31);
      if (!v35)
        goto LABEL_37;
      while (!v37 || !v20 || !v28 || !v30)
      {
        __break(1u);
LABEL_37:
        v5 = (WTF::StringImpl *)*a2;
        v17 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v18 = a2[3];
        if (v18)
        {
          if (v17)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v18 + 16))(v18, v5);
            if (v35)
              continue;
          }
        }
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 536) = 0;
        goto LABEL_21;
      }
      std::__tuple_leaf<0ul,WebCore::ContentFilterUnblockHandler,false>::__tuple_leaf[abi:sn180100]<WebCore::ContentFilterUnblockHandler,void>(a1, v36);
      v6 = v19;
      v19 = 0;
      v7 = v21;
      v21 = 0;
      *(_QWORD *)(a1 + 96) = v6;
      *(_QWORD *)(a1 + 104) = v7;
      WTF::URL::URL(a1 + 112, v22);
      *(_QWORD *)(a1 + 152) = v23;
      *(_DWORD *)(a1 + 160) = v24;
      *(_WORD *)(a1 + 164) = v25;
      v8 = v26;
      v23 = 0;
      v26 = 0;
      *(_QWORD *)(a1 + 168) = v8;
      *(_BYTE *)(a1 + 176) = v27;
      WTF::URL::URL(a1 + 184, (uint64_t *)v29);
      WebCore::SubstituteData::SubstituteData(a1 + 224, (uint64_t *)&v31);
      *(_BYTE *)(a1 + 536) = 1;
      if (v35)
      {
        v9 = cf;
        cf = 0;
        if (v9)
          CFRelease(v9);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v33, v5);
        v10 = v32;
        v32 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v5);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = v31;
        v31 = 0;
        if (v11)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v5);
      }
LABEL_21:
      if (v30)
      {
        v12 = v29[0];
        v29[0] = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v5);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 536) = 0;
    }
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v5);
    if (v20)
    {
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v4);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 536) = 0;
  }
  result = std::__optional_destruct_base<WebCore::ContentFilterUnblockHandler,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v4);
  if (!*(_BYTE *)(a1 + 536))
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v16)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
    }
  }
  return result;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::ContentFilterUnblockHandler,WTF::String,WebCore::ResourceError,WTF::URL,WebCore::SubstituteData>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const void *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v3 = (WebCore::ResourceResponseBase *)(a1 + 272);
  v4 = *(const void **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = *(WTF::StringImpl **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
  v8 = *(WTF::StringImpl **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(const void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v5);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(_QWORD **)(a1 + 72);
  if (v15 == (_QWORD *)(a1 + 48))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v15)
      goto LABEL_38;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_38:
  v17 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v5);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v5);
    else
      *(_DWORD *)v18 -= 2;
  }
  return a1;
}

void WebKit::WebRTCMonitor::didReceiveMessage(WebKit::WebRTCMonitor *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  void *v4;
  _DWORD v5[4];
  __int128 v6;
  __int128 v7;
  char v8;

  if (*((_WORD *)a3 + 25) == 2659)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>>((uint64_t *)a3, a2, v5);
    if (v8)
    {
      WebKit::WebRTCMonitor::networksChanged((uint64_t)this, v5, &v6, &v7);
      if (v8)
        WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
    }
  }
}

void IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a3[56])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  void *v5;
  _BYTE v6[16];
  char v7;

  IPC::Decoder::decode<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder,WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v6, a3);
    if (v7)
      WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder,WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE v6[24];

  IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)v6);
  if (v6[20])
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder,WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress>(a1, a2, (uint64_t)v6, a3);
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v6, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v43 = 0;
    v44 = 0;
    if (v10 >= 0x2AAA)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::RTCNetwork>((uint64_t)&v31, a1);
        if (!v42)
          break;
        if (HIDWORD(v44) == (_DWORD)v44)
        {
          WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RTCNetwork>((uint64_t)&v43, (unint64_t)&v31);
        }
        else
        {
          v24 = v43 + 96 * HIDWORD(v44);
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v24 + 8) = 0;
          v25 = v31;
          v31 = 0;
          *(_QWORD *)v24 = v25;
          LODWORD(v25) = v32;
          v32 = 0;
          *(_DWORD *)(v24 + 8) = v25;
          LODWORD(v25) = v33;
          v33 = 0;
          *(_DWORD *)(v24 + 12) = v25;
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)(v24 + 24) = 0;
          v26 = v34;
          v34 = 0;
          *(_QWORD *)(v24 + 16) = v26;
          LODWORD(v26) = v35;
          v35 = 0;
          *(_DWORD *)(v24 + 24) = v26;
          LODWORD(v26) = v36;
          v36 = 0;
          *(_DWORD *)(v24 + 28) = v26;
          v27 = v37;
          v28 = v38[0];
          *(_OWORD *)(v24 + 60) = *(_OWORD *)((char *)v38 + 12);
          *(_OWORD *)(v24 + 32) = v27;
          *(_OWORD *)(v24 + 48) = v28;
          *(_QWORD *)(v24 + 80) = 0;
          *(_QWORD *)(v24 + 88) = 0;
          v29 = v39;
          v39 = 0;
          *(_QWORD *)(v24 + 80) = v29;
          LODWORD(v29) = v40;
          v40 = 0;
          *(_DWORD *)(v24 + 88) = v29;
          LODWORD(v29) = v41;
          v41 = 0;
          *(_DWORD *)(v24 + 92) = v29;
          ++HIDWORD(v44);
        }
        std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v11);
        if (!--v10)
        {
          WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v43, HIDWORD(v44));
          *(_QWORD *)a3 = v43;
          v30 = v44;
          v43 = 0;
          v44 = 0;
          *(_QWORD *)(a3 + 8) = v30;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v18 = 0;
        v19 = 0;
LABEL_17:
        v43 = 0;
        v44 = 0;
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v19;
LABEL_18:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
      }
      LODWORD(v44) = 96 * (int)v10 / 0x60u;
      v43 = WTF::fastMalloc((WTF *)(96 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::RTCNetwork>((uint64_t)&v31, a1);
        if (!v42)
          break;
        if (HIDWORD(v44) == (_DWORD)v44)
        {
          WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RTCNetwork>((uint64_t)&v43, (unint64_t)&v31);
        }
        else
        {
          v12 = v43 + 96 * HIDWORD(v44);
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
          v13 = v31;
          v31 = 0;
          *(_QWORD *)v12 = v13;
          LODWORD(v13) = v32;
          v32 = 0;
          *(_DWORD *)(v12 + 8) = v13;
          LODWORD(v13) = v33;
          v33 = 0;
          *(_DWORD *)(v12 + 12) = v13;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 24) = 0;
          v14 = v34;
          v34 = 0;
          *(_QWORD *)(v12 + 16) = v14;
          LODWORD(v14) = v35;
          v35 = 0;
          *(_DWORD *)(v12 + 24) = v14;
          LODWORD(v14) = v36;
          v36 = 0;
          *(_DWORD *)(v12 + 28) = v14;
          v15 = v37;
          v16 = v38[0];
          *(_OWORD *)(v12 + 60) = *(_OWORD *)((char *)v38 + 12);
          *(_OWORD *)(v12 + 32) = v15;
          *(_OWORD *)(v12 + 48) = v16;
          *(_QWORD *)(v12 + 80) = 0;
          *(_QWORD *)(v12 + 88) = 0;
          v17 = v39;
          v39 = 0;
          *(_QWORD *)(v12 + 80) = v17;
          LODWORD(v17) = v40;
          v40 = 0;
          *(_DWORD *)(v12 + 88) = v17;
          LODWORD(v17) = v41;
          v41 = 0;
          *(_DWORD *)(v12 + 92) = v17;
          ++HIDWORD(v44);
        }
        std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v11);
        if (!--v10)
        {
          v18 = v43;
          v19 = v44;
          goto LABEL_17;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v11);
    return WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
  }
  v20 = v5;
  v21 = 0;
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v20)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

WTF *IPC::Decoder::decode<WebKit::RTCNetwork>(uint64_t a1, uint64_t *a2)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RTCNetwork,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 96))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RTCNetwork>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  v3 = WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  result = *(__n128 *)(v3 + 60);
  v8 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v8;
  *(__n128 *)(v4 + 60) = result;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v9 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v4 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 88);
  *(_DWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v4 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 92);
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v4 + 92) = v9;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RTCNetwork,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(WTF **)(a1 + 80);
    if (v3)
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)(a1 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder,WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v7[24];

  IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)v7);
  if (v7[20])
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder,WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>(a2, a3, (uint64_t)v7, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>,void>::decode<IPC::Decoder,WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::RTC::Network::IPAddress,WebKit::RTC::Network::IPAddress>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a2 + 20) && *(_BYTE *)(a3 + 20))
  {
    *(_QWORD *)a4 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a4 + 8) = v4;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)a2;
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)(a4 + 36) = *(_OWORD *)a3;
    *(_DWORD *)(a4 + 52) = *(_DWORD *)(a3 + 16);
    *(_BYTE *)(a4 + 56) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebKit::WebRTCResolver::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebRTCResolver *v3;
  int v4;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  v3 = (WebKit::WebRTCResolver *)this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 2660)
  {
    this = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
    if ((this & 0xFF00000000) != 0)
      return WebKit::WebRTCResolver::resolvedAddressError(v3, this);
  }
  else if (v4 == 2661)
  {
    this = (uint64_t)IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)&v6);
    if (v8)
    {
      this = (uint64_t)WebKit::WebRTCResolver::setResolvedAddress(v3, (uint64_t)&v6);
      if (v8)
      {
        this = (uint64_t)v6;
        if (v6)
        {
          v6 = 0;
          v7 = 0;
          return WTF::fastFree((WTF *)this, v5);
        }
      }
    }
  }
  return this;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  char v5;
  _QWORD v6[2];
  char v7;

  result = IPC::Decoder::decode<WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  v5 = v7;
  if (v7)
  {
    *(_QWORD *)a3 = v6[0];
    *(_QWORD *)(a3 + 8) = v6[1];
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v5;
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  WTF *v13;
  char *v14;
  int v15;
  char *v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *result;
  int v24;
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  char v33;
  WTF *v34;
  uint64_t v35;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v6, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v20 = v5;
    v21 = 0;
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v20)
        result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v34 = 0;
  v35 = 0;
  if (v10 >= 0xCCCC)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)&v31);
      if (!v33)
        break;
      v24 = HIDWORD(v35);
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        v25 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v31);
        v24 = HIDWORD(v35);
        v26 = (char *)v34 + 20 * HIDWORD(v35);
        v27 = *(_DWORD *)(v25 + 16);
        *(_OWORD *)v26 = *(_OWORD *)v25;
        *((_DWORD *)v26 + 4) = v27;
      }
      else
      {
        v28 = (char *)v34 + 20 * HIDWORD(v35);
        v29 = v31;
        *((_DWORD *)v28 + 4) = v32;
        *(_OWORD *)v28 = v29;
      }
      HIDWORD(v35) = v24 + 1;
      if (!--v10)
      {
        WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, (v24 + 1));
        *(_QWORD *)a3 = v34;
        v30 = v35;
        v34 = 0;
        v35 = 0;
        *(_QWORD *)(a3 + 8) = v30;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v18 = 0;
      v19 = 0;
      v13 = 0;
LABEL_17:
      v34 = 0;
      *(_QWORD *)a3 = v13;
      HIDWORD(v35) = 0;
      *(_DWORD *)(a3 + 8) = v19;
      *(_DWORD *)(a3 + 12) = v18;
LABEL_18:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_29;
    }
    LODWORD(v35) = 20 * (int)v10 / 0x14u;
    v34 = (WTF *)WTF::fastMalloc((WTF *)(20 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>(a1, (uint64_t)&v31);
      if (!v33)
        break;
      v11 = HIDWORD(v35);
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        v12 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v31);
        v11 = HIDWORD(v35);
        v13 = v34;
        v14 = (char *)v34 + 20 * HIDWORD(v35);
        v15 = *(_DWORD *)(v12 + 16);
        *(_OWORD *)v14 = *(_OWORD *)v12;
        *((_DWORD *)v14 + 4) = v15;
      }
      else
      {
        v13 = v34;
        v16 = (char *)v34 + 20 * HIDWORD(v35);
        v17 = v31;
        *((_DWORD *)v16 + 4) = v32;
        *(_OWORD *)v16 = v17;
      }
      v18 = v11 + 1;
      HIDWORD(v35) = v18;
      if (!--v10)
      {
        v19 = v35;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_29:
  result = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebKit::WebSocketChannel::createMessageQueue(WebKit::WebSocketChannel *this, WebCore::Document *a2, WebKit::WebSocketChannel *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3505960;
  v4[1] = a2;
  v10 = (uint64_t)v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E35059D8;
  v5[1] = a2;
  v9 = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3505A50;
  v6[1] = a2;
  v8 = v6;
  WebCore::NetworkSendQueue::NetworkSendQueue();
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t WebKit::WebSocketChannel::WebSocketChannel(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  WebKit::WebSocketChannel *v12;
  WebKit::WebProcess *v13;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_1E351EF70;
  *(_QWORD *)(a1 + 8) = &off_1E34B0558;
  *(_QWORD *)(a1 + 16) = 0;
  WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel((WebCore::ThreadableWebSocketChannel *)(a1 + 24));
  *(_DWORD *)(a1 + 40) = 1;
  *(_QWORD *)a1 = off_1E3505760;
  *(_QWORD *)(a1 + 8) = &unk_1E3505858;
  *(_QWORD *)(a1 + 24) = &unk_1E3505890;
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded(a3 + 2, (uint64_t)a3);
  v8 = (unsigned int *)(a3[2] & 0xFFFFFFFFFFFFLL);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 48) = v8;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 8), a4);
  v10 = *(unsigned int **)(a4 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 64));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  WebKit::WebSocketChannel::createMessageQueue((WebKit::WebSocketChannel *)a3, (WebCore::Document *)a1, v12);
  WebCore::WebSocketChannelInspector::WebSocketChannelInspector((WebCore::WebSocketChannelInspector *)(a1 + 208), (Document *)a3);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 224));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 424));
  *(_QWORD *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 562) = *(_BYTE *)(a1 + 562) & 0xF1 | 4;
  *(_QWORD *)(a1 + 680) = a2;
  {
    v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v13 = WebKit::WebProcess::WebProcess(v15);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
  }
  v17 = *(_QWORD *)(a1 + 32);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::WebSocketChannel&>((uint64_t *)v13 + 52, &v17, a1, (uint64_t)&v16);
  return a1;
}

void WebKit::WebSocketChannel::~WebSocketChannel(WebKit::WebSocketChannel *this)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  const void *v17;
  const void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;

  *(_QWORD *)this = off_1E3505760;
  *((_QWORD *)this + 1) = &unk_1E3505858;
  *((_QWORD *)this + 3) = &unk_1E3505890;
  {
    v2 = (uint64_t *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v2 = (uint64_t *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess((WebKit::WebProcess *)v2);
  }
  v3 = v2 + 52;
  v30 = *((_QWORD *)this + 4);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v2 + 52, &v30);
  v6 = v2[52];
  if (v6)
  {
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v4)
      goto LABEL_23;
  }
  else
  {
    if (!v4)
      goto LABEL_23;
    v7 = 0;
  }
  if (v7 != v4)
  {
    v8 = (unsigned int *)v4[1];
    *v4 = -1;
    v4[1] = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v5);
      }
    }
    ++*(_DWORD *)(*v3 - 16);
    v11 = *v3;
    if (*v3)
      v12 = *(_DWORD *)(v11 - 12) - 1;
    else
      v12 = -1;
    *(_DWORD *)(v11 - 12) = v12;
    v13 = *v3;
    if (*v3)
    {
      v14 = 6 * *(_DWORD *)(v13 - 12);
      v15 = *(_DWORD *)(v13 - 4);
      if (v14 < v15 && v15 >= 9)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2 + 52, v15 >> 1, 0);
    }
  }
LABEL_23:
  v17 = (const void *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::WebSocketChannel *)((char *)this + 424), (WTF::StringImpl *)v5);
  v18 = (const void *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::WebSocketChannel *)((char *)this + 224));
  WebCore::WebSocketChannelInspector::~WebSocketChannelInspector((WebKit::WebSocketChannel *)((char *)this + 208));
  MEMORY[0x19AEAF3DC]((char *)this + 136);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v19);
    }
  }
  v26 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v26 + 4), v19);
      WTF::fastFree((WTF *)v26, v29);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v19);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSocketChannel::~WebSocketChannel(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSocketChannel::~WebSocketChannel(WebKit::WebSocketChannel *this)
{
  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 8));
}

{
  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSocketChannel::~WebSocketChannel((WebKit::WebSocketChannel *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSocketChannel::messageSenderConnection(WebKit::WebSocketChannel *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v1) + 24);
}

uint64_t WebKit::WebSocketChannel::messageSenderDestinationID(WebKit::WebSocketChannel *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebKit::WebSocketChannel::subprotocol@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 104);
  if (v2 || (v2 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::subprotocol@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 80);
  if (v2 || (v2 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebSocketChannel::extensions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 112);
  if (v2 || (v2 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::extensions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 88);
  if (v2 || (v2 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebSocketChannel::connect(WebKit::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  uint64_t v3;
  WebKit::WebProcess *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF **v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebKit::WebProcess *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  char v44;
  WebCore::Document *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::URL *v48;
  WebCore::Document *v49;
  uint64_t v51;
  uint64_t v52;
  WebKit::WebProcess *v53;
  WebKit::WebProcess *v54;
  char v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  char v59;
  WTF::StringImpl *v60[25];
  char v61;
  IPC::Encoder *v62;
  WTF::StringImpl *v63[3];
  int v64;
  _BYTE v65[24];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 6);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v53);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v8 = *((_QWORD *)v7 + 52);
  if (!v8 || *(_DWORD *)(v8 - 12) < 0xC8u)
  {
    WebCore::ThreadableWebSocketChannel::webSocketConnectRequest(*(WebCore::ThreadableWebSocketChannel **)(*((_QWORD *)this + 6) + 8), a2, a3);
    if (!v61)
    {
LABEL_23:
      v20 = 0;
LABEL_40:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v60);
      return v20;
    }
    v10 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v60);
    if ((WTF::equal(*v10, *(const WTF::StringImpl **)a2, v11) & 1) == 0)
    {
      v12 = *((_QWORD *)this + 7);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
      }
    }
    LOBYTE(v58) = 0;
    v59 = 0;
    LOBYTE(v56) = 0;
    v57 = 0;
    v14 = *((_QWORD *)this + 6);
    if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0 && (v16 = *(_QWORD *)(v15 + 528)) != 0)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v17 + 128) + 8);
        if (v18)
          v19 = *(_BYTE *)(v18 + 144) == 0;
        else
          v19 = 0;
        if (!v19)
          goto LABEL_23;
        v58 = *(_OWORD *)(v18 + 32);
        v43 = 1;
        v59 = 1;
        v56 = WebCore::Frame::pageID((WebCore::Frame *)v18);
        v57 = v44;
        v45 = *(WebCore::Document **)(v18 + 296);
        if (v45
          && (v46 = WebCore::Document::loader(v45)) != 0
          && ((v47 = v46,
               v48 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v46 + 872)),
               (WTF::URL::hasSpecialScheme(v48) & 1) != 0)
           || (v49 = *(WebCore::Document **)(v17 + 296), (*((_BYTE *)v49 + 744) & 2) == 0)
           || (v47 = WebCore::Document::loader(v49)) != 0))
        {
          v43 = *(unsigned __int8 *)(v47 + 3534);
          LOWORD(v17) = *(_WORD *)(v47 + 3514);
        }
        else
        {
          LOWORD(v17) = 0;
        }
        v51 = *(_QWORD *)(v18 + 24);
        if (v51 && (v52 = *(_QWORD *)(v51 + 8)) != 0)
        {
          v22 = *(_BYTE *)(v52 + 1682);
          v21 = *(_BYTE *)(v52 + 1683) != 0;
        }
        else
        {
          v21 = 0;
          v22 = 1;
        }
        v23 = v43 != 0;
LABEL_26:
        WebCore::WebSocketChannelInspector::didCreateWebSocket((WebKit::WebSocketChannel *)((char *)this + 208), (const WTF::URL *)a2);
        if (!v61
          || (v24 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v60),
              WTF::String::operator=((WTF::StringImpl **)this + 8, (WTF::StringImpl *)v24),
              v25 = *(_OWORD *)(v24 + 24),
              *(_OWORD *)((char *)this + 72) = *(_OWORD *)(v24 + 8),
              *(_OWORD *)((char *)this + 88) = v25,
              !v61))
        {
          __break(1u);
        }
        v26 = *((_QWORD *)this + 6);
        v55 = v23;
        if (v26)
          v27 = *(_QWORD *)(v26 + 8);
        else
          v27 = 0;
        v28 = *((_QWORD *)this + 4);
        v29 = WebCore::Document::topOrigin((WebCore::Document *)v27);
        LOBYTE(v63[0]) = 0;
        v64 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v63, v29 + 8);
        v30 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v27 + 192));
        v65[0] = 0;
        v66 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v65, v30 + 8);
        {
          v31 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v31 = WebKit::WebProcess::WebProcess(v54);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v31;
        }
        v32 = *((_BYTE *)v31 + 776);
        v33 = (*(uint64_t (**)(WebKit::WebSocketChannel *))(*(_QWORD *)this + 56))(this);
        v34 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v34 = 224;
        *(_QWORD *)(v34 + 8) = v33;
        *(_QWORD *)(v34 + 528) = v34 + 16;
        *(_QWORD *)(v34 + 536) = v34 + 16;
        *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v34 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
        v62 = (IPC::Encoder *)v34;
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v34, (WebCore::ResourceRequest *)v60);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)a3);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v34, 8uLL, 8) = v28;
        v35 = *((_QWORD *)this + 85);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v34, 8uLL, 8) = v35;
        IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v34, (uint64_t *)&v58);
        IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v34, &v56);
        IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v34, (uint64_t)v63);
        *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = v32;
        *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = v55;
        *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v34, 2uLL, 2) = v17;
        *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = v21;
        *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = v22;
        (*(void (**)(WebKit::WebSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v62, 0);
        v37 = v62;
        v62 = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v36);
          WTF::fastFree(v38, v39);
        }
        if (v66 != -1)
          ((void (*)(IPC::Encoder **, _BYTE *))off_1E3505940[v66])(&v62, v65);
        v66 = -1;
        if (v64 != -1)
          ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E3505940[v64])(&v62, v63);
        v20 = 1;
        goto LABEL_40;
      }
    }
    else
    {
      LOWORD(v17) = 0;
    }
    v21 = 0;
    v22 = 1;
    v23 = 1;
    goto LABEL_26;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63[0] = v60[0];
  WebKit::WebSocketChannel::logErrorMessage(this, v63);
  if (v60[0])
  {
    if (*(_DWORD *)v60[0] == 2)
      WTF::StringImpl::destroy(v60[0], v9);
    else
      *(_DWORD *)v60[0] -= 2;
  }
  v40 = *((_QWORD *)this + 7);
  if (!v40)
    return 0;
  v20 = *(_QWORD *)(v40 + 8);
  if (v20)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 40))(v20, v60);
    v42 = v60[0];
    v60[0] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    return 0;
  }
  return v20;
}

WTF::StringImpl *WebKit::WebSocketChannel::logErrorMessage(WTF::StringImpl *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[2];

  v2 = *((_QWORD *)this + 6);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return this;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v14 = v3;
    v4 = *a2;
    if (*a2)
      *(_DWORD *)v4 += 2;
    v13 = v4;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"WebSocket connection to '", 26, (uint64_t *)&v14, (uint64_t)"' failed: ", 11, (uint64_t *)&v13, &v15);
    v6 = v15;
    v15 = 0;
    v16[0] = v6;
    v7 = v13;
    v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v10 = v14;
    v14 = 0;
    if (!v10)
      goto LABEL_19;
  }
  else
  {
    v8 = *a2;
    if (*a2)
      *(_DWORD *)v8 += 2;
    v12 = v8;
    v16[0] = (WTF::StringImpl *)"WebSocket connection failed: ";
    v16[1] = (WTF::StringImpl *)30;
    this = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v16, (uint64_t *)&v12, &v15);
    v9 = v15;
    if (!v15)
    {
      __break(0xC471u);
      return this;
    }
    v15 = 0;
    v16[0] = v9;
    v10 = v12;
    v12 = 0;
    if (!v10)
      goto LABEL_19;
  }
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v5);
  else
    *(_DWORD *)v10 -= 2;
LABEL_19:
  WebCore::Document::addConsoleMessage();
  this = v16[0];
  v16[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::connect(WebKit::WebSocketChannel *this, Document *a2, const WTF::String *a3)
{
  return WebKit::WebSocketChannel::connect((WebKit::WebSocketChannel *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::WebSocketChannel::increaseBufferedAmount(WebKit::WebSocketChannel *this, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;

  if (!a2)
    return 1;
  v2 = *((_QWORD *)this + 15);
  v3 = __CFADD__(v2, a2);
  v4 = v2 + a2;
  v5 = v3;
  if (v3)
  {
    v12 = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::WebSocketChannel::fail((uint64_t)this, &v13);
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v5 = v12;
  }
  else
  {
    *((_QWORD *)this + 15) = v4;
    v6 = *((_QWORD *)this + 7);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    }
  }
  return v5 ^ 1u;
}

WTF::StringImpl *WebKit::WebSocketChannel::fail(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  WTF::StringImpl *v24;

  ++*(_DWORD *)(a1 + 40);
  result = WebKit::WebSocketChannel::logErrorMessage((WTF::StringImpl *)a1, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    result = *(WTF::StringImpl **)(v5 + 8);
    if (result)
    {
      v6 = *a2;
      if (*a2)
        *(_DWORD *)v6 += 2;
      v24 = v6;
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)result + 40))(result, &v24);
      result = v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 128))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 516;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v24 = (WTF::StringImpl *)v9;
    v10 = *(_QWORD *)(v9 + 544);
    v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v12 = v11 + 4;
    v13 = *(_QWORD *)(v9 + 552);
    if (v13 < v11 + 4)
    {
      v21 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v22 = v21;
        v21 *= 2;
      }
      while (v22 < v12);
      result = (WTF::StringImpl *)mmap(0, v22, 3, 4098, -1, 0);
      if (result == (WTF::StringImpl *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v14 = result;
      memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
      v23 = *(void **)(v9 + 528);
      if (v23 != (void *)(v9 + 16))
        munmap(v23, *(_QWORD *)(v9 + 552));
      *(_QWORD *)(v9 + 528) = v14;
      *(_QWORD *)(v9 + 552) = v22;
      v10 = *(_QWORD *)(v9 + 544);
    }
    else
    {
      v14 = *(WTF::StringImpl **)(v9 + 528);
    }
    bzero((char *)v14 + v10, v11 - v10);
    *(_QWORD *)(v9 + 544) = v12;
    v15 = (_DWORD *)(*(_QWORD *)(v9 + 528) + v11);
    *(_QWORD *)(v9 + 536) = v15 + 1;
    *v15 = 1001;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v24, 0);
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v16);
      WTF::fastFree(v18, v19);
    }
    v24 = 0;
    WebKit::WebSocketChannel::didClose((_QWORD *)a1, 1006, (uint64_t)&v24);
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*(_DWORD *)(a1 + 40) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  --*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)a2)
    v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  else
    v2 = 0;
  if (!WebKit::WebSocketChannel::increaseBufferedAmount(this, v2))
    return 1;
  WebCore::NetworkSendQueue::enqueue();
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::send(uint64_t a1, uint64_t a2)
{
  return WebKit::WebSocketChannel::send((WebKit::WebSocketChannel *)(a1 - 24), a2);
}

uint64_t WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, const JSC::ArrayBuffer *a2, unsigned int a3, unsigned int a4)
{
  if (!WebKit::WebSocketChannel::increaseBufferedAmount(this, a4))
    return 1;
  WebCore::NetworkSendQueue::enqueue((WebKit::WebSocketChannel *)((char *)this + 136), a2);
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, const JSC::ArrayBuffer *a2, unsigned int a3, unsigned int a4)
{
  if (!WebKit::WebSocketChannel::increaseBufferedAmount((WebKit::WebSocketChannel *)((char *)this - 24), a4))return 1;
  WebCore::NetworkSendQueue::enqueue((WebKit::WebSocketChannel *)((char *)this + 112), a2);
  return 0;
}

uint64_t WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, WebCore::Blob *a2)
{
  JSC::ArrayBuffer *v4;
  JSC::ArrayBuffer *v6;

  v4 = (JSC::ArrayBuffer *)WebCore::Blob::size(a2);
  if (!WebCore::Blob::size(a2))
  {
    JSC::ArrayBuffer::create(v4);
    WebCore::NetworkSendQueue::enqueue((WebKit::WebSocketChannel *)((char *)this + 136), v6);
    if (v6)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    return 0;
  }
  if (WebKit::WebSocketChannel::increaseBufferedAmount(this, (uint64_t)v4))
  {
    WebCore::NetworkSendQueue::enqueue();
    return 0;
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::send(WebKit::WebSocketChannel *this, WebCore::Blob *a2)
{
  return WebKit::WebSocketChannel::send((WebKit::WebSocketChannel *)((char *)this - 24), a2);
}

uint64_t WebKit::WebSocketChannel::bufferedAmount(WebKit::WebSocketChannel *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::bufferedAmount(WebKit::WebSocketChannel *this)
{
  return *((unsigned int *)this + 24);
}

IPC::Encoder *WebKit::WebSocketChannel::close(WebKit::WebSocketChannel *this, int a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  ++*((_DWORD *)this + 10);
  *((_BYTE *)this + 128) = 1;
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  }
  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::WebSocketChannelInspector::didSendWebSocketFrame();
  v8 = (*(uint64_t (**)(WebKit::WebSocketChannel *))(*(_QWORD *)this + 56))(this);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 516;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 4uLL, 4) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a3);
  (*(void (**)(WebKit::WebSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    result = (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  if (*((_DWORD *)this + 10) == 1)
    return (IPC::Encoder *)(*(uint64_t (**)(WebKit::WebSocketChannel *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 10);
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebSocketChannel::close(WebKit::WebSocketChannel *this, int a2, const WTF::String *a3)
{
  return WebKit::WebSocketChannel::close((WebKit::WebSocketChannel *)((char *)this - 24), a2, a3);
}

_QWORD *WebKit::WebSocketChannel::didClose(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _BOOL8 v8;

  v3 = result[7];
  if (v3)
  {
    v4 = result;
    result = *(_QWORD **)(v3 + 8);
    if (result)
    {
      ++*((_DWORD *)v4 + 10);
      if ((_DWORD)a2 != 1006)
      {
        (*(void (**)(_QWORD *))(*result + 56))(result);
        result = *(_QWORD **)(v4[7] + 8);
      }
      v8 = (_DWORD)a2 != 1006 || *((_BYTE *)v4 + 128) != 0;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _BOOL8, uint64_t, uint64_t))(*result + 64))(result, *((unsigned int *)v4 + 30), v8, a2, a3);
      if (*((_DWORD *)v4 + 10) == 1)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 10);
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebSocketChannel::fail(uint64_t a1, WTF::StringImpl **a2)
{
  return WebKit::WebSocketChannel::fail(a1 - 24, a2);
}

WTF::StringImpl *WebKit::WebSocketChannel::disconnect(WebKit::WebSocketChannel *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  IPC::Encoder *v14;

  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::RefPtr<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>::operator=((unsigned int **)this + 6, 0);
  WebCore::NetworkSendQueue::clear((WebKit::WebSocketChannel *)((char *)this + 136));
  WebCore::WebSocketChannelInspector::didCloseWebSocket((WebKit::WebSocketChannel *)((char *)this + 208));
  v13 = 0;
  v6 = (*(uint64_t (**)(WebKit::WebSocketChannel *))(*(_QWORD *)this + 56))(this);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 516;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v14 = (IPC::Encoder *)v7;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 4uLL, 4) = 1001;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)&v13);
  (*(void (**)(WebKit::WebSocketChannel *, IPC::Encoder **, _QWORD))(*(_QWORD *)this + 32))(this, &v14, 0);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v10, v11);
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebSocketChannel::disconnect(WebKit::WebSocketChannel *this, void *a2)
{
  return WebKit::WebSocketChannel::disconnect((WebKit::WebSocketChannel *)((char *)this - 24), a2);
}

uint64_t WebKit::WebSocketChannel::didConnect(uint64_t result, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(result + 128))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 56);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        WTF::String::operator=((WTF::StringImpl **)(result + 104), a2);
        WTF::String::operator=((WTF::StringImpl **)(v3 + 112), a3);
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 56) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8));
      }
    }
  }
  return result;
}

WTF *WebKit::WebSocketChannel::didReceiveBinaryData(WTF *result, char *a2, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v7;
  char v8;
  void *v9;
  WTF *v10;
  int v11;
  int v12;

  if (!*((_BYTE *)result + 128))
  {
    v3 = *((_QWORD *)result + 7);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = this;
        v10 = 0;
        v11 = 0;
        v12 = (int)this;
        if (this)
        {
          if ((unint64_t)this >> 32)
          {
            __break(0xC471u);
            return result;
          }
          v7 = (WTF *)WTF::fastMalloc(this);
          v11 = (int)v5;
          v10 = v7;
          do
          {
            v8 = *a2++;
            *(_BYTE *)v7 = v8;
            v7 = (WTF *)((char *)v7 + 1);
            v5 = (WTF *)((char *)v5 - 1);
          }
          while (v5);
        }
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 32))(v4, &v10);
        result = v10;
        if (v10)
        {
          v10 = 0;
          v11 = 0;
          return (WTF *)WTF::fastFree(result, v9);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannel::didReceiveMessageError(WTF::StringImpl *result, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v2 = *((_QWORD *)result + 7);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v4 = result;
      WebKit::WebSocketChannel::logErrorMessage(result, a2);
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)v4 + 7) + 8)
                                                                                      + 40))(*(_QWORD *)(*((_QWORD *)v4 + 7) + 8), a2);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannel::networkProcessCrashed(WebKit::WebSocketChannel *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebSocketChannel::didReceiveMessageError(this, &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebSocketChannel::didSendHandshakeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::RefCountedBase *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  WebCore::WebSocketChannelInspector::willSendWebSocketHandshakeRequest((WebCore::WebSocketChannelInspector *)(a1 + 208), (const WebCore::ResourceRequest *)a2);
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 224, a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 376), (WTF::StringImpl *)(a2 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 384), (WTF::StringImpl *)(a2 + 160));
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v5 = *(WTF::RefCountedBase **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v4;
  if (v5)
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  v6 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 400) = v6;
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v8 = *(const void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v7;
  if (v8)
    CFRelease(v8);
}

void WebKit::WebSocketChannel::didReceiveHandshakeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  WebCore::WebSocketChannelInspector::didReceiveWebSocketHandshakeResponse((WebCore::WebSocketChannelInspector *)(a1 + 208), (const WebCore::ResourceResponse *)a2);
  WebCore::ResourceResponseBase::operator=(a1 + 424, a2);
  v4 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v5 = *(const void **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = v4;
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 672) = *(_BYTE *)(a2 + 248);
}

uint64_t WebKit::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  ++*(_DWORD *)(this + 40);
  return this;
}

_DWORD *WebKit::WebSocketChannel::derefThreadableWebSocketChannel(_DWORD *this)
{
  if (this[10] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[10];
  return this;
}

uint64_t WebKit::WebSocketChannel::channelInspector(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 208;
}

uint64_t WebKit::WebSocketChannel::progressIdentifier(WebKit::WebSocketChannel *this)
{
  return WebCore::WebSocketChannelInspector::progressIdentifier((WebKit::WebSocketChannel *)((char *)this + 208));
}

BOOL WebKit::WebSocketChannel::hasCreatedHandshake(WebKit::WebSocketChannel *this)
{
  return *((_QWORD *)this + 8) != 0;
}

BOOL WebKit::WebSocketChannel::isConnected(WebKit::WebSocketChannel *this)
{
  return (*((_BYTE *)this + 562) & 1) == 0;
}

CFTypeRef *WebKit::WebSocketChannel::clientHandshakeRequest@<X0>(uint64_t a1@<X0>, CFTypeRef *a2@<X8>)
{
  return WebCore::ResourceRequest::ResourceRequest(a2, (const WebCore::ResourceRequest *)(a1 + 224));
}

uint64_t WebKit::WebSocketChannel::serverHandshakeResponse(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 424;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::channelInspector(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 184;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::progressIdentifier(WebKit::WebSocketChannel *this)
{
  return WebCore::WebSocketChannelInspector::progressIdentifier((WebKit::WebSocketChannel *)((char *)this + 184));
}

BOOL `non-virtual thunk to'WebKit::WebSocketChannel::hasCreatedHandshake(WebKit::WebSocketChannel *this)
{
  return *((_QWORD *)this + 5) != 0;
}

BOOL `non-virtual thunk to'WebKit::WebSocketChannel::isConnected(WebKit::WebSocketChannel *this)
{
  return (*((_BYTE *)this + 538) & 1) == 0;
}

CFTypeRef *`non-virtual thunk to'WebKit::WebSocketChannel::clientHandshakeRequest@<X0>(uint64_t a1@<X0>, CFTypeRef *a2@<X8>)
{
  return WebCore::ResourceRequest::ResourceRequest(a2, (const WebCore::ResourceRequest *)(a1 + 200));
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::serverHandshakeResponse(WebKit::WebSocketChannel *this)
{
  return (uint64_t)this + 400;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebSocketChannel::derefThreadableWebSocketChannel(uint64_t this)
{
  if (*(_DWORD *)(this + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 24) + 8))(this - 24);
  --*(_DWORD *)(this + 16);
  return this;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSocketChannel::createMessageQueue(WebCore::Document &,WebKit::WebSocketChannel&)::$_0,void,WTF::CString const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  _QWORD v18[4];
  IPC::Encoder *v19;

  v4 = *a2;
  if (*a2)
  {
    v5 = (const void *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 8);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::WebSocketChannelInspector::didSendWebSocketFrame();
  v7 = *(_DWORD **)(a1 + 8);
  if (*a2)
    v8 = *(_QWORD *)(*a2 + 8);
  else
    v8 = 0;
  ++v7[10];
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E3505988;
  v9[1] = v7;
  v9[2] = v7;
  v9[3] = v8;
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 56))(v7);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 518;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v19 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v11, v5, v6);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E35059B0;
  v12[1] = v9;
  v18[0] = v12;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_DWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v19, v18, 0);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendString>(Messages::NetworkSocketChannel::SendString &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3505988;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[10] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[10];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendString>(Messages::NetworkSocketChannel::SendString &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3505988;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[10] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[10];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendString>(Messages::NetworkSocketChannel::SendString &&,unsigned long)::{lambda(void)#1},void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  if (v1)
  {
    v2 = result[1];
    *(_QWORD *)(v2 + 120) -= v1;
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      result = *(_QWORD **)(v3 + 8);
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendString,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E35059B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendString,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E35059B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendString,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSocketChannel::createMessageQueue(WebCore::Document &,WebKit::WebSocketChannel&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1, const void *a2, size_t a3)
{
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  _QWORD v16[4];
  IPC::Encoder *v17;

  WebCore::WebSocketFrame::WebSocketFrame();
  WebCore::WebSocketChannelInspector::didSendWebSocketFrame();
  v6 = *(_DWORD **)(a1 + 8);
  ++v6[10];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E3505A00;
  v7[1] = v6;
  v7[2] = v6;
  v7[3] = a3;
  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 517;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v17 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E3505A28;
  v10[1] = v7;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_DWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v17, v16, 0);
  v12 = v16[0];
  v16[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendData>(Messages::NetworkSocketChannel::SendData &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3505A00;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[10] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[10];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendData>(Messages::NetworkSocketChannel::SendData &&,unsigned long)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3505A00;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[10] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[10];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<void WebKit::WebSocketChannel::sendMessageInternal<Messages::NetworkSocketChannel::SendData>(Messages::NetworkSocketChannel::SendData &&,unsigned long)::{lambda(void)#1},void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  if (v1)
  {
    v2 = result[1];
    *(_QWORD *)(v2 + 120) -= v1;
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      result = *(_QWORD **)(v3 + 8);
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3505A28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3505A28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkSocketChannel::SendData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSocketChannel::createMessageQueue(WebCore::Document &,WebKit::WebSocketChannel&)::$_2,WebCore::NetworkSendQueue::Continue,WebCore::ExceptionCode>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8[2];

  v2 = *(_QWORD *)(a1 + 8);
  v8[0] = (uint64_t)"Failed to load Blob: exception code = ";
  v8[1] = 39;
  v7 = a2;
  result = WTF::tryMakeString<WTF::ASCIILiteral,int>(v8, &v7, &v6);
  if (v6)
  {
    WebKit::WebSocketChannel::fail(v2, &v6);
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    return 0;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannel::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  IPC::Decoder *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  IPC::Connection *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  char v21;
  char v22;
  char v23;
  WTF *v24;
  char v25;

  v3 = (uint64_t)this;
  ++*((_DWORD *)this + 10);
  v4 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAE7:
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v7 = ((*((_QWORD *)a3 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(_QWORD *)a3;
      if (v5 < v7 || v5 - v7 <= 1)
      {
        v15 = 0;
        v16 = 0;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        v17 = *((_QWORD *)v4 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v6, v5);
            v16 = *(IPC::Connection **)v4;
            v15 = *((_QWORD *)v4 + 1);
          }
          else
          {
            v15 = 0;
            v16 = 0;
          }
        }
        goto LABEL_37;
      }
      v9 = (unsigned __int16 *)(v6 + v7);
      *((_QWORD *)a3 + 2) = v9 + 1;
      if (!v6)
      {
        v15 = v5;
        v16 = 0;
LABEL_37:
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        v18 = *((_QWORD *)v4 + 3);
        if (v18 && v15)
          (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v18 + 16))(v18, v16);
        goto LABEL_38;
      }
      v10 = *v9;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v24);
      if (!v25)
      {
LABEL_38:
        a2 = *(IPC::Connection **)v4;
        a3 = (IPC::Decoder *)*((_QWORD *)v4 + 1);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        this = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
        if (this && a3)
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, IPC::Connection *))(*(_QWORD *)this + 16))(this, a2);
        goto LABEL_39;
      }
      LOWORD(v19) = v10;
      v20 = v24;
      v21 = 1;
      this = (WTF::StringImpl *)WebKit::WebSocketChannel::didClose((_QWORD *)v3, v10, (uint64_t)&v20);
      if (v21)
      {
        this = v20;
        v20 = 0;
        if (this)
          goto LABEL_27;
      }
LABEL_39:
      if (*(_DWORD *)(v3 + 40) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, IPC::Connection *, IPC::Decoder *))(*(_QWORD *)v3 + 8))(v3, a2, a3);
      --*(_DWORD *)(v3 + 40);
      return this;
    case 0xAE8:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((uint64_t *)a3, &v19);
      if (v21)
        WebKit::WebSocketChannel::didConnect(v3, (WTF::StringImpl *)&v19, (WTF::StringImpl *)&v20);
      this = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v12);
      goto LABEL_39;
    case 0xAE9:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)&v19);
      if (v21)
        this = WebKit::WebSocketChannel::didReceiveBinaryData((WTF *)v3, (char *)v19, v20);
      goto LABEL_39;
    case 0xAEA:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>((uint64_t *)a3, &v19);
      if (v23)
        WebKit::WebSocketChannel::didReceiveHandshakeResponse(v3, (uint64_t)&v19);
      this = std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v19, v11);
      goto LABEL_39;
    case 0xAEB:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v19);
      if ((_BYTE)v20)
      {
        this = WebKit::WebSocketChannel::didReceiveMessageError((WTF::StringImpl *)v3, &v19);
        goto LABEL_14;
      }
      goto LABEL_39;
    case 0xAEC:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v19);
      if ((_BYTE)v20)
      {
        if (*(_BYTE *)(v3 + 128))
          goto LABEL_26;
        v13 = *(_QWORD *)(v3 + 56);
        if (!v13)
          goto LABEL_26;
        v14 = *(_QWORD *)(v13 + 8);
        if (!v14)
          goto LABEL_26;
        this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 24))(v14, &v19);
LABEL_14:
        if ((_BYTE)v20)
        {
LABEL_26:
          this = v19;
          v19 = 0;
          if (this)
          {
LABEL_27:
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      goto LABEL_39;
    case 0xAED:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceRequest>>((uint64_t *)a3, &v19);
      if (v22)
        WebKit::WebSocketChannel::didSendHandshakeRequest(v3, (uint64_t)&v19);
      this = std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v19);
      goto LABEL_39;
    default:
      goto LABEL_39;
  }
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebSocketChannel::didReceiveMessage(WebKit::WebSocketChannel *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebSocketChannel::didReceiveMessage((WebKit::WebSocketChannel *)((char *)this - 8), a2, a3);
}

uint64_t WebKit::WebSocketTask::WebSocketTask(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, char a11, char a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int shouldBlockCookies;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  _QWORD v32[24];
  CFTypeRef cf;
  __int128 v34;
  uint64_t v35;

  *(_QWORD *)(a1 + 40) = 0;
  WebKit::NetworkTaskCocoa::NetworkTaskCocoa(a1, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), a11);
  *(_QWORD *)a1 = off_1E3505A78;
  *(_QWORD *)(a1 + 48) = a2;
  v20 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 56) = v20;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  v21 = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 80) = *a4;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  v22 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 120) = v22;
  v23 = *(_DWORD **)(a8 + 160);
  if (v23)
    *v23 += 2;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v23;
  *(_BYTE *)(a1 + 136) = a12;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  if (WebCore::operator==())
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 144, a9);
  shouldBlockCookies = a12 == 2;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40);
  if (!v25 || (v26 = *(_QWORD *)(v25 + 8)) == 0)
  {
    if (a12 != 2)
      goto LABEL_14;
    goto LABEL_13;
  }
  v27 = *(_QWORD *)(v26 + 32);
  v32[0] = *(_QWORD *)(v26 + 24);
  v28 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v27 + 216), v32);
  if (a12 != 2 && v28)
  {
    v34 = *a4;
    v35 = *((_QWORD *)a4 + 2);
    shouldBlockCookies = WebCore::NetworkStorageSession::shouldBlockCookies();
  }
  if (shouldBlockCookies)
LABEL_13:
    WebKit::NetworkTaskCocoa::blockCookies((_BYTE *)a1);
LABEL_14:
  WebKit::WebSocketTask::readNextMessage((WebKit::WebSocketTask *)a1);
  v29 = *(_QWORD *)(a1 + 48);
  MEMORY[0x19AEAEC20](v32, objc_msgSend(*(id *)(a1 + 56), "currentRequest"));
  WebKit::NetworkSocketChannel::didSendHandshakeRequest(v29, (WebCore::ResourceRequest *)v32);
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v32);
  return a1;
}

void sub_19781AF1C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, unsigned int **a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  va_list va;

  va_start(va, a5);
  v8 = *(unsigned int *)(v5 + 168);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E3505AA8[v8])(va, v6);
  *(_DWORD *)(v5 + 168) = -1;
  v9 = *(WTF::StringImpl **)(v5 + 128);
  *(_QWORD *)(v5 + 128) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(unsigned int **)(v5 + 120);
  *(_QWORD *)(v5 + 120) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *(const void **)(v5 + 56);
  *(_QWORD *)(v5 + 56) = 0;
  if (v13)
    CFRelease(v13);
  v14 = *(unsigned int **)(v5 + 8);
  *(_QWORD *)v5 = off_1E34B61D0;
  *(_QWORD *)(v5 + 8) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(a4, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebSocketTask::readNextMessage(WebKit::WebSocketTask *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;

  v2 = (void *)*((_QWORD *)this + 7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 10, (uint64_t)this);
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::{lambda(void *,NSURLSessionWebSocketMessage *,NSError *)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::descriptor;
  v5[4] = this;
  v5[5] = v3;
  objc_msgSend(v2, "receiveMessageWithCompletionHandler:", v5);
  _Block_release(v5);
}

void sub_19781B0B4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebSocketTask::didConnect(WebKit::WebSocketTask *this, const WTF::String *a2)
{
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  _QWORD v10[30];
  CFTypeRef cf;
  WTF::StringImpl *v12;

  v12 = 0;
  v4 = (void *)objc_msgSend(*((id *)this + 7), "response");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    MEMORY[0x19AEABCC8](v10, objc_msgSend(v4, "valueForHTTPHeaderField:", CFSTR("Sec-WebSocket-Extensions")));
    v12 = (WTF::StringImpl *)v10[0];
  }
  *((_BYTE *)this + 65) = 1;
  WebKit::NetworkSocketChannel::didConnect(*((WebKit::NetworkSocketChannel **)this + 6), a2, (const WTF::String *)&v12);
  v5 = *((_QWORD *)this + 6);
  WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v10, (NSURLResponse *)objc_msgSend(*((id *)this + 7), "response"));
  WebKit::NetworkSocketChannel::didReceiveHandshakeResponse(v5, (WebCore::ResourceResponseBase *)v10);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v6);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19781B1F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebSocketTask::sendString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  const void *v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a2, a3, 4);
  if (v6)
  {
    v7 = (const void *)v6;
    v8 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92CF0]), "initWithString:", v6);
    v9 = *(void **)(a1 + 56);
    v10 = *a4;
    *a4 = 0;
    v11 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
    v11[4] = v10;
    objc_msgSend(v9, "sendMessage:completionHandler:", v8, v11);
    _Block_release(v11);
    if (v8)
      CFRelease(v8);
    CFRelease(v7);
  }
  else
  {
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_19781B350(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebSocketTask::sendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  const void *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
  v7 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92CF0]), "initWithData:", v6);
  v8 = *(void **)(a1 + 56);
  v9 = *a4;
  *a4 = 0;
  v10 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v10 = MEMORY[0x1E0C809A0];
  v10[1] = 50331650;
  v10[2] = WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke;
  v10[3] = &WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v10[4] = v9;
  objc_msgSend(v8, "sendMessage:completionHandler:", v7, v10);
  _Block_release(v10);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
}

void sub_19781B4BC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v4 = v3;
  _Block_release(v4);
  if (v2)
  {
    CFRelease(v2);
    if (!v1)
LABEL_4:
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  CFRelease(v1);
  goto LABEL_4;
}

void sub_19781B518()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19781B4ECLL);
  JUMPOUT(0x19781B4E4);
}

WTF *WebKit::WebSocketTask::close(WebKit::WebSocketTask *this, int a2, const WTF::String *a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  const void *v7;
  char v8;
  void *v9;
  void *v10;
  WTF *result;
  WTF *v12;

  if (a2 == -1)
    v4 = 0;
  else
    v4 = a2;
  WTF::String::utf8();
  if (v12)
  {
    v5 = (char *)v12 + 16;
    v6 = *((_QWORD *)v12 + 1);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v5, v6);
  v8 = objc_opt_respondsToSelector();
  v9 = (void *)*((_QWORD *)this + 7);
  if ((v8 & 1) != 0)
    objc_msgSend(v9, "_sendCloseCode:reason:", v4, v7);
  else
    objc_msgSend(v9, "cancelWithCloseCode:reason:", v4, v7);
  if (v7)
    CFRelease(v7);
  result = v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      return (WTF *)WTF::fastFree(v12, v10);
    else
      --*(_DWORD *)v12;
  }
  return result;
}

void sub_19781B604(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebSocketTask::task(WebKit::WebSocketTask *this)
{
  return *((_QWORD *)this + 7);
}

void WebKit::WebSocketTask::~WebSocketTask(WebKit::WebSocketTask *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebSocketTask::~WebSocketTask(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  *(_QWORD *)this = off_1E3505A78;
  v3 = *((unsigned int *)this + 42);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3505AA8[v3])(&v12, (char *)this + 144);
  *((_DWORD *)this + 42) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34B61D0;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, a2);
}

__n128 WebKit::WebSocketTask::frameID@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[5];
  *a2 = result;
  a2[1].n128_u64[0] = this[6].n128_u64[0];
  return result;
}

uint64_t WebKit::WebSocketTask::pageID(WebKit::WebSocketTask *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t WebKit::WebSocketTask::storedCredentialsPolicy(WebKit::WebSocketTask *this)
{
  return *((unsigned __int8 *)this + 136);
}

unsigned int *WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *WTF::BlockPtr<void ()(NSURLSessionWebSocketMessage *,NSError *)>::fromCallable<WebKit::WebSocketTask::readNextMessage(void)::$_0>(WebKit::WebSocketTask::readNextMessage(void)::$_0)::{lambda(void *,NSURLSessionWebSocketMessage *,NSError *)#1}::__invoke(uint64_t *result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v11;
  WebKit::NetworkSocketChannel *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  void *v16;
  const void *v17;
  size_t v18;
  WTF::StringImpl *v19[17];
  char v20;
  CFTypeRef cf;

  v3 = result[5];
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v5 = result[4];
    if (a3)
    {
      result = (uint64_t *)objc_msgSend(*(id *)(v5 + 56), "closeCode");
      if (!result)
      {
        if (!*(_BYTE *)(v5 + 65))
        {
          WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v19, (NSURLResponse *)objc_msgSend(*(id *)(v5 + 56), "response"));
          if ((v20 & 1) == 0)
            WebKit::NetworkSocketChannel::didReceiveHandshakeResponse(*(_QWORD *)(v5 + 48), (WebCore::ResourceResponseBase *)v19);
          v7 = cf;
          cf = 0;
          if (v7)
            CFRelease(v7);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v19, v6);
        }
        v8 = *(_QWORD *)(v5 + 48);
        MEMORY[0x19AEABCC8](v19, objc_msgSend(a3, "localizedDescription"));
        WebKit::NetworkSocketChannel::didReceiveMessageError(v8, (WTF::StringImpl *)v19);
        result = (uint64_t *)v19[0];
        v19[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
          else
            *(_DWORD *)result -= 2;
        }
        if (!*(_BYTE *)(v5 + 64))
        {
          *(_BYTE *)(v5 + 64) = 1;
          return WebKit::NetworkSocketChannel::didClose(*(uint64_t **)(v5 + 48), (WTF::StringImpl *)0x3EE, MEMORY[0x1E0CBF738]);
        }
      }
    }
    else
    {
      v11 = objc_msgSend(a2, "type");
      v12 = *(WebKit::NetworkSocketChannel **)(v5 + 48);
      if (v11 == 1)
      {
        MEMORY[0x19AEABCC8](v19, objc_msgSend(a2, "string"));
        WebKit::NetworkSocketChannel::didReceiveText(v12, (const WTF::String *)v19);
        v14 = v19[0];
        v19[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      else
      {
        v15 = (void *)objc_msgSend(a2, "data");
        if (v15)
        {
          v16 = v15;
          v17 = (const void *)objc_msgSend(v15, "bytes");
          v18 = objc_msgSend(v16, "length");
        }
        else
        {
          v17 = 0;
          v18 = 0;
        }
        WebKit::NetworkSocketChannel::didReceiveBinaryData((uint64_t)v12, v17, v18);
      }
      return (uint64_t *)WebKit::WebSocketTask::readNextMessage((WebKit::WebSocketTask *)v5);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendString(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19781B8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSError *)>::fromCallable<WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebSocketTask::sendData(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19781B950(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebSpeechRecognitionConnection::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2798)
    return IPC::handleMessage<Messages::WebSpeechRecognitionConnection::DidReceiveUpdate,WebKit::WebSpeechRecognitionConnection,WebKit::WebSpeechRecognitionConnection,void ()(WebCore::SpeechRecognitionUpdate &&)>((uint64_t)a2, (uint64_t *)a3, this, (uint64_t (*)(_QWORD *, _BYTE *))0x38, 1);
  return this;
}

uint64_t IPC::handleMessage<Messages::WebSpeechRecognitionConnection::DidReceiveUpdate,WebKit::WebSpeechRecognitionConnection,WebKit::WebSpeechRecognitionConnection,void ()(WebCore::SpeechRecognitionUpdate &&)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _BYTE *), uint64_t a5)
{
  uint64_t result;
  _QWORD *v9;
  _BYTE v10[16];
  uint64_t v11;
  int v12;
  char v13;
  char v14;

  result = IPC::Decoder::decode<std::tuple<WebCore::SpeechRecognitionUpdate>>(a2, (uint64_t)v10);
  if (v13)
  {
    v9 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *, _BYTE *))(*v9 + a4);
    result = a4(v9, v10);
    if (v13)
    {
      if (v12 != -1)
        return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v12])(&v14, &v11);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2798)
    return IPC::handleMessage<Messages::WebSpeechRecognitionConnection::DidReceiveUpdate,WebKit::WebSpeechRecognitionConnection,WebKit::WebSpeechRecognitionConnection,void ()(WebCore::SpeechRecognitionUpdate &&)>((uint64_t)a2, (uint64_t *)a3, this - 16, (uint64_t (*)(_QWORD *, _BYTE *))0x38, 1);
  return this;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SpeechRecognitionUpdate>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::SpeechRecognitionUpdate>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SpeechRecognitionUpdate>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  _BYTE v11[16];
  int v12;
  unsigned __int8 v13;
  char v14;

  IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::decode(a1, (uint64_t)&v9);
  if (v13
    || ((v6 = *a1, v7 = a1[1], *a1 = 0, a1[1] = 0, (result = a1[3]) != 0) ? (v8 = v7 == 0) : (v8 = 1),
        !v8 && (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6), v13)))
  {
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 32) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>(a2 + 16, (uint64_t)v11);
    v5 = v13;
    *(_BYTE *)(a2 + 40) = 1;
    if (v5)
    {
      if (v12 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS7_27SpeechRecognitionResultDataELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v12])(&v14, v11);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWClientConnection::RegistrationJobResolvedInServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationData &&,WebCore::ShouldNotifyWhenResolved)>(uint64_t *a1)
{
  char v2;
  WTF::StringImpl *v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  BOOL v36;
  char v37;
  _BYTE v38[352];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!v2)
  {
    v37 = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a1, v38);
  v4 = v39;
  if (v39)
  {
    v5 = a1[1];
    v3 = (WTF::StringImpl *)*a1;
    v6 = a1[2] - *a1;
    if (v5 <= v6)
    {
      v14 = 0;
      v15 = 0;
      *a1 = 0;
      a1[1] = 0;
      v16 = a1[3];
      if (v16)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
          v15 = *a1;
          v14 = a1[1];
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
      }
    }
    else
    {
      v7 = (unsigned __int8 *)v3 + v6;
      a1[2] = (uint64_t)(v7 + 1);
      if (v3)
      {
        v8 = *v7;
        if (v8 < 2)
        {
          v9 = v8 != 0;
          WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v26, (uint64_t)v38);
          v36 = v9;
          v4 = 1;
          goto LABEL_18;
        }
        goto LABEL_16;
      }
      v14 = v5;
      v15 = 0;
    }
    v5 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v3 = (WTF::StringImpl *)*a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v3 = 0;
      }
    }
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v18 + 16))(v18, v3);
        v24 = a1[3];
        v3 = (WTF::StringImpl *)*a1;
        v25 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        if (v24)
        {
          if (v25)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v24 + 16))(v24, v3);
        }
      }
    }
    v4 = 0;
  }
LABEL_18:
  v37 = v4;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v3);
  if (!v37)
  {
LABEL_8:
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v13 = v11 == 0;
    else
      v13 = 1;
    if (v13)
      return result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    if (!v37)
      return result;
  }
  result = (WTF::StringImpl *)WebCore::SWClientConnection::registrationJobResolvedInServer();
  if (v37)
  {
    if (v35)
    {
      v20 = v34;
      v34 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (v33)
    {
      v21 = v32;
      v32 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    if (v31)
    {
      v22 = v30;
      v30 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v19);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    v23 = v29;
    v29 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
    if (v27 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E3505B30[v27])(v38, v26);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWClientConnection::StartScriptFetchForServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationKey &&,WebCore::FetchOptionsCache)>(uint64_t *a1)
{
  char v2;
  WTF::StringImpl *v3;
  char v4;
  unsigned __int16 Options;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BYTE v13[24];
  int v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  _BYTE v20[32];
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!v2)
  {
    v19 = 0;
    goto LABEL_18;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v20);
  v4 = v24;
  if (v24)
  {
    Options = IPC::Decoder::decode<WebCore::FetchOptionsCache>(a1);
    if (Options > 0xFFu)
    {
      if (!v24)
        __break(1u);
      v6 = Options;
      v13[0] = 0;
      v14 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v20);
      v7 = v21;
      v21 = 0;
      v15 = v7;
      v16 = v22;
      v17 = v23;
      LODWORD(v22) = v22 & 0xFFFFFFFE;
      v18 = v6;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  v19 = v4;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v3);
  if (!v19)
  {
LABEL_18:
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (v12)
      return result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
    if (!v19)
      return result;
  }
  result = (WTF::StringImpl *)WebCore::SWClientConnection::startScriptFetchForServer();
  if (v19)
  {
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    if (v14 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E3505B30[v14])(v20, v13);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWClientConnection::NotifyClientsOfControllerChange,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::HashSet<WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits> const&,std::optional<WebCore::ServiceWorkerData> &&)>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  BOOL v19;
  __int128 v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  char v47;
  char v48;
  _BYTE v49[24];
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  __int16 v53;
  char v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v37 = 0;
    v38 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v3, v2);
        v38 = *a1;
        v37 = a1[1];
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
    }
    goto LABEL_74;
  }
  v6 = (int *)(v3 + v4);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v3)
  {
    v37 = v2;
    v38 = 0;
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v37)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
    goto LABEL_60;
  }
  v7 = *v6;
  v41 = 0;
  if (v7)
  {
    v8 = 0;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v49);
      if (!(_BYTE)v51 || *(_QWORD *)&v49[16] == -1 || !*(_QWORD *)&v49[16] && *(_OWORD *)v49 == 0)
      {
        v10 = v41;
        if (!v41)
          goto LABEL_60;
LABEL_59:
        WTF::fastFree((WTF *)(v10 - 16), v9);
LABEL_60:
        v31 = *a1;
        v32 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v33 = a1[3];
        if (v33 && v32)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
        v49[0] = 0;
        v55 = 0;
LABEL_62:
        v34 = *a1;
        v35 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        result = (WTF::StringImpl *)a1[3];
        if (result && v35)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v34);
        if (v55)
          goto LABEL_53;
        return result;
      }
      v10 = v41;
      if (v41
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WebCore::ProcessQualified<WTF::UUID>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(&v41),
            (v10 = v41) != 0))
      {
        v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        v11 = 0;
      }
      LODWORD(v42) = -1640531527;
      WORD2(v42) = 0;
      BYTE6(v42) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v42, v49);
      v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42) & v11;
      v13 = (_QWORD *)(v10 + 32 * v12);
      v15 = *v13;
      v14 = v13[1];
      v16 = v13[2];
      if (*(_OWORD *)v13 != 0 || v16 != 0)
      {
        v9 = 0;
        v18 = 1;
        while (1)
        {
          v19 = v14 == *(_QWORD *)&v49[8] && v15 == *(_QWORD *)v49;
          if (v19 && v16 == *(_QWORD *)&v49[16])
            goto LABEL_59;
          if (v16 == -1)
            v9 = v13;
          v12 = ((_DWORD)v12 + v18) & v11;
          v13 = (_QWORD *)(v10 + 32 * v12);
          v15 = *v13;
          v14 = v13[1];
          v16 = v13[2];
          ++v18;
          if (*(_OWORD *)v13 == 0 && v16 == 0)
          {
            if (!v9)
              break;
            *v9 = 0;
            v9[1] = 0;
            v9[2] = 0;
            --*(_DWORD *)(v10 - 16);
            v22 = *(_OWORD *)v49;
            v9[2] = *(_QWORD *)&v49[16];
            *(_OWORD *)v9 = v22;
            v23 = *(_DWORD *)(v10 - 12) + 1;
            *(_DWORD *)(v10 - 12) = v23;
            goto LABEL_38;
          }
        }
      }
      v24 = *(_OWORD *)v49;
      v13[2] = *(_QWORD *)&v49[16];
      *(_OWORD *)v13 = v24;
      v23 = *(_DWORD *)(v10 - 12) + 1;
      *(_DWORD *)(v10 - 12) = v23;
LABEL_38:
      v25 = (*(_DWORD *)(v10 - 16) + v23);
      v26 = *(unsigned int *)(v10 - 4);
      if (v26 > 0x400)
        break;
      if (3 * v26 <= 4 * v25)
        goto LABEL_40;
LABEL_41:
      if (++v8 == v7)
      {
        v36 = v41;
        goto LABEL_47;
      }
    }
    if (v26 > 2 * v25)
      goto LABEL_41;
LABEL_40:
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WebCore::ProcessQualified<WTF::UUID>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(&v41);
    goto LABEL_41;
  }
  v36 = 0;
LABEL_47:
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)&v42);
  if (v48)
  {
    *(_QWORD *)v49 = v36;
    v49[8] = 0;
    v54 = 0;
    if (v47)
    {
      *(_OWORD *)&v49[8] = v42;
      v28 = v43;
      v43 = 0;
      v50 = v28;
      v51 = v44;
      v52 = v45;
      LODWORD(v44) = v44 & 0xFFFFFFFE;
      v53 = v46;
      v54 = 1;
    }
    v55 = 1;
  }
  else
  {
    v49[0] = 0;
    v55 = 0;
    if (!v36)
      goto LABEL_62;
    WTF::fastFree((WTF *)(v36 - 16), v27);
    if (!v55)
      goto LABEL_62;
  }
LABEL_53:
  result = (WTF::StringImpl *)WebCore::SWClientConnection::notifyClientsOfControllerChange();
  if (v55)
  {
    if (v54)
    {
      result = v50;
      v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (*(_QWORD *)v49)
      return (WTF::StringImpl *)WTF::fastFree((WTF *)(*(_QWORD *)v49 - 16), v30);
  }
  return result;
}

WTF *IPC::handleMessage<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts &&,WebCore::ServiceWorkerData &&,WTF::String &&)>(uint64_t *a1)
{
  void *v2;
  WTF *result;
  int v4;
  __int128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  unsigned __int8 v20;
  __int128 v21;
  __int128 v22;
  WTF *v23[2];
  uint64_t v24;
  __int128 v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  __int16 v29;
  WTF::StringImpl *v30;
  char v31;
  _OWORD v32[2];
  char v33;
  __int128 v34;
  _QWORD v35[5];
  __int16 v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v32);
  if (!v33)
    goto LABEL_14;
  IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)&v16);
  if (!v18)
    goto LABEL_13;
  IPC::Decoder::decode<WebCore::ServiceWorkerData>(a1, (uint64_t)&v34);
  if (!v37)
    goto LABEL_13;
  result = (WTF *)IPC::Decoder::decode<WTF::String>(a1, &v19);
  v4 = v20;
  if (v20)
  {
    if (!v33 || !v18 || !v37)
    {
      __break(1u);
LABEL_37:
      v23[1] = 0;
      LODWORD(v24) = 0;
      result = (WTF *)WTF::fastFree(result, v2);
LABEL_31:
      v13 = (unsigned int *)v23[0];
      v23[0] = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          *(_QWORD *)&v34 = v13;
          return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)&v34);
        }
      }
      return result;
    }
    v21 = v32[0];
    v22 = v32[1];
    v5 = v16;
    v16 = 0uLL;
    *(_OWORD *)v23 = v5;
    *(_QWORD *)&v5 = v17;
    v17 = 0;
    v24 = v5;
    v25 = v34;
    v6 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    v26 = v6;
    v27 = *(_OWORD *)&v35[1];
    v28 = *(_OWORD *)&v35[3];
    LODWORD(v35[1]) &= ~1u;
    v29 = v36;
    v30 = v19;
    v31 = 1;
    goto LABEL_10;
  }
  LOBYTE(v21) = 0;
  v31 = 0;
  if (!v37)
  {
LABEL_13:
    std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v2);
    goto LABEL_14;
  }
LABEL_10:
  v7 = (WTF::StringImpl *)v35[0];
  v35[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v2);
  if (v4)
  {
    v34 = v21;
    *(_OWORD *)v35 = v22;
    result = (WTF *)WebCore::SWClientConnection::postMessageToServiceWorkerClient();
    if (!v31)
      return result;
    v11 = v30;
    v30 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v2);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v26;
    v26 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v2);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v23[1];
    if (!v23[1])
      goto LABEL_31;
    goto LABEL_37;
  }
LABEL_14:
  v8 = *a1;
  v9 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
    return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::ServiceWorkerRegistrationData &&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  char v29;
  char v30;
  _OWORD v31[2];
  char v32;
  _OWORD v33[22];
  char v34;
  uint64_t v35;

  v4 = a2;
  v35 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a2, (uint64_t)v31);
  if (!v32)
    goto LABEL_39;
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(v4, v33);
  v7 = v34;
  if (v34)
  {
    if (!v32)
      goto LABEL_38;
    v18 = v31[0];
    v19 = v31[1];
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v20, (uint64_t)v33);
    v7 = 1;
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  v30 = v7;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v6);
  if (!v30)
    goto LABEL_40;
  while (1)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
    if (!(_BYTE)v9)
      break;
    *(_QWORD *)&v33[0] = result;
    v4 = (uint64_t *)v33 + 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v33 + 1, a1);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = off_1E3505B50;
    v10[1] = *(_QWORD *)&v33[0];
    v11 = *((_QWORD *)&v33[0] + 1);
    *((_QWORD *)&v33[0] + 1) = 0;
    v10[2] = v11;
    *(_QWORD *)&v31[0] = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v33 + 1);
    if (v30)
    {
      v33[0] = v18;
      v33[1] = v19;
      WebKit::WebSWClientConnection::setServiceWorkerClientIsControlled(a3, (uint64_t)v33, (uint64_t)v20, (uint64_t *)v31);
      result = *(WTF::StringImpl **)&v31[0];
      *(_QWORD *)&v31[0] = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      break;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    LOBYTE(v18) = 0;
    v30 = 0;
LABEL_40:
    v16 = *v4;
    v17 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    result = (WTF::StringImpl *)v4[3];
    if (result)
    {
      if (v17)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
        if (v30)
          continue;
      }
    }
    return result;
  }
  if (v30)
  {
    if (v29)
    {
      v12 = v28;
      v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    if (v27)
    {
      v13 = v26;
      v26 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    if (v25)
    {
      v14 = v24;
      v24 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    if (v21 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_OWORD *, _BYTE *))off_1E3505B30[v21])(v33, v20);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWClientConnection::FocusServiceWorkerClient,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WebCore::Document *a3)
{
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD v11[2];
  char v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>(a2, (uint64_t)v11);
  if (v12)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      *(_QWORD *)&v13[0] = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v13 + 1, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E3505B78;
      v8[1] = *(_QWORD *)&v13[0];
      v9 = *((_QWORD *)&v13[0] + 1);
      *((_QWORD *)&v13[0] + 1) = 0;
      v8[2] = v9;
      v10 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13 + 1);
      if (!v12)
        __break(1u);
      v13[0] = v11[0];
      v13[1] = v11[1];
      WebKit::WebSWClientConnection::focusServiceWorkerClient(a3, (uint64_t *)v13, (uint64_t *)&v10);
      result = (unint64_t)v10;
      v10 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyChunk,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference &&)>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  char v21;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5)
  {
    v6 = v4;
    IPC::Decoder::decode<IPC::SharedBufferReference>(a1, (uint64_t)&v19);
    if (v21)
    {
      v16 = v19;
      v8 = v20;
      v20 = 0uLL;
      v17 = v8;
      v18 = 1;
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      WebKit::WebSWClientConnection::notifyRecordResponseBodyChunk(a2, v6, (unsigned int *)&v16);
      if (v18)
      {
        v10 = (unsigned int *)*((_QWORD *)&v17 + 1);
        *((_QWORD *)&v17 + 1) = 0;
        if (v10)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v10);
        v11 = (unsigned int *)v17;
        *(_QWORD *)&v17 = 0;
        if (v11)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
      }
      return;
    }
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  }
  v12 = *a1;
  v13 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v14 = a1[3];
  if (v14)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (!v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
}

void IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyEnd,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError &&)>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  const void *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[2];
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  int v23;
  __int16 v24;
  CFTypeRef cf;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  int v32;
  __int16 v33;
  const void *v34;
  char v35;
  char v36;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5)
  {
    v6 = v4;
    IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v28);
    if (v36)
    {
      v8 = v28;
      v28 = 0uLL;
      *(_OWORD *)v19 = v8;
      v20 = v29;
      v21 = v30;
      LODWORD(v29) = v29 & 0xFFFFFFFE;
      v22 = v31;
      v23 = v32;
      v24 = v33;
      v9 = v34;
      v31 = 0;
      v34 = 0;
      cf = v9;
      v26 = v35;
      v27 = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
      WebKit::WebSWClientConnection::notifyRecordResponseBodyEnd(a2, v6, (uint64_t)v19);
      if (v27)
      {
        v11 = cf;
        cf = 0;
        if (v11)
          CFRelease(v11);
        v12 = v22;
        v22 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
        v17 = v19[1];
        v19[1] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v10);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v19[0];
        v19[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v10);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      return;
    }
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
  }
  v13 = *a1;
  v14 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v15 = a1[3];
  if (v15)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (!v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
}

void `non-virtual thunk to'WebKit::WebSWClientConnection::didReceiveMessage(WebKit::WebSWClientConnection *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebSWClientConnection::didReceiveMessage((WebKit::WebSWClientConnection *)((char *)this - 32), a2, a3);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ExceptionData>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BYTE v11[8];
  uint64_t v12;
  char v13;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, result = IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)v11), v13))
  {
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = v11[0];
    *(_QWORD *)(a1 + 16) = v12;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[88])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[88] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v6;

  v6 = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState>(a1, a2, (char *)&v6, a3);
  }
  else
  {
    *a3 = 0;
    a3[88] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v7;
  BOOL v8;
  WTF::StringImpl *v9;
  _BYTE v10[16];
  WTF::StringImpl *v11;
  char v12;
  char v13;

  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v10);
  if (v13)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>(a2, a3, (uint64_t)v10, (uint64_t)a4);
    if (v13)
      v8 = v12 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[88] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = a4;
  if (*(_BYTE *)(a1 + 8) && a2[1] && *(_BYTE *)(a3 + 72))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN3WTF23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS5_30ServiceWorkerRegistrationStateENS_8optionalINS5_17ServiceWorkerDataEEEEEC2B8sn180100IJLm0ELm1ELm2EEJS9_SA_SD_EJEJEJS9_SA_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSH_IJDpT2_EEEDpOT3_(a4, (_QWORD *)a1, a2, a3);
    *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN3WTF23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS5_30ServiceWorkerRegistrationStateENS_8optionalINS5_17ServiceWorkerDataEEEEEC2B8sn180100IJLm0ELm1ELm2EEJS9_SA_SD_EJEJEJS9_SA_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSH_IJDpT2_EEEDpOT3_(uint64_t a1, _QWORD *a2, char *a3, uint64_t a4)
{
  char v5;

  *(_QWORD *)a1 = *a2;
  v5 = *a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a4 + 64))
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
    WTF::URL::URL(a1 + 32, (uint64_t *)(a4 + 16));
    *(_WORD *)(a1 + 72) = *(_WORD *)(a4 + 56);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerState>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerState>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerState>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  char v7;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5
    && (v6 = result, result = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a1), (unsigned __int16)result > 0xFFu))
  {
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = result;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WallTime>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WallTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WallTime>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  char v7;
  char v8;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5 && (v6 = result, result = IPC::Decoder::decode<WTF::MonotonicTime>(a1), v7))
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = result;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerUpdateViaCache>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerUpdateViaCache>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerUpdateViaCache>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  char v7;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5 && (v6 = result, result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1), (unsigned __int16)result > 0xFFu))
  {
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = result;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WebCore::ProcessQualified<WTF::UUID>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  int v23;
  __int16 v24;
  char v25;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = v5;
  result = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  if (v5)
  {
    v9 = (_QWORD *)(result + 16);
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = v3;
    do
    {
      v12 = v2 + 32 * v10;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13 != -1 && (v13 || *(_OWORD *)v12 != 0))
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v23 = -1640531527;
        v24 = 0;
        v25 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v23, (_QWORD *)(v2 + 32 * v10));
        v17 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v23);
        v18 = 0;
        do
        {
          v19 = v17 & v16;
          v20 = v15 + 32 * v19;
          v17 = ++v18 + v19;
        }
        while (*(_OWORD *)v20 != 0 || *(_QWORD *)(v20 + 16) != 0);
        v22 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)v20 = *(_OWORD *)v12;
        *(_OWORD *)(v20 + 16) = v22;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v8);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::BackgroundFetchInformation>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v10[2];
  __int128 v11;
  _BYTE v12[19];
  char v13;

  result = IPC::Decoder::decode<WebCore::BackgroundFetchInformation>(a2, (uint64_t)v10);
  if (v13)
  {
    v5 = v10[1];
    *(_QWORD *)a1 = v10[0];
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(_OWORD *)v12;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 47) = *(_DWORD *)&v12[15];
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection34SetServiceWorkerClientIsControlledEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS9_29ServiceWorkerRegistrationDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505B50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection34SetServiceWorkerClientIsControlledEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS9_29ServiceWorkerRegistrationDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505B50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection34SetServiceWorkerClientIsControlledEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS9_29ServiceWorkerRegistrationDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3470;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection24FocusServiceWorkerClientEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505B78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection24FocusServiceWorkerClientEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505B78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWClientConnection24FocusServiceWorkerClientEN6WebKit21WebSWClientConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3469;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  IPC::Decoder *v8;

  v4 = *(unsigned __int8 *)(a2 + 192);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 192))
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(a1, a2);
    }
    else
    {
      v6 = (unsigned __int8 **)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::WebSWContextManagerConnection::didReceiveMessage(v6, v7, v8);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void WebKit::WebSWContextManagerConnection::didReceiveMessage(unsigned __int8 **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t v3;
  uint64_t *v6;
  unsigned __int8 **v7;
  void *v8;
  WebCore::SWContextManager *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  __int128 v35;
  uint64_t v36;
  const void *v37;
  WTF::StringImpl *v38;
  WebCore::SWContextManager *v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int *v46;
  int v47;
  int v48;
  void *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  const WTF::StringImpl *v56;
  WTF::URL *v57;
  WTF::URL *v58;
  uint64_t v59;
  unsigned int *v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  BOOL v73;
  unsigned __int16 v74;
  char v75;
  uint64_t v76;
  __int16 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  char v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unsigned __int16 v90;
  void *v91;
  unsigned __int16 v92;
  char v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unsigned __int16 v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  WTF::StringImpl *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  const void *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned __int16 v121;
  unsigned __int16 v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  char *v127;
  unint64_t v128;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  int v134;
  void *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  unsigned int v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  WebCore::SWContextManager *v149;
  unint64_t v150;
  char v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int8 *v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t *v158;
  unsigned __int8 **v159;
  char v160;
  unint64_t v161;
  WebCore::SWContextManager *v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  unint64_t v174;
  unsigned __int8 *v175;
  unsigned int v176;
  BOOL v177;
  char v178;
  WTF::StringImpl *v179;
  unsigned __int8 **v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WebCore::SWContextManager *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void *v187;
  char v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  WTF::StringImpl *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  int v205;
  uint64_t v206;
  unsigned int *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  void *v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  int v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  WTF::RefCountedBase *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::RefCountedBase *v285;
  WTF::StringImpl *v286;
  CFTypeRef v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned __int8 **v291;
  int v292;
  uint64_t *v293;
  uint64_t v294;
  unsigned __int8 **v295;
  char v296;
  WTF::StringImpl *v297;
  char v298;
  WTF::StringImpl *v299;
  char v300;
  WTF::StringImpl *v301;
  char v302;
  _BYTE v303[72];
  _BYTE v304[24];
  _BYTE v305[24];
  __int128 v306;
  __int128 v307;
  _BYTE v308[24];
  __int128 v309;
  __int128 v310;
  CFTypeRef v311[2];
  WTF::StringImpl *v312[2];
  _BYTE v313[32];
  unsigned __int8 **v314;
  WTF::StringImpl *v315;
  BOOL v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  char v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  char v325;
  __int16 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  char v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  char v339;
  uint64_t v340;
  __int128 v341;
  WTF::StringImpl *v342;
  __int128 v343;
  __int128 v344;
  __int16 v345;
  WTF::StringImpl *v346;
  char v347;
  char v348;
  __int16 v349;
  char v350;
  _BYTE v351[56];
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  _BYTE v357[80];
  _BYTE v358[19];
  uint64_t v359;
  char v360;
  char v361;
  uint64_t v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  char v367;
  __int16 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  char v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  char v381;
  uint64_t v382;
  char v383;
  __int128 v384;
  _BYTE v385[40];
  __int16 v386;
  char v387;
  uint64_t v388;

  v6 = (uint64_t *)this;
  v388 = *MEMORY[0x1E0C80C00];
  v7 = this + 4;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA84:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v303, (uint64_t *)a3);
      if (v303[24])
        WebKit::WebSWContextManagerConnection::cancelFetch(v6, *(uint64_t *)v303, *(uint64_t *)&v303[8], *(uint64_t *)&v303[16]);
      goto LABEL_427;
    case 0xA85:
      WebKit::WebSWContextManagerConnection::close((WebKit::WebSWContextManagerConnection *)v6);
      goto LABEL_427;
    case 0xA86:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v303, (uint64_t *)a3);
      if (v303[24])
        WebKit::WebSWContextManagerConnection::continueDidReceiveFetchResponse((uint64_t)v6, *(uint64_t *)v303, *(uint64_t *)&v303[8], *(uint64_t *)&v303[16]);
      goto LABEL_427;
    case 0xA87:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v303, (uint64_t *)a3);
      if (v303[24])
        WebKit::WebSWContextManagerConnection::convertFetchToDownload((uint64_t)v6, *(uint64_t *)v303, *(uint64_t *)&v303[8], *(uint64_t *)&v303[16]);
      goto LABEL_427;
    case 0xA88:
      v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v41)
        goto LABEL_330;
      v3 = v40;
      IPC::Decoder::decode<WebCore::ScriptBuffer>((uint64_t *)a3, &v384);
      if (!BYTE8(v384))
      {
        v303[0] = 0;
        goto LABEL_330;
      }
      v42 = *((_QWORD *)a3 + 1);
      v43 = *(_QWORD *)a3;
      v44 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v42 < v44 || v42 - v44 <= 3)
      {
        v259 = 0;
        v260 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v261 = *((_QWORD *)a3 + 3);
        if (v261)
        {
          if (v42)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v261 + 16))(v261, v43, v42);
            v260 = *(_QWORD *)a3;
            v259 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v259 = 0;
            v260 = 0;
          }
        }
        goto LABEL_353;
      }
      v46 = (int *)(v43 + v44);
      *((_QWORD *)a3 + 2) = v46 + 1;
      if (!v43)
      {
        v259 = v42;
        v260 = 0;
LABEL_353:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v262 = *((_QWORD *)a3 + 3);
        if (v262 && v259)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v262 + 16))(v262, v260);
LABEL_257:
        v201 = *(void **)a3;
        v202 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v203 = *((_QWORD *)a3 + 3);
        if (v203 && v202)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v203 + 16))(v203, v201);
        if (BYTE8(v384))
        {
          v204 = (unsigned int *)v384;
          *(_QWORD *)&v384 = 0;
          if (v204)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v204, v201);
        }
        goto LABEL_330;
      }
      v47 = *v46;
      v301 = 0;
      v292 = v47;
      if (!v47)
      {
        v199 = 0;
        goto LABEL_265;
      }
      v290 = v3;
      v291 = v7;
      v48 = 0;
      v293 = v6;
      do
      {
        IPC::Decoder::decode<WTF::URL>((uint64_t *)a3, v303);
        if (!v303[40])
        {
LABEL_255:
          if (v301)
            WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable((uint64_t)v301, v49);
          goto LABEL_257;
        }
        IPC::Decoder::decode<WebCore::ScriptBuffer>((uint64_t *)a3, v351);
        if (!v351[8])
        {
          v65 = 1;
          goto LABEL_83;
        }
        if (!v303[40])
          goto LABEL_293;
        if (*(_QWORD *)v303 == -1
          || (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v303) & 1) != 0)
        {
          v65 = 1;
          goto LABEL_80;
        }
        if (!v303[40] || !v351[8])
          goto LABEL_293;
        v50 = v301;
        if (v301
          || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v301, 0), (v50 = v301) != 0))
        {
          v51 = *((_DWORD *)v50 - 2);
        }
        else
        {
          v51 = 0;
        }
        v52 = *(_DWORD *)(*(_QWORD *)v303 + 16);
        if (v52 >= 0x100)
          v53 = v52 >> 8;
        else
          v53 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v303);
        v54 = v53 & v51;
        v55 = (uint64_t)v50 + 48 * (v53 & v51);
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v55) & 1) == 0)
        {
          v57 = 0;
          v3 = 1;
          do
          {
            v58 = (WTF::URL *)v55;
            if (*(_QWORD *)v55 != -1)
            {
              v58 = v57;
              if ((WTF::equal(*(WTF **)v55, *(const WTF::StringImpl **)v303, v56) & 1) != 0)
              {
                v65 = 1;
                v7 = v291;
                v6 = v293;
                goto LABEL_80;
              }
            }
            v54 = (v54 + v3) & v51;
            v55 = (uint64_t)v50 + 48 * v54;
            v3 = (v3 + 1);
            v57 = v58;
          }
          while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v55));
          v6 = v293;
          if (v58)
          {
            *(_QWORD *)v58 = 0;
            WTF::URL::invalidate(v58);
            *((_QWORD *)v58 + 5) = 0;
            --*((_DWORD *)v301 - 4);
            v55 = (uint64_t)v58;
          }
        }
        WTF::URL::operator=(v55, (WTF::StringImpl *)v303);
        v59 = *(_QWORD *)v351;
        *(_QWORD *)v351 = 0;
        v60 = *(unsigned int **)(v55 + 40);
        *(_QWORD *)(v55 + 40) = v59;
        if (v60)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v60, v49);
        if (v301)
          v61 = *((_DWORD *)v301 - 3) + 1;
        else
          v61 = 1;
        *((_DWORD *)v301 - 3) = v61;
        if (v301)
          v62 = *((_DWORD *)v301 - 3);
        else
          v62 = 0;
        v63 = (*((_DWORD *)v301 - 4) + v62);
        v64 = *((unsigned int *)v301 - 1);
        if (v64 > 0x400)
        {
          if (v64 > 2 * v63)
            goto LABEL_79;
LABEL_78:
          WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v301, v55);
          goto LABEL_79;
        }
        if (3 * v64 <= 4 * v63)
          goto LABEL_78;
LABEL_79:
        v65 = 0;
        v7 = v291;
LABEL_80:
        if (v351[8])
        {
          v66 = *(unsigned int **)v351;
          *(_QWORD *)v351 = 0;
          if (v66)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v66, v49);
        }
LABEL_83:
        if (!v303[40])
          goto LABEL_87;
        v67 = *(WTF::StringImpl **)v303;
        *(_QWORD *)v303 = 0;
        if (!v67)
          goto LABEL_87;
        if (*(_DWORD *)v67 != 2)
        {
          *(_DWORD *)v67 -= 2;
LABEL_87:
          if (v65)
            goto LABEL_255;
          goto LABEL_88;
        }
        WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v49);
        if (v65)
          goto LABEL_255;
LABEL_88:
        ++v48;
      }
      while (v48 != v292);
      v3 = v290;
      if (!BYTE8(v384))
        goto LABEL_293;
      v199 = v301;
LABEL_265:
      *(_QWORD *)v303 = v3;
      *(_QWORD *)&v303[8] = v384;
      *(_QWORD *)&v303[16] = v199;
      v303[24] = 1;
      WebKit::WebSWContextManagerConnection::didSaveScriptsToDisk((WebCore::SWContextManager *)v6);
      if (v303[24])
      {
        if (*(_QWORD *)&v303[16])
          WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(*(uint64_t *)&v303[16], v8);
        v207 = *(unsigned int **)&v303[8];
        *(_QWORD *)&v303[8] = 0;
        if (v207)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v207, v8);
      }
LABEL_427:
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v7, v8);
      return;
    case 0xA89:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v8)
        WebKit::WebSWContextManagerConnection::fireActivateEvent((WebCore::SWContextManager *)v6);
      goto LABEL_427;
    case 0xA8A:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation>>((uint64_t)v303, (uint64_t *)a3);
      if (!v303[64])
        goto LABEL_427;
      v145 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v8)
        goto LABEL_172;
      *(_QWORD *)v351 = v145;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v351[8], a2);
      v146 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v146 = off_1E3505C38;
      v146[1] = *(_QWORD *)v351;
      v147 = *(_QWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      v146[2] = v147;
      *(_QWORD *)&v384 = v146;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v351[8]);
      WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent((uint64_t)v6, *(uint64_t *)v303, (uint64_t)&v303[8], (uint64_t *)&v384);
      goto LABEL_169;
    case 0xA8B:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation>>((uint64_t)v303, (uint64_t *)a3);
      if (!v303[64])
        goto LABEL_427;
      v118 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v8)
        goto LABEL_172;
      *(_QWORD *)v351 = v118;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v351[8], a2);
      v119 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v119 = off_1E3505C10;
      v119[1] = *(_QWORD *)v351;
      v120 = *(_QWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      v119[2] = v120;
      *(_QWORD *)&v384 = v119;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v351[8]);
      WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent((uint64_t)v6, *(uint64_t *)v303, (uint64_t)&v303[8], (uint64_t *)&v384);
LABEL_169:
      v148 = v384;
      *(_QWORD *)&v384 = 0;
      if (v148)
        (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
      if (!v303[64])
        goto LABEL_427;
LABEL_172:
      v10 = *(WTF::StringImpl **)&v303[16];
      *(_QWORD *)&v303[16] = 0;
      if (!v10)
        goto LABEL_427;
      goto LABEL_252;
    case 0xA8C:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v8)
        WebKit::WebSWContextManagerConnection::fireInstallEvent((WebCore::SWContextManager *)v6);
      goto LABEL_427;
    case 0xA8D:
      v3 = (uint64_t)v6;
      v87 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v88)
        goto LABEL_216;
      v89 = v87;
      IPC::Decoder::decode<WebCore::NotificationData>((uint64_t *)a3, v351);
      if (!(_BYTE)v359)
        goto LABEL_216;
      v90 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      v92 = v90;
      if (v90 > 0xFFu)
      {
        if (!(_BYTE)v359)
          goto LABEL_293;
        v190 = v353;
        *(_QWORD *)v303 = v89;
        *(_QWORD *)&v303[16] = *(_QWORD *)v351;
        *(_OWORD *)&v303[24] = *(_OWORD *)&v351[8];
        *(_DWORD *)&v351[8] &= ~1u;
        *(_QWORD *)v351 = 0;
        *(_OWORD *)&v303[40] = *(_OWORD *)&v351[24];
        v191 = *(_OWORD *)&v351[40];
        *(_OWORD *)&v351[40] = 0u;
        *(_OWORD *)&v303[56] = v191;
        v192 = v352;
        v352 = 0u;
        *(_OWORD *)v304 = v192;
        *(_QWORD *)&v353 = 0;
        *(_QWORD *)&v304[16] = v190;
        v305[0] = BYTE8(v353);
        v193 = v354;
        v354 = 0u;
        *(_OWORD *)&v305[8] = v193;
        v306 = v355;
        v307 = v356;
        LODWORD(v355) = v355 & 0xFFFFFFFE;
        v310 = *(_OWORD *)&v357[40];
        *(_OWORD *)v311 = *(_OWORD *)&v357[56];
        *(_OWORD *)&v308[8] = *(_OWORD *)&v357[8];
        v309 = *(_OWORD *)&v357[24];
        v194 = *(WTF::StringImpl **)&v357[72];
        *(_QWORD *)&v357[72] = 0;
        v312[0] = v194;
        *(_QWORD *)&v193 = *(_QWORD *)v358;
        *(_QWORD *)v358 = 0;
        v312[1] = (WTF::StringImpl *)v193;
        *(_WORD *)v313 = *(_WORD *)&v358[8];
        v93 = 1;
        v313[16] = v90;
      }
      else
      {
        v93 = 0;
        v303[0] = 0;
      }
      LOBYTE(v314) = v93;
      if ((_BYTE)v359)
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v351, v91);
      if (v92 <= 0xFFu)
        goto LABEL_216;
      v195 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      v6 = (uint64_t *)v3;
      if (!(_BYTE)v8)
        goto LABEL_242;
      *(_QWORD *)v351 = v195;
      a3 = (IPC::Decoder *)&v351[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v351[8], a2);
      v196 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v196 = off_1E3505BE8;
      v196[1] = *(_QWORD *)v351;
      v197 = *(_QWORD *)&v351[8];
      *(_QWORD *)&v351[8] = 0;
      v196[2] = v197;
      *(_QWORD *)&v384 = v196;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v351[8]);
      if (!(_BYTE)v314)
        goto LABEL_293;
      WebKit::WebSWContextManagerConnection::fireNotificationEvent(v3, *(uint64_t *)v303, (uint64_t)&v303[16], v313[16], (uint64_t *)&v384);
      v198 = v384;
      *(_QWORD *)&v384 = 0;
      if (v198)
        (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
      if ((_BYTE)v314)
LABEL_242:
        WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v303[16], v8);
      goto LABEL_427;
    case 0xA8E:
      v150 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v151)
        goto LABEL_341;
      v152 = *((_QWORD *)a3 + 1);
      v153 = *(_QWORD *)a3;
      v154 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v152 <= v154)
      {
        v245 = 0;
        v246 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v247 = *((_QWORD *)a3 + 3);
        if (v247)
        {
          if (v152)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v247 + 16))(v247);
            v246 = *(_QWORD *)a3;
            v245 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v245 = 0;
            v246 = 0;
          }
        }
      }
      else
      {
        v155 = (unsigned __int8 *)(v153 + v154);
        *((_QWORD *)a3 + 2) = v155 + 1;
        if (v153)
        {
          v156 = *v155;
          if (v156 < 2)
          {
            v157 = v150;
            if (!v156)
            {
              v158 = v6;
              v159 = v7;
              v3 = 0;
              v160 = 0;
              goto LABEL_228;
            }
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)v303);
            if (v303[16])
            {
              v158 = v6;
              v159 = v7;
              v160 = v303[0];
              *(_QWORD *)&v384 = *(_QWORD *)&v303[1];
              *(_QWORD *)((char *)&v384 + 7) = *(_QWORD *)&v303[8];
              v3 = 1;
LABEL_228:
              IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>((uint64_t *)a3, v351);
              if (v357[8])
              {
                *(_QWORD *)v303 = v157;
                v303[8] = v160;
                *(_QWORD *)&v303[9] = v384;
                *(_QWORD *)&v303[16] = *(_QWORD *)((char *)&v384 + 7);
                v303[24] = v3;
                std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v303[32], (uint64_t)v351);
                LOBYTE(v309) = 1;
                if (!v357[8])
                {
                  v7 = v159;
                  v6 = v158;
                  goto LABEL_271;
                }
                std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v351, v189);
                v7 = v159;
                v6 = v158;
                if ((_BYTE)v309)
                  goto LABEL_271;
              }
              else
              {
                v303[0] = 0;
                LOBYTE(v309) = 0;
                v7 = v159;
                v6 = v158;
              }
LABEL_342:
              v8 = *(void **)a3;
              v253 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v254 = *((_QWORD *)a3 + 3);
              if (!v254)
                goto LABEL_427;
              if (!v253)
                goto LABEL_427;
              (*(void (**)(uint64_t, void *))(*(_QWORD *)v254 + 16))(v254, v8);
              if (!(_BYTE)v309)
                goto LABEL_427;
LABEL_271:
              v208 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              if ((_BYTE)v8)
              {
                *(_QWORD *)v351 = v208;
                a3 = (IPC::Decoder *)&v351[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v351[8], a2);
                v209 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v209 = off_1E3505BC0;
                v209[1] = *(_QWORD *)v351;
                v210 = *(_QWORD *)&v351[8];
                *(_QWORD *)&v351[8] = 0;
                v209[2] = v210;
                *(_QWORD *)&v384 = v209;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v351[8]);
                if (!(_BYTE)v309)
                  goto LABEL_293;
                *(_OWORD *)v351 = *(_OWORD *)&v303[8];
                *(_QWORD *)&v351[16] = *(_QWORD *)&v303[24];
                WebKit::WebSWContextManagerConnection::firePushEvent((WTF *)v6, *(WTF **)v303, (uint64_t)v351, (uint64_t)&v303[32], (uint64_t *)&v384);
                v211 = v384;
                *(_QWORD *)&v384 = 0;
                if (v211)
                  (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
              }
              if ((_BYTE)v309)
                std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v303[32], (WTF::StringImpl *)v8);
              goto LABEL_427;
            }
LABEL_340:
            v250 = *(_QWORD *)a3;
            v251 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v252 = *((_QWORD *)a3 + 3);
            if (v252 && v251)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v252 + 16))(v252, v250);
LABEL_341:
            v303[0] = 0;
            LOBYTE(v309) = 0;
            goto LABEL_342;
          }
LABEL_339:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v249 = *((_QWORD *)a3 + 3);
          if (v249 && v152)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v249 + 16))(v249, v153);
          goto LABEL_340;
        }
        v245 = v152;
        v246 = 0;
      }
      v152 = 0;
      v153 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v248 = *((_QWORD *)a3 + 3);
      if (v248)
      {
        if (v245)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v248 + 16))(v248, v246, v245);
          v153 = *(_QWORD *)a3;
          v152 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v152 = 0;
          v153 = 0;
        }
      }
      goto LABEL_339;
    case 0xA8F:
      v39 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v8)
      {
        WebCore::SWContextManager::singleton(v39);
        WebCore::SWContextManager::fireUpdateFoundEvent();
      }
      goto LABEL_427;
    case 0xA90:
      IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::decode((uint64_t *)a3, (uint64_t)v351);
      if (!v383)
      {
        v218 = *(_QWORD *)a3;
        v219 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v220 = *((_QWORD *)a3 + 3);
        if (!v220 || !v219 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v220 + 16))(v220, v218), !v383))
        {
          v303[0] = 0;
          v350 = 0;
          goto LABEL_372;
        }
      }
      IPC::Decoder::decode<WebCore::ServiceWorkerData>((uint64_t *)a3, (uint64_t)&v384);
      if (!v387)
      {
        v303[0] = 0;
        v350 = 0;
        goto LABEL_370;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v301);
      if (!v302)
      {
        v303[0] = 0;
        v350 = 0;
        goto LABEL_365;
      }
      v69 = *((_QWORD *)a3 + 1);
      v68 = *(WTF::StringImpl **)a3;
      v70 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v69 <= v70)
      {
        v3 = (uint64_t)v6;
        v263 = 0;
        v264 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v265 = *((_QWORD *)a3 + 3);
        if (v265)
        {
          if (v69)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v265 + 16))(v265);
            v264 = *(_QWORD *)a3;
            v263 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v263 = 0;
            v264 = 0;
          }
        }
      }
      else
      {
        v71 = (unsigned __int8 *)v68 + v70;
        *((_QWORD *)a3 + 2) = v71 + 1;
        v3 = (uint64_t)v6;
        if (v68)
        {
          v72 = *v71;
          if (v72 < 2)
          {
            v73 = v72 != 0;
            v74 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3);
            if (v74 > 0xFFu)
            {
              v75 = v74;
              v76 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>((uint64_t *)a3);
              if ((v76 & 0xFF0000) != 0)
              {
                if (!v383 || !v387 || !v302)
                  goto LABEL_293;
                v77 = v76;
                *(_OWORD *)v303 = *(_OWORD *)v351;
                *(_QWORD *)&v303[16] = *(_QWORD *)&v351[16];
                WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)&v303[24], (uint64_t)&v351[24]);
                v320 = v362;
                v78 = v363;
                v363 = 0u;
                v321 = v78;
                v79 = v364;
                v364 = 0;
                v322 = v79;
                v323 = v365;
                v80 = v369;
                v81 = v370;
                v369 = 0u;
                v370 = 0u;
                v365 = 0;
                v324 = v366;
                v325 = v367;
                v326 = v368;
                v327 = v80;
                v328 = v81;
                v329 = v371;
                v330 = v372;
                LODWORD(v371) = v371 & 0xFFFFFFFE;
                v331 = v373;
                v82 = v374;
                v374 = 0;
                v332 = v82;
                *(_QWORD *)&v80 = v375;
                v375 = 0;
                v333 = v80;
                LODWORD(v82) = v376;
                v376 = 0;
                v334 = v82;
                LOBYTE(v82) = v377;
                v377 = 0;
                v335 = v82;
                v337 = v379;
                v338 = v380;
                v336 = v378;
                v339 = v381;
                v83 = v382;
                v382 = 0;
                v340 = v83;
                v341 = v384;
                v84 = *(WTF::StringImpl **)v385;
                *(_QWORD *)v385 = 0;
                v342 = v84;
                v343 = *(_OWORD *)&v385[8];
                v344 = *(_OWORD *)&v385[24];
                *(_DWORD *)&v385[8] &= ~1u;
                v345 = v386;
                v85 = v301;
                v301 = 0;
                v346 = v85;
                v347 = v73;
                v348 = v75;
                v86 = 1;
                v349 = v77;
LABEL_360:
                v350 = v86;
                v6 = (uint64_t *)v3;
                if (v302)
                {
                  v268 = v301;
                  v301 = 0;
                  if (v268)
                  {
                    if (*(_DWORD *)v268 == 2)
                      WTF::StringImpl::destroy(v268, v68);
                    else
                      *(_DWORD *)v268 -= 2;
                  }
                }
LABEL_365:
                if (v387)
                {
                  v269 = *(WTF::StringImpl **)v385;
                  *(_QWORD *)v385 = 0;
                  if (v269)
                  {
                    if (*(_DWORD *)v269 == 2)
                      WTF::StringImpl::destroy(v269, v68);
                    else
                      *(_DWORD *)v269 -= 2;
                  }
                }
LABEL_370:
                if (v383)
                  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v351, v68);
LABEL_372:
                if (v350
                  || (v8 = *(void **)a3,
                      v272 = *((_QWORD *)a3 + 1),
                      *(_QWORD *)a3 = 0,
                      *((_QWORD *)a3 + 1) = 0,
                      (v273 = *((_QWORD *)a3 + 3)) != 0)
                  && v272
                  && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v273 + 16))(v273, v8), v350))
                {
                  WebKit::WebSWContextManagerConnection::installServiceWorker((uint64_t)v6, (uint64_t)v303, (uint64_t)&v341, (uint64_t)&v346, v347, v348, v349);
                  if (v350)
                  {
                    v270 = v346;
                    v346 = 0;
                    if (v270)
                    {
                      if (*(_DWORD *)v270 == 2)
                        WTF::StringImpl::destroy(v270, (WTF::StringImpl *)v8);
                      else
                        *(_DWORD *)v270 -= 2;
                    }
                    v271 = v342;
                    v342 = 0;
                    if (v271)
                    {
                      if (*(_DWORD *)v271 == 2)
                        WTF::StringImpl::destroy(v271, (WTF::StringImpl *)v8);
                      else
                        *(_DWORD *)v271 -= 2;
                    }
                    WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v303, (WTF::StringImpl *)v8);
                  }
                }
                goto LABEL_427;
              }
            }
LABEL_359:
            v86 = 0;
            v303[0] = 0;
            goto LABEL_360;
          }
LABEL_358:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v267 = *((_QWORD *)a3 + 3);
          if (v267)
          {
            if (v69)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v267 + 16))(v267, v68);
              v288 = *((_QWORD *)a3 + 3);
              v68 = *(WTF::StringImpl **)a3;
              v289 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v288)
              {
                if (v289)
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v288 + 16))(v288, v68);
              }
            }
          }
          goto LABEL_359;
        }
        v263 = v69;
        v264 = 0;
      }
      v69 = 0;
      v68 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v266 = *((_QWORD *)a3 + 3);
      if (v266)
      {
        if (v263)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v266 + 16))(v266, v264, v263);
          v68 = *(WTF::StringImpl **)a3;
          v69 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v69 = 0;
          v68 = 0;
        }
      }
      goto LABEL_358;
    case 0xA91:
      v123 = *((_QWORD *)a3 + 1);
      v124 = *(char **)a3;
      v125 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v123 >= v125 && v123 - v125 > 7)
      {
        v127 = &v124[v125];
        *((_QWORD *)a3 + 2) = v127 + 8;
        if (v124)
        {
          v294 = (uint64_t)v6;
          v128 = ((unint64_t)(v127 + 15) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v124;
          if (v123 >= v128 && v123 - v128 > 7)
          {
            v130 = (unint64_t *)((unint64_t)(v127 + 15) & 0xFFFFFFFFFFFFFFF8);
            v131 = *v130;
            v132 = *(_QWORD *)v127;
            *((_QWORD *)a3 + 2) = v130 + 1;
            v384 = 0uLL;
            if (v131 < 0x1555)
            {
              if (v131)
              {
                DWORD2(v384) = 192 * (int)v131 / 0xC0u;
                *(_QWORD *)&v384 = WTF::fastMalloc((WTF *)(192 * v131));
                do
                {
                  IPC::Decoder::decode<WebCore::ServiceWorkerClientData>((uint64_t *)a3, v303);
                  if (!(_BYTE)v310)
                    goto LABEL_328;
                  v134 = HIDWORD(v384);
                  if (HIDWORD(v384) == DWORD2(v384))
                  {
                    WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerClientData>((unsigned int *)&v384, (unint64_t)v303);
                  }
                  else
                  {
                    v136 = v384 + 192 * HIDWORD(v384);
                    v137 = *(_OWORD *)v303;
                    v138 = *(_OWORD *)&v303[16];
                    *(_WORD *)(v136 + 32) = *(_WORD *)&v303[32];
                    *(_OWORD *)v136 = v137;
                    *(_OWORD *)(v136 + 16) = v138;
                    WTF::URL::URL(v136 + 40, (uint64_t *)&v303[40]);
                    WTF::URL::URL(v136 + 80, (uint64_t *)&v304[8]);
                    v139 = v306;
                    v140 = v307;
                    v141 = *(_QWORD *)&v308[16];
                    *(_OWORD *)(v136 + 152) = *(_OWORD *)v308;
                    *(_OWORD *)(v136 + 136) = v140;
                    *(_OWORD *)(v136 + 120) = v139;
                    *(_QWORD *)(v136 + 176) = 0;
                    *(_QWORD *)(v136 + 184) = 0;
                    *(_QWORD *)(v136 + 168) = v141;
                    v142 = v309;
                    *(_QWORD *)&v309 = 0;
                    *(_QWORD *)(v136 + 176) = v142;
                    LODWORD(v142) = DWORD2(v309);
                    DWORD2(v309) = 0;
                    *(_DWORD *)(v136 + 184) = v142;
                    LODWORD(v142) = HIDWORD(v309);
                    HIDWORD(v309) = 0;
                    *(_DWORD *)(v136 + 188) = v142;
                    HIDWORD(v384) = v134 + 1;
                  }
                  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v303, v135);
                  --v131;
                }
                while (v131);
                v143 = (WTF::StringImpl *)v384;
                v144 = DWORD2(v384);
                LODWORD(v131) = HIDWORD(v384);
              }
              else
              {
                v144 = 0;
                v143 = 0;
              }
              *(_QWORD *)&v384 = 0;
              DWORD2(v384) = 0;
LABEL_220:
              HIDWORD(v384) = 0;
              v351[16] = 1;
              WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v384, v124);
              *(_OWORD *)v351 = 0uLL;
              *(_QWORD *)v303 = v132;
              *(_QWORD *)&v303[8] = v143;
              *(_DWORD *)&v303[16] = v144;
              *(_DWORD *)&v303[20] = v131;
              v303[24] = 1;
              WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v351, v186);
              v6 = (uint64_t *)v294;
              WebKit::WebSWContextManagerConnection::matchAllCompleted(v294, *(uint64_t *)v303, (WTF::StringImpl *)&v303[8]);
              if (v303[24])
                WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v303[8], v8);
              goto LABEL_427;
            }
            while (1)
            {
              IPC::Decoder::decode<WebCore::ServiceWorkerClientData>((uint64_t *)a3, v303);
              if (!(_BYTE)v310)
                break;
              v229 = HIDWORD(v384);
              if (HIDWORD(v384) == DWORD2(v384))
              {
                WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerClientData>((unsigned int *)&v384, (unint64_t)v303);
              }
              else
              {
                v231 = v384 + 192 * HIDWORD(v384);
                v232 = *(_OWORD *)v303;
                v233 = *(_OWORD *)&v303[16];
                *(_WORD *)(v231 + 32) = *(_WORD *)&v303[32];
                *(_OWORD *)v231 = v232;
                *(_OWORD *)(v231 + 16) = v233;
                WTF::URL::URL(v231 + 40, (uint64_t *)&v303[40]);
                WTF::URL::URL(v231 + 80, (uint64_t *)&v304[8]);
                v234 = v306;
                v235 = v307;
                v236 = *(_QWORD *)&v308[16];
                *(_OWORD *)(v231 + 152) = *(_OWORD *)v308;
                *(_OWORD *)(v231 + 136) = v235;
                *(_OWORD *)(v231 + 120) = v234;
                *(_QWORD *)(v231 + 176) = 0;
                *(_QWORD *)(v231 + 184) = 0;
                *(_QWORD *)(v231 + 168) = v236;
                v237 = v309;
                *(_QWORD *)&v309 = 0;
                *(_QWORD *)(v231 + 176) = v237;
                LODWORD(v237) = DWORD2(v309);
                DWORD2(v309) = 0;
                *(_DWORD *)(v231 + 184) = v237;
                LODWORD(v237) = HIDWORD(v309);
                HIDWORD(v309) = 0;
                *(_DWORD *)(v231 + 188) = v237;
                HIDWORD(v384) = v229 + 1;
              }
              std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v303, v230);
              if (!--v131)
              {
                v144 = DWORD2(v384);
                LODWORD(v131) = HIDWORD(v384);
                v143 = (WTF::StringImpl *)v384;
                if (DWORD2(v384) > HIDWORD(v384))
                {
                  v238 = (WTF::StringImpl *)v384;
                  if (HIDWORD(v384))
                  {
                    if (HIDWORD(v384) >= 0x1555556)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19781F9D8);
                    }
                    v239 = 192 * HIDWORD(v384);
                    v240 = WTF::fastMalloc((WTF *)(192 * HIDWORD(v384)));
                    v144 = (v239 & 0xFFFFFFC0) / 0xC0;
                    if ((WTF::StringImpl *)v240 == v143)
                    {
                      v238 = v143;
                    }
                    else
                    {
                      v238 = (WTF::StringImpl *)v240;
                      WTF::VectorMover<false,WebCore::ServiceWorkerClientData>::move(v143, (WTF::StringImpl *)((char *)v143 + 192 * v131), v240);
                    }
                  }
                  if (v143)
                  {
                    if (v238 == v143)
                    {
                      v144 = 0;
                      v238 = 0;
                      *(_QWORD *)&v384 = 0;
                      DWORD2(v384) = 0;
                    }
                    WTF::fastFree(v143, v124);
                  }
                  v143 = v238;
                }
                *(_QWORD *)&v384 = 0;
                DWORD2(v384) = 0;
                goto LABEL_220;
              }
            }
LABEL_328:
            std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v303, v133);
            WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v384, v241);
            v6 = (uint64_t *)v294;
          }
          else
          {
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v225 = *((_QWORD *)a3 + 3);
            if (v225)
            {
              if (v123)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v225 + 16))(v225);
                v226 = *(_QWORD *)a3;
                v227 = *((_QWORD *)a3 + 1);
                v228 = *((_QWORD *)a3 + 3);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                if (v228)
                {
                  if (v227)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v228 + 16))(v228, v226);
                }
              }
            }
          }
          v242 = *(_QWORD *)a3;
          v243 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v244 = *((_QWORD *)a3 + 3);
          if (v244 && v243)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v244 + 16))(v244, v242);
LABEL_330:
          v8 = *(void **)a3;
          v184 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v185 = *((_QWORD *)a3 + 3);
          if (!v185)
            goto LABEL_427;
LABEL_331:
          if (v184)
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v185 + 16))(v185, v8);
          goto LABEL_427;
        }
        v221 = v123;
        v222 = 0;
      }
      else
      {
        v221 = 0;
        v222 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v223 = *((_QWORD *)a3 + 3);
        if (v223)
        {
          if (v123)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v223 + 16))(v223);
            v222 = *(_QWORD *)a3;
            v221 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v221 = 0;
            v222 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v224 = *((_QWORD *)a3 + 3);
      if (v224 && v221)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v224 + 16))(v224, v222, v221);
      goto LABEL_330;
    case 0xA92:
      v3 = (uint64_t)v6;
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
        goto LABEL_216;
      v27 = v25;
      v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v29)
        goto LABEL_216;
      v30 = v28;
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v32)
        goto LABEL_216;
      v33 = v31;
      IPC::Decoder::decode<WebCore::ResourceError>((uint64_t *)a3, (uint64_t)v351);
      if (!BYTE8(v353))
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v351, v34);
        goto LABEL_216;
      }
      *(_QWORD *)v303 = v27;
      *(_QWORD *)&v303[8] = v30;
      *(_QWORD *)&v303[16] = v33;
      v35 = *(_OWORD *)v351;
      *(_OWORD *)v351 = 0uLL;
      *(_OWORD *)&v303[24] = v35;
      *(_OWORD *)&v303[40] = *(_OWORD *)&v351[16];
      *(_OWORD *)&v303[56] = *(_OWORD *)&v351[32];
      *(_DWORD *)&v351[16] &= ~1u;
      *(_QWORD *)v304 = *(_QWORD *)&v351[48];
      *(_DWORD *)&v304[8] = v352;
      *(_WORD *)&v304[12] = WORD2(v352);
      v36 = *((_QWORD *)&v352 + 1);
      *(_QWORD *)&v351[48] = 0;
      *((_QWORD *)&v352 + 1) = 0;
      *(_QWORD *)&v304[16] = v36;
      v305[0] = v353;
      v305[8] = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v351, v34);
      v6 = (uint64_t *)v3;
      WebKit::WebSWContextManagerConnection::navigationPreloadFailed((WebCore::SWContextManager *)v3);
      v37 = *(const void **)&v304[16];
      *(_QWORD *)&v304[16] = 0;
      if (v37)
        CFRelease(v37);
      v38 = *(WTF::StringImpl **)v304;
      *(_QWORD *)v304 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v38 -= 2;
      }
      v200 = *(WTF::StringImpl **)&v303[32];
      *(_QWORD *)&v303[32] = 0;
      if (v200)
      {
        if (*(_DWORD *)v200 == 2)
          WTF::StringImpl::destroy(v200, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v200 -= 2;
      }
      v10 = *(WTF::StringImpl **)&v303[24];
      *(_QWORD *)&v303[24] = 0;
      if (v10)
      {
LABEL_252:
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      goto LABEL_427;
    case 0xA93:
      v3 = (uint64_t)v6;
      v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v100)
        goto LABEL_216;
      v101 = v99;
      v102 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v103)
        goto LABEL_216;
      v104 = v102;
      v105 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v106)
        goto LABEL_216;
      v107 = v105;
      IPC::Decoder::decode<WebCore::ResourceResponse>((uint64_t *)a3, v351);
      if (v361)
      {
        *(_OWORD *)&v303[32] = *(_OWORD *)&v351[8];
        *(_OWORD *)&v303[48] = *(_OWORD *)&v351[24];
        v109 = v352;
        v352 = 0u;
        v110 = v353;
        v353 = 0u;
        *(_QWORD *)v303 = v101;
        *(_QWORD *)&v303[8] = v104;
        v111 = *(_QWORD *)&v351[40];
        *(_QWORD *)&v303[16] = v107;
        *(_QWORD *)&v303[24] = *(_QWORD *)v351;
        *(_QWORD *)v351 = 0;
        *(_DWORD *)&v351[8] &= ~1u;
        *(_QWORD *)&v351[40] = 0;
        *(_QWORD *)&v303[64] = v111;
        *(_QWORD *)v304 = *(_QWORD *)&v351[48];
        *(_OWORD *)&v304[8] = v109;
        *(_OWORD *)v305 = v110;
        v112 = *((_QWORD *)&v354 + 1);
        *(_QWORD *)&v305[16] = v354;
        v354 = 0uLL;
        *(_QWORD *)&v306 = v112;
        v113 = *((_QWORD *)&v355 + 1);
        *((_QWORD *)&v306 + 1) = v355;
        v355 = 0uLL;
        *(_QWORD *)&v307 = v113;
        BYTE8(v307) = 0;
        v308[0] = 0;
        if (BYTE8(v356))
        {
          v114 = v356;
          *(_QWORD *)&v356 = 0;
          *((_QWORD *)&v307 + 1) = v114;
          v308[0] = 1;
        }
        *(_OWORD *)v312 = *(_OWORD *)&v357[64];
        *(_OWORD *)v313 = *(_OWORD *)v358;
        *(_DWORD *)&v313[15] = *(_DWORD *)&v358[15];
        *(_OWORD *)&v308[8] = *(_OWORD *)v357;
        v309 = *(_OWORD *)&v357[16];
        v310 = *(_OWORD *)&v357[32];
        *(_OWORD *)v311 = *(_OWORD *)&v357[48];
        v115 = v359;
        v359 = 0;
        *(_QWORD *)&v313[24] = v115;
        LOBYTE(v314) = v360;
        LOBYTE(v315) = 1;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v351, v108);
        v6 = (uint64_t *)v3;
        WebKit::WebSWContextManagerConnection::navigationPreloadIsReady((WebCore::SWContextManager *)v3);
        v117 = *(const void **)&v313[24];
        *(_QWORD *)&v313[24] = 0;
        if (v117)
          CFRelease(v117);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v303[24], v116);
        goto LABEL_427;
      }
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v351, v108);
LABEL_216:
      v8 = *(void **)a3;
      v184 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v185 = *((_QWORD *)a3 + 3);
      v6 = (uint64_t *)v3;
      if (v185)
        goto LABEL_331;
      goto LABEL_427;
    case 0xA94:
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v12)
      {
        v303[0] = 0;
        v313[0] = 0;
        goto LABEL_303;
      }
      v13 = v11;
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>((uint64_t *)a3, (uint64_t)&v384);
      if (!v385[8])
        goto LABEL_16;
      v15 = *((_QWORD *)a3 + 1);
      v16 = *(_QWORD *)a3;
      v17 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v15 <= v17)
      {
        v255 = 0;
        v256 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v257 = *((_QWORD *)a3 + 3);
        if (v257)
        {
          if (v15)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v257 + 16))(v257, v16, v15);
            v256 = *(_QWORD *)a3;
            v255 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v255 = 0;
            v256 = 0;
          }
        }
      }
      else
      {
        v18 = (_BYTE *)(v16 + v17);
        *((_QWORD *)a3 + 2) = v18 + 1;
        if (v16)
        {
          if (*v18 < 2u)
          {
            if (*v18)
            {
              IPC::Decoder::decode<WebCore::ServiceWorkerClientData>((uint64_t *)a3, v303);
              v188 = v310;
              if ((_BYTE)v310)
              {
                std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)v351, (__int128 *)v303);
                v188 = 1;
                *(_DWORD *)&v357[56] = 1;
              }
              else
              {
                v351[0] = 0;
              }
              v357[72] = v188;
              std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v303, v187);
              v205 = v357[72];
            }
            else
            {
              IPC::Decoder::decode<WebCore::ServiceWorkerData>((uint64_t *)a3, (uint64_t)v303);
              v205 = v303[64];
              if (v303[64])
              {
                *(_OWORD *)v351 = *(_OWORD *)v303;
                v206 = *(_QWORD *)&v303[16];
                *(_QWORD *)&v303[16] = 0;
                *(_QWORD *)&v351[16] = v206;
                *(_OWORD *)&v351[24] = *(_OWORD *)&v303[24];
                *(_OWORD *)&v351[40] = *(_OWORD *)&v303[40];
                *(_DWORD *)&v303[24] &= ~1u;
                LOWORD(v352) = *(_WORD *)&v303[56];
                *(_DWORD *)&v357[56] = 0;
                v205 = 1;
              }
              else
              {
                v351[0] = 0;
              }
              v357[72] = v205;
            }
            if (v205)
              goto LABEL_283;
LABEL_15:
            v14 = *(void **)a3;
            v19 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v20 = *((_QWORD *)a3 + 3);
            if (!v20
              || !v19
              || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v20 + 16))(v20, v14), !v357[72]))
            {
LABEL_16:
              v303[0] = 0;
              v313[0] = 0;
              goto LABEL_17;
            }
LABEL_283:
            if (!v385[8])
              goto LABEL_293;
            *(_QWORD *)v303 = v13;
            v212 = v384;
            v384 = 0uLL;
            *(_OWORD *)&v303[8] = v212;
            *(_QWORD *)&v212 = *(_QWORD *)v385;
            *(_QWORD *)v385 = 0;
            *(_QWORD *)&v303[24] = v212;
            v303[32] = 0;
            LODWORD(v312[0]) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>((uint64_t)&v303[32], (uint64_t)v351);
            v313[0] = 1;
            if (v357[72] && *(_DWORD *)&v357[56] != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3505B90[*(unsigned int *)&v357[56]])(&v301, v351);
LABEL_17:
            std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v384, v14);
            if (v313[0])
              goto LABEL_18;
LABEL_303:
            v8 = *(void **)a3;
            v216 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v217 = *((_QWORD *)a3 + 3);
            if (!v217)
              goto LABEL_427;
            if (!v216)
              goto LABEL_427;
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v217 + 16))(v217, v8);
            if (!v313[0])
              goto LABEL_427;
LABEL_18:
            WebKit::WebSWContextManagerConnection::postMessageToServiceWorker((WebCore::SWContextManager *)v6);
            if (v313[0])
            {
              if (LODWORD(v312[0]) != -1)
                ((void (*)(_BYTE *, _BYTE *))off_1E3505B90[LODWORD(v312[0])])(v351, &v303[32]);
              LODWORD(v312[0]) = -1;
              v21 = *(WTF **)&v303[16];
              if (*(_QWORD *)&v303[16])
              {
                *(_QWORD *)&v303[16] = 0;
                *(_DWORD *)&v303[24] = 0;
                WTF::fastFree(v21, v8);
              }
              v22 = *(unsigned int **)&v303[8];
              *(_QWORD *)&v303[8] = 0;
              if (v22)
              {
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                {
                  atomic_store(1u, v22);
                  *(_QWORD *)v351 = v22;
                  WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)v351);
                }
              }
            }
            goto LABEL_427;
          }
LABEL_14:
          v351[0] = 0;
          v357[72] = 0;
          goto LABEL_15;
        }
        v255 = v15;
        v256 = 0;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v258 = *((_QWORD *)a3 + 3);
      if (v258 && v255)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v258 + 16))(v258, v256);
      goto LABEL_14;
    case 0xA95:
      v121 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3);
      if (v121 <= 0xFFu)
        goto LABEL_330;
      WebKit::WebSWContextManagerConnection::setInspectable((uint64_t)v6, v121 != 0);
      goto LABEL_427;
    case 0xA96:
      v149 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WallTime>>((uint64_t *)a3, (uint64_t)v303);
      if (v303[16])
      {
        WebCore::SWContextManager::singleton(v149);
        WebCore::SWContextManager::setRegistrationLastUpdateTime();
      }
      goto LABEL_427;
    case 0xA97:
      v162 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerUpdateViaCache>>((uint64_t *)a3, (uint64_t)v303);
      if (v303[16])
      {
        WebCore::SWContextManager::singleton(v162);
        WebCore::SWContextManager::setRegistrationUpdateViaCache();
      }
      goto LABEL_427;
    case 0xA98:
      v122 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v122 >= 0x100u)
        WebKit::WebSWContextManagerConnection::setThrottleState((unsigned __int8 **)v6, v122 != 0);
      goto LABEL_427;
    case 0xA99:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v303);
      if (!v303[8])
        goto LABEL_427;
      WebKit::WebSWContextManagerConnection::setUserAgent((uint64_t)v6, (WTF::StringImpl *)v303);
      if (!v303[8])
        goto LABEL_427;
      v10 = *(WTF::StringImpl **)v303;
      *(_QWORD *)v303 = 0;
      if (!v10)
        goto LABEL_427;
      goto LABEL_252;
    case 0xA9A:
      v161 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if ((_BYTE)v8)
        WebKit::WebSWContextManagerConnection::skipWaitingCompleted((unsigned __int8 **)v6, v161);
      goto LABEL_427;
    case 0xA9B:
      v3 = (uint64_t)v6;
      v163 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v164)
        goto LABEL_294;
      v165 = v163;
      v166 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v167)
        goto LABEL_294;
      v168 = v166;
      v169 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v170)
        goto LABEL_294;
      v171 = v169;
      IPC::Decoder::decode<WebCore::ResourceRequest>((uint64_t *)a3, (uint64_t)v351);
      if (!v357[64] || (IPC::Decoder::decode<WebCore::FetchOptions>((uint64_t *)a3, (uint64_t)&v384), !v385[32]))
      {
        v303[0] = 0;
        v319 = 0;
        v6 = (uint64_t *)v3;
        goto LABEL_404;
      }
      IPC::Decoder::decode<IPC::FormDataReference>((uint64_t *)a3, &v295);
      if (!v296)
      {
        v303[0] = 0;
        v319 = 0;
        v6 = (uint64_t *)v3;
        goto LABEL_399;
      }
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v297);
      if (!v298)
      {
        v303[0] = 0;
        v319 = 0;
        v6 = (uint64_t *)v3;
        goto LABEL_396;
      }
      v173 = *((_QWORD *)a3 + 1);
      v172 = *(WTF::StringImpl **)a3;
      v174 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v173 <= v174)
      {
        v274 = 0;
        v275 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v276 = *((_QWORD *)a3 + 3);
        if (v276)
        {
          if (v173)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v276 + 16))(v276);
            v275 = *(_QWORD *)a3;
            v274 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v274 = 0;
            v275 = 0;
          }
        }
      }
      else
      {
        v175 = (unsigned __int8 *)v172 + v174;
        *((_QWORD *)a3 + 2) = v175 + 1;
        if (v172)
        {
          v176 = *v175;
          if (v176 < 2)
          {
            v177 = v176 != 0;
            IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v299);
            if (v300)
            {
              IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v301);
              v178 = v302;
              if (v302)
              {
                if (!v357[64] || !v385[32] || !v296 || !v298 || !v300)
                {
LABEL_293:
                  __break(1u);
LABEL_294:
                  v303[0] = 0;
                  v319 = 0;
                  v6 = (uint64_t *)v3;
                  goto LABEL_295;
                }
                *(_QWORD *)v303 = v165;
                *(_QWORD *)&v303[8] = v168;
                *(_QWORD *)&v303[16] = v171;
                std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v303[24], (uint64_t)v351);
                LODWORD(v312[0]) = v384;
                *(_DWORD *)((char *)v312 + 3) = *(_DWORD *)((char *)&v384 + 3);
                v179 = (WTF::StringImpl *)*((_QWORD *)&v384 + 1);
                *((_QWORD *)&v384 + 1) = 0;
                v312[1] = v179;
                *(_OWORD *)v313 = *(_OWORD *)v385;
                *(_OWORD *)&v313[16] = *(_OWORD *)&v385[16];
                v180 = v295;
                v295 = 0;
                v181 = v297;
                v297 = 0;
                v314 = v180;
                v315 = v181;
                v316 = v177;
                v182 = v299;
                v299 = 0;
                v178 = 1;
                v317 = v182;
                v318 = v301;
              }
              else
              {
                v303[0] = 0;
              }
              v319 = v178;
              v6 = (uint64_t *)v3;
              if (v300)
              {
                v213 = v299;
                v299 = 0;
                if (v213)
                {
                  if (*(_DWORD *)v213 == 2)
                    WTF::StringImpl::destroy(v213, v172);
                  else
                    *(_DWORD *)v213 -= 2;
                }
              }
LABEL_391:
              if (v298)
              {
                v279 = v297;
                v297 = 0;
                if (v279)
                {
                  if (*(_DWORD *)v279 == 2)
                    WTF::StringImpl::destroy(v279, v172);
                  else
                    *(_DWORD *)v279 -= 2;
                }
              }
LABEL_396:
              if (v296)
              {
                v280 = (WTF::RefCountedBase *)v295;
                v295 = 0;
                if (v280)
                  WTF::RefCounted<WebCore::FormData>::deref(v280);
              }
LABEL_399:
              if (v385[32])
              {
                v281 = (WTF::StringImpl *)*((_QWORD *)&v384 + 1);
                *((_QWORD *)&v384 + 1) = 0;
                if (v281)
                {
                  if (*(_DWORD *)v281 == 2)
                    WTF::StringImpl::destroy(v281, v172);
                  else
                    *(_DWORD *)v281 -= 2;
                }
              }
LABEL_404:
              std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v351);
              if (v319)
                goto LABEL_405;
LABEL_295:
              v8 = *(void **)a3;
              v214 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v215 = *((_QWORD *)a3 + 3);
              if (!v215)
                goto LABEL_427;
              if (!v214)
                goto LABEL_427;
              (*(void (**)(uint64_t, void *))(*(_QWORD *)v215 + 16))(v215, v8);
              if (!v319)
                goto LABEL_427;
LABEL_405:
              WebKit::WebSWContextManagerConnection::startFetch(v6, *(uint64_t *)v303, *(uint64_t *)&v303[8], *(uint64_t *)&v303[16], (uint64_t)&v303[24], (uint64_t)v312, &v314);
              if (v319)
              {
                v282 = v318;
                v318 = 0;
                if (v282)
                {
                  if (*(_DWORD *)v282 == 2)
                    WTF::StringImpl::destroy(v282, (WTF::StringImpl *)v8);
                  else
                    *(_DWORD *)v282 -= 2;
                }
                v283 = v317;
                v317 = 0;
                if (v283)
                {
                  if (*(_DWORD *)v283 == 2)
                    WTF::StringImpl::destroy(v283, (WTF::StringImpl *)v8);
                  else
                    *(_DWORD *)v283 -= 2;
                }
                v284 = v315;
                v315 = 0;
                if (v284)
                {
                  if (*(_DWORD *)v284 == 2)
                    WTF::StringImpl::destroy(v284, (WTF::StringImpl *)v8);
                  else
                    *(_DWORD *)v284 -= 2;
                }
                v285 = (WTF::RefCountedBase *)v314;
                v314 = 0;
                if (v285)
                  WTF::RefCounted<WebCore::FormData>::deref(v285);
                v286 = v312[1];
                v312[1] = 0;
                if (v286)
                {
                  if (*(_DWORD *)v286 == 2)
                    WTF::StringImpl::destroy(v286, (WTF::StringImpl *)v8);
                  else
                    *(_DWORD *)v286 -= 2;
                }
                v287 = v311[1];
                v311[1] = 0;
                if (v287)
                  CFRelease(v287);
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v303[24]);
              }
              goto LABEL_427;
            }
LABEL_390:
            v303[0] = 0;
            v319 = 0;
            v6 = (uint64_t *)v3;
            goto LABEL_391;
          }
LABEL_389:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v278 = *((_QWORD *)a3 + 3);
          if (v278 && v173)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v278 + 16))(v278, v172);
          goto LABEL_390;
        }
        v274 = v173;
        v275 = 0;
      }
      v173 = 0;
      v172 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v277 = *((_QWORD *)a3 + 3);
      if (v277)
      {
        if (v274)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v277 + 16))(v277, v275, v274);
          v172 = *(WTF::StringImpl **)a3;
          v173 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v173 = 0;
          v172 = 0;
        }
      }
      goto LABEL_389;
    case 0xA9C:
      v98 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)v8)
        WebKit::WebSWContextManagerConnection::terminateWorker((uint64_t)v6, v98);
      goto LABEL_427;
    case 0xA9D:
      v94 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v95)
        goto LABEL_330;
      v96 = v94;
      v97 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>((uint64_t *)a3);
      if (v97 <= 0xFFu)
        goto LABEL_330;
      WebKit::WebSWContextManagerConnection::updateAppInitiatedValue((unsigned __int8 **)v6, v96, v97 != 0);
      goto LABEL_427;
    case 0xA9E:
      IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore>>((uint64_t *)a3, (uint64_t)v303);
      if (v303[48])
        WebKit::WebSWContextManagerConnection::updatePreferencesStore((uint64_t)v6, (uint64_t *)v303);
      std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v303);
      goto LABEL_427;
    case 0xA9F:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>>((uint64_t *)a3, v303);
      if (!v304[16])
        goto LABEL_427;
      WebCore::SWContextManager::singleton(v9);
      WebCore::SWContextManager::updateRegistrationState();
      if (!v304[16])
        goto LABEL_427;
      if (!v304[8])
        goto LABEL_427;
      v10 = *(WTF::StringImpl **)&v303[32];
      *(_QWORD *)&v303[32] = 0;
      if (!v10)
        goto LABEL_427;
      goto LABEL_252;
    case 0xAA0:
      v183 = (WebCore::SWContextManager *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerState>>((uint64_t *)a3, (uint64_t)v303);
      if (v303[16])
      {
        WebCore::SWContextManager::singleton(v183);
        WebCore::SWContextManager::updateWorkerState();
      }
      goto LABEL_427;
    default:
      goto LABEL_427;
  }
}

void `non-virtual thunk to'WebKit::WebSWContextManagerConnection::didReceiveMessage(unsigned __int8 **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebSWContextManagerConnection::didReceiveMessage(this - 2, a2, a3);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v8)
    && (v9 = v7,
        result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v11))
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = result;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  }
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  WTF::URL::URL(a1 + 40, (uint64_t *)a2 + 5);
  WTF::URL::URL(a1 + 80, (uint64_t *)a2 + 10);
  v6 = *(__int128 *)((char *)a2 + 120);
  v7 = *(__int128 *)((char *)a2 + 136);
  v8 = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  *(_QWORD *)(a1 + 176) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = 0;
  *(_DWORD *)(a1 + 184) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = 0;
  *(_DWORD *)(a1 + 188) = v9;
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 192);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3505B90[v4])(&v7, result);
  *(_DWORD *)(v3 + 192) = -1;
  v5 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3505BA0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 192) = v5;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 22), a2);
  v4 = (WTF::StringImpl *)a2[10];
  a2[10] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)a2[5];
  a2[5] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  WTF::URL::URL(a2 + 16, (uint64_t *)(a3 + 16));
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>(a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection13FirePushEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__18optionalINSF_4spanIKhLm18446744073709551615EEEEEONSG_INSA_19NotificationPayloadEEEONS_17CompletionHandlerIFvbSN_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection13FirePushEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__18optionalINSF_4spanIKhLm18446744073709551615EEEEEONSG_INSA_19NotificationPayloadEEEONS_17CompletionHandlerIFvbSN_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection13FirePushEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__18optionalINSF_4spanIKhLm18446744073709551615EEEEEONSG_INSA_19NotificationPayloadEEEONS_17CompletionHandlerIFvbSN_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSN_EE4callEbSN_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3474;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection21FireNotificationEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_16NotificationDataENSA_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection21FireNotificationEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_16NotificationDataENSA_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection21FireNotificationEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_16NotificationDataENSA_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3473;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  __int128 v15;
  _BYTE v16[19];
  char v17;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, result = IPC::Decoder::decode<WebCore::BackgroundFetchInformation>(a2, (uint64_t)v14), v17))
  {
    v8 = v14[0];
    v9 = v14[1];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    v10 = *(_OWORD *)v16;
    *(_OWORD *)(a1 + 24) = v15;
    *(_OWORD *)(a1 + 40) = v10;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)&v16[15];
    *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 64) = 0;
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection24FireBackgroundFetchEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection24FireBackgroundFetchEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection24FireBackgroundFetchEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3472;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection29FireBackgroundFetchClickEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3505C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection29FireBackgroundFetchClickEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3505C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebSWContextManagerConnection29FireBackgroundFetchClickEventEN6WebKit29WebSWContextManagerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONSA_26BackgroundFetchInformationEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3471;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  void *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl **v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      if (*(_QWORD *)v13 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v13))
        {
          v14 = *(unsigned int **)(v13 + 40);
          *(_QWORD *)(v13 + 40) = 0;
          if (v14)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v10);
          v15 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        else
        {
          v17 = (WTF::StringImpl **)WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          v18 = (unsigned int *)v17[5];
          v17[5] = 0;
          if (v18)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v16);
          v19 = *v17;
          *v17 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v19 -= 2;
          }
          WTF::URL::URL((uint64_t)v17, (uint64_t *)v13);
          v20 = *(WTF::StringImpl **)(v13 + 40);
          *(_QWORD *)(v13 + 40) = 0;
          v17[5] = v20;
          v21 = *(unsigned int **)(v13 + 40);
          *(_QWORD *)(v13 + 40) = 0;
          if (v21)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v10);
          v22 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v13 == a3)
            v11 = v17;
        }
      }
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::allocateTable(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  LODWORD(v1) = a1;
  v2 = WTF::fastMalloc((WTF *)(48 * a1 + 16));
  v3 = v2 + 16;
  if ((_DWORD)v1)
  {
    v1 = v1;
    v4 = (_QWORD *)(v2 + 56);
    do
    {
      *(v4 - 5) = 0;
      WTF::URL::invalidate((WTF::URL *)(v4 - 5));
      *v4 = 0;
      v4 += 6;
      --v1;
    }
    while (v1);
  }
  return v3;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100)
    v5 = v4 >> 8;
  else
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v8 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v2 + 48 * (v5 & v3)));
    v5 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 48 * v7;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(unsigned int **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = 0;
        if (v6)
        {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 48;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

__n128 WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerClientData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v3 = WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 192 * a1[3];
  v5 = *(_WORD *)(v3 + 32);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(_WORD *)(v4 + 32) = v5;
  WTF::URL::URL(v4 + 40, (uint64_t *)(v3 + 40));
  WTF::URL::URL(v4 + 80, (uint64_t *)(v3 + 80));
  result = *(__n128 *)(v3 + 120);
  v8 = *(_OWORD *)(v3 + 136);
  v9 = *(_QWORD *)(v3 + 168);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(v3 + 152);
  *(_OWORD *)(v4 + 136) = v8;
  *(__n128 *)(v4 + 120) = result;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 168) = v9;
  v10 = *(_QWORD *)(v3 + 176);
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v4 + 176) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 184);
  *(_DWORD *)(v3 + 184) = 0;
  *(_DWORD *)(v4 + 184) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 188);
  *(_DWORD *)(v3 + 188) = 0;
  *(_DWORD *)(v4 + 188) = v10;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 192 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x1555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197820A50);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 192 * *((unsigned int *)result + 3));
    v5 = 192 * a2;
    v6 = WTF::fastMalloc((WTF *)(192 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFC0) / 0xC0;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::ServiceWorkerClientData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ServiceWorkerClientData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  if (result != a2)
  {
    v4 = a3 + 40;
    v5 = (uint64_t)result + 176;
    do
    {
      v6 = *(_OWORD *)(v5 - 176);
      v7 = *(_OWORD *)(v5 - 160);
      *(_WORD *)(v4 - 8) = *(_WORD *)(v5 - 144);
      *(_OWORD *)(v4 - 24) = v7;
      *(_OWORD *)(v4 - 40) = v6;
      WTF::URL::URL(v4, (uint64_t *)(v5 - 136));
      WTF::URL::URL(v4 + 40, (uint64_t *)(v5 - 96));
      v8 = *(_OWORD *)(v5 - 56);
      v9 = *(_OWORD *)(v5 - 24);
      v10 = *(_QWORD *)(v5 - 8);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v5 - 40);
      *(_OWORD *)(v4 + 112) = v9;
      *(_OWORD *)(v4 + 80) = v8;
      *(_QWORD *)(v4 + 136) = 0;
      *(_QWORD *)(v4 + 144) = 0;
      *(_QWORD *)(v4 + 128) = v10;
      v11 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v4 + 136) = v11;
      LODWORD(v11) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(v4 + 144) = v11;
      LODWORD(v11) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(v4 + 148) = v11;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v12);
      v14 = *(WTF::StringImpl **)(v5 - 96);
      *(_QWORD *)(v5 - 96) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v5 - 176;
      result = *(WTF::StringImpl **)(v5 - 136);
      *(_QWORD *)(v5 - 136) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      v4 += 192;
      v5 += 192;
    }
    while ((WTF::StringImpl *)(v15 + 192) != a2);
  }
  return result;
}

unsigned int *WebKit::WebSWOriginStore::addToStore(WebKit::WebSWOriginStore *this, const WebCore::SecurityOriginData *a2)
{
  WebKit::SharedStringHashStore *v2;
  const WTF::String *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v2 = (WebKit::WebSWOriginStore *)((char *)this + 24);
  WebCore::SecurityOriginData::toString(a2);
  v4 = WebCore::computeSharedStringHash((WebCore *)&v8, v3);
  WebKit::SharedStringHashStore::scheduleAddition(v2, v4);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WebKit::SharedStringHashStore::flushPendingChanges(v2);
}

unsigned int *WebKit::WebSWOriginStore::removeFromStore(WebKit::WebSWOriginStore *this, const WebCore::SecurityOriginData *a2)
{
  WebKit::SharedStringHashStore *v2;
  const WTF::String *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  v2 = (WebKit::WebSWOriginStore *)((char *)this + 24);
  WebCore::SecurityOriginData::toString(a2);
  v4 = WebCore::computeSharedStringHash((WebCore *)&v8, v3);
  WebKit::SharedStringHashStore::scheduleRemoval(v2, v4);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WebKit::SharedStringHashStore::flushPendingChanges(v2);
}

unsigned int *WebKit::WebSWOriginStore::clearStore(WebKit::WebSWOriginStore *this)
{
  return WebKit::SharedStringHashStore::clear((WebKit::WebSWOriginStore *)((char *)this + 24));
}

unsigned int *WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebSWServerConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int *result;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;

  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit21WebSWServerConnectionES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((unsigned int **)a2, (void *)a2);
    *(_DWORD *)(a2 + 8) = 0;
    v8 = *(unsigned int **)a2;
    if (*(_QWORD *)a2)
    {
      LODWORD(v8) = *(v8 - 3);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 12) = 2 * (_DWORD)v8;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v9 = *(unsigned int **)(a3 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v18 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v18, a1);
  result = (unsigned int *)v18;
  v18 = 0;
  if (result)
  {
    do
    {
      v16 = __ldaxr(result);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, result));
    if (!v17)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  if (v9)
  {
    do
    {
      v14 = __ldaxr(v9);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v9));
    if (!v15)
    {
      atomic_store(1u, v9);
      return (unsigned int *)WTF::fastFree((WTF *)v9, v12);
    }
  }
  return result;
}

void WebKit::WebSWOriginStore::sendStoreHandle(WebKit::WebSWOriginStore *this, WebKit::WebSWServerConnection *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  _BYTE v11[16];
  char v12;
  IPC::Encoder *v13;

  WebCore::SharedMemory::createHandle();
  if (v12)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = (char *)a2 + 56;
    v5 = (*(uint64_t (**)(char *))(v4 + 56))(v3);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 2686;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v13 = (IPC::Encoder *)v6;
    IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v6, (unint64_t)v11);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v13, 0);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    if (v12)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
  }
}

unsigned int **WebKit::WebSWOriginStore::unregisterSWServerConnection(unsigned int **this, WebKit::WebSWServerConnection *a2)
{
  return WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebSWServerConnection>(this + 15, a2);
}

unsigned int **WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebSWServerConnection>(unsigned int **result, _QWORD *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)result + 2) + 1;
  *((_DWORD *)result + 2) = v5;
  if (v5 > v4)
  {
    result = _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit21WebSWServerConnectionES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(result, a2);
    *((_DWORD *)v3 + 2) = 0;
    v6 = (uint64_t)*v3;
    if (*v3)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE)
        LODWORD(v6) = 0x7FFFFFFF;
    }
    *((_DWORD *)v3 + 3) = 2 * v6;
  }
  v7 = a2[1];
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
      return (unsigned int **)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)v3, v7);
  }
  return result;
}

uint64_t WebKit::WebSWOriginStore::didInvalidateSharedMemory(WebKit::WebSWOriginStore *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebSWServerConnection *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (char *)this + 120;
  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v16, (_QWORD **)this + 15);
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v11 = v2;
  v12 = v5;
  v13 = v5;
  v14 = v5;
  v15 = v3 + 8 * v4;
  result = (uint64_t)WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  v7 = v17;
  v8 = v12;
  while (v7 != v8)
  {
    v9 = *(WebKit::WebSWServerConnection **)(*(_QWORD *)v7 + 8);
    ++*((_DWORD *)v9 + 4);
    WebKit::WebSWOriginStore::sendStoreHandle(*((WebKit::WebSWOriginStore **)this + 5), v9);
    v10 = *((_DWORD *)v9 + 4);
    if (!v10)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *((_DWORD *)v9 + 4) = v10 - 1;
    result = (uint64_t)WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v16);
    v7 = v17;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebSWOriginStore::didInvalidateSharedMemory(WebKit::WebSWOriginStore *this)
{
  return WebKit::WebSWOriginStore::didInvalidateSharedMemory((WebKit::WebSWOriginStore *)((char *)this - 16));
}

void WebKit::WebSWOriginStore::~WebSWOriginStore(WebKit::WebSWOriginStore *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  WebCore::SecurityOriginData *v8;

  v3 = *((_QWORD *)this + 15);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 10) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 80));
  v6 = (WTF *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  *(_QWORD *)this = off_1E3505CD8;
  v8 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 1);
  if (v8)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  WebCore::SecurityOriginData *v8;

  v3 = *((_QWORD *)this + 15);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 10) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 80));
  v6 = (WTF *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  *(_QWORD *)this = off_1E3505CD8;
  v8 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 1);
  if (v8)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
  WTF::fastFree(this, v5);
}

void `non-virtual thunk to'WebKit::WebSWOriginStore::~WebSWOriginStore(WebKit::WebSWOriginStore *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  WebCore::SecurityOriginData *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 8) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 64));
  v6 = (WTF *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  *((_QWORD *)this - 2) = off_1E3505CD8;
  v8 = (WebCore::SecurityOriginData *)*((_QWORD *)this - 1);
  if (v8)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  WebCore::SecurityOriginData *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 8) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebSWOriginStore *)((char *)this + 64));
  v6 = (WTF *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, v5);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  *((_QWORD *)this - 2) = off_1E3505CD8;
  v8 = (WebCore::SecurityOriginData *)*((_QWORD *)this - 1);
  if (v8)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v5);
  WTF::fastFree((WebKit::WebSWOriginStore *)((char *)this - 16), v5);
}

unsigned int **_ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebKit21WebSWServerConnectionES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  unsigned int *v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int v12;

  v2 = *result;
  if (*result)
  {
    v3 = *(v2 - 1);
    if (v3)
    {
      v4 = (uint64_t *)result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        result = (unsigned int **)&v2[2 * v6];
        if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
        {
          result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v11 = *v4;
        if (*v4)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v5;
        v8 = *v4;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v9 && v9 >= 9)
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::WebSWServerConnection(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4)
{
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  WebKit::NetworkSession *v10;
  WebKit::NetworkSession *v11;
  int v12;
  uint64_t result;

  v7 = (_QWORD *)WebCore::SWServer::Connection::Connection();
  *v7 = off_1E3505D18;
  v7[7] = &unk_1E3505DC0;
  v7[8] = &unk_1E3505E10;
  v7[9] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  v8 = *(unsigned int **)(a2 + 56);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 80) = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)(a1 + 88), a4);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  v10 = (WebKit::NetworkSession *)WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1);
  if (!v10)
    return a1;
  v11 = v10;
  ++*((_DWORD *)v10 + 4);
  WebKit::NetworkSession::registerSWServerConnection(v10, (WebKit::WebSWServerConnection *)a1);
  v12 = *((_DWORD *)v11 + 4);
  if (v12)
  {
    *((_DWORD *)v11 + 4) = v12 - 1;
    return a1;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebSWServerConnection::session(WebKit::WebSWServerConnection *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 10) + 8);
  if (v1)
    v2 = v1 - 48;
  else
    v2 = 0;
  return WebKit::NetworkProcess::networkSession(*(_QWORD *)(v2 + 72), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168));
}

void WebKit::WebSWServerConnection::~WebSWServerConnection(WebKit::WebSWServerConnection *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE v28[16];
  int v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = WebKit::WebSWServerConnection::session(this);
  if (v2)
  {
    v3 = v2;
    ++*(_DWORD *)(v2 + 16);
    WebKit::NetworkSession::unregisterSWServerConnection((unsigned int **)v2, this);
    v4 = *(_DWORD *)(v3 + 16);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x197821690);
    }
    *(_DWORD *)(v3 + 16) = v4 - 1;
  }
  v5 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
  ++*v5;
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(v6);
  v8 = v7;
  v10 = v9;
  if (v6)
    v6 += 12 * *((unsigned int *)v6 - 1);
  if (v6 != v7)
  {
    do
    {
      v11 = *((_OWORD *)v8 + 1);
      v31 = *(_OWORD *)v8;
      v32 = v11;
      WebCore::SWServer::unregisterServiceWorkerClient();
      while (1)
      {
        v8 += 12;
        if (v8 == v10)
          break;
        v12 = v8[2];
        if (*v8 | v8[1] | v12)
          v13 = v12 == -1;
        else
          v13 = 1;
        if (!v13)
          goto LABEL_13;
      }
      v8 = v10;
LABEL_13:
      ;
    }
    while (v8 != v6);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 13);
  v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::begin(v14);
  v16 = v15;
  v18 = v17;
  if (v14)
    v19 = &v14[2 * *((unsigned int *)v14 - 1)];
  else
    v19 = 0;
  if (v19 != v15)
  {
    do
    {
      v28[0] = 0;
      v29 = 0;
      v27 = v16[1];
      v16[1] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 16))(v27, v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      if (v29 != -1)
        ((void (*)(char *, _BYTE *))off_1E3505E38[v29])(&v30, v28);
      while (1)
      {
        v16 += 2;
        if (v16 == v18)
          break;
        if ((unint64_t)(*v16 + 1) > 1)
          goto LABEL_32;
      }
      v16 = v18;
LABEL_32:
      ;
    }
    while (v16 != v19);
  }
  WTF::RefCounted<WebCore::SWServer>::deref(v5);
  v21 = *((_QWORD *)this + 13);
  if (v21)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v21, v20);
  v22 = *((_QWORD *)this + 12);
  if (v22)
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(v22, v20);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 11);
  v24 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v23);
    }
  }
  *((_QWORD *)this + 8) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 9, v23);
  WTF::isIntegralOrPointerType((WebKit::WebSWServerConnection *)((char *)this + 56));
  WebCore::SWServer::Connection::~Connection(this);
}

void `non-virtual thunk to'WebKit::WebSWServerConnection::~WebSWServerConnection(WebKit::WebSWServerConnection *this)
{
  WebKit::WebSWServerConnection::~WebSWServerConnection((WebKit::WebSWServerConnection *)((char *)this - 56));
}

{
  WebKit::WebSWServerConnection::~WebSWServerConnection((WebKit::WebSWServerConnection *)((char *)this - 64));
}

{
  WebKit::WebSWServerConnection::operator delete((WebKit::WebSWServerConnection *)((char *)this - 56));
}

{
  WebKit::WebSWServerConnection::operator delete((WebKit::WebSWServerConnection *)((char *)this - 64));
}

double WebKit::WebSWServerConnection::operator delete(WebKit::WebSWServerConnection *a1)
{
  uint64_t v1;
  void *v2;
  double result;

  WebKit::WebSWServerConnection::~WebSWServerConnection(a1);
  if (*(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 112) = 0;
    result = 0.0;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::rejectJobInClient(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  IPC::Encoder *v9;
  IPC::Encoder *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v21 = a2;
  v5 = (uint64_t *)(a1 + 104);
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 104), a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::take(&v20, v5, v6);
  v7 = v20;
  if (v20)
  {
    v8 = *a3;
    v9 = (IPC::Encoder *)*((_QWORD *)a3 + 1);
    if (v9)
      *(_DWORD *)v9 += 2;
    LOBYTE(v18[0]) = v8;
    v18[1] = v9;
    v19 = 1;
    (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v7 + 16))(v7, v18);
    result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v19 != -1)
      return (IPC::Encoder *)((uint64_t (*)(char *, IPC::Encoder **))off_1E3505E38[v19])(&v22, v18);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 56);
    v11 = a1 + 56;
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 2677;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v18[0] = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, &v21);
    LOBYTE(v13) = *a3;
    *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, (uint64_t *)a3 + 1);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(v11, v18, 0);
    result = v18[0];
    v18[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::resolveRegistrationJobInClient(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v13 = a2;
  v6 = a1 + 56;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2682;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v13);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode((IPC::Encoder *)v8, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v7 = a1 + 13;
  v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1[13], a2);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::take(&v20, v7, v8);
  v9 = v20;
  if (v20)
  {
    if (WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1))
    {
      v10 = *(WTF::StringImpl **)(a3 + 32);
      if (v10)
        *(_DWORD *)v10 += 2;
      v17 = v10;
      v18 = *(_OWORD *)(a3 + 40);
      v19 = *(_OWORD *)(a3 + 56);
      v11 = WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1) + 832;
      v12 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v12 = &off_1E3505EB8;
      *(_QWORD *)(v12 + 8) = v9;
      *(_BYTE *)(v12 + 16) = a4;
      v16 = v12;
      WebKit::NetworkNotificationManager::unsubscribeFromPushService(v11, (uint64_t *)&v17, 0, 0, &v16);
      v14 = v16;
      v16 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = v17;
      v17 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    else
    {
      LOBYTE(v17) = a4;
      DWORD2(v18) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (DWORD2(v18) != -1)
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3505E38[DWORD2(v18)])(&v16, &v17);
    }
  }
}

IPC::Encoder *WebKit::WebSWServerConnection::startScriptFetchInClient(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v13 = a2;
  v6 = a1 + 56;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2688;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v13);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode((IPC::Encoder *)v8, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a4;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::updateRegistrationStateInClient(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  int v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  IPC::Encoder *v27;

  v25 = a4;
  v26 = a2;
  v23 = &v26;
  v24 = a3;
  v7 = a1 + 56;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2690;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v27 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v9, &v23);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v27, 0);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
    result = WTF::fastFree(v12, v13);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v14)
    v15 = v14 - 48;
  else
    v15 = 0;
  v16 = *(_QWORD *)(v15 + 216);
  if (v16)
  {
    ++*(_DWORD *)(v16 + 16);
    v23 = &v26;
    v24 = a3;
    v25 = a4;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 + 104) + 56))(v16 + 104);
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 2719;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v27 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v18, &v23);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v16 + 104) + 32))(v16 + 104, &v27, 0);
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
      result = WTF::fastFree(v20, v21);
    }
    v22 = *(_DWORD *)(v16 + 16);
    if (v22)
    {
      *(_DWORD *)(v16 + 16) = v22 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::fireUpdateFoundEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  int v20;
  IPC::Encoder *v21;

  v4 = a1 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2675;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v21 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v21, 0);
  result = (uint64_t)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
    result = WTF::fastFree(v9, v10);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v11)
    v12 = v11 - 48;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 216);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 104);
    ++*(_DWORD *)(v13 + 16);
    v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13 + 104);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 2703;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v21 = (IPC::Encoder *)v16;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a2;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v13 + 104) + 32))(v13 + 104, &v21, 0);
    result = (uint64_t)v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
      result = WTF::fastFree(v18, v19);
    }
    v20 = *(_DWORD *)(v13 + 16);
    if (v20)
    {
      *(_DWORD *)(v13 + 16) = v20 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::setRegistrationLastUpdateTime(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  int v22;
  IPC::Encoder *v23;

  v6 = a1 + 56;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2683;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v23 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v23, 0);
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
    result = WTF::fastFree(v11, v12);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v13)
    v14 = v13 - 48;
  else
    v14 = 0;
  v15 = *(_QWORD *)(v14 + 216);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 104);
    ++*(_DWORD *)(v15 + 16);
    v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15 + 104);
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 2710;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v23 = (IPC::Encoder *)v18;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a2;
    *(double *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a3;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v15 + 104) + 32))(v15 + 104, &v23, 0);
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
      result = WTF::fastFree(v20, v21);
    }
    v22 = *(_DWORD *)(v15 + 16);
    if (v22)
    {
      *(_DWORD *)(v15 + 16) = v22 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::setRegistrationUpdateViaCache(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  int v22;
  IPC::Encoder *v23;

  v6 = a1 + 56;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2684;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v23 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v23, 0);
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
    result = WTF::fastFree(v11, v12);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v13)
    v14 = v13 - 48;
  else
    v14 = 0;
  v15 = *(_QWORD *)(v14 + 216);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 104);
    ++*(_DWORD *)(v15 + 16);
    v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15 + 104);
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 2711;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v23 = (IPC::Encoder *)v18;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a2;
    *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a3;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v15 + 104) + 32))(v15 + 104, &v23, 0);
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
      result = WTF::fastFree(v20, v21);
    }
    v22 = *(_DWORD *)(v15 + 16);
    if (v22)
    {
      *(_DWORD *)(v15 + 16) = v22 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::notifyClientsOfControllerChange(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  IPC::Encoder *v24;

  v5 = a1 + 56;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2678;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v24 = (IPC::Encoder *)v7;
  if (*a2)
    v8 = *((_DWORD *)*a2 - 3);
  else
    v8 = 0;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 4uLL, 4) = v8;
  v9 = *a2;
  if (!*a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_17:
    v11 = &v9[4 * v10];
    goto LABEL_18;
  }
  v10 = *((unsigned int *)v9 - 1);
  v11 = &v9[4 * v10];
  if (!*((_DWORD *)v9 - 3))
  {
    v12 = &v9[4 * v10];
    goto LABEL_17;
  }
  v12 = *a2;
  if ((_DWORD)v10)
  {
    v13 = 32 * v10;
    v12 = v9;
    while (1)
    {
      v14 = v12[2];
      if (*v12 | v12[1] | v14 && v14 != -1)
        break;
      v12 += 4;
      v13 -= 32;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_18:
  if (v9)
    v16 = &v9[4 * *((unsigned int *)v9 - 1)];
  else
    v16 = 0;
  while (v12 != v16)
  {
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v7, v12);
    v17 = v12 + 4;
    v12 = v11;
    if (v17 != v11)
    {
      v12 = v17;
      while (1)
      {
        v18 = v12[2];
        if (*v12 | v12[1] | v18 && v18 != -1)
          break;
        v12 += 4;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v24, 0);
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::updateWorkerStateInClient(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  int v22;
  IPC::Encoder *v23;

  v6 = a1 + 56;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2691;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v23 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v23, 0);
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
    result = WTF::fastFree(v11, v12);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v13)
    v14 = v13 - 48;
  else
    v14 = 0;
  v15 = *(_QWORD *)(v14 + 216);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 104);
    ++*(_DWORD *)(v15 + 16);
    v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15 + 104);
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 2720;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v23 = (IPC::Encoder *)v18;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 8uLL, 8) = a2;
    *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a3;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v15 + 104) + 32))(v15 + 104, &v23, 0);
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
      result = WTF::fastFree(v20, v21);
    }
    v22 = *(_DWORD *)(v15 + 16);
    if (v22)
    {
      *(_DWORD *)(v15 + 16) = v22 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::controlClient(uint64_t a1, uint64_t a2, WebCore::SWServerRegistration *this, WebCore::ResourceRequestBase *a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WebCore::SWServerRegistration *v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  uint64_t v28;
  IPC::Encoder *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::SWServer *v36;
  __int16 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __int128 v40;
  WebCore::SecurityOriginData *v41;
  const WTF::URL *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v49;
  uint64_t v50;
  char v51;
  IPC::Encoder *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int128 v64;
  __int128 v65;
  WTF::StringImpl *v66[6];
  char v67;
  __int128 v68;
  WTF::StringImpl *v69;
  BOOL v70;
  __int16 v71;
  __int16 v72;
  uint64_t v73;
  IPC::Encoder *v74;
  int v75;
  int v76;
  char v77;
  WTF::StringImpl *v78;
  char v79;
  WTF::StringImpl *v80;
  char v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a2 + 2992);
  v8 = *(_QWORD *)(a2 + 3032);
  if (v7 == 19)
    v9 = 1;
  else
    v9 = 2 * (v7 == 15);
  *(_QWORD *)&v82 = *(_QWORD *)(a2 + 3024);
  *((_QWORD *)&v82 + 1) = v8;
  v83 = a5;
  v10 = a1 + 56;
  WebCore::SWServerRegistration::data(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v12 = *(unsigned int **)(a1 + 8);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v54 = v82;
  v55 = v83;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(v10);
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 2687;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v52 = (IPC::Encoder *)v15;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v15, (uint64_t *)&v82);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode((IPC::Encoder *)v15, (uint64_t)&v59);
  v16 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v16 = &off_1E3505EE0;
  *(_QWORD *)(v16 + 16) = v12;
  *(_QWORD *)(v16 + 24) = a1;
  *(_OWORD *)(v16 + 32) = v54;
  *(_QWORD *)(v16 + 48) = v55;
  *(_QWORD *)&v54 = v16;
  *((_QWORD *)&v54 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, __int128 *, _QWORD))(*(_QWORD *)(a1 + 56) + 40))(v10, &v52, &v54, 0);
  v18 = v54;
  *(_QWORD *)&v54 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v52;
  v52 = 0;
  v20 = this;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v21, v22);
  }
  if (v81)
  {
    v23 = v80;
    v80 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  if (v79)
  {
    v24 = v78;
    v78 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (v77)
  {
    v25 = v69;
    v69 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v66[0];
  v66[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v62;
  v62 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  if (v61 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(__int128 *, __int128 *))off_1E3505E48[v61])(&v54, &v59);
  v52 = 0;
  v53 = 0;
  v28 = *(unsigned int *)(a2 + 3252);
  if ((_DWORD)v28)
  {
    if (v28 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)(8 * v28));
    LODWORD(v53) = v28;
    v52 = v29;
    v30 = *(unsigned int *)(a2 + 3252);
    if ((_DWORD)v30)
    {
      v31 = v9;
      v32 = 0;
      v33 = *(_QWORD *)(a2 + 3240);
      v34 = 8 * v30;
      do
      {
        v35 = v32;
        WebCore::SecurityOrigin::toString(*(WebCore::SecurityOrigin **)(v33 + 8 * v32++));
        *((_QWORD *)v29 + v35) = v59;
        v34 -= 8;
      }
      while (v34);
      HIDWORD(v53) = v32;
    }
    else
    {
      v31 = v9;
      LODWORD(v32) = 0;
    }
  }
  else
  {
    v31 = v9;
    LODWORD(v32) = 0;
    v29 = 0;
  }
  v36 = *(WebCore::SWServer **)(*(_QWORD *)(a1 + 24) + 8);
  WebCore::ServiceWorkerRegistrationKey::clientOrigin((WebCore::SWServerRegistration *)((char *)v20 + 24));
  v37 = WebCore::SWServer::advancedPrivacyProtectionsFromClient(v36, (const WebCore::ClientOrigin *)&v59);
  if (DWORD2(v64) != -1)
    ((void (*)(__int128 *, WTF::StringImpl **))off_1E3505E48[DWORD2(v64)])(&v54, &v62);
  DWORD2(v64) = -1;
  if (v61 != -1)
    ((void (*)(__int128 *, __int128 *))off_1E3505E48[v61])(&v54, &v59);
  v59 = v82;
  v60 = v83;
  LOBYTE(v62) = v31;
  BYTE1(v62) = 3;
  v38 = WebCore::ResourceRequestBase::url(a4);
  v39 = *(WTF::StringImpl **)v38;
  if (*(_QWORD *)v38)
    *(_DWORD *)v39 += 2;
  v63 = v39;
  v40 = *(_OWORD *)(v38 + 24);
  v64 = *(_OWORD *)(v38 + 8);
  v65 = v40;
  v66[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v66);
  v66[5] = *(WTF::StringImpl **)(a2 + 8);
  v67 = 1;
  v68 = *(_OWORD *)(a2 + 16);
  LOBYTE(v69) = 1;
  v70 = (*((_BYTE *)a4 + 148) & 4) != 0;
  v71 = v37;
  v72 = 0;
  v52 = 0;
  v53 = 0;
  v73 = 0;
  v74 = v29;
  v75 = v28;
  v76 = v32;
  LOBYTE(v54) = 0;
  v56 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v54, (uint64_t)v20 + 24);
  v41 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url(a4);
  WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v41, v42);
  v50 = *((_QWORD *)v20 + 2);
  v51 = 1;
  WebCore::ResourceRequestBase::httpUserAgent(a4);
  WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(a1, (const WTF::URL *)&v54, &v59, (uint64_t)&v50, (uint64_t)&v49, 1);
  v44 = v49;
  v49 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (v58 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3505E48[v58])(&v50, &v57);
  v58 = -1;
  if (v56 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E3505E48[v56])(&v50, &v54);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v43);
  v46 = v66[0];
  v66[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = v63;
  v63 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v45);
    else
      *(_DWORD *)v47 -= 2;
  }
  return (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v45);
}

uint64_t WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(uint64_t a1, const WTF::URL *a2, __int128 *a3, uint64_t a4, uint64_t a5, char a6)
{
  WebCore::SecurityOriginData *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  int v34;
  BOOL v35;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  void *v46;
  WTF *v47;
  uint64_t result;
  int v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WTF *v61;
  uint64_t v63;
  WTF *v64;
  int v65;
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  __int128 buf;
  uint64_t *v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v9 = (const WTF::URL *)((char *)a2 + 32);
  if ((a3[3] & 2) == 0)
    goto LABEL_92;
  WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)((char *)a3 + 40), a2);
  result = WebCore::operator==();
  v49 = result;
  if ((_DWORD)v71 != -1)
    result = ((uint64_t (*)(WTF **, __int128 *))off_1E3505E48[v71])(&v64, &buf);
  if (v49)
  {
LABEL_92:
    if (WebCore::SecurityOriginData::isNull(v9))
    {
      v50 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = "void WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(WebCore:"
                                        ":ClientOrigin &&, ServiceWorkerClientData &&, const std::optional<ServiceWorkerR"
                                        "egistrationIdentifier> &, String &&, WebCore::SWServer::IsBeingCreatedClient)";
        _os_log_fault_impl(&dword_196BCC000, v50, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 443: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
      }
      v51 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      if (v51)
        v52 = v51 - 48;
      else
        v52 = 0;
      v53 = *(_QWORD *)(*(_QWORD *)(v52 + 72) + 32);
      v64 = *(WTF **)(a1 + 32);
      *(_QWORD *)&buf = &v64;
      return IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v53, (uint64_t **)&buf, 0, 0, 0);
    }
    v11 = (uint64_t *)(a1 + 96);
    v10 = *(_QWORD **)(a1 + 96);
    v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(v10);
    v13 = v12;
    v15 = v14;
    if (v10)
      v16 = &v10[12 * *((unsigned int *)v10 - 1)];
    else
      v16 = 0;
    if (v16 == v12)
    {
LABEL_16:
      v21 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
      ++*v21;
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)&buf, v9);
      v22 = WebCore::SWServer::contextConnectionForRegistrableDomain();
      v20 = v22;
      if (v22)
        ++*(_DWORD *)(v22 + 16);
      v24 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
      v19 = a6;
    }
    else
    {
      while (!WebCore::operator==())
      {
        while (1)
        {
          v13 += 12;
          if (v13 == v15)
            break;
          v17 = v13[2];
          if (*v13 | v13[1] | v17)
            v18 = v17 == -1;
          else
            v18 = 1;
          if (!v18)
            goto LABEL_12;
        }
        v13 = v15;
LABEL_12:
        if (v13 == v16)
          goto LABEL_16;
      }
      v19 = a6;
      v20 = 0;
      v21 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
      ++*v21;
    }
    v25 = *v11;
    if (*v11
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(a1 + 96), 0), (v25 = *v11) != 0))
    {
      v26 = *(_DWORD *)(v25 - 8);
    }
    else
    {
      v26 = 0;
    }
    LODWORD(buf) = -1640531527;
    WORD2(buf) = 0;
    BYTE6(buf) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&buf, a3);
    v27 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&buf) & v26;
    v28 = (_QWORD *)(v25 + 96 * v27);
    v30 = *v28;
    v29 = v28[1];
    v31 = v28[2];
    if (*(_OWORD *)v28 == 0 && v31 == 0)
    {
LABEL_45:
      v38 = *a3;
      v28[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)v28 = v38;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v28 + 4), (uint64_t)a2);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v28 + 8), (uint64_t)v9);
      v39 = *v11;
      if (*v11)
        v40 = *(_DWORD *)(v39 - 12) + 1;
      else
        v40 = 1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v11;
      if (*v11)
        v42 = *(_DWORD *)(v41 - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(v41 - 16) + v42);
      v44 = *(unsigned int *)(v41 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_51;
      }
      else if (3 * v44 > 4 * v43)
      {
        goto LABEL_51;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(a1 + 96), (uint64_t)v28);
    }
    else
    {
      v33 = 0;
      v34 = 1;
      while (1)
      {
        v35 = v29 == *((_QWORD *)a3 + 1) && v30 == *(_QWORD *)a3;
        if (v35 && v31 == *((_QWORD *)a3 + 2))
          break;
        if (v31 == -1)
          v33 = v28;
        v27 = (v27 + v34) & v26;
        v28 = (_QWORD *)(v25 + 96 * v27);
        v30 = *v28;
        v29 = v28[1];
        v31 = v28[2];
        ++v34;
        if (*(_OWORD *)v28 == 0 && v31 == 0)
        {
          if (v33)
          {
            *v33 = 0;
            v33[1] = 0;
            v33[2] = 0;
            *((_OWORD *)v33 + 2) = 0u;
            *((_OWORD *)v33 + 3) = 0u;
            *((_OWORD *)v33 + 4) = 0u;
            *((_OWORD *)v33 + 5) = 0u;
            --*(_DWORD *)(*v11 - 16);
            v28 = v33;
          }
          goto LABEL_45;
        }
      }
    }
LABEL_51:
    if ((v19 & 1) == 0)
    {
      v45 = a3[1];
      v67 = *a3;
      v68 = v45;
      WebCore::SWServer::releaseServiceWorkerClientPendingMessage();
      v47 = v64;
      if (v66)
      {
        v61 = (WTF *)((char *)v64 + 96 * v66);
        do
        {
          *(_QWORD *)&buf = a3;
          *((_QWORD *)&buf + 1) = v47;
          v70 = (uint64_t *)((char *)v47 + 24);
          v71 = (char *)v47 + 88;
          IPC::MessageSender::send<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient>(a1 + 56, (uint64_t **)&buf);
          v47 = (WTF *)((char *)v47 + 96);
        }
        while (v47 != v61);
        v47 = v64;
        if (v66)
        {
          WTF::VectorDestructor<true,WebCore::ServiceWorkerClientPendingMessage>::destruct(v64, (WTF *)((char *)v64 + 96 * v66));
          v47 = v64;
        }
      }
      if (v47)
      {
        v64 = 0;
        v65 = 0;
        WTF::fastFree(v47, v46);
      }
    }
    WebCore::SWServer::registerServiceWorkerClient();
    if (!*(_BYTE *)(a1 + 112))
      WebKit::WebSWServerConnection::updateThrottleState((WebKit::WebSWServerConnection *)a1);
    if (v20)
    {
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      if (v54)
        v55 = v54 - 48;
      else
        v55 = 0;
      v56 = *(_QWORD *)(*(_QWORD *)(v55 + 72) + 32);
      v57 = *(WTF **)(a1 + 32);
      v58 = *(_QWORD *)(*(_QWORD *)(v20 + 128) + 8);
      if (v58)
        v59 = v58 - 48;
      else
        v59 = 0;
      v63 = *(_QWORD *)(v59 + 256);
      v64 = v57;
      LOBYTE(buf) = 1;
      *((_QWORD *)&buf + 1) = &v64;
      v70 = &v63;
      IPC::Connection::send<Messages::NetworkProcessProxy::RegisterRemoteWorkerClientProcess>(v56, (uint64_t)&buf);
      v60 = *(_DWORD *)(v20 + 16);
      if (!v60)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v20 + 16) = v60 - 1;
    }
    return (uint64_t)WTF::RefCounted<WebCore::SWServer>::deref(v21);
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::setServiceWorkerRegistration(WebKit::NetworkResourceLoader *this, WebCore::SWServerRegistration *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_15;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v5)
    goto LABEL_15;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  result = *((_QWORD *)a2 + 1);
  if (result)
  {
LABEL_15:
    do
      v8 = __ldaxr((unsigned int *)result);
    while (__stlxr(v8 + 1, (unsigned int *)result));
  }
  v9 = (unsigned int *)*((_QWORD *)this + 548);
  *((_QWORD *)this + 548) = result;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      return WTF::fastFree((WTF *)v9, a2);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::postMessageToServiceWorker(uint64_t a1, WTF::StringImpl **a2, __int128 *a3, uint64_t a4)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  WTF::StringImpl *result;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WebCore::SerializedScriptValue *v23;
  WTF::StringImpl **v24;
  WTF *v25[2];
  _BYTE *v26;
  _BYTE v27[192];
  int v28;
  _BYTE v29[192];
  int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 8);
  ++*(_DWORD *)v7;
  v22 = v7;
  WebCore::SWServer::workerByID();
  if (v21)
  {
    v29[0] = 0;
    v31 = 0;
    v24 = &v22;
    v25[0] = (WTF *)v29;
    v25[1] = (WTF *)&v21;
    v26 = v29;
    v8 = *(unsigned int *)(a4 + 32);
    if ((_DWORD)v8 == -1)
    {
      v19 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebSWServerConnection::scheduleJobInServer(v19, v20);
    }
    v23 = (WebCore::SerializedScriptValue *)&v24;
    ((void (*)(WebCore::SerializedScriptValue **, uint64_t))off_1E3505F48[v8])(&v23, a4);
    if (v31)
    {
      v24 = a2;
      v9 = *a3;
      *a3 = 0u;
      *(_OWORD *)v25 = v9;
      *(_QWORD *)&v9 = *((_QWORD *)a3 + 2);
      *((_QWORD *)a3 + 2) = 0;
      v26 = (_BYTE *)v9;
      v27[0] = 0;
      v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v29);
      v10 = WTF::fastMalloc((WTF *)0x100);
      *(_QWORD *)v10 = &off_1E3505F78;
      *(_QWORD *)(v10 + 16) = v24;
      v11 = *(_OWORD *)v25;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v10 + 24) = v11;
      *(_QWORD *)&v11 = v26;
      v26 = 0;
      *(_QWORD *)(v10 + 40) = v11;
      *(_BYTE *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 240) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>(v10 + 48, (uint64_t)v27);
      WebCore::SWServer::runServiceWorkerIfNecessary();
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (v28 != -1)
        ((void (*)(WebCore::SerializedScriptValue **, _BYTE *))off_1E3505E58[v28])(&v23, v27);
      v28 = -1;
      v13 = v25[1];
      if (v25[1])
      {
        v25[1] = 0;
        LODWORD(v26) = 0;
        WTF::fastFree(v13, v12);
      }
      v14 = (unsigned int *)v25[0];
      v25[0] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          v23 = (WebCore::SerializedScriptValue *)v14;
          WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23);
        }
      }
      if (v31 && v30 != -1)
        ((void (*)(WTF::StringImpl ***, _BYTE *))off_1E3505E58[v30])(&v24, v29);
    }
    v17 = v21;
    v21 = 0;
    if (v17)
      WTF::RefCounted<WebCore::SWServerWorker>::deref(v17);
  }
  result = v22;
  v22 = 0;
  if (result)
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServer>::deref(result);
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::scheduleJobInServer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RegistrableDomain *v8;
  WTF::StringImpl *v9;
  char PartyForCookies;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF::String *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _BYTE buf[22];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v4)
    v5 = v4 - 48;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)(a2 + 80));
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v8, (WTF::StringImpl **)buf);
  PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(v6, v7, (WTF **)buf);
  v11 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v11)
  {
LABEL_7:
    if ((PartyForCookies & 1) != 0)
      goto LABEL_8;
    goto LABEL_17;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v11, v9);
  if ((PartyForCookies & 1) != 0)
  {
LABEL_8:
    if (*(_QWORD *)(a2 + 112))
    {
      v12 = qword_1ECE71848;
      if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(WTF::String **)(a2 + 264);
        WTF::String::number(*(WTF::String **)(a2 + 256));
        WTF::String::number(v13);
        WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)buf, 45, (uint64_t *)&v30, &v29);
        v15 = v30;
        v30 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v23 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v14);
          else
            *(_DWORD *)v23 -= 2;
        }
        WTF::String::utf8();
        if (v30)
          v24 = (char *)v30 + 16;
        else
          v24 = 0;
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v24;
        _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - WebSWServerConnection::Scheduling ServiceWorker job %s in server", buf, 0x16u);
        v26 = v30;
        v30 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            WTF::fastFree(v26, v25);
          else
            --*(_DWORD *)v26;
        }
        v27 = v29;
        v29 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      v28 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
      ++*v28;
      WebCore::SWServer::scheduleJob();
      return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServer>::deref(v28);
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 264);
      buf[0] = 8;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebKit::WebSWServerConnection::rejectJobInClient(a1, v16, buf);
      result = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
LABEL_17:
  v19 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "void WebKit::WebSWServerConnection::scheduleJobInServer(ServiceWorkerJobData &&)";
    _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 353: Invalid message dispatched %{public}s", buf, 0xCu);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v20)
    v21 = v20 - 48;
  else
    v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(v21 + 72) + 32);
  v30 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)buf = &v30;
  return (WTF::StringImpl *)IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v22, (uint64_t **)buf, 0, 0, 0);
}

_DWORD *WebKit::WebSWServerConnection::scheduleUnregisterJobInServer(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t *a5)
{
  NSObject *v9;
  _DWORD *v10;
  _DWORD *Registration;
  _DWORD *v12;
  __int128 v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  __int128 v36;
  WTF::StringImpl *v37;
  _DWORD *result;
  uint64_t v39;
  _QWORD v40[2];
  int v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  uint8_t buf[16];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v9 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebSWServerConnection::Scheduling unregister ServiceWorker job in server", buf, 0xCu);
  }
  v10 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v10;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v12 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v10);
    v13 = a4[2];
    v46[1] = a4[1];
    v47 = v13;
    v46[0] = *a4;
    v40[0] = a1;
    v40[1] = a1;
    if ((_DWORD)v13 == -1)
      std::__throw_bad_variant_access[abi:sn180100]();
    v42 = v40;
    ((void (*)(uint8_t *__return_ptr, _QWORD **, _OWORD *))off_1E3505F90[v47])(buf, &v42, v46);
    if ((buf[8] & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v40[0]) = 8;
      v41 = 1;
      v14 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v40);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (v41 != -1)
        ((void (*)(_QWORD **, _QWORD *))off_1E3505E38[v41])(&v42, v40);
      goto LABEL_29;
    }
    v17 = (uint64_t *)(a1 + 104);
    v16 = *(_QWORD *)(a1 + 104);
    if (v16
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 104)),
          (v16 = *v17) != 0))
    {
      v18 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v18 = 0;
    }
    v19 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = (_QWORD *)(v16 + 16 * v22);
    v24 = *v23;
    if (*v23)
    {
      v25 = 0;
      v26 = 1;
      while (v24 != a2)
      {
        if (v24 == -1)
          v25 = v23;
        v22 = (v22 + v26) & v18;
        v23 = (_QWORD *)(v16 + 16 * v22);
        v24 = *v23;
        ++v26;
        if (!*v23)
        {
          if (v25)
          {
            *v25 = 0;
            v25[1] = 0;
            --*(_DWORD *)(*v17 - 16);
            v23 = v25;
          }
          goto LABEL_19;
        }
      }
      goto LABEL_28;
    }
LABEL_19:
    *v23 = a2;
    v27 = *a5;
    *a5 = 0;
    v28 = v23[1];
    v23[1] = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = *v17;
    if (*v17)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v17;
    if (*v17)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        goto LABEL_28;
    }
    else if (3 * v34 > 4 * v33)
    {
LABEL_28:
      v35 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
      ++*v35;
      v36 = a4[1];
      v43 = *a4;
      v44 = v36;
      v45 = a4[2];
      WebCore::SWServer::scheduleUnregisterJob();
      WTF::RefCounted<WebCore::SWServer>::deref(v35);
LABEL_29:
      v37 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v15);
        else
          *(_DWORD *)v37 -= 2;
      }
      return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v12);
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 104));
    goto LABEL_28;
  }
  WTF::RefCounted<WebCore::SWServer>::deref(v10);
  buf[0] = 0;
  v49 = 0;
  v39 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v39 + 16))(v39, buf);
  result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v49 != -1)
    return (_DWORD *)((uint64_t (*)(_QWORD *, uint8_t *))off_1E3505E38[v49])(v40, buf);
  return result;
}

_DWORD *WebKit::WebSWServerConnection::postMessageToServiceWorkerClient(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v2;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3505FB0;
  v3[1] = a1;
  v5 = v3;
  WebCore::SWServer::postMessageToServiceWorkerClient();
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return WTF::RefCounted<WebCore::SWServer>::deref(v2);
}

_DWORD *WebKit::WebSWServerConnection::matchRegistration(WebCore::SWServer::Connection *a1, const WebCore::SecurityOriginData *a2, const WTF::URL *a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::SWServerRegistration *v16;
  char v17;
  _BYTE v18[24];
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  _BYTE v28[352];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WebCore::SWServer::Connection::doRegistrationMatching(a1, a2, a3);
  if (v16)
  {
    WebCore::SWServerRegistration::data(v16);
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v28, (uint64_t)v18);
    v29 = 1;
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v6);
    if (v27)
    {
      v8 = v26;
      v26 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    if (v25)
    {
      v12 = v24;
      v24 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    if (v23)
    {
      v13 = v22;
      v22 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v7);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v7);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v19 != -1)
      ((void (*)(char *, _BYTE *))off_1E3505E48[v19])(&v17, v18);
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v16);
  }
  else
  {
    v28[0] = 0;
    v29 = 0;
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return (_DWORD *)std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v10);
  }
}

_DWORD *WebKit::WebSWServerConnection::getRegistrations(uint64_t a1, const WebCore::SecurityOriginData *a2, const WTF::URL *a3, uint64_t *a4)
{
  WebCore::SWServer *v5;
  uint64_t v6;
  void *v7;
  _BYTE v9[16];

  v5 = *(WebCore::SWServer **)(*(_QWORD *)(a1 + 24) + 8);
  ++*(_DWORD *)v5;
  WebCore::SWServer::getRegistrations(v5, a2, a3);
  v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v7);
  return WTF::RefCounted<WebCore::SWServer>::deref(v5);
}

uint64_t WebKit::WebSWServerConnection::registerServiceWorkerClient(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a3 + 16) == v6)
  {
    if (!WebCore::SecurityOriginData::isNull(this))
      return WebKit::WebSWServerConnection::registerServiceWorkerClientInternal(a1, this, (__int128 *)a3, a4, a5, 0);
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSWServerConnection::registerServiceWorkerClient(WebCore::ClientOrigin &&, Ser"
                           "viceWorkerClientData &&, const std::optional<ServiceWorkerRegistrationIdentifier> &, String &&)";
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 429: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    if (v17)
      v18 = v17 - 48;
    else
      v18 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(v18 + 72) + 32);
    v19 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSWServerConnection::registerServiceWorkerClient(WebCore::ClientOrigin &&, Ser"
                           "viceWorkerClientData &&, const std::optional<ServiceWorkerRegistrationIdentifier> &, String &&)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 428: Invalid message dispatched %{public}s", buf, 0xCu);
      v6 = *(_QWORD *)(a1 + 32);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    if (v13)
      v14 = v13 - 48;
    else
      v14 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 72) + 32);
    v19 = v6;
  }
  *(_QWORD *)buf = &v19;
  return IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v15, (uint64_t **)buf, 0, 0, 0);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2681;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v4, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::RegisterRemoteWorkerClientProcess>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 330;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::unregisterServiceWorkerClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebKit::WebSWServerConnection **v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WebKit::WebSWServerConnection *v16;
  WebKit::WebSWServerConnection *v17;
  unsigned int v18;
  unsigned int v19;
  WebKit::WebSWServerConnection *v20;
  WebKit::WebSWServerConnection *v21;
  WebKit::WebSWServerConnection *v22;
  WebKit::WebSWServerConnection *v23;
  WebKit::WebSWServerConnection *v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  WTF::StringImpl *v49;
  IPC::Encoder *v50;
  __int128 v51;
  __int128 v52;
  _BYTE buf[24];
  int v54;
  _BYTE v55[24];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (a2[2] != v3)
  {
    v42 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSWServerConnection::unregisterServiceWorkerClient(const ScriptExecutionContextIdentifier &)";
      _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerConnection.cpp 471: Invalid message dispatched %{public}s", buf, 0xCu);
      v3 = *(_QWORD *)(a1 + 32);
    }
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    if (v43)
      v44 = v43 - 48;
    else
      v44 = 0;
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 72) + 32);
    v48[0] = v3;
    *(_QWORD *)buf = v48;
    return IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v45, (uint64_t **)buf, 0, 0, 0);
  }
  v5 = (WebKit::WebSWServerConnection **)(a1 + 96);
  result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 96), a2);
  v7 = result;
  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
    v8 += 96 * *(unsigned int *)(v8 - 4);
  if (v8 == result)
    return result;
  buf[0] = 0;
  v54 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, result + 32);
  v55[0] = 0;
  v56 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, v7 + 64);
  v9 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v9;
  v10 = *((_OWORD *)a2 + 1);
  v51 = *(_OWORD *)a2;
  v52 = v10;
  WebCore::SWServer::unregisterServiceWorkerClient();
  WTF::RefCounted<WebCore::SWServer>::deref(v9);
  v11 = *(_QWORD *)(a1 + 96);
  if (v11)
  {
    v12 = v11 + 96 * *(unsigned int *)(v11 - 4);
    if (v12 != v7)
      goto LABEL_7;
  }
  else if (v7)
  {
    v12 = 0;
LABEL_7:
    if (v12 != v7)
    {
      *(_QWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = -1;
      v13 = *(unsigned int *)(v7 + 88);
      if ((_DWORD)v13 != -1)
        ((void (*)(_QWORD *, uint64_t))off_1E3505E48[v13])(v48, v7 + 64);
      v14 = -1;
      *(_DWORD *)(v7 + 88) = -1;
      v15 = *(unsigned int *)(v7 + 56);
      if ((_DWORD)v15 != -1)
        ((void (*)(_QWORD *, uint64_t))off_1E3505E48[v15])(v48, v7 + 32);
      *(_DWORD *)(v7 + 56) = -1;
      ++*((_DWORD *)*v5 - 4);
      v16 = *v5;
      if (*v5)
        v14 = *((_DWORD *)v16 - 3) - 1;
      *((_DWORD *)v16 - 3) = v14;
      v17 = *v5;
      if (*v5)
      {
        v18 = 6 * *((_DWORD *)v17 - 3);
        v19 = *((_DWORD *)v17 - 1);
        if (v18 < v19 && v19 >= 9)
          WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash((uint64_t *)(a1 + 96), v19 >> 1, 0);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 112))
    WebKit::WebSWServerConnection::updateThrottleState((WebKit::WebSWServerConnection *)a1);
  v20 = *v5;
  v21 = (WebKit::WebSWServerConnection *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(*v5);
  v22 = v21;
  v24 = v23;
  if (v20)
    v20 = (WebKit::WebSWServerConnection *)((char *)v20 + 96 * *((unsigned int *)v20 - 1));
  if (v20 == v21)
  {
LABEL_32:
    WebCore::RegistrableDomain::RegistrableDomain(&v49, (const WebCore::SecurityOriginData *)v55);
    if ((WebKit::WebSWServerConnection::hasMatchingClient(*v5, (const WebCore::RegistrableDomain *)&v49) & 1) == 0)
    {
      v28 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
      ++*v28;
      v29 = WebCore::SWServer::contextConnectionForRegistrableDomain();
      if (v29)
      {
        v30 = v29;
        ++*(_DWORD *)(v29 + 16);
        WTF::RefCounted<WebCore::SWServer>::deref(v28);
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
        if (v31)
          v32 = v31 - 48;
        else
          v32 = 0;
        v33 = *(_QWORD *)(*(_QWORD *)(v32 + 72) + 32);
        v34 = *(_QWORD *)(a1 + 32);
        v35 = *(_QWORD *)(*(_QWORD *)(v30 + 128) + 8);
        if (v35)
          v36 = v35 - 48;
        else
          v36 = 0;
        v46 = *(_QWORD *)(v36 + 256);
        v47 = v34;
        LOBYTE(v48[0]) = 1;
        v48[1] = &v47;
        v48[2] = &v46;
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 349;
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        v50 = (IPC::Encoder *)v37;
        IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v37, (uint64_t)v48);
        IPC::Connection::sendMessageImpl(v33, (uint64_t *)&v50, 0, 0);
        v38 = v50;
        v50 = 0;
        if (v38)
        {
          IPC::Encoder::~Encoder(v38, v27);
          WTF::fastFree(v39, v40);
        }
        v41 = *(_DWORD *)(v30 + 16);
        if (!v41)
        {
          __break(0xC471u);
          JUMPOUT(0x197824710);
        }
        *(_DWORD *)(v30 + 16) = v41 - 1;
      }
      else
      {
        WTF::RefCounted<WebCore::SWServer>::deref(v28);
      }
    }
    result = (uint64_t)v49;
    v49 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    while (1)
    {
      result = WebCore::operator==();
      if ((result & 1) != 0)
        break;
      while (1)
      {
        v22 = (WebKit::WebSWServerConnection *)((char *)v22 + 96);
        if (v22 == v24)
          break;
        v25 = *((_QWORD *)v22 + 2);
        if (*(_QWORD *)v22 | *((_QWORD *)v22 + 1) | v25)
          v26 = v25 == -1;
        else
          v26 = 1;
        if (!v26)
          goto LABEL_29;
      }
      v22 = v24;
LABEL_29:
      if (v22 == v20)
        goto LABEL_32;
    }
  }
  if (v56 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E3505E48[v56])(v48, v55);
  v56 = -1;
  if (v54 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_1E3505E48[v54])(v48, buf);
  return result;
}

uint64_t WebKit::WebSWServerConnection::hasMatchingClient(WebKit::WebSWServerConnection *this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v3;
  WebKit::WebSWServerConnection *v4;
  WebKit::WebSWServerConnection *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebSWServerConnection *v9;
  uint64_t result;
  WebKit::WebSWServerConnection *v11;
  uint64_t v12;

  if (!this)
  {
    v5 = 0;
    LODWORD(v3) = 0;
    goto LABEL_13;
  }
  v3 = *((unsigned int *)this - 1);
  v4 = (WebKit::WebSWServerConnection *)((char *)this + 96 * v3);
  if (!*((_DWORD *)this - 3))
  {
    v5 = (WebKit::WebSWServerConnection *)((char *)this + 96 * v3);
LABEL_13:
    v4 = (WebKit::WebSWServerConnection *)((char *)this + 96 * v3);
    goto LABEL_14;
  }
  v5 = this;
  if ((_DWORD)v3)
  {
    v6 = 96 * v3;
    v5 = this;
    while (1)
    {
      v7 = *((_QWORD *)v5 + 2);
      if (*(_QWORD *)v5 | *((_QWORD *)v5 + 1) | v7 && v7 != -1)
        break;
      v5 = (WebKit::WebSWServerConnection *)((char *)v5 + 96);
      v6 -= 96;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_14:
  if (this)
    v9 = (WebKit::WebSWServerConnection *)((char *)this + 96 * *((unsigned int *)this - 1));
  else
    v9 = 0;
  if (v9 == v5)
    return 0;
  while (1)
  {
    result = WebCore::RegistrableDomain::matches(a2, (WebKit::WebSWServerConnection *)((char *)v5 + 64));
    if ((result & 1) != 0)
      return 1;
    v11 = (WebKit::WebSWServerConnection *)((char *)v5 + 96);
    v5 = v4;
    if (v11 != v4)
    {
      v5 = v11;
      while (1)
      {
        v12 = *((_QWORD *)v5 + 2);
        if (*(_QWORD *)v5 | *((_QWORD *)v5 + 1) | v12 && v12 != -1)
          break;
        v5 = (WebKit::WebSWServerConnection *)((char *)v5 + 96);
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
    if (v5 == v9)
      return result;
  }
}

uint64_t WebKit::WebSWServerConnection::computeThrottleState(WebKit::WebSWServerConnection *this, const WebCore::RegistrableDomain *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  ++*(_DWORD *)this;
  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    v7 = 0;
    v5 = 0;
LABEL_10:
    v6 = (_QWORD *)(v4 + 16 * v5);
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = (_QWORD *)(v4 + 16 * v5);
    goto LABEL_10;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 3);
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 3);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v4)
    v9 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v9 = 0;
  if (v9 == v7)
  {
LABEL_23:
    v12 = 1;
  }
  else
  {
    while (1)
    {
      v10 = v7[1];
      if (!*(_BYTE *)(v10 + 112)
        && (WebKit::WebSWServerConnection::hasMatchingClient(*(WebKit::WebSWServerConnection **)(v10 + 96), a2) & 1) != 0)
      {
        break;
      }
      v11 = v7 + 2;
      v7 = v6;
      if (v11 != v6)
      {
        v7 = v11;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
      if (v7 == v9)
        goto LABEL_23;
    }
    v12 = 0;
  }
  WTF::RefCounted<WebCore::SWServer>::deref(this);
  return v12;
}

_DWORD *WebKit::WebSWServerConnection::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _DWORD *v7;
  _DWORD *Registration;
  _DWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *result;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  char v37;
  _BYTE v38[24];
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v7;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v9 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    if (WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1))
    {
      v10 = WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)a1) + 832;
      v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 13);
      if (v11)
        *(_DWORD *)v11 += 2;
      v34 = v11;
      v12 = *((_OWORD *)v9 + 8);
      v35 = *((_OWORD *)v9 + 7);
      v36 = v12;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      v13 = *(unsigned int **)(a1 + 8);
      if (v13)
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      v15 = *a4;
      *a4 = 0;
      v30 = (WTF *)v13;
      v31 = v15;
      WebCore::SWServerRegistration::data((WebCore::SWServerRegistration *)v9);
      WebCore::RegistrableDomain::RegistrableDomain(&v32, (const WTF::URL *)&v41);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v16 = &off_1E3505FD8;
      v16[1] = v30;
      v16[2] = v31;
      v17 = v32;
      v32 = 0;
      v16[3] = v17;
      v33 = v16;
      WebKit::NetworkNotificationManager::subscribeToPushService(v10, (uint64_t)&v34, a3, (uint64_t *)&v33);
      v19 = (uint64_t)v33;
      v33 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v20 = v32;
      v32 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (v47)
      {
        v22 = v46;
        v46 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v18);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      if (v45)
      {
        v23 = v44;
        v44 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v18);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      if (v43)
      {
        v24 = v42;
        v42 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v18);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      v25 = v41;
      v41 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v18);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v40;
      v40 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v18);
        else
          *(_DWORD *)v26 -= 2;
      }
      if (v39 != -1)
        ((void (*)(char *, _BYTE *))off_1E3505E48[v39])(&v37, v38);
      v27 = v34;
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v18);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v38[0] = 8;
      LODWORD(v41) = 1;
      v21 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, v38);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if ((_DWORD)v41 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3505E68[v41])(&v34, v38);
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v9);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v38[0] = 8;
    LODWORD(v41) = 1;
    v29 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 16))(v29, v38);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if ((_DWORD)v41 != -1)
      return (_DWORD *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E3505E68[v41])(&v34, v38);
  }
  return result;
}

