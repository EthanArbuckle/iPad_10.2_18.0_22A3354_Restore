void sub_19722EAB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(IPC::Connection &, const Strin"
                           "g &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (Vector<String> &&"
                           ", Vector<SandboxExtension::Handle> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 167: Invalid message dispatched %s", buf, 0xCu);
    }
    goto LABEL_10;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    *(_OWORD *)buf = 0uLL;
    v21 = 0;
    v22 = 0;
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v16 + 16))(v16, buf, &v21);
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v19);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) <= 0xFFu)
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(IPC::Connection &, const Strin"
                           "g &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (Vector<String> &&"
                           ", Vector<SandboxExtension::Handle> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 174: Invalid message dispatched %s", buf, 0xCu);
    }
LABEL_10:
    *((_BYTE *)a2 + 98) = 1;
    *(_OWORD *)buf = 0uLL;
    v21 = 0;
    v22 = 0;
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v16 + 16))(v16, buf, &v21);
    goto LABEL_11;
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v14 = off_1E34CA9E0;
  v14[1] = a1;
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a7;
  *(_QWORD *)buf = v14;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19722ED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::getPasteboardStringForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  unsigned __int16 v14;
  _QWORD *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  NSObject *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint8_t v21[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v14 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
    if (v14 < 0x100u || v14 != 1)
    {
      *(_QWORD *)v21 = 0;
      v17 = *a7;
      *a7 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 16))(v17, v21);
      goto LABEL_12;
    }
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) > 0xFFu)
    {
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v15 = off_1E34CAA08;
      v15[1] = a7;
      v15[2] = a3;
      v15[3] = a4;
      *(_QWORD *)v21 = v15;
      WebCore::PlatformPasteboard::performAsDataOwner();
      result = *(WTF::StringImpl **)v21;
      *(_QWORD *)v21 = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      return result;
    }
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::getPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 204: Invalid message dispatched %s", v21, 0xCu);
    }
  }
  else
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::getPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 198: Invalid message dispatched %s", v21, 0xCu);
    }
  }
  *((_BYTE *)a2 + 98) = 1;
  *(_QWORD *)v21 = 0;
  v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 16))(v17, v21);
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = *(WTF::StringImpl **)v21;
  *(_QWORD *)v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19722F018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v11);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardStringsForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  unsigned __int16 v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v21) = 136315138;
      *(_QWORD *)((char *)&v21 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardStringsForType(IPC::Connection &, co"
                                      "nst String &, const String &, std::optional<PageIdentifier>, CompletionHandler<voi"
                                      "d (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 213: Invalid message dispatched %s", (uint8_t *)&v21, 0xCu);
    }
    goto LABEL_11;
  }
  v14 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v14 < 0x100u || v14 != 1)
  {
    v21 = 0uLL;
    v17 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, &v21);
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v19);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) <= 0xFFu)
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v21) = 136315138;
      *(_QWORD *)((char *)&v21 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardStringsForType(IPC::Connection &, co"
                                      "nst String &, const String &, std::optional<PageIdentifier>, CompletionHandler<voi"
                                      "d (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 219: Invalid message dispatched %s", (uint8_t *)&v21, 0xCu);
    }
LABEL_11:
    *((_BYTE *)a2 + 98) = 1;
    v21 = 0uLL;
    v17 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, &v21);
    goto LABEL_12;
  }
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = off_1E34CAA30;
  v15[1] = a7;
  v15[2] = a3;
  v15[3] = a4;
  *(_QWORD *)&v21 = v15;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = v21;
  *(_QWORD *)&v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19722F2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::getPasteboardBufferForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  unsigned __int16 v14;
  _QWORD *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  unsigned int *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  __int128 v23;
  unsigned int *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v23) = 136315138;
      *(_QWORD *)((char *)&v23 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardBufferForType(IPC::Connection &, con"
                                      "st String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void"
                                      " (WebCore::PasteboardBuffer &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 228: Invalid message dispatched %s", (uint8_t *)&v23, 0xCu);
    }
LABEL_11:
    *((_BYTE *)a2 + 98) = 1;
    v23 = 0uLL;
    v24 = 0;
    v17 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, &v23);
    goto LABEL_12;
  }
  v14 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v14 >= 0x100u && v14 == 1)
  {
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) > 0xFFu)
    {
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v15 = off_1E34CAA58;
      v15[1] = a3;
      v15[2] = a4;
      v15[3] = a7;
      *(_QWORD *)&v23 = v15;
      WebCore::PlatformPasteboard::performAsDataOwner();
      result = (WTF::StringImpl *)v23;
      *(_QWORD *)&v23 = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      return result;
    }
    v22 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v23) = 136315138;
      *(_QWORD *)((char *)&v23 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardBufferForType(IPC::Connection &, con"
                                      "st String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void"
                                      " (WebCore::PasteboardBuffer &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 234: Invalid message dispatched %s", (uint8_t *)&v23, 0xCu);
    }
    goto LABEL_11;
  }
  v23 = 0uLL;
  v24 = 0;
  v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, &v23);
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v20 = v24;
  v24 = 0;
  if (v20)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v19);
  v21 = (WTF::StringImpl *)*((_QWORD *)&v23 + 1);
  *((_QWORD *)&v23 + 1) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (WTF::StringImpl *)v23;
  *(_QWORD *)&v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19722F5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, unsigned int *a11)
{
  uint64_t v11;
  void *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, v13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardChangeCount(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  if (!v9 || !*(_DWORD *)(v9 + 4))
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)&v15[4] = "void WebKit::WebPasteboardProxy::getPasteboardChangeCount(IPC::Connection &, const String &, "
                           "std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 244: Invalid message dispatched %s", v15, 0xCu);
    }
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v9, a4, a5, 0) <= 0xFFu)
  {
    v14 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)&v15[4] = "void WebKit::WebPasteboardProxy::getPasteboardChangeCount(IPC::Connection &, const String &, "
                           "std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 247: Invalid message dispatched %s", v15, 0xCu);
    }
LABEL_8:
    *((_BYTE *)a2 + 98) = 1;
    v13 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34CAA80;
  v10[1] = a6;
  v10[2] = a3;
  *(_QWORD *)v15 = v10;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v15;
  *(_QWORD *)v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19722F85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPasteboardProxy::getPasteboardColor(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  unsigned __int16 v12;
  uint64_t v14;
  unsigned int *result;
  void *v16;
  unsigned int v17;
  BOOL v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  unsigned int v22;
  uint8_t v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v12 < 0x100u || v12 != 1)
  {
    *(_QWORD *)v23 = 0;
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 16))(v14, v23);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if ((*(_QWORD *)v23 & 0x8000000000000) == 0)
      return result;
    result = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(result);
      v18 = --v17 == 0;
    }
    while (__stlxr(v17, result));
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)&v23[4] = "void WebKit::WebPasteboardProxy::getPasteboardColor(IPC::Connection &, const String &, std::o"
                           "ptional<PageIdentifier>, CompletionHandler<void (WebCore::Color &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 260: Invalid message dispatched %s", v23, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    *(_QWORD *)v23 = 0;
    v21 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v21 + 16))(v21, v23);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if ((*(_QWORD *)v23 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFLL);
      do
      {
        v22 = __ldaxr(result);
        v18 = --v22 == 0;
      }
      while (__stlxr(v22, result));
LABEL_8:
      if (v18)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v16);
      }
    }
  }
  else
  {
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v19 = off_1E34CAAA8;
    v19[1] = a6;
    v19[2] = a3;
    *(_QWORD *)v23 = v19;
    WebCore::PlatformPasteboard::performAsDataOwner();
    result = *(unsigned int **)v23;
    *(_QWORD *)v23 = 0;
    if (result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19722FAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if ((a9 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::getPasteboardURL(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, WTF::RefCountedBase *a6)
{
  unsigned __int16 v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _QWORD *v16;
  NSObject *v17;
  uint8_t v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v12 < 0x100u || v12 != 1)
  {
    *(_QWORD *)v18 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a6, (uint64_t)v18);
LABEL_6:
    result = *(WTF::StringImpl **)v18;
    *(_QWORD *)v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v18[4] = "void WebKit::WebPasteboardProxy::getPasteboardURL(IPC::Connection &, const String &, std::opt"
                           "ional<PageIdentifier>, CompletionHandler<void (const String &)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 273: Invalid message dispatched %s", v18, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    *(_QWORD *)v18 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a6, (uint64_t)v18);
    goto LABEL_6;
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = off_1E34CAAD0;
  v16[1] = a6;
  v16[2] = a3;
  *(_QWORD *)v18 = v16;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(WTF::StringImpl **)v18;
  *(_QWORD *)v18 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19722FCE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPasteboardProxy::addPasteboardTypes(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint8_t v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)&v22[4] = "void WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 282: Invalid message dispatched %s", v22, 0xCu);
    }
    goto LABEL_16;
  }
  v13 = *((unsigned int *)a4 + 3);
  if ((_DWORD)v13)
  {
    v14 = *a4;
    v15 = 8 * v13;
    while (*(_QWORD *)v14 && *(_DWORD *)(*(_QWORD *)v14 + 4))
    {
      v14 += 8;
      v15 -= 8;
      if (!v15)
        goto LABEL_8;
    }
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)&v22[4] = "void WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 285: Invalid message dispatched %s", v22, 0xCu);
    }
    goto LABEL_16;
  }
LABEL_8:
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) <= 0xFFu)
  {
    v21 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)&v22[4] = "void WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 288: Invalid message dispatched %s", v22, 0xCu);
    }
LABEL_16:
    *((_BYTE *)a2 + 98) = 1;
    v20 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v16 = off_1E34CAAF8;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a7;
  *(_QWORD *)v22 = v16;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v22;
  *(_QWORD *)v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19722FFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardTypes(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint8_t v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)&v22[4] = "void WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 300: Invalid message dispatched %s", v22, 0xCu);
    }
    goto LABEL_16;
  }
  v13 = *((unsigned int *)a4 + 3);
  if ((_DWORD)v13)
  {
    v14 = *a4;
    v15 = 8 * v13;
    while (*(_QWORD *)v14 && *(_DWORD *)(*(_QWORD *)v14 + 4))
    {
      v14 += 8;
      v15 -= 8;
      if (!v15)
        goto LABEL_8;
    }
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)&v22[4] = "void WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 303: Invalid message dispatched %s", v22, 0xCu);
    }
    goto LABEL_16;
  }
LABEL_8:
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) <= 0xFFu)
  {
    v21 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v22 = 136315138;
      *(_QWORD *)&v22[4] = "void WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &, const String &, const "
                           "Vector<String> &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 306: Invalid message dispatched %s", v22, 0xCu);
    }
LABEL_16:
    *((_BYTE *)a2 + 98) = 1;
    v20 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v16 = off_1E34CAB20;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a7;
  *(_QWORD *)v22 = v16;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v22;
  *(_QWORD *)v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1972302C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPasteboardProxy::setPasteboardURL(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint8_t v25[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!*a4 || !*(_DWORD *)(*a4 + 4))
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = "void WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &, const PasteboardURL &, c"
                           "onst String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 318: Invalid message dispatched %s", v25, 0xCu);
    }
    goto LABEL_13;
  }
  v14 = WebKit::WebPasteboardProxy::webProcessProxyForConnection(a1, a2);
  if (!v14)
  {
    v23 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = "void WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &, const PasteboardURL &, c"
                           "onst String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 321: Invalid message dispatched %s", v25, 0xCu);
    }
LABEL_13:
    *((_BYTE *)a2 + 98) = 1;
    v20 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v15 = (unsigned int *)(v14 + 16);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  if ((*(_BYTE *)(a3 + 8) & 1) != 0 && WebKit::WebProcessProxy::checkURLReceivedFromWebProcess(v14, a3, 0))
  {
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a4, a5, a6, 1) > 0xFFu)
    {
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v17 = off_1E34CAB48;
      v17[1] = a4;
      v17[2] = a3;
      v17[3] = a1;
      v17[4] = a2;
      v17[5] = a7;
      *(_QWORD *)v25 = v17;
      WebCore::PlatformPasteboard::performAsDataOwner();
      v18 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
    }
    v24 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = "void WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &, const PasteboardURL &, c"
                           "onst String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 330: Invalid message dispatched %s", v25, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v22 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 0);
  }
  else
  {
    v22 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
}

void sub_19723061C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardColor(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v10;
  _QWORD *v13;
  uint64_t result;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  if (!v10 || !*(_DWORD *)(v10 + 4))
  {
    v15 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v18[4] = "void WebKit::WebPasteboardProxy::setPasteboardColor(IPC::Connection &, const String &, const "
                           "WebCore::Color &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 342: Invalid message dispatched %s", v18, 0xCu);
    }
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) <= 0xFFu)
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v18[4] = "void WebKit::WebPasteboardProxy::setPasteboardColor(IPC::Connection &, const String &, const "
                           "WebCore::Color &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 345: Invalid message dispatched %s", v18, 0xCu);
    }
LABEL_8:
    *((_BYTE *)a2 + 98) = 1;
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v13 = off_1E34CAB70;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a7;
  *(_QWORD *)v18 = v13;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v18;
  *(_QWORD *)v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197230880(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardStringForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v11;
  _QWORD *v15;
  uint64_t result;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t v21[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = *a3;
  if (!v11 || !*(_DWORD *)(v11 + 4))
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 357: Invalid message dispatched %s", v21, 0xCu);
    }
    goto LABEL_13;
  }
  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 358: Invalid message dispatched %s", v21, 0xCu);
    }
    goto LABEL_13;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v11, a6, a7, 1) <= 0xFFu)
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &, const String &"
                           ", const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 361: Invalid message dispatched %s", v21, 0xCu);
    }
LABEL_13:
    *((_BYTE *)a2 + 98) = 1;
    v19 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v15 = off_1E34CAB98;
  v15[1] = a3;
  v15[2] = a5;
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = a8;
  *(_QWORD *)v21 = v15;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v21;
  *(_QWORD *)v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197230B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t (*v14)(void);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    v15 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18[0]) = 136315138;
      *(_QWORD *)((char *)v18 + 4) = "void WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(IPC::Connectio"
                                     "n &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 377: Invalid message dispatched %s", (uint8_t *)v18, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    v14 = *(uint64_t (**)(void))(*(_QWORD *)v17 + 8);
  }
  else
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34CABC0;
    v12[1] = a6;
    v12[2] = a3;
    v18[0] = v12;
    WebCore::PlatformPasteboard::performAsDataOwner();
    result = v18[0];
    v18[0] = 0;
    if (!result)
      return result;
    v14 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
  }
  return v14();
}

void sub_197230D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::urlStringSuitableForLoading(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  unsigned __int16 v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *result;
  NSObject *v19;
  WTF::StringImpl *v20;
  uint8_t buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = WebKit::WebPasteboardProxy::accessType(a1, a2, a3);
  if (v12 < 0x100u || v12 != 1)
  {
    v20 = 0;
    *(_QWORD *)buf = 0;
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint8_t *, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, buf, &v20);
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::urlStringSuitableForLoading(IPC::Connection &, const String "
                           "&, std::optional<PageIdentifier>, CompletionHandler<void (String &&, String &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 390: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v20 = 0;
    *(_QWORD *)buf = 0;
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint8_t *, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, buf, &v20);
    goto LABEL_6;
  }
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = off_1E34CABE8;
  v17[1] = a3;
  v17[2] = a6;
  *(_QWORD *)buf = v17;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197230FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::setPasteboardBufferForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v11;
  _QWORD *v15;
  uint64_t result;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t v21[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = *a3;
  if (!v11 || !*(_DWORD *)(v11 + 4))
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &, const String &"
                           ", const String &, RefPtr<SharedBuffer> &&, std::optional<PageIdentifier>, CompletionHandler<v"
                           "oid (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 401: Invalid message dispatched %s", v21, 0xCu);
    }
    goto LABEL_13;
  }
  if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &, const String &"
                           ", const String &, RefPtr<SharedBuffer> &&, std::optional<PageIdentifier>, CompletionHandler<v"
                           "oid (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 402: Invalid message dispatched %s", v21, 0xCu);
    }
    goto LABEL_13;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v11, a6, a7, 1) <= 0xFFu)
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = "void WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &, const String &"
                           ", const String &, RefPtr<SharedBuffer> &&, std::optional<PageIdentifier>, CompletionHandler<v"
                           "oid (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 405: Invalid message dispatched %s", v21, 0xCu);
    }
LABEL_13:
    *((_BYTE *)a2 + 98) = 1;
    v19 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v15 = off_1E34CAC10;
  v15[1] = a3;
  v15[2] = a5;
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = a8;
  *(_QWORD *)v21 = v15;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v21;
  *(_QWORD *)v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1972312BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getNumberOfFiles(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t (*v14)(void);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    v15 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18[0]) = 136315138;
      *(_QWORD *)((char *)v18 + 4) = "void WebKit::WebPasteboardProxy::getNumberOfFiles(IPC::Connection &, const String &"
                                     ", std::optional<PageIdentifier>, CompletionHandler<void (uint64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 426: Invalid message dispatched %s", (uint8_t *)v18, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    v14 = *(uint64_t (**)(void))(*(_QWORD *)v17 + 8);
  }
  else
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34CAC38;
    v12[1] = a6;
    v12[2] = a3;
    v18[0] = v12;
    WebCore::PlatformPasteboard::performAsDataOwner();
    result = v18[0];
    v18[0] = 0;
    if (!result)
      return result;
    v14 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
  }
  return v14();
}

void sub_1972314D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, _QWORD *a4, uint64_t a5, char a6, uint64_t *a7)
{
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*a4)
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v20) = 136315138;
      *(_QWORD *)((char *)&v20 + 4) = "void WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(IPC::Connection &, "
                                      "const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<v"
                                      "oid (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 435: Invalid message dispatched %s", (uint8_t *)&v20, 0xCu);
    }
    goto LABEL_11;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    v20 = 0uLL;
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, &v20);
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a5, a6, 0) <= 0xFFu)
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v20) = 136315138;
      *(_QWORD *)((char *)&v20 + 4) = "void WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(IPC::Connection &, "
                                      "const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<v"
                                      "oid (Vector<String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 441: Invalid message dispatched %s", (uint8_t *)&v20, 0xCu);
    }
LABEL_11:
    *((_BYTE *)a2 + 98) = 1;
    v20 = 0uLL;
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, &v20);
    goto LABEL_7;
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E34CAC60;
  v14[1] = a7;
  v14[2] = a3;
  v14[3] = a4;
  *(_QWORD *)&v20 = v14;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = v20;
  *(_QWORD *)&v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197231758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::writeCustomData(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v10;
  _QWORD *v13;
  uint64_t result;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = *a4;
  if (!*a4 || !*(_DWORD *)(v10 + 4))
  {
    v15 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v18[4] = "void WebKit::WebPasteboardProxy::writeCustomData(IPC::Connection &, const Vector<PasteboardCu"
                           "stomData> &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 450: Invalid message dispatched %s", v18, 0xCu);
    }
    goto LABEL_8;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v10, a5, a6, 1) <= 0xFFu)
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v18[4] = "void WebKit::WebPasteboardProxy::writeCustomData(IPC::Connection &, const Vector<PasteboardCu"
                           "stomData> &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (int64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 453: Invalid message dispatched %s", v18, 0xCu);
    }
LABEL_8:
    *((_BYTE *)a2 + 98) = 1;
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v13 = off_1E34CAC88;
  v13[1] = a4;
  v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a7;
  *(_QWORD *)v18 = v13;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)v18;
  *(_QWORD *)v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197231998(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::allPasteboardItemInfo(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t buf[16];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = a4;
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, (WTF::StringImpl **)a3) <= 0xFFu)
  {
    buf[0] = 0;
    v20 = 0;
    v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 16))(v15, buf);
  }
  else
  {
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, *a3, a5, a6, 0) > 0xFFu)
    {
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v13 = off_1E34CACB0;
      v13[1] = a7;
      v13[2] = a3;
      v13[3] = &v18;
      *(_QWORD *)buf = v13;
      WebCore::PlatformPasteboard::performAsDataOwner();
      result = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::allPasteboardItemInfo(IPC::Connection &, const String &, int"
                           "64_t, std::optional<PageIdentifier>, CompletionHandler<void (std::optional<Vector<PasteboardI"
                           "temInfo>> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 469: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    buf[0] = 0;
    v20 = 0;
    v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 16))(v15, buf);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v20)
    return WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v16);
  return result;
}

void sub_197231B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::informationForItemAtIndex(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[120];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = a5;
  v20 = a3;
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a4) <= 0xFFu)
  {
    buf[0] = 0;
    v22 = 0;
    v16 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v17);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a4, a6, a7, 0) <= 0xFFu)
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::informationForItemAtIndex(IPC::Connection &, size_t, const S"
                           "tring &, int64_t, std::optional<PageIdentifier>, CompletionHandler<void (std::optional<Pasteb"
                           "oardItemInfo> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 482: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    buf[0] = 0;
    v22 = 0;
    v16 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
    goto LABEL_6;
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v14 = off_1E34CACD8;
  v14[1] = a8;
  v14[2] = a4;
  v14[3] = &v20;
  v14[4] = &v19;
  *(_QWORD *)buf = v14;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197231DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::getPasteboardItemsCount(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, WTF::StringImpl **a3, uint64_t a4, char a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t (*v14)(void);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a3) <= 0xFFu)
  {
    v15 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a3, a4, a5, 0) <= 0xFFu)
  {
    v16 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18[0]) = 136315138;
      *(_QWORD *)((char *)v18 + 4) = "void WebKit::WebPasteboardProxy::getPasteboardItemsCount(IPC::Connection &, const S"
                                     "tring &, std::optional<PageIdentifier>, CompletionHandler<void (uint64_t)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 495: Invalid message dispatched %s", (uint8_t *)v18, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    v14 = *(uint64_t (**)(void))(*(_QWORD *)v17 + 8);
  }
  else
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34CAD00;
    v12[1] = a6;
    v12[2] = a3;
    v18[0] = v12;
    WebCore::PlatformPasteboard::performAsDataOwner();
    result = v18[0];
    v18[0] = 0;
    if (!result)
      return result;
    v14 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
  }
  return v14();
}

void sub_197231FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::readStringFromPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, char a7, uint64_t *a8)
{
  unsigned __int16 v15;
  _QWORD *v16;
  WTF::StringImpl *result;
  uint64_t v18;
  NSObject *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22 = a3;
  if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v15 = WebKit::WebPasteboardProxy::accessType(a1, a2, a5);
    if (v15 < 0x100u || v15 != 1)
    {
      *(_QWORD *)buf = 0;
      v18 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v18 + 16))(v18, buf);
      goto LABEL_12;
    }
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a5, a6, a7, 0) > 0xFFu)
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v16 = off_1E34CAD28;
      v16[1] = a8;
      v16[2] = a5;
      v16[3] = &v22;
      v16[4] = a4;
      *(_QWORD *)buf = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      return result;
    }
    v21 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::readStringFromPasteboard(IPC::Connection &, size_t, const St"
                           "ring &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 510: Invalid message dispatched %s", buf, 0xCu);
    }
  }
  else
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::readStringFromPasteboard(IPC::Connection &, size_t, const St"
                           "ring &, const String &, std::optional<PageIdentifier>, CompletionHandler<void (String &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 504: Invalid message dispatched %s", buf, 0xCu);
    }
  }
  *((_BYTE *)a2 + 98) = 1;
  *(_QWORD *)buf = 0;
  v18 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v18 + 16))(v18, buf);
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19723229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPasteboardProxy::readURLFromPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, char a6, uint64_t *a7)
{
  unsigned __int16 v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *result;
  NSObject *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint8_t buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22 = a3;
  v13 = WebKit::WebPasteboardProxy::accessType(a1, a2, a4);
  if (v13 < 0x100u || v13 != 1)
  {
    *(_QWORD *)buf = 0;
    v21 = 0;
    v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint8_t *, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, buf, &v21);
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a4, a5, a6, 0) <= 0xFFu)
  {
    v20 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::readURLFromPasteboard(IPC::Connection &, size_t, const Strin"
                           "g &, std::optional<PageIdentifier>, CompletionHandler<void (String &&, String &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 523: Invalid message dispatched %s", buf, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    *(_QWORD *)buf = 0;
    v21 = 0;
    v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint8_t *, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, buf, &v21);
    goto LABEL_6;
  }
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E34CAD50;
  v18[1] = a4;
  v18[2] = &v22;
  v18[3] = a7;
  *(_QWORD *)buf = v18;
  WebCore::PlatformPasteboard::performAsDataOwner();
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197232518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPasteboardProxy::readBufferFromPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6, uint64_t a7, char a8, uint64_t *a9)
{
  unsigned __int16 v15;
  _QWORD *v16;
  unsigned int *result;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  _QWORD v22[2];
  uint8_t buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22[0] = a3;
  v22[1] = a4;
  if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
  {
    v15 = WebKit::WebPasteboardProxy::accessType(a1, a2, a6);
    if (v15 < 0x100u || v15 != 1)
    {
      *(_QWORD *)buf = 0;
      v18 = *a9;
      *a9 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v18 + 16))(v18, buf);
      goto LABEL_12;
    }
    if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a6, a7, a8, 0) > 0xFFu)
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v16 = off_1E34CAD78;
      v16[1] = a9;
      v16[2] = a6;
      v16[3] = v22;
      v16[4] = a5;
      *(_QWORD *)buf = v16;
      WebCore::PlatformPasteboard::performAsDataOwner();
      result = *(unsigned int **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      return result;
    }
    v21 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::readBufferFromPasteboard(IPC::Connection &, std::optional<si"
                           "ze_t>, const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void "
                           "(RefPtr<SharedBuffer> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 540: Invalid message dispatched %s", buf, 0xCu);
    }
  }
  else
  {
    v19 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::WebPasteboardProxy::readBufferFromPasteboard(IPC::Connection &, std::optional<si"
                           "ze_t>, const String &, const String &, std::optional<PageIdentifier>, CompletionHandler<void "
                           "(RefPtr<SharedBuffer> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v19, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 534: Invalid message dispatched %s", buf, 0xCu);
    }
  }
  *((_BYTE *)a2 + 98) = 1;
  *(_QWORD *)buf = 0;
  v18 = *a9;
  *a9 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v18 + 16))(v18, buf);
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v20);
  return result;
}

void sub_197232818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t v11;
  void *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, char a6, uint64_t *a7)
{
  _QWORD *v14;
  uint64_t result;
  uint64_t (*v16)(void);
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  if ((unsigned __int16)WebKit::WebPasteboardProxy::accessType(a1, a2, a4) <= 0xFFu)
  {
    v17 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, (uint64_t)*a4, a5, a6, 0) <= 0xFFu)
  {
    v18 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v20[0]) = 136315138;
      *(_QWORD *)((char *)v20 + 4) = "void WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(IPC::Connect"
                                     "ion &, const String &, const String &, std::optional<PageIdentifier>, CompletionHan"
                                     "dler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v18, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 553: Invalid message dispatched %s", (uint8_t *)v20, 0xCu);
    }
    *((_BYTE *)a2 + 98) = 1;
    v19 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
    v16 = *(uint64_t (**)(void))(*(_QWORD *)v19 + 8);
  }
  else
  {
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v14 = off_1E34CADA0;
    v14[1] = a7;
    v14[2] = a4;
    v14[3] = a3;
    v20[0] = v14;
    WebCore::PlatformPasteboard::performAsDataOwner();
    result = v20[0];
    v20[0] = 0;
    if (!result)
      return result;
    v16 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
  }
  return v16();
}

void sub_197232A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPasteboardProxy::writeURLToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    LODWORD(v15[0]) = 136315138;
    *(_QWORD *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeURLToPasteboard(IPC::Connection &, const Pasteb"
                                   "oardURL &, const String &, std::optional<PageIdentifier>)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 564: Inv"
          "alid message dispatched %s";
LABEL_10:
    _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)v15, 0xCu);
    goto LABEL_7;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v8, a5, a6, 1) <= 0xFFu)
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_7;
    LODWORD(v15[0]) = 136315138;
    *(_QWORD *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeURLToPasteboard(IPC::Connection &, const Pasteb"
                                   "oardURL &, const String &, std::optional<PageIdentifier>)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 567: Inv"
          "alid message dispatched %s";
    goto LABEL_10;
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v11 = off_1E34CADC8;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = a1;
  v11[4] = a2;
  v15[0] = v11;
  WebCore::PlatformPasteboard::performAsDataOwner();
  v12 = v15[0];
  v15[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

void sub_197232C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::writeWebContentToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    LODWORD(v15[0]) = 136315138;
    *(_QWORD *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeWebContentToPasteboard(IPC::Connection &, const"
                                   " WebCore::PasteboardWebContent &, const String &, std::optional<PageIdentifier>)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 580: Inv"
          "alid message dispatched %s";
LABEL_10:
    _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)v15, 0xCu);
    goto LABEL_7;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v8, a5, a6, 1) <= 0xFFu)
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_7;
    LODWORD(v15[0]) = 136315138;
    *(_QWORD *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeWebContentToPasteboard(IPC::Connection &, const"
                                   " WebCore::PasteboardWebContent &, const String &, std::optional<PageIdentifier>)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 583: Inv"
          "alid message dispatched %s";
    goto LABEL_10;
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v11 = off_1E34CADF0;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = a1;
  v11[4] = a2;
  v15[0] = v11;
  WebCore::PlatformPasteboard::performAsDataOwner();
  v12 = v15[0];
  v15[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

void sub_197232DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::writeImageToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v8 = *a4;
  if (!*a4 || !*(_DWORD *)(v8 + 4))
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    LODWORD(v15[0]) = 136315138;
    *(_QWORD *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeImageToPasteboard(IPC::Connection &, const WebC"
                                   "ore::PasteboardImage &, const String &, std::optional<PageIdentifier>)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 596: Inv"
          "alid message dispatched %s";
LABEL_10:
    _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)v15, 0xCu);
    goto LABEL_7;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v8, a5, a6, 1) <= 0xFFu)
  {
    v13 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_7;
    LODWORD(v15[0]) = 136315138;
    *(_QWORD *)((char *)v15 + 4) = "void WebKit::WebPasteboardProxy::writeImageToPasteboard(IPC::Connection &, const WebC"
                                   "ore::PasteboardImage &, const String &, std::optional<PageIdentifier>)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 599: Inv"
          "alid message dispatched %s";
    goto LABEL_10;
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v11 = off_1E34CAE18;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = a1;
  v11[4] = a2;
  v15[0] = v11;
  WebCore::PlatformPasteboard::performAsDataOwner();
  v12 = v15[0];
  v15[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

void sub_197232F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::writeStringToPasteboard(WebKit::WebPasteboardProxy *a1, IPC::Connection *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7)
{
  uint64_t v9;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  v9 = *a5;
  if (!*a5 || !*(_DWORD *)(v9 + 4))
  {
    v15 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_11:
      *((_BYTE *)a2 + 98) = 1;
      return;
    }
    LODWORD(v17[0]) = 136315138;
    *(_QWORD *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &, const Str"
                                   "ing &, const String &, const String &, std::optional<PageIdentifier>)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 612: Inv"
          "alid message dispatched %s";
LABEL_14:
    _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, v16, (uint8_t *)v17, 0xCu);
    goto LABEL_11;
  }
  if ((!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4)) && *(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v15 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_11;
    LODWORD(v17[0]) = 136315138;
    *(_QWORD *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &, const Str"
                                   "ing &, const String &, const String &, std::optional<PageIdentifier>)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 613: Inv"
          "alid message dispatched %s";
    goto LABEL_14;
  }
  if ((unsigned __int16)WebKit::WebPasteboardProxy::determineDataOwner(a1, a2, v9, a6, a7, 1) <= 0xFFu)
  {
    v15 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_11;
    LODWORD(v17[0]) = 136315138;
    *(_QWORD *)((char *)v17 + 4) = "void WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &, const Str"
                                   "ing &, const String &, const String &, std::optional<PageIdentifier>)";
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPasteboardProxyCocoa.mm 616: Inv"
          "alid message dispatched %s";
    goto LABEL_14;
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v13 = off_1E34CAE40;
  v13[1] = a5;
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a1;
  v13[5] = a2;
  v17[0] = v13;
  WebCore::PlatformPasteboard::performAsDataOwner();
  v14 = v17[0];
  v17[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

void sub_197233198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPasteboardProxy::updateSupportedTypeIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3;
  CFTypeRef cf;

  MEMORY[0x19AEAFFC4](&cf, a3);
  WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers();
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_197233208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPreferences::platformUpdateStringValueForKey(uint64_t this, const WTF::String **a2, const WTF::String *a3)
{
  uint64_t v5;
  const WTF::String *v6;
  void *v7;
  const __CFString *v8;

  if (*(_QWORD *)(this + 16))
  {
    v5 = this;
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    if (*(_QWORD *)a3)
      v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v8 = &stru_1E351F1B8;
    return objc_msgSend(v7, "setObject:forKey:", v8, WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v6));
  }
  return this;
}

uint64_t WebKit::WebPreferences::platformDeleteKey(uint64_t this, const WTF::String **a2)
{
  uint64_t v3;
  void *v4;
  const WTF::String *v5;

  if (*(_QWORD *)(this + 16))
  {
    v3 = this;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    return objc_msgSend(v4, "removeObjectForKey:", WebKit::makeKey(*(WebKit **)(v3 + 16), *(const WTF::String **)(v3 + 24), *a2, v5));
  }
  return this;
}

uint64_t ___ZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyE_block_invoke_2(WebCore::CaptionUserPreferencesMediaAF *a1)
{
  WebCore::CaptionUserPreferencesMediaAF *v2;
  char v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16[4];

  v2 = (WebCore::CaptionUserPreferencesMediaAF *)WebCore::CaptionUserPreferencesMediaAF::platformCaptionDisplayMode(a1);
  v3 = (char)v2;
  WebCore::CaptionUserPreferencesMediaAF::platformPreferredLanguages(v2);
  v4 = (unsigned int *)*((_QWORD *)a1 + 4);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v12 = (WTF *)v4;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(v16, (uint64_t)&v13);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = off_1E34CA7B0;
  *(_QWORD *)(v6 + 8) = v12;
  *(_BYTE *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v13;
  v7 = v14;
  v13 = 0;
  v14 = 0;
  *(_QWORD *)(v6 + 32) = v7;
  v15 = v6;
  WTF::callOnMainRunLoop();
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v8);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v10);
}

void sub_197233418(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;
  unsigned int v18;
  unsigned int v19;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  if (a10)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)a10);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)a10));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, v17);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15 - 32, v17);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c92_ZTSKZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyEE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c92_ZTSKZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyEE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit14WebProcessPool18platformInitializeENS0_31NeedsGlobalStaticInitializationE_block_invoke()
{
  id v0;

  v0 = objc_alloc_init(objc_getClass("MobileGestaltHelperProxy"));
  objc_msgSend(v0, "proxyRebuildCache");
  if (v0)
    CFRelease(v0);
}

void sub_197233540(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit14WebProcessPool18platformInitializeENS0_31NeedsGlobalStaticInitializationE_block_invoke_2()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;
  WebKit::WebPageProxy **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WebKit::WebPageProxy **v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  char v47;
  int v48;
  __int16 v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  char v55;
  int v56;
  __int16 v57;
  int v58;
  _BYTE buf[12];
  __int16 v60;
  char *v61;
  __int16 v62;
  char *v63;
  __int16 v64;
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v35);
  if (v36)
  {
    v1 = v35;
    v33 = &v35[v36];
    while (1)
    {
      v34 = v1;
      v2 = *v1;
      v3 = *(unsigned int *)(v2 + 84);
      if ((_DWORD)v3)
        break;
LABEL_80:
      v1 = v34 + 1;
      if (v34 + 1 == v33)
        return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v0);
    }
    v4 = *(uint64_t **)(v2 + 72);
    v5 = &v4[v3];
    while (1)
    {
      v6 = *v4;
      v7 = (unsigned int *)(*v4 + 16);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 1;
      v56 = 0;
      v57 = 256;
      v58 = 0;
      WebKit::operator<<((uint64_t)&v52, v6);
      if (!*(_BYTE *)(v6 + 704))
        break;
      v9 = *(WTF::StringImpl **)(v6 + 696);
      if (!v9)
        break;
      v10 = *((_DWORD *)v9 + 1);
      *(_DWORD *)v9 += 2;
      if (!v10 || MEMORY[0x19AEABBCC](v9, "nullOrigin", 10))
      {
        v11 = 0;
LABEL_13:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v51 = *(WTF::StringImpl **)buf;
        goto LABEL_15;
      }
      v11 = 0;
      *(_DWORD *)v9 += 2;
      v51 = v9;
LABEL_15:
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 1;
      v48 = 0;
      v49 = 256;
      v50 = 0;
      WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)v6, (uint64_t)&v42);
      if (v43)
      {
        v12 = v42;
        v13 = 8 * v43;
        do
        {
          WTF::TextStream::operator<<();
          WebKit::WebPageProxy::currentURL(*v12, (WTF::StringImpl **)buf);
          WTF::TextStream::operator<<();
          v15 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      else
      {
        WTF::TextStream::operator<<();
      }
      v16 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      {
        WTF::TextStream::release((WTF::TextStream *)&v52);
        WTF::String::utf8();
        if (v41)
          v18 = (char *)v41 + 16;
        else
          v18 = 0;
        WTF::String::utf8();
        if (v39)
          v19 = (char *)v39 + 16;
        else
          v19 = 0;
        WTF::TextStream::release((WTF::TextStream *)&v44);
        WTF::String::utf8();
        if (v38)
          v20 = (char *)v38 + 16;
        else
          v20 = 0;
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v6;
        v60 = 2082;
        v61 = v18;
        v62 = 2081;
        v63 = v19;
        v64 = 2085;
        v65 = v20;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "WebProcessProxy %p - %{public}s, domain: %{private}s, pageURLs: %{sensitive}s", buf, 0x2Au);
        v21 = v38;
        v38 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v17);
          else
            --*(_DWORD *)v21;
        }
        v22 = v37;
        v37 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v39;
        v39 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
            WTF::fastFree(v23, v17);
          else
            --*(_DWORD *)v23;
        }
        v24 = v41;
        v41 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1)
            WTF::fastFree(v24, v17);
          else
            --*(_DWORD *)v24;
        }
        v25 = v40;
        v40 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v17);
      v27 = v45;
      v45 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v44;
      v44 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v26);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v51;
      v51 = 0;
      if (!v29)
        goto LABEL_65;
      if (*(_DWORD *)v29 != 2)
      {
        *(_DWORD *)v29 -= 2;
LABEL_65:
        if ((v11 & 1) == 0)
          goto LABEL_68;
        goto LABEL_71;
      }
      WTF::StringImpl::destroy(v29, v26);
      if ((v11 & 1) == 0)
      {
LABEL_68:
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v26);
        else
          *(_DWORD *)v9 -= 2;
      }
LABEL_71:
      v30 = v53;
      v53 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v26);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v52;
      v52 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v26);
        else
          *(_DWORD *)v31 -= 2;
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
      if (++v4 == v5)
        goto LABEL_80;
    }
    v9 = 0;
    v11 = 1;
    goto LABEL_13;
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v0);
}

void sub_197233A24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF *a17, uint64_t a18, WTF *a19, char a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29)
{
  unsigned int *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  char v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, a2);
  v35 = a23;
  a23 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = a22;
  a22 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v34);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = a27;
  a27 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v34);
    else
      *(_DWORD *)v37 -= 2;
  }
  if ((v32 & 1) == 0)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v34);
    else
      *(_DWORD *)v30 -= 2;
  }
  v38 = a29;
  a29 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v34);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = a28;
  a28 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v34);
    else
      *(_DWORD *)v39 -= 2;
  }
  if (v31)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v29);
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v34);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateSandboxAccess>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 82;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197233D28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  void *v4;
  char v6;

  if ((unsigned int *)a2 != a1)
  {
    v4 = (void *)*(unsigned int *)(a2 + 12);
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
    }
    else
    {
      WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk*>((uint64_t)&v6, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 32 * a1[3]), *(_QWORD *)a1);
    WTF::VectorCopier<false,WebCore::OrganizationStorageAccessPromptQuirk>::uninitializedCopy<WebCore::OrganizationStorageAccessPromptQuirk>(*(_QWORD *)a2 + 32 * a1[3], *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12), *(_QWORD *)a1 + 32 * a1[3]);
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

void WebKit::WebProcessPool::backlightLevelDidChangeCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    v8 = *((_QWORD *)a2 + 1);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      softLinkBKSDisplayBrightnessGetCurrent();
      v11 = *(unsigned int *)(v9 + 68);
      if ((_DWORD)v11)
      {
        v12 = v10;
        v13 = *(uint64_t **)(v9 + 56);
        v14 = 8 * v11;
        do
        {
          v15 = *v13;
          v16 = *(_QWORD *)(*v13 + 136);
          if (v16 && *(_BYTE *)(v16 + 104) || *(_QWORD *)(v15 + 144))
          {
            v17 = v12;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::BacklightLevelDidChange>(v15, &v17, 0, 0);
          }
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_197233F20(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::accessibilityPreferencesChangedCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _DWORD v21[6];
  uint64_t v22;
  char v23;
  IPC::Encoder *v24;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    v8 = *((_QWORD *)a2 + 1);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      WebKit::accessibilityPreferences((WebKit *)v21);
      v10 = *(unsigned int *)(v9 + 68);
      if ((_DWORD)v10)
      {
        v11 = *(uint64_t **)(v9 + 56);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          v14 = *(_QWORD *)(*v11 + 136);
          if (v14 && *(_BYTE *)(v14 + 104) || *(_QWORD *)(v13 + 144))
          {
            v15 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v15 = 2568;
            *(_QWORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 528) = v15 + 16;
            *(_QWORD *)(v15 + 536) = v15 + 16;
            *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v15 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
            v24 = (IPC::Encoder *)v15;
            IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::encode((IPC::Encoder *)v15, v21);
            LOBYTE(v22) = 0;
            v23 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v24, 0, (uint64_t)&v22, 1);
            if (v23)
            {
              v17 = v22;
              v22 = 0;
              if (v17)
                (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            }
            v18 = v24;
            v24 = 0;
            if (v18)
            {
              IPC::Encoder::~Encoder(v18, v16);
              WTF::fastFree(v19, v20);
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_1972340C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::mediaAccessibilityPreferencesChangedCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  WebCore::CaptionUserPreferencesMediaAF *v10;
  WebCore::CaptionUserPreferencesMediaAF *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  _BYTE v20[8];
  _BYTE *v21;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    v8 = *((_QWORD *)a2 + 1);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      v11 = (WebCore::CaptionUserPreferencesMediaAF *)WebCore::CaptionUserPreferencesMediaAF::platformCaptionDisplayMode(v10);
      v12 = (char)v11;
      WebCore::CaptionUserPreferencesMediaAF::platformPreferredLanguages(v11);
      v14 = *(unsigned int *)(v9 + 68);
      if ((_DWORD)v14)
      {
        v15 = *(uint64_t **)(v9 + 56);
        v16 = 8 * v14;
        do
        {
          v17 = *v15;
          v18 = *(_QWORD *)(*v15 + 136);
          if (v18 && *(_BYTE *)(v18 + 104) || *(_QWORD *)(v17 + 144))
          {
            v20[0] = v12;
            v21 = v19;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaAccessibilityPreferences>(v17, (uint64_t)v20);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_197234238(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::remoteWebInspectorEnabledCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebProcessProxy **v11;
  uint64_t v12;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    v8 = *((_QWORD *)a2 + 1);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      v10 = *(unsigned int *)(v9 + 68);
      if ((_DWORD)v10)
      {
        v11 = *(WebKit::WebProcessProxy ***)(v9 + 56);
        v12 = 8 * v10;
        do
        {
          WebKit::WebProcessProxy::enableRemoteInspectorIfNeeded(*v11++);
          v12 -= 8;
        }
        while (v12);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
    else
    {
      CFRelease(a2);
    }
  }
}

void sub_197234318(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::lockdownModeConfigurationUpdateCallback(WebKit::WebProcessPool *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  __CFNotificationCenter *v10;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a2 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a2);
    v8 = *((_QWORD *)a2 + 1);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(a2);
      WebKit::WebProcessPool::lockdownModeStateChanged((unsigned __int8 ***)(v9 - 16));
      v10 = *(__CFNotificationCenter **)(v9 - 8);
    }
    else
    {
      v10 = a2;
    }
    CFRelease(v10);
  }
}

void sub_1972343D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::lockdownModeStateChanged(unsigned __int8 ***this)
{
  _BOOL8 isLockdownModeEnabledBySystemIgnoringCaching;
  int v3;
  BOOL v4;
  uint64_t v5;
  WebKit *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)this);
  v3 = isLockdownModeEnabledBySystemIgnoringCaching;
  if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
    v4 = WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally == isLockdownModeEnabledBySystemIgnoringCaching;
  else
    v4 = 0;
  if (!v4)
  {
    WebKit::lockdownModeObservers((WebKit *)isLockdownModeEnabledBySystemIgnoringCaching);
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E34CAEF0;
    *(_QWORD *)buf = v5;
    WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t)buf);
    v6 = (WebKit *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = v3 | 0x100;
    WebKit::lockdownModeObservers(v6);
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E34CAF18;
    *(_QWORD *)buf = v7;
    WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t)buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    v28 = 1024;
    LODWORD(v29) = v3;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::WebProcessPool::lockdownModeStateChanged() isNowEnabled=%d", buf, 0x12u);
  }
  v9 = *((unsigned int *)this + 21);
  if ((_DWORD)v9)
  {
    v10 = this[9];
    v11 = &v10[v9];
    v23 = v3;
    do
    {
      v12 = *v10;
      v13 = (unsigned int *)(*v10 + 16);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (v12[779] != v3)
      {
        WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)v12, (uint64_t)&v25);
        if (v26)
        {
          v16 = v25;
          v17 = 8 * v26;
          do
          {
            v18 = *v16;
            CFRetain(*(CFTypeRef *)(*v16 + 8));
            if (!*(_BYTE *)(v18 + 1291))
            {
              v19 = qword_1ECE71320;
              if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 744);
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = this;
                v28 = 2048;
                v29 = v20;
                _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::WebProcessPool::lockdownModeStateChanged() Reloading page with pageProxyID=%llu due to Lockdown mode change", buf, 0x16u);
              }
              WebKit::WebPageProxy::reload(v18, 0, &v24);
              v21 = v24;
              v24 = 0;
              if (v21)
                CFRelease(*(CFTypeRef *)(v21 + 8));
            }
            CFRelease(*(CFTypeRef *)(v18 + 8));
            ++v16;
            v17 -= 8;
          }
          while (v17);
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v22);
          v3 = v23;
          if (!v12)
            goto LABEL_25;
        }
        else
        {
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v15);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
LABEL_25:
      ++v10;
    }
    while (v10 != v11);
  }
}

void sub_19723468C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  result = _AXSApplicationAccessibilityEnabled();
  if ((_DWORD)result)
  {
    v3 = *(unsigned int *)(v1 + 84);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(v1 + 72);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        result = WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded(v6);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return result;
}

void sub_197234844(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebProcessPool::isURLKnownHSTSHost(WebKit::WebProcessPool *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  int IsKnownHSTSHostWithSession;
  const void *v5;
  WTF::StringImpl *v7[5];
  const void *v8;

  WTF::URL::URL((uint64_t)v7, a2);
  WTF::URL::createCFURL((WTF::URL *)v7);
  v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  IsKnownHSTSHostWithSession = _CFNetworkIsKnownHSTSHostWithSession();
  v5 = v8;
  v8 = 0;
  if (v5)
    CFRelease(v5);
  return IsKnownHSTSHostWithSession != 0;
}

void sub_19723490C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  const void *v11;

  v11 = *(const void **)(v9 - 24);
  *(_QWORD *)(v9 - 24) = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::clearPermanentCredentialsForProtectionSpace(uint64_t a1, WebCore::ProtectionSpace *a2)
{
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage");
  v4 = (void *)objc_msgSend(v3, "credentialsForProtectionSpace:", WebCore::ProtectionSpace::nsSpace(a2));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", v9), "persistence") == 2)
          objc_msgSend(v3, "removeCredential:forProtectionSpace:", objc_msgSend(v4, "objectForKeyedSubscript:", v9), WebCore::ProtectionSpace::nsSpace(a2));
        ++v8;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (_QWORD *)result;
  v16 = 0;
  v17 = 0;
  if (qword_1EE3418D0 && (v2 = *(unsigned int *)(qword_1EE3418D0 - 12), (_DWORD)v2))
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v3 = WTF::fastMalloc((WTF *)(8 * v2));
    LODWORD(v17) = v2;
    v16 = v3;
  }
  else
  {
    v3 = 0;
  }
  v4 = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1EE3418D0);
  v6 = v4;
  v7 = v5;
  if (qword_1EE3418D0)
    v8 = qword_1EE3418D0 + 8 * *(unsigned int *)(qword_1EE3418D0 - 4);
  else
    v8 = 0;
  if ((unsigned int *)v8 != v4)
  {
    v9 = 0;
    do
    {
      v5 = *(unsigned int **)(*(_QWORD *)v6 + 8);
      if (v5)
      {
        v10 = (unsigned int **)(v5 + 2);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v5 + 2, (uint64_t)v5);
        v11 = *v10;
        if (*v10)
        {
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          v9 = HIDWORD(v17);
          v3 = v16;
        }
      }
      else
      {
        v11 = 0;
      }
      v13 = v9 + 1;
      *(_QWORD *)(v3 + 8 * v9) = v11;
      HIDWORD(v17) = v9 + 1;
      while (1)
      {
        v6 += 2;
        if (v6 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_21;
      }
      v6 = v7;
LABEL_21:
      ++v9;
    }
    while (v6 != (unsigned int *)v8);
    if (v13)
    {
      v14 = v16;
      v15 = 8 * v13;
      do
      {
        if (*(_QWORD *)v14 && *(_QWORD *)(*(_QWORD *)v14 + 8))
        {
          v18 = *(_QWORD *)v14;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&qword_1EE3418D0, &v18))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 16))(*v1, *(_QWORD *)(*(_QWORD *)v14 + 8));
        }
        v14 += 8;
        v15 -= 8;
      }
      while (v15);
    }
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v5);
}

void sub_197234C44(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::LockdownModeObserver>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v20 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

void sub_197234E78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)a10);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)a10));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::setLockdownModeEnabledGloballyForTesting(uint64_t result)
{
  void *v1;
  unsigned __int8 ****v2;
  uint64_t v3;
  unsigned __int8 ****v4;
  unsigned int v5;

  {
    if ((result & 0xFF00) != 0 && HIBYTE(WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting))
    {
      if (WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting == result)
        return result;
    }
    else if (((result & 0xFF00) != 0) == (HIBYTE(WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting) != 0))
    {
      return result;
    }
  }
  else
  {
    WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting = 0;
    if ((result & 0xFF00) == 0)
      return result;
  }
  WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting = result;
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v4);
  if (v5)
  {
    v2 = v4;
    v3 = 8 * v5;
    do
    {
      WebKit::WebProcessPool::lockdownModeStateChanged(*v2++);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v4, v1);
}

void sub_197234FA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebProcessPool::applicationIsAboutToSuspend(WebKit::WebProcessPool *this)
{
  NSObject *v2;
  int v4;
  WebKit::WebProcessPool *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::applicationIsAboutToSuspend: Terminating non-critical processes", (uint8_t *)&v4, 0xCu);
  }
  WebKit::WebBackForwardCache::pruneToSize(*((WebKit::WebBackForwardCache **)this + 95), 1u);
  return WebKit::WebProcessCache::clear(*((_QWORD *)this + 96));
}

uint64_t WebKit::WebProcessPool::notifyProcessPoolsApplicationIsAboutToSuspend(WebKit::WebProcessPool *this)
{
  void *v1;
  WebKit::WebProcessPool **v2;
  uint64_t v3;
  WebKit::WebProcessPool **v5;
  unsigned int v6;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v5);
  if (v6)
  {
    v2 = v5;
    v3 = 8 * v6;
    do
    {
      WebKit::WebProcessPool::applicationIsAboutToSuspend(*v2++);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v1);
}

void sub_1972350BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebProcessPool::setProcessesShouldSuspend(uint64_t **this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebKit::WebProcessPool *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 134218240;
    v10 = (WebKit::WebProcessPool *)this;
    v11 = 1024;
    v12 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::setProcessesShouldSuspend: Processes should suspend %d", (uint8_t *)&v9, 0x12u);
  }
  if (*((unsigned __int8 *)this + 944) != a2)
  {
    *((_BYTE *)this + 944) = a2;
    v5 = *((unsigned int *)this + 21);
    if ((_DWORD)v5)
    {
      v6 = this[9];
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        WebKit::ProcessThrottler::setAllowsActivities((WebKit::ProcessThrottler *)(v8 + 200), *((_BYTE *)this + 944) == 0);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void WebKit::WebProcessPool::notifyPreferencesChanged(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl *a4)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v6 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v6)
  {
    v9 = *(uint64_t **)(a1 + 72);
    v10 = &v9[v6];
    do
    {
      v11 = *v9;
      v12 = (unsigned int *)(*v9 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      WebKit::AuxiliaryProcessProxy::notifyPreferencesChanged(v11, a2, a3, a4);
      if (v11)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
      ++v9;
    }
    while (v9 != v10);
  }
  if ((MEMORY[0x19AEABBCC](*a3, "WKLockdownModeEnabled", 21) & 1) != 0)
    WebKit::WebProcessPool::lockdownModeStateChanged((unsigned __int8 ***)a1);
}

void sub_19723528C(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::screenPropertiesChanged(WebKit::WebProcessPool *this)
{
  void *v2;
  uint64_t result;
  char *v4;
  char v5;
  uint64_t v6;

  WebCore::collectScreenProperties(this);
  v4 = &v5;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetScreenProperties>((uint64_t)this, (_DWORD **)&v4, 0);
  result = v6;
  if (v6)
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v6, v2);
  return result;
}

void sub_1972352F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetScreenProperties>(uint64_t result, _DWORD **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetScreenProperties>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::WebProcessPool::gpuProcessForCapabilityGranter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 176);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v2;
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebProcessPool::gpuProcessForCapabilityGranter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 144);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *a2 = v2;
  return result;
}

uint64_t WebKit::WebProcessPool::webProcessForCapabilityGranter@<X0>(uint64_t result@<X0>, const WTF::StringImpl **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;

  if (!*(_DWORD *)(result + 84))
  {
LABEL_15:
    v14 = 0;
    goto LABEL_19;
  }
  v5 = result;
  v6 = 0;
  while (1)
  {
    WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(*(_QWORD *)(v5 + 72) + 8 * v6), (uint64_t)&v17);
    v8 = v18;
    if (v18)
      break;
LABEL_14:
    result = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v7);
    if (++v6 >= *(unsigned int *)(v5 + 84))
      goto LABEL_15;
  }
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v17 + 8 * v9) + 32);
    if (*(_BYTE *)(v10 + 2560))
      break;
LABEL_13:
    if (++v9 >= v8)
      goto LABEL_14;
  }
  WebKit::MediaCapability::environmentIdentifier((id *)(v10 + 2480), (uint64_t *)&v19);
  v12 = WTF::equal(v19, *a2, v11);
  v13 = v19;
  v19 = 0;
  if (!v13)
    goto LABEL_9;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_9:
    if ((v12 & 1) != 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
  if ((v12 & 1) == 0)
  {
LABEL_12:
    v8 = v18;
    goto LABEL_13;
  }
LABEL_16:
  result = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v7);
  if (v6 >= *(unsigned int *)(v5 + 84))
  {
    __break(0xC471u);
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v6);
    v15 = (unsigned int *)(v14 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
LABEL_19:
    *a3 = v14;
  }
  return result;
}

void sub_19723551C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'WebKit::WebProcessPool::webProcessForCapabilityGranter@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X2>, _QWORD *a3@<X8>)
{
  return WebKit::WebProcessPool::webProcessForCapabilityGranter(a1 - 32, a2, a3);
}

void WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  v3 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::BlockPtr<void ()(SSBLookupResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0>(WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0)::{lambda(void *,SSBLookupResult *,NSError *)#1}::__invoke(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13[5];
  uint64_t v14;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v11 = v6;
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v12 = *(_BYTE *)(a1 + 40);
  WTF::URL::URL((uint64_t)v13, (uint64_t *)(a1 + 48));
  v7 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v7 = &off_1E34CA740;
  *(_QWORD *)(v7 + 8) = v11;
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  *(_BYTE *)(v7 + 32) = v12;
  WTF::URL::URL(v7 + 40, (uint64_t *)v13);
  v14 = v7;
  WTF::RunLoop::dispatch();
  v9 = v14;
  v14 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void sub_197235710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0::operator()(SSBLookupResult *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  *a1 = &off_1E34CA740;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)a1[3];
  a1[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0::operator()(SSBLookupResult *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34CA740;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::beginSafeBrowsingCheck(WTF::URL const&,BOOL,WebKit::WebFramePolicyListenerProxy &)::$_0::operator()(SSBLookupResult *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF *v19[17];

  v19[16] = *(WTF **)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v19[0] = 0;
    WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(v2, (WTF::StringImpl *)v19);
    result = v19[0];
    v19[0] = 0;
    if (!result)
      return result;
    return WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(result, v3);
  }
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = (void *)objc_msgSend(*(id *)(a1 + 16), "serviceLookupResults");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if ((objc_msgSend(v9, "isPhishing") & 1) != 0
          || (objc_msgSend(v9, "isMalware") & 1) != 0
          || objc_msgSend(v9, "isUnwantedSoftware"))
        {
          v11 = *(_QWORD *)(a1 + 8);
          v12 = *(_BYTE *)(a1 + 32) != 0;
          v13 = WTF::fastMalloc((WTF *)0x50);
          WebKit::SafeBrowsingWarning::SafeBrowsingWarning(v13, a1 + 40, v12, v9);
          v14 = (WTF *)v13;
          v10 = v11;
          goto LABEL_17;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = *(_QWORD *)(a1 + 8);
  v14 = 0;
LABEL_17:
  WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(v10, (WTF::StringImpl *)&v14);
  result = v14;
  v14 = 0;
  if (result)
    return WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(result, v3);
  return result;
}

void sub_197235A9C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

WebCore::LocalCurrentGraphicsContext *WebCore::LocalCurrentGraphicsContext::LocalCurrentGraphicsContext(WebCore::LocalCurrentGraphicsContext *this, WebCore::GraphicsContext *a2)
{
  CGContext *v4;

  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = 1;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v4 = (CGContext *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 24))(a2);
  WebCore::LocalCurrentContextSaver::LocalCurrentContextSaver((WebCore::LocalCurrentGraphicsContext *)((char *)this + 16), v4);
  return this;
}

void sub_197235BB8(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  if (v1[8])
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v1 + 104))(*(_QWORD *)v1, 1);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::scheduleActivityStateUpdate(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CA768;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::scheduleActivityStateUpdate(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA768;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::scheduleActivityStateUpdate(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPageProxy::dispatchActivityStateChange((WebCore::RunLoopObserver **)(v2 - 16));
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_197235CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

Class initSYNotesActivationObserver(void)
{
  Class result;

  if ((byte_1EE341852 & 1) == 0)
  {
    *(_QWORD *)algn_1EE341888 = dlopen("/System/Library/PrivateFrameworks/Synapse.framework/Synapse", 2);
    byte_1EE341852 = 1;
  }
  result = objc_getClass("SYNotesActivationObserver");
  qword_1EE341880 = (uint64_t)result;
  getSYNotesActivationObserverClass = SYNotesActivationObserverFunction;
  return result;
}

uint64_t SYNotesActivationObserverFunction(void)
{
  return qword_1EE341880;
}

Class initAMSEngagementRequest(void)
{
  Class result;

  if ((byte_1EE341854 & 1) == 0)
  {
    unk_1EE3418A0 = dlopen("/System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices", 2);
    byte_1EE341854 = 1;
  }
  result = objc_getClass("AMSEngagementRequest");
  qword_1EE341898 = (uint64_t)result;
  off_1EE33F228 = AMSEngagementRequestFunction;
  return result;
}

uint64_t AMSEngagementRequestFunction(void)
{
  return qword_1EE341898;
}

Class initAMSUIEngagementTask(void)
{
  Class result;

  if ((byte_1EE341853 & 1) == 0)
  {
    qword_1EE341890 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleMediaServicesUI.framework/AppleMediaServicesUI", 2);
    byte_1EE341853 = 1;
  }
  result = objc_getClass("AMSUIEngagementTask");
  qword_1EE3418A8 = (uint64_t)result;
  _MergedGlobals_1079 = AMSUIEngagementTaskFunction;
  return result;
}

uint64_t AMSUIEngagementTaskFunction(void)
{
  return qword_1EE3418A8;
}

uint64_t WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(AMSEngagementResult *,NSError *)>::fromCallable<WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0>(WebKit::WebPageProxy::startApplePayAMSUISession(WTF::URL &&,WebCore::ApplePayAMSUIRequest &&,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0)::{lambda(void *,AMSEngagementResult *,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v5[2];
  __int16 v6;

  if (a3)
  {
    v6 = 0;
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v6);
  }
  else
  {
    v5[0] = a2 != 0;
    v5[1] = 1;
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_197235EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 16), a2);
    v5 = *(const void **)(a1 + 8);
    *(_QWORD *)a1 = off_1E34AB458;
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
      CFRelease(v5);
  }
  return a1;
}

void std::__optional_destruct_base<WebKit::MediaCapability,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 16), a2);
    v5 = *(const void **)(a1 + 8);
    *(_QWORD *)a1 = off_1E34AB458;
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
      CFRelease(v5);
    *(_BYTE *)(a1 + 80) = 0;
  }
}

uint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  if (a2 != (unsigned int *)a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = a2[3];
    if (v4 <= v5)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if ((_DWORD)v4)
          {
            WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 16 * v4));
            *(_DWORD *)(a1 + 12) = 0;
          }
          v7 = *(unsigned int **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)a1, a2[3]);
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct((unsigned int *)(*(_QWORD *)a1 + 16 * v5), (void *)(*(_QWORD *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    v8 = *(_QWORD *)a2;
    if ((_DWORD)v4)
    {
      v9 = v8 + 16 * v4;
      v10 = *(unsigned int **)a1;
      do
      {
        WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)v10, (unsigned int **)v8);
        *((_BYTE *)v10 + 8) = *(_BYTE *)(v8 + 8);
        v8 += 16;
        v10 += 4;
      }
      while (v8 != v9);
      v8 = *(_QWORD *)a2;
      v11 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v11 = 0;
    }
    v12 = a2[3];
    if (v11 != (_DWORD)v12)
    {
      v13 = v8 + 16 * v12;
      v14 = *(_QWORD *)a1 + 16 * v11;
      v15 = v8 + 16 * v11;
      do
      {
        v16 = *(unsigned int **)v15;
        if (*(_QWORD *)v15)
        {
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
        *(_QWORD *)v14 = v16;
        *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
        v14 += 16;
        v15 += 16;
      }
      while (v15 != v13);
      v11 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 + 8);
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        do
        {
          v7 = __ldaxr(result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, result));
        if (!v8)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      a3 += 16;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(unsigned int **)result;
      v5 = (unsigned int *)(*(_QWORD *)result + 16 * result[3]);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = v6;
      result = WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::move(v4, v5, v6);
      if (v4)
      {
        if (*(unsigned int **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::PasteboardItemInfo>::destruct(*(_QWORD *)a1, (void *)(*(_QWORD *)a1 + 120 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::PasteboardItemInfo>::destruct(uint64_t result, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  void *v7;

  if ((void *)result != a2)
  {
    v3 = result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 96, a2);
      v5 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 32, v4);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 16, v6);
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v7);
      v3 += 120;
    }
    while ((void *)v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  void *v6;

  if (*(_BYTE *)(a1 + 120))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, a2);
    v4 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, v3);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, v5);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v6);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessProxy &)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E34CA7B0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessProxy &)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = off_1E34CA7B0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  return WTF::fastFree(a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::setMediaAccessibilityPreferences(WebKit::WebProcessProxy &)::$_0::operator() const(void)::{lambda(void)#1},void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  IPC::Encoder *v2;
  char v3[8];
  char *v4;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    result = *(IPC::Encoder **)(v1 + 8);
    if (result)
    {
      v3[0] = *((_BYTE *)v2 + 16);
      v4 = (char *)v2 + 24;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaAccessibilityPreferences>((uint64_t)result, (uint64_t)v3);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (*(_DWORD *)(v3 - 12))
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, v3, a3);
  return v3 + 16 * *(unsigned int *)(v3 - 4);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = *a1;
  if (*a1)
    v4 = *(unsigned int *)(v3 - 4);
  else
    v4 = 0;
  v6[0] = a2;
  v6[1] = v3 + 16 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

uint64_t std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEB03CC]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

void std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int **v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;

  if (a2)
  {
    v3 = (unsigned int *)a2[1];
    a2[1] = 0;
    if (v3)
    {
      do
      {
        v6 = __ldaxr(v3);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v3));
      if (!v7)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
    v4 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, a2);
    WTF::fastFree((WTF *)v4, v5);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34CA800;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34CA800;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (v4 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v4 >= 0x100u))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = v4;
        CFRetain(*(CFTypeRef *)(v6 - 8));
        if (!v7)
        {
          v8 = *v2;
          v9 = *(_QWORD *)(v6 + 24);
          if (v9)
            v10 = *(_QWORD *)(v9 + 8);
          else
            v10 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 800))(v10, v8);
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
        }
        CFRelease(*(CFTypeRef *)(v6 - 8));
      }
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(v2);
  }
}

void IPC::Connection::cancelReply<Messages::WebPage::AddDictationAlternative,WebKit::WebPageProxy::addDictationAlternative(WebCore::TextAlternativeWithRange &&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = *a1;
      v5 = *(_QWORD *)(v2 + 24);
      if (v5)
        v6 = *(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 800))(v6, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2154;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CA828;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_197236960(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA828;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, (uint64_t)&v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_197236AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, v15);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::DictationAlternativesAtSelection,WTF::CompletionHandler<void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_197236B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_197236C10(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;
  _QWORD v5[2];
  char v6;

  result = IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v5);
  v4 = v6;
  if (v6)
  {
    *(_QWORD *)a2 = v5[0];
    *(_QWORD *)(a2 + 8) = v5[1];
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearDictationAlternatives>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2131;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197236D70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SpeakingErrorOccurred>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2447;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_197236E84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BoundaryEventOccurred>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2119;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<BOOL,unsigned int const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,unsigned int const&,unsigned int const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197236FA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<BOOL,unsigned int const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,unsigned int const&,unsigned int const&>,0ul,1ul,2ul>(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v25 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v6);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_28;
    v8 = v27;
    memcpy(v27, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v28 = *(void **)(a1 + 528);
    if (v28 != (void *)(a1 + 16))
      munmap(v28, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v26;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = **((_DWORD **)a2 + 1);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 < v13 + 4)
  {
    v29 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v30 = v29;
      v29 *= 2;
    }
    while (v30 < v14);
    v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
    if (v31 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197237284);
    }
    v16 = v31;
    memcpy(v31, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v32 = *(void **)(a1 + 528);
    if (v32 != (void *)(a1 + 16))
      munmap(v32, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v16;
    *(_QWORD *)(a1 + 552) = v30;
    v12 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v16 = *(char **)(a1 + 528);
  }
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(a1 + 544) = v14;
  v17 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
  v18 = **((_DWORD **)a2 + 2);
  v19 = *(_QWORD *)(a1 + 544);
  v20 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = v20 + 4;
  v22 = *(_QWORD *)(a1 + 552);
  if (v22 >= v20 + 4)
  {
    v23 = *(char **)(a1 + 528);
    goto LABEL_7;
  }
  v33 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v34 = v33;
    v33 *= 2;
  }
  while (v34 < v21);
  v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
  if (v35 == (char *)-1)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x19723727CLL);
  }
  v23 = v35;
  memcpy(v35, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v36 = *(void **)(a1 + 528);
  if (v36 != (void *)(a1 + 16))
    munmap(v36, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v23;
  *(_QWORD *)(a1 + 552) = v34;
  v19 = *(_QWORD *)(a1 + 544);
LABEL_7:
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(a1 + 544) = v21;
  v24 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v20);
  *(_QWORD *)(a1 + 536) = v24 + 1;
  *v24 = v18;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::VoicesDidChange>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2500;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_19723735C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(void)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34CA850;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(void)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34CA850;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageProxy::fullscreenVideoTextRecognitionTimerFired(void)::$_0,void,std::optional<WebCore::ShareableBitmapHandle> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  _DWORD *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      CFRetain((CFTypeRef)*(v3 - 1));
      v6 = v3[2];
      v7 = *(unsigned __int8 *)(v6 + 2472);
      v8 = *(_QWORD *)(v6 + 2464);
      if (v7)
        v9 = v8 == *(_QWORD *)(a1 + 8);
      else
        v9 = 0;
      if (!v9)
        goto LABEL_20;
      v10 = (_DWORD *)v3[46];
      if (!v10)
        goto LABEL_20;
      ++v10[4];
      if (!*(_BYTE *)(a2 + 64)
        || (v11 = (const void *)WebKit::VideoPresentationManagerProxy::playerViewController((uint64_t)v10, *(_QWORD *)(a1 + 8)), (v12 = v11) == 0))
      {
LABEL_17:
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[4];
LABEL_20:
        CFRelease((CFTypeRef)*(v3 - 1));
        return;
      }
      CFRetain(v11);
      v13 = v3[3];
      if (v13)
        v14 = *(_QWORD *)(v13 + 8);
      else
        v14 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
      if (*(_BYTE *)(a2 + 64))
      {
        (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v14 + 1160))(v14, a2, v12);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
        CFRelease(v12);
        goto LABEL_17;
      }
      __break(1u);
    }
  }
}

void sub_19723758C(_Unwind_Exception *a1)
{
  _DWORD *v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  CFRelease(v2);
  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  CFRelease(*(CFTypeRef *)(v4 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34CA878;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34CA878;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WebCore::FragmentedSharedBuffer *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  char v22;
  __int128 buf;
  char v24;
  __int16 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (WebCore::FragmentedSharedBuffer *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>((WebCore::FragmentedSharedBuffer *)(a1 + 8));
  IPC::ArgumentCoder<WebCore::AppHighlight,void>::decode(a2, (uint64_t)&buf);
  if (v26
    || (v4 = (WTF::StringImpl *)*a2, v13 = a2[1], *a2 = 0, a2[1] = 0, (v14 = a2[3]) != 0)
    && v13
    && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v4), v26))
  {
    v5 = buf;
    *(_QWORD *)&buf = 0;
    v18 = v5;
    LOBYTE(v19) = 0;
    v20 = 0;
    if (v24)
    {
      v6 = *((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      v19 = v6;
      v20 = 1;
    }
    v21 = v25;
    v22 = 1;
    std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf, v4);
  }
  else
  {
    LOBYTE(v18) = 0;
    v22 = 0;
    std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf, v4);
    v7 = (WTF::StringImpl *)*a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v15)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v16 + 16))(v16, v7);
  }
  if (v22)
  {
    v8 = *(_QWORD *)v2;
    if (*(_QWORD *)(v18 + 48))
    {
      v9 = *(_QWORD *)(v8 + 40);
      if (v9)
        v10 = *(_QWORD *)(v9 + 8);
      else
        v10 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 1728))(v10, &v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
    }
    else
    {
      v17 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "auto WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewG"
                                        "roupForHighlight, WebCore::HighlightRequestOriginatedInApp)::(anonymous class)::"
                                        "operator()(WebCore::AppHighlight &&) const";
        _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 749: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 208) + 144) + 98) = 1;
    }
    return (unsigned int *)std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v12);
  }
  else
  {
    std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v7);
    return IPC::Connection::cancelReply<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(v2);
  }
}

void sub_197237894(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *IPC::Connection::cancelReply<Messages::WebPage::CreateAppHighlightInSelectedRange,WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight,WebCore::HighlightRequestOriginatedInApp)::$_0>(WebCore::FragmentedSharedBuffer *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *result;
  NSObject *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  __int16 v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebCore::FragmentedSharedBuffer::create(a1);
  LOBYTE(v10) = 0;
  v11 = 0;
  v12 = 0;
  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)(v9 + 48))
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
      v4 = *(_QWORD *)(v3 + 8);
    else
      v4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 1728))(v4, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
  }
  else
  {
    v8 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v14 = "auto WebKit::WebPageProxy::createAppHighlightInSelectedRange(WebCore::CreateNewGroupForHighlight, WebCore::H"
            "ighlightRequestOriginatedInApp)::(anonymous class)::operator()(WebCore::AppHighlight &&) const";
      _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm 749: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 144) + 98) = 1;
  }
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  result = (unsigned int *)v9;
  v9 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

void sub_197237A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, WTF::StringImpl *a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, v14);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebCore::AppHighlight,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, a2);
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v3);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SharedMemoryHandle>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(WTF::MachSendRight::MachSendRight() + 8) = *(_QWORD *)(v3 + 8);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::MachSendRight *v4;
  WTF::MachSendRight *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197237C64);
    }
    v4 = *(WTF::MachSendRight **)a1;
    v5 = (WTF::MachSendRight *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::SharedMemoryHandle>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::MachSendRight **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::SharedMemoryHandle>::move(WTF::MachSendRight *a1, WTF::MachSendRight *a2, uint64_t a3)
{
  WTF::MachSendRight *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WTF::MachSendRight::MachSendRight();
      *(_QWORD *)(a3 + 8) = *((_QWORD *)v5 + 1);
      WTF::MachSendRight::~MachSendRight(v5);
      a3 += 16;
      v5 = (WTF::MachSendRight *)((char *)v5 + 16);
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  WTF::MachSendRight *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::MachSendRight *v8;
  uint64_t v9;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      v5 = (WTF::MachSendRight *)(*(_QWORD *)a1 + 16 * a2);
      v6 = 16 * v4 - 16 * a2;
      do
      {
        WTF::MachSendRight::~MachSendRight(v5);
        v5 = (WTF::MachSendRight *)(v7 + 16);
        v6 -= 16;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v8 = *(WTF::MachSendRight **)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v9 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v9;
      if ((WTF::MachSendRight *)v9 != v8)
        WTF::VectorMover<false,WebCore::SharedMemoryHandle>::move(v8, (WTF::MachSendRight *)((char *)v8 + 16 * v4), v9);
    }
    if (v8)
    {
      if (*(WTF::MachSendRight **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

uint64_t WTF::Vector<WebCore::SharedMemoryHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF::MachSendRight *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::MachSendRight **)a1;
    v5 = 16 * v3;
    do
    {
      WTF::MachSendRight::~MachSendRight(v4);
      v4 = (WTF::MachSendRight *)(v6 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy23setUpHighlightsObserverEvEUb_E3__7vJEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CA8A0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy23setUpHighlightsObserverEvEUb_E3__7vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA8A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12WebPageProxy23setUpHighlightsObserverEvEUb_E3__7vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v1 = *(_QWORD *)(result + 8);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = *(_BYTE *)(result + 16);
  result = WTF::isMainRunLoop((WTF *)result);
  if ((result & 1) == 0)
    goto LABEL_20;
  if (*(_BYTE *)(v2 + 713) || !*(_BYTE *)(v2 + 712))
    return result;
  v4 = *(_QWORD *)(v2 + 192);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2369;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v23 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    v19 = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (v19 != (char *)-1)
    {
      v10 = v19;
      memcpy(v19, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
      v20 = *(void **)(v6 + 528);
      if (v20 != (void *)(v6 + 16))
        munmap(v20, *(_QWORD *)(v6 + 552));
      *(_QWORD *)(v6 + 528) = v10;
      *(_QWORD *)(v6 + 552) = v18;
      v11 = *(_QWORD *)(v6 + 544);
      goto LABEL_9;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x19723806CLL);
  }
  v10 = *(char **)(v6 + 528);
  v11 = *(_QWORD *)(v6 + 544);
LABEL_9:
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = v3;
  LOBYTE(v21) = 0;
  v22 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v23, 0, (uint64_t)&v21, 1);
  if (v22)
  {
    v14 = v21;
    v21 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = (uint64_t)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return WTF::fastFree(v15, v16);
  }
  return result;
}

void sub_197238084(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2323;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CA8C8;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_1972381D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA8C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA8C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestActiveNowPlayingSessionInfo,WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)>>(WTF::CompletionHandler<void ()(BOOL,WebCore::NowPlayingInfo &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26[8];
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  _OWORD v32[2];
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  _OWORD v40[2];
  char v41;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v4, v5);
        v19 = 0;
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v20 = 0;
        if (v25 && v24)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v24);
          v20 = *a2;
          v19 = a2[1];
        }
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_19;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v19 = v5;
    v20 = v4;
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    v26[0] = 0;
    v33 = 0;
    goto LABEL_11;
  }
  IPC::Decoder::decode<WebCore::NowPlayingInfo>(a2, (uint64_t)&v34);
  if (!v41)
  {
    v26[0] = 0;
    v33 = 0;
    std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v8);
LABEL_11:
    v12 = (WTF::StringImpl *)*a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v14)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v15 + 16))(v15, v12);
    goto LABEL_12;
  }
  v26[0] = v7 != 0;
  v9 = v35;
  v27[0] = v34;
  v34 = 0u;
  v35 = 0u;
  v27[1] = v9;
  LOBYTE(v28) = 0;
  v30 = 0;
  if (v38)
  {
    v10 = v36;
    v36 = 0uLL;
    v28 = v10;
    v11 = v37;
    v37 = 0;
    v29 = v11;
    v30 = 1;
  }
  v31 = v39;
  v32[0] = v40[0];
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v40 + 10);
  v33 = 1;
  std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v8);
LABEL_12:
  if (v33)
  {
    v16 = v26[0];
    v17 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BOOL8, _OWORD *))(*(_QWORD *)v17 + 16))(v17, v16, v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v18);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, v12);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_(v2);
  }
}

void sub_1972384F0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WebCore::NowPlayingInfo>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 120))
  {
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
    v4 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage34RequestActiveNowPlayingSessionInfoEN3WTF17CompletionHandlerIFvbON7WebCore14NowPlayingInfoEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSG_(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8[2];
  WTF::StringImpl *v9[2];
  _BYTE v10[32];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int16 v16;

  v10[24] = 0;
  v10[0] = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v11 = 0;
  v12 = 0;
  v13 = 0x3FF0000000000000;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, 0, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v2);
  v4 = v9[1];
  v9[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8[1];
  v8[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8[0];
  v8[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972386F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v14 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](v13 + 32, v16);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v17);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v17);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v17);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2265;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CA8F0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_1972388B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA8F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA8F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_197238A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::LastNavigationWasAppInitiated,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197238A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InsertMultiRepresentationHEIC>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2259;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **(const void ***)a2, *(_QWORD *)(*(_QWORD *)a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197238B7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceImageForRemoveBackground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2319;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ElementContext const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ElementContext const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197238CA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ElementContext const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ElementContext const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, *(_QWORD *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, **(const void ***)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8));
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaEnvironment>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2407;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_197238E00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  id result;
  _QWORD v26[2];
  char v27;
  IPC::Encoder *v28;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2502;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v28 = (IPC::Encoder *)v12;
  v13 = *a2;
  v14 = *(unsigned __int8 *)(*a2 + 32);
  v15 = IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1);
  if (v14)
  {
    *v15 = 1;
    if (!*(_BYTE *)(v13 + 32))
    {
      result = std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode((IPC::Encoder *)v12, (uint64_t *)v13);
  }
  else
  {
    *v15 = 0;
  }
  v16 = *a3;
  *a3 = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E34CA918;
  v17[1] = v16;
  v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v26[0] = v17;
  v26[1] = v18;
  v27 = 1;
  v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
  if (v27)
  {
    v21 = v26[0];
    v26[0] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  v22 = v28;
  v28 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v19);
    WTF::fastFree(v23, v24);
  }
  if (v20)
    return (id)v18;
  else
    return 0;
}

void sub_197238FA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA918;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA918;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v14);
  if (v16)
  {
    v12[0] = v14;
    v5 = v15;
    v14 = 0;
    v15 = 0;
    v12[1] = v5;
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v4);
    v13 = 1;
    v6 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v12);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v13)
      return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v8);
  }
  else
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    return IPC::Connection::cancelReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  }
  return result;
}

void sub_197239178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v13);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::WillBeginWritingToolsSession,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void sub_1972391FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_197239274(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  __int128 v24;
  _BYTE v25[40];
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v6, v5);
        v16 = *a1;
        v15 = a1[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_22;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v22 = 0;
    v23 = 0;
    if (v10 >= 0x3333)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::WritingTools::Context>(a1, (uint64_t)&v24);
        if (!v27)
          break;
        v19 = HIDWORD(v23);
        if (HIDWORD(v23) == (_DWORD)v23)
        {
          WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::Context>((uint64_t)&v22, (unint64_t)&v24);
        }
        else
        {
          v20 = v22;
          *(_OWORD *)(v22 + 80 * HIDWORD(v23)) = v24;
          WebCore::AttributedString::AttributedString();
          *(_OWORD *)(v20 + 80 * v19 + 56) = v26;
          ++HIDWORD(v23);
        }
        if (v27)
          MEMORY[0x19AEAEECC](v25);
        if (!--v10)
        {
          WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v22, HIDWORD(v23));
          *(_QWORD *)a3 = v22;
          v21 = v23;
          v22 = 0;
          v23 = 0;
          *(_QWORD *)(a3 + 8) = v21;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v13 = 0;
        v14 = 0;
LABEL_19:
        v22 = 0;
        v23 = 0;
        *(_QWORD *)a3 = v13;
        *(_QWORD *)(a3 + 8) = v14;
LABEL_20:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, a2);
      }
      LODWORD(v23) = 80 * (int)v10 / 0x50u;
      v22 = WTF::fastMalloc((WTF *)(80 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::WritingTools::Context>(a1, (uint64_t)&v24);
        if (!v27)
          break;
        v11 = HIDWORD(v23);
        if (HIDWORD(v23) == (_DWORD)v23)
        {
          WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::Context>((uint64_t)&v22, (unint64_t)&v24);
        }
        else
        {
          v12 = v22;
          *(_OWORD *)(v22 + 80 * HIDWORD(v23)) = v24;
          WebCore::AttributedString::AttributedString();
          *(_OWORD *)(v12 + 80 * v11 + 56) = v26;
          ++HIDWORD(v23);
        }
        if (v27)
          MEMORY[0x19AEAEECC](v25);
        if (!--v10)
        {
          v13 = v22;
          v14 = v23;
          goto LABEL_19;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, a2);
  }
  v15 = v5;
  v16 = 0;
LABEL_22:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v15)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void sub_197239560(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (a21)
    MEMORY[0x19AEAEECC](v21);
  WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::WritingTools::Context>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1972395EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 80))
    MEMORY[0x19AEAEECC](v1 + 16);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WritingTools::Context>(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;

  v3 = (_OWORD *)WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12));
  *v4 = *v3;
  WebCore::AttributedString::AttributedString();
  *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)((char *)v3 + 56);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unsigned int *WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      v5 = 80 * v4 - 80 * this;
      result = (unsigned int *)(*(_QWORD *)result + 80 * this + 16);
      do
      {
        result = (unsigned int *)(MEMORY[0x19AEAEECC](result) + 80);
        v5 -= 80;
      }
      while (v5);
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v6 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      v7 = (WTF *)(80 * this);
      result = (unsigned int *)WTF::fastMalloc(v7);
      *(_DWORD *)(v3 + 8) = (v7 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v6)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::WritingTools::Context>::move((uint64_t)v6, (uint64_t)v6 + 80 * v4, (uint64_t)result);
    }
    if (v6)
    {
      if (*(WTF **)v3 == v6)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v6, (void *)this);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidBeginWritingToolsSession>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2156;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, *(_QWORD *)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197239874(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::VectorArgumentCoder<false,WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 80 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(a1, v7);
      v7 += 10;
      v8 -= 80;
    }
    while (v8);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ProofreadingSessionDidReceiveSuggestions>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2304;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::WritingTools::Context const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::WritingTools::Context const&,BOOL>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197239A08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::WritingTools::Context const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::WritingTools::Context const&,BOOL>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(a1, *a2);
  IPC::VectorArgumentCoder<false,WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)v2[1]);
  IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(a1, v2[2]);
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 48 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::encode(a1, v7);
      v7 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ProofreadingSessionDidUpdateStateForSuggestion>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2305;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,WebCore::WritingTools::TextSuggestionState,WebCore::WritingTools::TextSuggestion const&,WebCore::WritingTools::Context const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,WebCore::WritingTools::TextSuggestionState,WebCore::WritingTools::TextSuggestion const&,WebCore::WritingTools::Context const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197239BF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,WebCore::WritingTools::TextSuggestionState,WebCore::WritingTools::TextSuggestion const&,WebCore::WritingTools::Context const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,WebCore::WritingTools::TextSuggestionState,WebCore::WritingTools::TextSuggestion const&,WebCore::WritingTools::Context const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(a1, *(uint64_t **)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::encode(a1, *(uint64_t **)(a2 + 16));
  return IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(a1, *(uint64_t **)(a2 + 24));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidEndWritingToolsSession>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2168;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a2) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197239D94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CompositionSessionDidReceiveTextWithReplacementRange>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2139;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,WebCore::AttributedString const&,WebCore::CharacterRange const&,WebCore::WritingTools::Context const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,WebCore::AttributedString const&,WebCore::CharacterRange const&,WebCore::WritingTools::Context const&,BOOL>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_197239EC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::WritingTools::Session const&,WebCore::AttributedString const&,WebCore::CharacterRange const&,WebCore::WritingTools::Context const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::WritingTools::Session const&,WebCore::AttributedString const&,WebCore::CharacterRange const&,WebCore::WritingTools::Context const&,BOOL>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, v2[1]);
  v4 = v2[2];
  v5 = *v4;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v4[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(a1, v2[3]);
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WritingToolsSessionDidReceiveAction>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2507;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a2) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a2;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19723A098(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::enableSourceTextAnimationAfterElementWithID>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2509;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19723A1D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::EnableTextAnimationTypeForElementWithID>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2193;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19723A308(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::TextIndicatorData>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::TextIndicatorData,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::TextIndicatorData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  WTF *v35;
  WTF *v36;
  _QWORD *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  WTF *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  __int16 v57;
  char v58;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = v5;
  result = WTF::fastMalloc((WTF *)(((unint64_t)v5 << 7) | 0x10));
  if (v5)
  {
    v9 = result + 104;
    do
    {
      *(_OWORD *)(v9 - 8) = 0uLL;
      *(_OWORD *)(v9 + 8) = 0uLL;
      *(_OWORD *)(v9 + 24) = 0uLL;
      *(_OWORD *)(v9 - 24) = 0uLL;
      *(_OWORD *)(v9 - 40) = 0uLL;
      *(_OWORD *)(v9 - 56) = 0uLL;
      *(_OWORD *)(v9 - 72) = 0uLL;
      *(_OWORD *)(v9 - 88) = 0uLL;
      *(_DWORD *)(v9 - 8) = 1065353216;
      *(_OWORD *)v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(_BYTE *)(v9 + 32) = 0;
      v9 += 128;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = v3;
    while (1)
    {
      v12 = v2 + (v10 << 7);
      if (*(_QWORD *)v12 ^ 1 | *(_QWORD *)(v12 + 8))
      {
        if (*(_OWORD *)v12 == 0)
        {
          v13 = v2 + (v10 << 7);
          v14 = *(_QWORD *)(v13 + 112);
          if ((v14 & 0x8000000000000) != 0)
          {
            v47 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              atomic_store(1u, v47);
              WTF::fastFree((WTF *)v47, v8);
            }
          }
          v15 = *(_DWORD **)(v13 + 104);
          *(_QWORD *)(v13 + 104) = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
          v26 = v2 + (v10 << 7);
          v27 = *(_DWORD **)(v26 + 96);
          *(_QWORD *)(v26 + 96) = 0;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
          v29 = *(_DWORD **)(v26 + 88);
          *(_QWORD *)(v26 + 88) = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            else
              --v29[2];
          }
          v32 = v2 + (v10 << 7);
          v35 = *(WTF **)(v32 + 64);
          v34 = (_QWORD *)(v32 + 64);
          v33 = v35;
          if (!v35)
            goto LABEL_63;
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v56 = -1640531527;
          v57 = 0;
          v58 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v56, (_QWORD *)(v2 + (v10 << 7)));
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v56);
          v20 = 0;
          do
          {
            v21 = v18 & v17;
            v22 = v16 + (v21 << 7);
            v18 = ++v20 + v21;
          }
          while (*(_OWORD *)v22 != 0);
          v23 = *(_QWORD *)(v22 + 112);
          if ((v23 & 0x8000000000000) != 0)
          {
            v50 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              atomic_store(1u, v50);
              WTF::fastFree((WTF *)v50, v19);
            }
          }
          v24 = v16 + (v21 << 7);
          v25 = *(_DWORD **)(v24 + 104);
          *(_QWORD *)(v24 + 104) = 0;
          if (v25)
          {
            if (v25[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
            else
              --v25[2];
          }
          v28 = *(_DWORD **)(v24 + 96);
          *(_QWORD *)(v24 + 96) = 0;
          if (v28)
          {
            if (v28[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[2];
          }
          v30 = v16 + (v21 << 7);
          v31 = *(_DWORD **)(v30 + 88);
          *(_QWORD *)(v30 + 88) = 0;
          if (v31)
          {
            if (v31[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
            else
              --v31[2];
          }
          v38 = *(WTF **)(v30 + 64);
          v37 = (_QWORD *)(v30 + 64);
          v36 = v38;
          if (v38)
          {
            *v37 = 0;
            *(_DWORD *)(v16 + (v21 << 7) + 72) = 0;
            WTF::fastFree(v36, v19);
          }
          *(_OWORD *)v22 = *(_OWORD *)v12;
          v39 = v2 + (v10 << 7);
          WebCore::TextIndicatorData::TextIndicatorData(v16 + (v21 << 7) + 16, (__int128 *)(v39 + 16));
          v40 = *(_QWORD *)(v39 + 112);
          if ((v40 & 0x8000000000000) != 0)
          {
            v53 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              atomic_store(1u, v53);
              WTF::fastFree((WTF *)v53, v8);
            }
          }
          v41 = *(_DWORD **)(v39 + 104);
          *(_QWORD *)(v39 + 104) = 0;
          if (v41)
          {
            if (v41[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
            else
              --v41[2];
          }
          v42 = v2 + (v10 << 7);
          v43 = *(_DWORD **)(v42 + 96);
          *(_QWORD *)(v42 + 96) = 0;
          if (v43)
          {
            if (v43[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
            else
              --v43[2];
          }
          v44 = *(_DWORD **)(v42 + 88);
          *(_QWORD *)(v42 + 88) = 0;
          if (v44)
          {
            if (v44[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
            else
              --v44[2];
          }
          v45 = v2 + (v10 << 7);
          v46 = *(WTF **)(v45 + 64);
          v34 = (_QWORD *)(v45 + 64);
          v33 = v46;
          if (!v46)
            goto LABEL_63;
        }
        *v34 = 0;
        *(_DWORD *)(v2 + (v10 << 7) + 72) = 0;
        WTF::fastFree(v33, v8);
      }
LABEL_63:
      if (++v10 == v11)
        return WTF::fastFree((WTF *)(v2 - 16), v8);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int v29;
  __int16 v30;
  char v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v12 = (_QWORD *)(v10 + 16);
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v6 + 32 * v13;
      if (*(_QWORD *)v15 ^ 1 | *(_QWORD *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          v16 = v6 + 32 * v13;
          v17 = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v29 = -1640531527;
          v30 = 0;
          v31 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v29, (_QWORD *)(v6 + 32 * v13));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = v18 + 32 * v22;
            v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v24 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          *(_OWORD *)v23 = *(_OWORD *)v15;
          v25 = v6 + 32 * v13;
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)(v23 + 16) = v26;
          v27 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          if (v15 == a3)
            v14 = v23;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

uint64_t *WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *result;
  if (*result)
    v4 += 32 * *(unsigned int *)(v4 - 4);
  if ((_QWORD *)v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  v5 = a2[2];
  a2[2] = 0;
  *a3 = v5;
  if (*result)
  {
    v6 = *result + 32 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if ((_QWORD *)v6 != a2)
    return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(result, a2);
  return result;
}

void sub_19723AA54(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t *v15;
  BOOL v16;
  int v18;
  __int16 v19;
  char v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v18 = -1640531527;
  v19 = 0;
  v20 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v18, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 & v5;
  v10 = (uint64_t *)(v2 + 32 * v9);
  v11 = *v10;
  v12 = v10[1];
  if (v12 == v8 && v11 == v7)
    return v2 + 32 * v9;
  v14 = 1;
  while (v11 | v12)
  {
    v9 = ((_DWORD)v9 + v14) & v5;
    v15 = (uint64_t *)(v2 + 32 * v9);
    v11 = *v15;
    v12 = v15[1];
    v16 = v12 == v8 && v11 == v7;
    ++v14;
    if (v16)
      return v2 + 32 * v9;
  }
  if (*a1)
    return *a1 + 32 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::createTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA940;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::createTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::createTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  _BYTE v6[120];
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::createTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>(a2, v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::createTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
    return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
  return result;
}

void sub_19723AD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a24)
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v26);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::createTextIndicatorForTextAnimationID,WTF::CompletionHandler<void ()(std::optional<WebCore::TextIndicatorData> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  _BYTE v4[120];

  v4[0] = 0;
  v4[112] = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

void sub_19723ADAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::TextIndicatorData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_19723AE24(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 120))
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::TextIndicatorData>>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  void *v4;
  _BYTE v5[120];
  char v6;

  result = IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>(a1, v5);
  if (v6)
  {
    result = (uint64_t)std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v5);
    a2[120] = 1;
    if (v6)
      return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
  }
  else
  {
    *a2 = 0;
    a2[120] = 0;
  }
  return result;
}

void sub_19723AEA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::updateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2510;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WTF::UUID,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  LOBYTE(a2) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a2;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CA968;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_19723AFFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::updateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA968;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::updateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA968;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::updateUnderlyingTextVisibilityForTextAnimationID,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19723B14C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2451;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CA990;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_19723B278(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CA990;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CA990;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_19723B3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::StartPlayingPredominantVideo,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19723B430(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 32 * v10);
    if (v11 == (WTF *)-1)
      goto LABEL_9;
    if (!v11)
      break;
    if ((WTF::equal(v11, *a2, a3) & 1) != 0)
      return v3 + 32 * v10;
LABEL_9:
    ++i;
  }
  if (!*a1)
    return 0;
  return *a1 + 32 * *(unsigned int *)(*a1 - 4);
}

uint64_t *WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (!(a3 >> 28))
  {
    v6 = WTF::fastMalloc((WTF *)(16 * a3));
    *((_DWORD *)v3 + 2) = a3;
    *v3 = v6;
    v7 = a2 + 16 * a3;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *v3;
      v10 = *(unsigned int **)a2;
      v11 = v8;
      if (*(_QWORD *)a2)
      {
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 + 1, v10));
        v11 = *((_DWORD *)v3 + 3);
      }
      *(_QWORD *)(v9 + 16 * v8) = v10;
      *(_BYTE *)(v9 + 16 * v8 + 8) = *(_BYTE *)(a2 + 8);
      v8 = v11 + 1;
      *((_DWORD *)v3 + 3) = v11 + 1;
      a2 += 16;
    }
    while (a2 != v7);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_19723B5A8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 32 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    while (1)
    {
      v11 = (WTF::StringImpl **)(v2 + 32 * v10);
      v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v12 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v12);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 32 * v19));
          v20 = v14 + 32 * v19;
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 16, v7);
          v22 = *(WTF::StringImpl **)v20;
          *(_QWORD *)v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v21);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = *v11;
          *v11 = 0;
          *(_QWORD *)v20 = v23;
          v24 = v2 + 32 * v10;
          v25 = *(_QWORD *)(v24 + 8);
          v24 += 8;
          *(_QWORD *)(v20 + 8) = v25;
          v26 = *(unsigned int *)(v24 + 20);
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)(v20 + 24) = 0;
          v27 = v24 + 8;
          *(_DWORD *)(v20 + 28) = v26;
          if ((_DWORD)v26)
          {
            if (v26 >> 28)
            {
              __break(0xC471u);
              return;
            }
            v28 = WTF::fastMalloc((WTF *)(16 * v26));
            *(_DWORD *)(v20 + 24) = v26;
            *(_QWORD *)(v20 + 16) = v28;
            v29 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(_QWORD *)v27;
              v31 = *(_QWORD *)v27 + 16 * v29;
              do
              {
                v32 = *(unsigned int **)v30;
                if (*(_QWORD *)v30)
                {
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 + 1, v32));
                }
                *(_QWORD *)v28 = v32;
                *(_BYTE *)(v28 + 8) = *(_BYTE *)(v30 + 8);
                v28 += 16;
                v30 += 16;
              }
              while (v30 != v31);
            }
          }
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v21);
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
LABEL_38:
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
              goto LABEL_39;
            }
            *(_DWORD *)v13 -= 2;
          }
        }
        else
        {
          WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 32 * v10 + 16, v7);
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              goto LABEL_38;
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_39:
      if (++v10 == v3)
        goto LABEL_42;
    }
  }
  if (v2)
LABEL_42:
    WTF::fastFree((WTF *)(v2 - 16), v7);
}

void sub_19723B86C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebPasteboardProxy::PasteboardAccessInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebPasteboardProxy::PasteboardAccessInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[4 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[4 * v2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 4;
      v4 -= 32;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardTypes(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  CFTypeRef cf;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::getTypes();
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v5);
}

void sub_19723B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardPathnamesForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  CFTypeRef cf;
  _QWORD v9[2];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (WebKit::WebPasteboardProxy::webProcessProxyForConnection(*(WebKit::WebPasteboardProxy **)(a1 + 8), *(IPC::Connection **)(a1 + 16)))
  {
    MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 24));
    WebCore::PlatformPasteboard::getPathnamesForType();
    v2 = cf;
    cf = 0;
    if (v2)
      CFRelease(v2);
  }
  v3 = *(uint64_t **)(a1 + 40);
  v4 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v10, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
}

void sub_19723BA88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, char a13)
{
  void *v14;

  if (cf)
    CFRelease(cf);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardStringForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  CFTypeRef cf;
  WTF::StringImpl *v8;

  v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::stringForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_19723BB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardStringsForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  CFTypeRef v5;
  CFTypeRef cf;
  _BYTE v7[16];

  v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::allStringsForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v4);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_19723BC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardBufferForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WebCore::PasteboardBuffer &&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  CFTypeRef cf;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;

  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::bufferForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 16));
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(uint64_t **)(a1 + 24);
  v4 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = v12;
  v12 = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19723BD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10, WTF::StringImpl *a11, unsigned int *a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a12, v15);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardChangeCount(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  v2 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v3 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardColor(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WebCore::Color &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  CFTypeRef v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  CFTypeRef cf;
  uint64_t v9;

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::color((WebCore::PlatformPasteboard *)&cf);
  v2 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if ((v9 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723BF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if ((a10 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardURL(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::RefCountedBase *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  WTF::StringImpl *v6;

  v1 = *(WTF::RefCountedBase **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::url((WebCore::PlatformPasteboard *)&cf);
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v1, (uint64_t)&v6);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723C058(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::addPasteboardTypes(IPC::Connection &,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v5 = WebCore::PlatformPasteboard::addTypes();
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v7 = *(uint64_t **)(a1 + 40);
  v8 = *v7;
  *v7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19723C174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardTypes(IPC::Connection &,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v5 = WebCore::PlatformPasteboard::setTypes();
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v7 = *(uint64_t **)(a1 + 40);
  v8 = *v7;
  *v7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19723C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardURL(IPC::Connection &,WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v5 = WebCore::PlatformPasteboard::setURL();
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v7 = *(uint64_t **)(a1 + 40);
  v8 = *v7;
  *v7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19723C38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardColor(IPC::Connection &,WTF::String const&,WebCore::Color const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v5 = WebCore::PlatformPasteboard::setColor((WebCore::PlatformPasteboard *)&cf, *(const Color **)(a1 + 16));
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v7 = *(uint64_t **)(a1 + 40);
  v8 = *v7;
  *v7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19723C498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardStringForType(IPC::Connection &,WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 32);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v5 = WebCore::PlatformPasteboard::setStringForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 16), *(const WTF::String **)(a1 + 24));
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 40), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v7 = *(uint64_t **)(a1 + 48);
  v8 = *v7;
  *v7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19723C5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::containsURLStringSuitableForLoading(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  v2 = WebCore::PlatformPasteboard::containsURLStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf);
  v3 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723C654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::urlStringSuitableForLoading(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String&&,WTF::String&)> &&)::$_0,void>::call(uint64_t a1)
{
  CFTypeRef v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  CFTypeRef cf;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v10 = 0;
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::urlStringSuitableForLoading((WebCore::PlatformPasteboard *)&cf, (WTF::String *)&v10);
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  *v3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, &v9, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19723C764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v15);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::setPasteboardBufferForType(IPC::Connection &,WTF::String const&,WTF::String const&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t *v8;
  uint64_t v9;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 32);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  if (**(_QWORD **)(a1 + 16))
  {
    MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
    v5 = WebCore::PlatformPasteboard::setBufferForType((WebCore::PlatformPasteboard *)&cf, **(WebCore::SharedBuffer ***)(a1 + 16), *(const WTF::String **)(a1 + 24));
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
    v5 = WebCore::PlatformPasteboard::setBufferForType((WebCore::PlatformPasteboard *)&cf, 0, *(const WTF::String **)(a1 + 24));
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
  }
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 40), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v8 = *(uint64_t **)(a1 + 48);
  v9 = *v8;
  *v8 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_19723C93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getNumberOfFiles(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  v2 = WebCore::PlatformPasteboard::numberOfFiles((WebCore::PlatformPasteboard *)&cf);
  v3 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::typesSafeForDOMToReadAndWrite(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  CFTypeRef v5;
  CFTypeRef cf;
  _BYTE v7[16];

  v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v4);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_19723CAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeCustomData(IPC::Connection &,WTF::Vector<WebCore::PasteboardCustomData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(long long)> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v5 = WebCore::PlatformPasteboard::write();
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, *(IPC::Connection **)(a1 + 32), *(WTF::StringImpl ***)(a1 + 8), v3, v5);
  v7 = *(uint64_t **)(a1 + 40);
  v8 = *v7;
  *v7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19723CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::allPasteboardItemInfo(IPC::Connection &,WTF::String const&,long long,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  _BYTE v6[24];

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::allPasteboardItemInfo((WebCore::PlatformPasteboard *)&cf);
  v2 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v6[16])
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723CC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a12)
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v15);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::informationForItemAtIndex(IPC::Connection &,unsigned long,WTF::String const&,long long,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(std::optional<WebCore::PasteboardItemInfo> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  _BYTE v6[128];

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::informationForItemAtIndex((WebCore::PlatformPasteboard *)&cf);
  v2 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, v14);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::getPasteboardItemsCount(IPC::Connection &,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  v2 = WebCore::PlatformPasteboard::count((WebCore::PlatformPasteboard *)&cf);
  v3 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19723CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::readStringFromPasteboard(IPC::Connection &,unsigned long,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  CFTypeRef cf;
  WTF::StringImpl *v8;

  v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::readString((WebCore::PlatformPasteboard *)&cf, **(_QWORD **)(a1 + 24), *(const WTF::String **)(a1 + 32));
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void sub_19723CF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::readURLFromPasteboard(IPC::Connection &,unsigned long,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::String&&,WTF::String&)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  int v4;
  CFTypeRef v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  CFTypeRef cf;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v14 = 0;
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::readURL((WebCore::PlatformPasteboard *)&cf, **(_QWORD **)(a1 + 16), (WTF::String *)&v14);
  v3 = v12;
  if (v12)
  {
    v4 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    v13 = v3;
    v12 = 0;
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      WTF::StringImpl::destroy(v3, v2);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *v6;
  *v6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v13, &v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19723D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v11 = v9;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v14 = *(WTF::StringImpl **)(v10 - 32);
  *(_QWORD *)(v10 - 32) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)(v10 - 24);
  *(_QWORD *)(v10 - 24) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::readBufferFromPasteboard(IPC::Connection &,std::optional<unsigned long>,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  CFTypeRef v5;
  CFTypeRef cf;
  unsigned int *v7;

  v1 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  WebCore::PlatformPasteboard::readBuffer();
  v2 = *v1;
  *v1 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v2 + 16))(v2, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = v7;
  v7 = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v3);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_19723D1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, unsigned int *a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v13);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::containsStringSafeForDOMToReadForType(IPC::Connection &,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  v2 = *(uint64_t **)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 16));
  v3 = WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 24));
  v4 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_19723D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeURLToPasteboard(IPC::Connection &,WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;
  IPC::Connection *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  CFTypeRef v9;
  IPC::Encoder *result;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::write();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(IPC::Connection **)(a1 + 32);
  v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, v7);
  v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 32));
  if (result)
  {
    cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_19723D39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2583;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *a2);
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_19723D48C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeWebContentToPasteboard(IPC::Connection &,WebCore::PasteboardWebContent const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;
  IPC::Connection *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  CFTypeRef v9;
  IPC::Encoder *result;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::write();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(IPC::Connection **)(a1 + 32);
  v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, v7);
  v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 32));
  if (result)
  {
    cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_19723D5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeImageToPasteboard(IPC::Connection &,WebCore::PasteboardImage const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;
  IPC::Connection *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  CFTypeRef v9;
  IPC::Encoder *result;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 24);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::write();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(IPC::Connection **)(a1 + 32);
  v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, v7);
  v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 32));
  if (result)
  {
    cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_19723D6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPasteboardProxy::writeStringToPasteboard(IPC::Connection &,WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPasteboardProxy *v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;
  IPC::Connection *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  CFTypeRef v9;
  IPC::Encoder *result;
  CFTypeRef cf;

  v2 = *(WebKit::WebPasteboardProxy **)(a1 + 32);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  v3 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  MEMORY[0x19AEAFFC4](&cf, *(_QWORD *)(a1 + 8));
  WebCore::PlatformPasteboard::write((WebCore::PlatformPasteboard *)&cf, *(const WTF::String **)(a1 + 16), *(const WTF::String **)(a1 + 24));
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(IPC::Connection **)(a1 + 40);
  v7 = *(WTF::StringImpl ***)(a1 + 8);
  MEMORY[0x19AEAFFC4](&cf, v7);
  v8 = WebCore::PlatformPasteboard::changeCount((WebCore::PlatformPasteboard *)&cf);
  WebKit::WebPasteboardProxy::didModifyContentsOfPasteboard(v2, v6, v7, v3, v8);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  result = (IPC::Encoder *)WebKit::WebPasteboardProxy::webProcessProxyForConnection(v2, *(IPC::Connection **)(a1 + 40));
  if (result)
  {
    cf = *(CFTypeRef *)(a1 + 8);
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::DidWriteToPasteboardAsynchronously>((uint64_t)result, (uint64_t **)&cf);
  }
  return result;
}

void sub_19723D7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::moveOverlapping(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPasteboardProxy::PasteboardAccessType>>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (char *)(a3 + (char *)a2 - (char *)result);
    do
    {
      v6 = *((_QWORD *)v3 - 2);
      v3 -= 4;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v5 - 2) = v6;
      v5 -= 16;
      v5[8] = *((_BYTE *)v3 + 8);
      result = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        do
        {
          v7 = __ldaxr(result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, result));
        if (!v8)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk const*,WebCore::OrganizationStorageAccessPromptQuirk*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    WTF::String::operator=((WTF::StringImpl **)a4, (WTF::StringImpl *)v5);
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::operator=((uint64_t *)(a4 + 8), v5 + 1);
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a4 + 16), (uint64_t)(v5 + 2));
    a4 += 32;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

unsigned int *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WTF::URL>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v4));
      a1[3] = v5;
      v4 = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WTF::URL const*,WTF::URL const*,WTF::URL*,0>(*(_QWORD *)a2, *(_QWORD *)a2 + 40 * v4, *(_QWORD *)a1);
    v6 = a1[3];
    v7 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v6 != v7)
    {
      v8 = *(_QWORD *)a2 + 40 * v7;
      v9 = 5 * v6;
      v10 = *(_QWORD *)a1 + 40 * v6;
      v11 = *(_QWORD *)a2 + 8 * v9;
      do
      {
        v12 = *(_DWORD **)v11;
        if (*(_QWORD *)v11)
          *v12 += 2;
        *(_QWORD *)v10 = v12;
        v13 = *(_OWORD *)(v11 + 8);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(v10 + 8) = v13;
        v11 += 40;
        v10 += 40;
      }
      while (v11 != v8);
      LODWORD(v6) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v6;
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WTF::URL const*,WTF::URL const*,WTF::URL*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    WTF::String::operator=((WTF::StringImpl **)a3, (WTF::StringImpl *)v4);
    v6 = *(_OWORD *)(v4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(a3 + 24) = v6;
    a3 += 40;
    v4 += 40;
  }
  while (v4 != v5);
  return v5;
}

uint64_t WTF::VectorCopier<false,WebCore::OrganizationStorageAccessPromptQuirk>::uninitializedCopy<WebCore::OrganizationStorageAccessPromptQuirk>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;

  if (result != a2)
  {
    v4 = result;
    v5 = (uint64_t *)(a3 + 8);
    do
    {
      v6 = *(_DWORD **)v4;
      if (*(_QWORD *)v4)
        *v6 += 2;
      *(v5 - 1) = (uint64_t)v6;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v5, (uint64_t *)(v4 + 8));
      result = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v5 + 1), (uint64_t *)(v4 + 16));
      v4 += 32;
      v5 += 4;
    }
    while (v4 != a2);
  }
  return result;
}

void sub_19723DBB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 - 8);
  *(_QWORD *)(v2 - 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 40 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        if (*(_QWORD *)v8)
          *v10 += 2;
        *(_QWORD *)v6 = v10;
        v11 = *(_OWORD *)(v8 + 8);
        *(_OWORD *)(v6 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v6 + 8) = v11;
        v8 += 40;
        v6 += 40;
      }
      while (v8 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralE_block_invoke(uint64_t a1, int token)
{
  uint32_t state;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  uint64_t state64;

  state64 = 0;
  state = notify_get_state(token, &state64);
  v4 = *(unsigned int **)(a1 + 32);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v9 = *(_OWORD *)(a1 + 40);
  v6 = state64;
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = &off_1E34CAE98;
  *(_QWORD *)(v7 + 8) = v4;
  *(_OWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 32) = v6;
  *(_DWORD *)(v7 + 40) = state;
  v10 = v7;
  WTF::callOnMainRunLoop();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_19723DD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c102_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralEEUliE_(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __n128 result;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(a1 + 32) = v2;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c102_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralEEUliE_(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_1::operator() const(WTF::ASCIILiteral const&)::{lambda(int)#1}::operator() const(int)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CAE98;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_1::operator() const(WTF::ASCIILiteral const&)::{lambda(int)#1}::operator() const(int)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CAE98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_1::operator() const(WTF::ASCIILiteral const&)::{lambda(int)#1}::operator() const(int)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  char v21;
  _BYTE v22[31];
  WTF::StringImpl *v23;
  _BYTE v24[32];
  IPC::Encoder *v25;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v5 = *(_QWORD *)(a1 + 24);
      if (!v5)
        goto LABEL_32;
      v4 = (void *)(v5 - 1);
      if (v5 == 1)
      {
        v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v6 = *(WTF::StringImpl **)v24;
      }
      v23 = v6;
LABEL_7:
      v7 = *(unsigned int *)(v2 + 68);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(v2 + 56);
        v9 = 8 * v7;
        while (1)
        {
          v10 = *v8;
          v11 = *(_QWORD *)(*v8 + 144);
          if (!v11 || !*(_QWORD *)(v11 + 352))
            goto LABEL_15;
          xpc_connection_get_audit_token();
          v12 = *(_QWORD *)(*v8 + 144);
          if (!v12 || !*(_QWORD *)(v12 + 352))
          {
            std::__throw_bad_optional_access[abi:sn180100]();
            __break(1u);
LABEL_32:
            v6 = 0;
            v23 = 0;
            goto LABEL_7;
          }
          xpc_connection_get_audit_token();
          *(_OWORD *)v22 = *(_OWORD *)&v24[1];
          *(_OWORD *)&v22[15] = *(_OWORD *)&v24[16];
          v21 = v24[0];
          if (WTF::hasEntitlement())
            break;
LABEL_23:
          ++v8;
          v9 -= 8;
          if (!v9)
          {
            v6 = v23;
            goto LABEL_25;
          }
        }
        v10 = *v8;
LABEL_15:
        if (*(_DWORD *)(a1 + 40))
        {
          v13 = 0;
          LOBYTE(v19) = 0;
        }
        else
        {
          v19 = *(_QWORD *)(a1 + 32);
          v13 = 1;
        }
        v20 = v13;
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 2600;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v25 = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, (uint64_t *)&v23);
        IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v14, &v19);
        v24[0] = 0;
        v24[16] = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v25, 0, (uint64_t)v24, 1);
        if (v24[16])
        {
          v15 = *(_QWORD *)v24;
          *(_QWORD *)v24 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        v16 = v25;
        v25 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v4);
          WTF::fastFree(v17, v18);
        }
        goto LABEL_23;
      }
LABEL_25:
      v23 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v6 -= 2;
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_19723E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  CFRelease(*(CFTypeRef *)(v20 - 8));
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (unint64_t)v5 + 4 * *(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    v6 = a3 - (_QWORD)v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 4 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

void ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSString_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (*(_DWORD *)(v2 + 68))
      {
        MEMORY[0x19AEABCC8](&v17, *(_QWORD *)(a1 + 40));
        v5 = *(unsigned int *)(v2 + 68);
        if ((_DWORD)v5)
        {
          v6 = *(uint64_t **)(v2 + 56);
          v7 = 8 * v5;
          do
          {
            v8 = *v6;
            MEMORY[0x19AEABCC8](&v16, *(_QWORD *)(a1 + 40));
            v9 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v9 = 2601;
            *(_QWORD *)(v9 + 8) = 0;
            *(_QWORD *)(v9 + 528) = v9 + 16;
            *(_QWORD *)(v9 + 536) = v9 + 16;
            *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v9 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
            v20 = (IPC::Encoder *)v9;
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)&v16);
            LOBYTE(v18) = 0;
            v19 = 0;
            WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v20, 0, (uint64_t)&v18, 1);
            if (v19)
            {
              v10 = v18;
              v18 = 0;
              if (v10)
                (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            }
            v11 = v20;
            v20 = 0;
            if (v11)
            {
              IPC::Encoder::~Encoder(v11, v4);
              WTF::fastFree(v12, v13);
            }
            v14 = v16;
            v16 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v4);
              else
                *(_DWORD *)v14 -= 2;
            }
            ++v6;
            v7 -= 8;
          }
          while (v7);
        }
        v15 = v17;
        v17 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v4);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_19723E468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  uint64_t v16;

  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c106_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSStringEUlP14NSNotificationE_(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v4;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c106_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSStringEUlP14NSNotificationE_(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  const void *v11;
  const void *v12;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(WTF **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v8 = (_QWORD *)v6;
        v9 = 8 * v5;
        v10 = v4;
        do
        {
          v11 = *(const void **)v10;
          *(_QWORD *)v10 = 0;
          *v8 = v11;
          v12 = *(const void **)v10;
          *(_QWORD *)v10 = 0;
          if (v12)
            CFRelease(v12);
          ++v8;
          v10 = (WTF *)((char *)v10 + 8);
          v9 -= 8;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

uint64_t WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(const void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        CFRelease(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::lockdownModeStateChanged(void)::$_0,void,WebKit::LockdownModeObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::lockdownModeStateChanged(void)::$_1,void,WebKit::LockdownModeObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetScreenProperties>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  _DWORD **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2646;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = (_DWORD **)(*a2 + 2);
  LODWORD(a2) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = (_DWORD)a2;
  IPC::ArgumentCoder<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits> const&>((IPC::Encoder *)v8, v9);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void sub_19723E878(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerHighDynamicRangeChangeCallback(void)::$_0,void,BOOL>::call(WebCore *a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  char *v7;
  uint64_t *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  WebCore::collectScreenProperties(a1);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    v2 = v8;
    v3 = 8 * v9;
    do
    {
      v4 = *v2;
      v7 = &v10;
      WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetScreenProperties>(v4, (_DWORD **)&v7, 0);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  result = v11;
  if (v11)
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v11, v5);
  return result;
}

void sub_19723E94C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v15;

  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a14)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(a14, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::createForFile@<X0>(WebKit *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  void *v5;
  WTF *v6;
  char v7;

  result = WTF::FileSystemImpl::readEntireFile(this, a2);
  if (v7)
  {
    WebCore::KeyedDecoder::decoder();
    result = (uint64_t)v6;
    if (v6)
      return WTF::fastFree(v6, v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebKit::writeToDisk(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned int *v3;
  WTF::FileSystemImpl *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  WebCore::SharedBuffer *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::SharedBuffer **__return_ptr))(**(_QWORD **)a1 + 88))(&v8);
  if (v8)
  {
    v1 = WTF::FileSystemImpl::openAndLockFile();
    v3 = (unsigned int *)v8;
    if ((_DWORD)v1 != -1)
    {
      v4 = (WTF::FileSystemImpl *)v1;
      WebCore::SharedBuffer::data(v8);
      v5 = WTF::FileSystemImpl::writeToFile();
      WTF::FileSystemImpl::unlockAndCloseFile(v4);
      v3 = (unsigned int *)v8;
      v6 = *((_QWORD *)v8 + 6);
      if (v5 == v6
        || (v7 = qword_1ECE71050, !os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR)))
      {
        v8 = 0;
LABEL_8:
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
        return;
      }
      *(_DWORD *)buf = 67109376;
      v10 = v5;
      v11 = 2048;
      v12 = v6;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Disk persistency: We only wrote %d out of %zu bytes to disk", buf, 0x12u);
      v3 = (unsigned int *)v8;
    }
    v8 = 0;
    if (!v3)
      return;
    goto LABEL_8;
  }
}

uint64_t *WebKit::WebProcessProxy::platformPathsWithAssumedReadAccess(WebKit::WebProcessProxy *this)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  WTF::StringImpl **v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int i;
  int v23;
  WTF **v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  WTF *v28;
  uint64_t j;
  WTF::StringImpl *v30;
  _BYTE v31[8];
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_79 & 1) == 0)
  {
    MEMORY[0x19AEABCC8](v31, objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.WebCore")), "resourcePath"), "stringByStandardizingPath"));
    v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", NSClassFromString(CFSTR("WKWebView"))), "resourcePath"), "stringByStandardizingPath");
    MEMORY[0x19AEABCC8](v32, v2);
    v4 = 0;
    qword_1ECE72B40 = 0;
    *(_QWORD *)&dword_1ECE72B48 = 0;
    *(_QWORD *)((char *)&dword_1ECE72B4C + 1) = 0;
    do
    {
      v5 = dword_1ECE72B48;
      if (20 * (unint64_t)dword_1ECE72B4C >= 19 * (unint64_t)dword_1ECE72B48
        || (dword_1ECE72B48 <= (2 * dword_1ECE72B4C) ? (v6 = byte_1ECE72B54 == 0) : (v6 = 1), !v6))
      {
        if (dword_1ECE72B48)
          v7 = 2 * dword_1ECE72B48;
        else
          v7 = 8;
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash((uint64_t)&qword_1ECE72B40, v7);
        v5 = dword_1ECE72B48;
      }
      v8 = (WTF::StringImpl **)&v31[8 * v4];
      v9 = dword_1ECE72B50;
      v10 = *((_DWORD *)*v8 + 4);
      if (v10 >= 0x100)
        v11 = v10 >> 8;
      else
        v11 = WTF::StringImpl::hashSlowCase(*v8);
      v12 = v5 - 1;
      v13 = (v11 ^ v9) & (v5 - 1);
      v14 = (WTF **)(qword_1ECE72B40 + 8 * v13);
      v15 = *v14;
      if (*v14)
      {
        v16 = 0;
        while (1)
        {
          v17 = *((_DWORD *)v15 + 4);
          v18 = v17 >= 0x100 ? v17 >> 8 : WTF::StringImpl::hashSlowCase(v15);
          v19 = (v13 + v5 - ((v18 ^ v9) & v12)) & v12;
          if (v16 > v19)
            break;
          if (v18 == v11 && (WTF::equal(*v14, *v8, v3) & 1) != 0)
            goto LABEL_40;
          v13 = (v13 + 1) & v12;
          ++v16;
          v14 = (WTF **)(qword_1ECE72B40 + 8 * v13);
          v15 = *v14;
          if (!*v14)
          {
            if (v16 >= 0x80)
              byte_1ECE72B54 = 1;
            goto LABEL_27;
          }
        }
        if (v16 >= 0x80)
          byte_1ECE72B54 = 1;
        v21 = *v14;
        *v14 = 0;
        WTF::String::operator=(v14, (WTF::StringImpl *)&v31[8 * v4]);
        for (i = v13 + 1; ; i = v23 + 1)
        {
          v23 = i & v12;
          v24 = (WTF **)(qword_1ECE72B40 + 8 * (i & v12));
          v25 = *v24;
          if (!*v24)
            break;
          v26 = *((_DWORD *)v25 + 4);
          if (v26 >= 0x100)
            v27 = v26 >> 8;
          else
            v27 = WTF::StringImpl::hashSlowCase(v25);
          if (++v19 > ((v23 + v5 - ((v27 ^ v9) & v12)) & v12))
          {
            v28 = *v24;
            *v24 = v21;
            v21 = v28;
            v19 = (v23 + v5 - ((v27 ^ v9) & v12)) & v12;
          }
        }
        *v24 = v21;
      }
      else
      {
LABEL_27:
        WTF::String::operator=(v14, (WTF::StringImpl *)&v31[8 * v4]);
      }
      ++dword_1ECE72B4C;
LABEL_40:
      ++v4;
    }
    while (v4 != 2);
    for (j = 8; j != -8; j -= 8)
    {
      v30 = *(WTF::StringImpl **)&v31[j];
      *(_QWORD *)&v31[j] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v20);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    _MergedGlobals_79 = 1;
  }
  return &qword_1ECE72B40;
}

void sub_19723EE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessProxy::cacheMediaMIMETypes(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v3 = result;
  {
    if (dword_1EE341D74)
      return result;
  }
  else
  {
    WebKit::mediaTypeCache(void)::typeCache = 0;
    unk_1EE341D70 = 0;
  }
  result = (uint64_t)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&WebKit::mediaTypeCache(void)::typeCache, a2);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 512) + 8);
  v5 = v4 - 16;
  if (!v4)
    v5 = 0;
  v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)(v5 + 72);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      v10 = (unsigned int *)(*v7 + 16);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (v9 != v3)
        result = WebKit::WebProcessProxy::cacheMediaMIMETypesInternal(v3, a2);
      if (v9)
        result = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v10);
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_19723EFD8(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessProxy::cacheMediaMIMETypesInternal(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  {
    if (dword_1EE341D74)
      return result;
  }
  else
  {
    WebKit::mediaTypeCache(void)::typeCache = 0;
    unk_1EE341D70 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&WebKit::mediaTypeCache(void)::typeCache, a2);
  v4 = a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaMIMETypes>(v3, &v4, 0, 0);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaMIMETypes>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2643;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19723F154(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::UnblockServicesRequiredByAccessibility>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2654;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_19723F280(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcessProxy::fontdMachExtensionHandles@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[31];
  char v12;
  _OWORD v13[2];
  uint64_t v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(this + 782);
  *(_BYTE *)(this + 782) = 1;
  if (v3)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return this;
  }
  v14[0] = (uint64_t)"com.apple.fonts";
  v14[1] = 16;
  v4 = *(_QWORD *)(this + 144);
  if (!v4)
    goto LABEL_7;
  if (!*(_QWORD *)(v4 + 352))
  {
    LOBYTE(v4) = 0;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  xpc_connection_get_audit_token();
  v5 = v10;
  v13[0] = *(_OWORD *)v11;
  *(_OWORD *)((char *)v13 + 15) = *(_OWORD *)&v11[15];
  LOBYTE(v4) = 1;
LABEL_8:
  v10 = v5;
  *(_OWORD *)v11 = v13[0];
  *(_OWORD *)&v11[15] = *(_OWORD *)((char *)v13 + 15);
  v12 = v4;
  WebKit::SandboxExtension::createHandlesForMachLookup(v14, 1uLL, (__int128 *)&v10, 1, (uint64_t)&v8);
  *(_QWORD *)a2 = v8;
  v6 = v9;
  v8 = 0;
  v9 = 0;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 1;
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v7);
}

uint64_t WebKit::WebProcessProxy::shouldDisableJITCage(WebKit::WebProcessProxy *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebProcessProxy::shouldDisableJITCage(WebKit::WebProcessProxy *this)
{
  return 0;
}

void WebKit::WebURLSchemeHandlerCocoa::platformStartTask(uint64_t a1, WebKit::WebPageProxy *this, uint64_t a3)
{
  const void *v5;
  const void *v6;
  const void *v7;

  v5 = *(const void **)(a3 + 8);
  if (v5)
    CFRetain(*(CFTypeRef *)(a3 + 8));
  WebKit::WebPageProxy::cocoaView(this, &v7);
  v6 = v7;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 48), "webView:startURLSchemeTask:", v7, v5);
    CFRelease(v6);
  }
  if (v5)
    CFRelease(v5);
}

void sub_19723F474(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebURLSchemeHandlerCocoa::platformStopTask(uint64_t a1, WebKit::WebPageProxy *this, uint64_t a3)
{
  const void *v6;
  const void *v7;
  const void *v8;

  v6 = *(const void **)(a3 + 8);
  if (v6)
    CFRetain(*(CFTypeRef *)(a3 + 8));
  WebKit::WebPageProxy::cocoaView(this, &v8);
  v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 48), "webView:stopURLSchemeTask:", v8, v6);
    CFRelease(v7);
    if (!v6)
      return;
    goto LABEL_5;
  }
  *(_BYTE *)(a3 + 269) = 1;
  if (v6)
LABEL_5:
    CFRelease(v6);
}

void sub_19723F534(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::XPCConnectionTerminationWatchdog::startConnectionTerminationWatchdog(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  return WebKit::XPCConnectionTerminationWatchdog::XPCConnectionTerminationWatchdog(v2, a1);
}

void sub_19723F5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEB936C](v1, 0x10E2C4057BE908CLL);
  _Unwind_Resume(a1);
}

uint64_t WebKit::XPCConnectionTerminationWatchdog::XPCConnectionTerminationWatchdog(uint64_t a1, _QWORD *a2)
{
  WTF::RunLoop *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = off_1E34CB088;
  v5[1] = WebKit::XPCConnectionTerminationWatchdog::watchdogTimerFired;
  v5[2] = 0;
  v5[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)a1, v4);
  *(_QWORD *)a1 = off_1E34ABE00;
  *(_QWORD *)(a1 + 24) = v5;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v12;
  v11 = v12;
  v12 = 0;
  v7 = WTF::fastMalloc((WTF *)0xC0);
  WebKit::ProcessAndUIAssertion::ProcessAndUIAssertion(v7, a2, (_DWORD **)&v11, 1);
  *(_QWORD *)(a1 + 32) = v7;
  WebKit::ProcessAssertion::acquireAsync(v7, (uint64_t *)&v12);
  if (v12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  v9 = a2[17];
  if (v9)
  {
    std::__optional_copy_base<WebKit::ExtensionProcess,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 40), v9 + 40);
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 56) = 0;
  }
  WTF::RunLoop::TimerBase::start();
  return a1;
}

void sub_19723F718(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  WTF::RunLoop::TimerBase *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v13 = *((_QWORD *)v10 + 4);
  *((_QWORD *)v10 + 4) = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 8), a2);
  *(_QWORD *)v10 = v11;
  v14 = *((_QWORD *)v10 + 3);
  *((_QWORD *)v10 + 3) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  WTF::RunLoop::TimerBase::~TimerBase(v10);
  _Unwind_Resume(a1);
}

void sub_19723F7D8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x19723F7D0);
}

uint64_t WebKit::XPCConnectionTerminationWatchdog::watchdogTimerFired(WebKit::XPCConnectionTerminationWatchdog *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  if (*((_BYTE *)this + 56))
  {
    WebKit::ExtensionProcess::invalidate((WebKit::XPCConnectionTerminationWatchdog *)((char *)this + 40));
    if (*((_BYTE *)this + 56))
    {
      v3 = *((unsigned int *)this + 12);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, char *))off_1E34CB060[v3])(&v7, (char *)this + 40);
      *((_DWORD *)this + 12) = -1;
    }
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  *(_QWORD *)this = off_1E34ABE00;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::RunLoop::TimerBase::~TimerBase(this);
  return MEMORY[0x19AEB936C]();
}

_QWORD *WebKit::NavigationSOAuthorizationSession::NavigationSOAuthorizationSession(_QWORD *a1, const void **a2, uint64_t *a3, uint64_t a4, char a5, uint64_t *a6)
{
  const void *v11;
  uint64_t v12;
  const void *v14;

  v11 = *a2;
  v14 = v11;
  if (v11)
    CFRetain(v11);
  WebKit::SOAuthorizationSession::SOAuthorizationSession((uint64_t)a1, &v14, a3, a4, a5);
  if (v11)
    CFRelease(v11);
  *a1 = off_1E34CAFA8;
  a1[8] = &unk_1E34CB000;
  a1[9] = 0;
  v12 = *a6;
  *a6 = 0;
  a1[10] = v12;
  a1[11] = 0;
  return a1;
}

void sub_19723F950(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession(WebKit::NavigationSOAuthorizationSession *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E34CAFA8;
  *((_QWORD *)this + 8) = &unk_1E34CB000;
  v3 = (_QWORD *)((char *)this + 64);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_BYTE *)this + 16) == 2)
  {
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v6 + 1144, v3);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 9, a2);
  WebKit::SOAuthorizationSession::~SOAuthorizationSession(this);
}

void sub_19723FA44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *(WTF::StringImpl **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 72), v4);
  WebKit::SOAuthorizationSession::~SOAuthorizationSession((WebKit::SOAuthorizationSession *)v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationSOAuthorizationSession::shouldStartInternal(WebKit::NavigationSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  const char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BYTE v18[12];
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v3 == 2)
      {
        v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        v4 = "PopUp";
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = "Redirect";
    }
    v5 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v5 = "Active";
        break;
      case 2:
        v5 = "Waiting";
        break;
      case 3:
        v5 = "Completed";
        break;
      default:
        v5 = 0;
        break;
    }
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v6 = v7 - 16;
      else
        v6 = 0;
    }
    *(_DWORD *)v18 = 134218754;
    *(_QWORD *)&v18[4] = this;
    v19 = 2080;
    v20 = v4;
    v21 = 2080;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::shouldStartInternal: m_page=%p", v18, 0x2Au);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v9 - 8));
    v10 = 0;
    v11 = v9 - 16;
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  (*(void (**)(WebKit::NavigationSOAuthorizationSession *))(*(_QWORD *)this + 64))(this);
  if ((*(_WORD *)(*(_QWORD *)(v11 + 32) + 48) & 0x10) != 0)
  {
    WebKit::SOAuthorizationSession::start(this);
    goto LABEL_42;
  }
  v12 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v13 == 2)
      {
        v14 = "SubFrame";
      }
      else if (v13 == 1)
      {
        v14 = "PopUp";
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = "Redirect";
    }
    v15 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v15 = "Active";
        break;
      case 2:
        v15 = "Waiting";
        break;
      case 3:
        v15 = "Completed";
        break;
      default:
        v15 = 0;
        break;
    }
    *(_DWORD *)v18 = 134218498;
    *(_QWORD *)&v18[4] = this;
    v19 = 2080;
    v20 = v14;
    v21 = 2080;
    v22 = v15;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::shouldStartInternal: Starting Extensible SSO authentication for a web view that is not attached to a window. Loading will pause until a window is attached.", v18, 0x20u);
  }
  *((_BYTE *)this + 16) = 2;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v11 + 1160, (unsigned int *)this + 16, (uint64_t)v18);
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 968), v18);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *(_QWORD *)v18;
  if (!v17)
  {
LABEL_42:
    if ((v10 & 1) != 0)
      return;
    goto LABEL_43;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_42;
  }
  WTF::StringImpl::destroy(v17, v16);
  if ((v10 & 1) != 0)
    return;
LABEL_43:
  CFRelease(*(CFTypeRef *)(v11 + 8));
}

void sub_19723FDD8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationSOAuthorizationSession::webViewDidMoveToWindow(WebKit::NavigationSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  _BYTE v19[12];
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    *(_DWORD *)v19 = 134218498;
    *(_QWORD *)&v19[4] = this;
    v20 = 2080;
    v21 = v6;
    v22 = 2080;
    v23 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::webViewDidMoveToWindow", v19, 0x20u);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      if (*((_BYTE *)this + 16) == 2 && (*(_WORD *)(*(_QWORD *)(v9 + 16) + 48) & 0x10) != 0)
      {
        v10 = qword_1ECE70E98;
        if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *((unsigned __int8 *)this + 48);
          if (*((_BYTE *)this + 48))
          {
            if (v11 == 2)
            {
              v12 = "SubFrame";
            }
            else if (v11 == 1)
            {
              v12 = "PopUp";
            }
            else
            {
              v12 = 0;
            }
          }
          else
          {
            v12 = "Redirect";
          }
          *(_DWORD *)v19 = 134218498;
          *(_QWORD *)&v19[4] = this;
          v20 = 2080;
          v21 = v12;
          v22 = 2080;
          v23 = "Waiting";
          _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] NavigationSOAuthorizationSession::pageActiveURLDidChangeDuringWaiting", v19, 0x20u);
        }
        v13 = *((_QWORD *)this + 5);
        if (!v13)
          goto LABEL_36;
        v14 = *(_QWORD *)(v13 + 8);
        if (!v14)
          goto LABEL_36;
        CFRetain(*(CFTypeRef *)(v14 - 8));
        WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v14 + 16) + 968), v19);
        v15 = *(WTF::StringImpl **)v19;
        v18 = WTF::equal(*(WTF **)v19, *((const WTF::StringImpl **)this + 11), v16);
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v17);
          else
            *(_DWORD *)v15 -= 2;
        }
        CFRelease(*(CFTypeRef *)(v14 - 8));
        if ((v18 & 1) != 0)
          WebKit::SOAuthorizationSession::start(this);
        else
LABEL_36:
          WebKit::SOAuthorizationSession::abort(this);
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v9 + 1144, (_QWORD *)this + 8);
      }
      CFRelease(*(CFTypeRef *)(v9 - 8));
    }
  }
}

void sub_1972400A4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v4 - 8));
  CFRelease(*(CFTypeRef *)(v3 - 8));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebKit::NavigationSOAuthorizationSession::webViewDidMoveToWindow(WebKit::NavigationSOAuthorizationSession *this)
{
  WebKit::NavigationSOAuthorizationSession::webViewDidMoveToWindow((WebKit::NavigationSOAuthorizationSession *)((char *)this - 64));
}

void sub_1972401D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::close(WebKit::PopUpSOAuthorizationSession *this, WKWebView *a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  WKWebView *v10;
  int v12;
  WebKit::PopUpSOAuthorizationSession *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((unsigned __int8 *)this + 48);
    v6 = "SubFrame";
    v7 = "PopUp";
    if (v5 != 1)
      v7 = 0;
    if (v5 != 2)
      v6 = v7;
    if (*((_BYTE *)this + 48))
      v8 = v6;
    else
      v8 = "Redirect";
    v9 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v9 = "Active";
        break;
      case 2:
        v9 = "Waiting";
        break;
      case 3:
        v9 = "Completed";
        break;
      default:
        v9 = 0;
        break;
    }
    v12 = 134218498;
    v13 = this;
    v14 = 2080;
    v15 = v8;
    v16 = 2080;
    v17 = v9;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::close", (uint8_t *)&v12, 0x20u);
  }
  v10 = (WKWebView *)*((_QWORD *)this + 11);
  if (v10)
  {
    if (v10 == a2 && *((_BYTE *)this + 16) == 3)
    {
      *((_QWORD *)this + 11) = 0;
      CFRelease(a2);
      WTFLogAlways();
    }
  }
}

void sub_1972403E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::create(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  const void *v13;
  const void *v14;

  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
  v13 = *a1;
  v14 = v13;
  if (v13)
    CFRetain(v13);
  WebKit::PopUpSOAuthorizationSession::PopUpSOAuthorizationSession(v12, &v14, a2, a3, a4, a5);
  *a6 = v12;
  if (v13)
    CFRelease(v13);
}

void sub_1972404C8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::PopUpSOAuthorizationSession::PopUpSOAuthorizationSession(_QWORD *a1, const void **a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v15;

  v11 = *a2;
  v15 = v11;
  if (v11)
    CFRetain(v11);
  WebKit::SOAuthorizationSession::SOAuthorizationSession((uint64_t)a1, &v15, a4, a3, 1);
  if (v11)
    CFRelease(v11);
  *a1 = off_1E34CB028;
  v12 = *a5;
  *a5 = 0;
  a1[8] = v12;
  v13 = *a6;
  *a6 = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = v13;
  return a1;
}

void sub_197240598(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PopUpSOAuthorizationSession::~PopUpSOAuthorizationSession(WebKit::PopUpSOAuthorizationSession *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v8 = 0;
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v8;
    v8 = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  v4 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebKit::SOAuthorizationSession::~SOAuthorizationSession(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::PopUpSOAuthorizationSession::~PopUpSOAuthorizationSession(this);
  WTF::fastFree(v1, v2);
}

void sub_197240674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WebKit::SOAuthorizationSession *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  v14 = (const void *)*((_QWORD *)v10 + 11);
  *((_QWORD *)v10 + 11) = 0;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)v10 + 10);
  *((_QWORD *)v10 + 10) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *((_QWORD *)v10 + 9);
  *((_QWORD *)v10 + 9) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)v10 + 8);
  *((_QWORD *)v10 + 8) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebKit::SOAuthorizationSession::~SOAuthorizationSession(v10);
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::shouldStartInternal(WebKit::PopUpSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebKit::PopUpSOAuthorizationSession *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = *((_QWORD *)this + 5);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v8 = v9 - 16;
      else
        v8 = 0;
    }
    v10 = 134218754;
    v11 = this;
    v12 = 2080;
    v13 = v6;
    v14 = 2080;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::shouldStartInternal: m_page=%p", (uint8_t *)&v10, 0x2Au);
  }
  WebKit::SOAuthorizationSession::start(this);
}

void WebKit::PopUpSOAuthorizationSession::fallBackToWebPathInternal(WebKit::PopUpSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  _BYTE v9[12];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    *(_DWORD *)v9 = 134218498;
    *(_QWORD *)&v9[4] = this;
    v10 = 2080;
    v11 = v6;
    v12 = 2080;
    v13 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::fallBackToWebPathInternal", v9, 0x20u);
  }
  *(_QWORD *)v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  (*(void (**)(_QWORD, _BYTE *, char *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), v9, (char *)this + 64);
  v8 = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
}

void sub_1972409EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::PopUpSOAuthorizationSession::abortInternal(WebKit::PopUpSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[12];
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v3 == 2)
      {
        v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        v4 = "PopUp";
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = "Redirect";
    }
    v5 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v5 = "Active";
        break;
      case 2:
        v5 = "Waiting";
        break;
      case 3:
        v5 = "Completed";
        break;
      default:
        v5 = 0;
        break;
    }
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v6 = v7 - 16;
      else
        v6 = 0;
    }
    *(_DWORD *)v15 = 134218754;
    *(_QWORD *)&v15[4] = this;
    v16 = 2080;
    v17 = v4;
    v18 = 2080;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::abortInternal: m_page=%p", v15, 0x2Au);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8
    && *(_QWORD *)(v8 + 8)
    && (WebKit::PopUpSOAuthorizationSession::initSecretWebView(this), (v9 = *((_QWORD *)this + 11)) != 0))
  {
    v10 = *(_QWORD *)(v9 + 424);
    if (v10)
      CFRetain(*(CFTypeRef *)(v10 + 8));
    *(_QWORD *)v15 = v10;
    v11 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    if (v12)
      CFRelease(*(CFTypeRef *)(v12 + 8));
    objc_msgSend(*((id *)this + 11), "evaluateJavaScript:completionHandler:", CFSTR("window.close()"), 0, *(_QWORD *)v15);
  }
  else
  {
    *(_QWORD *)v15 = 0;
    v13 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
  }
}

void sub_197240C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::initSecretWebView(WebKit::PopUpSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebPageProxy *v10;
  const void *v11;
  void *v12;
  void *v13;
  WKWebView *v14;
  uint64_t v15;
  const void *v16;
  WKSOSecretDelegate *v17;
  const void *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  _BYTE v21[12];
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    *(_DWORD *)v21 = 134218498;
    *(_QWORD *)&v21[4] = this;
    v22 = 2080;
    v23 = v6;
    v24 = 2080;
    v25 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::initSecretWebView", v21, 0x20u);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebKit::WebPageProxy *)(v9 - 16);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  WebKit::WebPageProxy::cocoaView(v10, v21);
  v11 = *(const void **)v21;
  if (*(_QWORD *)v21)
  {
    v12 = (void *)objc_msgSend((id)objc_msgSend(*(id *)v21, "configuration"), "copy");
    objc_msgSend(v12, "_setRelatedWebView:", v11);
    v13 = (void *)objc_msgSend((id)objc_msgSend(v12, "preferences"), "copy");
    objc_msgSend(v13, "_setExtensibleSSOEnabled:", 0);
    objc_msgSend(v12, "setPreferences:", v13);
    v14 = [WKWebView alloc];
    v15 = -[WKWebView initWithFrame:configuration:](v14, "initWithFrame:configuration:", v12, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    v16 = (const void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v15;
    if (v16)
      CFRelease(v16);
    v17 = -[WKSOSecretDelegate initWithSession:]([WKSOSecretDelegate alloc], "initWithSession:", this);
    v18 = (const void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v17;
    if (v18)
    {
      CFRelease(v18);
      v17 = (WKSOSecretDelegate *)*((_QWORD *)this + 10);
    }
    objc_msgSend(*((id *)this + 11), "setUIDelegate:", v17);
    objc_msgSend(*((id *)this + 11), "setNavigationDelegate:", *((_QWORD *)this + 10));
    v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 424) + 224);
    {
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v20 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v19))
    {
      __break(0xC471u);
      JUMPOUT(0x197240F48);
    }
    WTFLogAlways();
    if (v13)
      CFRelease(v13);
    if (v12)
      CFRelease(v12);
    CFRelease(v11);
  }
}

void sub_197240F7C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PopUpSOAuthorizationSession::completeInternal(WebKit::PopUpSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, NSData *a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[12];
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((unsigned __int8 *)this + 48);
    v8 = "SubFrame";
    v9 = "PopUp";
    if (v7 != 1)
      v9 = 0;
    if (v7 != 2)
      v8 = v9;
    if (*((_BYTE *)this + 48))
      v10 = v8;
    else
      v10 = "Redirect";
    v11 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v11 = "Active";
        break;
      case 2:
        v11 = "Waiting";
        break;
      case 3:
        v11 = "Completed";
        break;
      default:
        v11 = 0;
        break;
    }
    *(_DWORD *)v18 = 134218754;
    *(_QWORD *)&v18[4] = this;
    v19 = 2080;
    v20 = v10;
    v21 = 2080;
    v22 = v11;
    v23 = 1024;
    v24 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] PopUpSOAuthorizationSession::completeInternal: httpState=%d", v18, 0x26u);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 200
    && (v12 = *((_QWORD *)this + 5)) != 0
    && *(_QWORD *)(v12 + 8)
    && (WebKit::PopUpSOAuthorizationSession::initSecretWebView(this), (v13 = *((_QWORD *)this + 11)) != 0))
  {
    v14 = *(_QWORD *)(v13 + 424);
    if (v14)
      CFRetain(*(CFTypeRef *)(v14 + 8));
    *(_QWORD *)v18 = v14;
    v15 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(_QWORD *)v18;
    *(_QWORD *)v18 = 0;
    if (v16)
      CFRelease(*(CFTypeRef *)(v16 + 8));
    v17 = (void *)*((_QWORD *)this + 11);
    WebCore::ResourceResponseBase::url(a2);
    objc_msgSend(v17, "loadData:MIMEType:characterEncodingName:baseURL:", a3, CFSTR("text/html"), CFSTR("UTF-8"), WTF::URL::operator NSURL *(), *(_QWORD *)v18);
  }
  else
  {
    WebKit::PopUpSOAuthorizationSession::fallBackToWebPathInternal(this);
  }
}

void sub_197241214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebURLSchemeHandlerCocoa::~WebURLSchemeHandlerCocoa(WebKit::WebURLSchemeHandlerCocoa *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34CAF68;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34CAF68;
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebKit::WebURLSchemeHandlerCocoa::isAPIHandler(WebKit::WebURLSchemeHandlerCocoa *this)
{
  return 1;
}

uint64_t WebKit::SOAuthorizationSession::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::XPCConnectionTerminationWatchdog::*&)(void),WebKit::XPCConnectionTerminationWatchdog*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34CB0B0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_1972413E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

WebKit::RTCNetwork *WebKit::RTCNetwork::RTCNetwork(WebKit::RTCNetwork *this, const rtc::Network *a2)
{
  int v4;
  char *v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  char *v9;
  WTF *v10;
  WebKit::RTCNetwork *result;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  const rtc::IPAddress *v15;
  const rtc::IPAddress *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = *((char *)a2 + 151);
  if (v4 >= 0)
    v5 = (char *)a2 + 128;
  else
    v5 = (char *)*((_QWORD *)a2 + 16);
  if (v4 >= 0)
    v6 = (WTF *)v4;
  else
    v6 = (WTF *)*((_QWORD *)a2 + 17);
  v7 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)this, v5, v6)+ 16;
  v8 = *((char *)a2 + 175);
  if (v8 >= 0)
    v9 = (char *)a2 + 152;
  else
    v9 = (char *)*((_QWORD *)a2 + 19);
  if (v8 >= 0)
    v10 = (WTF *)*((unsigned __int8 *)a2 + 175);
  else
    v10 = (WTF *)*((_QWORD *)a2 + 20);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(v7, v9, v10);
  result = (WebKit::RTCNetwork *)WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTCNetwork *)((char *)this + 32), (const rtc::Network *)((char *)a2 + 176));
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 52);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 68);
  *((_WORD *)this + 30) = *((_WORD *)a2 + 143);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 70);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 284);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 268);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 66);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30);
  if (!v12)
    return this;
  if ((unint64_t)v12 < 0x155555560)
  {
    v13 = (WTF *)(24 * (v12 >> 5));
    v14 = WTF::fastMalloc(v13);
    *((_DWORD *)this + 22) = (v13 & 0xFFFFFFF8) / 0x18;
    *((_QWORD *)this + 10) = v14;
    v16 = (const rtc::IPAddress *)*((_QWORD *)a2 + 30);
    v15 = (const rtc::IPAddress *)*((_QWORD *)a2 + 31);
    if (v16 != v15)
    {
      v17 = v14;
      v18 = 1;
      do
      {
        WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v21, v16);
        HIDWORD(v22) = *((_DWORD *)v16 + 7);
        v19 = v17 + 24 * (v18 - 1);
        v20 = v21;
        *(_QWORD *)(v19 + 16) = v22;
        *(_OWORD *)v19 = v20;
        *((_DWORD *)this + 23) = v18++;
        v16 = (const rtc::IPAddress *)((char *)v16 + 32);
      }
      while (v16 != v15);
    }
    return this;
  }
  __break(0xC471u);
  return result;
}

void WebKit::RTCNetwork::value(WebKit::RTCNetwork *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  WebKit::RTC::Network::IPAddress *v15;
  WebKit::RTC::Network::IPAddress *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int64x2_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  void (***v33)(uint64_t);
  void (**v34)(uint64_t);
  void *__p[2];
  char *v36;
  char *v37;
  _BYTE v38[24];
  char **v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v4 = *((unsigned int *)this + 3);
  if (*(_QWORD *)this)
    v5 = 1;
  else
    v5 = (_DWORD)v4 == 0;
  if (!v5
    || ((v7 = *((_QWORD *)this + 2), v8 = *((unsigned int *)this + 7), !v7) ? (v9 = (_DWORD)v8 == 0) : (v9 = 1), !v9))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    abort();
  }
  WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)&v37, (WebKit::RTCNetwork *)((char *)this + 32));
  MEMORY[0x19AEAC0B8](a2, v3, v4, v7, v8, &v37, *((unsigned int *)this + 13), *((unsigned int *)this + 14));
  *(_WORD *)(a2 + 286) = *((_WORD *)this + 30);
  *(_DWORD *)(a2 + 280) = *((_DWORD *)this + 16);
  v10 = *((unsigned __int8 *)this + 68);
  if (*(unsigned __int8 *)(a2 + 284) != v10)
    *(_BYTE *)(a2 + 284) = v10;
  *(_BYTE *)(a2 + 268) = *((_BYTE *)this + 69);
  *(_DWORD *)(a2 + 264) = *((_DWORD *)this + 18);
  *(_OWORD *)__p = 0uLL;
  v36 = 0;
  v11 = *((unsigned int *)this + 23);
  if ((_DWORD)v11)
  {
    v39 = &v36;
    __p[0] = std::allocator<rtc::InterfaceAddress>::allocate_at_least[abi:sn180100](v11);
    __p[1] = __p[0];
    *(int64x2_t *)v38 = vdupq_n_s64(0);
    v13 = v36;
    v36 = (char *)__p[0] + 32 * v12;
    *(_QWORD *)&v38[16] = v13;
    v37 = *(char **)v38;
    std::__split_buffer<rtc::InterfaceAddress>::~__split_buffer((uint64_t)&v37);
    v14 = *((_DWORD *)this + 23);
    if (v14)
    {
      v15 = (WebKit::RTC::Network::IPAddress *)*((_QWORD *)this + 10);
      v16 = (WebKit::RTC::Network::IPAddress *)((char *)v15 + 24 * v14);
      do
      {
        WebKit::RTC::Network::IPAddress::rtcAddress((uint64_t *)&v37, v15);
        v17 = *((_DWORD *)v15 + 5);
        v18 = *(_DWORD *)v38;
        v40 = *(_OWORD *)&v38[4];
        if (__p[1] >= v36)
        {
          v20 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59)
            goto LABEL_42;
          v22 = v36 - (char *)__p[0];
          if ((v36 - (char *)__p[0]) >> 4 > v21)
            v21 = v22 >> 4;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
            v23 = 0x7FFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v39 = &v36;
          if (!v23)
            goto LABEL_41;
          v24 = (char *)std::allocator<rtc::InterfaceAddress>::allocate_at_least[abi:sn180100](v23);
          v25 = &v24[32 * v20];
          v37 = v24;
          *(_QWORD *)v38 = v25;
          *(_QWORD *)&v38[16] = &v24[32 * v26];
          if (!v24)
            goto LABEL_41;
          *((_DWORD *)v25 + 2) = v18;
          *(_OWORD *)(v25 + 12) = v40;
          *(_QWORD *)v25 = &unk_1E34CB0D8;
          *((_DWORD *)v25 + 7) = v17;
          v19 = (uint64_t)(v25 + 32);
          *(_QWORD *)&v38[8] = v25 + 32;
          v27 = (char *)__p[1];
          v28 = *(char **)v38;
          if (__p[1] == __p[0])
          {
            v29 = vdupq_n_s64((unint64_t)__p[1]);
          }
          else
          {
            do
            {
              *((_QWORD *)v28 - 4) = &off_1E34B67B0;
              v28 -= 32;
              *((_DWORD *)v28 + 2) = *((_DWORD *)v27 - 6);
              *(_OWORD *)(v28 + 12) = *(_OWORD *)(v27 - 20);
              *(_QWORD *)v28 = &unk_1E34CB0D8;
              *((_DWORD *)v28 + 7) = *((_DWORD *)v27 - 1);
              v27 -= 32;
            }
            while (v27 != __p[0]);
            v29 = *(int64x2_t *)__p;
            v19 = *(_QWORD *)&v38[8];
          }
          __p[0] = v28;
          *(int64x2_t *)v38 = v29;
          v30 = v36;
          v36 = *(char **)&v38[16];
          *(_QWORD *)&v38[16] = v30;
          v37 = (char *)v29.i64[0];
          std::__split_buffer<rtc::InterfaceAddress>::~__split_buffer((uint64_t)&v37);
        }
        else
        {
          if (!__p[1])
            goto LABEL_41;
          *((_DWORD *)__p[1] + 2) = *(_DWORD *)v38;
          *(_OWORD *)((char *)__p[1] + 12) = v40;
          *(_QWORD *)__p[1] = &unk_1E34CB0D8;
          *((_DWORD *)__p[1] + 7) = v17;
          v19 = (uint64_t)__p[1] + 32;
        }
        __p[1] = (void *)v19;
        v15 = (WebKit::RTC::Network::IPAddress *)((char *)v15 + 24);
      }
      while (v15 != v16);
    }
  }
  rtc::Network::SetIPs();
  if (__p[0])
  {
    v31 = __p[0];
    if (__p[1] != __p[0])
    {
      v32 = (uint64_t)__p[1] - 32;
      v33 = (void (***)(uint64_t))((char *)__p[1] - 32);
      do
      {
        v34 = *v33;
        v33 -= 4;
        (*v34)(v32);
        v5 = (void *)v32 == __p[0];
        v32 = (uint64_t)v33;
      }
      while (!v5);
      v31 = __p[0];
    }
    operator delete(v31);
  }
}

uint64_t WebKit::RTC::Network::IPAddress::rtcAddress(WebKit::RTC::Network::IPAddress *this)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x197241990);
  }
  v4 = &v3;
  return ((uint64_t (*)(char **, WebKit::RTC::Network::IPAddress *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit3RTC7Network9IPAddress10rtcAddressEvE3__0JZNKSB_10rtcAddressEvE3__1ZNKSB_10rtcAddressEvE3__2EEEEEJRKNS0_6__implIJNSB_17UnspecifiedFamilyEjNS_5arrayIjLm4EEEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v4, this);
}

void WebKit::RTC::Network::SocketAddress::isolatedCopy(size_t *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  int v5;
  WebKit::RTC::Network::SocketAddress *v6;
  size_t v7;
  const rtc::IPAddress *v8;
  void *__p;
  uint64_t v10;
  char v11;
  void *v12[2];
  char v13;
  int v14;

  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)v12);
  rtc::SocketAddress::port((rtc::SocketAddress *)this);
  rtc::SocketAddress::SetPort((rtc::SocketAddress *)v12);
  v14 = *((_DWORD *)this + 15);
  v5 = *((char *)this + 23);
  if (v5 >= 0)
    v6 = (WebKit::RTC::Network::SocketAddress *)this;
  else
    v6 = (WebKit::RTC::Network::SocketAddress *)*this;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 23);
  else
    v7 = this[1];
  std::string::basic_string[abi:sn180100](&__p, v6, v7);
  if (v11 < 0 && (v10 < 0 || v10 && !__p))
  {
    __break(1u);
  }
  else
  {
    rtc::SocketAddress::SetIP();
    if (v11 < 0)
      operator delete(__p);
    if ((rtc::SocketAddress::IsUnresolvedIP((rtc::SocketAddress *)this) & 1) == 0)
    {
      v8 = (const rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)this);
      rtc::SocketAddress::SetResolvedIP((rtc::SocketAddress *)v12, v8);
    }
    rtc::SocketAddress::SocketAddress(a2, (const rtc::SocketAddress *)v12);
    if (v13 < 0)
      operator delete(v12[0]);
  }
}

uint64_t WebKit::RTC::Network::SocketAddress::rtcAddress@<X0>(WebKit::RTC::Network::SocketAddress *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6[4];

  rtc::SocketAddress::SocketAddress(a2);
  result = rtc::SocketAddress::SetPort(a2);
  *((_DWORD *)a2 + 15) = *((_DWORD *)this + 1);
  if (*((_QWORD *)this + 1))
    v5 = 1;
  else
    v5 = *((_DWORD *)this + 5) == 0;
  if (v5)
  {
    result = rtc::SocketAddress::SetIP();
    if (*((_BYTE *)this + 44))
    {
      WebKit::RTC::Network::IPAddress::rtcAddress(v6, (WebKit::RTC::Network::SocketAddress *)((char *)this + 24));
      return rtc::SocketAddress::SetResolvedIP(a2, (const rtc::IPAddress *)v6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

WebKit::RTC::Network::SocketAddress *WebKit::RTC::Network::SocketAddress::SocketAddress(WebKit::RTC::Network::SocketAddress *this, const rtc::SocketAddress *a2)
{
  char v4;
  char *v5;
  WTF *v6;
  _BYTE *v7;
  char v8;
  const rtc::IPAddress *v9;
  __int128 v11;
  int v12;

  *(_WORD *)this = rtc::SocketAddress::port(a2);
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 15);
  v4 = *((_BYTE *)a2 + 23);
  if (v4 >= 0)
    v5 = (char *)a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = (WTF *)*((unsigned __int8 *)a2 + 23);
  else
    v6 = (WTF *)*((_QWORD *)a2 + 1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)this + 8, v5, v6);
  v7 = (char *)this + 24;
  if (rtc::SocketAddress::IsUnresolvedIP(a2))
  {
    v8 = 0;
    *v7 = 0;
  }
  else
  {
    v9 = (const rtc::IPAddress *)rtc::SocketAddress::ipaddr(a2);
    WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)&v11, v9);
    *(_OWORD *)v7 = v11;
    *((_DWORD *)this + 10) = v12;
    v8 = 1;
  }
  *((_BYTE *)this + 44) = v8;
  return this;
}

uint64_t WebKit::RTC::Network::IPAddress::IPAddress(WebKit::RTC::Network::IPAddress *this, const rtc::IPAddress *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  *((_DWORD *)this + 4) = 0;
  v3 = *((_DWORD *)a2 + 2);
  switch(v3)
  {
    case 0:
      return (uint64_t)this;
    case 2:
      v7 = rtc::IPAddress::ipv4_address(a2);
      if (*((_DWORD *)this + 4) != 1)
        *((_DWORD *)this + 4) = 1;
      *(_DWORD *)this = v7;
      return (uint64_t)this;
    case 30:
      v4 = rtc::IPAddress::ipv6_address(a2);
      v5 = *((_DWORD *)this + 4);
      *(_QWORD *)this = v4;
      *((_QWORD *)this + 1) = v6;
      if (v5 != 2)
        *((_DWORD *)this + 4) = 2;
      return (uint64_t)this;
  }
  result = 127;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RTCPacketOptions::RTCPacketOptions(uint64_t a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;
  char *v22;
  int v24;
  void *__p;
  char *v26;
  char *v27;
  __int128 v28;

  v4 = rtc::PacketOptions::PacketOptions((rtc::PacketOptions *)a1);
  *(_DWORD *)v4 = *a2;
  *(_QWORD *)(v4 + 8) = *((int *)a2 + 1);
  rtc::PacketTimeUpdateParams::PacketTimeUpdateParams((rtc::PacketTimeUpdateParams *)&v24);
  v5 = *((_DWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 2);
  v24 = v5;
  LODWORD(v28) = v6;
  if (v6 >= 1)
  {
    v7 = *((_QWORD *)a2 + 4);
    if (v7)
    {
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_33;
      v8 = (const void *)*((_QWORD *)a2 + 3);
      v9 = (char *)operator new(*((_QWORD *)a2 + 4));
      v10 = &v9[v7];
      memmove(v9, v8, v7);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    if (__p)
    {
      v26 = (char *)__p;
      operator delete(__p);
      v5 = v24;
    }
    __p = v9;
    v26 = v10;
    v27 = v10;
  }
  *((_QWORD *)&v28 + 1) = *((_QWORD *)a2 + 5);
  *(_DWORD *)(a1 + 16) = v5;
  if ((int *)(a1 + 16) != &v24)
  {
    v11 = *(char **)(a1 + 24);
    v12 = (char *)__p;
    v13 = v26;
    v14 = v26 - (_BYTE *)__p;
    v15 = *(_QWORD *)(a1 + 40);
    if (v15 - (unint64_t)v11 >= v26 - (_BYTE *)__p)
    {
      v19 = *(_BYTE **)(a1 + 32);
      v20 = v19 - v11;
      if (v19 - v11 < v14)
      {
        v21 = (char *)__p + v20;
        if (v19 != v11)
        {
          memmove(*(void **)(a1 + 24), __p, v20);
          v11 = *(char **)(a1 + 32);
        }
        if (v13 != v21)
          memmove(v11, v21, v13 - v21);
        v22 = &v11[v13 - v21];
        goto LABEL_31;
      }
      if (v26 != __p)
        memmove(*(void **)(a1 + 24), __p, v26 - (_BYTE *)__p);
LABEL_30:
      v22 = &v11[v14];
LABEL_31:
      *(_QWORD *)(a1 + 32) = v22;
      goto LABEL_32;
    }
    if (v11)
    {
      *(_QWORD *)(a1 + 32) = v11;
      operator delete(v11);
      v15 = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    if ((v14 & 0x8000000000000000) == 0)
    {
      v16 = 2 * v15;
      if (2 * v15 <= v14)
        v16 = v14;
      v17 = v15 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v16;
      if ((v17 & 0x8000000000000000) == 0)
      {
        v18 = (char *)operator new(v17);
        v11 = v18;
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v18;
        *(_QWORD *)(a1 + 40) = &v18[v17];
        if (v13 != v12)
          memcpy(v18, v12, v14);
        goto LABEL_30;
      }
    }
LABEL_33:
    abort();
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v28;
  rtc::PacketTimeUpdateParams::~PacketTimeUpdateParams((rtc::PacketTimeUpdateParams *)&v24);
  return a1;
}

uint64_t WebKit::RTCPacketOptions::serializableData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = -1;
  switch(*(_DWORD *)this)
  {
    case 0xFFFFFFFF:
      break;
    case 8:
      v2 = 8;
      break;
    case 0xA:
      v2 = 10;
      break;
    case 0xC:
      v2 = 12;
      break;
    case 0xE:
      v2 = 14;
      break;
    case 0x10:
      v2 = 16;
      break;
    case 0x12:
      v2 = 18;
      break;
    case 0x14:
      v2 = 20;
      break;
    case 0x16:
      v2 = 22;
      break;
    case 0x18:
      v2 = 24;
      break;
    case 0x1A:
      v2 = 26;
      break;
    case 0x1C:
      v2 = 28;
      break;
    case 0x1E:
      v2 = 30;
      break;
    case 0x20:
      v2 = 32;
      break;
    case 0x22:
      v2 = 34;
      break;
    case 0x24:
      v2 = 36;
      break;
    case 0x26:
      v2 = 38;
      break;
    case 0x28:
      v2 = 40;
      break;
    case 0x2E:
      v2 = 46;
      break;
    case 0x30:
      v2 = 48;
      break;
    default:
      v2 = 0;
      break;
  }
  *(_BYTE *)a2 = v2;
  v3 = *(_QWORD *)(this + 8);
  if (v3 != (int)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x197241F8CLL);
  }
  v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = *(int *)(this + 48);
  *(_QWORD *)(a2 + 16) = v5;
  if ((int)v5 < 1)
  {
    v6 = *(_QWORD *)(this + 24);
    v7 = *(_QWORD *)(this + 32) - v6;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(this + 56);
  return this;
}

uint64_t WebKit::FrameState::stateForFrameID(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_BYTE *)(result + 48)
    || (*(_QWORD *)(result + 32) == a2 ? (v5 = *(_QWORD *)(result + 40) == a3) : (v5 = 0), !v5))
  {
    v6 = *(unsigned int *)(result + 228);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(result + 216);
      v8 = 248 * v6;
      while (1)
      {
        result = WebKit::FrameState::stateForFrameID(v7, a2, a3);
        if (result)
          break;
        v7 += 248;
        v8 -= 248;
        if (!v8)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::SharedStringHashStore::scheduleRemoval(WebKit::SharedStringHashStore *this, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = (uint64_t *)((char *)this + 40);
  LODWORD(v9) = 1;
  HIDWORD(v9) = a2;
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4 == *((_DWORD *)this + 12))
  {
    v5 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
    v4 = *((unsigned int *)this + 13);
    v6 = *((_QWORD *)this + 5);
    v7 = *v5;
  }
  else
  {
    v6 = *v3;
    v7 = v9;
  }
  *(_QWORD *)(v6 + 8 * v4) = v7;
  ++*((_DWORD *)this + 13);
  result = WTF::RunLoop::TimerBase::isActive((WebKit::SharedStringHashStore *)((char *)this + 56));
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

_DWORD *WebKit::SharedStringHashStore::contains(WebKit::SharedStringHashStore *this, unsigned int a2)
{
  _DWORD *result;

  WebKit::SharedStringHashStore::flushPendingChanges(this);
  result = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), a2);
  if (result)
    return (_DWORD *)(*result != 0);
  return result;
}

unsigned int *WebKit::SharedStringHashStore::flushPendingChanges(WebKit::SharedStringHashStore *this)
{
  WTF::RunLoop::TimerBase *v2;
  unsigned int *result;

  v2 = (WebKit::SharedStringHashStore *)((char *)this + 56);
  result = (unsigned int *)WTF::RunLoop::TimerBase::isActive((WebKit::SharedStringHashStore *)((char *)this + 56));
  if ((_DWORD)result)
  {
    WTF::RunLoop::TimerBase::stop(v2);
    return WebKit::SharedStringHashStore::processPendingOperations(this);
  }
  return result;
}

unsigned int *WebKit::SharedStringHashStore::clear(WebKit::SharedStringHashStore *this)
{
  WTF::RunLoop::TimerBase::stop((WebKit::SharedStringHashStore *)((char *)this + 56));
  WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 10, 0);
  *((_QWORD *)this + 1) = 0;
  return WebKit::SharedStringHashTable::clear((unsigned int *)this + 4);
}

unsigned int *WebKit::SharedStringHashTable::clear(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;

  if (*(_QWORD *)this)
  {
    v1 = (uint64_t)this;
    bzero(*(void **)(*(_QWORD *)this + 16), *(_QWORD *)(*(_QWORD *)this + 8));
    v2 = 0;
    WebKit::SharedStringHashTableReadOnly::setSharedMemory(v1, &v2);
    this = v2;
    if (v2)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  return this;
}

unsigned int *WebKit::SharedStringHashTableReadOnly::setSharedMemory(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *result;
  uint64_t v5;
  int v6;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)a1;
  *(_QWORD *)a1 = v3;
  if (result)
  {
    result = WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    v3 = *(unsigned int **)a1;
  }
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 2);
    v3 = (unsigned int *)(*((_QWORD *)v3 + 1) >> 2);
    v6 = (_DWORD)v3 - 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = (_DWORD)v3;
  *(_DWORD *)(a1 + 12) = v6;
  return result;
}

WTF::StringImpl **WebKit::Site::Site(WTF::StringImpl **this, const WTF::URL *a2)
{
  uint64_t v4;

  WTF::URL::protocol(a2);
  if ((v4 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::RegistrableDomain::RegistrableDomain(this + 1, a2);
  return this;
}

unint64_t WebKit::Site::hash(WTF::StringImpl **this)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  int v4;
  WTF::StringImpl *v5;
  unsigned int v6;

  v2 = *this;
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 4);
    if (v3 >= 0x100)
      v4 = v3 >> 8;
    else
      v4 = WTF::StringImpl::hashSlowCase(v2);
  }
  else
  {
    v4 = 0;
  }
  v5 = this[1];
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 4);
    if (v6 >= 0x100)
      LODWORD(v5) = v6 >> 8;
    else
      LODWORD(v5) = WTF::StringImpl::hashSlowCase(v5);
  }
  return (0xD7862706ELL * (unint64_t)(277951225 * v4 + 95187966 * (_DWORD)v5)) >> 4;
}

uint64_t WebKit::Site::matches(WebKit::Site *this, const WTF::URL *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v4 = (unsigned __int8 *)WTF::URL::protocol(a2);
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v7 = *(unsigned __int8 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  result = WTF::operator==(v4, v5, v7, v8);
  if ((_DWORD)result)
  {
    v10 = WTF::URL::host(a2);
    return WebCore::RegistrableDomain::matches((_QWORD *)this + 1, v10, v11);
  }
  return result;
}

void *std::allocator<rtc::InterfaceAddress>::allocate_at_least[abi:sn180100](unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  return operator new(32 * a1);
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
  abort();
}

void rtc::InterfaceAddress::~InterfaceAddress(rtc::InterfaceAddress *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t std::__split_buffer<rtc::InterfaceAddress>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::string::basic_string[abi:sn180100](_BYTE *a1, _BYTE *__src, size_t __len)
{
  _QWORD *v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;

  v5 = a1;
  if (!__src && __len)
    goto LABEL_16;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_17;
  if (__len > 0x16)
  {
    v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v6 = __len | 7;
    v7 = v6 + 1;
    a1 = operator new(v6 + 1);
    v5[1] = __len;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = a1;
  }
  else
  {
    a1[23] = __len;
  }
  v8 = &a1[__len];
  if (a1 <= __src && v8 > __src)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    abort();
  }
  if (__len)
    memmove(a1, __src, __len);
  *v8 = 0;
  return v5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_0,WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_1,WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34B67B0;
  *(_DWORD *)(a1 + 24) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_0,WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_1,WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *a1;
  *(_QWORD *)a2 = &off_1E34B67B0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 8) = 2;
  *(_DWORD *)(a2 + 12) = v2;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_0,WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_1,WebKit::RTC::Network::IPAddress::rtcAddress(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebKit::RTC::Network::IPAddress::UnspecifiedFamily,unsigned int,std::array<unsigned int,4ul>> const&>@<Q0>(__n128 *a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E34B67B0;
  *(_DWORD *)(a2 + 8) = 30;
  result = *a1;
  *(__n128 *)(a2 + 12) = *a1;
  return result;
}

uint64_t WebKit::RedirectSOAuthorizationSession::fallBackToWebPathInternal(WebKit::RedirectSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  WebKit::RedirectSOAuthorizationSession *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v3 == 2)
      {
        v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        v4 = "PopUp";
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = "Redirect";
    }
    v5 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v5 = "Active";
        break;
      case 2:
        v5 = "Waiting";
        break;
      case 3:
        v5 = "Completed";
        break;
      default:
        v5 = 0;
        break;
    }
    v6 = *((_QWORD *)this + 4);
    v9 = 134218754;
    v10 = this;
    v11 = 2080;
    v12 = v4;
    v13 = 2080;
    v14 = v5;
    v15 = 2048;
    v16 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::fallBackToWebPathInternal: navigationAction=%p", (uint8_t *)&v9, 0x2Au);
  }
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void sub_197242774(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RedirectSOAuthorizationSession::abortInternal(WebKit::RedirectSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  int v10;
  WebKit::RedirectSOAuthorizationSession *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v10 = 134218498;
    v11 = this;
    v12 = 2080;
    v13 = v6;
    v14 = 2080;
    v15 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::abortInternal", (uint8_t *)&v10, 0x20u);
  }
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1972428F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::RedirectSOAuthorizationSession::completeInternal(WebKit::RedirectSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, NSData *a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)();
  CFTypeRef v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  const void *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  const char *v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  char *v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _BYTE buf[12];
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  CFTypeRef cf;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((unsigned __int8 *)this + 48);
    v8 = "SubFrame";
    v9 = "PopUp";
    if (v7 != 1)
      v9 = 0;
    if (v7 != 2)
      v8 = v9;
    if (*((_BYTE *)this + 48))
      v10 = v8;
    else
      v10 = "Redirect";
    v11 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v11 = "Active";
        break;
      case 2:
        v11 = "Waiting";
        break;
      case 3:
        v11 = "Completed";
        break;
      default:
        v11 = 0;
        break;
    }
    v12 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    v13 = *((_QWORD *)this + 4);
    *(_DWORD *)buf = 134219010;
    *(_QWORD *)&buf[4] = this;
    v54 = 2080;
    v55 = v10;
    v56 = 2080;
    v57 = v11;
    v58 = 1024;
    v59 = v12;
    v60 = 2048;
    v61 = v13;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::completeInternal: httpState=%d, navigationAction=%p", buf, 0x30u);
  }
  v14 = *((_QWORD *)this + 4);
  if (v14)
    CFRetain(*(CFTypeRef *)(v14 + 8));
  v15 = *((_QWORD *)this + 5);
  if (!v15)
  {
    v16 = 0;
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
  {
LABEL_21:
    v17 = 1;
    goto LABEL_22;
  }
  CFRetain(*(CFTypeRef *)(v16 - 8));
  v17 = 0;
  v16 -= 16;
LABEL_22:
  if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 302
    || WebCore::ResourceResponseBase::httpStatusCode(a2) == 200)
  {
    if (!v17)
      goto LABEL_25;
  }
  else if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 307)
  {
    v22 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(v14 + 40));
    if (((v17 | MEMORY[0x19AEABBCC](*v22, "POST", 4) ^ 1) & 1) == 0)
    {
LABEL_25:
      if (WebCore::ResourceResponseBase::httpStatusCode(a2) == 302)
      {
        v18 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (*(_QWORD *)(v14 + 288))
          v19 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
        else
          v19 = 0;
        if (!v19)
        {
          *(_BYTE *)(v16 + 737) = 1;
          WebCore::ResourceResponseBase::httpHeaderFields(a2);
          WebCore::HTTPHeaderMap::get();
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"<script>location = '", 21, (uint64_t *)&v51, (uint64_t)"'</script>", 11, buf);
          WTF::String::utf8();
          v33 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
          v38 = v51;
          v51 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v32);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v52)
          {
            v39 = (char *)v52 + 16;
            v40 = *((_QWORD *)v52 + 1);
          }
          else
          {
            v40 = 0;
            v39 = 0;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v49 = *(WTF::StringImpl **)buf;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v48 = *(WTF::StringImpl **)buf;
          v41 = (WTF::StringImpl *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v14 + 40));
          WebKit::WebPageProxy::loadData(v16, (uint64_t)v39, v40, (WTF::StringImpl *)&v49, (WTF::StringImpl *)&v48, v41, 0, *(_BYTE *)(v14 + 369), &v50);
          v43 = v50;
          v50 = 0;
          if (v43)
            CFRelease(*(CFTypeRef *)(v43 + 8));
          v44 = v48;
          v48 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v42);
            else
              *(_DWORD *)v44 -= 2;
          }
          v45 = v49;
          v49 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v42);
            else
              *(_DWORD *)v45 -= 2;
          }
          v36 = v52;
          v52 = 0;
          if (!v36)
            goto LABEL_89;
          v37 = *(_DWORD *)v36 - 1;
          if (*(_DWORD *)v36 == 1)
          {
            WTF::fastFree(v36, v42);
            goto LABEL_89;
          }
          goto LABEL_88;
        }
        WebCore::ResourceResponseBase::httpHeaderFields(a2);
        WebCore::HTTPHeaderMap::get();
        WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf, (const WTF::String *)&v52);
        WebKit::WebPageProxy::loadRequest(v16, (WebCore::ResourceRequestBase *)buf, 1, 0, &v47);
        if (v47)
          CFRelease(*(CFTypeRef *)(v47 + 8));
        v20 = cf;
        cf = 0;
        if (v20)
          CFRelease(v20);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
      }
      else
      {
        if (WebCore::ResourceResponseBase::httpStatusCode(a2) != 200)
        {
          *(_QWORD *)buf = a2;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UseRedirectionForCurrentNavigation>(*(_QWORD *)(v16 + 208), (WebCore::ResourceResponseBase **)buf, *(_QWORD *)(*(_QWORD *)(v16 + 32) + 1896), 0);
          v31 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          goto LABEL_89;
        }
        v26 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        *(_BYTE *)(v16 + 737) = 1;
        if (a3)
        {
          v27 = -[NSData bytes](a3, "bytes");
          a3 = -[NSData length](a3, "length");
        }
        else
        {
          v27 = 0;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v52 = *(WTF::StringImpl **)buf;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v49 = *(WTF::StringImpl **)buf;
        v28 = (WTF::StringImpl *)WebCore::ResourceResponseBase::url(a2);
        WebKit::WebPageProxy::loadData(v16, (uint64_t)v27, (unint64_t)a3, (WTF::StringImpl *)&v52, (WTF::StringImpl *)&v49, v28, 0, *(_BYTE *)(v14 + 369), &v46);
        v29 = v46;
        v46 = 0;
        if (v29)
          CFRelease(*(CFTypeRef *)(v29 + 8));
        v30 = v49;
        v49 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v21);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      v36 = v52;
      v52 = 0;
      if (v36)
      {
        v37 = *(_DWORD *)v36 - 2;
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v21);
          goto LABEL_89;
        }
LABEL_88:
        *(_DWORD *)v36 = v37;
      }
LABEL_89:
      CFRelease(*(CFTypeRef *)(v16 + 8));
      goto LABEL_90;
    }
  }
  v23 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v24 == 2)
      {
        v25 = "SubFrame";
      }
      else if (v24 == 1)
      {
        v25 = "PopUp";
      }
      else
      {
        v25 = 0;
      }
    }
    else
    {
      v25 = "Redirect";
    }
    v34 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v34 = "Active";
        break;
      case 2:
        v34 = "Waiting";
        break;
      case 3:
        v34 = "Completed";
        break;
      default:
        v34 = 0;
        break;
    }
    v35 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    *(_DWORD *)buf = 134219010;
    *(_QWORD *)&buf[4] = this;
    v54 = 2080;
    v55 = v25;
    v56 = 2080;
    v57 = v34;
    v58 = 1024;
    v59 = v35;
    v60 = 1024;
    LODWORD(v61) = v17 ^ 1;
    _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::completeInternal: httpState=%d page=%d, so falling back to web path.", buf, 0x2Cu);
  }
  WebKit::RedirectSOAuthorizationSession::fallBackToWebPathInternal(this);
  if ((v17 & 1) == 0)
    goto LABEL_89;
LABEL_90:
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
}

void sub_19724302C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  uint64_t v17;
  uint64_t v18;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 1)
      WTF::fastFree(a16, a2);
    else
      --*(_DWORD *)a16;
  }
  CFRelease(*(CFTypeRef *)(v17 + 8));
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  _Unwind_Resume(a1);
}

void WebKit::RedirectSOAuthorizationSession::beforeStart(WebKit::RedirectSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  WebKit::RedirectSOAuthorizationSession *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = 134218498;
    v9 = this;
    v10 = 2080;
    v11 = v6;
    v12 = 2080;
    v13 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] RedirectSOAuthorizationSession::beforeStart", (uint8_t *)&v8, 0x20u);
  }
}

void WebKit::SOAuthorizationCoordinator::tryAuthorize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  const void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  _BYTE buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a2 + 40));
  if (!*(_BYTE *)(a1 + 8)
    || (v9 = (void *)((uint64_t (*)(void))*MEMORY[0x1E0DCDFF8])(),
        (objc_msgSend(v9, "canPerformAuthorizationWithURL:responseCode:", WTF::URL::operator NSURL *(), 0) & 1) == 0))
  {
    v14 = qword_1ECE70E98;
    if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize: The requested URL is not registered for AppSSO handling. No further action needed.", buf, 0xCu);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0);
    return;
  }
  v10 = *(_QWORD *)(*a2 + 24);
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    if (!*(_BYTE *)(v10 + 16))
    {
      if (!*(_QWORD *)(a3 + 280)
        || (objc_msgSend(MEMORY[0x1E0D00158], "isURLFromAppleOwnedDomain:", WTF::URL::operator NSURL *()) & 1) == 0)
      {
        v19 = qword_1ECE70E98;
        if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = a1;
          _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "%p - SOAuthorizationCoordinator::tryAuthorize: Attempting to perform subframe navigation for non-Apple authorization URL.", buf, 0xCu);
        }
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a4 + 16))(*a4, 0);
        goto LABEL_34;
      }
      v11 = *(CFTypeRef *)a1;
      if (*(_QWORD *)a1)
        CFRetain(*(CFTypeRef *)a1);
      v15 = *a4;
      *a4 = 0;
      v24 = (const void *)v15;
      v16 = *(_QWORD *)(v10 + 264);
      v17 = *(_QWORD *)(v10 + 272);
      v18 = API::Object::newObject(0x28uLL, 11);
      *(_QWORD *)v18 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v18);
      *(_QWORD *)v18 = &off_1E34AD1B8;
      *(_QWORD *)(v18 + 16) = v16;
      *(_QWORD *)(v18 + 24) = v17;
      *(_BYTE *)(v18 + 32) = 0;
      v13 = WTF::fastMalloc((WTF *)0xA0);
      if (v11)
      {
        CFRetain(v11);
        v25 = v11;
        CFRetain(v11);
      }
      else
      {
        v25 = 0;
      }
      WebKit::NavigationSOAuthorizationSession::NavigationSOAuthorizationSession((_QWORD *)v13, &v25, a2, a3, 2, (uint64_t *)&v24);
      if (v11)
        CFRelease(v11);
      *(_QWORD *)(v13 + 96) = &unk_1E34CB288;
      *(_QWORD *)v13 = off_1E34CB200;
      *(_QWORD *)(v13 + 64) = &unk_1E34CB260;
      *(_QWORD *)(v13 + 104) = 0;
      *(_QWORD *)(v13 + 112) = v16;
      *(_QWORD *)(v13 + 120) = v17;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      v23 = WebKit::WebFrameProxy::webFrame(v16, v17);
      if (v23)
        WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v23 + 208, (unsigned int *)(v13 + 96), (uint64_t)buf);
      if (v11)
        CFRelease(v11);
      CFRelease(*(CFTypeRef *)(v18 + 8));
      v20 = v24;
      if (!v24)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  v11 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
    CFRetain(*(CFTypeRef *)a1);
  v12 = (const void *)*a4;
  *a4 = 0;
  v25 = v12;
  v13 = WTF::fastMalloc((WTF *)0x60);
  if (v11)
  {
    CFRetain(v11);
    *(_QWORD *)buf = v11;
    CFRetain(v11);
  }
  else
  {
    *(_QWORD *)buf = 0;
  }
  WebKit::NavigationSOAuthorizationSession::NavigationSOAuthorizationSession((_QWORD *)v13, (const void **)buf, a2, a3, 0, (uint64_t *)&v25);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)v13 = off_1E34CB138;
    *(_QWORD *)(v13 + 64) = &unk_1E34CB190;
    CFRelease(v11);
  }
  else
  {
    *(_QWORD *)v13 = off_1E34CB138;
    *(_QWORD *)(v13 + 64) = &unk_1E34CB190;
  }
  v20 = v25;
  if (v25)
LABEL_28:
    (*(void (**)(const void *))(*(_QWORD *)v20 + 8))(v20);
LABEL_29:
  if (v11)
    CFRelease(v11);
  v21 = *(void **)a1;
  *(_QWORD *)buf = v13;
  objc_msgSend(v21, "setSession:", buf, v24, v25);
  v22 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v22)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v22 + 8));
  if (v10)
LABEL_34:
    CFRelease(*(CFTypeRef *)(v10 + 8));
}

void sub_19724371C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;

  CFRelease(v11);
  WTF::fastFree(v12, v16);
  CFRelease(*(CFTypeRef *)(v13 + 8));
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (v11)
    CFRelease(v11);
  CFRelease(*(CFTypeRef *)(v14 + 8));
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::SOAuthorizationCoordinator::tryAuthorize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)();
  const void *v14;
  void *v15;
  unsigned __int8 *result;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  const void *v22;
  uint8_t buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize (2)", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*a2 + 40));
  if (!*(_BYTE *)(a1 + 8)
    || (v11 = (void *)((uint64_t (*)(void))*MEMORY[0x1E0DCDFF8])(),
        (objc_msgSend(v11, "canPerformAuthorizationWithURL:responseCode:", WTF::URL::operator NSURL *(), 0) & 1) == 0))
  {
    v18 = qword_1ECE70E98;
    if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%p - SOAuthorizationCoordinator::tryAuthorize (2): The requested URL is not registered for AppSSO handling. No further action needed.", buf, 0xCu);
    }
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)*a5 + 16))(*a5, a2, a4);
  }
  v12 = *(_QWORD *)(*a2 + 16);
  if (!v12 || *(_BYTE *)(v12 + 16))
  {
    if (*(_QWORD *)(*a2 + 288))
      v13 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
    else
      v13 = 0;
    if (v13)
    {
      v14 = *(const void **)a1;
      v22 = v14;
      if (v14)
        CFRetain(v14);
      WebKit::PopUpSOAuthorizationSession::create(&v22, a3, a2, a4, a5, buf);
      if (v14)
        CFRelease(v14);
      v15 = *(void **)a1;
      v21 = *(_QWORD *)buf;
      result = (unsigned __int8 *)objc_msgSend(v15, "setSession:", &v21);
      v17 = v21;
      v21 = 0;
      if (v17)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v17 + 8));
      return result;
    }
    v19 = qword_1ECE70E98;
    if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a1;
      _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "%p - SOAuthorizationCoordinator::tryAuthorize (2): Attempting to perform auth without a user gesture.", buf, 0xCu);
    }
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)*a5 + 16))(*a5, a2, a4);
  }
  v20 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "%p - SOAuthorizationCoordinator::tryAuthorize (2): Attempting to perform subframe navigation.", buf, 0xCu);
  }
  return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)*a5 + 16))(*a5, a2, a4);
}

void sub_197243AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a9 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SOAuthorizationSession::SOAuthorizationSession(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)a1 = off_1E34CB1B8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCDFF8])()), "init");
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
  v12 = *(unsigned int **)(a4 + 24);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = a5;
  *(_BYTE *)(a1 + 49) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  objc_msgSend(*(id *)(a1 + 24), "setDelegate:", *a2);
  return a1;
}

void sub_197243C78(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  const void *v9;

  v4 = (const void *)v2[7];
  v2[7] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)v2[5];
  v2[5] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = v2[4];
  v2[4] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = (const void *)v2[3];
  v2[3] = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void WebKit::SOAuthorizationSession::~SOAuthorizationSession(WebKit::SOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  void *v8;
  void *v9;
  const void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  int v16;
  WebKit::SOAuthorizationSession *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E34CB1B8;
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v3 == 2)
      {
        v4 = "SubFrame";
      }
      else if (v3 == 1)
      {
        v4 = "PopUp";
      }
      else
      {
        v4 = 0;
      }
    }
    else
    {
      v4 = "Redirect";
    }
    v5 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v5 = "Active";
        break;
      case 2:
        v5 = "Waiting";
        break;
      case 3:
        v5 = "Completed";
        break;
      default:
        v5 = 0;
        break;
    }
    v6 = *((_QWORD *)this + 7);
    v16 = 134218754;
    v17 = this;
    v18 = 2080;
    v19 = v4;
    v20 = 2080;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::~SOAuthorizationSession: m_viewController=%p", (uint8_t *)&v16, 0x2Au);
  }
  *((_BYTE *)this + 49) = 1;
  v7 = *((unsigned __int8 *)this + 16);
  if (v7 == 1)
  {
    v8 = (void *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_21;
    objc_msgSend(v8, "cancelAuthorization");
    v7 = *((unsigned __int8 *)this + 16);
  }
  if (!v7 || v7 == 3)
  {
    WebKit::SOAuthorizationSession::dismissViewController(this);
    goto LABEL_22;
  }
LABEL_21:
  WebKit::SOAuthorizationSession::becomeCompleted(this);
LABEL_22:
  v10 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v9);
    }
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  v15 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
    CFRelease(v15);
}

void sub_197243EF8(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  const void *v9;

  v4 = (const void *)v2[7];
  v2[7] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)v2[5];
  v2[5] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = v2[4];
  v2[4] = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = (const void *)v2[3];
  v2[3] = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void WebKit::SOAuthorizationSession::becomeCompleted(WebKit::SOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  WebKit::SOAuthorizationSession *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = *((_QWORD *)this + 7);
    v9 = 134218754;
    v10 = this;
    v11 = 2080;
    v12 = v6;
    v13 = 2080;
    v14 = v7;
    v15 = 2048;
    v16 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::becomeCompleted: m_viewController=%p", (uint8_t *)&v9, 0x2Au);
  }
  *((_BYTE *)this + 16) = 3;
  WebKit::SOAuthorizationSession::dismissViewController(this);
}

void WebKit::SOAuthorizationSession::dismissViewController(WebKit::SOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  NSObject *v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  WebKit::SOAuthorizationSession *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = *((_QWORD *)this + 7);
    v15 = 134218754;
    v16 = this;
    v17 = 2080;
    v18 = v6;
    v19 = 2080;
    v20 = v7;
    v21 = 2048;
    v22 = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::dismissViewController: m_viewController=%p", (uint8_t *)&v15, 0x2Au);
  }
  v9 = (void *)*((_QWORD *)this + 7);
  if (v9)
  {
    objc_msgSend((id)objc_msgSend(v9, "presentingViewController"), "dismissViewControllerAnimated:completion:", 1, 0);
    v10 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v10)
      CFRelease(v10);
  }
  else
  {
    v11 = qword_1ECE70E98;
    if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((unsigned __int8 *)this + 48);
      if (*((_BYTE *)this + 48))
      {
        if (v12 == 2)
        {
          v13 = "SubFrame";
        }
        else if (v12 == 1)
        {
          v13 = "PopUp";
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = "Redirect";
      }
      v14 = "Idle";
      switch(*((_BYTE *)this + 16))
      {
        case 0:
          break;
        case 1:
          v14 = "Active";
          break;
        case 2:
          v14 = "Waiting";
          break;
        case 3:
          v14 = "Completed";
          break;
        default:
          v14 = 0;
          break;
      }
      v15 = 134218498;
      v16 = this;
      v17 = 2080;
      v18 = v13;
      v19 = 2080;
      v20 = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::dismissViewController: No view controller, so returning early.", (uint8_t *)&v15, 0x20u);
    }
  }
}

void WebKit::SOAuthorizationSession::start(WebKit::SOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  BOOL v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;
  WTF::ThreadSafeWeakPtrControlBlock *v15;
  _QWORD *v16;
  int v17;
  WebKit::SOAuthorizationSession *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v3 == 2)
      {
        v5 = "SubFrame";
      }
      else
      {
        v4 = v3 == 1;
        v5 = "PopUp";
        if (!v4)
          v5 = 0;
      }
    }
    else
    {
      v5 = "Redirect";
    }
    v6 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v6 = "Active";
        break;
      case 2:
        v6 = "Waiting";
        break;
      case 3:
        v6 = "Completed";
        break;
      default:
        v6 = 0;
        break;
    }
    v7 = *((_QWORD *)this + 4);
    v17 = 134218754;
    v18 = this;
    v19 = 2080;
    v20 = v5;
    v21 = 2080;
    v22 = v6;
    v23 = 2048;
    v24 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start: navigationAction=%p", (uint8_t *)&v17, 0x2Au);
    v2 = qword_1ECE70E98;
  }
  *((_BYTE *)this + 16) = 1;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((unsigned __int8 *)this + 48);
    v9 = "SubFrame";
    v10 = "PopUp";
    if (v8 != 1)
      v10 = 0;
    if (v8 != 2)
      v9 = v10;
    if (*((_BYTE *)this + 48))
      v11 = v9;
    else
      v11 = "Redirect";
    v17 = 134218498;
    v18 = this;
    v19 = 2080;
    v20 = v11;
    v21 = 2080;
    v22 = "Active";
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start: Moving m_state to Active.", (uint8_t *)&v17, 0x20u);
  }
  v12 = (void *)*((_QWORD *)this + 3);
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 4) + 40));
  v13 = WTF::URL::operator NSURL *();
  v14 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
  if (v14)
    v15 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
  else
    v15 = 0;
  v16 = malloc_type_malloc(0x38uLL, 0x10E00403FC8F27DuLL);
  *v16 = MEMORY[0x1E0C809A0];
  v16[1] = 50331650;
  v16[2] = WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::{lambda(void *,SOAuthorizationHints *,NSError *)#1}::__invoke;
  v16[3] = &WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::descriptor;
  v16[4] = this;
  v16[5] = v15;
  v16[6] = this;
  objc_msgSend(v12, "getAuthorizationHintsWithURL:responseCode:completion:", v13, 0, v16);
  _Block_release(v16);
}

void sub_1972445CC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::SOAuthorizationSession::fallBackToWebPath(WebKit::SOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  const char *v12;
  int v13;
  WebKit::SOAuthorizationSession *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v13 = 134218498;
    v14 = this;
    v15 = 2080;
    v16 = v6;
    v17 = 2080;
    v18 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::fallBackToWebPath", (uint8_t *)&v13, 0x20u);
  }
  v8 = *((unsigned __int8 *)this + 16);
  if (v8 == 1)
  {
    WebKit::SOAuthorizationSession::becomeCompleted(this);
    (*(void (**)(WebKit::SOAuthorizationSession *))(*(_QWORD *)this + 24))(this);
    return;
  }
  v9 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v10 == 2)
      {
        v11 = "SubFrame";
        if (v8)
          goto LABEL_28;
      }
      else
      {
        if (v10 == 1)
        {
          v11 = "PopUp";
          if (!v8)
            goto LABEL_26;
LABEL_28:
          if (v8 == 3)
          {
            v12 = "Completed";
          }
          else if (v8 == 2)
          {
            v12 = "Waiting";
          }
          else
          {
            v12 = 0;
          }
          goto LABEL_33;
        }
        v11 = 0;
        if (v8)
          goto LABEL_28;
      }
LABEL_26:
      v12 = "Idle";
LABEL_33:
      v13 = 134218498;
      v14 = this;
      v15 = 2080;
      v16 = v11;
      v17 = 2080;
      v18 = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::fallBackToWebPath: Returning early since not active.", (uint8_t *)&v13, 0x20u);
      goto LABEL_34;
    }
    v11 = "Redirect";
    if (!v8)
      goto LABEL_26;
    goto LABEL_28;
  }
LABEL_34:
  WebKit::SOAuthorizationSession::dismissViewController(this);
}

void WebKit::SOAuthorizationSession::abort(WebKit::SOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  NSObject *v9;
  int v10;
  const char *v11;
  const char *v12;
  int v13;
  WebKit::SOAuthorizationSession *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    if (*((_BYTE *)this + 48))
    {
      if (v3 == 2)
      {
        v4 = "SubFrame";
      }
      else
      {
        v8 = v3 == 1;
        v4 = "PopUp";
        if (!v8)
          v4 = 0;
      }
    }
    else
    {
      v4 = "Redirect";
    }
    v5 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v5 = "Active";
        break;
      case 2:
        v5 = "Waiting";
        break;
      case 3:
        v5 = "Completed";
        break;
      default:
        v5 = 0;
        break;
    }
    v6 = *((_QWORD *)this + 7);
    v13 = 134218754;
    v14 = this;
    v15 = 2080;
    v16 = v4;
    v17 = 2080;
    v18 = v5;
    v19 = 2048;
    v20 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::abort: m_viewController=%p", (uint8_t *)&v13, 0x2Au);
  }
  v7 = *((unsigned __int8 *)this + 16);
  v8 = v7 == 3 || v7 == 0;
  if (v8)
  {
    v9 = qword_1ECE70E98;
    if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *((unsigned __int8 *)this + 48);
      if (*((_BYTE *)this + 48))
      {
        if (v10 == 2)
        {
          v11 = "SubFrame";
        }
        else if (v10 == 1)
        {
          v11 = "PopUp";
        }
        else
        {
          v11 = 0;
        }
      }
      else
      {
        v11 = "Redirect";
      }
      v12 = "Idle";
      switch(v7)
      {
        case 0:
          break;
        case 1:
          v12 = "Active";
          break;
        case 2:
          v12 = "Waiting";
          break;
        case 3:
          v12 = "Completed";
          break;
        default:
          v12 = 0;
          break;
      }
      v13 = 134218498;
      v14 = this;
      v15 = 2080;
      v16 = v11;
      v17 = 2080;
      v18 = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::abort: Returning early since idle or already completed.", (uint8_t *)&v13, 0x20u);
    }
    WebKit::SOAuthorizationSession::dismissViewController(this);
  }
  else
  {
    WebKit::SOAuthorizationSession::becomeCompleted(this);
    (*(void (**)(WebKit::SOAuthorizationSession *))(*(_QWORD *)this + 32))(this);
  }
}

void WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession(WebKit::SubFrameSOAuthorizationSession *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF *v10;
  WTF::StringImpl *v11;

  v2 = WebKit::WebFrameProxy::webFrame(*((_QWORD *)this + 14), *((_QWORD *)this + 15));
  if (v2)
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v2 + 208, (_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 17);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  if (v3 <= v4)
  {
    v8 = (WTF::StringImpl *)((char *)v5 + 64 * v4);
    v7 = (WTF::StringImpl *)((char *)v5 + 64 * v3);
  }
  else
  {
    WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct(v5, (WTF::StringImpl *)((char *)v5 + 64 * v4));
    v6 = *((_QWORD *)this + 18);
    v7 = (WTF::StringImpl *)(v6 + (*((_QWORD *)this + 16) << 6));
    v8 = (WTF::StringImpl *)(v6 + ((unint64_t)*((unsigned int *)this + 38) << 6));
  }
  WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct(v7, v8);
  v10 = (WTF *)*((_QWORD *)this + 18);
  if (v10)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v10, v9);
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 13, v9);
  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession(this, v11);
}

{
  WTF *v1;
  void *v2;

  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession(WebKit::SubFrameSOAuthorizationSession *this)
{
  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 64));
}

{
  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 96));
}

{
  WTF *v1;
  void *v2;

  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 64));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::SubFrameSOAuthorizationSession::~SubFrameSOAuthorizationSession((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 96));
  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebKit::SubFrameSOAuthorizationSession::fallBackToWebPathInternal(WebKit::SubFrameSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t i;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  _QWORD v24[2];
  int v25;
  char v26;
  _BYTE buf[24];
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = *((_QWORD *)this + 4);
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&v28[0] = v7;
    WORD4(v28[0]) = 2048;
    *(_QWORD *)((char *)v28 + 10) = v8;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::fallBackToWebPathInternal: navigationAction=%p", buf, 0x2Au);
  }
  v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 4) + 40));
  v10 = *(_DWORD **)v9;
  if (*(_QWORD *)v9)
    *v10 += 2;
  *(_QWORD *)buf = v10;
  v11 = *(_OWORD *)(v9 + 24);
  *(_OWORD *)&buf[8] = *(_OWORD *)(v9 + 8);
  v28[0] = v11;
  v12 = WTF::fastMalloc((WTF *)0x45);
  for (i = 0; i != 69; ++i)
    *(_BYTE *)(v12 + i) = aScriptParentPo[i];
  v24[0] = v12;
  v24[1] = 0x4500000045;
  v25 = 0;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)v24);
  if (v25 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34CB2D8[v25])(&v23, v24);
  v15 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 4) + 40));
  v17 = *(_DWORD **)v16;
  if (*(_QWORD *)v16)
    *v17 += 2;
  *(_QWORD *)buf = v17;
  v18 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)&buf[8] = *(_OWORD *)(v16 + 8);
  v28[0] = v18;
  WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 4) + 40));
  v19 = v23;
  v23 = 0;
  v24[0] = v19;
  v25 = 1;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)v24);
  if (v25 != -1)
    ((void (*)(char *, _QWORD *))off_1E34CB2D8[v25])(&v26, v24);
  v25 = -1;
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197244E94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18, WTF::StringImpl *a19)
{
  WTF::StringImpl *v20;

  if (a13 != -1)
    ((void (*)(char *, char *))off_1E34CB2D8[a13])(&a18, &a11);
  a13 = -1;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v20 = a19;
  a19 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24[5];
  _BYTE v25[16];
  int v26;
  char v27;

  WTF::URL::URL((uint64_t)v24, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v25, a3);
  v6 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  if (v6)
  {
    if (v5 + 1 != v6)
      goto LABEL_20;
    LODWORD(v7) = *(_DWORD *)(a1 + 152);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 152);
    if (v5)
    {
      if (v5 != v7 - 1)
        goto LABEL_20;
    }
    else if ((_DWORD)v7)
    {
      v5 = 0;
      goto LABEL_20;
    }
  }
  v8 = v7;
  v9 = ((unint64_t)v7 >> 2) + v7;
  if (v9 <= 0xF)
    v9 = 15;
  if (v9 >= 0x3FFFFFF)
  {
    __break(0xC471u);
    return;
  }
  v10 = *(WTF::StringImpl **)(a1 + 144);
  v11 = v9 + 1;
  v12 = WTF::fastMalloc((WTF *)((v9 + 1) << 6));
  *(_DWORD *)(a1 + 152) = v11;
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a1 + 136);
  if (v13 <= v14)
  {
    WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move((WTF::StringImpl *)((char *)v10 + 64 * v13), (WTF::StringImpl *)((char *)v10 + 64 * v14), v12 + (v13 << 6));
  }
  else
  {
    WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move(v10, (WTF::StringImpl *)((char *)v10 + 64 * v14), v12);
    v15 = *(_QWORD *)(a1 + 128);
    v16 = v15 - v8 + *(unsigned int *)(a1 + 152);
    WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move((WTF::StringImpl *)((char *)v10 + 64 * v15), (WTF::StringImpl *)((char *)v10 + 64 * v8), *(_QWORD *)(a1 + 144) + (v16 << 6));
    *(_QWORD *)(a1 + 128) = v16;
  }
  if (v10)
  {
    if (*(WTF::StringImpl **)(a1 + 144) == v10)
    {
      *(_QWORD *)(a1 + 144) = 0;
      *(_DWORD *)(a1 + 152) = 0;
    }
    WTF::fastFree(v10, v17);
  }
  v5 = *(_QWORD *)(a1 + 136);
LABEL_20:
  std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100](*(_QWORD *)(a1 + 144) + (v5 << 6), (uint64_t *)v24);
  v19 = *(_QWORD *)(a1 + 136);
  if (v19 == *(unsigned int *)(a1 + 152) - 1)
    v20 = 0;
  else
    v20 = v19 + 1;
  *(_QWORD *)(a1 + 136) = v20;
  if (v26 != -1)
    ((void (*)(char *, _BYTE *))off_1E34CB2D8[v26])(&v27, v25);
  v26 = -1;
  v21 = v24[0];
  v24[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  if (v22 > v23)
    v23 += *(unsigned int *)(a1 + 152);
  if (v23 - v22 == 1)
    WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame((WebKit::SubFrameSOAuthorizationSession *)a1);
}

void sub_197245148(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::SubFrameSOAuthorizationSession::abortInternal(WebKit::SubFrameSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v9;
  WebKit::SubFrameSOAuthorizationSession *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    v9 = 134218498;
    v10 = this;
    v11 = 2080;
    v12 = v6;
    v13 = 2080;
    v14 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::abortInternal", (uint8_t *)&v9, 0x20u);
  }
  return WebKit::SubFrameSOAuthorizationSession::fallBackToWebPathInternal(this);
}

unint64_t WebKit::SubFrameSOAuthorizationSession::completeInternal(WebKit::SubFrameSOAuthorizationSession *this, const WebCore::ResourceResponse *a2, NSData *a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 v14;
  const void *v15;
  unint64_t result;
  uint64_t v17;
  NSData *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  _BYTE buf[24];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((unsigned __int8 *)this + 48);
    v8 = "SubFrame";
    v9 = "PopUp";
    if (v7 != 1)
      v9 = 0;
    if (v7 != 2)
      v8 = v9;
    if (*((_BYTE *)this + 48))
      v10 = v8;
    else
      v10 = "Redirect";
    v11 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v11 = "Active";
        break;
      case 2:
        v11 = "Waiting";
        break;
      case 3:
        v11 = "Completed";
        break;
      default:
        v11 = 0;
        break;
    }
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&v26 = v11;
    WORD4(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 10) = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::completeInternal: httpState=%d", buf, 0x26u);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(a2) != 200)
    return (unint64_t)WebKit::SubFrameSOAuthorizationSession::fallBackToWebPathInternal(this);
  v12 = WebCore::ResourceResponseBase::url(a2);
  v13 = *(_DWORD **)v12;
  if (*(_QWORD *)v12)
    *v13 += 2;
  *(_QWORD *)buf = v13;
  v14 = *(_OWORD *)(v12 + 24);
  *(_OWORD *)&buf[8] = *(_OWORD *)(v12 + 8);
  v26 = v14;
  if (a3
    && (v15 = -[NSData bytes](a3, "bytes"), result = -[NSData length](a3, "length"), (a3 = (NSData *)result) != 0))
  {
    if (HIDWORD(result))
    {
      __break(0xC471u);
      return result;
    }
    v17 = WTF::fastMalloc((WTF *)result);
    v18 = 0;
    do
    {
      *((_BYTE *)&v18->super.isa + v17) = *((_BYTE *)&v18->super.isa + (_QWORD)v15);
      v18 = (NSData *)((char *)v18 + 1);
    }
    while (a3 != v18);
  }
  else
  {
    v17 = 0;
  }
  v20 = v17;
  v21 = (int)a3;
  v22 = (int)a3;
  v23 = 0;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)&v20);
  if (v23 != -1)
    ((void (*)(char *, uint64_t *))off_1E34CB2D8[v23])(&v24, &v20);
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197245558(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17)
{
  WTF::StringImpl *v18;

  if (a11 != -1)
    ((void (*)(char *, uint64_t *))off_1E34CB2D8[a11])(&a16, &a9);
  v18 = a17;
  a17 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::SubFrameSOAuthorizationSession::beforeStart(WebKit::SubFrameSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t i;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _QWORD v16[2];
  int v17;
  char v18;
  _BYTE buf[24];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&v20 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::beforeStart", buf, 0x20u);
  }
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 4) + 40));
  v10 = *(_DWORD **)v9;
  if (*(_QWORD *)v9)
    *v10 += 2;
  *(_QWORD *)buf = v10;
  v11 = *(_OWORD *)(v9 + 24);
  *(_OWORD *)&buf[8] = *(_OWORD *)(v9 + 8);
  v20 = v11;
  v12 = WTF::fastMalloc((WTF *)0x44);
  for (i = 0; i != 68; ++i)
    *(_BYTE *)(v12 + i) = aScriptParentPo_0[i];
  v16[0] = v12;
  v16[1] = 0x4400000044;
  v17 = 0;
  WebKit::SubFrameSOAuthorizationSession::appendRequestToLoad((uint64_t)this, (uint64_t *)buf, (uint64_t)v16);
  if (v17 != -1)
    ((void (*)(char *, _QWORD *))off_1E34CB2D8[v17])(&v18, v16);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972457F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15, char a16, WTF::StringImpl *a17)
{
  WTF::StringImpl *v18;

  if (a11 != -1)
    ((void (*)(char *, uint64_t *))off_1E34CB2D8[a11])(&a16, &a9);
  v18 = a17;
  a17 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::SubFrameSOAuthorizationSession::didFinishLoad(WebKit::SubFrameSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint8_t buf[4];
  WebKit::SubFrameSOAuthorizationSession *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    *(_DWORD *)buf = 134218498;
    v22 = this;
    v23 = 2080;
    v24 = v6;
    v25 = 2080;
    v26 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::didFinishLoad", buf, 0x20u);
  }
  v8 = WebKit::WebFrameProxy::webFrame(*((_QWORD *)this + 14), *((_QWORD *)this + 15));
  v10 = v8;
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(v8 + 8));
    v12 = (_QWORD *)((char *)this + 128);
    v11 = *((_QWORD *)this + 16);
    v13 = (_QWORD *)((char *)this + 136);
    if (v11 == *((_QWORD *)this + 17))
    {
LABEL_30:
      CFRelease(*(CFTypeRef *)(v10 + 8));
      return;
    }
LABEL_17:
    if ((WTF::equal(*(WTF **)(*((_QWORD *)this + 18) + (v11 << 6)), *(const WTF::StringImpl **)(v10 + 48), v9) & 1) != 0)
    {
      if (*v12 == *v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197245AF0);
      }
      std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100]((uint64_t)&v18, (uint64_t *)(*((_QWORD *)this + 18) + (*v12 << 6)));
      if (*v12 == *v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197245B10);
      }
      WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct((WTF::StringImpl *)(*((_QWORD *)this + 18) + (*v12 << 6)), (WTF::StringImpl *)(*((_QWORD *)this + 18) + (*v12 << 6) + 64));
      v15 = *((_QWORD *)this + 16);
      if (v15 == *((unsigned int *)this + 38) - 1)
        v16 = 0;
      else
        v16 = v15 + 1;
      *((_QWORD *)this + 16) = v16;
      if (v20 != -1)
        ((void (*)(uint8_t *, uint64_t *))off_1E34CB2D8[v20])(buf, &v19);
      v20 = -1;
      v17 = v18;
      v18 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(this);
    }
    goto LABEL_30;
  }
  v12 = (_QWORD *)((char *)this + 128);
  v11 = *((_QWORD *)this + 16);
  v13 = (_QWORD *)((char *)this + 136);
  if (v11 != *((_QWORD *)this + 17))
    goto LABEL_17;
}

void sub_197245B18(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(WebKit::SubFrameSOAuthorizationSession *this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE buf[24];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 48);
    v4 = "SubFrame";
    v5 = "PopUp";
    if (v3 != 1)
      v5 = 0;
    if (v3 != 2)
      v4 = v5;
    if (*((_BYTE *)this + 48))
      v6 = v4;
    else
      v6 = "Redirect";
    v7 = "Idle";
    switch(*((_BYTE *)this + 16))
    {
      case 0:
        break;
      case 1:
        v7 = "Active";
        break;
      case 2:
        v7 = "Waiting";
        break;
      case 3:
        v7 = "Completed";
        break;
      default:
        v7 = 0;
        break;
    }
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2080;
    v19 = v7;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::loadRequestToFrame", buf, 0x20u);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v9 - 8));
      if (*((_QWORD *)this + 16) == *((_QWORD *)this + 17))
        goto LABEL_23;
      v10 = WebKit::WebFrameProxy::webFrame(*((_QWORD *)this + 14), *((_QWORD *)this + 15));
      if (!v10)
        goto LABEL_23;
      v11 = v10;
      CFRetain(*(CFTypeRef *)(v10 + 8));
      v16 = v11;
      *(_BYTE *)(v9 + 721) = 1;
      v12 = *((_QWORD *)this + 16);
      if (v12 == *((_QWORD *)this + 17))
      {
        __break(0xC471u);
      }
      else
      {
        v13 = *((_QWORD *)this + 18) + (v12 << 6);
        *(_QWORD *)buf = &v16;
        *(_QWORD *)&buf[8] = v13;
        *(_QWORD *)&buf[16] = &v16;
        v19 = (const char *)v13;
        v14 = *(unsigned int *)(v13 + 56);
        if ((_DWORD)v14 != -1)
        {
          v17 = buf;
          ((void (*)(_BYTE **, uint64_t))*(&off_1E34CB348 + v14))(&v17, v13 + 40);
          v15 = v16;
          v16 = 0;
          if (v15)
            CFRelease(*(CFTypeRef *)(v15 + 8));
LABEL_23:
          CFRelease(*(CFTypeRef *)(v9 - 8));
          return;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
      }
      JUMPOUT(0x197245D4CLL);
    }
  }
}

void sub_197245D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebKit::SubFrameSOAuthorizationSession::didFinishLoad(WebKit::SubFrameSOAuthorizationSession *this)
{
  WebKit::SubFrameSOAuthorizationSession::didFinishLoad((WebKit::SubFrameSOAuthorizationSession *)((char *)this - 96));
}

uint64_t WebKit::SubFrameSOAuthorizationSession::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions(WebKit::SubFrameSOAuthorizationSession *this, const WebCore::ResourceResponse *a2)
{
  API::FrameInfo *v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::URL *v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::SecurityOrigin *v10;
  uint64_t v11;
  uint64_t v12;
  const WebCore::SecurityOrigin **v13;
  const WebCore::SecurityOrigin **v14;
  const WebCore::SecurityOrigin *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore::SecurityOrigin *v23;
  const WTF::URL *v24;
  const WebCore::SecurityOrigin **v25;
  uint64_t v26;
  int isSameSchemeHostPort;
  char v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  const char *v39;
  NSObject *v40;
  void *v41;
  int v42;
  const char *v43;
  const char *v44;
  const char *v45;
  char *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  char *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  WTF::URL *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  void *v60;
  int v61;
  const char *v62;
  const char *v63;
  char *v64;
  WTF *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  __int128 v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75[30];
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  const WebCore::SecurityOrigin **v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  _BYTE buf[24];
  _BYTE v86[18];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v79 = 0;
  v80 = 0;
  v4 = *(API::FrameInfo **)(*((_QWORD *)this + 4) + 24);
  if (v4)
  {
    API::FrameInfo::parentFrameHandle(v4, v75);
    v5 = v75[0];
    if (v75[0])
    {
      v6 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(v75[0] + 16), *(_QWORD *)(v75[0] + 24));
      if (!v6)
        goto LABEL_14;
      v8 = v6;
      do
      {
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v8 + 48), v7);
        LODWORD(v9) = HIDWORD(v80);
        if (HIDWORD(v80) == (_DWORD)v80)
        {
          v13 = (const WebCore::SecurityOrigin **)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, HIDWORD(v80) + 1, (unint64_t)buf);
          v9 = HIDWORD(v80);
          v14 = v79;
          v15 = *v13;
          *v13 = 0;
          v14[v9] = v15;
        }
        else
        {
          v10 = *(const WebCore::SecurityOrigin **)buf;
          *(_QWORD *)buf = 0;
          v79[HIDWORD(v80)] = v10;
        }
        HIDWORD(v80) = v9 + 1;
        v11 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v11)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v11, v7);
        v12 = *(_QWORD *)(v8 + 312);
        if (!v12)
          break;
        v8 = *(_QWORD *)(v12 + 8);
      }
      while (v8);
      v5 = v75[0];
      if (v75[0])
LABEL_14:
        CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
  v16 = WebCore::ResourceResponseBase::url(a2);
  v17 = *(WTF::StringImpl **)v16;
  if (*(_QWORD *)v16)
  {
    *(_DWORD *)v17 += 2;
    v18 = *(_OWORD *)(v16 + 8);
    v78 = *(_OWORD *)(v16 + 24);
    v77 = v18;
    *(_DWORD *)v17 += 2;
  }
  else
  {
    v71 = *(_OWORD *)(v16 + 8);
    v78 = *(_OWORD *)(v16 + 24);
    v77 = v71;
  }
  v76 = v17;
  *(_QWORD *)buf = v17;
  *(_OWORD *)&buf[8] = v77;
  *(_OWORD *)v86 = v78;
  MEMORY[0x19AEB0E58](v75, buf, 0, 0);
  v20 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  MEMORY[0x19AEB40D4](buf, a2);
  WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)(*((_QWORD *)this + 4) + 40));
  WebCore::ContentSecurityPolicy::didReceiveHeaders();
  v22 = v84;
  v84 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v21);
  if ((WebCore::ContentSecurityPolicy::allowFrameAncestors() & 1) != 0)
  {
    if ((WebCore::ContentSecurityPolicy::overridesXFrameOptions((WebCore::ContentSecurityPolicy *)v75) & 1) == 0)
    {
      WebCore::ResourceResponseBase::httpHeaderField();
      if (v74)
      {
        v23 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(a2);
        switch(WebCore::parseXFrameOptionsHeader())
        {
          case 1u:
            goto LABEL_103;
          case 2u:
            WebCore::SecurityOrigin::create(v23, v24);
            if (HIDWORD(v80))
            {
              v25 = v79;
              v26 = 8 * HIDWORD(v80) - 8;
              do
              {
                isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort(*(WebCore::SecurityOrigin **)buf, *v25++);
                if (v26)
                  v28 = isSameSchemeHostPort;
                else
                  v28 = 0;
                v26 -= 8;
              }
              while ((v28 & 1) != 0);
              v29 = isSameSchemeHostPort ^ 1;
            }
            else
            {
              v29 = 0;
            }
            v36 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v36)
            {
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v36, v24);
              if (v29)
                goto LABEL_103;
            }
            else if (v29)
            {
LABEL_103:
              v54 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
              WTF::URL::stringCenterEllipsizedToLength(v54);
              v55 = v74;
              if (v74)
                *(_DWORD *)v74 += 2;
              v72 = v55;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to display '", 21, (uint64_t *)&v73, (uint64_t)"' in a frame because it set 'X-Frame-Options' to '", 51, (uint64_t *)&v72, (uint64_t)"'.", 3, &v84);
              v57 = v72;
              v72 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, v56);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v73;
              v73 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, v56);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = qword_1ECE70E98;
              if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
              {
                v61 = *((unsigned __int8 *)this + 48);
                if (*((_BYTE *)this + 48))
                {
                  if (v61 == 2)
                  {
                    v62 = "SubFrame";
                  }
                  else if (v61 == 1)
                  {
                    v62 = "PopUp";
                  }
                  else
                  {
                    v62 = 0;
                  }
                }
                else
                {
                  v62 = "Redirect";
                }
                v63 = "Idle";
                switch(*((_BYTE *)this + 16))
                {
                  case 0:
                    break;
                  case 1:
                    v63 = "Active";
                    break;
                  case 2:
                    v63 = "Waiting";
                    break;
                  case 3:
                    v63 = "Completed";
                    break;
                  default:
                    v63 = 0;
                    break;
                }
                WTF::String::utf8();
                if (v83)
                  v64 = (char *)v83 + 16;
                else
                  v64 = 0;
                *(_DWORD *)buf = 134218754;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v62;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)v86 = v63;
                *(_WORD *)&v86[8] = 2080;
                *(_QWORD *)&v86[10] = v64;
                _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions: %s", buf, 0x2Au);
                v65 = v83;
                v83 = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 1)
                    WTF::fastFree(v65, v60);
                  else
                    --*(_DWORD *)v65;
                }
              }
              v66 = v84;
              v84 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v60);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = v74;
              v74 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v60);
                else
                  *(_DWORD *)v67 -= 2;
              }
              goto LABEL_141;
            }
LABEL_84:
            v49 = v74;
            v74 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, v24);
              else
                *(_DWORD *)v49 -= 2;
            }
            break;
          case 4u:
            v30 = v74;
            *(_DWORD *)v74 += 2;
            v81 = v30;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Invalid 'X-Frame-Options' header encountered: '", 48, (uint64_t *)&v81, (uint64_t)"' is not a recognized directive. The header will be ignored.", 61, &v84);
            v32 = v81;
            v81 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v31);
              else
                *(_DWORD *)v32 -= 2;
            }
            v37 = qword_1ECE70E98;
            if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
            {
              v38 = *((unsigned __int8 *)this + 48);
              if (*((_BYTE *)this + 48))
              {
                if (v38 == 2)
                {
                  v39 = "SubFrame";
                }
                else if (v38 == 1)
                {
                  v39 = "PopUp";
                }
                else
                {
                  v39 = 0;
                }
              }
              else
              {
                v39 = "Redirect";
              }
              v44 = "Idle";
              switch(*((_BYTE *)this + 16))
              {
                case 0:
                  break;
                case 1:
                  v44 = "Active";
                  break;
                case 2:
                  v44 = "Waiting";
                  break;
                case 3:
                  v44 = "Completed";
                  break;
                default:
                  v44 = 0;
                  break;
              }
              WTF::String::utf8();
              if (v82)
                v46 = (char *)v82 + 16;
              else
                v46 = 0;
              *(_DWORD *)buf = 134218754;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v39;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)v86 = v44;
              *(_WORD *)&v86[8] = 2080;
              *(_QWORD *)&v86[10] = v46;
              _os_log_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::shouldInterruptLoadForXFrameOptions: %s", buf, 0x2Au);
              v47 = v82;
              v82 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 1)
                  WTF::fastFree(v47, v24);
                else
                  --*(_DWORD *)v47;
              }
            }
            v48 = v84;
            v84 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, v24);
              else
                *(_DWORD *)v48 -= 2;
            }
            goto LABEL_84;
          case 5u:
            v33 = v74;
            *(_DWORD *)v74 += 2;
            v83 = v33;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Multiple 'X-Frame-Options' headers with conflicting values ('", 62, (uint64_t *)&v83, (uint64_t)"') encountered. Falling back to 'DENY'.", 40, &v84);
            v35 = v83;
            v83 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
            v40 = qword_1ECE70E98;
            if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
            {
              v42 = *((unsigned __int8 *)this + 48);
              if (*((_BYTE *)this + 48))
              {
                if (v42 == 2)
                {
                  v43 = "SubFrame";
                }
                else if (v42 == 1)
                {
                  v43 = "PopUp";
                }
                else
                {
                  v43 = 0;
                }
              }
              else
              {
                v43 = "Redirect";
              }
              v45 = "Idle";
              switch(*((_BYTE *)this + 16))
              {
                case 0:
                  break;
                case 1:
                  v45 = "Active";
                  break;
                case 2:
                  v45 = "Waiting";
                  break;
                case 3:
                  v45 = "Completed";
                  break;
                default:
                  v45 = 0;
                  break;
              }
              WTF::String::utf8();
              if (v82)
                v51 = (char *)v82 + 16;
              else
                v51 = 0;
              *(_DWORD *)buf = 134218754;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v43;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)v86 = v45;
              *(_WORD *)&v86[8] = 2080;
              *(_QWORD *)&v86[10] = v51;
              _os_log_impl(&dword_196BCC000, v40, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SubFrameSOAuthorizationSession::shouldInterruptLoadForXFrameOptions: %s", buf, 0x2Au);
              v52 = v82;
              v82 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 1)
                  WTF::fastFree(v52, v41);
                else
                  --*(_DWORD *)v52;
              }
            }
            v53 = v84;
            v84 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v41);
              else
                *(_DWORD *)v53 -= 2;
            }
            goto LABEL_103;
          default:
            goto LABEL_84;
        }
      }
    }
    v50 = 0;
  }
  else
  {
LABEL_141:
    v50 = 1;
  }
  MEMORY[0x19AEB0E64](v75);
  v69 = v76;
  v76 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v68);
    else
      *(_DWORD *)v69 -= 2;
  }
  WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v68);
  return v50;
}

void sub_197246704(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(v12 - 128);
  *(_QWORD *)(v12 - 128) = 0;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, a2);
  if (a12)
    CFRelease(*(CFTypeRef *)(a12 + 8));
  WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 176, a2);
  _Unwind_Resume(a1);
}

void sub_197246E7C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197248168(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,CFTypeRef cf)
{
  WTF::StringImpl *v44;
  CFTypeRef v45;

  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  v45 = cf;
  cf = 0;
  if (v45)
    CFRelease(v45);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a13, v44);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIGamepadProvider::platformSetDefaultGamepadProvider(WebKit::UIGamepadProvider *this)
{
  uint64_t v1;
  uint64_t result;
  WebCore::GamepadProvider *v3;
  WebCore::GamepadProvider *v4;

  v1 = WebCore::GamepadProvider::singleton(this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((result & 1) == 0)
  {
    v3 = (WebCore::GamepadProvider *)WebCore::GameControllerGamepadProvider::singleton((WebCore::GameControllerGamepadProvider *)result);
    return WebCore::GamepadProvider::setSharedProvider(v3, v4);
  }
  return result;
}

uint64_t WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(WebKit::UIGamepadProvider *this)
{
  void *v1;

  v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "keyWindow"), "firstResponder");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(v1, "page");
  else
    return 0;
}

void WebKit::RedirectSOAuthorizationSession::~RedirectSOAuthorizationSession(WebKit::RedirectSOAuthorizationSession *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RedirectSOAuthorizationSession::~RedirectSOAuthorizationSession(WebKit::RedirectSOAuthorizationSession *this, WTF::StringImpl *a2)
{
  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession((WebKit::RedirectSOAuthorizationSession *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NavigationSOAuthorizationSession::~NavigationSOAuthorizationSession((WebKit::RedirectSOAuthorizationSession *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned __int8 *result;

  result = *(unsigned __int8 **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  return result;
}

void WTF::BlockPtr<void ()(SOAuthorizationHints *,NSError *)>::fromCallable<WebKit::SOAuthorizationSession::start(void)::$_0>(WebKit::SOAuthorizationSession::start(void)::$_0)::{lambda(void *,SOAuthorizationHints *,NSError *)#1}::__invoke(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  WTF::Lock *v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  const char *v19;
  int v20;
  const char *v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  int v25;
  const char *v26;
  const char *v27;
  char *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  const char *v35;
  WTF::StringImpl *v36;
  int v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::ThreadSafeWeakPtrControlBlock *v43;
  WTF::ThreadSafeWeakPtrControlBlock *v44;
  _QWORD *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF *v50;
  _BYTE buf[12];
  __int16 v52;
  const char *v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  v7 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v6 + 48);
    v9 = "SubFrame";
    v10 = "PopUp";
    if (v8 != 1)
      v10 = 0;
    if (v8 != 2)
      v9 = v10;
    if (*(_BYTE *)(v6 + 48))
      v11 = v9;
    else
      v11 = "Redirect";
    v12 = "Idle";
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0:
        goto LABEL_15;
      case 1:
        v12 = "Active";
        if (!a3)
          goto LABEL_18;
        goto LABEL_16;
      case 2:
        v12 = "Waiting";
LABEL_15:
        if (a3)
          goto LABEL_16;
        goto LABEL_18;
      case 3:
        v12 = "Completed";
        if (!a3)
          goto LABEL_18;
        goto LABEL_16;
      default:
        v12 = 0;
        if (a3)
LABEL_16:
          v13 = objc_msgSend(a3, "code");
        else
LABEL_18:
          v13 = 0;
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v6;
        v52 = 2080;
        v53 = v11;
        v54 = 2080;
        v55 = v12;
        v56 = 2048;
        v57 = (char *)v13;
        _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start: Receive SOAuthorizationHints (error=%ld)", buf, 0x2Au);
        break;
    }
  }
  v14 = (WTF::Lock *)a1[5];
  if (!v14)
  {
    v16 = qword_1ECE70E98;
LABEL_30:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "SOAuthorizationSession::start (getAuthorizationHintsWithURL completion handler): Returning early because weakThis is now null.", buf, 2u);
    }
    return;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v49, v14, a1[6]);
  v15 = v49;
  v16 = qword_1ECE70E98;
  if (!v49)
    goto LABEL_30;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT);
  if (!a2 || a3)
  {
    if (v17)
    {
      v20 = *(unsigned __int8 *)(v6 + 48);
      if (*(_BYTE *)(v6 + 48))
      {
        if (v20 == 2)
        {
          v21 = "SubFrame";
        }
        else if (v20 == 1)
        {
          v21 = "PopUp";
        }
        else
        {
          v21 = 0;
        }
      }
      else
      {
        v21 = "Redirect";
      }
      v23 = "Idle";
      switch(*(_BYTE *)(v6 + 16))
      {
        case 0:
          break;
        case 1:
          v23 = "Active";
          break;
        case 2:
          v23 = "Waiting";
          break;
        case 3:
          v23 = "Completed";
          break;
        default:
          v23 = 0;
          break;
      }
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v6;
      v52 = 2080;
      v53 = v21;
      v54 = 2080;
      v55 = v23;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start (getAuthorizationHintsWithURL completion handler): Returning early due to error or lack of hints.", buf, 0x20u);
    }
    goto LABEL_119;
  }
  if (v17)
  {
    v18 = *(unsigned __int8 *)(v6 + 48);
    if (*(_BYTE *)(v6 + 48))
    {
      if (v18 == 2)
      {
        v19 = "SubFrame";
      }
      else if (v18 == 1)
      {
        v19 = "PopUp";
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = "Redirect";
    }
    v22 = "Idle";
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0:
        break;
      case 1:
        v22 = "Active";
        break;
      case 2:
        v22 = "Waiting";
        break;
      case 3:
        v22 = "Completed";
        break;
      default:
        v22 = 0;
        break;
    }
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v6;
    v52 = 2080;
    v53 = v19;
    v54 = 2080;
    v55 = v22;
    _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::start (getAuthorizationHintsWithURL completion handler): Receive SOAuthorizationHints.", buf, 0x20u);
  }
  MEMORY[0x19AEABCC8](&v48, objc_msgSend(a2, "localizedExtensionBundleDisplayName"));
  v24 = qword_1ECE70E98;
  if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(unsigned __int8 *)(v6 + 48);
    if (*(_BYTE *)(v6 + 48))
    {
      if (v25 == 2)
      {
        v26 = "SubFrame";
      }
      else if (v25 == 1)
      {
        v26 = "PopUp";
      }
      else
      {
        v26 = 0;
      }
    }
    else
    {
      v26 = "Redirect";
    }
    v27 = "Idle";
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0:
        break;
      case 1:
        v27 = "Active";
        break;
      case 2:
        v27 = "Waiting";
        break;
      case 3:
        v27 = "Completed";
        break;
      default:
        v27 = 0;
        break;
    }
    WTF::String::utf8();
    if (v50)
      v28 = (char *)v50 + 16;
    else
      v28 = 0;
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = v6;
    v52 = 2080;
    v53 = v26;
    v54 = 2080;
    v55 = v27;
    v56 = 2080;
    v57 = v28;
    _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: (hints=%s)", buf, 0x2Au);
    v30 = v50;
    v50 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v29);
      else
        --*(_DWORD *)v30;
    }
  }
  v31 = *(_QWORD *)(v6 + 40);
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    v33 = qword_1ECE70E98;
    if (v32)
    {
      if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(unsigned __int8 *)(v6 + 48);
        if (*(_BYTE *)(v6 + 48))
        {
          if (v34 == 2)
          {
            v35 = "SubFrame";
          }
          else if (v34 == 1)
          {
            v35 = "PopUp";
          }
          else
          {
            v35 = 0;
          }
        }
        else
        {
          v35 = "Redirect";
        }
        v40 = "Idle";
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
            break;
          case 1:
            v40 = "Active";
            break;
          case 2:
            v40 = "Waiting";
            break;
          case 3:
            v40 = "Completed";
            break;
          default:
            v40 = 0;
            break;
        }
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v6;
        v52 = 2080;
        v53 = v35;
        v54 = 2080;
        v55 = v40;
        _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Checking page for policy choice.", buf, 0x20u);
        v41 = *(_QWORD *)(v6 + 40);
        if (!v41)
        {
          v42 = 0;
LABEL_110:
          v43 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v6 + 8);
          if (v43)
            v44 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v43);
          else
            v44 = 0;
          v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v45 = &off_1E34CB308;
          v45[1] = v44;
          v45[2] = v6;
          *(_QWORD *)buf = v45;
          (*(void (**)(_QWORD, uint64_t, _QWORD, WTF::StringImpl **, _BYTE *))(**(_QWORD **)(v42 + 72) + 368))(*(_QWORD *)(v42 + 72), v42, 0, &v48, buf);
          v46 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          goto LABEL_114;
        }
        v32 = *(_QWORD *)(v41 + 8);
      }
      if (v32)
        v42 = v32 - 16;
      else
        v42 = 0;
      goto LABEL_110;
    }
  }
  else
  {
    v33 = qword_1ECE70E98;
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v37 = *(unsigned __int8 *)(v6 + 48);
    if (*(_BYTE *)(v6 + 48))
    {
      if (v37 == 2)
      {
        v38 = "SubFrame";
      }
      else if (v37 == 1)
      {
        v38 = "PopUp";
      }
      else
      {
        v38 = 0;
      }
    }
    else
    {
      v38 = "Redirect";
    }
    v39 = "Idle";
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0:
        break;
      case 1:
        v39 = "Active";
        break;
      case 2:
        v39 = "Waiting";
        break;
      case 3:
        v39 = "Completed";
        break;
      default:
        v39 = 0;
        break;
    }
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v6;
    v52 = 2080;
    v53 = v38;
    v54 = 2080;
    v55 = v39;
    _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Early return due to null m_page", buf, 0x20u);
  }
LABEL_114:
  v47 = v48;
  v48 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v36);
    else
      *(_DWORD *)v47 -= 2;
  }
  v15 = v49;
  if (v49)
LABEL_119:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v15 + 8));
}

void sub_197248F94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  unsigned __int8 *v10;
  uint64_t v11;

  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v11 + 8));
  _Unwind_Resume(a1);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E34CB2E8[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 16) = v3;
  }
  return a1;
}

void sub_19724908C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(unsigned int *)(v12 + 16);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_1E34CB2D8[v14])(&a12, v12);
  *(_DWORD *)(v12 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::continueStartAfterGetAuthorizationHints(WTF::String const&)::$_0,void,WebKit::SOAuthorizationLoadPolicy>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34CB308;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::continueStartAfterGetAuthorizationHints(WTF::String const&)::$_0,void,WebKit::SOAuthorizationLoadPolicy>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CB308;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::continueStartAfterGetAuthorizationHints(WTF::String const&)::$_0,void,WebKit::SOAuthorizationLoadPolicy>::call(uint64_t a1, int a2)
{
  WTF::Lock *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t (*v35)();
  PAL *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WebKit::WebPageProxy *v40;
  id v41;
  void *v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  int v46;
  const char *v47;
  const char *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  id v51;
  _QWORD v52[3];
  PAL *v53[3];
  _BYTE buf[12];
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  _BOOL4 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *(WTF::Lock **)(a1 + 8);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v50, v3, *(_QWORD *)(a1 + 16));
    v4 = v50;
    if (v50)
    {
      v5 = qword_1ECE70E98;
      v6 = os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if ((_DWORD)v6)
        {
          v8 = *(unsigned __int8 *)(v4 + 48);
          if (*(_BYTE *)(v4 + 48))
          {
            if (v8 == 2)
            {
              v9 = "SubFrame";
            }
            else if (v8 == 1)
            {
              v9 = "PopUp";
            }
            else
            {
              v9 = 0;
            }
          }
          else
          {
            v9 = "Redirect";
          }
          v12 = "Idle";
          switch(*(_BYTE *)(v4 + 16))
          {
            case 0:
              break;
            case 1:
              v12 = "Active";
              break;
            case 2:
              v12 = "Waiting";
              break;
            case 3:
              v12 = "Completed";
              break;
            default:
              v12 = 0;
              break;
          }
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v4;
          v55 = 2080;
          v56 = v9;
          v57 = 2080;
          v58 = v12;
          _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterDecidePolicy: Receive SOAuthorizationLoadPolicy::Ignore. Falling back to web path.", buf, 0x20u);
        }
        WebKit::SOAuthorizationSession::fallBackToWebPath((WebKit::SOAuthorizationSession *)v4);
      }
      else
      {
        if ((_DWORD)v6)
        {
          v10 = *(unsigned __int8 *)(v4 + 48);
          if (*(_BYTE *)(v4 + 48))
          {
            if (v10 == 2)
            {
              v11 = "SubFrame";
            }
            else if (v10 == 1)
            {
              v11 = "PopUp";
            }
            else
            {
              v11 = 0;
            }
          }
          else
          {
            v11 = "Redirect";
          }
          v13 = "Idle";
          switch(*(_BYTE *)(v4 + 16))
          {
            case 0:
              break;
            case 1:
              v13 = "Active";
              break;
            case 2:
              v13 = "Waiting";
              break;
            case 3:
              v13 = "Completed";
              break;
            default:
              v13 = 0;
              break;
          }
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v4;
          v55 = 2080;
          v56 = v11;
          v57 = 2080;
          v58 = v13;
          _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterDecidePolicy: Receive SOAuthorizationLoadPolicy::Allow", buf, 0x20u);
        }
        v14 = *(_QWORD *)(v4 + 24);
        if (v14 && (v15 = *(_QWORD *)(v4 + 40)) != 0 && *(_QWORD *)(v15 + 8) && (v16 = *(_QWORD *)(v4 + 32)) != 0)
        {
          v17 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v17 += 2;
          v18 = *(_QWORD *)(v16 + 16);
          if (v18)
          {
            WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(v18 + 224));
            WebCore::SecurityOrigin::toString(v53[0]);
            v19 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
              {
                WTF::StringImpl::destroy(v17, v7);
                v27 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2)
                    WTF::StringImpl::destroy(v27, v7);
                  else
                    *(_DWORD *)v27 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v17 -= 2;
                *(_QWORD *)buf = 0;
              }
            }
            v6 = (uint64_t)v53[0];
            v53[0] = 0;
            if (v6)
              v6 = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v7);
            v17 = v19;
          }
          if (*(_BYTE *)(v4 + 48) == 2)
          {
            v28 = *(_QWORD *)(v4 + 40);
            if (v28)
            {
              v29 = *(_QWORD *)(v28 + 8);
              v30 = v29 ? v29 - 16 : 0;
              v31 = *(_QWORD *)(v30 + 280);
              if (v31)
              {
                WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v31 + 48), v7);
                WebCore::SecurityOrigin::toString(v53[0]);
                v33 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                  {
                    WTF::StringImpl::destroy(v17, v32);
                    v34 = *(WTF::StringImpl **)buf;
                    *(_QWORD *)buf = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, v32);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v17 -= 2;
                    *(_QWORD *)buf = 0;
                  }
                }
                v6 = (uint64_t)v53[0];
                v53[0] = 0;
                if (v6)
                  v6 = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v32);
                v17 = v33;
              }
            }
          }
          v52[0] = PAL::get_AppSSO_SOAuthorizationOptionUserActionInitiated((PAL *)v6);
          if (*(_QWORD *)(*(_QWORD *)(v4 + 32) + 288))
            v35 = WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>::unspecifiedBoolTypeInstance;
          else
            v35 = 0;
          v53[0] = (PAL *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v35 != 0);
          v52[1] = PAL::get_AppSSO_SOAuthorizationOptionInitiatorOrigin(v53[0]);
          if (v17)
            v36 = (PAL *)WTF::StringImpl::operator NSString *();
          else
            v36 = (PAL *)&stru_1E351F1B8;
          v53[1] = v36;
          v52[2] = PAL::get_AppSSO_SOAuthorizationOptionInitiatingAction(v36);
          v53[2] = (PAL *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(unsigned __int8 *)(v4 + 48));
          v37 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v53, v52, 3);
          v38 = *(_QWORD *)(v4 + 40);
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 8);
            if (v39)
              v40 = (WebKit::WebPageProxy *)(v39 - 16);
            else
              v40 = 0;
          }
          else
          {
            v40 = 0;
          }
          WebKit::WebPageProxy::cocoaView(v40, &v51);
          v41 = v51;
          v42 = (void *)objc_msgSend(v51, "UIDelegate");
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            v43 = objc_msgSend(v42, "_hostSceneIdentifierForWebView:", v41);
            if (v43)
            {
              v37 = (void *)objc_msgSend(v37, "mutableCopy");
              objc_msgSend(v37, "setObject:forKeyedSubscript:", v43, CFSTR("callerSceneIdentifier"));
            }
          }
          objc_msgSend(*(id *)(v4 + 24), "setAuthorizationOptions:", v37);
          v44 = (void *)WebCore::ResourceRequest::nsURLRequest();
          v45 = qword_1ECE70E98;
          if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
          {
            v46 = *(unsigned __int8 *)(v4 + 48);
            if (*(_BYTE *)(v4 + 48))
            {
              if (v46 == 2)
              {
                v47 = "SubFrame";
              }
              else if (v46 == 1)
              {
                v47 = "PopUp";
              }
              else
              {
                v47 = 0;
              }
            }
            else
            {
              v47 = "Redirect";
            }
            v48 = "Idle";
            switch(*(_BYTE *)(v4 + 16))
            {
              case 0:
                break;
              case 1:
                v48 = "Active";
                break;
              case 2:
                v48 = "Waiting";
                break;
              case 3:
                v48 = "Completed";
                break;
              default:
                v48 = 0;
                break;
            }
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = v4;
            v55 = 2080;
            v56 = v47;
            v57 = 2080;
            v58 = v48;
            _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Beginning authorization with AppSSO.", buf, 0x20u);
          }
          objc_msgSend(*(id *)(v4 + 24), "beginAuthorizationWithURL:httpHeaders:httpBody:", objc_msgSend(v44, "URL"), objc_msgSend(v44, "allHTTPHeaderFields"), objc_msgSend(v44, "HTTPBody"));
          if (v41)
            CFRelease(v41);
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v49);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        else
        {
          v20 = qword_1ECE70E98;
          if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(unsigned __int8 *)(v4 + 48);
            if (*(_BYTE *)(v4 + 48))
            {
              if (v21 == 2)
              {
                v22 = "SubFrame";
              }
              else if (v21 == 1)
              {
                v22 = "PopUp";
              }
              else
              {
                v22 = 0;
              }
            }
            else
            {
              v22 = "Redirect";
            }
            v23 = "Idle";
            switch(*(_BYTE *)(v4 + 16))
            {
              case 0:
                break;
              case 1:
                v23 = "Active";
                break;
              case 2:
                v23 = "Waiting";
                break;
              case 3:
                v23 = "Completed";
                break;
              default:
                v23 = 0;
                break;
            }
            v24 = *(_QWORD *)(v4 + 40);
            if (v24)
            {
              v25 = *(_QWORD *)(v24 + 8);
              if (v25)
                v24 = v25 - 16;
              else
                v24 = 0;
            }
            v26 = *(_QWORD *)(v4 + 32);
            *(_DWORD *)buf = 134219266;
            *(_QWORD *)&buf[4] = v4;
            v55 = 2080;
            v56 = v22;
            v57 = 2080;
            v58 = v23;
            v59 = 1024;
            v60 = v14 != 0;
            v61 = 2048;
            v62 = v24;
            v63 = 2048;
            v64 = v26;
            _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::continueStartAfterGetAuthorizationHints: Early return m_soAuthorization=%d, m_page=%p, navigationAction=%p.", buf, 0x3Au);
          }
        }
      }
      if (v50)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v50 + 8));
    }
  }
}

void sub_197249904(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  WTF::StringImpl *v14;

  if (a14)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a14, a2);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (a9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(a9 + 8));
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::complete(NSHTTPURLResponse *,NSData *)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  void *v5;
  unsigned __int8 *v6;

  *a1 = off_1E34CB330;
  v3 = (const void *)a1[36];
  a1[36] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[34];
  a1[34] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 4), a2);
  v6 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::complete(NSHTTPURLResponse *,NSData *)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  void *v5;
  unsigned __int8 *v6;

  *a1 = off_1E34CB330;
  v3 = (const void *)a1[36];
  a1[36] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[34];
  a1[34] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 4), a2);
  v6 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  return WTF::fastFree((WTF *)a1, v5);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::SOAuthorizationSession::complete(NSHTTPURLResponse *,NSData *)::$_0,void>::call(unsigned __int8 *result)
{
  WTF::Lock *v1;
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint8_t buf[4];
  _BYTE *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = (WTF::Lock *)*((_QWORD *)result + 2);
  if (v1)
  {
    v2 = result;
    v3 = (_BYTE *)*((_QWORD *)result + 1);
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v9, v1, *((_QWORD *)result + 3));
    v4 = v9;
    if (v9)
    {
      v5 = qword_1ECE70E98;
      if (os_log_type_enabled((os_log_t)qword_1ECE70E98, OS_LOG_TYPE_DEFAULT))
      {
        v6 = v3[48];
        if (v3[48])
        {
          if (v6 == 2)
          {
            v7 = "SubFrame";
          }
          else if (v6 == 1)
          {
            v7 = "PopUp";
          }
          else
          {
            v7 = 0;
          }
        }
        else
        {
          v7 = "Redirect";
        }
        v8 = "Idle";
        switch(v3[16])
        {
          case 0:
            break;
          case 1:
            v8 = "Active";
            break;
          case 2:
            v8 = "Waiting";
            break;
          case 3:
            v8 = "Completed";
            break;
          default:
            v8 = 0;
            break;
        }
        *(_DWORD *)buf = 134218498;
        v11 = v3;
        v12 = 2080;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [InitiatingAction=%s][State=%s] SOAuthorizationSession::complete: Cookies are set.", buf, 0x20u);
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 40))(v3, v2 + 32, *((_QWORD *)v2 + 36));
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 8));
    }
  }
  return result;
}

void sub_197249BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SOAuthorizationSession,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v8 = v2;
    v9 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 14);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E34CB2D8[v6])(&v7, (char *)v5 + 40);
      *((_DWORD *)v5 + 14) = -1;
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 64);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  WTF::URL::URL(a1, a2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v4 + 40, (uint64_t)(a2 + 5));
  return a1;
}

void sub_197249CE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v11 = v3;
    v12 = v4;
    v7 = result;
    do
    {
      std::pair<WTF::URL,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>::pair[abi:sn180100](a3, (uint64_t *)v7);
      v9 = *((unsigned int *)v7 + 14);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, char *))off_1E34CB2D8[v9])(&v10, (char *)v7 + 40);
      *((_DWORD *)v7 + 14) = -1;
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 64;
      v7 = (WTF::StringImpl *)((char *)v7 + 64);
    }
    while (v7 != a2);
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(void)::$_0,WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[2];

  v2 = *a1;
  v3 = ***a1;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 12);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v10[1];
  WebKit::WebFrameProxy::loadData(v3, v4, v5, (uint64_t)v10, (uint64_t)&v9, (uint64_t)v2[1]);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v10[0];
  v10[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197249E90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(void)::$_0,WebKit::SubFrameSOAuthorizationSession::loadRequestToFrame(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &>(uint64_t a1, const WTF::String *a2)
{
  WebKit::WebFrameProxy::loadURL(**(WebKit::WebFrameProxy ***)(*(_QWORD *)a1 + 16), *(const WTF::URL **)(*(_QWORD *)a1 + 24), a2);
}

uint64_t WebKit::shouldTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char shouldTransform;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 1
    && (v5 = *(unsigned int *)(a1 + 28), (_DWORD)v5))
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = 8 * v5;
    while (!*v6 || (WebKit::shouldTransform(*v6, a2) & 1) == 0)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != 9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
    v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 16));
    v9 = v8;
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
    if ((_QWORD *)v13 == v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
    while (1)
    {
      v14 = v9[1];
      if (v14)
      {
        CFRetain(*(CFTypeRef *)(v14 + 8));
        shouldTransform = WebKit::shouldTransform(v14, a2);
        CFRelease(*(CFTypeRef *)(v14 + 8));
        if ((shouldTransform & 1) != 0)
          break;
      }
      while (1)
      {
        v9 += 2;
        if (v9 == v11)
          break;
        if ((unint64_t)(*v9 + 1) > 1)
          goto LABEL_19;
      }
      v9 = v11;
LABEL_19:
      if (v9 == (_QWORD *)v13)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
    }
  }
  return 1;
}

uint64_t WebKit::transformGraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebKit **a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result == 1)
  {
    v7 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v7)
    {
      if (v7 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v8 = WTF::fastMalloc((WTF *)(8 * v7));
      v9 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v9)
      {
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10);
          if (v11)
          {
            WebKit::transformGraph(v27, v11, a2);
            v12 = v27[0];
            v9 = *(unsigned int *)(a1 + 28);
          }
          else
          {
            v12 = 0;
          }
          v13 = v10 + 1;
          *(_QWORD *)(v8 + 8 * v10) = v12;
          v10 = v13;
        }
        while (v13 < v9);
      }
      else
      {
        LODWORD(v13) = 0;
      }
    }
    else
    {
      LODWORD(v13) = 0;
      v8 = 0;
    }
    v14 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v14 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v14);
    *(_QWORD *)v14 = &off_1E34CC2F8;
    v27[0] = 0;
    v27[1] = 0;
    *(_QWORD *)(v14 + 16) = v8;
    *(_DWORD *)(v14 + 24) = v7;
    *(_DWORD *)(v14 + 28) = v13;
    *a3 = (WebKit *)v14;
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v15);
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 9)
  {
    v28 = 0;
    v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 16));
    v17 = v16;
    v18 = a1;
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 16);
    if (v21)
      v22 = (WTF::StringImpl **)(v21 + 16 * *(unsigned int *)(v21 - 4));
    else
      v22 = 0;
    if (v22 != v16)
    {
      do
      {
        v23 = v17[1];
        if (v23)
        {
          CFRetain(*((CFTypeRef *)v23 + 1));
          WebKit::transformGraph(&v26, v23, a2);
          WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v28, v17, &v26, (uint64_t)v27);
          v24 = v26;
          v26 = 0;
          if (v24)
            CFRelease(*(CFTypeRef *)(v24 + 8));
          CFRelease(*((CFTypeRef *)v23 + 1));
        }
        else
        {
          WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v27, &v28, v17);
        }
        while (1)
        {
          v17 += 2;
          if (v17 == v20)
            break;
          if ((unint64_t)*v17 + 1 > 1)
            goto LABEL_27;
        }
        v17 = v20;
LABEL_27:
        ;
      }
      while (v17 != v22);
    }
    API::Dictionary::create(&v28, a3);
    result = v28;
    if (v28)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v25);
  }
  else
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
  }
  return result;
}

uint64_t WebKit::WebBackForwardListItem::create@<X0>(WTF::RunLoop *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  if ((WTF::RunLoop::isCurrent(v6) & 1) != 0)
  {
    v7 = API::Object::newObject(0x1C0uLL, 44);
    result = WebKit::WebBackForwardListItem::WebBackForwardListItem(v7, (uint64_t)a1, a2);
    *a3 = result;
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebBackForwardListItem::WebBackForwardListItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebBackForwardListItem *v9;
  uint64_t v10;
  _BYTE v12[24];

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34CB368;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 48) = v6;
  WebKit::FrameState::FrameState(a1 + 56, (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 272);
  v7 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 312) = v7;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 288);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 296);
  v8 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 336) = v8;
  *(_QWORD *)(a1 + 344) = 0;
  v9 = (WebKit::WebBackForwardListItem *)WTF::URL::invalidate((WTF::URL *)(a1 + 344));
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 384) = a3;
  *(_QWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  WebKit::WebBackForwardListItem::allItems(v9);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebBackForwardListItem&>(&WebKit::WebBackForwardListItem::allItems(void)::items, (_QWORD *)(a1 + 32), a1, (uint64_t)v12);
  return a1;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebBackForwardListItem&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  __int16 v33;
  char v34;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v32 = -1640531527;
  v33 = 0;
  v34 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v32, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 24 * (result & v9));
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        v28 = *a1;
        if (*a1)
          v29 = *(_DWORD *)(v28 - 4);
        else
          v29 = 0;
        v31 = 0;
        v30 = v28 + 24 * v29;
        goto LABEL_36;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = (_QWORD *)(v8 + 24 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v18 = *(unsigned int **)(a3 + 16);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  result = v12[2];
  v12[2] = v18;
  if (result)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)result));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v17);
    }
  }
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_27:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (uint64_t)v12);
      v12 = (_QWORD *)result;
      v24 = *a1;
      if (*a1)
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      else
        LODWORD(v27) = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_27;
  }
  v30 = v24 + 24 * v27;
  v31 = 1;
LABEL_36:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

void WebKit::WebBackForwardListItem::~WebBackForwardListItem(WTF::StringImpl **this)
{
  WTF::RunLoop *v2;
  uint64_t isCurrent;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v15;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  WebKit::WebBackForwardCache **v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebKit::ViewSnapshot *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WebCore::SerializedScriptValue *v42;

  *this = (WTF::StringImpl *)&off_1E34CB368;
  v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  isCurrent = WTF::RunLoop::isCurrent(v2);
  if ((isCurrent & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19724A8CCLL);
  }
  WebKit::WebBackForwardListItem::allItems((WebKit::WebBackForwardListItem *)isCurrent);
  v5 = WebKit::WebBackForwardListItem::allItems(void)::items;
  if (WebKit::WebBackForwardListItem::allItems(void)::items)
  {
    v6 = *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 8);
    LODWORD(v42) = -1640531527;
    WORD2(v42) = 0;
    BYTE6(v42) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v42, this + 4);
    v7 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
    v8 = this[4];
    v9 = this[5];
    v10 = v7 & v6;
    v11 = (WTF::StringImpl **)(v5 + 24 * (v7 & v6));
    v12 = *v11;
    v13 = v11[1];
    if (*v11 == v8 && v13 == v9)
    {
LABEL_14:
      v17 = WebKit::WebBackForwardListItem::allItems(void)::items;
      if (!WebKit::WebBackForwardListItem::allItems(void)::items)
      {
LABEL_19:
        if ((WTF::StringImpl **)v17 != v11)
        {
          *(_OWORD *)v11 = xmmword_1978CF7D0;
          v18 = (unsigned int *)v11[2];
          v11[2] = 0;
          if (v18)
          {
            do
            {
              v20 = __ldaxr(v18);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v18));
            if (!v21)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v4);
            }
          }
          ++*(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 16);
          if (WebKit::WebBackForwardListItem::allItems(void)::items)
            v19 = *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 12) - 1;
          else
            v19 = -1;
          *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 12) = v19;
          if (WebKit::WebBackForwardListItem::allItems(void)::items)
          {
            v22 = *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 4);
            if (6 * *(_DWORD *)(WebKit::WebBackForwardListItem::allItems(void)::items - 12) < v22 && v22 >= 9)
              WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(&WebKit::WebBackForwardListItem::allItems(void)::items, v22 >> 1, 0);
          }
        }
        goto LABEL_34;
      }
LABEL_18:
      v17 += 24 * *(unsigned int *)(v17 - 4);
      if ((WTF::StringImpl **)v17 == v11)
        goto LABEL_34;
      goto LABEL_19;
    }
    v15 = 1;
    while ((unint64_t)v12 | (unint64_t)v13)
    {
      v10 = (v10 + v15) & v6;
      v11 = (WTF::StringImpl **)(v5 + 24 * v10);
      v12 = *v11;
      v13 = v11[1];
      ++v15;
      if (*v11 == v8 && v13 == v9)
        goto LABEL_14;
    }
    v17 = WebKit::WebBackForwardListItem::allItems(void)::items;
    if (WebKit::WebBackForwardListItem::allItems(void)::items)
    {
      v11 = (WTF::StringImpl **)(WebKit::WebBackForwardListItem::allItems(void)::items
                               + 24 * *(unsigned int *)(WebKit::WebBackForwardListItem::allItems(void)::items - 4));
      goto LABEL_18;
    }
  }
LABEL_34:
  v24 = (WebKit::WebBackForwardCache **)this[52];
  if (v24)
    WebKit::WebBackForwardCache::removeEntry(*v24, (WebKit::WebBackForwardListItem *)this);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 54), v4);
  v26 = (unsigned int *)this[53];
  this[53] = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v25);
    }
  }
  std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100](this + 52, 0);
  v30 = this[43];
  this[43] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = this[42];
  this[42] = 0;
  if (v31)
    WTF::RefCounted<WebKit::ViewSnapshot>::deref(v31);
  v32 = (unsigned int *)this[39];
  this[39] = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      v42 = (WebCore::SerializedScriptValue *)v32;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v42);
    }
  }
  WebKit::FrameState::~FrameState(this + 7);
  v36 = this[6];
  this[6] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = this[3];
  this[3] = 0;
  if (v37)
    CFRelease(*((CFTypeRef *)v37 + 1));
  v38 = this[2];
  if (v38)
  {
    *((_QWORD *)v38 + 1) = 0;
    v39 = (unsigned int *)this[2];
    this[2] = 0;
    if (v39)
    {
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, v35);
      }
    }
  }
  else
  {
    this[2] = 0;
  }
}

{
  WebKit::WebBackForwardListItem::~WebBackForwardListItem(this);
  JUMPOUT(0x19AEB936CLL);
}

BOOL WebKit::WebBackForwardListItem::itemIsClone(WebKit::WebBackForwardListItem *this, const WebKit::WebBackForwardListItem *a2, const WTF::StringImpl *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  WTF **i;

  if (this != a2 && *((_QWORD *)this + 18) == *((_QWORD *)a2 + 18) && *((_QWORD *)this + 10) == *((_QWORD *)a2 + 10))
  {
    v4 = *((_DWORD *)this + 71);
    if (v4 == *((_DWORD *)a2 + 71))
    {
      if (!v4)
        return 1;
      v5 = *((_QWORD *)this + 34);
      v6 = v5 + 248 * v4;
      while (1)
      {
        v7 = *((unsigned int *)a2 + 71);
        v8 = *((_DWORD *)a2 + 71) != 0;
        if (!(_DWORD)v7)
          break;
        v9 = 248 * v7;
        for (i = (WTF **)(*((_QWORD *)a2 + 34) + 24);
              (WTF::equal(*i, *(const WTF::StringImpl **)(v5 + 24), a3) & 1) == 0;
              i += 31)
        {
          v9 -= 248;
          if (!v9)
            return 0;
        }
        v5 += 248;
        if (v5 == v6)
          return v8;
      }
    }
  }
  return 0;
}

CFTypeRef *WebKit::WebBackForwardListItem::childItemForFrameID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef *result;
  CFTypeRef *v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef **i;

  result = (CFTypeRef *)WebKit::WebFrameProxy::webFrame(a2, a3);
  if (result)
  {
    v5 = WebKit::WebFrameProxy::rootFrame(result);
    v6 = *(unsigned int *)(a1 + 444);
    if ((_DWORD)v6)
    {
      v7 = v5[34];
      v8 = v5[35];
      v9 = 8 * v6;
      for (i = *(CFTypeRef ***)(a1 + 432); ; ++i)
      {
        result = *i;
        if ((*i)[50] == v7 && (*i)[51] == v8)
          break;
        v9 -= 8;
        if (!v9)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void WebKit::WebCompiledContentRuleList::~WebCompiledContentRuleList(WebKit::WebCompiledContentRuleList *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::ContentExtensions::CompiledContentExtension::~CompiledContentExtension(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebCompiledContentRuleList::~WebCompiledContentRuleList(this, a2);
  WTF::fastFree(v2, v3);
}

unint64_t WebKit::WebCompiledContentRuleList::topURLFiltersBytecode(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((_QWORD *)this + 3), *((_QWORD *)this + 8), *((_QWORD *)this + 9));
}

unint64_t WebKit::WebCompiledContentRuleList::frameURLFiltersBytecode(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((_QWORD *)this + 3), *((_QWORD *)this + 10), *((_QWORD *)this + 11));
}

_QWORD *WebKit::WebCompiledContentRuleListData::WebCompiledContentRuleListData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v17 = *a2;
  *a2 = 0;
  *a1 = v17;
  v18 = a1 + 1;
  if (*(_BYTE *)(a3 + 16))
  {
    WebCore::SharedMemory::map();
    v19 = *v18;
  }
  else
  {
    v19 = 0;
    *v18 = 0;
  }
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
  a1[6] = a8;
  a1[7] = a9;
  a1[8] = a10;
  a1[9] = a11;
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20 < a11 + a10 || v20 < a9 + a8 || v20 < a5 + a4 || v20 < a7 + a6)
    {
      *v18 = 0;
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v19);
    }
  }
  return a1;
}

{
  return WebKit::WebCompiledContentRuleListData::WebCompiledContentRuleListData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WTF::StringImpl *WebKit::blockedError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("Not allowed to use restricted network port"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 103, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::blockedByContentBlockerError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("The URL was blocked by a content blocker"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 104, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::cannotShowURLError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("The URL can’t be shown"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 101, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::wasBlockedByRestrictionsError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("The URL was blocked by device restrictions"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 106, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::interruptedForPolicyChangeError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("Frame load interrupted"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 102, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::ftpDisabledError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v5 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v12;
    }
    v11 = v6;
  }
  else
  {
    v11 = 0;
  }
  v7 = WebCore::ResourceRequestBase::url(this);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v11, 0, v7, (_DWORD **)&v12, 2, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::failedCustomProtocolSyncLoad@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const __CFString *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v5 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v13;
    }
    v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  v7 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("Error handling synchronous load with custom protocol"), v8);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&v12, 0, v7, (_DWORD **)&v13, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::blockedByContentFilterError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("The URL was blocked by a content filter"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 105, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::cannotShowMIMETypeError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceResponseBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("Content with specified MIME type can’t be shown"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 100, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::pluginWillHandleLoadError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceResponseBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("Plug-in handled load"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 204, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::httpsUpgradeRedirectLoopError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("HTTPS Upgrade redirect loop detected"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 304, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::httpNavigationWithHTTPSOnlyError@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  v4 = WebCore::ResourceRequestBase::url(this);
  WebCore::localizedString((WebCore *)CFSTR("Navigation failed because the request was for an HTTP URL with HTTPS-Only enabled"), v5);
  WebCore::ResourceErrorBase::ResourceErrorBase(a2, (_DWORD **)&API::Error::webKitErrorDomain(void)::webKitErrorDomainString, 305, v4, (_DWORD **)&v8, 1, 0);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)44>::type()
{
  return 44;
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a3 + 4);
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*a3);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = v6 + 16 * (v9 & v7);
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 != -1)
      break;
    v10 = (_QWORD *)(v6 + 16 * v12);
LABEL_13:
    v9 = i + v12;
  }
  if (!v14)
  {
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = (uint64_t)v10;
    }
    WTF::String::operator=((WTF::StringImpl **)v13, (WTF::StringImpl *)a3);
    v15 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    if (v15)
      CFRelease(*(CFTypeRef *)(v15 + 8));
    v16 = *a2;
    if (*a2)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 <= 2 * v20)
      {
LABEL_24:
        v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v13);
        v18 = *a2;
        if (*a2)
          v21 = *(unsigned int *)(v18 - 4);
        else
          v21 = 0;
      }
    }
    else if (3 * v21 <= 4 * v20)
    {
      goto LABEL_24;
    }
    v25 = v18 + 16 * v21;
    v24 = 1;
    goto LABEL_31;
  }
  if (!WTF::equal(v14, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v22 = *a2;
  if (*a2)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  v24 = 0;
  v25 = v22 + 16 * v23;
LABEL_31:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
}

WebKit::WebBackForwardCacheEntry *std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100](WebKit::WebBackForwardCacheEntry **a1, WebKit::WebBackForwardCacheEntry *a2)
{
  WebKit::WebBackForwardCacheEntry *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(result);
    return (WebKit::WebBackForwardCacheEntry *)WTF::fastFree(v4, v5);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  _QWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _OWORD *result;
  unsigned int v37;
  __int16 v38;
  char v39;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 24 * v10;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v16 = v5 + 24 * v10;
          v17 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v9);
            }
          }
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v37 = -1640531527;
          v38 = 0;
          v39 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v37, (_QWORD *)(v5 + 24 * v10));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
          v21 = 0;
          do
          {
            v22 = v20 & v15;
            v23 = (_OWORD *)(v14 + 24 * (v20 & v15));
            v20 = ++v21 + (v20 & v15);
          }
          while (*v23 != 0);
          v24 = v14 + 24 * v22;
          v27 = *(unsigned int **)(v24 + 16);
          v26 = (_QWORD *)(v24 + 16);
          v25 = v27;
          *v26 = 0;
          if (v27)
          {
            do
            {
              v31 = __ldaxr(v25);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v25));
            if (!v32)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v9);
            }
          }
          *v23 = *(_OWORD *)v13;
          v28 = v5 + 24 * v10;
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          *v26 = v29;
          v30 = *(unsigned int **)(v28 + 16);
          *(_QWORD *)(v28 + 16) = 0;
          if (v30)
          {
            do
            {
              v33 = __ldaxr(v30);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v30));
            if (!v34)
            {
              atomic_store(1u, v30);
              WTF::fastFree((WTF *)v30, v9);
            }
          }
          if (v13 == a3)
            v11 = v23;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t v15;
  unsigned int v17;
  __int16 v18;
  char v19;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v17 = -1640531527;
    v18 = 0;
    v19 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v17, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
    v6 = a2[1];
    v7 = v5 & v4;
    v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
LABEL_13:
      v15 = *(_QWORD *)(v2 + 24 * v7 + 16);
      if (v15)
        return *(_QWORD *)(v15 + 8);
    }
    else
    {
      v12 = 1;
      while (v9 | v10)
      {
        v7 = (v7 + v12) & v4;
        v13 = (uint64_t *)(v2 + 24 * v7);
        v9 = *v13;
        v10 = v13[1];
        ++v12;
        if (v9 == *a2 && v10 == v6)
          goto LABEL_13;
      }
    }
  }
  return 0;
}

void sub_19724BF1C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19724C154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void layerPathWithHole(CAShapeLayer *a1, const WebCore::FloatQuad *a2, const WebCore::FloatQuad *this)
{
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int128 v18;
  __int128 v19;
  WebCore::FloatPoint *v20;
  int v21;
  int v22;
  WebCore::FloatPoint *v23;
  int v24;
  int v25;
  WebCore::FloatPoint *v26;
  int v27;
  int v28;
  WebCore::FloatPoint *v29;
  int v30;
  int v31;
  CGPath *Mutable;
  CAShapeLayer *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41[4];

  v6 = *(float *)a2 == *(float *)this && *((float *)a2 + 1) == *((float *)this + 1);
  if (v6
    && (*((float *)a2 + 2) == *((float *)this + 2) ? (v7 = *((float *)a2 + 3) == *((float *)this + 3)) : (v7 = 0),
        v7
     && (*((float *)a2 + 4) == *((float *)this + 4) ? (v8 = *((float *)a2 + 5) == *((float *)this + 5)) : (v8 = 0),
         v8
      && (*((float *)a2 + 6) == *((float *)this + 6) ? (v9 = *((float *)a2 + 7) == *((float *)this + 7)) : (v9 = 0), v9)))
    || WebCore::FloatQuad::containsQuad(this, a2))
  {
    -[CAShapeLayer setPath:](a1, "setPath:", 0);
  }
  else
  {
    if (WebCore::FloatQuad::containsQuad(a2, this))
    {
      v10 = *(float *)this;
      v11 = *((float *)this + 1);
      v12 = *((float *)this + 2);
      v13 = *((float *)this + 3);
      v14 = *((float *)this + 4);
      v15 = *((float *)this + 5);
      v16 = *((float *)this + 6);
      v17 = *((float *)this + 7);
    }
    else
    {
      v18 = *((_OWORD *)a2 + 1);
      v36 = *(_OWORD *)a2;
      v37 = v18;
      v19 = *((_OWORD *)this + 1);
      v34 = *(_OWORD *)this;
      v35 = v19;
      v40 = 0;
      *(_QWORD *)v41 = 0;
      v38 = 0;
      v39 = 0;
      v21 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)&v34);
      v33 = a1;
      if (v21
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)((char *)&v35 + 8), (WebCore::FloatPoint *)v41, v20) & 1) == 0)
      {
        v22 = 0;
        *(_QWORD *)v41 = v34;
      }
      else
      {
        v22 = 1;
      }
      v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)((char *)&v34 + 8));
      if (v24
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)((char *)&v34 + 8), (const WebCore::FloatPoint *)&v35, (WebCore::FloatPoint *)&v40, v23) & 1) == 0)
      {
        v25 = 0;
        v40 = *((_QWORD *)&v34 + 1);
      }
      else
      {
        v25 = 1;
      }
      v27 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)&v35);
      if (v27
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)((char *)&v34 + 8), (const WebCore::FloatPoint *)&v35, (WebCore::FloatPoint *)&v39, v26) & 1) == 0)
      {
        v28 = 0;
        v39 = v35;
      }
      else
      {
        v28 = 1;
      }
      v30 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)&v36, (const WebCore::FloatPoint *)((char *)&v35 + 8));
      if (v30
        || (findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)&v34, (const WebCore::FloatPoint *)((char *)&v35 + 8), (WebCore::FloatPoint *)&v38, v29) & 1) == 0)
      {
        v31 = 0;
        v38 = *((_QWORD *)&v35 + 1);
      }
      else
      {
        v31 = 1;
      }
      if (((v22 | v21 | v25 ^ 1) & 1) != 0)
      {
        if (((v24 | v22 ^ 1 | v25) & 1) == 0)
        {
          v40 = *((_QWORD *)&v36 + 1);
          v24 = 1;
        }
      }
      else
      {
        *(_QWORD *)v41 = v36;
        v21 = 1;
      }
      if (((v30 | v28 ^ 1 | v31) & 1) != 0)
      {
        if (((v28 | v31 ^ 1 | v27) & 1) == 0)
        {
          v39 = v37;
          v27 = 1;
        }
      }
      else
      {
        v38 = *((_QWORD *)&v37 + 1);
        v30 = 1;
      }
      if (((v25 | v24) & 1) == 0)
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)v41, (const WebCore::FloatPoint *)&v40, (WebCore::FloatPoint *)&v40, v29);
      if (((v28 | v27) & 1) == 0)
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)((char *)&v36 + 8), (const WebCore::FloatPoint *)&v37, (const WebCore::FloatPoint *)&v38, (const WebCore::FloatPoint *)&v39, (WebCore::FloatPoint *)&v39, v29);
      if (((v22 | v21) & 1) == 0)
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)v41, (const WebCore::FloatPoint *)&v40, (WebCore::FloatPoint *)v41, v29);
      if (((v31 | v30) & 1) == 0)
        findIntersectionOnLineBetweenPoints((const WebCore::FloatPoint *)&v36, (const WebCore::FloatPoint *)((char *)&v37 + 8), (const WebCore::FloatPoint *)&v38, (const WebCore::FloatPoint *)&v39, (WebCore::FloatPoint *)&v38, v29);
      v11 = v41[1];
      v10 = v41[0];
      v13 = *((float *)&v40 + 1);
      v12 = *(float *)&v40;
      v15 = *((float *)&v39 + 1);
      v14 = *(float *)&v39;
      v17 = *((float *)&v38 + 1);
      v16 = *(float *)&v38;
      a1 = v33;
    }
    Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, v10, v11);
    CGPathAddLineToPoint(Mutable, 0, v12, v13);
    CGPathAddLineToPoint(Mutable, 0, v14, v15);
    CGPathAddLineToPoint(Mutable, 0, v16, v17);
    CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
    CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
    CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
    CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
    -[CAShapeLayer setPath:](a1, "setPath:", Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void sub_19724C5E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void layerPath(CAShapeLayer *a1, const WebCore::FloatQuad *a2)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, *(float *)a2, *((float *)a2 + 1));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 6), *((float *)a2 + 7));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 4), *((float *)a2 + 5));
  CGPathAddLineToPoint(Mutable, 0, *((float *)a2 + 2), *((float *)a2 + 3));
  CGPathCloseSubpath(Mutable);
  -[CAShapeLayer setPath:](a1, "setPath:", Mutable);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_19724C6B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19724C800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19724CA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  WebCore::GraphicsContextCG::~GraphicsContextCG((WebCore::GraphicsContextCG *)&a32);
  _Unwind_Resume(a1);
}

void sub_19724D194(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  WTF **v14;
  uint64_t v15;
  void *v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  v18 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 48) = 0;
    *(_DWORD *)(v10 + 56) = 0;
    WTF::fastFree(v18, v17);
  }
  if ((*v13 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(*v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v17);
    }
  }
  if ((*a10 & 0x8000000000000) != 0)
  {
    v28 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v17);
    }
  }
  if ((*v11 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(*v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v17);
    }
  }
  if ((*v12 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(*v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v17);
    }
  }
  if ((*(_QWORD *)v10 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(*(_QWORD *)v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t findIntersectionOnLineBetweenPoints(const WebCore::FloatPoint *a1, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  int Intersection;
  uint64_t result;
  float v11;
  float v12;
  float v15;
  float v16;
  uint64_t v19;

  v19 = 0;
  Intersection = WebCore::findIntersection(a1, a2, a3, a4, (const WebCore::FloatPoint *)&v19, a6);
  result = 0;
  if (Intersection)
  {
    v11 = *(float *)a1;
    v12 = *(float *)a2;
    if (*(float *)a1 >= *(float *)a2)
    {
      if (*(float *)&v19 <= v11 && *(float *)&v19 >= v12)
      {
LABEL_13:
        v15 = *((float *)a1 + 1);
        v16 = *((float *)a2 + 1);
        if (v15 >= v16)
        {
          if (*((float *)&v19 + 1) <= v15 && *((float *)&v19 + 1) >= v16)
            goto LABEL_18;
        }
        else if (*((float *)&v19 + 1) <= v16 && *((float *)&v19 + 1) >= v15)
        {
LABEL_18:
          *(_QWORD *)a5 = v19;
          return 1;
        }
      }
    }
    else if (*(float *)&v19 <= v12 && *(float *)&v19 >= v11)
    {
      goto LABEL_13;
    }
    return 0;
  }
  return result;
}

WebCore::InspectorOverlayHighlight::GridHighlightOverlay *WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(WebCore::InspectorOverlayHighlight::GridHighlightOverlay *this, const Color *a2)
{
  uint64_t v4;
  uint64_t m_colorAndFlags_high;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t m_colorAndFlags;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  __int128 v19;

  v4 = WebCore::Color::Color(this, a2);
  m_colorAndFlags_high = HIDWORD(a2[2].m_colorAndFlags);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = m_colorAndFlags_high;
  if ((_DWORD)m_colorAndFlags_high)
  {
    if (m_colorAndFlags_high >= 0xCCCCCCD)
      goto LABEL_14;
    v6 = 20 * m_colorAndFlags_high;
    v7 = WTF::fastMalloc((WTF *)(20 * m_colorAndFlags_high));
    *((_DWORD *)this + 4) = v6 / 0x14;
    *((_QWORD *)this + 1) = v7;
    v8 = HIDWORD(a2[2].m_colorAndFlags);
    if ((_DWORD)v8)
    {
      m_colorAndFlags = a2[1].m_colorAndFlags;
      v10 = 20 * v8;
      do
      {
        v11 = *(_OWORD *)m_colorAndFlags;
        *(_DWORD *)(v7 + 16) = *(_DWORD *)(m_colorAndFlags + 16);
        *(_OWORD *)v7 = v11;
        v7 += 20;
        m_colorAndFlags += 20;
        v10 -= 20;
      }
      while (v10);
    }
  }
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 24, (uint64_t)&a2[3]);
  v12 = HIDWORD(a2[6].m_colorAndFlags);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v12;
  if (!(_DWORD)v12)
    goto LABEL_13;
  if (v12 >= 0x6666667)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x19724D704);
  }
  v13 = 40 * v12;
  v14 = WTF::fastMalloc((WTF *)(40 * v12));
  *((_DWORD *)this + 12) = v13 / 0x28;
  *((_QWORD *)this + 5) = v14;
  v15 = HIDWORD(a2[6].m_colorAndFlags);
  if (v15)
  {
    v16 = a2[5].m_colorAndFlags;
    v17 = v16 + 40 * v15;
    do
    {
      v18 = *(_DWORD **)v16;
      if (*(_QWORD *)v16)
        *v18 += 2;
      *(_QWORD *)v14 = v18;
      v19 = *(_OWORD *)(v16 + 8);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v14 + 8) = v19;
      v16 += 40;
      v14 += 40;
    }
    while (v16 != v17);
  }
LABEL_13:
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 56, (uint64_t)&a2[7]);
  return this;
}

void sub_19724D710(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF **v4;
  WTF *v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  if ((*(_QWORD *)v2 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(*(_QWORD *)a2, *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_19724D82C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result != a2)
  {
    v5 = result;
    for (i = 0; v5 + i != a2; i += 40)
    {
      v7 = v5 + i;
      v8 = *(unsigned int *)(v5 + i + 12);
      v9 = a3 + i;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 12) = v8;
      if ((_DWORD)v8)
      {
        if (v8 >> 27)
        {
          __break(0xC471u);
          return result;
        }
        v10 = WTF::fastMalloc((WTF *)(32 * v8));
        v11 = a3 + i;
        *(_DWORD *)(v11 + 8) = v8;
        *(_QWORD *)v11 = v10;
        WTF::VectorCopier<false,WebCore::InspectorOverlayLabel::Content>::uninitializedCopy<WebCore::InspectorOverlayLabel::Content>(*(_QWORD *)v7, *(_QWORD *)v7 + 32 * *(unsigned int *)(v7 + 12), v10);
      }
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
      result = WebCore::Color::Color((WebCore::Color *)(v9 + 24), (const Color *)(v7 + 24));
      *(_WORD *)(a3 + i + 32) = *(_WORD *)(v5 + i + 32);
    }
  }
  return result;
}

void sub_19724D918(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v6;

  v6 = *(WTF **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v2 + v3) = 0;
    *(_DWORD *)(v4 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::InspectorOverlayLabel::Content>::uninitializedCopy<WebCore::InspectorOverlayLabel::Content>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = v5 + v6;
      v8 = *(_DWORD **)(v5 + v6);
      if (v8)
        *v8 += 2;
      *(_QWORD *)(a3 + v6) = v8;
      WebCore::Color::Color((WebCore::Color *)(a3 + v6 + 8), (const Color *)(v7 + 8));
      *(_BYTE *)(a3 + v6 + 16) = *(_BYTE *)(v7 + 16);
      result = WebCore::Color::Color((WebCore::Color *)(a3 + v6 + 24), (const Color *)(v5 + v6 + 24));
      v6 += 32;
    }
    while (v7 + 32 != a2);
  }
  return result;
}

void sub_19724D9DC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;

  v5 = *(_QWORD *)(v2 + v3 + 8);
  if ((v5 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *(WTF::StringImpl **)(v2 + v3);
  *(_QWORD *)(v2 + v3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::FlexHighlightOverlay(WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *this, const FlexHighlightOverlay *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = WebCore::Color::Color(this, (const Color *)a2);
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)(v4 + 8) = v5;
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 40, (uint64_t)a2 + 40);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 56, (uint64_t)a2 + 56);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 72, (uint64_t)a2 + 72);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88, (uint64_t)a2 + 88);
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 104, (uint64_t)a2 + 104);
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 120, (uint64_t)a2 + 120);
  return this;
}

void sub_19724DAF0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF **v4;
  WTF **v5;
  WTF **v6;
  WTF **v7;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v2 + 104) = 0;
    *(_DWORD *)(v2 + 112) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 96) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v12, a2);
  }
  v13 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    WTF::fastFree(v13, a2);
  }
  if ((*(_QWORD *)v2 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(*(_QWORD *)v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  if (a2 != a1)
  {
    v4 = a1[3];
    v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        v4 = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel>::destruct(*(_QWORD *)a1 + 40 * v5, (void *)(*(_QWORD *)a1 + 40 * v4));
      a1[3] = v5;
      v4 = v5;
    }
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)a1;
    if (v4)
    {
      v8 = v6 + 40 * v4;
      do
      {
        if (v6 != v7)
        {
          v9 = *(unsigned int *)(v7 + 12);
          v10 = *(unsigned int *)(v6 + 12);
          if (v9 <= v10)
          {
            if (v10 > *(unsigned int *)(v7 + 8))
            {
              WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7, 0);
              WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7, *(unsigned int *)(v6 + 12));
              v9 = *(unsigned int *)(v7 + 12);
            }
          }
          else
          {
            WTF::VectorDestructor<true,WebCore::InspectorOverlayLabel::Content>::destruct((WTF::StringImpl *)(*(_QWORD *)v7 + 32 * v10), (WTF::StringImpl *)(*(_QWORD *)v7 + 32 * v9));
            *(_DWORD *)(v7 + 12) = v10;
            v9 = v10;
          }
          v11 = *(WTF::StringImpl **)v6;
          v12 = *(_QWORD *)v7;
          if (v9)
          {
            v13 = (WTF::StringImpl *)((char *)v11 + 32 * v9);
            do
            {
              WTF::String::operator=((WTF::StringImpl **)v12, v11);
              WebCore::Color::operator=();
              *(_BYTE *)(v12 + 16) = *((_BYTE *)v11 + 16);
              WebCore::Color::operator=();
              v11 = (WTF::StringImpl *)((char *)v11 + 32);
              v12 += 32;
            }
            while (v11 != v13);
            v11 = *(WTF::StringImpl **)v6;
            v9 = *(unsigned int *)(v7 + 12);
            v12 = *(_QWORD *)v7;
          }
          WTF::VectorCopier<false,WebCore::InspectorOverlayLabel::Content>::uninitializedCopy<WebCore::InspectorOverlayLabel::Content>((uint64_t)v11 + 32 * v9, (uint64_t)v11 + 32 * *(unsigned int *)(v6 + 12), v12 + 32 * v9);
          *(_DWORD *)(v7 + 12) = *(_DWORD *)(v6 + 12);
        }
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
        WebCore::Color::operator=();
        *(_WORD *)(v7 + 32) = *(_WORD *)(v6 + 32);
        v6 += 40;
        v7 += 40;
      }
      while (v6 != v8);
      v6 = *(_QWORD *)a2;
      v14 = a1[3];
      v7 = *(_QWORD *)a1;
    }
    else
    {
      v14 = 0;
    }
    WTF::VectorCopier<false,WebCore::InspectorOverlayLabel>::uninitializedCopy<WebCore::InspectorOverlayLabel>(v6 + 40 * v14, v6 + 40 * a2[3], v7 + 40 * v14);
    a1[3] = a2[3];
  }
  return a1;
}

__n128 WebKit::platform@<Q0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __n128 result;
  _OWORD v11[3];
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WebKit::WebKit2PlatformKeyboardEvent::WebKit2PlatformKeyboardEvent((uint64_t)v11, (unsigned __int8 *)this);
  v4 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v11[2];
  *(_WORD *)(a2 + 48) = v12;
  *(_BYTE *)(a2 + 50) = v13;
  v5 = v14;
  v14 = 0u;
  *(_OWORD *)(a2 + 56) = v5;
  v6 = v15;
  v15 = 0u;
  *(_OWORD *)(a2 + 72) = v6;
  *(_QWORD *)(a2 + 88) = v16;
  v7 = v17;
  *(_WORD *)(a2 + 100) = v18;
  *(_DWORD *)(a2 + 96) = v7;
  v8 = v19;
  v16 = 0;
  v19 = 0;
  *(_QWORD *)(a2 + 104) = v8;
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v11, v9);
  return result;
}

WTF *WebKit::platform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  WTF *result;
  _BYTE v5[48];
  WTF *v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WebKit::WebKit2PlatformTouchEvent::WebKit2PlatformTouchEvent((uint64_t)v5, a1);
  WebCore::PlatformTouchEvent::PlatformTouchEvent(a2, (uint64_t)v5);
  result = v6;
  if (v6)
  {
    v6 = 0;
    v7 = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

BOOL WebKit::WebFoundTextRange::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  BOOL v6;

  v2 = a1[2];
  v3 = a2[2];
  v4 = (v2 & v3) == -1;
  if (v2 != -1 && v3 != -1)
  {
    if (*a1 == *a2 && (v2 == v3 ? (v6 = a1[1] == a2[1]) : (v6 = 0), v6))
      return a1[3] == a2[3];
    else
      return 0;
  }
  return v4;
}

void WebKit::WebGeolocationPosition::~WebGeolocationPosition(WebKit::WebGeolocationPosition *this)
{
  JUMPOUT(0x19AEB936CLL);
}

WebKit::WebHitTestResultData *WebKit::WebHitTestResultData::WebHitTestResultData(WebKit::WebHitTestResultData *this, WebKit::WebHitTestResultData **a2, const WTF::String *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  const WebCore::HitTestResult *v18;
  uint64_t v19;
  WebKit::WebHitTestResultData *v20;
  _DWORD *v21;
  WebKit::WebHitTestResultData *v22;
  char v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v33[5];

  WebCore::HitTestResult::absoluteImageURL((WebCore::HitTestResult *)a2);
  v7 = v33[0];
  if (v33[0])
  {
    v8 = *(_DWORD *)v33[0];
    *(_DWORD *)v33[0] += 2;
    *(_QWORD *)this = v7;
    v33[0] = 0;
    if (v8)
      *(_DWORD *)v7 = v8;
    else
      WTF::StringImpl::destroy(v7, v6);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  WebCore::HitTestResult::absolutePDFURL((WebCore::HitTestResult *)a2);
  v10 = v33[0];
  if (v33[0])
  {
    v11 = *(_DWORD *)v33[0];
    *(_DWORD *)v33[0] += 2;
    *((_QWORD *)this + 1) = v10;
    v33[0] = 0;
    if (v11)
      *(_DWORD *)v10 = v11;
    else
      WTF::StringImpl::destroy(v10, v9);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WebCore::HitTestResult::absoluteLinkURL((WebCore::HitTestResult *)a2);
  v13 = v33[0];
  if (v33[0])
  {
    v14 = *(_DWORD *)v33[0];
    *(_DWORD *)v33[0] += 2;
    *((_QWORD *)this + 2) = v13;
    v33[0] = 0;
    if (v14)
      *(_DWORD *)v13 = v14;
    else
      WTF::StringImpl::destroy(v13, v12);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WebCore::HitTestResult::absoluteMediaURL((WebCore::HitTestResult *)a2);
  v16 = v33[0];
  if (v33[0])
  {
    v17 = *(_DWORD *)v33[0];
    *(_DWORD *)v33[0] += 2;
    *((_QWORD *)this + 3) = v16;
    v33[0] = 0;
    if (v17)
      *(_DWORD *)v16 = v17;
    else
      WTF::StringImpl::destroy(v16, v15);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  WebCore::HitTestResult::textContent((WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::titleDisplayString((WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::linkSuggestedFilename((WebCore::HitTestResult *)a2);
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = WebCore::HitTestResult::isContentEditable((WebCore::HitTestResult *)a2);
  *(_QWORD *)((char *)this + 68) = WebKit::WebHitTestResultData::elementBoundingBoxInWindowCoordinates(a2[10], v18);
  *(_QWORD *)((char *)this + 76) = v19;
  *((_BYTE *)this + 84) = 0;
  *((_BYTE *)this + 85) = WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)a2);
  v20 = a2[9];
  if (v20)
    LODWORD(v20) = (*((unsigned __int16 *)v20 + 14) >> 1) & 1;
  *((_BYTE *)this + 86) = (_BYTE)v20;
  *((_BYTE *)this + 87) = WebCore::HitTestResult::isOverTextInsideFormControlElement((WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 88) = WebCore::HitTestResult::isDownloadableMedia((WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 89) = WebCore::HitTestResult::mediaIsInFullscreen((WebCore::HitTestResult *)a2);
  *((_WORD *)this + 45) = 0;
  WebKit::WebHitTestResultData::frameInfoDataFromHitTestResult((WebKit::WebHitTestResultData *)((char *)this + 96), (const WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 424) = 0;
  *((_QWORD *)this + 54) = 0;
  v21 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v21 += 2;
  *((_QWORD *)this + 55) = v21;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 60) = 0;
  *((_BYTE *)this + 488) = WebCore::HitTestResult::hasLocalDataForLinkURL((WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 489) = WebCore::HitTestResult::hasEntireImage((WebCore::HitTestResult *)a2);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 70) = 0;
  *((_DWORD *)this + 142) = 1065353216;
  *((_WORD *)this + 305) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_BYTE *)this + 608) = 0;
  WebCore::AttributedString::AttributedString((WebKit::WebHitTestResultData *)((char *)this + 616));
  *((_QWORD *)this + 82) = 0;
  v22 = a2[14];
  if (v22)
  {
    if (*((_BYTE *)v22 + 72))
      v23 = 1;
    else
      v23 = 2;
    *((_BYTE *)this + 84) = v23;
  }
  if (WebCore::HitTestResult::hasMediaElement((WebCore::HitTestResult *)a2))
  {
    if (WebCore::HitTestResult::mediaIsVideo((WebCore::HitTestResult *)a2))
      v24 = 2;
    else
      v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  *((_BYTE *)this + 91) = v24;
  WebKit::linkLocalDataMIMETypeFromHitTestResult((WebKit *)v33, (const WebCore::HitTestResult *)a2);
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((WTF::StringImpl **)this + 60) = v33[0];
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  WebKit::imageSuggestedFilenameFromHitTestResult((WebKit *)v33, (const WebCore::HitTestResult *)a2);
  v28 = v33[0];
  v33[0] = 0;
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v28;
  if (v29)
  {
    v30 = *(_DWORD *)v29 - 2;
    if (*(_DWORD *)v29 != 2)
    {
LABEL_39:
      *(_DWORD *)v29 = v30;
      return this;
    }
    WTF::StringImpl::destroy(v29, v27);
    v29 = v33[0];
    v33[0] = 0;
    if (v29)
    {
      v30 = *(_DWORD *)v29 - 2;
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v31);
        return this;
      }
      goto LABEL_39;
    }
  }
  return this;
}

uint64_t WebKit::WebHitTestResultData::elementBoundingBoxInWindowCoordinates(WebKit::WebHitTestResultData *this, const WebCore::HitTestResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::ScrollView *v8;
  int v9;
  WebCore::RenderObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  if (!this)
    return 0;
  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v3 + 2;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v12 = 0;
    if (v3)
      goto LABEL_13;
    goto LABEL_16;
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(WebCore::ScrollView **)(v5 + 288);
  if (v8)
  {
    v9 = *((_DWORD *)v8 + 2);
    *((_DWORD *)v8 + 2) = v9 + 1;
    v10 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
    if (v10)
    {
      v14[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v10, 1, 0);
      v14[1] = v11;
      v12 = WebCore::ScrollView::contentsToWindow(v8, (const WebCore::IntRect *)v14);
      v9 = *((_DWORD *)v8 + 2) - 1;
      if (*((_DWORD *)v8 + 2) != 1)
      {
LABEL_9:
        *((_DWORD *)v8 + 2) = v9;
        goto LABEL_12;
      }
    }
    else
    {
      v12 = 0;
      if (v9)
        goto LABEL_9;
    }
    (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v12 = 0;
  }
LABEL_12:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  v3 = *((_DWORD *)this + 6) - 2;
  if (*((_DWORD *)this + 6) != 2)
  {
LABEL_13:
    *((_DWORD *)this + 6) = v3;
    return v12;
  }
LABEL_16:
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(this);
  return v12;
}

void WebKit::WebHitTestResultData::frameInfoDataFromHitTestResult(WebKit::WebHitTestResultData *this, const WebCore::HitTestResult *a2)
{
  WebKit::WebFrame *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WebKit::WebFrame *v7;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  CFTypeRef cf;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WebKit::webFrameFromHitTestResult((WebKit *)&v7, a2);
  v3 = v7;
  if (v7)
  {
    WebKit::WebFrame::info(v7, (uint64_t)v9);
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::__optional_destruct_base[abi:sn180100]<WebKit::FrameInfoData>((uint64_t)this, (uint64_t)v9);
    v5 = v14;
    v14 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (v13 != -1)
      ((void (*)(char *, uint64_t *))off_1E34CB410[v13])(&v8, &v12);
    v13 = -1;
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v10);
    CFRelease(*((CFTypeRef *)v3 + 1));
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 296) = 0;
  }
}

void WebKit::linkLocalDataMIMETypeFromHitTestResult(WebKit *this, const WebCore::HitTestResult *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  if ((WebCore::HitTestResult::hasLocalDataForLinkURL(a2) & 1) != 0
    && (WebKit::webFrameFromHitTestResult((WebKit *)&v9, a2), (v4 = v9) != 0))
  {
    WebCore::HitTestResult::absoluteLinkURL(a2);
    WebKit::WebFrame::mimeTypeForResourceWithURL((unsigned int *)v4, (const WTF::URL *)&v8, this);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    v7 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v7 += 2;
    *(_QWORD *)this = v7;
  }
}

void WebKit::imageSuggestedFilenameFromHitTestResult(WebKit *this, const WebCore::HitTestResult *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  if ((WebCore::HitTestResult::hasEntireImage(a2) & 1) != 0
    && (WebKit::webFrameFromHitTestResult((WebKit *)&v9, a2), (v4 = v9) != 0))
  {
    WebCore::HitTestResult::absoluteImageURL(a2);
    WebKit::WebFrame::suggestedFilenameForResourceWithURL((unsigned int *)v4, (const WTF::URL *)&v8, this);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    v7 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v7 += 2;
    *(_QWORD *)this = v7;
  }
}

WebKit::WebHitTestResultData *WebKit::WebHitTestResultData::WebHitTestResultData(WebKit::WebHitTestResultData *this, WebKit::WebHitTestResultData **a2, int a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  const WebCore::HitTestResult *v18;
  uint64_t v19;
  WebKit::WebHitTestResultData *v20;
  WebKit::WebHitTestResultData *v21;
  char v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  void *v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unsigned int *v37;
  WebKit::WebHitTestResultData *v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  WebCore::CachedImage *v45;
  WTF::StringImpl *v46;
  WebCore::Image *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  WTF::StringImpl *v61;
  WTF *v63;
  WTF::StringImpl *v64;
  char v65;
  __int16 v66;

  WebCore::HitTestResult::absoluteImageURL((WebCore::HitTestResult *)a2);
  v7 = v64;
  if (v64)
  {
    v8 = *(_DWORD *)v64;
    *(_DWORD *)v64 += 2;
    *(_QWORD *)this = v7;
    v64 = 0;
    if (v8)
      *(_DWORD *)v7 = v8;
    else
      WTF::StringImpl::destroy(v7, v6);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  WebCore::HitTestResult::absolutePDFURL((WebCore::HitTestResult *)a2);
  v10 = v64;
  if (v64)
  {
    v11 = *(_DWORD *)v64;
    *(_DWORD *)v64 += 2;
    *((_QWORD *)this + 1) = v10;
    v64 = 0;
    if (v11)
      *(_DWORD *)v10 = v11;
    else
      WTF::StringImpl::destroy(v10, v9);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WebCore::HitTestResult::absoluteLinkURL((WebCore::HitTestResult *)a2);
  v13 = v64;
  if (v64)
  {
    v14 = *(_DWORD *)v64;
    *(_DWORD *)v64 += 2;
    *((_QWORD *)this + 2) = v13;
    v64 = 0;
    if (v14)
      *(_DWORD *)v13 = v14;
    else
      WTF::StringImpl::destroy(v13, v12);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WebCore::HitTestResult::absoluteMediaURL((WebCore::HitTestResult *)a2);
  v16 = v64;
  if (v64)
  {
    v17 = *(_DWORD *)v64;
    *(_DWORD *)v64 += 2;
    *((_QWORD *)this + 3) = v16;
    v64 = 0;
    if (v17)
      *(_DWORD *)v16 = v17;
    else
      WTF::StringImpl::destroy(v16, v15);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  WebCore::HitTestResult::textContent((WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::titleDisplayString((WebCore::HitTestResult *)a2);
  WebCore::HitTestResult::linkSuggestedFilename((WebCore::HitTestResult *)a2);
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = WebCore::HitTestResult::isContentEditable((WebCore::HitTestResult *)a2);
  *(_QWORD *)((char *)this + 68) = WebKit::WebHitTestResultData::elementBoundingBoxInWindowCoordinates(a2[10], v18);
  *(_QWORD *)((char *)this + 76) = v19;
  *((_BYTE *)this + 84) = 0;
  *((_BYTE *)this + 85) = WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)a2);
  v20 = a2[9];
  if (v20)
    LODWORD(v20) = (*((unsigned __int16 *)v20 + 14) >> 1) & 1;
  *((_BYTE *)this + 86) = (_BYTE)v20;
  *((_BYTE *)this + 87) = WebCore::HitTestResult::isOverTextInsideFormControlElement((WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 88) = WebCore::HitTestResult::isDownloadableMedia((WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 89) = WebCore::HitTestResult::mediaIsInFullscreen((WebCore::HitTestResult *)a2);
  *((_WORD *)this + 45) = 0;
  WebKit::WebHitTestResultData::frameInfoDataFromHitTestResult((WebKit::WebHitTestResultData *)((char *)this + 96), (const WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 424) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 60) = 0;
  *((_BYTE *)this + 488) = WebCore::HitTestResult::hasLocalDataForLinkURL((WebCore::HitTestResult *)a2);
  *((_BYTE *)this + 489) = WebCore::HitTestResult::hasEntireImage((WebCore::HitTestResult *)a2);
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 70) = 0;
  *((_DWORD *)this + 142) = 1065353216;
  *((_WORD *)this + 305) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_BYTE *)this + 608) = 0;
  WebCore::AttributedString::AttributedString((WebKit::WebHitTestResultData *)((char *)this + 616));
  *((_QWORD *)this + 82) = 0;
  v21 = a2[14];
  if (v21)
  {
    if (*((_BYTE *)v21 + 72))
      v22 = 1;
    else
      v22 = 2;
    *((_BYTE *)this + 84) = v22;
  }
  if (WebCore::HitTestResult::hasMediaElement((WebCore::HitTestResult *)a2))
  {
    if (WebCore::HitTestResult::mediaIsVideo((WebCore::HitTestResult *)a2))
      v23 = 2;
    else
      v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  *((_BYTE *)this + 91) = v23;
  WebKit::linkLocalDataMIMETypeFromHitTestResult((WebKit *)&v64, (const WebCore::HitTestResult *)a2);
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = v64;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebKit::imageSuggestedFilenameFromHitTestResult((WebKit *)&v64, (const WebCore::HitTestResult *)a2);
  v27 = v64;
  v64 = 0;
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v27;
  if (v28)
  {
    v29 = *(_DWORD *)v28 - 2;
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v26);
      v28 = v64;
      v64 = 0;
      if (!v28)
        goto LABEL_38;
      v29 = *(_DWORD *)v28 - 2;
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v30);
        if (!a3)
          return this;
        goto LABEL_39;
      }
    }
    *(_DWORD *)v28 = v29;
  }
LABEL_38:
  if (!a3)
    return this;
LABEL_39:
  v31 = WebCore::HitTestResult::image((WebCore::HitTestResult *)a2);
  if (v31)
  {
    v32 = *(unsigned int **)(v31 + 24);
    if (v32)
    {
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
      WebCore::SharedMemory::copyBuffer();
      v35 = v64;
      v64 = 0;
      v36 = (unsigned int *)*((_QWORD *)this + 57);
      *((_QWORD *)this + 57) = v35;
      if (v36)
      {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v36);
        v37 = (unsigned int *)v64;
        v64 = 0;
        if (v37)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v37);
      }
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v34);
    }
  }
  v38 = a2[10];
  if (v38)
  {
    *((_DWORD *)v38 + 6) += 2;
    v39 = *((_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFLL;
    if (!v39
      || (((*(_BYTE *)((*((_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*((_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFLL)
                                                                                               + 0x35)) != 1)
    {
LABEL_86:
      if (*((_DWORD *)v38 + 6) == 2)
      {
        if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v38);
      }
      else
      {
        *((_DWORD *)v38 + 6) -= 2;
      }
      return this;
    }
    LOBYTE(v64) = 0;
    v65 = 0;
    v66 = 1;
    WebKit::createShareableBitmap(v39, (uint64_t)&v64, &v63);
    v41 = v63;
    v63 = 0;
    v42 = *((_QWORD *)this + 58);
    *((_QWORD *)this + 58) = v41;
    if (v42)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v42, v40);
      v44 = v63;
      v63 = 0;
      if (v44)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v44, v43);
    }
    v45 = (WebCore::CachedImage *)WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(_QWORD *)(v39 + 224) + 24));
    if (v45)
    {
      v47 = (WebCore::Image *)WebCore::CachedImage::image(v45);
      if (v47)
      {
        WebCore::Image::mimeType(v47);
        v48 = v64;
        v64 = 0;
        v49 = (WTF::StringImpl *)*((_QWORD *)this + 59);
        *((_QWORD *)this + 59) = v48;
        if (v49)
        {
          v50 = *(_DWORD *)v49 - 2;
          if (*(_DWORD *)v49 != 2)
            goto LABEL_58;
          WTF::StringImpl::destroy(v49, v46);
          v49 = v64;
          v64 = 0;
          if (!v49)
            goto LABEL_59;
          v50 = *(_DWORD *)v49 - 2;
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v46);
          else
LABEL_58:
            *(_DWORD *)v49 = v50;
        }
      }
    }
LABEL_59:
    if ((*((_WORD *)v38 + 14) & 8) == 0)
    {
LABEL_80:
      v59 = *(_DWORD **)(v39 + 216);
      if (v59)
        *v59 += 2;
LABEL_82:
      v61 = (WTF::StringImpl *)*((_QWORD *)this + 56);
      *((_QWORD *)this + 56) = v59;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v46);
        else
          *(_DWORD *)v61 -= 2;
      }
      goto LABEL_86;
    }
    v51 = *((_DWORD *)v38 + 6);
    *((_DWORD *)v38 + 6) = v51 + 2;
    v52 = *((_QWORD *)v38 + 13);
    if (v52)
    {
      v53 = *(_DWORD *)(v52 + 4);
      if ((v53 & 1) != 0)
      {
        v54 = *(_QWORD *)(v52 + 40);
        LODWORD(v55) = *(_DWORD *)(v52 + 52);
        if ((_DWORD)v55)
        {
LABEL_63:
          v56 = *MEMORY[0x1E0DD6230];
          v55 = v55;
          v57 = (_DWORD **)(v54 + 8);
          while (1)
          {
            v58 = (uint64_t)*(v57 - 1);
            if (v58 == v56
              || *(_QWORD *)(v58 + 24) == *(_QWORD *)(v56 + 24) && *(_QWORD *)(v58 + 32) == *(_QWORD *)(v56 + 32))
            {
              break;
            }
            v57 += 2;
            if (!--v55)
            {
              v57 = (_DWORD **)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_73:
          v59 = *v57;
          if (*v57 && v59[1])
          {
            v60 = 0;
            *v59 += 2;
          }
          else
          {
            v60 = 1;
          }
          if (v51)
          {
            *((_DWORD *)v38 + 6) = v51;
          }
          else if ((*((_WORD *)v38 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v38);
          }
          if (!v60)
            goto LABEL_82;
          goto LABEL_80;
        }
      }
      else
      {
        v54 = v52 + 32;
        LODWORD(v55) = v53 >> 5;
        if ((_DWORD)v55)
          goto LABEL_63;
      }
    }
    v57 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_73;
  }
  return this;
}

uint64_t WebKit::WebHitTestResultData::WebHitTestResultData(uint64_t a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, _DWORD **a7, _DWORD **a8, _DWORD **a9, char a10, _OWORD *a11, char *a12, char a13, char a14, char a15, char a16, char a17, char a18, char *a19, uint64_t a20,_OWORD *a21,_DWORD **a22,_DWORD **a23,_DWORD **a24,uint64_t a25,unsigned int **a26,_DWORD **a27,_DWORD **a28,char a29,char a30,uint64_t a31,_DWORD **a32)
{
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  char v41;
  char v42;
  __int128 v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  unsigned int *v47;
  unsigned int v48;
  _DWORD *v49;
  _DWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int *v57;
  uint64_t v59;

  v33 = *a2;
  if (*a2)
    *v33 += 2;
  *(_QWORD *)a1 = v33;
  v34 = *a3;
  if (*a3)
    *v34 += 2;
  *(_QWORD *)(a1 + 8) = v34;
  v35 = *a4;
  if (*a4)
    *v35 += 2;
  *(_QWORD *)(a1 + 16) = v35;
  v36 = *a5;
  if (*a5)
    *v36 += 2;
  *(_QWORD *)(a1 + 24) = v36;
  v37 = *a6;
  if (*a6)
    *v37 += 2;
  *(_QWORD *)(a1 + 32) = v37;
  v38 = *a7;
  if (*a7)
    *v38 += 2;
  *(_QWORD *)(a1 + 40) = v38;
  v39 = *a8;
  if (*a8)
    *v39 += 2;
  *(_QWORD *)(a1 + 48) = v39;
  v40 = *a9;
  if (*a9)
    *v40 += 2;
  *(_QWORD *)(a1 + 56) = v40;
  *(_BYTE *)(a1 + 64) = a10;
  *(_OWORD *)(a1 + 68) = *a11;
  v41 = *a12;
  v42 = *a19;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 84) = v41;
  *(_BYTE *)(a1 + 85) = a13;
  *(_BYTE *)(a1 + 86) = a14;
  *(_BYTE *)(a1 + 87) = a15;
  *(_BYTE *)(a1 + 88) = a16;
  *(_BYTE *)(a1 + 89) = a17;
  *(_BYTE *)(a1 + 90) = a18;
  *(_BYTE *)(a1 + 91) = v42;
  *(_BYTE *)(a1 + 392) = 0;
  if (*(_BYTE *)(a20 + 296))
  {
    std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData const&,WebKit::FrameInfoData*>(a1 + 96, a20);
    *(_BYTE *)(a1 + 392) = 1;
  }
  v43 = a21[1];
  *(_OWORD *)(a1 + 400) = *a21;
  *(_OWORD *)(a1 + 416) = v43;
  v44 = *a22;
  if (*a22)
    *v44 += 2;
  *(_QWORD *)(a1 + 432) = v44;
  v45 = *a23;
  if (*a23)
    *v45 += 2;
  *(_QWORD *)(a1 + 440) = v45;
  v46 = *a24;
  if (*a24)
    *v46 += 2;
  *(_QWORD *)(a1 + 448) = v46;
  *(_QWORD *)(a1 + 456) = 0;
  v47 = *a26;
  if (*a26)
  {
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
  }
  *(_QWORD *)(a1 + 464) = v47;
  v49 = *a27;
  if (*a27)
    *v49 += 2;
  *(_QWORD *)(a1 + 472) = v49;
  v50 = *a28;
  if (*a28)
    *v50 += 2;
  *(_QWORD *)(a1 + 480) = v50;
  *(_BYTE *)(a1 + 488) = a29;
  *(_BYTE *)(a1 + 489) = a30;
  *(_QWORD *)(a1 + 496) = *(_QWORD *)a31;
  v51 = *(_OWORD *)(a31 + 8);
  v52 = *(_OWORD *)(a31 + 24);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a31 + 40);
  *(_OWORD *)(a1 + 520) = v52;
  *(_OWORD *)(a1 + 504) = v51;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 552, a31 + 56);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a31 + 72);
  v53 = *(_QWORD *)(a31 + 80);
  if (v53)
    ++*(_DWORD *)(v53 + 8);
  *(_QWORD *)(a1 + 576) = v53;
  v54 = *(_QWORD *)(a31 + 88);
  if (v54)
    ++*(_DWORD *)(v54 + 8);
  *(_QWORD *)(a1 + 584) = v54;
  v55 = *(_QWORD *)(a31 + 96);
  if (v55)
    ++*(_DWORD *)(v55 + 8);
  *(_QWORD *)(a1 + 592) = v55;
  WebCore::Color::Color((WebCore::Color *)(a1 + 600), (const Color *)(a31 + 104));
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a31 + 112);
  MEMORY[0x19AEAEEB4](a1 + 616, a31 + 120);
  v56 = *a32;
  if (*a32)
    ++*v56;
  *(_QWORD *)(a1 + 656) = v56;
  if (*(_BYTE *)(a25 + 16))
  {
    WebCore::SharedMemory::map();
    v57 = *(unsigned int **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = v59;
    if (v57)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v57);
  }
  return a1;
}

void WebKit::WebHitTestResultData::~WebHitTestResultData(WebKit::WebHitTestResultData *this)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v2 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v2)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v2);
  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebKit::WebHitTestResultData *)((char *)this + 496));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v6, v3);
  v7 = (unsigned int *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, v3);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v11);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v11);
    else
      *(_DWORD *)v19 -= 2;
  }
}

void WebKit::WebHitTestResultData::getImageSharedMemoryHandle(WebKit::WebHitTestResultData *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[16];
  char v5;

  *a2 = 0;
  a2[16] = 0;
  v2 = *((_QWORD *)this + 57);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      WebCore::SharedMemory::createHandle();
      if (v5)
      {
        std::optional<WebCore::SharedMemoryHandle>::operator=[abi:sn180100]<WebCore::SharedMemoryHandle,void>((uint64_t)a2, (uint64_t)v4);
        if (v5)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
      }
    }
  }
}

uint64_t std::optional<WebCore::SharedMemoryHandle>::operator=[abi:sn180100]<WebCore::SharedMemoryHandle,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    WTF::MachSendRight::operator=();
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

unsigned int *WebKit::webFrameFromHitTestResult(WebKit *this, const WebCore::HitTestResult *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;

  result = (unsigned int *)WebCore::HitTestResult::frame(a2);
  if (result)
  {
    v4 = result + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, this);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

void WebKit::WebImage::create(int32x2_t *a1@<X0>, char a2@<W1>, CFTypeRef *a3@<X2>, uint64_t a4@<X3>, WebKit **a5@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WebKit *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  WebKit *v16;
  void *v17;
  float32x2_t v18;
  WebKit *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;

  if (a4)
  {
    v9 = (a2 & 1) != 0 ? 6 : 5;
    v10 = (a2 & 2) != 0 ? 7 : v9;
    v33 = vcvt_f32_s32(*a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, float32x2_t *, uint64_t, CFTypeRef *, uint64_t, _QWORD, float))(*(_QWORD *)a4 + 920))(&v30, a4, &v33, v10, a3, 1, 0, 1.0);
    v11 = v30;
    if (v30)
    {
      v30 = 0;
      v12 = (WebKit *)API::Object::newObject(0x18uLL, 12);
      v33 = 0;
      *(_QWORD *)v12 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v12);
      *(_QWORD *)v12 = off_1E34CB3D0;
      *((_QWORD *)v12 + 2) = v11;
      *a5 = v12;
      WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)&v33, v13);
      goto LABEL_17;
    }
  }
  if ((a2 & 1) == 0)
  {
    v33 = vcvt_f32_s32(*a1);
    WebCore::ImageBuffer::create();
    v15 = v30;
    if (v30)
    {
      v30 = 0;
      v16 = (WebKit *)API::Object::newObject(0x18uLL, 12);
      v33 = 0;
      *(_QWORD *)v16 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v16);
      *(_QWORD *)v16 = off_1E34CB3D0;
      *((_QWORD *)v16 + 2) = v15;
      WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)&v33, v17);
    }
    else
    {
      v16 = (WebKit *)API::Object::newObject(0x18uLL, 12);
      *(_QWORD *)v16 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v16);
      *(_QWORD *)v16 = off_1E34CB3D0;
      *((_QWORD *)v16 + 2) = 0;
    }
    *a5 = v16;
LABEL_17:
    v21 = v30;
    v30 = 0;
    if (!v21)
      return;
    goto LABEL_21;
  }
  v32 = vcvt_f32_s32(*a1);
  v30 = 0;
  v31 = 0;
  WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>((uint64_t *)&v32, a3, 1, 6, (uint64_t)&v30, (uint64_t *)&v33, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v31 + 4));
  v18 = v33;
  if (v33)
  {
    v33 = 0;
    v19 = (WebKit *)API::Object::newObject(0x18uLL, 12);
    v30 = 0;
    *(_QWORD *)v19 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v19);
    *(_QWORD *)v19 = off_1E34CB3D0;
    *((float32x2_t *)v19 + 2) = v18;
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v30, v20);
  }
  else
  {
    v19 = (WebKit *)API::Object::newObject(0x18uLL, 12);
    *(_QWORD *)v19 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v19);
    *(_QWORD *)v19 = off_1E34CB3D0;
    *((_QWORD *)v19 + 2) = 0;
  }
  *a5 = v19;
  v21 = (uint64_t)v33;
  v33 = 0;
  if (!v21)
    return;
LABEL_21:
  v22 = *(_QWORD *)(v21 + 8);
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEABB3C](v22);
LABEL_25:
  v24 = *(_QWORD *)(v22 + 8);
  v25 = v24 - 1;
  *(_QWORD *)(v22 + 8) = v24 - 1;
  if (v24 == 1)
  {
    v29 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 24) = 0;
    v27 = v29 != 0;
  }
  else
  {
    v26 = 0;
    v27 = 1;
  }
  v28 = __ldxr((unsigned __int8 *)v22);
  if (v28 != 1)
  {
    __clrex();
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    if (v25)
      return;
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
    goto LABEL_32;
  if (v25)
    return;
LABEL_33:
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (!v27)
    WTF::fastFree((WTF *)v22, v14);
}

void WebKit::WebImage::create(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::DestinationColorSpace *v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t v10;
  WebKit *v11;
  void *v12;
  void *v13;
  WebKit *v14;
  WebKit *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  WebCore::ImageBufferCGBackend *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  CFTypeRef v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _BYTE v38[24];
  CFTypeRef cf;
  char v40;
  WebCore::ImageBufferCGBackend *v41;
  IntSize v42;
  const void *v43;
  uint64_t v44;
  int v45;
  const void *v46;
  __int16 v47;
  _BYTE v48[24];
  const void *v49;
  char v50;

  if (!*((_BYTE *)a1 + 96))
  {
    v14 = (WebKit *)API::Object::newObject(0x18uLL, 12);
    *(_QWORD *)v14 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v14);
    *(_QWORD *)v14 = off_1E34CB3D0;
    *((_QWORD *)v14 + 2) = 0;
    *a2 = v14;
    return;
  }
  v44 = *a1;
  v45 = *((_DWORD *)a1 + 2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  v46 = v3;
  v47 = *((_WORD *)a1 + 12);
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v48, (uint64_t)(a1 + 4));
  WebCore::ImageBuffer::backendParameters();
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v38, (uint64_t)v48);
  WebKit::ImageBufferShareableBitmapBackend::create((uint64_t *)&v41);
  if (v40)
  {
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v38);
  v5 = (uint64_t)v41;
  if (v41)
  {
    v36 = 0;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    v37 = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(&v42, v6, v7);
    v30 = 0;
    v31 = v44;
    v32 = v45;
    v8 = v46;
    v46 = 0;
    v33 = v8;
    v34 = v47;
    v29 = 0;
    v41 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t)&v31, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v30 + 4));
    v9 = v33;
    v33 = 0;
    if (v9)
      CFRelease(v9);
    v10 = v35;
    if (v35)
    {
      v35 = 0;
      v11 = (WebKit *)API::Object::newObject(0x18uLL, 12);
      v29 = 0;
      *(_QWORD *)v11 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v11);
      *(_QWORD *)v11 = off_1E34CB3D0;
      *((_QWORD *)v11 + 2) = v10;
      WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v29, v12);
    }
    else
    {
      v11 = (WebKit *)API::Object::newObject(0x18uLL, 12);
      *(_QWORD *)v11 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v11);
      *(_QWORD *)v11 = off_1E34CB3D0;
      *((_QWORD *)v11 + 2) = 0;
    }
    *a2 = v11;
    v16 = v35;
    v35 = 0;
    if (!v16)
      goto LABEL_30;
    v17 = *(_QWORD *)(v16 + 8);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEABB3C](v17);
LABEL_18:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v28 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v28 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (!v20)
          goto LABEL_26;
        goto LABEL_30;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (!v20)
    {
LABEL_26:
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (!v22)
        WTF::fastFree((WTF *)v17, v13);
    }
LABEL_30:
    v24 = v41;
    v41 = 0;
    if (v24)
      std::default_delete<WebKit::ImageBufferShareableBitmapBackend>::operator()[abi:sn180100]((int)&v41, v24);
    goto LABEL_32;
  }
  v15 = (WebKit *)API::Object::newObject(0x18uLL, 12);
  *(_QWORD *)v15 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v15);
  *(_QWORD *)v15 = off_1E34CB3D0;
  *((_QWORD *)v15 + 2) = 0;
  *a2 = v15;
LABEL_32:
  v25 = v43;
  v43 = 0;
  if (v25)
    CFRelease(v25);
  if (v50)
  {
    v26 = v49;
    v49 = 0;
    if (v26)
      CFRelease(v26);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v48);
  v27 = v46;
  v46 = 0;
  if (v27)
    CFRelease(v27);
}

uint64_t WebKit::WebImage::parametersAndHandle@<X0>(WebKit::WebImage *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  CFTypeRef v11;
  __int16 v12;
  _BYTE v13[24];
  CFTypeRef cf;
  char v15;
  _BYTE v16[72];

  WebKit::WebImage::createHandle((uint64_t)this, 1, v16);
  if (!v16[64])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
    return (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>::pair[abi:sn180100]<WebCore::ImageBufferParameters const&,WebCore::ShareableBitmapHandle,0>((uint64_t)&v9, (uint64_t *)(v4 + 16), (uint64_t)v16);
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v10;
    v5 = v11;
    v11 = 0;
    *(_QWORD *)(a2 + 16) = v5;
    *(_WORD *)(a2 + 24) = v12;
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 32, (uint64_t)v13);
    *(_BYTE *)(a2 + 96) = 1;
    if (v15)
    {
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
    v7 = v11;
    v11 = 0;
    if (v7)
      CFRelease(v7);
    return (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
  }
  result = 114;
  __break(0xC471u);
  return result;
}

void WebKit::WebImage::createHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  double v9;
  WebKit::WebImage *v10;
  _QWORD *v11;
  _QWORD v12[8];
  int v13;
  char v14;
  char v15;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5
    && ((*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5),
        (v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16))) != 0)
    && (v8 = v7, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) & 1) != 0)
    && ((*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v12, v8, a2), v14))
  {
    if (v13)
    {
      v10 = (WebKit::WebImage *)std::__throw_bad_variant_access[abi:sn180100]();
      WebKit::WebImage::bitmap(v10, v11);
    }
    else
    {
      v9 = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a3, (uint64_t)v12);
      a3[64] = 1;
      if (v14)
      {
        if (v13 != -1)
          ((void (*)(char *, _QWORD *, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v13])(&v15, v12, v9);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[64] = 0;
  }
}

uint64_t WebKit::WebImage::bitmap@<X0>(WebKit::WebImage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2));
    if (result)
    {
      v5 = result;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
  }
  *a2 = 0;
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)68>::type()
{
  return 68;
}

void WebKit::WebImage::~WebImage(WebKit::WebImage *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E34CB3D0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      return;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v6)
    return;
LABEL_14:
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v8)
    WTF::fastFree((WTF *)v3, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E34CB3D0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v2)
    goto LABEL_20;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (v6)
        goto LABEL_20;
LABEL_14:
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (!v8)
        WTF::fastFree((WTF *)v3, a2);
LABEL_20:
      JUMPOUT(0x19AEB936CLL);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v6)
    goto LABEL_20;
  goto LABEL_14;
}

uint64_t API::ObjectImpl<(API::Object::Type)12>::type()
{
  return 12;
}

uint64_t WebKit::WebKit2PlatformMouseEvent::WebKit2PlatformMouseEvent(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  double v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  char v12;

  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 5;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 254;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 96) = 1;
  v4 = *(_DWORD **)WebCore::mousePointerEventType((WebCore *)a1);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  switch(*(_BYTE *)a2)
  {
    case 0:
      *(_BYTE *)(a1 + 8) = 6;
      v5 = 1.0;
      goto LABEL_12;
    case 1:
      v6 = 7;
      goto LABEL_11;
    case 2:
      v7 = 5;
      goto LABEL_8;
    case 3:
      v7 = 8;
LABEL_8:
      *(_BYTE *)(a1 + 8) = v7;
      v5 = *(double *)(a2 + 80);
      goto LABEL_12;
    case 4:
      *(_BYTE *)(a1 + 8) = 9;
      v5 = 2.0;
      goto LABEL_12;
    case 5:
      v6 = 10;
LABEL_11:
      *(_BYTE *)(a1 + 8) = v6;
      v5 = 0.0;
LABEL_12:
      *(double *)(a1 + 88) = v5;
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 1) & 0x12 | (8 * (*(_BYTE *)(a2 + 1) & 1)) | ((*(_BYTE *)(a2 + 1) & 4) != 0) | (*(_BYTE *)(a2 + 1) >> 1) & 4;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  if (!v9)
    *(_BYTE *)(a1 + 32) = 1;
  v10 = *(unsigned __int8 *)(a2 + 32);
  if (v10 >= 3 && v10 != 254)
  {
    __break(0xC471u);
    JUMPOUT(0x19724FF00);
  }
  *(_BYTE *)(a1 + 48) = v10;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 34);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 68) = (int)*(float *)(a2 + 52) | ((unint64_t)(int)*(float *)(a2 + 56) << 32);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 116) = 0;
  v11 = *(_BYTE *)(a2 + 1) & 1;
  *(_DWORD *)(a1 + 116) = v11;
  v12 = *(_BYTE *)(a2 + 1);
  if ((v12 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 4) == 0)
      goto LABEL_19;
LABEL_23:
    v11 |= 4u;
    *(_DWORD *)(a1 + 116) = v11;
    if ((*(_BYTE *)(a2 + 1) & 8) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v11 |= 2u;
  *(_DWORD *)(a1 + 116) = v11;
  v12 = *(_BYTE *)(a2 + 1);
  if ((v12 & 4) != 0)
    goto LABEL_23;
LABEL_19:
  if ((v12 & 8) != 0)
LABEL_20:
    *(_DWORD *)(a1 + 116) = v11 | 8;
LABEL_21:
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 92);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)(a2 + 96));
  return a1;
}

double WebKit::WebKit2PlatformWheelEvent::WebKit2PlatformWheelEvent(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 50) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 78) = 0u;
  *(_WORD *)(a1 + 8) = 12;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 1) & 0x12 | (8 * (*(_BYTE *)(a2 + 1) & 1)) | ((*(_BYTE *)(a2 + 1) & 4) != 0) | (*(_BYTE *)(a2 + 1) >> 1) & 4;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 64) != 0;
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 77);
  v2 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 92) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 93) = v2;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 80);
  v3 = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 100);
  result = *(double *)(a2 + 104);
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t WebKit::WebKit2PlatformKeyboardEvent::WebKit2PlatformKeyboardEvent(uint64_t a1, unsigned __int8 *a2)
{
  WTF::StringImpl **v4;
  int v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = (WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 86) = 0u;
  v5 = *a2;
  if ((v5 - 8) <= 2)
    *(_BYTE *)(a1 + 8) = v5 - 6;
  *(_BYTE *)(a1 + 9) = a2[1] & 0x12 | (8 * (a2[1] & 1)) | ((a2[1] & 4) != 0) | (a2[1] >> 1) & 4;
  *(_QWORD *)a1 = *((_QWORD *)a2 + 1);
  WTF::String::operator=(v4, (WTF::StringImpl *)(a2 + 32));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 40));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 48));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 56));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 88), (WTF::StringImpl *)(a2 + 64));
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 18);
  *(_BYTE *)(a1 + 101) = a2[84];
  *(_BYTE *)(a1 + 48) = a2[85];
  *(_WORD *)(a1 + 49) = *((_WORD *)a2 + 43);
  v6 = *((_QWORD *)a2 + 3);
  v7 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v6;
  if (!v7)
    *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

void WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent(WebCore::PlatformKeyboardEvent *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebKit::WebKit2PlatformTouchEvent::WebKit2PlatformTouchEvent(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;

  v3 = result;
  *(_QWORD *)result = 0;
  *(_WORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  v4 = (WTF **)(result + 48);
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 72) = 1;
  *(_QWORD *)(result + 84) = 0;
  *(_QWORD *)(result + 76) = 0;
  if ((*(_BYTE *)a2 - 11) <= 3u)
    *(_BYTE *)(result + 8) = *(_BYTE *)a2 + 2;
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 1) & 0x12 | (8 * (*(_BYTE *)(a2 + 1) & 1)) | ((*(_BYTE *)(a2 + 1) & 4) != 0) | (*(_BYTE *)(a2 + 1) >> 1) & 4;
  *(_QWORD *)result = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v5)
  {
    if (v5 >= 0x38E38E4)
    {
      __break(0xC471u);
      return result;
    }
    v6 = 72 * v5;
    v7 = WTF::fastMalloc((WTF *)(72 * v5));
    v8 = v7;
    v9 = (v6 & 0xFFFFFFF8) / 0x48;
    v10 = *(_DWORD *)(a2 + 44);
    if (v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 32);
      v13 = (72 * (unint64_t)v10 - 72) / 0x48 + 1;
      do
      {
        v14 = v12 + v11;
        if ((*(_BYTE *)(v12 + v11 + 12) - 1) > 3u)
          v15 = 3;
        else
          v15 = dword_1978D01D0[(char)(*(_BYTE *)(v12 + v11 + 12) - 1)];
        v16 = *(_QWORD *)(v14 + 4);
        v17 = *(unsigned __int8 *)(v14 + 64);
        v18 = v7 + v11;
        *(_DWORD *)v18 = *(_DWORD *)v14;
        *(_DWORD *)(v18 + 12) = v15;
        v19 = *(_OWORD *)(v14 + 16);
        v20 = *(_OWORD *)(v14 + 32);
        v21 = *(_OWORD *)(v14 + 48);
        *(_QWORD *)(v18 + 4) = v16;
        *(_OWORD *)(v18 + 16) = v19;
        *(_OWORD *)(v18 + 32) = v20;
        *(_OWORD *)(v18 + 48) = v21;
        v11 += 72;
        *(_DWORD *)(v18 + 64) = v17;
      }
      while (v14 + 72 != v12 + 72 * v10);
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v9 = 0;
    v13 = 0;
    v8 = 0;
  }
  v22 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    WTF::fastFree(v22, (void *)a2);
  }
  *(_QWORD *)(v3 + 48) = v8;
  *(_DWORD *)(v3 + 56) = v9;
  *(_DWORD *)(v3 + 60) = v13;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 60);
  *(_BYTE *)(v3 + 72) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(v3 + 73) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(v3 + 74) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(v3 + 76) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 84) = *(_QWORD *)(a2 + 48);
  return v3;
}

uint64_t WebCore::PlatformTouchEvent::PlatformTouchEvent(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if ((v5 & 0xF) != 0)
    *(_BYTE *)(a1 + 9) = v5 & 0xF;
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, (uint64_t *)(a2 + 48));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  return a1;
}

uint64_t std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>::pair[abi:sn180100]<WebCore::ImageBufferParameters const&,WebCore::ShareableBitmapHandle,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;

  v6 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v6;
  v7 = (const void *)a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
    CFRetain(v7);
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a1 + 32, a3);
  return a1;
}

void ___ZN6WebKit15ProcessLauncher22finishLaunchingProcessEN3WTF12ASCIILiteralE_block_invoke(uint64_t a1, id a2)
{
  uint64_t v2;
  _xpc_connection_s *v4;
  pid_t pid;
  int v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  _QWORD v12[2];

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 104) || object_getClass(a2) == (Class)MEMORY[0x1E0C81310])
  {
LABEL_9:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), a2);
    return;
  }
  WTF::deallocateSendRightSafely((WTF *)*(unsigned int *)(a1 + 40));
  v4 = *(_xpc_connection_s **)(v2 + 24);
  if (v4)
  {
    pid = xpc_connection_get_pid(v4);
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(void **)(v2 + 24);
    if (v7)
    {
      v8 = v7;
      v10 = v6;
      v11 = v7;
      WebKit::ProcessLauncher::didFinishLaunchingProcess(v2, pid, (uint64_t)&v10);

    }
    else
    {
      v10 = v6;
      v11 = 0;
      WebKit::ProcessLauncher::didFinishLaunchingProcess(v2, pid, (uint64_t)&v10);
    }
    v9 = *(void **)(v2 + 24);
    if (v9)

    *(_QWORD *)(v2 + 24) = 0;
    goto LABEL_9;
  }
  v12[0] = 0;
  v12[1] = 0;
  WebKit::ProcessLauncher::didFinishLaunchingProcess(v2, 0, (uint64_t)v12);
}

void WebKit::ProcessLauncher::terminateProcess(WebKit::ProcessLauncher *this)
{
  if (*((_BYTE *)this + 56))
    WebKit::ExtensionProcess::invalidate((WebKit::ProcessLauncher *)((char *)this + 40));
  WebKit::ProcessLauncher::terminateXPCConnection(this);
  *((_DWORD *)this + 27) = 0;
}

unsigned int *`non-virtual thunk to'WebKit::NetworkProcessProxy::xpcEventHandler@<X0>(WebKit::NetworkProcessProxy *this@<X0>, uint64_t *a2@<X8>)
{
  return WebKit::NetworkProcessProxy::xpcEventHandler((WebKit::NetworkProcessProxy *)((char *)this - 24), a2);
}

uint64_t WebKit::NetworkProcessProxy::removeBackgroundStateObservers(WebKit::NetworkProcessProxy *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 72));
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 73));
}

char *WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  char *result;
  unint64_t v30;
  size_t v31;
  void *v32;
  _QWORD v33[2];
  char v34;
  IPC::Encoder *v35;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 441;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v35 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a2[1];
  v14 = *(_QWORD *)(v12 + 544);
  v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = v15 + 8;
  v17 = *(_QWORD *)(v12 + 552);
  if (v17 < v15 + 8)
  {
    v30 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v31 = v30;
      v30 *= 2;
    }
    while (v31 < v16);
    result = (char *)mmap(0, v31, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v18 = result;
    memcpy(result, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
    v32 = *(void **)(v12 + 528);
    if (v32 != (void *)(v12 + 16))
      munmap(v32, *(_QWORD *)(v12 + 552));
    *(_QWORD *)(v12 + 528) = v18;
    *(_QWORD *)(v12 + 552) = v31;
    v14 = *(_QWORD *)(v12 + 544);
  }
  else
  {
    v18 = *(char **)(v12 + 528);
  }
  bzero(&v18[v14], v15 - v14);
  *(_QWORD *)(v12 + 544) = v16;
  v19 = (_QWORD *)(*(_QWORD *)(v12 + 528) + v15);
  *(_QWORD *)(v12 + 536) = v19 + 1;
  *v19 = v13;
  v20 = *a3;
  *a3 = 0;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v21 = &off_1E34CB948;
  v21[1] = v20;
  v22 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v33[0] = v21;
  v33[1] = v22;
  v34 = 1;
  v24 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v35, a5, (uint64_t)v33, a6);
  if (v34)
  {
    v25 = v33[0];
    v33[0] = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    IPC::Encoder::~Encoder(v26, v23);
    WTF::fastFree(v27, v28);
  }
  if (v24)
    return (char *)v22;
  else
    return 0;
}

void sub_197250850(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkProcessProxy::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  WebKit::WebProcessProxy::webPage(a2, &v8);
  v4 = v8;
  if (v8)
  {
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, v8 + 304);
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    WebCore::standardUserAgentWithApplicationName();
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (uint64_t)&v7);
    v6 = v7;
    v7 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
}

void sub_197250984(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteAcceleratedEffectStack::create@<X0>(uint64_t *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, double a6@<D4>)
{
  uint64_t v12;
  uint64_t result;

  v12 = bmalloc::api::isoAllocate();
  result = WebCore::AcceleratedEffectStack::AcceleratedEffectStack((WebCore::AcceleratedEffectStack *)v12);
  *(_QWORD *)v12 = &off_1E34CB4A8;
  *(_BYTE *)(v12 + 296) = 0;
  *(float *)(v12 + 300) = a2;
  *(float *)(v12 + 304) = a3;
  *(float *)(v12 + 308) = a4;
  *(float *)(v12 + 312) = a5;
  *(double *)(v12 + 320) = a6;
  *a1 = v12;
  return result;
}

void sub_197250A74(_Unwind_Exception *a1, void *a2)
{
  bmalloc::api *v2;

  bmalloc::api::isoDeallocate(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteAcceleratedEffectStack::setEffects(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  result = WebCore::AcceleratedEffectStack::setEffects();
  v3 = a1 + 280;
  v4 = 264;
  if (*(_DWORD *)(a1 + 292))
    v4 = 280;
  else
    v3 = a1 + 264;
  v5 = *(unsigned int *)(v3 + 12);
  if (!(_DWORD)v5)
    return result;
  LOBYTE(v6) = 0;
  LOBYTE(v7) = 0;
  LOBYTE(v8) = 0;
  v9 = *(uint64_t **)(a1 + v4);
  v10 = 8 * v5;
  do
  {
    v11 = *v9;
    if (v6)
    {
      v6 = 1;
      if ((v7 & 1) == 0)
        goto LABEL_8;
    }
    else
    {
      v6 = (*(_WORD *)(v11 + 128) & 0x1800) != 0;
      if ((v7 & 1) == 0)
      {
LABEL_8:
        v7 = (*(unsigned __int16 *)(v11 + 128) >> 1) & 1;
        if (v8)
          goto LABEL_12;
        goto LABEL_9;
      }
    }
    v7 = 1;
    if (v8)
    {
LABEL_12:
      v8 = 1;
      goto LABEL_13;
    }
LABEL_9:
    v8 = (*(_WORD *)(v11 + 128) & 0x7FC) != 0;
LABEL_13:
    if ((v6 & v7) == 1 && v8)
    {
      v13 = *(_BYTE *)(a1 + 296) | 0xA;
      goto LABEL_26;
    }
    ++v9;
    v10 -= 8;
  }
  while (v10);
  if (!v6)
  {
    if (!v7)
      goto LABEL_24;
    v12 = *(_BYTE *)(a1 + 296);
    goto LABEL_22;
  }
  v12 = *(_BYTE *)(a1 + 296) | 8;
  *(_BYTE *)(a1 + 296) = v12;
  if ((v7 & 1) != 0)
  {
LABEL_22:
    v13 = v12 | 2;
    *(_BYTE *)(a1 + 296) = v12 | 2;
    if (!v8)
      return result;
    goto LABEL_26;
  }
LABEL_24:
  if (!v8)
    return result;
  v13 = *(_BYTE *)(a1 + 296);
LABEL_26:
  *(_BYTE *)(a1 + 296) = v13 | 4;
  return result;
}

void WebKit::RemoteAcceleratedEffectStack::applyEffectsFromMainThread(uint64_t a1, void *a2)
{
  void *v4;
  double v5;
  char v6;
  _BYTE v7[128];
  _DWORD v8[62];

  WebKit::RemoteAcceleratedEffectStack::computeValues(a1, (uint64_t)v8);
  v6 = *(_BYTE *)(a1 + 296);
  if ((v6 & 8) != 0)
  {
    WebCore::PlatformCAFilters::setFiltersOnLayer();
    v6 = *(_BYTE *)(a1 + 296);
  }
  if ((v6 & 2) != 0)
  {
    LODWORD(v5) = v8[0];
    objc_msgSend(a2, "setOpacity:", v5);
    v6 = *(_BYTE *)(a1 + 296);
  }
  if ((v6 & 4) != 0)
  {
    WebCore::AcceleratedEffectValues::computedTransformationMatrix((WebCore::AcceleratedEffectValues *)v8, (const WebCore::FloatRect *)(a1 + 300));
    WebCore::TransformationMatrix::operator CATransform3D();
    objc_msgSend(a2, "setTransform:", v7);
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v8, v4);
}

void sub_197250C44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&a42, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteAcceleratedEffectStack::computeValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a2, (const WebCore::AcceleratedEffectValues *)(a1 + 16));
  v4 = a1 + 280;
  v5 = 280;
  if (!*(_DWORD *)(a1 + 292))
  {
    v5 = 264;
    v4 = a1 + 264;
  }
  v6 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + v5);
    v8 = 8 * v6;
    do
    {
      result = WebCore::AcceleratedEffect::apply();
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_197250CF8(_Unwind_Exception *a1, void *a2)
{
  WebCore::AcceleratedEffectValues *v2;

  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::initializeDebugIndicator(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  id v5;
  const void *v6;
  double *v7;
  double v8;
  CGColorSpace *v9;
  CGColorRef v10;
  CGColorRef v11;
  id v12;
  const void *v13;
  CGColorRef v14;
  _OWORD v15[2];
  CGFloat components[2];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = WTF::fastMalloc((WTF *)0x48);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v3 = (unsigned int *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)v2 = v3;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 49) = 0u;
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 21, (WebKit::RemoteLayerTreeHost *)v2);
  *(_BYTE *)(*((_QWORD *)this + 21) + 64) = 1;
  v5 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  v6 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v5;
  if (v6)
  {
    CFRelease(v6);
    v5 = (id)*((_QWORD *)this + 22);
  }
  objc_msgSend(v5, "setName:", CFSTR("Tile map host"));
  objc_msgSend(*((id *)this + 22), "setDelegate:", objc_msgSend(MEMORY[0x1E0DCDD78], "shared"));
  v7 = (double *)MEMORY[0x1E0C9D538];
  objc_msgSend(*((id *)this + 22), "setAnchorPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  LODWORD(v8) = 1061997773;
  objc_msgSend(*((id *)this + 22), "setOpacity:", v8);
  objc_msgSend(*((id *)this + 22), "setMasksToBounds:", 1);
  v9 = (CGColorSpace *)WebCore::sRGBColorSpaceRef((WebCore *)objc_msgSend(*((id *)this + 22), "setBorderWidth:", 2.0));
  *(_OWORD *)components = xmmword_1978D01E8;
  v17 = unk_1978D01F8;
  v10 = CGColorCreate(v9, components);
  objc_msgSend(*((id *)this + 22), "setBackgroundColor:", v10);
  v15[0] = xmmword_1978D0208;
  v15[1] = unk_1978D0218;
  v11 = CGColorCreate(v9, (const CGFloat *)v15);
  objc_msgSend(*((id *)this + 22), "setBorderColor:", v11);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  v12 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  v13 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v12;
  if (v13)
  {
    CFRelease(v13);
    v12 = (id)*((_QWORD *)this + 23);
  }
  objc_msgSend(v12, "setDelegate:", objc_msgSend(MEMORY[0x1E0DCDD78], "shared"));
  objc_msgSend(*((id *)this + 23), "setAnchorPoint:", *v7, v7[1]);
  *(_OWORD *)components = xmmword_1978D0228;
  v17 = unk_1978D0238;
  v14 = CGColorCreate(v9, components);
  objc_msgSend(*((id *)this + 23), "setBorderColor:", v14);
  if (v14)
    CFRelease(v14);
}

void sub_197250F50(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::addRemotePageDrawingAreaProxy(WebKit::RemoteLayerTreeDrawingAreaProxy *this, WebKit::RemotePageDrawingAreaProxy *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int **v39;
  char v40[52];
  _BYTE v41[36];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)((char *)this + 128);
  memset(&v41[4], 0, 32);
  v4 = *((_DWORD *)this + 34);
  v5 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 34) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 128, a2);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  if (v7)
  {
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  v12 = *v3;
  if (*v3
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v3, 0), (v12 = *v3) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v14;
    v22 = (unsigned int **)(v12 + 48 * v21);
    v23 = *v22;
    if (*v22 != (unsigned int *)-1)
      break;
    v15 = (unsigned int **)(v12 + 48 * v21);
LABEL_19:
    v19 = i + v21;
  }
  if (!v23)
  {
    if (v15)
    {
      *v15 = 0;
      v15[1] = (unsigned int *)3;
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      --*(_DWORD *)(*v3 - 16);
      *v15 = v7;
    }
    else
    {
      *v22 = v7;
      v15 = (unsigned int **)(v12 + 48 * v21);
    }
    *((_DWORD *)v15 + 2) = 3;
    v30 = *(_OWORD *)v41;
    v31 = *(_OWORD *)&v41[16];
    *((_DWORD *)v15 + 11) = *(_DWORD *)&v41[32];
    *(_OWORD *)((char *)v15 + 28) = v31;
    *(_OWORD *)((char *)v15 + 12) = v30;
    v32 = *v3;
    if (*v3)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v3;
    if (*v3)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 <= 2 * v36)
      {
LABEL_38:
        v15 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v3, v15);
        v34 = *v3;
        if (*v3)
          LODWORD(v37) = *(_DWORD *)(v34 - 4);
        else
          LODWORD(v37) = 0;
      }
    }
    else if (3 * v37 <= 4 * v36)
    {
      goto LABEL_38;
    }
    v25 = v34 + 48 * v37;
    v22 = v15;
    return WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v40, v3, (uint64_t)v22, v25);
  }
  if (v23 != v7)
    goto LABEL_19;
  if ((v13 & 1) != 0)
    v24 = 0;
  else
    v24 = *(_DWORD *)(v12 - 4);
  v25 = v12 + 48 * v24;
  if (v7)
  {
    do
    {
      v26 = __ldaxr(v7);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v7));
    if (!v27)
    {
      atomic_store(1u, v7);
      v28 = (WTF *)v7;
      v39 = v22;
      v29 = v25;
      WTF::fastFree(v28, v15);
      v25 = v29;
      v22 = v39;
    }
  }
  return WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v40, v3, (uint64_t)v22, v25);
}

void sub_1972512A0(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::RemoteLayerTreeDrawingAreaProxy::removeRemotePageDrawingAreaProxy(unsigned int *this, WebKit::RemotePageDrawingAreaProxy *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v3 = (uint64_t *)(this + 32);
  v4 = this[34];
  v5 = this[35];
  this[34] = v4 + 1;
  if (v4 > v5)
    this = (unsigned int *)WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)(this + 32), a2);
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = *v3;
      if (*v3)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = (unsigned int **)(v7 + 48 * v12);
          v15 = *v14;
          if (*v14 != (unsigned int *)-1)
          {
            if (!v15)
            {
              v16 = *(_DWORD *)(v7 - 4);
              v14 = (unsigned int **)(v7 + 48 * v16);
              goto LABEL_13;
            }
            if (v15 == (unsigned int *)v6)
              break;
          }
          v12 = (v12 + i) & v8;
        }
        v16 = *(_DWORD *)(v7 - 4);
LABEL_13:
        if ((unsigned int **)(v7 + 48 * v16) != v14)
        {
          this = *v14;
          *v14 = 0;
          if (this)
          {
            do
            {
              v19 = __ldaxr(this);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, this));
            if (!v20)
            {
              atomic_store(1u, this);
              this = (unsigned int *)WTF::fastFree((WTF *)this, a2);
            }
          }
          *v14 = (unsigned int *)-1;
          ++*(_DWORD *)(*v3 - 16);
          v17 = *v3;
          if (*v3)
            v18 = *(_DWORD *)(v17 - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(v17 - 12) = v18;
          v21 = *v3;
          if (*v3)
          {
            v22 = 6 * *(_DWORD *)(v21 - 12);
            v23 = *(_DWORD *)(v21 - 4);
            if (v22 < v23 && v23 >= 9)
              return (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v3, v23 >> 1, 0);
          }
        }
      }
    }
  }
  return this;
}

unsigned int *WebKit::RemoteLayerTreeDrawingAreaProxy::detachRemoteLayerTreeHost@<X0>(WebKit::RemoteLayerTreeDrawingAreaProxy *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int **v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v5 = (unsigned int **)*((_QWORD *)this + 9);
  result = *v5;
  *v5 = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  *a3 = v9;
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::remotePageProcessDidTerminate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[2];

  if (!*(_QWORD *)(result + 72))
    return result;
  v2 = result;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  v4 = v3 ? v3 - 16 : 0;
  v5 = *(_QWORD *)(v4 + 200);
  if (!v5)
    return result;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5);
  v7 = *(uint64_t **)(v2 + 72);
  v8 = v7 + 5;
  v9 = v7[5];
  v10 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v9, a2);
  if (v9)
    v11 = (_QWORD *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  else
    v11 = 0;
  if (v11 == v10)
  {
    v24 = 0;
  }
  else
  {
    v12 = v10[1];
    v10[1] = 0;
    v24 = v12;
    if (*v8)
    {
      v13 = *v8 + 16 * *(unsigned int *)(*v8 - 4);
      if ((_QWORD *)v13 == v10)
        goto LABEL_19;
LABEL_17:
      if ((_QWORD *)v13 != v10)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v7 + 5, v10);
      goto LABEL_19;
    }
    if (v10)
    {
      v13 = 0;
      goto LABEL_17;
    }
  }
LABEL_19:
  v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::begin(&v24);
  v16 = (uint64_t *)v14;
  v17 = v15;
  v18 = v24;
  if (v24)
    v19 = (uint64_t *)(v24 + 16 * *(unsigned int *)(v24 - 4));
  else
    v19 = 0;
  if (v19 != (uint64_t *)v14)
  {
    do
    {
      v20 = *v16;
      v21 = v16[1];
      v25[0] = v20;
      v25[1] = v21;
      if (v20)
      {
        v22 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v7 + 2, v25);
        if (v22)
          objc_msgSend(*(id *)(v22 + 48), "removeFromSuperview");
      }
      WebKit::RemoteLayerTreeHost::layerWillBeRemoved(v7, a2, v20, v21);
      while (1)
      {
        v16 += 2;
        if (v16 == v17)
          break;
        if (*(_OWORD *)v16 != 0 && v16[1] != -1)
          goto LABEL_34;
      }
      v16 = v17;
LABEL_34:
      ;
    }
    while (v16 != v19);
    v18 = v24;
  }
  if (v18)
    WTF::fastFree((WTF *)(v18 - 16), v15);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 160))(v5);
}

void sub_197251698(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  _Unwind_Resume(exception_object);
}

WebCore::ScrollingTree *WebKit::RemoteLayerTreeDrawingAreaProxy::viewWillStartLiveResize(WebCore::ScrollingTree *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 200);
  if (v3)
  {
    this = *(WebCore::ScrollingTree **)(v3 + 24);
    if (this)
      return (WebCore::ScrollingTree *)WebCore::ScrollingTree::viewWillStartLiveResize(this);
  }
  return this;
}

WebCore::ScrollingTree *WebKit::RemoteLayerTreeDrawingAreaProxy::viewWillEndLiveResize(WebCore::ScrollingTree *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 200);
  if (v3)
  {
    this = *(WebCore::ScrollingTree **)(v3 + 24);
    if (this)
      return (WebCore::ScrollingTree *)WebCore::ScrollingTree::viewWillEndLiveResize(this);
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTree(uint64_t a1, IPC::Connection *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::MonotonicTime *updated;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebKit::RemoteLayerTreeNode *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  float v64;
  float v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  int v71;
  void *v72;
  void *v73;
  int v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  CGFloat m11;
  CGFloat v92;
  unsigned int v93;
  void *v94;
  unsigned int v95;
  void *v96;
  void *v97;
  int *v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v103;
  uint64_t v105;
  _QWORD v106[4];
  _BYTE v107[16];
  CGFloat v108;
  uint64_t v109;
  _BYTE v110[44];
  unsigned __int8 v111;
  _QWORD v112[2];
  CATransform3D v113;

  v108 = 0.0;
  v109 = 0;
  v6 = *((_DWORD *)a3 + 3);
  if (v6)
  {
    v8 = *a3;
    v9 = *a3 + 832 * v6;
    do
    {
      v10 = *(_QWORD *)(v8 + 24);
      v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v10);
      v12 = v11;
      v14 = v13;
      if (v10)
        v15 = v10 + 24 * *(unsigned int *)(v10 - 4);
      else
        v15 = 0;
      if (v15 != v11)
      {
        do
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 416);
          if (!v16)
            goto LABEL_23;
          if (*(_BYTE *)(v16 + 96))
          {
            v17 = *a4;
            if (*a4)
            {
              v18 = *(_QWORD *)(v16 + 88);
              v19 = *(_DWORD *)(v17 - 8);
              v20 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
              v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              v23 = v19 & ((v22 >> 31) ^ v22);
              v24 = *(_QWORD *)(v17 + 16 * v23);
              if (v24 != v18)
              {
                v25 = 1;
                while (v24)
                {
                  v23 = ((_DWORD)v23 + v25) & v19;
                  v24 = *(_QWORD *)(v17 + 16 * v23);
                  ++v25;
                  if (v24 == v18)
                    goto LABEL_16;
                }
                v23 = *(unsigned int *)(v17 - 4);
              }
LABEL_16:
              if (v23 != *(_DWORD *)(v17 - 4))
                WebKit::RemoteLayerBackingStoreProperties::setBackendHandle(v16, *(_QWORD *)(v17 + 16 * v23 + 8));
            }
          }
          if (*(_BYTE *)(v16 + 72) && *(_DWORD *)(v16 + 64) == 1)
          {
            v26 = HIDWORD(v109);
            if (HIDWORD(v109) == (_DWORD)v109)
            {
              v16 = WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, HIDWORD(v109) + 1, v16);
              v26 = HIDWORD(v109);
            }
            WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(*(_QWORD *)&v108 + 4 * v26), (const WTF::MachSendRight *)v16);
            ++HIDWORD(v109);
          }
LABEL_23:
          while (1)
          {
            v12 += 24;
            if (v12 == v14)
              break;
            if (*(_OWORD *)v12 != 0 && *(_QWORD *)(v12 + 8) != -1)
              goto LABEL_30;
          }
          v12 = v14;
LABEL_30:
          ;
        }
        while (v12 != v15);
      }
      v8 += 832;
    }
    while (v8 != v9);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v28 = *(_QWORD *)(a1 + 8);
  if (v28)
  {
    do
      v29 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v29 + 1, (unsigned int *)v28));
  }
  v30 = *((_DWORD *)a3 + 3);
  if (v30)
  {
    v31 = *a3;
    v103 = *a3 + 832 * v30;
    do
    {
      kdebug_trace();
      v32 = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)a1, a2);
      v33 = v32;
      v34 = *(_QWORD *)(v31 + 240);
      *(_QWORD *)(v32 + 8) = v34;
      if (*(_QWORD *)(v32 + 16) < v34)
        *(_QWORD *)(v32 + 16) = v34;
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v105 = v35;
      if (v35)
        v36 = v35 - 16;
      else
        v36 = 0;
      updated = (WTF::MonotonicTime *)CFRetain(*(CFTypeRef *)(v36 + 8));
      if (*(_QWORD *)(v31 + 32)
        || (*(_QWORD *)(v33 + 24) = *(_QWORD *)(v31 + 240),
            *(_QWORD *)(v33 + 32) = *(_QWORD *)(v31 + 248),
            !*(_BYTE *)(v31 + 752)))
      {
        v38 = 0;
      }
      else
      {
        updated = (WTF::MonotonicTime *)WebKit::WebPageProxy::updateEditorState((WebKit::WebPageProxy *)v36, (char *)(v31 + 272), 1);
        v38 = (int)updated;
      }
      v110[0] = 0;
      v111 = 0;
      v39 = *(unsigned int *)(v31 + 116);
      if ((_DWORD)v39)
      {
        v40 = *(_QWORD **)(v31 + 104);
        v41 = 8 * v39;
        while (*v40 != *(_QWORD *)(a1 + 192))
        {
          ++v40;
          v41 -= 8;
          if (!v41)
            goto LABEL_51;
        }
        *(_QWORD *)(a1 + 192) = 0;
      }
LABEL_51:
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(v31 + 784);
      WTF::MonotonicTime::now(updated);
      *(_QWORD *)(a1 + 216) = v42;
      (*(void (**)(_QWORD))(**(_QWORD **)(v36 + 200) + 152))(*(_QWORD *)(v36 + 200));
      if (WebKit::RemoteLayerTreeTransaction::hasAnyLayerChanges((WebKit::RemoteLayerTreeTransaction *)v31))
        ++*(_DWORD *)(a1 + 200);
      if (WebKit::RemoteLayerTreeHost::updateLayerTree(*(WebKit::RemoteLayerTreeHost **)(a1 + 72), a2, (const WebKit::RemoteLayerTreeTransaction *)v31, 1.0))
      {
        v43 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)(a1 + 192))
        {
          WebKit::RemoteLayerTreeHost::detachRootLayer(v43);
        }
        else
        {
          v44 = *(_QWORD *)(v43 + 8);
          if (v44)
            v45 = *(WebKit::RemoteLayerTreeNode **)(v44 + 8);
          else
            v45 = 0;
          WebKit::WebPageProxy::setRemoteLayerTreeRootNode((WebKit::WebPageProxy *)v36, v45);
        }
      }
      if (!*(_QWORD *)(v31 + 32))
      {
        WebKit::RemoteScrollingCoordinatorProxy::commitScrollingTreeState(*(_QWORD *)(v36 + 200), (uint64_t)a2, v31 + 800, (uint64_t)&v113);
        if (v111 == BYTE4(v113.m22))
        {
          if (v111)
          {
            *(_OWORD *)v110 = *(_OWORD *)&v113.m11;
            *(_DWORD *)&v110[15] = *(_DWORD *)((char *)&v113.m12 + 7);
            if (v110[40] == LOBYTE(v113.m22))
            {
              if (v110[40])
              {
                v110[20] = BYTE4(v113.m13);
                *(CGFloat *)&v110[24] = v113.m14;
                *(_DWORD *)&v110[32] = LODWORD(v113.m21);
                *(_WORD *)&v110[36] = WORD2(v113.m21);
              }
            }
            else if (v110[40])
            {
              v110[40] = 0;
            }
            else
            {
              *(_OWORD *)&v110[20] = *(_OWORD *)((char *)&v113.m13 + 4);
              *(_DWORD *)&v110[36] = HIDWORD(v113.m21);
              v110[40] = 1;
            }
          }
        }
        else if (v111)
        {
          v111 = 0;
        }
        else
        {
          *(_OWORD *)v110 = *(_OWORD *)&v113.m11;
          *(_OWORD *)&v110[16] = *(_OWORD *)&v113.m13;
          *(_OWORD *)&v110[28] = *(_OWORD *)((char *)&v113.m14 + 4);
          v111 = 1;
        }
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v36 + 200) + 160))(*(_QWORD *)(v36 + 200));
      WebKit::WebPageProxy::didCommitLayerTree((WebKit::WebPageProxy *)v36, (const Color *)v31);
      (*(void (**)(uint64_t, IPC::Connection *, uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, a2, v31, v31 + 800);
      (*(void (**)(_QWORD))(**(_QWORD **)(v36 + 200) + 32))(*(_QWORD *)(v36 + 200));
      v46 = *(_QWORD *)(v36 + 32);
      v112[0] = *(_QWORD *)(v46 + 2272);
      LODWORD(v113.m11) = WebKit::WebPageProxy::computeLayoutViewportRect((_QWORD *)v36, (__int128 *)(v46 + 2272), (FloatRect *)(v46 + 2304), (const FloatRect *)(v46 + 2336), 0, *(double *)(v46 + 2416));
      HIDWORD(v113.m11) = v47;
      *(_QWORD *)&v113.m12 = __PAIR64__(v49, v48);
      v50 = *(_QWORD *)(v36 + 200);
      if (v50)
        WebCore::ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(*(WebCore::ScrollingTree **)(v50 + 24), (const WebCore::FloatPoint *)v112, (const FloatRect *)&v113, *(double *)(*(_QWORD *)(v36 + 32) + 2416));
      if (v111)
      {
        WebCore::ScrollingTree::mainFrameScrollPosition(*(WebCore::ScrollingTree **)(*(_QWORD *)(v36 + 200) + 24));
        if (!v111)
          goto LABEL_142;
        *(_OWORD *)&v113.m11 = *(_OWORD *)&v110[20];
        v113.m13 = *(CGFloat *)&v110[36];
        if (v110[40])
          v110[40] = 0;
        if (BYTE4(v113.m13)
          && LOBYTE(v113.m11) != 2
          && (WebCore::RequestedScrollData::computeDestinationPosition(), !v111)
          || (WebCore::RequestedScrollData::destinationPosition(),
              *(_QWORD *)&v113.m11 = __PAIR64__(v53, v52),
              v112[0] = *(_QWORD *)(v31 + 128),
              !v111))
        {
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v54 = *(_QWORD *)(v36 + 40);
        if (v54)
          v55 = *(_QWORD *)(v54 + 8);
        else
          v55 = 0;
        v56 = v110[18] != 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 1584))(v55);
        (*(void (**)(uint64_t, CATransform3D *, _QWORD *, _BOOL8))(*(_QWORD *)v55 + 32))(v55, &v113, v112, v56);
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 1592))(v55);
      }
      if (*(_QWORD *)(a1 + 168))
      {
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (v57)
          v58 = v57 - 16;
        else
          v58 = 0;
        v59 = *(_QWORD *)(v58 + 40);
        if (v59)
          v60 = *(_QWORD *)(v59 + 8);
        else
          v60 = 0;
        v62 = *(_DWORD *)(v31 + 120);
        v61 = *(_DWORD *)(v31 + 124);
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1584))(v60);
        v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60);
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 1592))(v60);
        v64 = 1.0;
        if (v62 >= 1 && v61 >= 1)
        {
          v65 = (float)((float)(int)v63 + -20.0) / (float)v62;
          if (v65 > 0.05)
            v65 = 0.05;
          if ((float)((float)((float)SHIDWORD(v63) + -20.0) / (float)v61) >= v65)
            v64 = v65;
          else
            v64 = (float)((float)SHIDWORD(v63) + -20.0) / (float)v61;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v36 + 200) + 152))(*(_QWORD *)(v36 + 200));
        v66 = WebKit::RemoteLayerTreeHost::updateLayerTree(*(WebKit::RemoteLayerTreeHost **)(a1 + 168), a2, (const WebKit::RemoteLayerTreeTransaction *)v31, v64);
        (*(void (**)(_QWORD))(**(_QWORD **)(v36 + 200) + 160))(*(_QWORD *)(v36 + 200));
        v67 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        if (v67 && (v68 = *(_QWORD *)(v67 + 8)) != 0)
          v69 = *(void **)(v68 + 40);
        else
          v69 = 0;
        v71 = *(_DWORD *)(v31 + 120);
        v70 = *(_DWORD *)(v31 + 124);
        objc_msgSend(*(id *)(a1 + 176), "removeFromSuperlayer");
        objc_msgSend(v69, "addSublayer:", *(_QWORD *)(a1 + 176));
        v72 = *(void **)(a1 + 176);
        v113.m11 = 0.0;
        *(float *)&v113.m12 = (float)v71;
        *((float *)&v113.m12 + 1) = (float)v70;
        WebCore::FloatRect::operator CGRect();
        objc_msgSend(v72, "setBounds:");
        v73 = *(void **)(a1 + 176);
        LODWORD(v113.m11) = WebKit::RemoteLayerTreeDrawingAreaProxy::indicatorLocation(*(WebKit::RemoteLayerTreeDrawingAreaProxy **)(*(_QWORD *)(a1 + 40) + 8)).u32[0];
        HIDWORD(v113.m11) = v74;
        WebCore::FloatPoint::operator CGPoint();
        objc_msgSend(v73, "setPosition:");
        v75 = *(void **)(a1 + 176);
        CATransform3DMakeScale(&v113, v64, v64, 1.0);
        objc_msgSend(v75, "setTransform:", &v113);
        if (v66)
        {
          objc_msgSend(*(id *)(a1 + 176), "setSublayers:", MEMORY[0x1E0C9AA60]);
          v76 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8);
          if (v76 && (v77 = *(_QWORD *)(v76 + 8)) != 0)
            v78 = *(_QWORD *)(v77 + 40);
          else
            v78 = 0;
          objc_msgSend(*(id *)(a1 + 176), "addSublayer:", v78);
          objc_msgSend(*(id *)(a1 + 176), "addSublayer:", *(_QWORD *)(a1 + 184));
        }
        objc_msgSend(*(id *)(a1 + 184), "setBorderWidth:", (float)(1.0 / v64));
        v79 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (v79)
          v80 = v79 - 16;
        else
          v80 = 0;
        v81 = *(_QWORD *)(v80 + 32);
        v82 = *(_QWORD *)(v81 + 2264);
        v83 = *(void **)(a1 + 184);
        v112[0] = *(_QWORD *)(v81 + 2256);
        WebCore::FloatPoint::operator CGPoint();
        objc_msgSend(v83, "setPosition:");
        v84 = *(void **)(a1 + 184);
        v112[0] = 0;
        v112[1] = v82;
        WebCore::FloatRect::operator CGRect();
        objc_msgSend(v84, "setBounds:");
        v85 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8);
        if (v85 && (v86 = *(_QWORD *)(v85 + 8)) != 0)
          v87 = *(void **)(v86 + 40);
        else
          v87 = 0;
        objc_msgSend(v87, "setName:", CFSTR("Indicator host root"));
      }
      WebKit::WebPageProxy::layerTreeCommitComplete((WebKit::WebPageProxy *)v36);
      if (v38)
        WebKit::WebPageProxy::dispatchDidUpdateEditorState(v36);
      if (*(_WORD *)(v31 + 256))
        WebKit::WebPageProxy::didReachLayoutMilestone(v36, *(_WORD *)(v31 + 256));
      v88 = *(unsigned int *)(v31 + 116);
      if ((_DWORD)v88)
      {
        v89 = *(uint64_t **)(v31 + 104);
        v90 = 8 * v88;
        do
        {
          IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)a2, *v89, &v113);
          m11 = v113.m11;
          if (*(_QWORD *)&v113.m11)
          {
            v113.m11 = 0.0;
            (*(void (**)(CGFloat, _QWORD))(**(_QWORD **)&m11 + 16))(COERCE_CGFLOAT(*(_QWORD *)&m11), 0);
            (*(void (**)(CGFloat))(**(_QWORD **)&m11 + 8))(COERCE_CGFLOAT(*(_QWORD *)&m11));
            v92 = v113.m11;
            v113.m11 = 0.0;
            if (v92 != 0.0)
              (*(void (**)(CGFloat))(**(_QWORD **)&v92 + 8))(COERCE_CGFLOAT(*(_QWORD *)&v92));
          }
          ++v89;
          v90 -= 8;
        }
        while (v90);
      }
      if (v105)
        CFRelease(*(CFTypeRef *)(v36 + 8));
      kdebug_trace();
      if (!v28)
        return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v51);
      if (!*(_QWORD *)(v28 + 8))
        goto LABEL_139;
      v31 += 832;
    }
    while (v31 != v103);
  }
  v93 = HIDWORD(v109);
  if (HIDWORD(v109))
  {
    v94 = (void *)MEMORY[0x1E0CD28B0];
    v106[0] = MEMORY[0x1E0C809B0];
    v106[1] = 3321888768;
    v106[2] = ___ZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISN_EEEENS4_11DefaultHashISL_EENS4_10HashTraitsISL_EENST_ISQ_EENS4_15HashTableTraitsEEE_block_invoke;
    v106[3] = &__block_descriptor_48_e8_32c531_ZTSKZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISN_EEEENS4_11DefaultHashISL_EENS4_10HashTraitsISL_EENST_ISQ_EENS4_15HashTableTraitsEEEE3__0_e5_v8__0l;
    v113.m11 = v108;
    v95 = v109;
    v108 = 0.0;
    v109 = 0;
    *(_QWORD *)&v113.m12 = __PAIR64__(v93, v95);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v107, (uint64_t)&v113);
    objc_msgSend(v94, "addCommitHandler:forPhase:", v106, 2);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v96);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v107, v97);
  }
  v98 = (int *)WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)a1, a2);
  v99 = *v98;
  *v98 = 1;
  if (v99 == 2)
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
  if (v28)
  {
    do
    {
LABEL_139:
      v100 = __ldaxr((unsigned int *)v28);
      v101 = v100 - 1;
    }
    while (__stlxr(v101, (unsigned int *)v28));
    if (!v101)
    {
LABEL_143:
      atomic_store(1u, (unsigned int *)v28);
      WTF::fastFree((WTF *)v28, v51);
    }
  }
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v51);
}

void sub_197252180(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  unsigned int *v33;
  uint64_t v34;
  void *v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;

  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v34, a2);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a33, v36);
  if (v33)
  {
    do
    {
      v38 = __ldaxr(v33);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v33));
    if (!v39)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v37);
    }
  }
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v37);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c531_ZTSKZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISN_EEEENS4_11DefaultHashISL_EENS4_10HashTraitsISL_EENST_ISQ_EENS4_15HashTableTraitsEEEE3__0(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 32, a2 + 32);
}

uint64_t __destroy_helper_block_e8_32c531_ZTSKZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISN_EEEENS4_11DefaultHashISL_EENS4_10HashTraitsISL_EENST_ISQ_EENS4_15HashTableTraitsEEEE3__0(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
}

uint64_t WebKit::RemoteLayerTreeHost::updateLayerTree(WebKit::RemoteLayerTreeHost *this, const IPC::Connection *a2, const WebKit::RemoteLayerTreeTransaction *a3, float a4)
{
  uint64_t result;
  const WTF::StringImpl *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  WTF *v48;
  WTF *v49;
  void *v50;
  void *v51;
  uint64_t *v52;
  char v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  int v129;
  _OWORD *v130;
  _OWORD *v131;
  NSObject *v132;
  WTF *v134;
  _OWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  const WebKit::RemoteLayerTreeTransaction *v150;
  int v151;
  uint64_t v152;
  __int128 v153;
  WTF *v154;
  uint64_t v155;
  _BYTE buf[32];
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)this || !*(_QWORD *)(*(_QWORD *)this + 8))
    return 0;
  result = WebKit::AuxiliaryProcessProxy::fromConnection(a2, a2);
  if (result)
  {
    v152 = *(_QWORD *)(result + 176);
    v150 = a3;
    v9 = *((_DWORD *)a3 + 13);
    if (v9)
    {
      v10 = *((_QWORD *)a3 + 5);
      v11 = v10 + 80 * v9;
      v12 = (uint64_t *)((char *)this + 24);
      v13 = (uint64_t *)((char *)this + 16);
      while (1)
      {
        WebKit::RemoteLayerTreeHost::makeNode((uint64_t)this, (_QWORD *)v10, v8, (uint64_t *)&v154);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          objc_msgSend(*((id *)v154 + 5), "setUsesWebKitBehavior:", 1);
          objc_opt_class();
          objc_msgSend(*((id *)v154 + 5), "setSortsSublayers:", objc_opt_isKindOfClass() & 1);
        }
        if (*(_DWORD *)(v10 + 72) == 3)
          break;
LABEL_33:
        v33 = *v13;
        if (*v13
          || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)this + 2),
              (v33 = *v13) != 0))
        {
          v34 = *(_DWORD *)(v33 - 8);
        }
        else
        {
          v34 = 0;
        }
        *(_DWORD *)buf = -1640531527;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)buf, (_QWORD *)v10);
        v35 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v34;
        v36 = (_QWORD *)(v33 + 24 * v35);
        v38 = *v36;
        v37 = v36[1];
        if (*(_OWORD *)v36 != 0)
        {
          v39 = 0;
          v40 = 1;
          while (v38 != *(_QWORD *)v10 || v37 != *(_QWORD *)(v10 + 8))
          {
            if (v37 == -1)
              v39 = v36;
            v35 = (v35 + v40) & v34;
            v36 = (_QWORD *)(v33 + 24 * v35);
            v38 = *v36;
            v37 = v36[1];
            ++v40;
            if (*(_OWORD *)v36 == 0)
            {
              if (v39)
              {
                *v39 = 0;
                v39[1] = 0;
                v39[2] = 0;
                --*(_DWORD *)(*v13 - 16);
                v36 = v39;
              }
              goto LABEL_45;
            }
          }
          goto LABEL_54;
        }
LABEL_45:
        *(_OWORD *)v36 = *(_OWORD *)v10;
        v41 = v154;
        v154 = 0;
        std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)v36 + 2, v41);
        v42 = *v13;
        if (*v13)
          v43 = *(_DWORD *)(v42 - 12) + 1;
        else
          v43 = 1;
        *(_DWORD *)(v42 - 12) = v43;
        v44 = *v13;
        if (*v13)
          v45 = *(_DWORD *)(v44 - 12);
        else
          v45 = 0;
        v46 = (*(_DWORD *)(v44 - 16) + v45);
        v47 = *(unsigned int *)(v44 - 4);
        if (v47 > 0x400)
        {
          if (v47 > 2 * v46)
            goto LABEL_54;
LABEL_53:
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)this + 2);
          goto LABEL_54;
        }
        if (3 * v47 <= 4 * v46)
          goto LABEL_53;
LABEL_54:
        v48 = v154;
        v154 = 0;
        if (v48)
        {
          WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(v48);
          WTF::fastFree(v49, v50);
        }
        v10 += 80;
        if (v10 == v11)
          goto LABEL_65;
      }
      v14 = *v12;
      if (*v12
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 3),
            (v14 = *v12) != 0))
      {
        v15 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = *(_QWORD *)(v10 + 56);
      v17 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v15 & ((v19 >> 31) ^ v19);
      v21 = (_QWORD *)(v14 + 24 * v20);
      v22 = *v21;
      if (*v21)
      {
        v23 = 0;
        v24 = 1;
        do
        {
          if (v22 == v16)
          {
            *(_OWORD *)(v21 + 1) = *(_OWORD *)v10;
            goto LABEL_30;
          }
          if (v22 == -1)
            v23 = v21;
          v20 = (v20 + v24) & v15;
          v21 = (_QWORD *)(v14 + 24 * v20);
          v22 = *v21;
          ++v24;
        }
        while (*v21);
        if (v23)
        {
          *v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
          --*(_DWORD *)(*v12 - 16);
          v16 = *(_QWORD *)(v10 + 56);
          v21 = v23;
        }
      }
      *v21 = v16;
      *(_OWORD *)(v21 + 1) = *(_OWORD *)v10;
      v25 = *v12;
      if (*v12)
        v26 = *(_DWORD *)(v25 - 12) + 1;
      else
        v26 = 1;
      *(_DWORD *)(v25 - 12) = v26;
      v27 = *v12;
      if (*v12)
        v28 = *(_DWORD *)(v27 - 12);
      else
        v28 = 0;
      v29 = (*(_DWORD *)(v27 - 16) + v28);
      v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400)
      {
        if (v30 > 2 * v29)
          goto LABEL_30;
      }
      else if (3 * v30 > 4 * v29)
      {
LABEL_30:
        *(_QWORD *)buf = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*((_QWORD *)this + 4), *(_QWORD *)(v10 + 56));
        *(_QWORD *)&buf[8] = v31;
        if (*(_QWORD *)buf)
        {
          v32 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf);
          if (v32)
            objc_msgSend(*((id *)v154 + 6), "addSubview:", *(_QWORD *)(v32 + 48));
        }
        goto LABEL_33;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 3);
      goto LABEL_30;
    }
LABEL_65:
    *(_OWORD *)buf = *(_OWORD *)v150;
    if (*(_QWORD *)buf
      && (v52 = (uint64_t *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf)) != 0)
    {
      v53 = 0;
    }
    else
    {
      v54 = qword_1ECE71A28;
      if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
      {
        v55 = *(_QWORD *)v150;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = this;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v55;
        _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "%p RemoteLayerTreeHost::updateLayerTree - failed to find root layer with ID %llu", buf, 0x16u);
      }
      v52 = 0;
      v53 = 1;
    }
    v56 = (uint64_t *)*((_QWORD *)this + 1);
    if (v56)
      v56 = (uint64_t *)v56[1];
    v57 = v56 != v52 && *((_QWORD *)v150 + 4) == 0;
    v58 = v57;
    if (v57)
    {
      if ((v53 & 1) != 0)
      {
        v59 = 0;
      }
      else
      {
        v59 = *v52;
        if (*v52)
          goto LABEL_216;
        v59 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v59 = 1;
        *(_QWORD *)(v59 + 8) = v52;
        v60 = (unsigned int *)*v52;
        *v52 = v59;
        if (!v60)
          goto LABEL_216;
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          atomic_store(1u, v60);
          WTF::fastFree((WTF *)v60, v51);
        }
        v59 = *v52;
        if (*v52)
        {
LABEL_216:
          do
            v63 = __ldaxr((unsigned int *)v59);
          while (__stlxr(v63 + 1, (unsigned int *)v59));
        }
      }
      v64 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v59;
      if (v64)
      {
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          atomic_store(1u, v64);
          WTF::fastFree((WTF *)v64, v51);
        }
      }
    }
    v154 = 0;
    v155 = 0;
    v151 = WebKit::RemoteLayerTreeHost::layerContentsType(this);
    v67 = *((_QWORD *)v150 + 3);
    v68 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v67);
    v69 = v68;
    v71 = v70;
    v149 = v58;
    if (v67)
      v72 = v67 + 24 * *(unsigned int *)(v67 - 4);
    else
      v72 = 0;
    if (v72 != v68)
    {
      do
      {
        v73 = *(_QWORD *)(v69 + 16);
        *(_OWORD *)buf = *(_OWORD *)v69;
        if (*(_QWORD *)buf
          && (v74 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf)) != 0)
        {
          WebKit::RemoteLayerTreePropertyApplier::applyHierarchyUpdates(v74, v73, (uint64_t *)this + 2);
        }
        else
        {
          v75 = qword_1ECE71A28;
          if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
          {
            v76 = *(_QWORD *)v69;
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = this;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v76;
            _os_log_impl(&dword_196BCC000, v75, OS_LOG_TYPE_DEFAULT, "%p RemoteLayerTreeHost::updateLayerTree - failed to find layer with ID %llu", buf, 0x16u);
          }
        }
        while (1)
        {
          v69 += 24;
          if (v69 == v71)
            break;
          if (*(_OWORD *)v69 != 0 && *(_QWORD *)(v69 + 8) != -1)
            goto LABEL_110;
        }
        v69 = v71;
LABEL_110:
        ;
      }
      while (v69 != v72);
    }
    v78 = *((_QWORD *)v150 + 4);
    if (!v78)
      goto LABEL_158;
    v80 = (uint64_t *)((char *)this + 32);
    v79 = *((_QWORD *)this + 4);
    v82 = v52[1];
    v81 = v52[2];
    if (v79
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 4),
          (v79 = *v80) != 0))
    {
      v83 = *(_DWORD *)(v79 - 8);
    }
    else
    {
      v83 = 0;
    }
    v84 = (v78 + ~(v78 << 32)) ^ ((unint64_t)(v78 + ~(v78 << 32)) >> 22);
    v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
    v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
    v87 = v83 & ((v86 >> 31) ^ v86);
    v88 = (uint64_t *)(v79 + 24 * v87);
    v89 = *v88;
    if (*v88)
    {
      v90 = 0;
      v91 = 1;
      do
      {
        if (v89 == v78)
        {
          v88[1] = v82;
          v88[2] = v81;
          goto LABEL_133;
        }
        if (v89 == -1)
          v90 = v88;
        v87 = (v87 + v91) & v83;
        v88 = (uint64_t *)(v79 + 24 * v87);
        v89 = *v88;
        ++v91;
      }
      while (*v88);
      if (v90)
      {
        *v90 = 0;
        v90[1] = 0;
        v90[2] = 0;
        --*(_DWORD *)(*v80 - 16);
        v88 = v90;
      }
    }
    *v88 = v78;
    v88[1] = v82;
    v88[2] = v81;
    v92 = *v80;
    if (*v80)
      v93 = *(_DWORD *)(v92 - 12) + 1;
    else
      v93 = 1;
    *(_DWORD *)(v92 - 12) = v93;
    v94 = *v80;
    if (*v80)
      v95 = *(_DWORD *)(v94 - 12);
    else
      v95 = 0;
    v96 = (*(_DWORD *)(v94 - 16) + v95);
    v97 = *(unsigned int *)(v94 - 4);
    if (v97 > 0x400)
    {
      if (v97 > 2 * v96)
        goto LABEL_133;
    }
    else if (3 * v97 > 4 * v96)
    {
LABEL_133:
      v99 = (uint64_t *)((char *)this + 40);
      v98 = *((_QWORD *)this + 5);
      if (v98
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 5, 0), (v98 = *v99) != 0))
      {
        v100 = *(_DWORD *)(v98 - 8);
      }
      else
      {
        v100 = 0;
      }
      v101 = (v152 + ~(v152 << 32)) ^ ((unint64_t)(v152 + ~(v152 << 32)) >> 22);
      v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
      v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
      v104 = v100 & ((v103 >> 31) ^ v103);
      v105 = (uint64_t *)(v98 + 16 * v104);
      v106 = *v105;
      if (*v105)
      {
        v107 = 0;
        v108 = 1;
        while (v106 != v152)
        {
          if (v106 == -1)
            v107 = v105;
          v104 = (v104 + v108) & v100;
          v105 = (uint64_t *)(v98 + 16 * v104);
          v106 = *v105;
          ++v108;
          if (!*v105)
          {
            if (v107)
            {
              *v107 = 0;
              v107[1] = 0;
              --*(_DWORD *)(*v99 - 16);
              v105 = v107;
            }
            goto LABEL_144;
          }
        }
        goto LABEL_155;
      }
LABEL_144:
      v109 = v105[1];
      *v105 = v152;
      v105[1] = 0;
      if (v109)
        WTF::fastFree((WTF *)(v109 - 16), v88);
      v110 = *v99;
      if (*v99)
        v111 = *(_DWORD *)(v110 - 12) + 1;
      else
        v111 = 1;
      *(_DWORD *)(v110 - 12) = v111;
      v112 = *v99;
      if (*v99)
        v113 = *(_DWORD *)(v112 - 12);
      else
        v113 = 0;
      v114 = (*(_DWORD *)(v112 - 16) + v113);
      v115 = *(unsigned int *)(v112 - 4);
      if (v115 > 0x400)
      {
        if (v115 > 2 * v114)
          goto LABEL_155;
      }
      else if (3 * v115 > 4 * v114)
      {
LABEL_155:
        v153 = *(_OWORD *)(v52 + 1);
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v105 + 1, &v153, (uint64_t)buf);
        v52[4] = v78;
        *(_QWORD *)buf = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*((_QWORD *)this + 3), v78);
        *(_QWORD *)&buf[8] = v116;
        if (*(_QWORD *)buf)
        {
          v117 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf);
          if (v117)
            objc_msgSend(*(id *)(v117 + 48), "addSubview:", v52[6]);
        }
LABEL_158:
        v118 = *((_QWORD *)v150 + 3);
        v119 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v118);
        v121 = (uint64_t *)v119;
        v122 = v120;
        if (v118)
          v123 = (uint64_t *)(v118 + 24 * *(unsigned int *)(v118 - 4));
        else
          v123 = 0;
        if (v123 != (uint64_t *)v119)
        {
          do
          {
            v124 = *v121;
            v125 = v121[1];
            v126 = v121[2];
            *(_QWORD *)buf = v124;
            *(_QWORD *)&buf[8] = v125;
            if (v124
              && (v127 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf)) != 0)
            {
              if ((*(_BYTE *)(v126 + 1) & 0x40) != 0 && *(_QWORD *)(v126 + 520))
              {
                *(_QWORD *)buf = v124;
                *(_QWORD *)&buf[8] = v125;
                *(_OWORD *)&buf[16] = *(_OWORD *)(v126 + 520);
                v129 = HIDWORD(v155);
                if (HIDWORD(v155) == (_DWORD)v155)
                {
                  v130 = (_OWORD *)WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v154, HIDWORD(v155) + 1, (unint64_t)buf);
                  v129 = HIDWORD(v155);
                  v131 = (_OWORD *)((char *)v154 + 32 * HIDWORD(v155));
                  v128 = v130[1];
                  *v131 = *v130;
                }
                else
                {
                  v131 = (_OWORD *)((char *)v154 + 32 * HIDWORD(v155));
                  v128 = *(_OWORD *)&buf[16];
                  *v131 = *(_OWORD *)buf;
                }
                v131[1] = v128;
                HIDWORD(v155) = v129 + 1;
              }
              WebKit::RemoteLayerTreePropertyApplier::applyProperties(v127, this, v126, (uint64_t *)this + 2, v151, *(double *)&v128);
              if (*((_BYTE *)this + 64))
              {
                if ((*(_BYTE *)(v126 + 2) & 8) != 0)
                  objc_msgSend(*(id *)(v127 + 40), "setBorderWidth:", (float)(*(float *)(v126 + 556) / a4));
                objc_msgSend(*(id *)(v127 + 40), "setMasksToBounds:", 0);
              }
            }
            else
            {
              v132 = qword_1ECE71A28;
              if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v124;
                _os_log_impl(&dword_196BCC000, v132, OS_LOG_TYPE_DEFAULT, "%p RemoteLayerTreeHost::updateLayerTree - failed to find layer with ID %llu", buf, 0x16u);
              }
            }
            while (1)
            {
              v121 += 3;
              if (v121 == v122)
                break;
              if (*(_OWORD *)v121 != 0 && v121[1] != -1)
                goto LABEL_183;
            }
            v121 = v122;
LABEL_183:
            ;
          }
          while (v121 != v123);
        }
        v134 = v154;
        if (HIDWORD(v155))
        {
          v135 = (_OWORD *)((char *)v154 + 16);
          v136 = 32 * HIDWORD(v155);
          do
          {
            *(_OWORD *)buf = *v135;
            if (*(_QWORD *)buf)
            {
              v137 = (_QWORD *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf);
              if (v137)
                v137 = (_QWORD *)v137[5];
            }
            else
            {
              v137 = 0;
            }
            v138 = objc_msgSend(v137, "contents");
            *(_OWORD *)buf = *(v135 - 1);
            if (*(_QWORD *)buf)
            {
              v139 = (_QWORD *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 2, buf);
              if (v139)
                v139 = (_QWORD *)v139[5];
            }
            else
            {
              v139 = 0;
            }
            objc_msgSend(v139, "setContents:", v138);
            v135 += 2;
            v136 -= 32;
          }
          while (v136);
        }
        v140 = *((unsigned int *)v150 + 17);
        if ((_DWORD)v140)
        {
          v141 = (uint64_t *)*((_QWORD *)v150 + 7);
          v142 = &v141[2 * v140];
          do
          {
            WebKit::RemoteLayerTreeHost::layerWillBeRemoved((uint64_t *)this, v152, *v141, v141[1]);
            v141 += 2;
          }
          while (v141 != v142);
        }
        v143 = *((unsigned int *)v150 + 25);
        if ((_DWORD)v143)
        {
          v144 = (_OWORD *)*((_QWORD *)v150 + 11);
          v145 = (uint64_t *)((char *)this + 16);
          v146 = 16 * v143;
          do
          {
            *(_OWORD *)buf = *v144;
            if (*(_QWORD *)buf)
            {
              v147 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v145, buf);
              v148 = v147;
              if (v147)
              {
                objc_msgSend(*(id *)(v147 + 40), "setContents:", 0);
                *(_QWORD *)(v148 + 224) = 0;
                *(_BYTE *)(v148 + 232) = 0;
              }
            }
            ++v144;
            v146 -= 16;
          }
          while (v146);
        }
        if (v134)
          WTF::fastFree(v134, v120);
        return v149;
      }
      v105 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 5, v105);
      goto LABEL_155;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 4);
    goto LABEL_133;
  }
  return result;
}

void sub_197252F00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19)
{
  if (a19)
    WTF::fastFree(a19, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeHost::asyncSetLayerContents(uint64_t *a1, const void *a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  CFTypeRef v11;
  CFTypeRef cf[2];

  cf[0] = a2;
  cf[1] = a3;
  if (a2)
  {
    v8 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 2, cf);
    if (v8)
    {
      v9 = v8;
      v10 = WebKit::RemoteLayerTreeHost::layerContentsType((WebKit::RemoteLayerTreeHost *)a1);
      WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(a4, v10, cf);
      objc_msgSend(*(id *)(v9 + 40), "setContents:", cf[0]);
      *(_QWORD *)(v9 + 224) = *a5;
      *(_BYTE *)(v9 + 232) = 1;
      v11 = cf[0];
      cf[0] = 0;
      if (v11)
        CFRelease(v11);
    }
  }
}

void sub_197252FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

float32x2_t WebKit::RemoteLayerTreeDrawingAreaProxy::indicatorLocation(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  char *v1;
  uint64_t v2;
  double v3;
  float32x2_t v4;

  v1 = (char *)this - 16;
  if (!this)
    v1 = 0;
  v2 = *((_QWORD *)v1 + 4);
  v3 = 10.0 / *(double *)(v2 + 2416);
  *(float *)&v3 = v3;
  v4 = (float32x2_t)vbic_s8(*(int8x8_t *)(v2 + 2272), (int8x8_t)vcltz_f32(*(float32x2_t *)(v2 + 2272)));
  return vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v2 + 2256), v4), *(int8x8_t *)(v2 + 2256), (int8x8_t)v4), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v3, 0));
}

WTF::MonotonicTime *WebKit::RemoteLayerTreeDrawingAreaProxy::waitForDidUpdateActivityState(WTF::MonotonicTime *this, unint64_t a2, WebKit::WebProcessProxy *a3)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  double v11;
  IPC::Connection *v12;
  uint64_t v13;
  WTF::ApproximateTime *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  double v38;
  IPC::Connection *v39;
  _BYTE v40[8];
  WTF::MonotonicTime *v41;
  unsigned int v42;

  if (!a2)
    return this;
  v4 = (unsigned __int8 **)*((_QWORD *)a3 + 18);
  if (!v4)
    return this;
  v5 = (uint64_t)this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v39, v4);
  v6 = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)v5, v39);
  if (*(_DWORD *)v6 == 1)
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, v39);
  if ((byte_1ECE72B59 & 1) == 0)
  {
LABEL_47:
    v37 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("WebKitOverrideActivityStateUpdateTimeout"));
    if (v37)
      objc_msgSend(v37, "doubleValue");
    else
      v38 = 0.25;
    qword_1ECE72B60 = *(_QWORD *)&v38;
    byte_1ECE72B59 = 1;
  }
  v7 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
  v8 = *(_QWORD *)(v5 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  this = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  v11 = v10;
  while (1)
  {
    v12 = v39;
    v13 = *(_QWORD *)(v5 + 24);
    v14 = (WTF::ApproximateTime *)WTF::MonotonicTime::now(this);
    v16 = v15 - v11;
    v17 = *(double *)&qword_1ECE72B60;
    v18 = vabdd_f64(*(double *)&qword_1ECE72B60, v15 - v11);
    v19 = INFINITY;
    if (v18 != INFINITY)
    {
      WTF::ApproximateTime::now(v14);
      v19 = v17 - v16 + v20;
    }
    this = (WTF::MonotonicTime *)IPC::Connection::waitForMessage((unsigned __int8 ***)v12, 0x452u, v13, 1, (uint64_t)&v41, v19);
    if (v42)
    {
      if (v42 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        goto LABEL_47;
      }
      v22 = v41;
      v23 = 1;
LABEL_18:
      this = (WTF::MonotonicTime *)((uint64_t (*)(_BYTE *, WTF::MonotonicTime **))off_1E34CB998[v23])(v40, &v41);
      goto LABEL_19;
    }
    v24 = atomic_load((unsigned __int8 *)v12 + 33);
    v23 = v42;
    if ((v24 & 1) != 0)
    {
      this = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, IPC::Connection *, WTF::MonotonicTime *))(**((_QWORD **)v12 + 1) + 16))(*((_QWORD *)v12 + 1), v12, v41);
      v22 = 0;
      v23 = v42;
    }
    else
    {
      v22 = 1;
    }
    if (v23 != 0xFFFFFFFFLL)
      goto LABEL_18;
LABEL_19:
    if (v22)
      break;
    if (!v8)
      goto LABEL_29;
    if (!*(_QWORD *)(v8 + 8) || *(_QWORD *)(v6 + 32) >= a2)
      goto LABEL_26;
    if (*(_DWORD *)v6 == 1)
      this = (WTF::MonotonicTime *)WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, v39);
  }
  if (!v8)
    goto LABEL_29;
  do
  {
LABEL_26:
    v25 = __ldaxr((unsigned int *)v8);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)v8));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)v8);
    this = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v8, v21);
  }
LABEL_29:
  v27 = (unsigned __int8 **)v39;
  v39 = 0;
  if (!v27)
    return this;
  v28 = *v27;
  if (__ldaxr(*v27))
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stxr(1u, v28))
LABEL_33:
    this = (WTF::MonotonicTime *)MEMORY[0x19AEABB3C](v28);
  v30 = *((_QWORD *)v28 + 1);
  v31 = v30 - 1;
  *((_QWORD *)v28 + 1) = v30 - 1;
  if (v30 == 1)
  {
    v36 = *((_QWORD *)v28 + 2);
    v32 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v28 + 3) = 0;
    v33 = v36 == 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v34 = __ldxr(v28);
  if (v34 == 1)
  {
    if (!__stlxr(0, v28))
    {
      if (!v31)
        goto LABEL_42;
      return this;
    }
  }
  else
  {
    __clrex();
  }
  this = (WTF::MonotonicTime *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
  if (!v31)
  {
LABEL_42:
    v35 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v35 = off_1E34ACA48;
    *(_QWORD *)(v35 + 8) = v28;
    *(_QWORD *)(v35 + 16) = v32;
    *(_BYTE *)(v35 + 24) = v33;
    v41 = (WTF::MonotonicTime *)v35;
    WTF::ensureOnMainRunLoop();
    this = v41;
    v41 = 0;
    if (this)
      return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void sub_197253374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 **a9, uint64_t a10, uint64_t a11, int a12)
{
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a9)
    goto LABEL_19;
  v13 = *a9;
  if (__ldaxr(*a9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
LABEL_7:
    v15 = *((_QWORD *)v13 + 1);
    v16 = v15 - 1;
    *((_QWORD *)v13 + 1) = v15 - 1;
    if (v15 == 1)
    {
      v21 = *((_QWORD *)v13 + 2);
      v17 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v13 + 3) = 0;
      v18 = v21 == 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v19 = __ldxr(v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_14:
        if (!v16)
        {
          v20 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v20 = off_1E34ACA48;
          *(_QWORD *)(v20 + 8) = v13;
          *(_QWORD *)(v20 + 16) = v17;
          *(_BYTE *)(v20 + 24) = v18;
          v22 = v20;
          WTF::ensureOnMainRunLoop();
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v13);
  goto LABEL_7;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::hideContentUntilPendingUpdate(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 3);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 24;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v17 = (IPC::Encoder *)v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34CB9B8;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15[0] = v5;
  v15[1] = v6;
  v16 = 1;
  v8 = WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v17, 0, (uint64_t)v15, 0);
  if (v16)
  {
    v9 = v15[0];
    v15[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v7);
    WTF::fastFree(v11, v12);
  }
  if (v8)
    v13 = v6;
  else
    v13 = 0;
  *((_QWORD *)this + 24) = v13;
  return WebKit::RemoteLayerTreeHost::detachRootLayer(*((_QWORD *)this + 9));
}

void sub_1972535D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeHost::detachRootLayer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      v4 = *(void **)(v2 + 48);
      if (v4)
        objc_msgSend(v4, "removeFromSuperview");
      else
        objc_msgSend(*(id *)(v2 + 40), "removeFromSuperlayer");
      this = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (this)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)this);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)this));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v5);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::hideContentUntilAnyUpdate(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return WebKit::RemoteLayerTreeHost::detachRootLayer(*((_QWORD *)this + 9));
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::prepareForAppSuspension(WebKit::RemoteLayerTreeDrawingAreaProxy *this, CALayer *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit *v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 9) + 8);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    v4 = *(WebKit **)(v3 + 40);
  else
    v4 = 0;
  return WebKit::recursivelyMapIOSurfaceBackingStore(v4, a2);
}

BOOL WebKit::RemoteLayerTreeDrawingAreaProxy::hasVisibleContent(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 9) + 8);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_QWORD *)(v2 + 40) != 0;
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::minimumSizeForAutoLayoutDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (!*(_BYTE *)(v2 + 729) && *(_BYTE *)(v2 + 728) && !*((_BYTE *)this + 80))
    WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(this);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::sizeToContentAutoSizeMaximumSizeDidChange(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  if (!*(_BYTE *)(v2 + 729) && *(_BYTE *)(v2 + 728) && !*((_BYTE *)this + 80))
    WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(this);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereAddedToNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 200) + 168))(*(_QWORD *)(v4 + 200), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void sub_1972537D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereRemovedFromNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 200) + 176))(*(_QWORD *)(v4 + 200), a2);
  if (v3)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void sub_197253858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::RemoteLayerTreeHost::layerWillBeRemoved(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v21;
  WebKit::RemoteLayerTreeNode *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  _OWORD *v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  uint64_t *result;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;

  v60 = a3;
  v61 = a4;
  v6 = a1 + 6;
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 6, &v60);
  v8 = (uint64_t)v7;
  v9 = (uint64_t *)a1[6];
  if (v9)
    v9 += 3 * *((unsigned int *)v9 - 1);
  if (v9 != v7)
  {
    objc_msgSend((id)v7[2], "invalidate");
    if (*v6)
    {
      v10 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
      if (v10 == v8)
        goto LABEL_11;
    }
    else
    {
      if (!v8)
        goto LABEL_11;
      v10 = 0;
    }
    if (v10 != v8)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v6, v8);
  }
LABEL_11:
  v12 = a1 + 2;
  v11 = a1[2];
  if (!v11)
    goto LABEL_82;
  v13 = *(_DWORD *)(v11 - 8);
  LODWORD(v59[0]) = -1640531527;
  WORD2(v59[0]) = 0;
  BYTE6(v59[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v59, &v60);
  v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v59) & v13;
  v15 = v11 + 24 * v14;
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD *)v15 == v60 && v17 == v61)
  {
LABEL_23:
    v21 = *v12;
    if (!*v12)
      goto LABEL_28;
  }
  else
  {
    v19 = 1;
    while (v16 | v17)
    {
      v14 = (v14 + v19) & v13;
      v15 = v11 + 24 * v14;
      v16 = *(_QWORD *)v15;
      v17 = *(_QWORD *)(v15 + 8);
      ++v19;
      if (*(_QWORD *)v15 == v60 && v17 == v61)
        goto LABEL_23;
    }
    v21 = *v12;
    if (!*v12)
      goto LABEL_82;
    v15 = v21 + 24 * *(unsigned int *)(v21 - 4);
  }
  v21 += 24 * *(unsigned int *)(v21 - 4);
LABEL_28:
  if (v21 != v15)
  {
    v22 = *(WebKit::RemoteLayerTreeNode **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = 0;
    v23 = *v12;
    if (!*v12 || (v23 += 24 * *(unsigned int *)(v23 - 4), v23 != v15))
    {
      if (v23 != v15)
      {
        *(_OWORD *)v15 = xmmword_1978CF7D0;
        std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)(v15 + 16), 0);
        ++*(_DWORD *)(*v12 - 16);
        v24 = *v12;
        v25 = *v12 ? *(_DWORD *)(v24 - 12) - 1 : -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v12;
        if (*v12)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1 + 2, v28 >> 1);
        }
      }
    }
    if (v22)
    {
      if (*a1)
        v30 = *(_QWORD *)(*a1 + 8);
      else
        v30 = 0;
      WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereRemovedFromNode(v30, (uint64_t)v22);
      v31 = *((_QWORD *)v22 + 3);
      if (v31)
      {
        v32 = a1[3];
        v33 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v32, v31);
        if (v32)
        {
          v34 = (uint64_t *)(v32 + 24 * *(unsigned int *)(v32 - 4));
          if (v34 == v33)
            goto LABEL_54;
        }
        else
        {
          if (!v33)
            goto LABEL_54;
          v34 = 0;
        }
        if (v34 != v33)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 3, v33);
      }
LABEL_54:
      v35 = *((_QWORD *)v22 + 4);
      if (!v35)
        goto LABEL_81;
      v36 = a1[4];
      v37 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v36, v35);
      if (v36)
      {
        if ((uint64_t *)(v36 + 24 * *(unsigned int *)(v36 - 4)) != v37)
        {
LABEL_57:
          v38 = v37[1];
          v39 = v37[2];
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 4, v37);
LABEL_60:
          v59[0] = v38;
          v59[1] = v39;
          if (!v38)
            goto LABEL_81;
          v40 = a1 + 5;
          v41 = a1[5];
          v42 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v41, a2);
          v43 = (_QWORD *)v42;
          v44 = v41 ? v41 + 16 * *(unsigned int *)(v41 - 4) : 0;
          if (v44 == v42)
            goto LABEL_81;
          v45 = (uint64_t *)(v42 + 8);
          v46 = (_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v42 + 8), v59);
          v47 = *v45;
          if (*v45)
          {
            v48 = (_OWORD *)(v47 + 16 * *(unsigned int *)(v47 - 4));
            if (v48 == v46)
              goto LABEL_73;
          }
          else
          {
            if (!v46)
              goto LABEL_74;
            v48 = 0;
          }
          if (v48 != v46)
          {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v43 + 1, v46);
            v47 = *v45;
          }
          if (v47)
          {
LABEL_73:
            if (*(_DWORD *)(v47 - 12))
              goto LABEL_81;
          }
LABEL_74:
          if (*v40)
          {
            v49 = *v40 + 16 * *(unsigned int *)(*v40 - 4);
            if ((_QWORD *)v49 == v43)
              goto LABEL_81;
LABEL_79:
            if ((_QWORD *)v49 != v43)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 5, v43);
            goto LABEL_81;
          }
          if (v43)
          {
            v49 = 0;
            goto LABEL_79;
          }
LABEL_81:
          WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(v22);
          WTF::fastFree(v50, v51);
          goto LABEL_82;
        }
      }
      else if (v37)
      {
        goto LABEL_57;
      }
      v38 = 0;
      v39 = 0;
      goto LABEL_60;
    }
  }
LABEL_82:
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 7, &v60);
  v53 = result;
  v54 = a1[7];
  if (v54)
    v55 = (uint64_t *)(v54 + 24 * *(unsigned int *)(v54 - 4));
  else
    v55 = 0;
  if (v55 != result)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 40) + 8);
    if (v56)
      v57 = v56 - 16;
    else
      v57 = 0;
    result = *(uint64_t **)(v57 + 384);
    if (result)
    {
      result = (uint64_t *)WebKit::VideoPresentationManagerProxy::removeClientForContext((unsigned __int8 *)result, v53[2]);
      v54 = a1[7];
    }
    if (v54)
    {
      v58 = (uint64_t *)(v54 + 24 * *(unsigned int *)(v54 - 4));
      if (v58 == v53)
        return result;
    }
    else
    {
      if (!v53)
        return result;
      v58 = 0;
    }
    if (v58 != v53)
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1 + 7, v53);
  }
  return result;
}

void sub_197253CB4(_Unwind_Exception *a1)
{
  WebKit::RemoteLayerTreeNode *v1;
  WTF *v3;
  void *v4;

  WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(v1);
  WTF::fastFree(v3, v4);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeHost::animationDidStart(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  uint64_t *v26;
  double *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  uint64_t *v39;
  uint64_t v40;
  IPC::Encoder *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!*result)
    return result;
  if (!*(_QWORD *)(*result + 8))
    return result;
  v39 = a2;
  v40 = a3;
  if (!a2)
    return result;
  v9 = result;
  result = (uint64_t *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result + 2, &v39);
  if (!result)
    return result;
  v10 = (void *)result[5];
  if (!v10)
    return result;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v11 = (void *)objc_msgSend(v10, "animationKeys", 0);
  result = (uint64_t *)objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  v12 = result;
  if (!result)
    return result;
  v13 = *(_QWORD *)v35;
LABEL_8:
  v14 = 0;
  while (1)
  {
    if (*(_QWORD *)v35 != v13)
      objc_enumerationMutation(v11);
    v15 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v14);
    if (objc_msgSend(v10, "animationForKey:", v15) == a4)
      break;
    if (v12 == (uint64_t *)++v14)
    {
      result = (uint64_t *)objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
      v12 = result;
      if (result)
        goto LABEL_8;
      return result;
    }
  }
  MEMORY[0x19AEABCC8](&v39, v15);
  result = v39;
  v38 = (WTF::StringImpl *)v39;
  if (!v39)
    return result;
  if (!*((_DWORD *)v39 + 1))
  {
    v38 = 0;
LABEL_26:
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    *(_DWORD *)result -= 2;
    return result;
  }
  if (*v9)
    v17 = *(_QWORD *)(*v9 + 8);
  else
    v17 = 0;
  v39 = a2;
  v40 = a3;
  v19 = *(_QWORD *)(v17 + 16);
  v18 = v17 + 16;
  v20 = (*(uint64_t (**)(uint64_t))(v19 + 56))(v18);
  v21 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v21 = 21;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 528) = v21 + 16;
  *(_QWORD *)(v21 + 536) = v21 + 16;
  *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v21 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
  v41 = (IPC::Encoder *)v21;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v21, (uint64_t *)&v39);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v38);
  v22 = *(_QWORD *)(v21 + 544);
  v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = v23 + 8;
  v25 = *(_QWORD *)(v21 + 552);
  if (v25 < v23 + 8)
  {
    v31 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v32 = v31;
      v31 *= 2;
    }
    while (v32 < v24);
    result = (uint64_t *)mmap(0, v32, 3, 4098, -1, 0);
    if (result == (uint64_t *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v26 = result;
    memcpy(result, *(const void **)(v21 + 528), *(_QWORD *)(v21 + 544));
    v33 = *(void **)(v21 + 528);
    if (v33 != (void *)(v21 + 16))
      munmap(v33, *(_QWORD *)(v21 + 552));
    *(_QWORD *)(v21 + 528) = v26;
    *(_QWORD *)(v21 + 552) = v32;
    v22 = *(_QWORD *)(v21 + 544);
  }
  else
  {
    v26 = *(uint64_t **)(v21 + 528);
  }
  bzero((char *)v26 + v22, v23 - v22);
  *(_QWORD *)(v21 + 544) = v24;
  v27 = (double *)(*(_QWORD *)(v21 + 528) + v23);
  *(_QWORD *)(v21 + 536) = v27 + 1;
  *v27 = a5;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v18 + 32))(v18, &v41, 0);
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v16);
    WTF::fastFree(v29, v30);
  }
  result = (uint64_t *)v38;
  v38 = 0;
  if (result)
    goto LABEL_26;
  return result;
}

void sub_197253FF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, IPC::Encoder *a20)
{
  WTF *v21;
  void *v22;

  if (a20)
  {
    IPC::Encoder::~Encoder(a20, a2);
    WTF::fastFree(v21, v22);
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::RemoteLayerTreeHost::animationDidEnd(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  IPC::Encoder *v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*result)
    return result;
  if (!*(_QWORD *)(*result + 8))
    return result;
  v28 = a2;
  v29 = a3;
  if (!a2)
    return result;
  v7 = result;
  result = (uint64_t *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(result + 2, &v28);
  if (!result)
    return result;
  v8 = (void *)result[5];
  if (!v8)
    return result;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v9 = (void *)objc_msgSend(v8, "animationKeys", 0);
  result = (uint64_t *)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  v10 = result;
  if (!result)
    return result;
  v11 = *(_QWORD *)v24;
  while (2)
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v24 != v11)
        objc_enumerationMutation(v9);
      v13 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v12);
      if (objc_msgSend(v8, "animationForKey:", v13) == a4)
      {
        MEMORY[0x19AEABCC8](&v28, v13);
        result = v28;
        v27 = (WTF::StringImpl *)v28;
        if (!v28)
          return result;
        if (*((_DWORD *)v28 + 1))
        {
          if (*v7)
            v15 = *(_QWORD *)(*v7 + 8);
          else
            v15 = 0;
          v28 = a2;
          v29 = a3;
          v17 = *(_QWORD *)(v15 + 16);
          v16 = v15 + 16;
          v18 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v16);
          v19 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v19 = 20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(v19 + 528) = v19 + 16;
          *(_QWORD *)(v19 + 536) = v19 + 16;
          *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v19 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
          v30 = (IPC::Encoder *)v19;
          IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v19, (uint64_t *)&v28);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)&v27);
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v16 + 32))(v16, &v30, 0);
          v20 = v30;
          v30 = 0;
          if (v20)
          {
            IPC::Encoder::~Encoder(v20, v14);
            WTF::fastFree(v21, v22);
          }
          result = (uint64_t *)v27;
          v27 = 0;
          if (!result)
            return result;
        }
        else
        {
          v27 = 0;
        }
        if (*(_DWORD *)result == 2)
          return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
        *(_DWORD *)result -= 2;
        return result;
      }
      v12 = (uint64_t *)((char *)v12 + 1);
    }
    while (v10 != v12);
    result = (uint64_t *)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    v10 = result;
    if (result)
      continue;
    break;
  }
  return result;
}

void sub_197254288(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, IPC::Encoder *a20)
{
  WTF *v21;
  void *v22;

  if (a20)
  {
    IPC::Encoder::~Encoder(a20, a2);
    WTF::fastFree(v21, v22);
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::recursivelyMapIOSurfaceBackingStore(WebKit *this, CALayer *a2)
{
  CFTypeID v3;
  WTF::MachSendRight *Port;
  uint64_t v5;
  WebCore::IOSurface *v6;
  WTF *v7;
  void *v8;
  void *v9;
  uint64_t result;
  CALayer *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WebCore::IOSurface *v19;
  _BYTE v20[4];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (-[WebKit contents](this, "contents"))
  {
    v3 = CFGetTypeID((CFTypeRef)-[WebKit contents](this, "contents"));
    if (v3 == CAMachPortGetTypeID())
    {
      -[WebKit contents](this, "contents");
      Port = (WTF::MachSendRight *)CAMachPortGetPort();
      WTF::MachSendRight::create(Port);
      WebCore::IOSurface::createFromSendRight();
      if (v19)
        v5 = *((_QWORD *)v19 + 6);
      else
        v5 = 0;
      -[WebKit setContents:](this, "setContents:", v5);
      v6 = v19;
      v19 = 0;
      if (v6)
      {
        WebCore::IOSurface::~IOSurface(v6);
        WTF::fastFree(v7, v8);
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
    }
  }
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v9 = (void *)-[WebKit sublayers](this, "sublayers", 0);
  result = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  v12 = result;
  if (result)
  {
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v9);
        WebKit::recursivelyMapIOSurfaceBackingStore(*(WebKit **)(*((_QWORD *)&v15 + 1) + 8 * v14++), v11);
      }
      while (v12 != v14);
      result = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      v12 = result;
    }
    while (result);
  }
  return result;
}

void sub_197254440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WebCore::IOSurface *a18, int a19, char a20)
{
  WTF *v21;
  void *v22;

  if (a18)
  {
    WebCore::IOSurface::~IOSurface(a18);
    WTF::fastFree(v21, v22);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a20);
  _Unwind_Resume(a1);
}

void WebKit::NetworkProcessProxy::XPCEventHandler::~XPCEventHandler(WebKit::NetworkProcessProxy::XPCEventHandler *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34CB480;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34CB480;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebKit::RemoteAcceleratedEffectStack::~RemoteAcceleratedEffectStack(WebKit::RemoteAcceleratedEffectStack *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::AcceleratedEffectStack::~AcceleratedEffectStack(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebKit::DrawingAreaProxy::displayNominalFramesPerSecond(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::shouldCoalesceVisualEditorStateUpdates(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return 1;
}

uint64_t WebKit::DrawingAreaProxy::shouldSendWheelEventsToEventDispatcher(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::isRemoteLayerTreeDrawingAreaProxyMac(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::isRemoteLayerTreeDrawingAreaProxyIOS(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  return 0;
}

uint64_t WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t result;

  v3 = *(unsigned __int8 **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::{lambda(void *,BEWebContentProcess *,NSError *)#1}::__invoke(uint64_t *a1, const void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  const void *v9;
  int v10;
  __int128 v11;
  char v12;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)a1[5];
  if (v4)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  else
    v5 = 0;
  v6 = a1[6];
  *(_QWORD *)&v11 = v5;
  *((_QWORD *)&v11 + 1) = v6;
  v9 = a2;
  if (a2)
    CFRetain(a2);
  v10 = 0;
  WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(a1[4], &v11);
  ((void (*)(char *, const void **))off_1E34CB768[v10])(&v12, &v9);
  result = (unsigned __int8 *)v11;
  if ((_QWORD)v11)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)v11, v7);
  return result;
}

void sub_1972546AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  unsigned __int8 *v13;

  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  void *v3;
  unsigned __int8 *result;
  WTF::ThreadSafeWeakPtrControlBlock *v5[2];

  v2 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v5 = v2;
  (*(void (**)(uint64_t, WTF::ThreadSafeWeakPtrControlBlock **))(*(_QWORD *)a1 + 16))(a1, v5);
  result = (unsigned __int8 *)v5[0];
  v5[0] = 0;
  if (result)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  return result;
}

void sub_197254744(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::ThreadSafeWeakPtrControlBlock *a9)
{
  if (a9)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)a9, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t result;

  v3 = *(unsigned __int8 **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::{lambda(void *,BENetworkingProcess *,NSError *)#1}::__invoke(uint64_t *a1, const void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  const void *v9;
  int v10;
  __int128 v11;
  char v12;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)a1[5];
  if (v4)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  else
    v5 = 0;
  v6 = a1[6];
  *(_QWORD *)&v11 = v5;
  *((_QWORD *)&v11 + 1) = v6;
  v9 = a2;
  if (a2)
    CFRetain(a2);
  v10 = 1;
  WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(a1[4], &v11);
  ((void (*)(char *, const void **))off_1E34CB768[v10])(&v12, &v9);
  result = (unsigned __int8 *)v11;
  if ((_QWORD)v11)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)v11, v7);
  return result;
}

void sub_197254860(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  unsigned __int8 *v13;

  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t result;

  v3 = *(unsigned __int8 **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::{lambda(void *,BERenderingProcess *,NSError *)#1}::__invoke(uint64_t *a1, const void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 *result;
  const void *v9;
  int v10;
  __int128 v11;
  char v12;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)a1[5];
  if (v4)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  else
    v5 = 0;
  v6 = a1[6];
  *(_QWORD *)&v11 = v5;
  *((_QWORD *)&v11 + 1) = v6;
  v9 = a2;
  if (a2)
    CFRetain(a2);
  v10 = 2;
  WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)>::operator()(a1[4], &v11);
  ((void (*)(char *, const void **))off_1E34CB768[v10])(&v12, &v9);
  result = (unsigned __int8 *)v11;
  if ((_QWORD)v11)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)v11, v7);
  return result;
}

void sub_1972549AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13)
{
  unsigned __int8 *v13;

  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_0)::{lambda(void *,NSNotification *)#1}::__invoke(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationDidEnterBackground>(result, (uint64_t)&v2, 0, 0);
    }
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSNotification *)>::fromCallable<WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1>(WebKit::NetworkProcessProxy::addBackgroundStateObservers(void)::$_1)::{lambda(void *,NSNotification *)#1}::__invoke(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v2 = 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationWillEnterForeground>(result, (uint64_t)&v2, 0, 0);
    }
  }
  return result;
}

uint64_t WebCore::AcceleratedEffectValues::AcceleratedEffectValues(uint64_t this, const WebCore::AcceleratedEffectValues *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  int v30;
  _DWORD *v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  int v36;
  _DWORD *v37;
  unsigned int v38;
  int v39;

  v3 = this;
  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *(_OWORD *)(this + 16) = v4;
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(this + 77) = *(_OWORD *)((char *)a2 + 77);
  *(_OWORD *)(this + 48) = v6;
  *(_OWORD *)(this + 64) = v7;
  *(_OWORD *)(this + 32) = v5;
  *(_DWORD *)(this + 96) = 0;
  v8 = (_DWORD *)(this + 96);
  *(_WORD *)(this + 101) = 0;
  v9 = *((unsigned __int8 *)a2 + 100);
  *(_BYTE *)(this + 100) = v9;
  *(_BYTE *)(this + 101) = *((_BYTE *)a2 + 101);
  if (v9 <= 0xD)
  {
    v10 = 1 << v9;
    if ((v10 & 0x7FC) != 0)
    {
      *(_BYTE *)(this + 102) = *((_BYTE *)a2 + 102);
      *v8 = *((_DWORD *)a2 + 24);
    }
    else if ((v10 & 0x3003) != 0)
    {
      *v8 = 0;
    }
    else
    {
      *v8 = *((_DWORD *)a2 + 24);
      this = WebCore::Length::ref((WebCore::Length *)(this + 96));
    }
  }
  *(_DWORD *)(v3 + 104) = 0;
  v11 = (_DWORD *)(v3 + 104);
  *(_WORD *)(v3 + 109) = 0;
  v12 = *((unsigned __int8 *)a2 + 108);
  *(_BYTE *)(v3 + 108) = v12;
  *(_BYTE *)(v3 + 109) = *((_BYTE *)a2 + 109);
  if (v12 <= 0xD)
  {
    v13 = 1 << v12;
    if ((v13 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 110) = *((_BYTE *)a2 + 110);
      *v11 = *((_DWORD *)a2 + 26);
    }
    else if ((v13 & 0x3003) != 0)
    {
      *v11 = 0;
    }
    else
    {
      *v11 = *((_DWORD *)a2 + 26);
      this = WebCore::Length::ref((WebCore::Length *)(v3 + 104));
    }
  }
  v14 = *((_BYTE *)a2 + 112);
  v15 = *((unsigned int *)a2 + 33);
  *(_QWORD *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 112) = v14;
  *(_QWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 132) = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v3 + 128) = v15;
    *(_QWORD *)(v3 + 120) = v16;
    v17 = *((unsigned int *)a2 + 33);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)*((_QWORD *)a2 + 15);
      v19 = 8 * v17;
      do
      {
        v20 = *v18++;
        ++*(_DWORD *)(v20 + 8);
        *v16++ = v20;
        v19 -= 8;
      }
      while (v19);
    }
  }
  v21 = *((_QWORD *)a2 + 17);
  if (v21)
    ++*(_DWORD *)(v21 + 8);
  *(_QWORD *)(v3 + 136) = v21;
  v22 = *((_QWORD *)a2 + 18);
  if (v22)
    ++*(_DWORD *)(v22 + 8);
  *(_QWORD *)(v3 + 144) = v22;
  v23 = *((_QWORD *)a2 + 19);
  if (v23)
    ++*(_DWORD *)(v23 + 8);
  *(_QWORD *)(v3 + 152) = v23;
  v24 = *((_QWORD *)a2 + 20);
  if (v24)
    ++*(_DWORD *)(v24 + 8);
  *(_DWORD *)(v3 + 168) = 0;
  v25 = (_DWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 160) = v24;
  *(_WORD *)(v3 + 173) = 0;
  v26 = *((unsigned __int8 *)a2 + 172);
  *(_BYTE *)(v3 + 172) = v26;
  *(_BYTE *)(v3 + 173) = *((_BYTE *)a2 + 173);
  if (v26 <= 0xD)
  {
    v27 = 1 << v26;
    if ((v27 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 174) = *((_BYTE *)a2 + 174);
      *v25 = *((_DWORD *)a2 + 42);
    }
    else if ((v27 & 0x3003) != 0)
    {
      *v25 = 0;
    }
    else
    {
      *v25 = *((_DWORD *)a2 + 42);
      WebCore::Length::ref((WebCore::Length *)(v3 + 168));
    }
  }
  *(_DWORD *)(v3 + 176) = 0;
  v28 = (_DWORD *)(v3 + 176);
  *(_WORD *)(v3 + 181) = 0;
  v29 = *((unsigned __int8 *)a2 + 180);
  *(_BYTE *)(v3 + 180) = v29;
  *(_BYTE *)(v3 + 181) = *((_BYTE *)a2 + 181);
  if (v29 <= 0xD)
  {
    v30 = 1 << v29;
    if ((v30 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 182) = *((_BYTE *)a2 + 182);
      *v28 = *((_DWORD *)a2 + 44);
    }
    else if ((v30 & 0x3003) != 0)
    {
      *v28 = 0;
    }
    else
    {
      *v28 = *((_DWORD *)a2 + 44);
      WebCore::Length::ref((WebCore::Length *)(v3 + 176));
    }
  }
  *(_DWORD *)(v3 + 184) = 0;
  v31 = (_DWORD *)(v3 + 184);
  *(_WORD *)(v3 + 189) = 0;
  v32 = *((unsigned __int8 *)a2 + 188);
  *(_BYTE *)(v3 + 188) = v32;
  *(_BYTE *)(v3 + 189) = *((_BYTE *)a2 + 189);
  if (v32 <= 0xD)
  {
    v33 = 1 << v32;
    if ((v33 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 190) = *((_BYTE *)a2 + 190);
      *v31 = *((_DWORD *)a2 + 46);
    }
    else if ((v33 & 0x3003) != 0)
    {
      *v31 = 0;
    }
    else
    {
      *v31 = *((_DWORD *)a2 + 46);
      WebCore::Length::ref((WebCore::Length *)(v3 + 184));
    }
  }
  *(_DWORD *)(v3 + 192) = 0;
  v34 = (_DWORD *)(v3 + 192);
  *(_WORD *)(v3 + 197) = 0;
  v35 = *((unsigned __int8 *)a2 + 196);
  *(_BYTE *)(v3 + 196) = v35;
  *(_BYTE *)(v3 + 197) = *((_BYTE *)a2 + 197);
  if (v35 <= 0xD)
  {
    v36 = 1 << v35;
    if ((v36 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 198) = *((_BYTE *)a2 + 198);
      *v34 = *((_DWORD *)a2 + 48);
    }
    else if ((v36 & 0x3003) != 0)
    {
      *v34 = 0;
    }
    else
    {
      *v34 = *((_DWORD *)a2 + 48);
      WebCore::Length::ref((WebCore::Length *)(v3 + 192));
    }
  }
  *(_DWORD *)(v3 + 200) = 0;
  v37 = (_DWORD *)(v3 + 200);
  *(_WORD *)(v3 + 205) = 0;
  v38 = *((unsigned __int8 *)a2 + 204);
  *(_BYTE *)(v3 + 204) = v38;
  *(_BYTE *)(v3 + 205) = *((_BYTE *)a2 + 205);
  if (v38 <= 0xD)
  {
    v39 = 1 << v38;
    if ((v39 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 206) = *((_BYTE *)a2 + 206);
      *v37 = *((_DWORD *)a2 + 50);
    }
    else if ((v39 & 0x3003) != 0)
    {
      *v37 = 0;
    }
    else
    {
      *v37 = *((_DWORD *)a2 + 50);
      WebCore::Length::ref((WebCore::Length *)(v3 + 200));
    }
  }
  *(_QWORD *)(v3 + 208) = *((_QWORD *)a2 + 26);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3 + 216, (uint64_t)a2 + 216);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3 + 232, (uint64_t)a2 + 232);
  return v3;
}

void sub_197254F9C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Length *a10)
{
  uint64_t v10;
  WebCore::Length *v11;
  uint64_t v12;
  WebCore::Length *v13;
  WebCore::Length *v14;
  WebCore::Length *v15;
  WebCore::Length *v16;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  if (*(_BYTE *)(v10 + 196) == 11)
    WebCore::Length::deref(v16);
  if (*(_BYTE *)(v10 + 188) == 11)
    WebCore::Length::deref(v15);
  if (*(_BYTE *)(v10 + 180) == 11)
    WebCore::Length::deref(v14);
  if (*(_BYTE *)(v10 + 172) == 11)
    WebCore::Length::deref(v13);
  v18 = *(_DWORD **)(v10 + 160);
  *(_QWORD *)(v10 + 160) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *(_DWORD **)(v10 + 152);
  *(_QWORD *)(v10 + 152) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = *(_DWORD **)(v10 + 144);
  *(_QWORD *)(v10 + 144) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *(_DWORD **)(v10 + 136);
  *(_QWORD *)(v10 + 136) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, a2);
  if (*(_BYTE *)(v10 + 108) == 11)
    WebCore::Length::deref(v11);
  if (*(_BYTE *)(v10 + 100) == 11)
    WebCore::Length::deref(a10);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeHost *std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100](WebKit::RemoteLayerTreeHost **a1, WebKit::RemoteLayerTreeHost *a2)
{
  WebKit::RemoteLayerTreeHost *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLayerTreeHost::~RemoteLayerTreeHost(result, a2);
    return (WebKit::RemoteLayerTreeHost *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (unsigned int **)(a1 + 48 * i);
      v6 = *v5;
      if (*v5 != (unsigned int *)-1)
      {
        *v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

__n128 std::__optional_storage_base<WebCore::RequestedScrollData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RequestedScrollData,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;
  __int128 v4;

  if (*(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44))
  {
    if (*(_BYTE *)(a1 + 44))
    {
      result = *(__n128 *)a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
      *(__n128 *)a1 = result;
      if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
      {
        if (*(_BYTE *)(a1 + 40))
        {
          *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
          v3 = *(_QWORD *)(a2 + 24);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 24) = v3;
          *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
        }
      }
      else if (*(_BYTE *)(a1 + 40))
      {
        *(_BYTE *)(a1 + 40) = 0;
      }
      else
      {
        result = *(__n128 *)(a2 + 20);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(__n128 *)(a1 + 20) = result;
        *(_BYTE *)(a1 + 40) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 44))
  {
    *(_BYTE *)(a1 + 44) = 0;
  }
  else
  {
    result = *(__n128 *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
    *(__n128 *)a1 = result;
    *(_OWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 44) = 1;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  const void *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (const void **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (const void *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(v5);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::RemoteLayerTreeNode **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::RemoteLayerTreeNode **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteLayerTreeNode *)-1)
        std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100](v4, 0);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteLayerTreeNode *std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100](WebKit::RemoteLayerTreeNode **a1, WebKit::RemoteLayerTreeNode *a2)
{
  WebKit::RemoteLayerTreeNode *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(result);
    return (WebKit::RemoteLayerTreeNode *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebCore::AcceleratedEffectStack::~AcceleratedEffectStack(WebCore::AcceleratedEffectStack *this, void *a2)
{
  WebCore::AcceleratedEffectValues *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = MEMORY[0x1E0DD8FC0] + 16;
  v3 = (WebCore::AcceleratedEffectStack *)((char *)this + 16);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, a2);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v4);
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v3, v5);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0,void,WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *>::call(uint64_t a1, uint64_t a2, WebKit::ExtensionProcess *a3, uint64_t a4, uint64_t a5, void *a6)
{
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  uint64_t v8;
  NSObject *v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *result;
  void *v15;
  _QWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const void *v26;
  WTF::ThreadSafeWeakPtrControlBlock *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  unsigned int *v32;
  char *v33;
  char *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  void *aBlock;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  CFTypeRef cf;
  _BYTE buf[32];
  WTF::StringImpl *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v7 = *(WTF::ThreadSafeWeakPtrControlBlock **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (a6)
  {
    v10 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_FAULT))
    {
      MEMORY[0x19AEABCC8](&v43, objc_msgSend(a6, "localizedDescription"));
      WTF::String::utf8();
      if (cf)
        v33 = (char *)cf + 16;
      else
        v33 = 0;
      MEMORY[0x19AEABCC8](&v41, objc_msgSend(a6, "localizedFailureReason"));
      WTF::String::utf8();
      if (v42)
        v34 = (char *)v42 + 16;
      else
        v34 = 0;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v33;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v34;
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "Error launching process, description '%s', reason '%s'", buf, 0x16u);
      v36 = v42;
      v42 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
          WTF::fastFree(v36, v35);
        else
          --*(_DWORD *)v36;
      }
      v37 = v41;
      v41 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (WTF *)cf;
      cf = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
          WTF::fastFree(v38, v35);
        else
          --*(_DWORD *)v38;
      }
      v39 = v43;
      v43 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    if (v7)
      v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
    else
      v11 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34CB858;
    v12[1] = v11;
    v12[2] = v8;
    *(_QWORD *)buf = v12;
    WTF::callOnMainRunLoop();
    v13 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = (unsigned __int8 *)WebKit::ExtensionProcess::invalidate(a3);
  }
  else
  {
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v18 = 1;
    v18[1] = 0;
    v18[2] = 0;
    v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v19 += 2;
    v43 = v19;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = (WTF::StringImpl *)cf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    aBlock = 0;
    v41 = (WTF::StringImpl *)cf;
    cf = 0;
    WebKit::AssertionCapability::AssertionCapability(buf, (uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&cf, (uint64_t *)&aBlock);
    if (aBlock)
      (*(void (**)(void *))(*(_QWORD *)aBlock + 8))(aBlock);
    if (cf)
      (*(void (**)(CFTypeRef))(*(_QWORD *)cf + 8))(cf);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v20);
      else
        *(_DWORD *)v41 -= 2;
    }
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v20);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v20);
      else
        *(_DWORD *)v43 -= 2;
    }
    aBlock = _Block_copy(&__block_literal_global_26);
    WebKit::ExtensionProcess::grantCapability((uint64_t)a3, (uint64_t)&buf[8], (uint64_t)&aBlock, &cf);
    _Block_release(aBlock);
    WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)(v18 + 1), (uint64_t *)&cf);
    v21 = cf;
    cf = 0;
    if (v21)
      CFRelease(v21);
    _Block_release(v48);
    _Block_release(v47);
    v23 = v46;
    v46 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *(WTF::StringImpl **)&buf[24];
    *(_QWORD *)&buf[24] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(WTF::StringImpl **)&buf[16];
    *(_QWORD *)&buf[16] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v22);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(const void **)&buf[8];
    *(_QWORD *)buf = off_1E34AB458;
    *(_QWORD *)&buf[8] = 0;
    if (v26)
      CFRelease(v26);
    if (v7)
      v27 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
    else
      v27 = 0;
    *(_QWORD *)buf = v27;
    *(_QWORD *)&buf[8] = v8;
    *(_QWORD *)&buf[16] = a4;
    *(_QWORD *)&buf[24] = a5;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v46, (uint64_t)a3);
    v48 = v18;
    v28 = (char *)WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v28 = &off_1E34CB880;
    *((_QWORD *)v28 + 1) = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *((_QWORD *)v28 + 2) = v29;
    *(_OWORD *)(v28 + 24) = *(_OWORD *)&buf[16];
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v28 + 40), (uint64_t)&v46);
    v30 = v48;
    v48 = 0;
    *((_QWORD *)v28 + 7) = v30;
    cf = v28;
    WTF::callOnMainRunLoop();
    v31 = cf;
    cf = 0;
    if (v31)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v31 + 8))(v31);
    v32 = (unsigned int *)v48;
    v48 = 0;
    if (v32)
      WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v32);
    if ((_DWORD)v47 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34CB768[v47])(&v43, &v46);
    LODWORD(v47) = -1;
    result = *(unsigned __int8 **)buf;
    *(_QWORD *)buf = 0;
    if (result)
      result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v15);
  }
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)v7, v15);
  return result;
}

void sub_197255924(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, CFTypeRef cf, WTF::ThreadSafeWeakPtrControlBlock *a15, CFTypeRef a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, void *a20,unsigned int *aBlock)
{
  unsigned __int8 *v21;
  uint64_t v22;
  CFTypeRef v24;
  unsigned int *v25;
  unsigned __int8 *v26;

  v24 = cf;
  cf = 0;
  if (v24)
    (*(void (**)(CFTypeRef))(*(_QWORD *)v24 + 8))(v24);
  v25 = aBlock;
  aBlock = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v25);
  if ((_DWORD)a20 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E34CB768[a20])(&a13, v22);
  LODWORD(a20) = -1;
  v26 = (unsigned __int8 *)a15;
  a15 = 0;
  if (v26)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, a2);
  if (v21)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v21, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34CB858;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CB858;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  WTF::Lock *v1;
  void *v2;
  unsigned __int8 **v3;
  WebKit::ProcessLauncher *v4;

  v1 = (WTF::Lock *)*((_QWORD *)result + 1);
  if (v1)
  {
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v4, v1, *((_QWORD *)result + 2));
    v3 = (unsigned __int8 **)v4;
    if (v4)
    {
      if (!*((_BYTE *)v4 + 64))
      {
        *((_BYTE *)v4 + 64) = 1;
        WebKit::ProcessLauncher::launchProcess((WebKit::ProcessLauncher *)v3);
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v3[1], v2);
    }
  }
  return result;
}

void sub_197255D00(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  char v7;

  *(_QWORD *)a1 = &off_1E34CB880;
  v3 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34CB768[v4])(&v7, a1 + 40);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  char v7;

  *(_QWORD *)this = &off_1E34CB880;
  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34CB768[v4])(&v7, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  v5 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::launchProcess(void)::$_0::operator() const(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)::{lambda(void)#2},void>::call(_QWORD *a1)
{
  WTF::Lock *v2;
  uint64_t v3;
  WebKit::ExtensionProcess *v4;
  id v5;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  uint64_t v10;
  unsigned int *v11;
  const char *v12;
  ipc_space_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  xpc_object_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  xpc_object_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  const char *v41;
  void *v42;
  WTF *v43;
  xpc_object_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;
  char *v50;
  WTF *v51;
  void *v52;
  const char *v53;
  void *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  const char *v57;
  void *v58;
  WTF *v59;
  WTF::StringImpl *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  xpc_object_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  const char *v73;
  const char *v74;
  void *v75;
  WTF *v76;
  WTF *v77;
  WTF::ThreadSafeWeakPtrControlBlock *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _xpc_connection_s *v83;
  WTF::StringImpl *v84;
  xpc_object_t v85;
  id v86;
  uint64_t v87;
  char *handler;
  uint64_t v89;
  void (*v90)(uint64_t, id);
  _QWORD v91[2];
  mach_port_name_t v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  char *bytes;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  WTF::StringImpl *v100;
  mach_port_t previous;
  mach_port_name_t name;
  _QWORD v103[4];

  v103[2] = *MEMORY[0x1E0C80C00];
  v2 = (WTF::Lock *)a1[1];
  if (!v2)
  {
    v3 = 0;
    goto LABEL_10;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v87, v2, a1[2]);
  v3 = v87;
  if (!v87 || !*(_QWORD *)(v87 + 16))
  {
LABEL_10:
    WebKit::ExtensionProcess::invalidate((WebKit::ExtensionProcess *)(a1 + 5));
    if (!v3)
      return;
    goto LABEL_11;
  }
  v4 = (WebKit::ExtensionProcess *)(a1 + 5);
  WebKit::ExtensionProcess::makeLibXPCConnection((WebKit::ExtensionProcess *)(a1 + 5), &v86);
  v5 = v86;
  if (!v86)
  {
    v9 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      LOWORD(handler) = 0;
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Failed to make libxpc connection for process", (uint8_t *)&handler, 2u);
    }
    WebKit::ExtensionProcess::invalidate(v4);
    handler = 0;
    v89 = 0;
    WebKit::ProcessLauncher::didFinishLaunchingProcess(v3, 0, (uint64_t)&handler);
    goto LABEL_154;
  }
  v86 = 0;
  v6 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v5;
  if (v6)

  v7 = v3 + 40;
  if (*(_BYTE *)(v3 + 56))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>>(v7, (uint64_t)(a1 + 5));
  }
  else
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<BEWebContentProcess>,WTF::RetainPtr<BENetworkingProcess>,WTF::RetainPtr<BERenderingProcess>>,(std::__variant_detail::_Trait)1>::__move_constructor(v7, (uint64_t)(a1 + 5));
    *(_BYTE *)(v3 + 56) = 1;
  }
  v10 = a1[7];
  a1[7] = 0;
  v11 = *(unsigned int **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v10;
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v11);
  v12 = (const char *)a1[3];
  v103[0] = 0;
  v103[1] = 0;
  MEMORY[0x19AEBA3F8](v103);
  xpc_connection_set_oneshot_instance();
  v85 = xpc_dictionary_create(0, 0, 0);
  _CFBundleSetupXPCBootstrap();
  name = 0;
  v13 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  if (mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name))
  {
    __break(0xC471u);
    return;
  }
  mach_port_insert_right(*v13, name, name, 0x14u);
  previous = 0;
  mach_port_request_notification(*v13, name, 70, 0, name, 0x15u, &previous);
  v100 = 0;
  MEMORY[0x19AEABCC8](&handler, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
  v15 = (WTF::StringImpl *)handler;
  handler = 0;
  v16 = v100;
  v100 = v15;
  if (v16)
  {
    v17 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 != 2)
      goto LABEL_24;
    WTF::StringImpl::destroy(v16, v14);
    v16 = (WTF::StringImpl *)handler;
    handler = 0;
    if (!v16)
      goto LABEL_25;
    v17 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v18);
    else
LABEL_24:
      *(_DWORD *)v16 = v17;
  }
LABEL_25:
  v19 = xpc_dictionary_create(0, 0, 0);
  v20 = (uint64_t *)(v3 + 88);
  v21 = *(_QWORD *)(v3 + 88);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 - 8);
    v23 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>((uint64_t)"OverrideLanguages", 0x11uLL);
    v24 = 0;
    v25 = (v23 ^ (8 * v23)) + ((v23 ^ (8 * v23)) >> 5);
    v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
    v27 = (v26 ^ (v26 << 10)) & 0xFFFFFF;
    if (!v27)
      v27 = 0x800000;
    while (1)
    {
      v28 = v27 & v22;
      v29 = *(_QWORD *)(v21 + 16 * v28);
      if (!v29)
      {
        v30 = *v20;
        if (!*v20)
          goto LABEL_57;
        v31 = *(unsigned int *)(v30 - 4);
        v32 = v30 + 16 * v31;
        goto LABEL_37;
      }
      if (v29 != -1 && (MEMORY[0x19AEABBCC](v29, "OverrideLanguages", 17) & 1) != 0)
        break;
      v27 = ++v24 + v28;
    }
    v32 = v21 + 16 * v28;
    v30 = *v20;
    if (!*v20)
      goto LABEL_38;
    v31 = *(unsigned int *)(v30 - 4);
LABEL_37:
    v30 += 16 * v31;
LABEL_38:
    if (v30 != v32)
    {
      v33 = xpc_array_create(0, 0);
      v34 = *(_QWORD *)(v32 + 8);
      if (v34)
      {
        v35 = *(unsigned int *)(v34 + 16);
        v36 = *(char **)(v34 + 8);
        LODWORD(v34) = *(_DWORD *)(v34 + 4);
        v37 = (v35 >> 2) & 1;
      }
      else
      {
        v36 = 0;
        v37 = 1;
      }
      handler = v36;
      v89 = v34 | (unint64_t)(v37 << 32);
      LOWORD(v90) = 44;
      BYTE2(v90) = 0;
      bytes = (char *)&handler;
      v97 = 0;
      v99 = (_DWORD)v34 == 0;
      WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&bytes);
      v38 = v89;
      while (v97 != v38 || !v99)
      {
        v94 = (WTF *)WTF::StringView::substring(bytes, v97, v98);
        v95 = v40;
        WTF::StringView::utf8();
        if (v93)
          v41 = (char *)v93 + 16;
        else
          v41 = 0;
        xpc_array_set_string(v33, 0xFFFFFFFFFFFFFFFFLL, v41);
        v43 = v93;
        v93 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            WTF::fastFree(v43, v42);
          else
            --*(_DWORD *)v43;
        }
        WTF::StringView::SplitResult::Iterator::operator++();
      }
      xpc_dictionary_set_value(v19, "OverrideLanguages", v33);
      if (v33)

    }
  }
LABEL_57:
  v44 = xpc_dictionary_create(0, 0, 0);
  v45 = getenv("HOME");
  if (v45)
    xpc_dictionary_set_string(v44, "HOME", v45);
  v46 = getenv("CFFIXED_USER_HOME");
  if (v46)
    xpc_dictionary_set_string(v44, "CFFIXED_USER_HOME", v46);
  v47 = getenv("TMPDIR");
  if (v47)
    xpc_dictionary_set_string(v44, "TMPDIR", v47);
  xpc_dictionary_set_value(v19, "ContainerEnvironmentVariables", v44);
  v48 = *(_QWORD *)(v3 + 16);
  if (v48)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48))
      xpc_dictionary_set_BOOL(v19, "configure-jsc-for-testing", 1);
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16)) & 1) == 0)
      xpc_dictionary_set_BOOL(v19, "disable-jit", 1);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16)))
      xpc_dictionary_set_BOOL(v19, "enable-shared-array-buffer", 1);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 48))(*(_QWORD *)(v3 + 16)))
      xpc_dictionary_set_BOOL(v19, "enable-captive-portal-mode", 1);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 56))(*(_QWORD *)(v3 + 16)))
      xpc_dictionary_set_BOOL(v19, "disable-jit-cage", 1);
  }
  xpc_dictionary_set_string(v19, "message-name", "bootstrap");
  xpc_dictionary_set_mach_send();
  if (v100 && *((_DWORD *)v100 + 1))
  {
    WTF::String::utf8();
    v49 = 0;
    if (v94)
      v50 = (char *)v94 + 16;
    else
      v50 = 0;
  }
  else
  {
    v50 = *_NSGetProgname();
    v49 = 1;
  }
  xpc_dictionary_set_string(v19, "client-identifier", v50);
  if ((v49 & 1) == 0)
  {
    v51 = v94;
    v94 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
        v51 = (WTF *)WTF::fastFree(v51, v52);
      else
        --*(_DWORD *)v51;
    }
  }
  WebCore::applicationBundleIdentifier(v51);
  WTF::String::utf8();
  if (handler)
    v53 = handler + 16;
  else
    v53 = 0;
  xpc_dictionary_set_string(v19, "client-bundle-identifier", v53);
  v55 = (WTF *)handler;
  handler = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::fastFree(v55, v54);
    else
      --*(_DWORD *)v55;
  }
  v56 = (WTF::StringImpl *)bytes;
  bytes = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
    else
      *(_DWORD *)v56 -= 2;
  }
  WTF::String::number(*(WTF::String **)(v3 + 80));
  WTF::String::utf8();
  if (handler)
    v57 = handler + 16;
  else
    v57 = 0;
  xpc_dictionary_set_string(v19, "process-identifier", v57);
  v59 = (WTF *)handler;
  handler = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 1)
      WTF::fastFree(v59, v58);
    else
      --*(_DWORD *)v59;
  }
  v60 = (WTF::StringImpl *)bytes;
  bytes = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
  v62 = v61;
  if (v61)
    CFRetain(v61);
  xpc_dictionary_set_string(v19, "ui-process-name", (const char *)objc_msgSend(v62, "UTF8String"));
  xpc_dictionary_set_string(v19, "service-name", v12);
  if (!*(_DWORD *)(v3 + 72))
    xpc_dictionary_set_BOOL(v19, "disable-logging", 1);
  {
    v63 = WebKit::AuxiliaryProcess::isSystemWebKit(void)::$_0::operator()();
    WebKit::AuxiliaryProcess::isSystemWebKit(void)::isSystemWebKit = v63;
    if ((v63 & 1) != 0)
      goto LABEL_114;
    goto LABEL_113;
  }
  if (!WebKit::AuxiliaryProcess::isSystemWebKit(void)::isSystemWebKit)
  {
LABEL_113:
    xpc_dictionary_set_fd(v19, "stdout", 1);
    xpc_dictionary_set_fd(v19, "stderr", 2);
  }
LABEL_114:
  v64 = WTF::sdkAlignedBehaviors((WTF *)v63);
  v65 = *(const char **)v64;
  v97 = *(_DWORD *)(v64 + 8);
  bytes = (char *)v65;
  xpc_dictionary_set_data(v19, "client-sdk-aligned-behaviors", &bytes, 0xCuLL);
  v66 = xpc_dictionary_create(0, 0, 0);
  v67 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 88));
  v68 = v67;
  v70 = v69;
  if (*v20)
    v71 = *v20 + 16 * *(unsigned int *)(*v20 - 4);
  else
    v71 = 0;
  if ((_QWORD *)v71 != v67)
  {
    do
    {
      WTF::String::utf8();
      v72 = handler;
      WTF::String::utf8();
      if (v72)
        v73 = v72 + 16;
      else
        v73 = 0;
      if (v93)
        v74 = (char *)v93 + 16;
      else
        v74 = 0;
      xpc_dictionary_set_string(v66, v73, v74);
      v76 = v93;
      v93 = 0;
      if (v76)
      {
        if (*(_DWORD *)v76 == 1)
          WTF::fastFree(v76, v75);
        else
          --*(_DWORD *)v76;
      }
      v77 = (WTF *)handler;
      handler = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1)
          WTF::fastFree(v77, v75);
        else
          --*(_DWORD *)v77;
      }
      while (1)
      {
        v68 += 2;
        if (v68 == v70)
          break;
        if ((unint64_t)(*v68 + 1) > 1)
          goto LABEL_136;
      }
      v68 = v70;
LABEL_136:
      ;
    }
    while (v68 != (_QWORD *)v71);
  }
  xpc_dictionary_set_value(v19, "extra-initialization-data", v66);
  v78 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v3 + 8);
  if (v78)
    v78 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v78);
  handler = (char *)v78;
  v89 = v3;
  LODWORD(v90) = name;
  WTF::CString::CString((WTF::CString *)v91, v12);
  v79 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v79 = &off_1E34CB8A8;
  *(_QWORD *)(v79 + 8) = handler;
  *(_QWORD *)(v79 + 16) = v89;
  *(_DWORD *)(v79 + 24) = (_DWORD)v90;
  *(_QWORD *)(v79 + 32) = v91[0];
  v80 = *(_QWORD *)(v3 + 16);
  handler = (char *)v79;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v80 + 64))(&v89, v80);
  v81 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v81 = &off_1E34CB8D0;
  v81[1] = handler;
  v81[2] = v89;
  v82 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v82 = MEMORY[0x1E0C809A0];
  v82[1] = 50331650;
  v82[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke;
  v82[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::descriptor;
  v82[4] = v81;
  xpc_connection_set_event_handler(*(xpc_connection_t *)(v3 + 24), v82);
  xpc_connection_resume(*(xpc_connection_t *)(v3 + 24));
  if (*(_BYTE *)(v3 + 97))
  {
    ((void (*)(_QWORD *, _QWORD))v82[2])(v82, 0);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 8));
    v83 = *(_xpc_connection_s **)(v3 + 24);
    handler = (char *)MEMORY[0x1E0C809B0];
    v89 = 3221225472;
    v90 = ___ZN6WebKit15ProcessLauncher22finishLaunchingProcessEN3WTF12ASCIILiteralE_block_invoke;
    v91[0] = &__block_descriptor_44_e33_v16__0__NSObject_OS_xpc_object__8l;
    v91[1] = v3;
    v92 = name;
    xpc_connection_send_message_with_reply(v83, v19, MEMORY[0x1E0C80D38], &handler);
  }
  _Block_release(v82);
  if (v66)

  if (v62)
    CFRelease(v62);
  if (v44)

  if (v19)
  v84 = v100;
  v100 = 0;
  if (!v84)
  {
LABEL_152:
    if (!v85)
      goto LABEL_154;
    goto LABEL_153;
  }
  if (*(_DWORD *)v84 != 2)
  {
    *(_DWORD *)v84 -= 2;
    goto LABEL_152;
  }
  WTF::StringImpl::destroy(v84, v8);
  if (v85)
LABEL_153:

LABEL_154:
  if (v86)

  v3 = v87;
  if (v87)
LABEL_11:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), v8);
}

void sub_197256970(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, WTF *a19, WTF *a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  void *v25;

  if (v25)

  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a10)

  if (a11)
  if (a12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a12 + 8), a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_1,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  unsigned __int8 *v4;

  *a1 = &off_1E34CB8A8;
  v3 = (WTF *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_1,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned __int8 *v4;

  *(_QWORD *)this = &off_1E34CB8A8;
  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_1,void,NSObject  {objcproto13OS_xpc_object}*>::call(unsigned __int8 *result)
{
  WTF::Lock *v1;
  unsigned __int8 *v2;
  void *v3;
  uint64_t v4;
  _xpc_connection_s *v5;
  void *v6;
  _QWORD v7[2];
  uint64_t v8;

  v1 = (WTF::Lock *)*((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v1, *((_QWORD *)result + 2));
    v4 = v8;
    if (v8)
    {
      if (*(_BYTE *)(v8 + 104))
      {
        WTF::deallocateSendRightSafely((WTF *)*((unsigned int *)v2 + 6));
        mach_port_mod_refs(*MEMORY[0x1E0C83DA0], *((_DWORD *)v2 + 6), 1u, -1);
        v5 = *(_xpc_connection_s **)(v4 + 24);
        if (v5)
        {
          xpc_connection_cancel(v5);
          v6 = *(void **)(v4 + 24);
          if (v6)

        }
        *(_QWORD *)(v4 + 24) = 0;
        v7[0] = 0;
        v7[1] = 0;
        WebKit::ProcessLauncher::didFinishLaunchingProcess(v4, 0, (uint64_t)v7);
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), v3);
    }
  }
  return result;
}

void sub_197256DCC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E34CB8D0;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34CB8D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(this, a2);
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2,void,NSObject  {objcproto13OS_xpc_object}*>::call(WTF::RunLoop *a1, id a2)
{
  WTF::RunLoop *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  id v8;
  WTF::RunLoop *v9;
  uint64_t v10;
  id v11;
  WTF::RunLoop *v12;
  WTF::RunLoop *v13;

  if (!a2)
  {
    WTF::RunLoop::main(a1);
    v10 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
LABEL_10:
    v12 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v12 = &off_1E34CB8F8;
    *((_QWORD *)v12 + 1) = v10;
    *((_QWORD *)v12 + 2) = a2;
    v13 = v12;
    WTF::RunLoop::dispatch();
    goto LABEL_11;
  }
  result = object_getClass(a2);
  if (result == (WTF::RunLoop *)MEMORY[0x1E0C81310])
  {
    WTF::RunLoop::main(result);
    v10 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    v11 = a2;
    goto LABEL_10;
  }
  if (!*((_QWORD *)a1 + 2))
    return result;
  WTF::RunLoop::main(result);
  v5 = *((_QWORD *)a1 + 2);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = a2;
  v9 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v9 = &off_1E34CB920;
  *((_QWORD *)v9 + 1) = v5;
  *((_QWORD *)v9 + 2) = a2;
  v13 = v9;
  WTF::RunLoop::dispatch();
LABEL_11:
  result = v13;
  if (v13)
    return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

void sub_197256FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = &off_1E34CB8F8;
  v2 = (void *)a1[2];
  if (v2)

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CB8F8;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, *(_QWORD *)(a1 + 16));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CB920;
  v2 = (void *)a1[2];
  if (v2)

  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34CB920;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CB948;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CB948;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197257350(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_24;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = (uint64_t *)(v3 + 48 * --v4);
        result = *v6;
        if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
          break;
        if (!v4)
          goto LABEL_13;
      }
      *v6 = 0;
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, a2);
      }
      *v6 = -1;
      ++v5;
    }
    while (v4);
LABEL_13:
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v9 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v10 = *(_DWORD *)(v9 - 12);
      else
        v10 = 0;
      *(_DWORD *)(v9 - 12) = v10 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v11 = *(_DWORD *)(v3 - 4);
      v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        v16 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12)
            goto LABEL_35;
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_33:
          v19 = (double)v12;
          v20 = (double)v18;
          v21 = 0.604166667;
          goto LABEL_36;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400)
          goto LABEL_33;
LABEL_35:
        v19 = (double)v12;
        v20 = (double)v18;
        v21 = 0.416666667;
LABEL_36:
        if (v20 * v21 <= v19)
          LODWORD(v18) = 2 * v18;
        if (v18 <= 8)
          v22 = 8;
        else
          v22 = v18;
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v14 = 0;
          goto LABEL_28;
        }
LABEL_25:
        v14 = *(_DWORD *)(v3 - 12);
        v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_24:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_25;
    }
  }
  v14 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_28:
  v15 = v14;
LABEL_29:
  *(_DWORD *)(v2 + 12) = 2 * v15;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int **v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_OWORD *)(v9 + 32);
    do
    {
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 3;
      *v12 = 0uLL;
      v12[1] = 0uLL;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned int **)(v6 + 48 * v13);
      v16 = *v15;
      if (*v15 != (unsigned int *)-1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = (unsigned int **)(v17 + 48 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (*v25);
          *v25 = 0;
          v26 = *v15;
          *v15 = 0;
          *v25 = v26;
          v27 = v17 + 48 * v24;
          v28 = v6 + 48 * v13;
          v29 = *(_OWORD *)(v28 + 8);
          v30 = *(_OWORD *)(v28 + 24);
          *(_QWORD *)(v27 + 40) = *(_QWORD *)(v28 + 40);
          *(_OWORD *)(v27 + 24) = v30;
          *(_OWORD *)(v27 + 8) = v29;
          v31 = *v15;
          *v15 = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v10);
            }
          }
          if (v15 == a3)
            v14 = v25;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v5 = *a2;
  if (*a2)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = v5 + 48 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v5 + 48 * v6;
  *(_DWORD *)(a1 + 40) = 0;
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a1);
  return a1;
}

_QWORD *WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 48;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 48;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DrawingArea::UpdateGeometry,WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0>(WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CB980;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DrawingArea::UpdateGeometry,WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0>(WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CB980;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DrawingArea::UpdateGeometry,WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0>(WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _DWORD *v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 80) = 0;
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
      if (v3)
        v4 = v3 - 16;
      else
        v4 = 0;
      CFRetain(*(CFTypeRef *)(v4 + 8));
      v5 = *(_DWORD *)(v2 + 144) == *(_DWORD *)(v2 + 56) && *(_DWORD *)(v2 + 148) == *(_DWORD *)(v2 + 60);
      if (!v5
        || ((v6 = *(_DWORD **)(v4 + 32), *(_DWORD *)(v2 + 152) == v6[205])
          ? (v7 = *(_DWORD *)(v2 + 156) == v6[206])
          : (v7 = 0),
            !v7
         || ((v8 = v6[433], v9 = v6[434], *(_DWORD *)(v2 + 160) == v8) ? (v10 = *(_DWORD *)(v2 + 164) == v9) : (v10 = 0),
             !v10)))
      {
        WebKit::RemoteLayerTreeDrawingAreaProxy::sendUpdateGeometry((WebKit::RemoteLayerTreeDrawingAreaProxy *)v2);
      }
      if (v3)
        CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
}

void sub_1972579A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[6 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[6 * v2];
  if ((_DWORD)v2)
  {
    v4 = 48 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 6;
      v4 -= 48;
      if (!v4)
        return v3;
    }
  }
  return result;
}

_QWORD *WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  *(_QWORD *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 6;
    *(_QWORD *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  result = WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a1);
  ++*(_DWORD *)(*(_QWORD *)a1 + 8);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  _QWORD *v18;
  __int128 v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 24 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (*v10 + ~(*v10 << 32)) ^ ((*v10 + ~(*v10 << 32)) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = (_QWORD *)(v11 + 24 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (*v18);
        v19 = *(_OWORD *)v10;
        v18[2] = v10[2];
        *(_OWORD *)v18 = v19;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 24 * v6);
    if (v7 == a2)
    {
      return *(_QWORD *)(result + 24 * v6 + 8);
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = (v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 24 * v6);
        ++v8;
        if (v7 == a2)
          return *(_QWORD *)(result + 24 * v6 + 8);
      }
      return 0;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeHost::updateLayerTree(IPC::Connection const&,WebKit::RemoteLayerTreeTransaction const&,float)::LayerAndClone,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = 32 * v8;
        v11 = v7;
        do
        {
          v12 = *(_OWORD *)v11;
          v13 = *((_OWORD *)v11 + 1);
          v11 = (WTF *)((char *)v11 + 32);
          *(_OWORD *)result = v12;
          *(_OWORD *)(result + 16) = v13;
          result += 32;
          v10 -= 32;
        }
        while (v10);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 24 * (v6 & v5));
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = (v8 + v13) & v5;
      result = (uint64_t *)(v2 + 24 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    return 0;
  }
  return result;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  v3 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
    CFRelease(v3);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (_QWORD *)v6;
    do
    {
      if (v13[1] != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v18 = (const void *)v13[2];
          v13[2] = 0;
          if (v18)
            CFRelease(v18);
        }
        else
        {
          v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(a1, v13);
          v15 = (const void *)*((_QWORD *)v14 + 2);
          *((_QWORD *)v14 + 2) = 0;
          if (v15)
            CFRelease(v15);
          *v14 = *(_OWORD *)v13;
          v16 = v13[2];
          v13[2] = 0;
          *((_QWORD *)v14 + 2) = v16;
          v17 = (const void *)v13[2];
          v13[2] = 0;
          if (v17)
            CFRelease(v17);
          if (v13 == a3)
            v11 = v14;
        }
      }
      v13 += 3;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  unsigned int v8;
  __int16 v9;
  char v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v8 = -1640531527;
  v9 = 0;
  v10 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v8, a2);
  v4 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8);
  v5 = 0;
  do
  {
    v6 = (_OWORD *)(v2 + 24 * (v4 & v3));
    v4 = ++v5 + (v4 & v3);
  }
  while (*v6 != 0);
  return v6;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22;
  char v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = v4 + 24 * v9;
      if (*(_QWORD *)(v11 + 8) != -1)
      {
        if (*(_OWORD *)v11 == 0)
        {
          std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)(v4 + 24 * v9 + 16), 0);
        }
        else
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v21 = -1640531527;
          v22 = 0;
          v23 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v21, (_QWORD *)(v4 + 24 * v9));
          v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
          v15 = 0;
          do
          {
            v16 = v14 & v13;
            v17 = (_OWORD *)(v12 + 24 * (v14 & v13));
            v14 = ++v15 + (v14 & v13);
          }
          while (*v17 != 0);
          v18 = v12 + 24 * v16;
          std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)(v18 + 16), 0);
          *v17 = *(_OWORD *)v11;
          v19 = v4 + 24 * v9;
          v20 = *(_QWORD *)(v19 + 16);
          v19 += 16;
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v18 + 16) = v20;
          std::unique_ptr<WebKit::RemoteLayerTreeNode>::reset[abi:sn180100]((WebKit::RemoteLayerTreeNode **)v19, 0);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 24 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *result, _OWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = xmmword_1978CF7D0;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t *v14;
  unsigned int v17;
  __int16 v18;
  char v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v17 = -1640531527;
  v18 = 0;
  v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v17, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  v7 = a2[1];
  v8 = v6 & v5;
  v9 = (uint64_t *)(v2 + 16 * v8);
  v10 = *v9;
  v11 = v9[1];
  if (*v9 == *a2 && v11 == v7)
    return v2 + 16 * v8;
  v13 = 1;
  while (v10 | v11)
  {
    v8 = ((_DWORD)v8 + v13) & v5;
    v14 = (uint64_t *)(v2 + 16 * v8);
    v10 = *v14;
    v11 = v14[1];
    ++v13;
    if (v10 == *a2 && v11 == v7)
      return v2 + 16 * v8;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  *a2 = -1;
  v3 = a2[1];
  if (v3)
    result = (uint64_t *)WTF::fastFree((WTF *)(v3 - 16), a2);
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int v14;
  __int16 v15;
  char v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v14 = -1640531527;
  v15 = 0;
  v16 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v14, a2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v14);
  v6 = a2[1];
  v7 = v5 & v4;
  result = (uint64_t *)(v2 + 24 * (v5 & v4));
  v9 = *result;
  v10 = result[1];
  if (*result != *a2 || v10 != v6)
  {
    v12 = 1;
    while (v9 | v10)
    {
      v7 = (v7 + v12) & v4;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
      v10 = result[1];
      ++v12;
      if (*result == *a2 && v10 == v6)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *result, _OWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = xmmword_1978CF7D0;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if (v12[1] != -1 && *(_OWORD *)v12 != 0)
      {
        v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(a1, v12);
        v14 = v12[2];
        *v13 = *(_OWORD *)v12;
        *((_QWORD *)v13 + 2) = v14;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 3;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v3);
}

uint64_t WebKit::WebKeyboardEvent::WebKeyboardEvent(uint64_t result, _OWORD *a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, _DWORD **a7, int a8, int a9, int a10, char a11, char a12, char a13, char a14)
{
  __int128 v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;

  v14 = a2[1];
  *(_OWORD *)result = *a2;
  *(_OWORD *)(result + 16) = v14;
  v15 = *a3;
  if (*a3)
    *v15 += 2;
  *(_QWORD *)(result + 32) = v15;
  v16 = *a4;
  if (*a4)
    *v16 += 2;
  *(_QWORD *)(result + 40) = v16;
  v17 = *a5;
  if (*a5)
    *v17 += 2;
  *(_QWORD *)(result + 48) = v17;
  v18 = *a6;
  if (*a6)
    *v18 += 2;
  *(_QWORD *)(result + 56) = v18;
  v19 = *a7;
  if (*a7)
    *v19 += 2;
  *(_QWORD *)(result + 64) = v19;
  *(_DWORD *)(result + 72) = a8;
  *(_DWORD *)(result + 76) = a9;
  *(_DWORD *)(result + 80) = a10;
  *(_BYTE *)(result + 84) = a11;
  *(_BYTE *)(result + 85) = a12;
  *(_BYTE *)(result + 86) = a13;
  *(_BYTE *)(result + 87) = a14;
  return result;
}

void WebKit::WebKeyboardEvent::~WebKeyboardEvent(WebKit::WebKeyboardEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::singleton(WebKit::WebMemorySampler *this)
{
  WebKit::WebMemorySampler *result;
  WebKit::WebMemorySampler *v2;

  result = (WebKit::WebMemorySampler *)WebKit::WebMemorySampler::singleton(void)::sharedMemorySampler;
  if (!WebKit::WebMemorySampler::singleton(void)::sharedMemorySampler)
  {
    v2 = (WebKit::WebMemorySampler *)operator new();
    result = WebKit::WebMemorySampler::WebMemorySampler(v2);
    WebKit::WebMemorySampler::singleton(void)::sharedMemorySampler = (uint64_t)result;
  }
  return result;
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::WebMemorySampler(WebKit::WebMemorySampler *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_DWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  WebCore::TimerBase::TimerBase((WebKit::WebMemorySampler *)((char *)this + 16));
  *((_QWORD *)this + 2) = off_1E34B3740;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v2 = off_1E34CB9E0;
  v2[1] = WebKit::WebMemorySampler::sampleTimerFired;
  v2[2] = 0;
  v2[3] = this;
  *((_QWORD *)this + 8) = v2;
  WebCore::TimerBase::TimerBase((WebKit::WebMemorySampler *)((char *)this + 72));
  *((_QWORD *)this + 9) = off_1E34B3740;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = off_1E34CB9E0;
  v3[1] = WebKit::WebMemorySampler::stopTimerFired;
  v3[2] = 0;
  v3[3] = this;
  *((_QWORD *)this + 15) = v3;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  return this;
}

WTF::StringImpl *WebKit::WebMemorySampler::sampleTimerFired(WebKit::WebMemorySampler *this)
{
  unint64_t i;
  uint64_t v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *result;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  char v52;
  WTF *v53[5];

  v53[4] = *(WTF **)MEMORY[0x1E0C80C00];
  notify_post("org.WebKit.lowMemory");
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 1;
  WebKit::WebMemorySampler::sampleWebKit(this, (uint64_t)&v44);
  if (v48)
  {
    LOBYTE(v53[0]) = 9;
    WTF::StringBuilder::append();
    if (v48)
    {
      for (i = 0; i < v48; ++i)
      {
        if (i >= v45)
          goto LABEL_98;
        v3 = *(_QWORD *)(v44 + 8 * i);
        if (v3)
        {
          v4 = *(_DWORD *)(v3 + 4);
          v5 = v4 >= 0xFFFFFFFE ? -1 : v4 + 2;
        }
        else
        {
          v5 = 2;
        }
        v6 = __CFADD__(v5, v51);
        v7 = v5 + v51;
        v8 = v6 ? 0xFFFFFFFFLL : v7;
        if (((v9 = v50) != 0 || (v9 = v49) != 0) && (*((_BYTE *)v9 + 16) & 4) == 0
          || v3 && (*(_BYTE *)(v3 + 16) & 4) == 0)
        {
          v10 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v49);
          if (v10)
          {
            *(_DWORD *)v10 = 589834;
            v53[0] = (WTF *)v3;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v53, (char *)(v10 + 4));
          }
        }
        else
        {
          v11 = MEMORY[0x19AEAB398](&v49, v8);
          if (v11)
          {
            *(_WORD *)v11 = 2314;
            v53[0] = (WTF *)v3;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v53, (char *)(v11 + 2));
          }
        }
        if (i >= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x197258FB8);
        }
        v12 = *(_QWORD *)(v44 + 8 * i);
        if (v12)
          LODWORD(v12) = *(_DWORD *)(v12 + 4);
        if (35 - (int)v12 >= 1)
        {
          v13 = v12 - 35;
          do
          {
            LOBYTE(v53[0]) = 32;
            if (v50 && ((v14 = v51, v51 < *((_DWORD *)v50 + 1)) ? (v15 = v49 == 0) : (v15 = 0), v15))
            {
              v16 = *((_DWORD *)v50 + 4);
              v17 = *((_QWORD *)v50 + 1);
              ++v51;
              if ((v16 & 4) != 0)
                *(_BYTE *)(v17 + v14) = 32;
              else
                *(_WORD *)(v17 + 2 * v14) = 32;
            }
            else
            {
              WTF::StringBuilder::append();
            }
            v6 = __CFADD__(v13++, 1);
          }
          while (!v6);
        }
        if (i >= v48)
        {
LABEL_98:
          __break(0xC471u);
          JUMPOUT(0x197258FB0);
        }
        v18 = *((_QWORD *)v46 + i);
        v19 = v51;
        v20 = v18;
        do
        {
          v21 = v19++;
          v22 = v20 > 9;
          v20 /= 0xAuLL;
        }
        while (v22);
        if (v19 >= v51)
          v23 = (v21 + 1);
        else
          v23 = 0xFFFFFFFFLL;
        v24 = v50;
        if ((v50 || (v24 = v49) != 0) && (*((_BYTE *)v24 + 16) & 4) == 0)
        {
          v25 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v49);
          if (v25)
          {
            v26 = -1;
            v27 = 24;
            do
            {
              v28 = v26;
              *((_BYTE *)v53 + v27--) = (v18 % 0xA) | 0x30;
              --v26;
              v22 = v18 > 9;
              v18 /= 0xAuLL;
            }
            while (v22);
            if (v27 + 2 <= 25)
            {
              do
              {
                *v25++ = *((unsigned __int8 *)&v53[3] + v28 + 1);
                v6 = __CFADD__(v28++, 1);
              }
              while (!v6);
            }
          }
        }
        else
        {
          v29 = (void *)MEMORY[0x19AEAB398](&v49, v23);
          if (v29)
          {
            v30 = 0;
            do
            {
              *((_BYTE *)&v53[3] + v30--) = (v18 % 0xA) | 0x30;
              v22 = v18 > 9;
              v18 /= 0xAuLL;
            }
            while (v22);
            if (v30 + 26 <= 25)
              memcpy(v29, (char *)&v53[3] + v30 + 1, -v30);
          }
        }
      }
    }
  }
  LOBYTE(v53[0]) = 10;
  if (v50 && ((v31 = v51, v51 < *((_DWORD *)v50 + 1)) ? (v32 = v49 == 0) : (v32 = 0), v32))
  {
    v33 = *((_DWORD *)v50 + 4);
    v34 = *((_QWORD *)v50 + 1);
    ++v51;
    if ((v33 & 4) != 0)
      *(_BYTE *)(v34 + v31) = 10;
    else
      *(_WORD *)(v34 + 2 * v31) = 10;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v35 = v49;
  if (v49
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v49),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v49),
        (v35 = v49) != 0))
  {
    *(_DWORD *)v35 += 2;
  }
  v43 = v35;
  WTF::String::utf8();
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v36);
    else
      *(_DWORD *)v43 -= 2;
  }
  WTF::FileSystemImpl::writeToFile();
  v38 = v53[0];
  v53[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
      WTF::fastFree(v38, v37);
    else
      --*(_DWORD *)v38;
  }
  v39 = v46;
  if (v46)
  {
    v46 = 0;
    v47 = 0;
    WTF::fastFree(v39, v37);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v37);
  v41 = v50;
  v50 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v40);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebMemorySampler::stopTimerFired(uint64_t this)
{
  uint64_t v1;
  int *v2;

  if (*(_BYTE *)(this + 128))
  {
    v1 = this;
    printf("%g seconds elapsed. Stopping memory sampler...\n", *(double *)(this + 136));
    return WebKit::WebMemorySampler::stop(v1, v2);
  }
  return this;
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::start(WebKit::WebMemorySampler *this, double a2)
{
  if (!*((_BYTE *)this + 128))
    WebKit::WebMemorySampler::initializeTempLogFile(this);
  return this;
}

void sub_19725904C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WebKit::WebMemorySampler *v14;
  double v15;

  WebKit::WebMemorySampler::initializeTimers(v14, v15);
}

void WebKit::WebMemorySampler::initializeTempLogFile(WebKit::WebMemorySampler *this)
{
  WebKit::WebMemorySampler::processName(this);
}

void sub_197259080(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _DWORD v19[12];

  WTF::FileSystemImpl::openTemporaryFile();
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::String::operator=(v16 + 1, (WTF::StringImpl *)v19);
  *(_DWORD *)v16 = v19[2];
  WebKit::WebMemorySampler::writeHeaders((WebKit::WebMemorySampler *)v16);
}

void WebKit::WebMemorySampler::initializeTimers(WebKit::WebMemorySampler *this, double a2)
{
  WebCore::TimerBase::start();
  WebKit::WebMemorySampler::processName(this);
}

uint64_t sub_197259164(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  double v19;
  const char *v20;
  pid_t v21;
  void *v22;
  uint64_t result;
  WTF::StringImpl *v24;
  WTF *v25;

  WTF::String::utf8();
  if (v25)
    v20 = (char *)v25 + 16;
  else
    v20 = 0;
  v21 = getpid();
  printf("Started memory sampler for process %s %d", v20, v21);
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, v22);
    else
      --*(_DWORD *)v25;
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (v19 > 0.0)
  {
    WebCore::TimerBase::start();
    printf(" for a interval of %g seconds", v19);
  }
  WTF::String::utf8();
  printf("; Sampler log file stored at: %s\n", 0);
  result = 0;
  *(double *)(v18 + 136) = v19;
  *(_BYTE *)(v18 + 128) = 1;
  return result;
}

WebKit::WebMemorySampler *WebKit::WebMemorySampler::start(WebKit::WebMemorySampler *this, uint64_t *a2, WTF::StringImpl *a3, double a4)
{
  if (!*((_BYTE *)this + 128))
  {
    if (*(_QWORD *)a3)
    {
      if (*(_DWORD *)(*(_QWORD *)a3 + 4))
        WebKit::WebMemorySampler::initializeSandboxedLogFile((uint64_t)this, a2, a3);
    }
    return WebKit::WebMemorySampler::start(this, a4);
  }
  return this;
}

void WebKit::WebMemorySampler::initializeSandboxedLogFile(uint64_t a1, uint64_t *a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char ***v8;
  uint64_t v9;

  if (*a2)
  {
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v6 = 1;
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 16) = 0;
  }
  else
  {
    v6 = 0;
  }
  v8 = *(const char ****)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v6;
  if (v8)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v8);
    v6 = *(_QWORD *)(a1 + 144);
  }
  if (v6)
  {
    v9 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v9 + 1;
    if (!v9)
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v6 + 8));
  }
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), a3);
  *(_DWORD *)a1 = WTF::FileSystemImpl::openFile();
  WebKit::WebMemorySampler::writeHeaders((WebKit::WebMemorySampler *)a1);
}

uint64_t WebKit::WebMemorySampler::stop(uint64_t this, int *a2)
{
  WTF::FileSystemImpl *v2;

  if (*(_BYTE *)(this + 128))
  {
    v2 = (WTF::FileSystemImpl *)this;
    if ((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 16));
    WTF::FileSystemImpl::closeFile(v2, a2);
    WebKit::WebMemorySampler::processName(v2);
  }
  return this;
}

void WebKit::WebMemorySampler::writeHeaders(WebKit::WebMemorySampler *this)
{
  WebKit::WebMemorySampler::processName(this);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebMemorySampler::*&)(void),WebKit::WebMemorySampler*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebKit::RemoteLayerTreeNode::RemoteLayerTreeNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5)
{
  const void *v7;
  id v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = (const void *)objc_msgSend(*a5, "layer");
  *(_QWORD *)(a1 + 40) = v7;
  if (v7)
    CFRetain(v7);
  v8 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 48) = v8;
  WebCore::EventRegion::EventRegion((WebCore::EventRegion *)(a1 + 56));
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  objc_msgSend(*(id *)(a1 + 40), "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", a1), CFSTR("WKRemoteLayerTreeNode"));
  return a1;
}

void sub_197259988(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  const void *v4;
  const void *v5;

  v4 = *(const void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v5)
    CFRelease(v5);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeNode::forCALayer(WebKit::RemoteLayerTreeNode *this, CALayer *a2)
{
  return objc_msgSend((id)-[WebKit::RemoteLayerTreeNode valueForKey:](this, "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
}

uint64_t WebKit::RemoteLayerTreeNode::appendLayerDescription(WebKit::RemoteLayerTreeNode *this, NSString *a2, CALayer *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;

  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = objc_msgSend((id)-[NSString valueForKey:](a2, "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if (-[NSString name](a2, "name"))
    v8 = (const __CFString *)-[NSString name](a2, "name");
  else
    v8 = &stru_1E351F1B8;
  return -[WebKit::RemoteLayerTreeNode stringByAppendingString:](this, "stringByAppendingString:", objc_msgSend(v5, "stringWithFormat:", CFSTR(" layerID = %llu \"%@\""), v7, v8));
}

void WebKit::RemoteLayerTreeNode::setAcceleratedEffectsAndBaseValues(uint64_t a1, uint64_t a2, WebCore::AcceleratedEffectValues *a3, uint64_t a4)
{
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  CGRect v23;
  _QWORD *v24;
  int v25;
  int v26;
  float v27[4];

  if (*(_QWORD *)a4)
    v8 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  else
    v8 = 0;
  WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereRemovedFromNode(v8, a1);
  if (*(_DWORD *)(a2 + 12))
  {
    objc_msgSend(*(id *)(a1 + 40), "bounds");
    v23.origin.x = v9;
    v23.origin.y = v10;
    v23.size.width = v11;
    v23.size.height = v12;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v27, &v23);
    WebKit::RemoteAcceleratedEffectStack::create((uint64_t *)&v24, v27[0], v27[1], v27[2], v27[3], *(double *)(*(_QWORD *)(*(_QWORD *)a4 + 8) + 208));
    v13 = *(_DWORD **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v24;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[2];
    }
    v14 = *(unsigned int *)(a2 + 12);
    v24 = 0;
    v25 = 0;
    v26 = v14;
    if ((_DWORD)v14)
    {
      if (v14 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
      v25 = v14;
      v24 = v15;
      v16 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v16)
      {
        v17 = *(uint64_t **)a2;
        v18 = 8 * v16;
        do
        {
          v19 = *v17++;
          ++*(_DWORD *)(v19 + 8);
          *v15++ = v19;
          v18 -= 8;
        }
        while (v18);
      }
    }
    WebCore::AcceleratedEffectValues::clone(a3);
    WebKit::RemoteAcceleratedEffectStack::setEffects(*(_QWORD *)(a1 + 240));
    WebCore::AcceleratedEffectStack::setBaseValues();
    WebKit::RemoteAcceleratedEffectStack::applyEffectsFromMainThread(*(_QWORD *)(a1 + 240), *(void **)(a1 + 40));
    if (*(_QWORD *)a4)
      v20 = *(_QWORD *)(*(_QWORD *)a4 + 8);
    else
      v20 = 0;
    WebKit::RemoteLayerTreeDrawingAreaProxy::animationsWereAddedToNode(v20, a1);
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v23, v21);
    WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v22);
  }
}

void sub_197259C90(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 80, a2);
  _Unwind_Resume(a1);
}

unint64_t WebKit::RemoteLayerTreeScrollingPerformanceData::appendBlankPixelCount(WebKit::RemoteLayerTreeScrollingPerformanceData *this, int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  WTF::MonotonicTime::now(this);
  result = (unint64_t)this + 8;
  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)result + 32 * (v8 - 1);
    v10 = *((unsigned int *)this + 5);
    if (*(_DWORD *)(v9 + 16) == a2)
    {
      v10 = *((unsigned int *)this + 5);
      if (*(_QWORD *)(v9 + 24) == a3)
      {
        *(_QWORD *)(*(_QWORD *)result + 32 * (v8 - 1) + 8) = v6;
        return result;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)&v14 = v6;
  *((_QWORD *)&v14 + 1) = v6;
  LODWORD(v15) = a2;
  *((_QWORD *)&v15 + 1) = a3;
  if ((_DWORD)v8 == *((_DWORD *)this + 4))
  {
    result = WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v10 + 1, (unint64_t)&v14);
    v11 = (_OWORD *)(*((_QWORD *)this + 1) + 32 * *((unsigned int *)this + 5));
    v12 = *(_OWORD *)result;
    v13 = *(_OWORD *)(result + 16);
  }
  else
  {
    v11 = (_OWORD *)(*(_QWORD *)result + 32 * v10);
    v12 = v14;
    v13 = v15;
  }
  *v11 = v12;
  v11[1] = v13;
  ++*((_DWORD *)this + 5);
  return result;
}

uint64_t WebKit::RemoteLayerTreeScrollingPerformanceData::blankPixelCount(WebKit::RemoteLayerTreeScrollingPerformanceData *this, CALayer *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit *v5;
  uint64_t TileGridContainerLayer;
  void *v7;
  void *v8;
  const FloatRect *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  const FloatRect *v18;
  double v19;
  IntSize v20;
  IntSize v21;
  uint64_t v22;
  IntRect v24;
  CGRect v25;
  IntRect v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 8);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = *(WebKit **)(v4 + 40);
  else
    v5 = 0;
  TileGridContainerLayer = WebKit::findTileGridContainerLayer(v5, a2);
  if (TileGridContainerLayer)
  {
    v7 = (void *)TileGridContainerLayer;
    v32 = *(_OWORD *)&a2->super.isa;
    if (*((float *)&v32 + 1) < 0.0)
      DWORD1(v32) = 0;
    WebCore::Region::Region((WebCore::Region *)v31);
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v8 = (void *)objc_msgSend(v7, "sublayers");
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v28 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend(v13, "bounds");
          objc_msgSend(v13, "convertRect:toLayer:", v7);
          v25.origin.x = v14;
          v25.origin.y = v15;
          v25.size.width = v16;
          v25.size.height = v17;
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v26, &v25);
          WebCore::FloatRect::intersect((WebCore::FloatRect *)&v26, (const WebCore::FloatRect *)&v32);
          LODWORD(v19) = v26.m_size.m_width;
          if (*(float *)&v26.m_size.m_width > 0.0)
          {
            LODWORD(v19) = v26.m_size.m_height;
            if (*(float *)&v26.m_size.m_height > 0.0)
            {
              v24.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)&v26, v18);
              v24.m_size = v20;
              WebCore::Region::Region((WebCore::Region *)&v25, &v24);
              WebCore::Region::unite();
              WebCore::Region::~Region((WebCore::Region *)&v25);
            }
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v27, v33, 16, v19);
      }
      while (v10);
    }
    v26.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)&v32, v9);
    v26.m_size = v21;
    WebCore::Region::Region((WebCore::Region *)&v25, &v26);
    WebCore::Region::subtract();
    v22 = WebCore::Region::totalArea((WebCore::Region *)&v25);
    WebCore::Region::~Region((WebCore::Region *)&v25);
    WebCore::Region::~Region((WebCore::Region *)v31);
  }
  else
  {
    NSLog(CFSTR("Failed to find TileGrid Container Layer"));
    return 0xFFFFFFFFLL;
  }
  return v22;
}

void sub_197259F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Unwind_Resume(exception_object);
}

__int128 *WebKit::RemoteLayerTreeScrollingPerformanceData::appendSynchronousScrollingChange(uint64_t a1, uint64_t a2, double a3)
{
  __int128 *result;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  result = (__int128 *)(a1 + 8);
  *(double *)&v9 = a3;
  *((double *)&v9 + 1) = a3;
  LODWORD(v10) = 2;
  *((_QWORD *)&v10 + 1) = a2;
  v5 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
  {
    result = (__int128 *)WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)&v9);
    v6 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 32 * *(unsigned int *)(a1 + 20));
    v7 = *result;
    v8 = result[1];
  }
  else
  {
    v6 = (_OWORD *)(*(_QWORD *)result + 32 * v5);
    v7 = v9;
    v8 = v10;
  }
  *v6 = v7;
  v6[1] = v8;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

CFTypeRef WebKit::RemoteLayerTreeScrollingPerformanceData::data(WebKit::RemoteLayerTreeScrollingPerformanceData *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  uint64_t v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 5));
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 1);
    v5 = v4 + 32 * v3;
    do
    {
      v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", WTF::MonotonicTime::toMachAbsoluteTime((WTF::MonotonicTime *)v4));
      if (*(_DWORD *)(v4 + 16))
        v6 = CFSTR("exposed");
      else
        v6 = CFSTR("filled");
      v9[1] = v6;
      v9[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(v4 + 24), v9[0], v6);
      v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 3);
      if (v7)
        objc_msgSend(v2, "addObject:", v7);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return (id)CFMakeCollectable(v2);
}

void sub_19725A178(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::findTileGridContainerLayer(WebKit *this, CALayer *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  WebCore::TileController *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  const WTF::StringImpl *v12;
  _BOOL4 v13;
  uint64_t TileGridContainerLayer;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = (void *)-[WebKit sublayers](this, "sublayers");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)v21;
  do
  {
    for (i = 0; i != v4; ++i)
    {
      if (*(_QWORD *)v21 != v5)
        objc_enumerationMutation(v3);
      v7 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
      v8 = (WebCore::TileController *)MEMORY[0x19AEABCC8](&v19, objc_msgSend(v7, "name", v17));
      WebCore::TileController::tileGridContainerLayerName(v8);
      v11 = WTF::equal(v19, v18, v9);
      v12 = v18;
      v17 = 0;
      if (!v12)
        goto LABEL_9;
      if (*(_DWORD *)v12 != 2)
      {
        *(_DWORD *)v12 -= 2;
LABEL_9:
        if ((v11 & 1) != 0)
          goto LABEL_10;
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v12, v10);
      if ((v11 & 1) != 0)
      {
LABEL_10:
        v13 = 1;
        v2 = (uint64_t)v7;
        goto LABEL_14;
      }
LABEL_12:
      TileGridContainerLayer = WebKit::findTileGridContainerLayer((WebKit *)v7, (CALayer *)v10);
      v13 = TileGridContainerLayer != 0;
      if (TileGridContainerLayer)
        v2 = TileGridContainerLayer;
LABEL_14:
      v15 = v19;
      v19 = 0;
      if (!v15)
        goto LABEL_17;
      if (*(_DWORD *)v15 != 2)
      {
        *(_DWORD *)v15 -= 2;
LABEL_17:
        if (v13)
          return v2;
        continue;
      }
      WTF::StringImpl::destroy(v15, v10);
      if (v13)
        return v2;
    }
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16, 0);
  }
  while (v4);
  return 0;
}

void sub_19725A320(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(id *this)
{
  WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this - 2);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::delegatedScrollingMode(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  return 1;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::didRefreshDisplay(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 232))
    this = WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(this, 0);
  if (*(_BYTE *)(v1 + 233))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    if ((*(_QWORD *)(v3 + 752) & 0xFF00000000) != 0)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 200) + 184))(*(_QWORD *)(v3 + 200));
  }
  return this;
}

void WebKit::RemoteLayerTreeHost::makeNode(uint64_t a1@<X0>, _QWORD *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;
  WKTransformView *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WKCompositingLayer *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  WKModelView *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  WKUIRemoteView *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  const void *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  CFTypeRef cf;

  v6 = (uint64_t *)a1;
  switch(*((_BYTE *)a2 + 16))
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 9:
    case 0xF:
      v7 = objc_alloc_init(WKCompositingView);
      v8 = *((_DWORD *)a2 + 18);
      v9 = a2[7];
      v10 = WTF::fastMalloc((WTF *)0x100);
      v11 = v10;
      v12 = *a2;
      v13 = a2[1];
      if (v8 == 3)
        v14 = v9;
      else
        v14 = 0;
      goto LABEL_5;
    case 3:
      v7 = objc_alloc_init(WKTransformView);
      v20 = *((_DWORD *)a2 + 18);
      v21 = a2[7];
      v10 = WTF::fastMalloc((WTF *)0x100);
      v11 = v10;
      v12 = *a2;
      v13 = a2[1];
      if (v20 == 3)
        v14 = v21;
      else
        v14 = 0;
      goto LABEL_5;
    case 6:
      v22 = *a2;
      v23 = a2[1];
      v24 = objc_alloc_init(WKCompositingLayer);
      v25 = WTF::fastMalloc((WTF *)0x100);
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = v22;
      *(_QWORD *)(v25 + 16) = v23;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0;
      *(_QWORD *)(v25 + 40) = v24;
      *(_QWORD *)(v25 + 48) = 0;
      WebCore::EventRegion::EventRegion((WebCore::EventRegion *)(v25 + 56));
      *(_OWORD *)(v25 + 208) = 0u;
      *(_BYTE *)(v25 + 232) = 0;
      *(_QWORD *)(v25 + 240) = 0;
      *(_BYTE *)(v25 + 248) = 0;
      *(_OWORD *)(v25 + 176) = 0u;
      *(_OWORD *)(v25 + 192) = 0u;
      *(_BYTE *)(v25 + 224) = 0;
      objc_msgSend(*(id *)(v25 + 40), "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", v25), CFSTR("WKRemoteLayerTreeNode"));
      objc_msgSend(*(id *)(v25 + 40), "setDelegate:", objc_msgSend(MEMORY[0x1E0DCDD78], "shared"));
      *a4 = v25;
      return;
    case 8:
    case 0xE:
      if (*(_BYTE *)(a1 + 64))
      {
        v7 = objc_alloc_init(WKCompositingView);
        v16 = *((_DWORD *)a2 + 18);
        v17 = a2[7];
        v10 = WTF::fastMalloc((WTF *)0x100);
        v11 = v10;
        v12 = *a2;
        v13 = a2[1];
        if (v16 == 3)
          v14 = v17;
        else
          v14 = 0;
        goto LABEL_5;
      }
      if (!*((_BYTE *)a2 + 48)
        || ((v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40) + 8)) != 0
          ? (v38 = v37 - 16)
          : (v38 = 0),
            (v39 = *(_QWORD **)(v38 + 384)) == 0))
      {
        v55 = [WKUIRemoteView alloc];
        v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) + 40) + 8);
        if (v56)
          v57 = v56 - 16;
        else
          v57 = 0;
        if (*(_BYTE *)(v57 + 729) || (v61 = *(_QWORD *)(*(_QWORD *)(v57 + 208) + 136)) == 0)
          v58 = 0;
        else
          v58 = *(unsigned int *)(v61 + 108);
        if (*((_DWORD *)a2 + 18) == 1)
          v62 = *((unsigned int *)a2 + 14);
        else
          v62 = 0;
        v7 = -[WKUIRemoteView initWithFrame:pid:contextID:](v55, "initWithFrame:pid:contextID:", v58, v62, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
        v63 = *((_DWORD *)a2 + 18);
        v64 = a2[7];
        v10 = WTF::fastMalloc((WTF *)0x100);
        v11 = v10;
        v12 = *a2;
        v13 = a2[1];
        if (v63 == 3)
          v14 = v64;
        else
          v14 = 0;
        goto LABEL_5;
      }
      v6 = (uint64_t *)(a1 + 56);
      v40 = *(_QWORD *)(a1 + 56);
      if (v40
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 56), 0), (v40 = *v6) != 0))
      {
        v41 = *(_DWORD *)(v40 - 8);
      }
      else
      {
        v41 = 0;
      }
      LODWORD(cf) = -1640531527;
      WORD2(cf) = 0;
      BYTE6(cf) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&cf, a2);
      v42 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&cf) & v41;
      v33 = 24;
      v43 = (_QWORD *)(v40 + 24 * v42);
      v45 = *v43;
      v44 = v43[1];
      if (*(_OWORD *)v43 == 0)
      {
LABEL_55:
        *(_OWORD *)v43 = *(_OWORD *)a2;
        v43[2] = a2[3];
        v48 = *v6;
        if (*v6)
          v49 = *(_DWORD *)(v48 - 12) + 1;
        else
          v49 = 1;
        *(_DWORD *)(v48 - 12) = v49;
        v65 = *v6;
        if (*v6)
          v66 = *(_DWORD *)(v65 - 12);
        else
          v66 = 0;
        v33 = (*(_DWORD *)(v65 - 16) + v66);
        v67 = *(unsigned int *)(v65 - 4);
        if (v67 > 0x400)
        {
          if (v67 > 2 * v33)
            goto LABEL_86;
        }
        else if (3 * v67 > 4 * v33)
        {
          goto LABEL_86;
        }
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v6, v43);
        goto LABEL_86;
      }
      v46 = 0;
      v47 = 1;
      while (v45 != *a2 || v44 != a2[1])
      {
        if (v44 == -1)
          v46 = v43;
        v42 = (v42 + v47) & v41;
        v43 = (_QWORD *)(v40 + 24 * v42);
        v45 = *v43;
        v44 = v43[1];
        ++v47;
        if (*(_OWORD *)v43 == 0)
        {
          if (v46)
          {
            *v46 = 0;
            v46[1] = 0;
            v46[2] = 0;
            --*(_DWORD *)(*v6 - 16);
            v43 = v46;
          }
          goto LABEL_55;
        }
      }
LABEL_86:
      v32 = *((unsigned __int8 *)a2 + 48);
      if (!*((_BYTE *)a2 + 48))
      {
        __break(1u);
LABEL_101:
        WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
        *(_BYTE *)(v33 + 336) = 1;
LABEL_30:
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v32 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, a3))v34 = *((_DWORD *)a2 + 18) == 2;
        else
          v34 = 0;
        if (v34)
        {
          v50 = [WKModelView alloc];
          v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) + 40) + 8);
          if (v51)
            v52 = v51 - 16;
          else
            v52 = 0;
          v7 = -[WKModelView initWithModel:layerID:page:](v50, "initWithModel:layerID:page:", a2[7], *a2, a2[1], v52);
          v53 = *((_DWORD *)a2 + 18);
          v54 = a2[7];
          v10 = WTF::fastMalloc((WTF *)0x100);
          v11 = v10;
          v12 = *a2;
          v13 = a2[1];
          if (v53 == 3)
            v14 = v54;
          else
            v14 = 0;
        }
        else
        {
          v7 = objc_alloc_init(WKCompositingView);
          v35 = *((_DWORD *)a2 + 18);
          v36 = a2[7];
          v10 = WTF::fastMalloc((WTF *)0x100);
          v11 = v10;
          v12 = *a2;
          v13 = a2[1];
          if (v35 == 3)
            v14 = v36;
          else
            v14 = 0;
        }
LABEL_5:
        cf = v7;
        WebKit::RemoteLayerTreeNode::RemoteLayerTreeNode(v10, v12, v13, v14, (id *)&cf);
        *a4 = v11;
        v15 = cf;
        if (!cf)
          return;
        goto LABEL_6;
      }
      if (*((_DWORD *)a2 + 18) == 1)
        v68 = *((_DWORD *)a2 + 14);
      else
        v68 = 0;
      WebKit::VideoPresentationManagerProxy::createViewWithID(v39, a2[3], v68, (const FloatSize *)a2 + 4, (const WebCore::FloatSize *)(a2 + 5), &v77);
      v69 = v77;
      v77 = 0;
      v70 = *((_DWORD *)a2 + 18);
      v71 = a2[7];
      v72 = WTF::fastMalloc((WTF *)0x100);
      v73 = v72;
      v74 = *a2;
      v75 = a2[1];
      if (v70 == 3)
        v76 = v71;
      else
        v76 = 0;
      cf = v69;
      WebKit::RemoteLayerTreeNode::RemoteLayerTreeNode(v72, v74, v75, v76, (id *)&cf);
      *a4 = v73;
      if (cf)
        CFRelease(cf);
      v15 = v77;
      v77 = 0;
      if (v15)
LABEL_6:
        CFRelease(v15);
      return;
    case 0xA:
      v7 = objc_alloc_init(WKBackdropView);
      v26 = *((_DWORD *)a2 + 18);
      v27 = a2[7];
      v10 = WTF::fastMalloc((WTF *)0x100);
      v11 = v10;
      v12 = *a2;
      v13 = a2[1];
      if (v26 == 3)
        v14 = v27;
      else
        v14 = 0;
      goto LABEL_5;
    case 0xB:
      v7 = objc_alloc_init(WKShapeView);
      v28 = *((_DWORD *)a2 + 18);
      v29 = a2[7];
      v10 = WTF::fastMalloc((WTF *)0x100);
      v11 = v10;
      v12 = *a2;
      v13 = a2[1];
      if (v28 == 3)
        v14 = v29;
      else
        v14 = 0;
      goto LABEL_5;
    case 0xC:
      if (*(_BYTE *)(a1 + 64))
      {
        v7 = (WKTransformView *)objc_alloc_init(MEMORY[0x1E0CEABB0]);
        v18 = *((_DWORD *)a2 + 18);
        v19 = a2[7];
        v10 = WTF::fastMalloc((WTF *)0x100);
        v11 = v10;
        v12 = *a2;
        v13 = a2[1];
        if (v18 == 3)
          v14 = v19;
        else
          v14 = 0;
      }
      else
      {
        v7 = objc_alloc_init(WKChildScrollView);
        v59 = *((_DWORD *)a2 + 18);
        v60 = a2[7];
        v10 = WTF::fastMalloc((WTF *)0x100);
        v11 = v10;
        v12 = *a2;
        v13 = a2[1];
        if (v59 == 3)
          v14 = v60;
        else
          v14 = 0;
      }
      goto LABEL_5;
    case 0xD:
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40) + 8);
      if (v30)
        v31 = v30 - 16;
      else
        v31 = 0;
      v32 = *(_QWORD *)(v31 + 224);
        goto LABEL_30;
      goto LABEL_101;
    default:
      *a4 = 0;
      return;
  }
}

void sub_19725AB7C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  WTF *v10;

  if (cf)
    CFRelease(cf);
  WTF::fastFree(v10, a2);
  if (a9)
    CFRelease(a9);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteScrollingCoordinatorProxyIOS::clearTouchActionsForTouchIdentifier(WebKit::RemoteScrollingCoordinatorProxyIOS *this, int a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  int v7;

  v7 = a2;
  v3 = (uint64_t *)((char *)this + 144);
  result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>((uint64_t *)this + 18, &v7);
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::remove(v3, result);
  return result;
}

WebKit::ScrollingTreeOverflowScrollingNodeIOS *WebKit::RemoteScrollingCoordinatorProxyIOS::scrollViewForScrollingNodeID()
{
  uint64_t v0;
  WebKit::ScrollingTreeOverflowScrollingNodeIOS *v1;
  unsigned int v2;
  unsigned __int8 **v3;
  uint64_t v4;
  void *v5;
  id *v7;

  v0 = WebCore::ScrollingTree::nodeForID();
  v1 = (WebKit::ScrollingTreeOverflowScrollingNodeIOS *)v0;
  if (v0)
  {
    v2 = *(unsigned __int8 *)(v0 + 40);
    if (v2 != 5)
    {
      if (v2 <= 1)
      {
        v3 = (unsigned __int8 **)(v0 + 8);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v0 + 8));
        v7 = (id *)*((_QWORD *)v1 + 12);
        if (!v7)
        {
          v1 = 0;
          goto LABEL_5;
        }
        v4 = WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView(v7);
LABEL_4:
        v1 = (WebKit::ScrollingTreeOverflowScrollingNodeIOS *)v4;
LABEL_5:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v3, v5);
        return v1;
      }
      if (*(_BYTE *)(v0 + 40) != 3)
        return 0;
    }
    v3 = (unsigned __int8 **)(v0 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v0 + 8));
    v4 = WebKit::ScrollingTreeOverflowScrollingNodeIOS::scrollView(v1);
    goto LABEL_4;
  }
  return v1;
}

void sub_19725AE1C(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::scrollingTreeNodeWillStartPanGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebPageProxy::scrollingNodeScrollViewWillStartPanGesture(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::scrollingTreeNodeWillStartScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8[2];
  char v9;

  v6 = *(_QWORD *)(a1 + 16);
  v8[0] = a2;
  v8[1] = a3;
  v9 = 1;
  WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll(v6, v8);
  WebKit::RemoteScrollingUIState::addNodeWithActiveUserScroll(a1 + 80, a2, a3);
  return WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(a1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::scrollingTreeNodeDidEndScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8[2];
  char v9;

  v6 = *(_QWORD *)(a1 + 16);
  v8[0] = a2;
  v8[1] = a3;
  v9 = 1;
  WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll(v6, v8);
  WebKit::RemoteScrollingUIState::removeNodeWithActiveUserScroll(a1 + 80, a2, a3);
  return WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(a1);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::adjustTargetContentOffsetForSnapping(WebKit::RemoteScrollingCoordinatorProxyIOS *this, CGSize a2, CGPoint a3, double a4, CGPoint a5, CGPoint *a6)
{
  double height;
  double width;
  unint64_t v11;
  char v12;
  float v14;
  float v15;
  uint64_t result;
  float v17;
  char v18;
  double y;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;

  height = a2.height;
  width = a2.width;
  if (WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 0))
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v26, a6);
    v11 = WebKit::RemoteScrollingCoordinatorProxyIOS::closestSnapOffsetForMainFrameScrolling((uint64_t)this);
    *((_DWORD *)this + 28) = HIDWORD(v11);
    *((_BYTE *)this + 116) = v12;
    if (a6->x > 0.0 && a6->x < width)
    {
      v14 = *(float *)&v11;
      v15 = width;
      if (*(float *)&v11 >= v15)
        v14 = width;
      a6->x = v14;
    }
  }
  result = WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 1);
  if ((_DWORD)result)
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v24, a6);
    v17 = a4;
    v24 = v24 + 0.0;
    v25 = v25 + v17;
    result = WebKit::RemoteScrollingCoordinatorProxyIOS::closestSnapOffsetForMainFrameScrolling((uint64_t)this);
    *((_DWORD *)this + 30) = HIDWORD(result);
    *((_BYTE *)this + 124) = v18;
    y = a6->y;
    if (y > 0.0 && y < height)
    {
      v21 = *(float *)&result;
      if (v18)
      {
        v22 = *(float *)&result - a4;
        v21 = v22;
      }
      v23 = height;
      if (v21 >= v23)
        v21 = height;
      a6->y = v21;
    }
  }
  return result;
}

BOOL WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling(uint64_t a1, int a2)
{
  WebCore::ScrollingTreeScrollingNode *v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  void *v7;
  _DWORD v9[4];

  v2 = *(WebCore::ScrollingTreeScrollingNode **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v2)
    return 0;
  v4 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(v2);
  if (a2 == 1)
    v5 = v4 + 24;
  else
    v5 = v4 + 8;
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v9, v5);
  v6 = v9[3] != 0;
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v7);
  return v6;
}

unint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::closestSnapOffsetForMainFrameScrolling(uint64_t a1)
{
  id WeakRetained;
  double v3;
  double v4;
  unsigned int v5;
  uint64_t v7;

  WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(*(_QWORD *)(a1 + 24)
                                                                                               + 16));
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 1984));
  objc_msgSend((id)objc_msgSend(WeakRetained, "scrollView"), "zoomScale");
  v4 = v3;
  if (WeakRetained)
    CFRelease(WeakRetained);
  v7 = WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::closestSnapOffset<WebCore::FloatSize,WebCore::FloatPoint>();
  *(float *)&v5 = v4 * *(float *)&v7;
  return __PAIR64__(HIDWORD(v7), v5);
}

void sub_19725B1D4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSetScrollViewDecelerationRateFast(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  return WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 0)
      || WebKit::RemoteScrollingCoordinatorProxyIOS::shouldSnapForMainFrameScrolling((uint64_t)this, 1);
}

double WebKit::RemoteScrollingCoordinatorProxyIOS::nearestActiveContentInsetAdjustedSnapOffset(WebKit::RemoteScrollingCoordinatorProxyIOS *this, double a2, const CGPoint *a3)
{
  uint64_t v3;
  WebCore::ScrollingTreeScrollingNode *v4;
  double x;
  uint64_t v7;
  id WeakRetained;
  double v9;
  double v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 3);
  v4 = *(WebCore::ScrollingTreeScrollingNode **)(v3 + 16);
  if (!v4)
    return *MEMORY[0x1E0C9D538];
  x = a3->x;
  v7 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v3 + 16));
  WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(v4);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 1984));
  objc_msgSend((id)objc_msgSend(WeakRetained, "scrollView"), "zoomScale");
  v10 = v9;
  if (WeakRetained)
    CFRelease(WeakRetained);
  v11 = *(_DWORD *)(v7 + 20);
  if (v11)
  {
    if (*((_BYTE *)this + 116))
    {
      v12 = *((_DWORD *)this + 28);
      if (v11 > v12)
        return v10 * *(float *)(*(_QWORD *)(v7 + 8) + 40 * v12);
    }
  }
  return x;
}

void sub_19725B34C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::displayDidRefresh(WebKit::RemoteScrollingCoordinatorProxyIOS *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WebCore::AcceleratedEffectStack *v14;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  WTF::MonotonicTime::now(this);
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 184);
  if (*(_BYTE *)(v2 + 32))
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 72);
  v5 = *((_QWORD *)this + 19);
  v4 = (uint64_t *)((char *)this + 152);
  v18 = v5;
  *v4 = 0;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::begin(&v18);
  v8 = result;
  v9 = v7;
  v10 = v18;
  if (v18)
    v11 = v18 + 16 * *(unsigned int *)(v18 - 4);
  else
    v11 = 0;
  if (v11 != result)
  {
    v12 = (uint64_t *)(v3 + 16);
    do
    {
      v17 = *(_OWORD *)v8;
      v16[0] = v17;
      v13 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v12, v16);
      v14 = *(WebCore::AcceleratedEffectStack **)(v13 + 240);
      WebKit::RemoteAcceleratedEffectStack::applyEffectsFromMainThread((uint64_t)v14, *(void **)(v13 + 40));
      result = WebCore::AcceleratedEffectStack::hasEffects(v14);
      if ((_DWORD)result)
        result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v4, &v17, (uint64_t)v16);
      while (1)
      {
        v8 += 16;
        if ((void *)v8 == v9)
          break;
        if (*(_OWORD *)v8 != 0 && *(_QWORD *)(v8 + 8) != -1)
          goto LABEL_17;
      }
      v8 = (uint64_t)v9;
LABEL_17:
      ;
    }
    while (v8 != v11);
    v10 = v18;
  }
  if (v10)
    return WTF::fastFree((WTF *)(v10 - 16), v7);
  return result;
}

void sub_19725B490(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    WTF::fastFree((WTF *)(a16 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::animationsWereAddedToNode(WebKit::RemoteScrollingCoordinatorProxyIOS *this, WebKit::RemoteLayerTreeNode *a2)
{
  uint64_t v3;
  WebKit::RemoteLayerTreeDrawingAreaProxyIOS *v4;
  _BYTE v6[24];
  __int128 v7;

  v7 = *(_OWORD *)((char *)a2 + 8);
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t *)this + 19, &v7, (uint64_t)v6);
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 184);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 32))
      v4 = 0;
    else
      v4 = *(WebKit::RemoteLayerTreeDrawingAreaProxyIOS **)(*((_QWORD *)this + 2) + 184);
  }
  else
  {
    v4 = 0;
  }
  *((_BYTE *)v4 + 233) = 1;
  return -[WKDisplayLinkHandler schedule](WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(v4), "schedule");
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::animationsWereRemovedFromNode(WebKit::RemoteScrollingCoordinatorProxyIOS *this, WebKit::RemoteLayerTreeNode *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = (uint64_t *)((char *)this + 152);
  v8 = *(_OWORD *)((char *)a2 + 8);
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 19, &v8);
  v5 = *((_QWORD *)this + 19);
  if (v5)
  {
    v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v6 == result)
      goto LABEL_9;
  }
  else
  {
    if (!result)
      goto LABEL_10;
    v6 = 0;
  }
  if (v6 != result)
  {
    result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v3, (_OWORD *)result);
    v5 = *v3;
  }
  if (v5)
  {
LABEL_9:
    if (*(_DWORD *)(v5 - 12))
      return result;
  }
LABEL_10:
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 184);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 32))
      result = 0;
    else
      result = *(_QWORD *)(*((_QWORD *)this + 2) + 184);
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(result + 233) = 0;
  if (!*(_BYTE *)(result + 232))
    return -[WKDisplayLinkHandler pause](WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler((WebKit::RemoteLayerTreeDrawingAreaProxyIOS *)result), "pause");
  return result;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x1B0);
  result = WebCore::ScrollingTreeFrameScrollingNode::ScrollingTreeFrameScrollingNode();
  *v2 = off_1E34CBCF8;
  v2[52] = 0;
  v2[53] = 0;
  v2[51] = 0;
  *a1 = v2;
  return result;
}

void sub_19725B650(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

float WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::minimumScrollPosition(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  float v2;
  float v4;

  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v4, (const IntPoint *)this + 19);
  v2 = v4;
  if (WebCore::ScrollingTreeNode::isRootNode(this)
    && WebCore::ScrollingTree::scrollPinningBehavior(*((WebCore::ScrollingTree **)this + 4)) == 2)
  {
    (*(void (**)(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *))(*(_QWORD *)this + 136))(this);
  }
  return 0.0 - v2;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::maximumScrollPosition(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  uint64_t result;
  int v3;

  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v3, (const IntPoint *)this + 19);
  result = WebCore::ScrollingTreeNode::isRootNode(this);
  if ((_DWORD)result)
  {
    result = WebCore::ScrollingTree::scrollPinningBehavior(*((WebCore::ScrollingTree **)this + 4));
    if ((_DWORD)result == 1)
      return (*(uint64_t (**)(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *))(*(_QWORD *)this + 128))(this);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::isRemoteLayerTreeDrawingAreaProxyIOS(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  return 1;
}

__n128 WebKit::RemoteScrollingCoordinatorProxy::filteredWheelEvent@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t WebCore::ScrollingTreeNode::isRootOfHostedSubtree(WebCore::ScrollingTreeNode *this)
{
  return 0;
}

void WebCore::ScrollingTreeScrollingNode::scrollbarStateForOrientation(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  *a1 = v1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::Region const*,WebCore::Region const*,WebCore::Region*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      WebCore::Region::operator=();
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__optional_storage_base<WebCore::Region,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Region,false> const&>(WebCore::Region *a1, unsigned __int8 *a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)a1 + 24) == a2[24])
  {
    if (*((_BYTE *)a1 + 24))
      WebCore::Region::operator=();
  }
  else if (*((_BYTE *)a1 + 24))
  {
    WebCore::Region::~Region(a1);
    *(_BYTE *)(v2 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(WebCore::Region::Region(a1, (const WebCore::Region *)a2) + 24) = 1;
  }
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeScrollingPerformanceData::ScrollingLogEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  __int128 v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = 32 * v5;
        v8 = v4;
        do
        {
          v9 = *(_OWORD *)v8;
          v10 = *((_OWORD *)v8 + 1);
          v8 = (WTF *)((char *)v8 + 32);
          *(_OWORD *)result = v9;
          *(_OWORD *)(result + 16) = v10;
          result += 32;
          v7 -= 32;
        }
        while (v7);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  v8 = *(_DWORD *)(v2 + 8 * v7);
  if (v8 == *a2)
    return v2 + 8 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_DWORD *)(v2 + 8 * v7);
    ++v9;
    if (v8 == v4)
      return v2 + 8 * v7;
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t *WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::OptionSet<WebCore::TouchAction>&>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 8 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 8 * v21;
        *(_BYTE *)(a4 + 16) = 0;
        *((_BYTE *)v15 + 4) = *a3;
        return result;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 8 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *(_DWORD *)v17 = 0;
      *((_BYTE *)v17 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  *((_BYTE *)v15 + 4) = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v6, v15);
      v15 = result;
      v22 = *v6;
      if (*v6)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v22 + 8 * v25;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Table;
  void *v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_DWORD *)v6;
    do
    {
      if ((*v12 + 1) >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookupForReinsert(a1, v12);
        *v13 = *(_QWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;

  v2 = WTF::fastMalloc((WTF *)(8 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_BYTE *)(v2 + 20);
    do
    {
      *((_DWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookupForReinsert(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(v2 + 8 * v7));
  return v2 + 8 * v7;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::remove(uint64_t *result, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = -1;
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v3 = *result;
  if (*result)
    v2 = *(_DWORD *)(v3 - 12) - 1;
  *(_DWORD *)(v3 - 12) = v2;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::OptionSet<WebCore::TouchAction>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = v6 + 24;
      v9 = 40 * v7;
      v10 = *(_QWORD *)a2 + 24;
      do
      {
        v11 = *(_OWORD *)(v10 - 24);
        *(_BYTE *)(v8 - 8) = *(_BYTE *)(v10 - 8);
        *(_OWORD *)(v8 - 24) = v11;
        v8 = WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v10) + 40;
        v10 += 40;
        v9 -= 40;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_19725BFA8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPreferencesStore::deleteKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t result;

  v5 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this, a2, a3);
  if (*(_QWORD *)this + 24 * *((unsigned int *)this + 2) != v5)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this, v5);
  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 3, a2, v6);
  if (*((_QWORD *)this + 3) + 24 * *((unsigned int *)this + 8) != result)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 24, result);
  return result;
}

WTF::StringImpl *WebKit::WebPushMessage::notificationPayloadToCoreData@<X0>(WebKit::WebPushMessage *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebPushMessage *v3;
  char v4;
  unsigned int v5;
  WTF::StringImpl *result;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unsigned int v13;
  _DWORD *v14;
  __int128 v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::MonotonicTime *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebCore::Process *WeakRandomUUIDVersion4;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _QWORD v37[3];
  WTF *v38[3];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 208))
  {
    a2 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/WebPushMessage.cpp";
    __break(0xC471u);
    goto LABEL_52;
  }
  v3 = this;
  if (_MergedGlobals_82 == 1)
  {
    v35 = 0;
    v36 = 0;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    WeakRandomUUIDVersion4 = (WebCore::Process *)WTF::UUID::generateWeakRandomUUIDVersion4(this);
    v30 = v29;
    v31 = WebCore::Process::identifier(WeakRandomUUIDVersion4);
    *(_QWORD *)&xmmword_1ECE72B90 = WeakRandomUUIDVersion4;
    *((_QWORD *)&xmmword_1ECE72B90 + 1) = v30;
    qword_1ECE72BA0 = v31;
    _MergedGlobals_82 = 1;
    v32 = *((unsigned __int8 *)v3 + 208);
    v35 = 0;
    v36 = 0;
    v33 = 0;
    v34 = 0;
    if (!v32)
      goto LABEL_52;
  }
  if (*((_BYTE *)v3 + 192))
  {
    WTF::String::operator=(&v36, (WebKit::WebPushMessage *)((char *)v3 + 152));
    if (!*((_BYTE *)v3 + 208))
      goto LABEL_52;
    if (!*((_BYTE *)v3 + 192))
      goto LABEL_52;
    WTF::String::operator=(&v33, (WebKit::WebPushMessage *)((char *)v3 + 144));
    if (!*((_BYTE *)v3 + 208))
      goto LABEL_52;
    if (!*((_BYTE *)v3 + 192))
      goto LABEL_52;
    WTF::String::operator=(&v34, (WebKit::WebPushMessage *)((char *)v3 + 160));
    if (!*((_BYTE *)v3 + 208))
      goto LABEL_52;
    if (!*((_BYTE *)v3 + 192))
      goto LABEL_52;
    WTF::String::operator=(&v35, (WebKit::WebPushMessage *)((char *)v3 + 168));
    if (!*((_BYTE *)v3 + 208) || !*((_BYTE *)v3 + 192))
      goto LABEL_52;
    v4 = *((_BYTE *)v3 + 136);
    v5 = *((unsigned __int16 *)v3 + 92);
    WTF::String::utf8();
    result = v38[0];
    if (!v38[0])
      goto LABEL_53;
    v8 = *((_QWORD *)v38[0] + 1);
    if (v8)
    {
      if (HIDWORD(v8))
      {
        __break(0xC471u);
        return result;
      }
      v9 = (char *)v38[0] + 16;
      v10 = WTF::fastMalloc(*((WTF **)v38[0] + 1));
      v11 = v10;
      for (i = 0; i != v8; ++i)
        *(_BYTE *)(v10 + i) = v9[i];
      result = v38[0];
      v38[0] = 0;
      if (!result)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      v38[0] = 0;
    }
    if (*(_DWORD *)result == 1)
      WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
LABEL_23:
    while (!*((_BYTE *)v3 + 208))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      LODWORD(v8) = 0;
      v11 = 0;
    }
    v13 = v5 >> 8;
    goto LABEL_25;
  }
  v4 = 0;
  LODWORD(v8) = 0;
  v11 = 0;
  LOBYTE(v5) = 0;
  LOBYTE(v13) = 0;
LABEL_25:
  v14 = (_DWORD *)*((_QWORD *)v3 + 9);
  if (v14)
    *v14 += 2;
  *(_QWORD *)a3 = v14;
  v15 = *((_OWORD *)v3 + 6);
  *(_OWORD *)(a3 + 8) = *((_OWORD *)v3 + 5);
  *(_OWORD *)(a3 + 24) = v15;
  v16 = (_DWORD *)*((_QWORD *)v3 + 14);
  if (v16)
    *v16 += 2;
  v17 = v36;
  *(_QWORD *)(a3 + 40) = v16;
  *(_QWORD *)(a3 + 48) = v17;
  v19 = v34;
  v18 = v35;
  v35 = 0;
  v36 = 0;
  *(_QWORD *)(a3 + 56) = v18;
  *(_QWORD *)(a3 + 64) = v19;
  *(_QWORD *)(a3 + 72) = v33;
  *(_BYTE *)(a3 + 80) = v4;
  v33 = 0;
  v34 = 0;
  WebCore::SecurityOriginData::fromURL((WebKit::WebPushMessage *)((char *)v3 + 32), (const WTF::URL *)a2);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v38);
  v20 = (_DWORD *)*((_QWORD *)v3 + 4);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a3 + 96) = v20;
  *(_OWORD *)(a3 + 104) = *(_OWORD *)((char *)v3 + 40);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)((char *)v3 + 56);
  v21 = (WTF::MonotonicTime *)WTF::UUID::UUID((WTF::UUID *)v37);
  v22 = v37[1];
  *(_QWORD *)(a3 + 144) = v37[0];
  *(_QWORD *)(a3 + 152) = v22;
  *(_OWORD *)(a3 + 160) = xmmword_1ECE72B90;
  *(_QWORD *)(a3 + 176) = qword_1ECE72BA0;
  *(_QWORD *)(a3 + 192) = 1;
  WTF::MonotonicTime::now(v21);
  *(_QWORD *)(a3 + 200) = v24;
  *(_QWORD *)(a3 + 208) = v11;
  *(_DWORD *)(a3 + 216) = v8;
  *(_DWORD *)(a3 + 220) = v8;
  *(_WORD *)(a3 + 224) = v5 | (v13 << 8);
  if (v39 != -1)
    ((void (*)(_QWORD *, WTF **))off_1E34CBE20[v39])(v37, v38);
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v34;
  v34 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v35;
  v35 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v23);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebKit::WebWheelEventCoalescer::nextEventToDispatch@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  char v31;
  char v32;
  int v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  float32x2_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  float32x4_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char *v74;
  int v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char v83;
  int v84;
  unsigned int v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  char v94;
  char v95;
  char v96;
  int v97;
  int v98;
  int v99;
  float32x4_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  float32x4_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  __int16 v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  _QWORD v117[4];

  v3 = *this;
  if (*this == this[1])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 112) = 0;
    return this;
  }
  v4 = (uint64_t)this;
  v5 = (float32x4_t *)(this[2] + 112 * v3);
  v6 = *v5;
  v7 = v5[2];
  v111 = v5[1];
  v112 = v7;
  v110 = v6;
  v8 = v5[3];
  v9 = v5[4];
  v10 = v5[6];
  v115 = v5[5];
  v116 = v10;
  v113 = v8;
  v114 = v9;
  if (v3 == *((unsigned int *)this + 6) - 1)
    v11 = 0;
  else
    v11 = v3 + 1;
  *this = v11;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = (_OWORD *)WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, 1uLL, (unint64_t)&v110);
  v14 = (_OWORD *)(*(_QWORD *)v12 + 112 * *(unsigned int *)(v12 + 12));
  v16 = v13[1];
  v15 = v13[2];
  *v14 = *v13;
  v14[1] = v16;
  v14[2] = v15;
  v17 = v13[6];
  v18 = v13[3];
  v19 = v13[4];
  v14[5] = v13[5];
  v14[6] = v17;
  v14[3] = v18;
  v14[4] = v19;
  v20 = *(_QWORD *)v4;
  v21 = *(_QWORD *)(v4 + 8);
  ++*(_DWORD *)(v12 + 12);
  v22 = v110.i8[0];
  v23 = v110.u8[1];
  v108 = *(__int32 *)((char *)v110.i32 + 2);
  v109 = v110.i16[3];
  v24 = v110.i64[1];
  this = (uint64_t *)v111.i64[1];
  v25 = v111.i64[0];
  v27 = v112.i64[1];
  v26 = (void *)v112.i64[0];
  v100 = v113;
  v28 = v114.i32[0];
  v29 = v114.i32[1];
  v30 = v114.i32[2];
  v31 = v114.i8[12];
  v32 = v114.i8[13];
  v33 = v114.u8[14];
  v34 = v114.i8[15];
  v35 = v115.u64[1];
  v36 = v115.i64[0];
  v37 = v116.i32[0];
  v38 = v116.i32[1];
  v39 = *(float32x2_t *)&v116.u32[2];
  if (v20 != v21)
  {
    v40 = *(_QWORD *)(v4 + 16) + 112 * v20;
    if (*(_OWORD *)&v112 == *(_OWORD *)(v40 + 32))
    {
      v89 = v114.i8[15];
      while (v23 == *(unsigned __int8 *)(v40 + 1)
           && *(unsigned __int8 *)(v40 + 64) == v28
           && v29 == *(_DWORD *)(v40 + 68)
           && v30 == *(_DWORD *)(v40 + 72)
           && (v33 == 0) != (*(_BYTE *)(v40 + 78) != 0))
      {
        v41 = *(_OWORD *)v40;
        v42 = *(_OWORD *)(v40 + 32);
        v102 = *(_OWORD *)(v40 + 16);
        v103 = v42;
        v101 = v41;
        v43 = *(float32x4_t *)(v40 + 48);
        v44 = *(_OWORD *)(v40 + 64);
        v45 = *(_OWORD *)(v40 + 96);
        v106 = *(_OWORD *)(v40 + 80);
        v107 = v45;
        v104 = v43;
        v105 = v44;
        if (v20 == *(unsigned int *)(v4 + 24) - 1)
          v46 = 0;
        else
          v46 = v20 + 1;
        *(_QWORD *)v4 = v46;
        v47 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v47 == *(_DWORD *)(v12 + 8))
        {
          v48 = v37;
          v49 = (_OWORD *)WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v47 + 1, (unint64_t)&v101);
          LOBYTE(v37) = v48;
          v50 = (_OWORD *)(*(_QWORD *)v12 + 112 * *(unsigned int *)(v12 + 12));
          v51 = v49[6];
          v53 = v49[3];
          v52 = v49[4];
          v50[5] = v49[5];
          v50[6] = v51;
          v50[3] = v53;
          v50[4] = v52;
          v55 = v49[1];
          v54 = v49[2];
          *v50 = *v49;
          v50[1] = v55;
          v50[2] = v54;
        }
        else
        {
          v56 = (_OWORD *)(*(_QWORD *)v12 + 112 * v47);
          v57 = v101;
          v58 = v103;
          v56[1] = v102;
          v56[2] = v58;
          *v56 = v57;
          v59 = v104;
          v60 = v105;
          v61 = v107;
          v56[5] = v106;
          v56[6] = v61;
          v56[3] = v59;
          v56[4] = v60;
        }
        v62 = 0;
        ++*(_DWORD *)(v12 + 12);
        v63 = BYTE1(v101);
        v24 = *((_QWORD *)&v101 + 1);
        v27 = *((_QWORD *)&v103 + 1);
        v26 = (void *)v103;
        v30 = DWORD2(v105);
        v31 = BYTE12(v105);
        v93 = BYTE14(v105);
        v95 = BYTE13(v105);
        v36 = v106;
        v91 = DWORD1(v107);
        v64 = 0;
        v97 = v105;
        v98 = DWORD1(v105);
        if ((_BYTE)v37 && (_BYTE)v107)
        {
          v62 = COERCE_UNSIGNED_INT(*(float *)&v35 + *((float *)&v106 + 2)) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)&v35 + 1)+ *((float *)&v106 + 3)) << 32);
          v64 = 1;
        }
        v35 = v62;
        v65 = v64;
        v39 = vadd_f32(v39, *(float32x2_t *)((char *)&v107 + 8));
        v100 = vaddq_f32(v100, v104);
        WTF::UUID::UUID((WTF::UUID *)v117);
        v25 = v117[0];
        this = (uint64_t *)v117[1];
        v20 = *(_QWORD *)v4;
        if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
        {
          v34 = v89;
          v37 = v65;
          LOBYTE(v33) = v93;
          v32 = v95;
          v38 = v91;
          v23 = v63;
          v22 = 6;
          v28 = v97;
          v29 = v98;
          break;
        }
        v40 = *(_QWORD *)(v4 + 16) + 112 * v20;
        v34 = v89;
        v23 = v63;
        v66 = v35;
        if (v26 != *(void **)(v40 + 32))
        {
          v22 = 6;
          v37 = v65;
          LOBYTE(v33) = v93;
          v32 = v95;
          v38 = v91;
          v28 = v97;
          v29 = v98;
          goto LABEL_29;
        }
        v22 = 6;
        v37 = v65;
        v33 = v93;
        v32 = v95;
        v38 = v91;
        v28 = v97;
        v29 = v98;
        if (v27 != *(_QWORD *)(v40 + 40))
          goto LABEL_29;
      }
    }
  }
  v66 = v35;
LABEL_29:
  v68 = *(_QWORD *)(v4 + 256);
  v67 = *(_QWORD *)(v4 + 264);
  if (v68)
  {
    if (v67 + 1 != v68)
      goto LABEL_48;
    LODWORD(v69) = *(_DWORD *)(v4 + 280);
  }
  else
  {
    v69 = *(unsigned int *)(v4 + 280);
    if (v67)
    {
      if (v67 != v69 - 1)
        goto LABEL_48;
    }
    else if ((_DWORD)v69)
    {
      v67 = 0;
      goto LABEL_48;
    }
  }
  v87 = v66;
  v88 = v25;
  v90 = (uint64_t)this;
  v92 = v38;
  v94 = v33;
  v96 = v32;
  v83 = v31;
  v84 = v30;
  v99 = v29;
  v70 = v27;
  v86 = v26;
  v85 = v23;
  v82 = v37;
  v71 = v69;
  v72 = ((unint64_t)v69 >> 2) + v69;
  if (v72 <= 0xF)
    v72 = 15;
  if (v72 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return this;
  }
  v73 = v34;
  v74 = *(char **)(v4 + 272);
  v75 = v72 + 1;
  v76 = (char *)WTF::fastMalloc((WTF *)(8 * (v72 + 1)));
  *(_DWORD *)(v4 + 280) = v75;
  *(_QWORD *)(v4 + 272) = v76;
  v78 = *(_QWORD *)(v4 + 256);
  v77 = *(_QWORD *)(v4 + 264);
  if (v78 <= v77)
  {
    memcpy(&v76[8 * v78], &v74[8 * v78], 8 * v77 - 8 * v78);
  }
  else
  {
    memcpy(v76, v74, 8 * v77);
    v79 = *(_QWORD *)(v4 + 256);
    v80 = v79 - v71 + *(unsigned int *)(v4 + 280);
    memcpy((void *)(*(_QWORD *)(v4 + 272) + 8 * v80), &v74[8 * v79], 8 * v71 - 8 * v79);
    *(_QWORD *)(v4 + 256) = v80;
  }
  v27 = v70;
  v34 = v73;
  v37 = v82;
  LOBYTE(v23) = v85;
  v26 = v86;
  v66 = v87;
  v29 = v99;
  v25 = v88;
  this = (uint64_t *)v90;
  if (v74)
  {
    if (*(char **)(v4 + 272) == v74)
    {
      *(_QWORD *)(v4 + 272) = 0;
      *(_DWORD *)(v4 + 280) = 0;
    }
    WTF::fastFree((WTF *)v74, (void *)v85);
    v29 = v99;
    v34 = v73;
    v37 = v82;
    v25 = v88;
    this = (uint64_t *)v90;
    LOBYTE(v23) = v85;
    v27 = v70;
    v26 = v86;
    v66 = v87;
  }
  v67 = *(_QWORD *)(v4 + 264);
  v31 = v83;
  v30 = v84;
  LOBYTE(v33) = v94;
  v32 = v96;
  v38 = v92;
LABEL_48:
  *(_QWORD *)(*(_QWORD *)(v4 + 272) + 8 * v67) = v12;
  if (v67 == *(unsigned int *)(v4 + 280) - 1)
    v81 = 0;
  else
    v81 = v67 + 1;
  *(_QWORD *)(v4 + 264) = v81;
  *(_BYTE *)a2 = v22;
  *(_BYTE *)(a2 + 1) = v23;
  *(_DWORD *)(a2 + 2) = v108;
  *(_WORD *)(a2 + 6) = v109;
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = this;
  *(_QWORD *)(a2 + 32) = v26;
  *(_QWORD *)(a2 + 40) = v27;
  *(float32x4_t *)(a2 + 48) = v100;
  *(_DWORD *)(a2 + 64) = v28;
  *(_DWORD *)(a2 + 68) = v29;
  *(_DWORD *)(a2 + 72) = v30;
  *(_BYTE *)(a2 + 76) = v31;
  *(_BYTE *)(a2 + 77) = v32;
  *(_BYTE *)(a2 + 78) = v33;
  *(_BYTE *)(a2 + 79) = v34;
  *(_QWORD *)(a2 + 80) = v36;
  *(_QWORD *)(a2 + 88) = v66;
  *(_DWORD *)(a2 + 96) = v37;
  *(_DWORD *)(a2 + 100) = v38;
  *(float32x2_t *)(a2 + 104) = v39;
  *(_BYTE *)(a2 + 112) = 1;
  return this;
}

void WebKit::WebWheelEventCoalescer::takeOldestEventBeingProcessed(WebKit::WebWheelEventCoalescer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WTF ***v7;
  WTF **v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 32);
  if (v3 == *((_QWORD *)this + 33))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 34);
    v6 = *(_QWORD *)(v5 + 8 * v3);
    *(_QWORD *)(v5 + 8 * v3) = 0;
    v7 = (WTF ***)(*((_QWORD *)this + 34) + 8 * v3);
    v8 = *v7;
    *v7 = 0;
    if (v8)
    {
      std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v7, v8);
      v3 = *((_QWORD *)this + 32);
    }
    if (v3 == *((unsigned int *)this + 70) - 1)
      v9 = 0;
    else
      v9 = v3 + 1;
    *((_QWORD *)this + 32) = v9;
    v10 = *(_DWORD *)(v6 + 12);
    if (v10)
    {
      v11 = *(_QWORD *)v6 + 112 * v10;
      v12 = *(_OWORD *)(v11 - 32);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v11 - 48);
      *(_OWORD *)(a2 + 80) = v12;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v11 - 16);
      v13 = *(_OWORD *)(v11 - 96);
      *(_OWORD *)a2 = *(_OWORD *)(v11 - 112);
      *(_OWORD *)(a2 + 16) = v13;
      v14 = *(_OWORD *)(v11 - 64);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v11 - 80);
      *(_OWORD *)(a2 + 48) = v14;
      *(_BYTE *)(a2 + 112) = 1;
      v15 = 0;
      std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)&v15, (WTF **)v6);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void WebKit::WebWheelEventCoalescer::clear(WebKit::WebWheelEventCoalescer *this, void *a2)
{
  WTF *v3;
  unint64_t v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if ((WebKit::WebWheelEventCoalescer *)((char *)this + 32) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = *((_QWORD *)this + 32);
  v6 = *((_QWORD *)this + 33);
  v7 = (WTF *)*((_QWORD *)this + 34);
  if (v5 <= v6)
  {
    if (v5 == v6)
      goto LABEL_25;
    v12 = (void **)((char *)v7 + 8 * v5);
    v13 = 8 * v6 - 8 * v5;
    do
    {
      a2 = *v12;
      *v12 = 0;
      if (a2)
        std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v12, (WTF **)a2);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    if (v6)
    {
      v8 = 8 * v6;
      do
      {
        a2 = *(void **)v7;
        *(_QWORD *)v7 = 0;
        if (a2)
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v7, (WTF **)a2);
        v7 = (WTF *)((char *)v7 + 8);
        v8 -= 8;
      }
      while (v8);
      v7 = (WTF *)*((_QWORD *)this + 34);
      v5 = *((_QWORD *)this + 32);
    }
    v9 = *((unsigned int *)this + 70);
    if (v5 != v9)
    {
      v10 = (void **)((char *)v7 + 8 * v5);
      v11 = 8 * v9 - 8 * v5;
      do
      {
        a2 = *v10;
        *v10 = 0;
        if (a2)
          std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v10, (WTF **)a2);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 34);
LABEL_25:
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  if (v7)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v7, a2);
  }
}

void WebKit::WebSQLiteDatabaseTracker::~WebSQLiteDatabaseTracker(WebKit::WebSQLiteDatabaseTracker *this, WebCore::SQLiteDatabaseTrackerClient *a2)
{
  void *v3;
  uint64_t v4;

  WebCore::SQLiteDatabaseTracker::setClient(0, a2);
  if (*((_QWORD *)this + 4) && !*((_BYTE *)this + 40))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 0);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WebKit::WebSQLiteDatabaseTracker::~WebSQLiteDatabaseTracker(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void std::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](int a1, WTF **this)
{
  WTF *v3;

  if (this)
  {
    v3 = *this;
    if (*this)
    {
      *this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v3, this);
    }
    WTF::fastFree((WTF *)this, this);
  }
}

uint64_t WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::String const&,BOOL &>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    result = (uint64_t)WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    *((_BYTE *)v15 + 8) = *(_BYTE *)a3;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_27:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_27;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v20 + 16 * v21;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(v8 + 16 * v14 + 8) = *(_BYTE *)a3;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  char v27;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v4])(&v27, a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = v5 - 1;
  v8 = *(_QWORD *)a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *(_QWORD *)a1) >> 3);
  v10 = ((_DWORD)v9 + 1) & (v5 - 1);
  v11 = *(_QWORD *)a1 + 24 * v10;
  result = *(_QWORD *)v11;
  if (*(_QWORD *)v11)
  {
    v25 = *(_DWORD *)(a1 + 16);
    v13 = v9;
    v14 = (WTF::StringImpl **)(v8 + 24 * v9);
    v15 = (v9 + 1) & v7;
    do
    {
      v16 = *(_DWORD *)(result + 16);
      if (v16 >= 0x100)
        result = v16 >> 8;
      else
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      if (((v15 + v5 - ((result ^ v25) & v7)) & v7) == 0)
        break;
      WTF::String::operator=(v14, (WTF::StringImpl *)v11);
      v17 = v8 + 24 * v13 + 8;
      v18 = v8 + 24 * v10;
      v19 = v18 + 8;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v17, v18 + 8);
      v23 = *(_DWORD *)(v18 + 16);
      v22 = (_DWORD *)(v18 + 16);
      v21 = v23;
      if (v23 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v21])(&v26, v19);
      *v22 = -1;
      v24 = *(WTF::StringImpl **)v11;
      *(_QWORD *)v11 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v20);
        else
          *(_DWORD *)v24 -= 2;
      }
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 16) = 0;
      v10 = (v15 + 1) & v7;
      v8 = *(_QWORD *)a1;
      v13 = v15;
      v14 = (WTF::StringImpl **)(*(_QWORD *)a1 + 24 * v15);
      v11 = *(_QWORD *)a1 + 24 * v10;
      result = *(_QWORD *)v11;
      v15 = (v15 + 1) & v7;
    }
    while (*(_QWORD *)v11);
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= 9 && 6 * v6 < v5)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v5 >> 1);
  return result;
}

unint64_t WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 112 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::NativeWebWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2492493)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 112 * a2;
      result = WTF::fastMalloc((WTF *)(112 * a2));
      *(_DWORD *)(v2 + 8) = (613566757 * (unint64_t)(v5 >> 4)) >> 32;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = 112 * v4;
        v8 = v3;
        do
        {
          v9 = *(_OWORD *)v8;
          v10 = *((_OWORD *)v8 + 2);
          *(_OWORD *)(result + 16) = *((_OWORD *)v8 + 1);
          *(_OWORD *)(result + 32) = v10;
          *(_OWORD *)result = v9;
          v11 = *((_OWORD *)v8 + 3);
          v12 = *((_OWORD *)v8 + 4);
          v13 = *((_OWORD *)v8 + 6);
          *(_OWORD *)(result + 80) = *((_OWORD *)v8 + 5);
          *(_OWORD *)(result + 96) = v13;
          *(_OWORD *)(result + 48) = v11;
          *(_OWORD *)(result + 64) = v12;
          result += 112;
          v8 = (WTF *)((char *)v8 + 112);
          v7 -= 112;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34CBE70;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34CBE70;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8);
    v4 = (unsigned __int8 *)(v3 + 24);
    if (__ldaxr((unsigned __int8 *)(v3 + 24)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
LABEL_6:
      if (*(_QWORD *)(v3 + 32) == *(_QWORD *)(v2 + 24))
      {
        *(_QWORD *)(v3 + 32) = 0;
        if (!*(_BYTE *)(v3 + 40))
          result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), 0);
      }
      v6 = __ldxr(v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, v4))
          return result;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
    }
    result = MEMORY[0x19AEABB3C](v3 + 24);
    goto LABEL_6;
  }
  return result;
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreeOverflowScrollingNodeIOS::create@<X0>(WebCore::ScrollingTreeScrollingNode **a1@<X8>)
{
  WebCore::ScrollingTreeScrollingNode *v2;
  WebCore::ScrollingTreeScrollingNode *result;

  v2 = (WebCore::ScrollingTreeScrollingNode *)WTF::fastMalloc((WTF *)0x158);
  result = WebKit::ScrollingTreeOverflowScrollingNodeIOS::ScrollingTreeOverflowScrollingNodeIOS(v2);
  *a1 = v2;
  return result;
}

void sub_19725D39C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreeOverflowScrollingNodeIOS::ScrollingTreeOverflowScrollingNodeIOS(WebCore::ScrollingTreeScrollingNode *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)WebCore::ScrollingTreeOverflowScrollingNode::ScrollingTreeOverflowScrollingNode() = &off_1E34CBE98;
  v2 = WTF::fastMalloc((WTF *)0x38);
  WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate((WebCore::ScrollingTreeScrollingNodeDelegate *)v2, a1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_1E34CC038;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 48) = 0;
  v3 = *((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_19725D42C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;

  WTF::fastFree(v3, a2);
  MEMORY[0x19AEB3F30](v2);
  _Unwind_Resume(a1);
}

void WebKit::ScrollingTreeOverflowScrollingNodeIOS::~ScrollingTreeOverflowScrollingNodeIOS(WebKit::ScrollingTreeOverflowScrollingNodeIOS *this)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)MEMORY[0x19AEB3F30](this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::scrollView(WebKit::ScrollingTreeOverflowScrollingNodeIOS *this)
{
  uint64_t v1;

  v1 = objc_msgSend(*(id *)(*((_QWORD *)this + 12) + 24), "delegate");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v1;
  else
    return 0;
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollView(id *this)
{
  uint64_t v1;

  v1 = objc_msgSend(this[3], "delegate");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v1;
  else
    return 0;
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreePluginScrollingNodeIOS::create@<X0>(WebCore::ScrollingTreeScrollingNode **a1@<X8>)
{
  WebCore::ScrollingTreeScrollingNode *v2;
  WebCore::ScrollingTreeScrollingNode *result;

  v2 = (WebCore::ScrollingTreeScrollingNode *)WTF::fastMalloc((WTF *)0x158);
  result = WebKit::ScrollingTreePluginScrollingNodeIOS::ScrollingTreePluginScrollingNodeIOS(v2);
  *a1 = v2;
  return result;
}

void sub_19725D54C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ScrollingTreeScrollingNode *WebKit::ScrollingTreePluginScrollingNodeIOS::ScrollingTreePluginScrollingNodeIOS(WebCore::ScrollingTreeScrollingNode *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)WebCore::ScrollingTreePluginScrollingNode::ScrollingTreePluginScrollingNode() = &off_1E34CBF68;
  v2 = WTF::fastMalloc((WTF *)0x38);
  WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate((WebCore::ScrollingTreeScrollingNodeDelegate *)v2, a1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_1E34CC038;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 48) = 0;
  v3 = *((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_19725D5DC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF *v3;

  WTF::fastFree(v3, a2);
  MEMORY[0x19AEB3E40](v2);
  _Unwind_Resume(a1);
}

void WebKit::ScrollingTreePluginScrollingNodeIOS::~ScrollingTreePluginScrollingNodeIOS(WebKit::ScrollingTreePluginScrollingNodeIOS *this)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)MEMORY[0x19AEB3E40](this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  unsigned int v9;
  int v10;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0)
    return 0;
  if ((*(_BYTE *)(a2 + 41) & 0x10) != 0)
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::resetScrollViewDelegate(*(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(*(_QWORD *)(a1 + 96) + 24));
  result = WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren();
  if ((_DWORD)result)
  {
    v9 = *(unsigned __int8 *)(a2 + 16);
    v3 = v9 > 5;
    v10 = (1 << v9) & 0x2B;
    if (v3 || v10 == 0)
    {
      result = 96;
      __break(0xC471u);
    }
    else
    {
      WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateBeforeChildren(*(WebKit::ScrollingTreeScrollingNodeDelegateIOS **)(a1 + 96), (WebCore::LayerRepresentation **)a2);
      return 1;
    }
  }
  return result;
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::commitStateAfterChildren(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = a2[16];
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0)
    return 0;
  WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(*(_QWORD *)(a1 + 96), (const WebCore::ScrollingStateScrollingNode *)a2);
  return WebCore::ScrollingTreeScrollingNode::commitStateAfterChildren();
}

uint64_t WebKit::ScrollingTreePluginScrollingNodeIOS::repositionScrollingLayers(id **this)
{
  return WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(this[12]);
}

WebCore::ScrollingTreeScrollingNodeDelegate *WebKit::ScrollingTreeScrollingNodeDelegateIOS::scrollViewDidScroll(WebCore::ScrollingTreeScrollingNodeDelegate *this, const WebCore::FloatPoint *a2, float a3, float a4)
{
  IntPoint v6;
  float v7[4];

  if (!*((_BYTE *)this + 49))
  {
    v6 = (IntPoint)WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin(this);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v7, &v6);
    v7[2] = a3 - v7[0];
    v7[3] = a4 - v7[1];
    return (WebCore::ScrollingTreeScrollingNodeDelegate *)WebCore::ScrollingTreeScrollingNode::wasScrolledByDelegatedScrolling();
  }
  return this;
}

void WebKit::ScrollingTreeScrollingNodeDelegateIOS::~ScrollingTreeScrollingNodeDelegateIOS(WebKit::ScrollingTreeScrollingNodeDelegateIOS *this)
{
  void *v2;
  void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (void *)objc_msgSend(*((id *)this + 3), "delegate");
  v4 = v2;
  if (v2 && objc_msgSend(v2, "delegate") == *((_QWORD *)this + 5))
    objc_msgSend(v4, "setDelegate:", 0);
  v5 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    CFRelease(v7);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v3);
  WebCore::ScrollingTreeScrollingNodeDelegate::~ScrollingTreeScrollingNodeDelegate(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::ScrollingTreeScrollingNodeDelegateIOS::~ScrollingTreeScrollingNodeDelegateIOS(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::startAnimatedScrollToPosition(id *a1, float a2, float a3)
{
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  IntPoint v10;
  float v11[4];

  v10 = (IntPoint)WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin((WebCore::ScrollingTreeScrollingNodeDelegate *)a1);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v11, &v10);
  v11[2] = a2 + v11[0];
  v11[3] = a3 + v11[1];
  v6 = objc_msgSend(a1[3], "delegate");
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  WebCore::FloatPoint::operator CGPoint();
  if ((isKindOfClass & 1) != 0)
    v8 = (void *)v6;
  else
    v8 = 0;
  objc_msgSend(v8, "setContentOffset:animated:", 1);
  return 1;
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::stopAnimatedScroll(id *this)
{
  uint64_t v1;
  void *v2;

  v1 = objc_msgSend(this[3], "delegate");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = (void *)v1;
  else
    v2 = 0;
  return objc_msgSend(v2, "_wk_stopScrollingAndZooming");
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int a5, _QWORD *a6)
{
  unsigned int **v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  void **v15;
  uint64_t v16;
  void *v17;
  WebKit *v18;
  void *v19;
  const __CFString *v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  const __CFString *v26;
  _BOOL8 v27;
  void *v28;
  const void *v29;
  _BOOL8 v30;
  void *v31;
  const void *v32;
  WKASCAuthorizationPresenterDelegate *v33;
  void *v34;
  void *v35;
  const void *v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  BOOL v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;

  *(_QWORD *)a1 = 0;
  v11 = (unsigned int **)(a2 + 8);
  v12 = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  v13 = *v11;
  if (*v11)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_OWORD *)(a1 + 16) = 0u;
  v15 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  v16 = objc_msgSend(objc_alloc((Class)WebKit::getASCAuthorizationPresentationContextClass[0]((WebKit *)v12)), "initWithRequestContext:appIdentifier:", 0, 0);
  v17 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  if (v17)
    CFRelease(v17);
  v18 = (WebKit *)objc_msgSend((id)WebKit::getASCAuthorizationPresentationContextClass[0]((WebKit *)v17), "instancesRespondToSelector:", sel_setServiceName_);
  if ((_DWORD)v18)
  {
    v19 = *v15;
    if (*a3)
      v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v20 = &stru_1E351F1B8;
    v18 = (WebKit *)objc_msgSend(v19, "setServiceName:", v20);
  }
  if ((a5 & 1) != 0)
  {
    v50 = 0;
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v50)|| (v49 = 1, WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v49)))
    {
      v48 = 3;
      v21 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v48);
      if (!v21)
      {
        v22 = *v15;
        v23 = objc_msgSend(objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0]((WebKit *)v21)), "initAssertionPlaceholderChoice");
        objc_msgSend(v22, "addLoginChoice:", v23);
        if (v23)
        {
          v24 = (const void *)v23;
LABEL_26:
          CFRelease(v24);
        }
      }
    }
  }
  else
  {
    v25 = (void *)objc_msgSend(objc_alloc((Class)WebKit::getASCPublicKeyCredentialCreationOptionsClass[0](v18)), "init");
    if (*a6)
      v26 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v26 = &stru_1E351F1B8;
    objc_msgSend(v25, "setUserName:", v26);
    v53 = 3;
    v27 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v53);
    if (v27)
    {
      v28 = *v15;
      v29 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getASCPlatformPublicKeyCredentialLoginChoiceClass[0]((WebKit *)v27)), "initRegistrationChoiceWithOptions:", v25);
      objc_msgSend(v28, "addLoginChoice:", v29);
      if (v29)
        CFRelease(v29);
    }
    v52 = 0;
    v30 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v52);
    if (v30
      || (v51 = 1,
          v30 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v51)))
    {
      v31 = *v15;
      v32 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0]((WebKit *)v30)), "initRegistrationChoiceWithOptions:", v25);
      objc_msgSend(v31, "addLoginChoice:", v32);
      if (v32)
        CFRelease(v32);
    }
    if (v25)
    {
      v24 = v25;
      goto LABEL_26;
    }
  }
  v33 = -[WKASCAuthorizationPresenterDelegate initWithCoordinator:]([WKASCAuthorizationPresenterDelegate alloc], "initWithCoordinator:", a1);
  v34 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v33;
  if (v34)
    CFRelease(v34);
  v35 = (void *)objc_msgSend(objc_alloc((Class)WebKit::getASCAuthorizationPresenterClass[0]((WebKit *)v34)), "init");
  v36 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v35;
  if (v36)
  {
    CFRelease(v36);
    v35 = *(void **)(a1 + 24);
  }
  objc_msgSend(v35, "setDelegate:", *(_QWORD *)(a1 + 32));
  v37 = *(unsigned int **)(a1 + 8);
  if (v37)
  {
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
  }
  v39 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v39 = MEMORY[0x1E0C809A0];
  v39[1] = 50331650;
  v39[2] = WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke;
  v39[3] = &WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::descriptor;
  v39[4] = v37;
  if (a5
    && (v47 = 3,
        WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v47)))
  {
    v46 = 0;
    v40 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v46);
    v41 = 1;
    if (!v40)
    {
      v45 = 1;
      v41 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v45);
    }
    *(_BYTE *)(a1 + 48) = v41;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v42 = off_1E34CC1B8;
    v42[1] = v39;
    v42[2] = a1;
    v43 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v42;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    _Block_release(0);
    v39 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 24), "presentAuthorizationWithContext:completionHandler:", *(_QWORD *)(a1 + 16), v39);
  }
  _Block_release(v39);
  return a1;
}

void sub_19725E818(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;
  const void **v3;
  uint64_t *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  _Block_release(v2);
  v7 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 88);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v6);
  v9 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(const void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *v4;
  *v4 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *v3;
  *v3 = 0;
  if (v16)
    CFRelease(v16);
  v17 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v6);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v1, v6);
  _Unwind_Resume(a1);
}

void WebKit::AuthenticatorPresenterCoordinator::~AuthenticatorPresenterCoordinator(WebKit::AuthenticatorPresenterCoordinator *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;

  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (uint64_t *)((char *)this + 96);
  if (*((_QWORD *)this + 12))
  {
    v20 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WebKit::AuthenticatorPresenterCoordinator *)((char *)this + 96), (uint64_t)&v20);
    v6 = v20;
    v20 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *v5;
    *v5 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *v5 = 0;
  }
  v8 = *((_QWORD *)this + 11);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
    CFRelease(v16);
  v17 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void sub_19725EBC4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v12 = *(_QWORD *)(v10 + 96);
  *(_QWORD *)(v10 + 96) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(v10 + 88);
  if (v13)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, a2);
  v14 = *(_QWORD *)(v10 + 80);
  *(_QWORD *)(v10 + 80) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(const void **)(v10 + 72);
  *(_QWORD *)(v10 + 72) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 64) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v10 + 56) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v10 + 40) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(const void **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(v10 + 16);
  *(_QWORD *)(v10 + 16) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(unsigned int **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v10, a2);
  _Unwind_Resume(a1);
}

void WebKit::AuthenticatorPresenterCoordinator::updatePresenter(uint64_t a1, int a2)
{
  id v3;
  const void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  const void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;

  switch(a2)
  {
    case 0:
      v3 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v3, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v3), 4, 0);
      objc_msgSend(*(id *)(a1 + 24), "updateInterfaceForUserVisibleError:", v4);
      goto LABEL_13;
    case 1:
      v10 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v10, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v10), 5, 0);
      objc_msgSend(*(id *)(a1 + 24), "updateInterfaceForUserVisibleError:", v4);
      goto LABEL_13;
    case 2:
      v6 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v6, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v6), 10, 0);
      (*(void (**)(_QWORD, _QWORD, const void *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0, v4);
      goto LABEL_13;
    case 3:
      v7 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v7, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v7), 9, 0);
      (*(void (**)(_QWORD, _QWORD, const void *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0, v4);
      goto LABEL_13;
    case 4:
      v5 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v5, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v5), 8, 0);
      (*(void (**)(_QWORD, _QWORD, const void *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0, v4);
      goto LABEL_13;
    case 5:
      v11 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v11, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v11), 6, 0);
      objc_msgSend(*(id *)(a1 + 24), "updateInterfaceForUserVisibleError:", v4);
      goto LABEL_13;
    case 6:
      v12 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v4 = (const void *)objc_msgSend(v12, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v12), 7, 0);
      objc_msgSend(*(id *)(a1 + 24), "updateInterfaceForUserVisibleError:", v4);
LABEL_13:
      if (!v4)
        return;
      goto LABEL_18;
    case 7:
      if (*(_BYTE *)(a1 + 48))
      {
        v8 = *(void **)(a1 + 16);
        v9 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0]((WebKit *)a1)), "initAssertionPlaceholderChoice");
        objc_msgSend(v8, "addLoginChoice:", v9);
        if (v9)
          CFRelease(v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
      }
      else
      {
        v13 = objc_alloc(MEMORY[0x1E0CB35C8]);
        v4 = (const void *)objc_msgSend(v13, "initWithDomain:code:userInfo:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v13), 5, 0);
        v14 = *(void **)(a1 + 24);
        v15 = objc_msgSend(*(id *)(a1 + 16), "serviceName");
        v16 = *(unsigned int **)(a1 + 8);
        if (v16)
        {
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
        v18 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
        *v18 = MEMORY[0x1E0C809A0];
        v18[1] = 50331650;
        v18[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::{lambda(void *)#1}::__invoke;
        v18[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::descriptor;
        v18[4] = v16;
        objc_msgSend(v14, "presentError:forService:completionHandler:", v4, v15, v18);
        _Block_release(v18);
        if (v4)
LABEL_18:
          CFRelease(v4);
      }
      return;
    default:
      return;
  }
}

void sub_19725F05C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;

  v3 = v2;
  _Block_release(v3);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::requestPin(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  WTF::StringImpl *v10;

  v5 = (uint64_t *)(a1 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    v10 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 96), (uint64_t)&v10);
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  v8 = *a3;
  *a3 = 0;
  result = *v5;
  *v5 = v8;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (!*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 104) = 1;
    return objc_msgSend(*(id *)(a1 + 24), "presentPINEntryInterface");
  }
  return result;
}

void sub_19725F184(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuthenticatorPresenterCoordinator::selectAssertionResponse(uint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  JSC::ArrayBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::ArrayBuffer *v20;
  id v21;
  WTF *v22;
  const __CFString *v23;
  const __CFString *v24;
  const void *v25;
  WebKit *v26;
  uint64_t v27;
  WTF **v28;
  uint64_t v29;
  JSC::ArrayBuffer *v30;
  uint64_t v31;
  uint64_t v32;
  JSC::ArrayBuffer *v33;
  id v34;
  WTF *v35;
  const __CFString *v36;
  const __CFString *v37;
  const void *v38;
  void *v39;
  const void *v40;
  _BYTE v41[24];

  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *a4;
  *a4 = 0;
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a3)
  {
    v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
    {
      *(_QWORD *)(a1 + 88) = 0;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v11);
    }
    v14 = a2[3];
    if ((_DWORD)v14)
    {
      v15 = *(WTF ***)a2;
      v16 = 8 * v14;
      do
      {
        if (*((_QWORD *)*v15 + 18))
        {
          v17 = (JSC::ArrayBuffer *)*((_QWORD *)*v15 + 17);
          if (v17)
          {
            v18 = JSC::ArrayBuffer::span(v17);
            v17 = (JSC::ArrayBuffer *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v18, v19);
            v20 = v17;
          }
          else
          {
            v20 = 0;
          }
          v21 = objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0](v17));
          v22 = *v15;
          if (*((_QWORD *)*v15 + 18))
          {
            v23 = (const __CFString *)WTF::StringImpl::operator NSString *();
            v22 = *v15;
          }
          else
          {
            v23 = &stru_1E351F1B8;
          }
          if (*((_QWORD *)v22 + 19))
            v24 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v24 = &stru_1E351F1B8;
          v25 = (const void *)objc_msgSend(v21, "initWithName:displayName:userHandle:", v23, v24, v20);
          objc_msgSend(v12, "addObject:", v25);
          WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((uint64_t)v41, (uint64_t *)(a1 + 88), (WTF::StringImpl **)*v15 + 18, v15);
          if (v25)
            CFRelease(v25);
          if (v20)
            CFRelease(v20);
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    objc_msgSend(*(id *)(a1 + 24), "updateInterfaceWithLoginChoices:", v12);
    if (v12)
      CFRelease(v12);
  }
  else
  {
    v26 = *(WebKit **)(a1 + 88);
    if (v26)
    {
      *(_QWORD *)(a1 + 88) = 0;
      v26 = (WebKit *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v26, (WTF::StringImpl *)a2);
    }
    v27 = a2[3];
    if ((_DWORD)v27)
    {
      v28 = *(WTF ***)a2;
      v29 = 8 * v27;
      do
      {
        v30 = (JSC::ArrayBuffer *)*((_QWORD *)*v28 + 17);
        if (v30)
        {
          v31 = JSC::ArrayBuffer::span(v30);
          v30 = (JSC::ArrayBuffer *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v31, v32);
          v33 = v30;
        }
        else
        {
          v33 = 0;
        }
        v34 = objc_alloc((Class)WebKit::getASCPlatformPublicKeyCredentialLoginChoiceClass[0](v30));
        v35 = *v28;
        if (*((_QWORD *)*v28 + 18))
        {
          v36 = (const __CFString *)WTF::StringImpl::operator NSString *();
          v35 = *v28;
        }
        else
        {
          v36 = &stru_1E351F1B8;
        }
        if (*((_QWORD *)v35 + 19))
          v37 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v37 = &stru_1E351F1B8;
        v38 = (const void *)objc_msgSend(v34, "initWithName:displayName:userHandle:", v36, v37, v33);
        objc_msgSend(*(id *)(a1 + 16), "addLoginChoice:", v38);
        v26 = (WebKit *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((uint64_t)v41, (uint64_t *)(a1 + 88), (WTF::StringImpl **)*v28 + 18, v28);
        if (v38)
          CFRelease(v38);
        if (v33)
          CFRelease(v33);
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    if (*(_BYTE *)(a1 + 48))
    {
      v39 = *(void **)(a1 + 16);
      v40 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0](v26)), "initAssertionPlaceholderChoice");
      objc_msgSend(v39, "addLoginChoice:", v40);
      if (v40)
        CFRelease(v40);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  }
}

void sub_19725F534(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF **WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  WTF **result;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a3);
    v18 = *a4;
    *a4 = 0;
    result = (WTF **)v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF **)(*((uint64_t (**)(WTF **))*result + 1))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_32:
        result = (WTF **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
        v15 = result;
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_32;
    }
    v22 = v25 + 16 * v28;
    v21 = 1;
    goto LABEL_37;
  }
  result = (WTF **)WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v19 = *a2;
  if (*a2)
    v20 = *(unsigned int *)(v19 - 4);
  else
    v20 = 0;
  v21 = 0;
  v22 = v19 + 16 * v20;
LABEL_37:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v22;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::requestLAContextForUserVerification(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(result + 72))
  {
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    v4 = *(_QWORD *)(result + 64);
    *(_QWORD *)(result + 64) = v3;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_19725F804(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::dimissPresenter(uint64_t a1, char a2)
{
  id v3;
  id v4;
  const void *v5;

  if ((a2 & 1) == 0 && *(_QWORD *)(a1 + 56))
  {
    v3 = objc_alloc((Class)WebKit::getASCAppleIDCredentialClass((WebKit *)a1));
    v4 = objc_alloc_init(MEMORY[0x1E0C99D50]);
    v5 = (const void *)objc_msgSend(v3, "initWithUser:identityToken:state:", &stru_1E351F1B8, v4, 0);
    (*(void (**)(_QWORD, const void *, _QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v5, 0);
    if (v5)
      CFRelease(v5);
    if (v4)
      CFRelease(v4);
  }
  return objc_msgSend(*(id *)(a1 + 24), "dismissWithError:", 0);
}

void sub_19725F8C8(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::AuthenticatorPresenterCoordinator::setLAContext(WebKit::AuthenticatorPresenterCoordinator *this, CFTypeRef cf)
{
  uint64_t v4;
  const void *v5;

  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, CFTypeRef))(*(_QWORD *)v4 + 16))(v4, cf);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    if (cf)
      CFRetain(cf);
    v5 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = cf;
    if (v5)
      CFRelease(v5);
  }
}

void sub_19725F980(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::AuthenticatorPresenterCoordinator::didSelectAssertionResponse(WebKit::AuthenticatorPresenterCoordinator *this, WTF::StringImpl **a2, LAContext *a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;
  _DWORD *result;
  uint64_t v8;
  WebCore::AuthenticatorAssertionResponse *v9;

  v5 = (uint64_t *)((char *)this + 88);
  v6 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 11, a2, (const WTF::StringImpl *)a3);
  result = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::take(v5, v6, &v9);
  if (v9)
  {
    if (a3)
      WebCore::AuthenticatorAssertionResponse::setLAContext(v9, a3);
    v8 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void sub_19725FA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CcidConnection::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x48);
  result = WebKit::CcidConnection::CcidConnection(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_19725FAFC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CcidConnection::CcidConnection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::RunLoop *v9;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (unsigned int **)(a3 + 8);
  v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v7 = *v5;
  if (*v5)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 24) = v7;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  WTF::RunLoop::Timer::Timer<WebKit::CcidConnection>((WTF::RunLoop::TimerBase *)(a1 + 32), v9, a1, (uint64_t)WebKit::CcidConnection::startPolling, 0);
  *(_BYTE *)(a1 + 64) = 0;
  WebKit::CcidConnection::detectContactless((WebKit::CcidConnection *)a1);
  WebKit::CcidConnection::trySelectFidoApplet((WebKit::CcidConnection *)a1);
  return a1;
}

void sub_19725FBB8(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  uint64_t v3;
  const void *v5;

  v5 = *(const void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  if (v5)
    CFRelease(v5);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WebKit::CcidConnection::startPolling(WebKit::CcidConnection *this)
{
  WebKit::CcidConnection::detectContactless(this);
  return WebKit::CcidConnection::trySelectFidoApplet(this);
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer<WebKit::CcidConnection>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34CC1E0;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v10;
  return a1;
}

void sub_19725FCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::CcidConnection::~CcidConnection(WebKit::CcidConnection *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;

  *((_QWORD *)this + 4) = off_1E34ABE00;
  v2 = (WebKit::CcidConnection *)((char *)this + 32);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    CFRelease(v8);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

WTF *WebKit::CcidConnection::detectContactless(WebKit::CcidConnection *this)
{
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  void *v6;
  WTF *result;
  _QWORD *v8;
  WTF *v9[2];

  v2 = (WTF *)WTF::fastMalloc((WTF *)5);
  v9[1] = (WTF *)0x500000005;
  v9[0] = v2;
  *(_DWORD *)v2 = 51967;
  *((_BYTE *)v2 + 4) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v3 = (unsigned int *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34CC208;
  v5[1] = v3;
  v8 = v5;
  WebKit::CcidConnection::transact((uint64_t)this, (uint64_t *)v9, (uint64_t *)&v8);
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  result = v9[0];
  if (v9[0])
    return (WTF *)WTF::fastFree(v9[0], v6);
  return result;
}

void sub_19725FE58(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::CcidConnection::transact(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(void **)(a1 + 16);
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  *a3 = 0;
  v8 = malloc_type_malloc(0x40uLL, 0x10F004049D387C4uLL);
  *v8 = MEMORY[0x1E0C809A0];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::descriptor;
  v8[4] = a1;
  v8[5] = v5;
  v8[6] = v6;
  v8[7] = v7;
  objc_msgSend(v4, "beginSessionWithReply:", v8);
  _Block_release(v8);
}

void sub_19725FF6C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::CcidConnection::trySelectFidoApplet(WebKit::CcidConnection *this)
{
  WTF *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  void *v7;
  WTF *result;
  _QWORD *v9;
  WTF *v10[2];

  v2 = (WTF *)WTF::fastMalloc((WTF *)0xD);
  v3 = 0;
  v10[1] = (WTF *)0xD0000000DLL;
  v10[0] = v2;
  do
  {
    *((_BYTE *)v2 + v3) = fido::kCtapNfcAppletSelectionCommand[v3];
    ++v3;
  }
  while (v3 != 13);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34CC230;
  v6[1] = v4;
  v9 = v6;
  WebKit::CcidConnection::transact((uint64_t)this, (uint64_t *)v10, (uint64_t *)&v9);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  result = v10[0];
  if (v10[0])
    return (WTF *)WTF::fastFree(v10[0], v7);
  return result;
}

void sub_19726007C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

float WebCore::ScrollingTreeScrollingNodeDelegate::adjustedScrollPosition(WebCore::ScrollingTreeScrollingNodeDelegate *this, const FloatPoint *a2)
{
  return a2->m_x;
}

void WebCore::ScrollingTreeScrollingNodeDelegate::scrollbarStateForOrientation(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  *a1 = v1;
}

unsigned int *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::RunLoop *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0>(WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore>,WTF::StrongEnumHashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet::ClientDataType,WTF::String const)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke(WTF::RunLoop *result, uint64_t a2, uint64_t a3)
{
  WTF::RunLoop *v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::RunLoop *v6;
  WTF::RunLoop *v7;

  if (!a2 && a3)
  {
    v3 = result;
    WTF::RunLoop::main(result);
    v4 = (unsigned int *)*((_QWORD *)v3 + 4);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = &off_1E34CC0E0;
    *((_QWORD *)v6 + 1) = v4;
    v7 = v6;
    WTF::RunLoop::dispatch();
    result = v7;
    if (v7)
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

void sub_1972601E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CC0E0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC0E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::AuthenticatorManager *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::call(WebKit::AuthenticatorManager *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WebKit::AuthenticatorManager **)(v1 + 8);
    if (result)
      return (WebKit::AuthenticatorManager *)WebKit::AuthenticatorManager::cancel(result);
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0>(WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::RunLoop::main(a1);
  v2 = (unsigned int *)*((_QWORD *)a1 + 4);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34CC128;
  v4[1] = v2;
  v6 = v4;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_1972603BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CC128;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC128;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::AuthenticatorManager *WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::updatePresenter(WebKit::WebAuthenticationStatus)::$_0::operator() const(void)::{lambda(void)#1},void>::call(WebKit::AuthenticatorManager *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WebKit::AuthenticatorManager **)(v1 + 8);
    if (result)
      return (WebKit::AuthenticatorManager *)WebKit::AuthenticatorManager::cancel(result);
  }
  return result;
}

WTF *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *result;

  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(WTF **)(a1 + 40);
  if (result)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  CFTypeRef v5;
  uint64_t v6;
  _QWORD *v7;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 16);
    v5 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52)));
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = malloc_type_malloc(0x30uLL, 0x10E004005456E09uLL);
    *v7 = MEMORY[0x1E0C809A0];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::{lambda(void *,NSData *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::descriptor;
    v7[4] = v3;
    v7[5] = v6;
    objc_msgSend(v4, "transmitRequest:reply:", v5, v7);
    _Block_release(v7);
  }
}

void sub_197260608(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::BlockPtr<void ()(NSData *,NSError *)>::fromCallable<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1}>(WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,NSError *)#1})::{lambda(void *,NSData *,NSError *)#1}::__invoke(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "endSession");
  if (a2 && (v4 = objc_msgSend(a2, "bytes"), result = objc_msgSend(a2, "length"), (a2 = (char *)result) != 0))
  {
    if (HIDWORD(result))
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)result);
    v7 = v6;
    v8 = 0;
    do
    {
      v8[v6] = v8[v4];
      ++v8;
    }
    while (a2 != v8);
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = &off_1E34CC190;
  *(_QWORD *)(v10 + 8) = v7;
  *(_DWORD *)(v10 + 16) = (_DWORD)a2;
  *(_DWORD *)(v10 + 20) = (_DWORD)a2;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = v10;
  WTF::callOnMainRunLoop();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_197260738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,$_0)#1}::operator()(NSError *,$_0)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34CC190;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,$_0)#1}::operator()(NSError *,$_0)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34CC190;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(NSData *,$_0)#1}::operator()(NSError *,$_0)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a1 + 8);
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  v8 = *(unsigned __int8 *)(v2 + v7);
  if (v8 == v4)
    return 1;
  v10 = 1;
  do
  {
    result = v8 != 255;
    if (v8 == 255)
      break;
    v7 = ((_DWORD)v7 + v10) & v3;
    v8 = *(unsigned __int8 *)(v2 + v7);
    ++v10;
  }
  while (v8 != v4);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34CC1B8;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_1,void>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E34CC1B8;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(WebKit::AuthenticatorManager const&,WTF::String const&,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String const&)::$_1,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 24), "presentAuthorizationWithContext:completionHandler:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(_QWORD *)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100)
            v20 = v19 >> 8;
          else
            v20 = WTF::StringImpl::hashSlowCase(v14);
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (v24[2] != 1)
            {
              --v24[2];
              goto LABEL_22;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            v25 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
LABEL_22:
            *(_QWORD *)v23 = 0;
          }
          v26 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v26;
          v27 = v6 + 16 * v11;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v28;
          v29 = *(_DWORD **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            else
              --v29[2];
          }
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_42;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (v16[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            v14 = *v13;
          }
          else
          {
            --v16[2];
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_42:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *result;
  if (*result)
    v4 += 16 * *(unsigned int *)(v4 - 4);
  if ((WTF::StringImpl *)v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *a3 = v5;
  if (*result)
  {
    v6 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((WTF::StringImpl *)v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if ((WTF::StringImpl *)v6 != a2)
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(result, a2);
  return result;
}

void sub_197260C48(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _DWORD *v2;

  *v1 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (_DWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  result = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::CcidConnection::*&)(void),WebKit::CcidConnection*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CcidConnection::detectContactless(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CC208;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::detectContactless(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC208;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::detectContactless(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = *(_DWORD *)(a2 + 12) >= 3u;
    else
      v4 = 0;
    if (v4)
      *(_BYTE *)(v3 + 64) = 1;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CC230;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC230;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF *v15[2];

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v4 = result;
  v5 = *(const void **)a2;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6 == 8)
  {
    v7 = &fido::kCtapNfcAppletSelectionU2f;
  }
  else
  {
    if ((_DWORD)v6 != 10)
    {
LABEL_6:
      v8 = (WTF *)WTF::fastMalloc((WTF *)0xD);
      v9 = 0;
      v15[1] = (WTF *)0xD0000000DLL;
      v15[0] = v8;
      do
      {
        *((_BYTE *)v8 + v9) = fido::kCtapNfcAppletSelectionCommand[v9];
        ++v9;
      }
      while (v9 != 13);
      v10 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = &off_1E34CC258;
      v11[1] = v10;
      v14 = v11;
      WebKit::CcidConnection::transact(v3, (uint64_t *)v15, (uint64_t *)&v14);
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      result = (uint64_t)v15[0];
      if (v15[0])
        return WTF::fastFree(v15[0], v12);
      return result;
    }
    v7 = &fido::kCtapNfcAppletSelectionCtap;
  }
  result = memcmp(v5, v7, v6);
  if ((_DWORD)result)
    goto LABEL_6;
  v13 = *(_QWORD *)(v3 + 24);
  if (v13)
  {
    result = *(_QWORD *)(v13 + 8);
    if (result)
      return WebKit::CcidService::didConnectTag((WebKit::CcidService *)result);
  }
  return result;
}

void sub_197261024(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0::operator()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CC258;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0::operator()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC258;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::CcidService *WTF::Detail::CallableWrapper<WebKit::CcidConnection::trySelectFidoApplet(void)::$_0::operator()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(WebKit::CcidService *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = *(_DWORD *)(a2 + 12) == 8;
    else
      v4 = 0;
    if (v4 && **(_QWORD **)a2 == 0x9032565F463255)
    {
      v5 = *(_QWORD *)(v3 + 24);
      if (v5)
      {
        result = *(WebKit::CcidService **)(v5 + 8);
        if (result)
          return (WebKit::CcidService *)WebKit::CcidService::didConnectTag(result);
      }
    }
  }
  return result;
}

uint64_t API::Array::create@<X0>(WebKit **a1@<X8>)
{
  WebKit *v3;
  void *v4;
  _QWORD v6[2];

  v3 = (WebKit *)API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v3 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v3);
  *(_QWORD *)v3 = &off_1E34CC2F8;
  v6[0] = 0;
  *((_QWORD *)v3 + 2) = 0;
  v6[1] = 0;
  *((_QWORD *)v3 + 3) = 0;
  *a1 = v3;
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t API::Array::createStringArray@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  WebKit *v10[2];

  v3 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v3)
  {
    LODWORD(v7) = 0;
    v5 = 0;
LABEL_8:
    v8 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v8 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v8);
    *(_QWORD *)v8 = &off_1E34CC2F8;
    v10[0] = 0;
    v10[1] = 0;
    *(_QWORD *)(v8 + 16) = v5;
    *(_DWORD *)(v8 + 24) = v3;
    *(_DWORD *)(v8 + 28) = v7;
    *a2 = v8;
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v9);
  }
  if (!(v3 >> 29))
  {
    v4 = result;
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    if (*(_DWORD *)(v4 + 12))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        API::String::create(v10);
        ++v7;
        *(WebKit **)(v5 + v6) = v10[0];
        v6 += 8;
      }
      while (v7 < *(unsigned int *)(v4 + 12));
    }
    else
    {
      LODWORD(v7) = 0;
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

uint64_t API::Array::createStringArray@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebKit *v17;

  v3 = a2;
  if (!a2)
  {
    LODWORD(v8) = 0;
    v7 = 0;
LABEL_11:
    v12 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v12 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v12);
    *(_QWORD *)v12 = &off_1E34CC2F8;
    v14 = 0;
    v15 = 0;
    *(_QWORD *)(v12 + 16) = v7;
    *(_DWORD *)(v12 + 24) = v3;
    *(_DWORD *)(v12 + 28) = v8;
    *a3 = v12;
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v13);
  }
  if (!(a2 >> 29))
  {
    v5 = result;
    v6 = 8 * a2;
    v7 = WTF::fastMalloc((WTF *)(8 * a2));
    v8 = 0;
    LODWORD(v15) = v3;
    v14 = v7;
    do
    {
      v9 = *(WTF::StringImpl **)(v5 + 8 * v8);
      if (v9)
        *(_DWORD *)v9 += 2;
      v16 = v9;
      API::String::create(&v17);
      *(_QWORD *)(v7 + 8 * v8) = v17;
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v8;
      v6 -= 8;
    }
    while (v6);
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

unsigned int *API::Array::toStringVector@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = this[7];
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = (uint64_t *)*((_QWORD *)v4 + 2);
      v6 = v4[7];
      v7 = &v5[v6];
      if ((_DWORD)v6)
      {
        v8 = 8 * v6;
        while (1)
        {
          this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v5 + 16))(*v5);
          if ((_DWORD)this == 21)
            break;
          ++v5;
          v8 -= 8;
          if (!v8)
          {
            v5 = v7;
            break;
          }
        }
        v9 = v5;
        v5 = (uint64_t *)*((_QWORD *)v4 + 2);
        v10 = v4[7];
      }
      else
      {
        v10 = 0;
        v9 = (uint64_t *)*((_QWORD *)v4 + 2);
      }
      v11 = &v5[v10];
LABEL_11:
      while (v9 != v11)
      {
        WTF::String::isolatedCopy();
        v13 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(a2 + 8))
        {
          v19 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v13 + 1, (unint64_t)&v20);
          v13 = *(unsigned int *)(a2 + 12);
          v14 = *(_QWORD *)a2;
          v15 = *v19;
          *v19 = 0;
        }
        else
        {
          v14 = *(_QWORD *)a2;
          v15 = v20;
          v20 = 0;
        }
        *(_QWORD *)(v14 + 8 * v13) = v15;
        *(_DWORD *)(a2 + 12) = v13 + 1;
        this = (unsigned int *)v20;
        v20 = 0;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
          else
            *this -= 2;
        }
        v16 = v9 + 1;
        while (v16 - 1 != v7 && v16 != v7)
        {
          v18 = *v16++;
          this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
          if ((_DWORD)this == 21)
          {
            v9 = v16 - 1;
            goto LABEL_11;
          }
        }
        v9 = v7;
      }
    }
  }
  return this;
}

uint64_t API::Array::copy@<X0>(API::Array *this@<X0>, WebKit **a2@<X8>)
{
  WebKit *v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  if (!*((_DWORD *)this + 7))
    return API::Array::create(a2);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, (uint64_t)this + 16);
  v3 = (WebKit *)API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v3 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v3);
  *(_QWORD *)v3 = &off_1E34CC2F8;
  *((_QWORD *)v3 + 2) = v7;
  v4 = v8;
  v7 = 0;
  v8 = 0;
  *((_QWORD *)v3 + 3) = v4;
  *a2 = v3;
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
}

void API::Dictionary::create(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  WebKit *v4;
  uint64_t v5;

  v4 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34CC280;
  *((_QWORD *)v4 + 2) = 0;
  v5 = *a1;
  *a1 = 0;
  *((_QWORD *)v4 + 2) = v5;
  *a2 = v4;
}

void API::Dictionary::~Dictionary(API::Dictionary *this, WTF::StringImpl *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v2, a2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v2, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::Dictionary::keys@<X0>(API::Dictionary *this@<X0>, WebKit **a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  uint64_t v8[2];

  v5 = *((_QWORD *)this + 2);
  v3 = (_QWORD *)((char *)this + 16);
  v4 = v5;
  if (!v5 || !*(_DWORD *)(v4 - 12))
    return API::Array::create(a2);
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,API::Dictionary::keys(void)::$_0,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const>(v3, (uint64_t)v8);
  API::Array::create(v8, (uint64_t *)a2);
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v7);
}

_QWORD *WTF::map<0ul,WTF::CrashOnOverflow,16ul,API::Dictionary::keys(void)::$_0,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits> const>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit *v11;

  v2 = (_QWORD **)result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (*result)
  {
    v4 = *(unsigned int *)(*result - 12);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a2 + 8) = v4;
      *(_QWORD *)a2 = v5;
    }
  }
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
  v6 = result;
  v8 = v7;
  if (*v2)
    v9 = (uint64_t)&(*v2)[2 * *((unsigned int *)*v2 - 1)];
  else
    v9 = 0;
  if ((_QWORD *)v9 != result)
  {
    do
    {
      result = API::String::create(&v11);
      v10 = *(unsigned int *)(a2 + 12);
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v11;
      *(_DWORD *)(a2 + 12) = v10 + 1;
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_13;
      }
      v6 = v8;
LABEL_13:
      ;
    }
    while (v6 != (_QWORD *)v9);
  }
  return result;
}

uint64_t API::URLRequest::setDefaultTimeoutInterval(API::URLRequest *this, double a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;
  double v10;

  WebCore::ResourceRequestBase::setDefaultTimeoutInterval(this, a2);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    v4 = v8;
    v5 = 8 * v9;
    do
    {
      v6 = *v4++;
      v10 = a2;
      WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDefaultRequestTimeoutInterval>(v6, (uint64_t *)&v10, 0);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

uint64_t WKArrayGetTypeID()
{
  return 1;
}

uint64_t WKArrayCreate(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[2];

  if (!a2)
  {
    v4 = 0;
LABEL_10:
    v8 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v8 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v8);
    *(_QWORD *)v8 = &off_1E34CC2F8;
    v11[0] = 0;
    v11[1] = 0;
    *(_QWORD *)(v8 + 16) = v4;
    *(_DWORD *)(v8 + 24) = a2;
    *(_DWORD *)(v8 + 28) = a2;
    v9 = *(_QWORD *)(v8 + 8);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
    return v9;
  }
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    v5 = 0;
    do
    {
      v6 = *(void **)(v3 + 8 * v5);
      if (v6)
      {
        v7 = objc_msgSend(v6, "_apiObject");
        CFRetain(*(CFTypeRef *)(v7 + 8));
      }
      else
      {
        v7 = 0;
      }
      *(_QWORD *)(v4 + 8 * v5++) = v7;
    }
    while (a2 != v5);
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WKArrayCreateAdoptingValues(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  if (!a2)
  {
    v4 = 0;
LABEL_7:
    v7 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v7 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v7);
    *(_QWORD *)v7 = &off_1E34CC2F8;
    v10[0] = 0;
    v10[1] = 0;
    *(_QWORD *)(v7 + 16) = v4;
    *(_DWORD *)(v7 + 24) = a2;
    *(_DWORD *)(v7 + 28) = a2;
    v8 = *(_QWORD *)(v7 + 8);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v9);
    return v8;
  }
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    v5 = 0;
    do
    {
      v6 = *(void **)(v3 + 8 * v5);
      if (v6)
        v6 = (void *)objc_msgSend(v6, "_apiObject");
      *(_QWORD *)(v4 + 8 * v5++) = v6;
    }
    while (a2 != v5);
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t WKArrayGetItemAtIndex(void *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = objc_msgSend(a1, "_apiObject");
  if (*(unsigned int *)(result + 28) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * a2);
    if (v4)
      return *(_QWORD *)(v4 + 8);
    else
      return 0;
  }
  return result;
}

uint64_t WKArrayGetSize(void *a1)
{
  return *(unsigned int *)(objc_msgSend(a1, "_apiObject") + 28);
}

uint64_t API::ObjectImpl<(API::Object::Type)9>::type()
{
  return 9;
}

void API::URLRequest::~URLRequest(API::URLRequest *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E34CC2D0;
  v2 = (const void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::URLRequest *)((char *)this + 16));
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E34CC2D0;
  v2 = (const void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    CFRelease(v2);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::URLRequest *)((char *)this + 16));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)25>::type()
{
  return 25;
}

void API::Array::~Array(API::Array *this, void *a2)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)1>::type()
{
  return 1;
}

WebKit::CcidService *WebKit::CcidService::CcidService(WebKit::CcidService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::RunLoop *v7;

  *(_QWORD *)this = off_1E34AE8F8;
  *((_QWORD *)this + 1) = 0;
  v4 = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)a2 + 1, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E34CC320;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::Timer::Timer<WebKit::CcidService>((WebKit::CcidService *)((char *)this + 32), v7, (uint64_t)this, 32, 1);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_197261C50(_Unwind_Exception *a1, void *a2)
{
  WebKit::AuthenticatorTransportService *v2;
  uint64_t v4;

  *(_QWORD *)v2 = off_1E34AE928;
  v4 = *((_QWORD *)v2 + 3);
  if (v4)
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v4, a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v2);
  _Unwind_Resume(a1);
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer<WebKit::CcidService>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34CC5D0;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v10;
  return a1;
}

void sub_197261CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::CcidService::~CcidService(WebKit::CcidService *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  const void *v4;
  WebKit::CcidConnection *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E34CC320;
  WebKit::CcidService::removeObservers(this);
  v3 = *((_QWORD *)this + 10);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
  v4 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WebKit::CcidConnection *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    WTF::RefCounted<WebKit::CcidConnection>::deref(v5);
  *((_QWORD *)this + 4) = off_1E34ABE00;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::CcidService *)((char *)this + 32));
  *(_QWORD *)this = off_1E34AE928;
  v8 = *((_QWORD *)this + 3);
  if (v8)
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v8, v7);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::CcidService::~CcidService(this);
  WTF::fastFree(v1, v2);
}

void sub_197261DBC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v4;
  const void *v5;
  WebKit::CcidConnection *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v4 = v2[10];
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (const void *)v2[9];
  v2[9] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WebKit::CcidConnection *)v2[8];
  v2[8] = 0;
  if (v6)
    WTF::RefCounted<WebKit::CcidConnection>::deref(v6);
  v2[4] = off_1E34ABE00;
  v7 = v2[7];
  v2[7] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v2 + 4));
  *v2 = off_1E34AE928;
  v9 = v2[3];
  if (v9)
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v9, v8);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService((WebKit::AuthenticatorTransportService *)v2);
  _Unwind_Resume(a1);
}

void WebKit::CcidService::removeObservers(WebKit::CcidService *this)
{
  const void *v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;

  if (*((_QWORD *)this + 9))
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA9B08], "defaultManager"), "removeObserver:forKeyPath:", *((_QWORD *)this + 9), CFSTR("slotNames"));
    v2 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v2)
      CFRelease(v2);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 10);
  v4 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v3);
  v6 = v4;
  v7 = v5;
  if (v3)
    v8 = (WTF::StringImpl *)&v3[2 * *((unsigned int *)v3 - 1)];
  else
    v8 = 0;
  if (v8 != v4)
  {
    do
    {
      v9 = (void *)*((_QWORD *)v6 + 1);
      if (v9)
        CFRetain(*((CFTypeRef *)v6 + 1));
      objc_msgSend(v9, "removeObserver");
      if (v9)
        CFRelease(v9);
      while (1)
      {
        v6 = (WTF::StringImpl *)((char *)v6 + 16);
        if (v6 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_16;
      }
      v6 = v7;
LABEL_16:
      ;
    }
    while (v6 != v8);
    v3 = (_QWORD *)*((_QWORD *)this + 10);
  }
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v3, v5);
  }
}

void sub_197261F48(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CcidService::didConnectTag(WebKit::CcidService *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  v2 = *((_QWORD *)this + 8);
  if (v2)
    ++*(_DWORD *)v2;
  v3 = *(unsigned __int8 *)(v2 + 64);
  v4 = WTF::fastMalloc((WTF *)0x20);
  if (v3)
    v5 = 1;
  else
    v5 = 6;
  *(_DWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 20) = v5;
  *(_QWORD *)v4 = off_1E34ACD88;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 24) = v2;
  v7 = v4;
  WebKit::FidoService::getInfo((uint64_t)this, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197262010(_Unwind_Exception *a1)
{
  WebKit::CcidConnection *v1;

  WTF::RefCounted<WebKit::CcidConnection>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CcidService::startDiscoveryInternal(WebKit::CcidService *this)
{
  return (*(uint64_t (**)(WebKit::CcidService *))(*(_QWORD *)this + 32))(this);
}

uint64_t WebKit::CcidService::restartDiscoveryInternal(WebKit::CcidService *this)
{
  return WTF::RunLoop::TimerBase::start();
}

uint64_t WebKit::CcidService::platformStartDiscovery(WebKit::CcidService *this)
{
  _WKSmartCardSlotObserver *v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v12;

  WebKit::CcidService::removeObservers(this);
  v2 = [_WKSmartCardSlotObserver alloc];
  if (this)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
  }
  else
  {
    v3 = 0;
  }
  v12 = (WTF *)v3;
  v6 = -[_WKSmartCardSlotObserver initWithService:](v2, "initWithService:", &v12);
  v7 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v6;
  if (v7)
    CFRelease(v7);
  v8 = (unsigned int *)v12;
  v12 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
  }
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA9B08], "defaultManager"), "addObserver:forKeyPath:options:context:", *((_QWORD *)this + 9), CFSTR("slotNames"), 5, 0);
}

void sub_197262120(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  unsigned int v11;
  unsigned int v12;

  if (a10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)a10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)a10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::CcidConnection *WebKit::CcidService::onValidCard(uint64_t a1, uint64_t *a2)
{
  WebKit::CcidConnection *result;
  uint64_t v4;

  WebKit::CcidConnection::create(a2, a1, &v4);
  result = *(WebKit::CcidConnection **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  if (result)
    return WTF::RefCounted<WebKit::CcidConnection>::deref(result);
  return result;
}

void sub_1972622BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197262500(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LocalAuthenticator::clearAllCredentials(WebKit::LocalAuthenticator *this)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebKit *v5;
  WebKit *v6;
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v2 = *MEMORY[0x1E0CD6C98];
  v8[0] = *MEMORY[0x1E0CD6CC0];
  v3 = *MEMORY[0x1E0CD6898];
  v7[0] = v2;
  v7[1] = v3;
  v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.webkit.webauthn");
  v7[2] = *MEMORY[0x1E0CD70A8];
  v8[1] = v4;
  v8[2] = MEMORY[0x1E0C9AAB0];
  v5 = (WebKit *)objc_msgSend(v1, "setDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 3));
  v6 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v5);
  if (v6
    && objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v6), "shouldUseAlternateCredentialStore"))
  {
    objc_msgSend(v1, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CD6B80]);
  }
  SecItemDelete((CFDictionaryRef)v1);
  if (v1)
    CFRelease(v1);
}

void sub_197262764(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::Authenticator *WebKit::Authenticator::Authenticator(WebKit::Authenticator *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E34CC900;
  *((_QWORD *)this + 3) = 0;
  WebKit::WebAuthenticationRequestData::WebAuthenticationRequestData((WebKit::Authenticator *)((char *)this + 32));
  return this;
}

void sub_1972627C8(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = v3;
  v6 = *(unsigned int **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::Authenticator::~Authenticator(WebKit::Authenticator *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34CC900;
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::Authenticator *)((char *)this + 32));
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v2);
}

void WebKit::LocalAuthenticator::getExistingCredentials(WebKit::LocalAuthenticator *this, const WTF::String *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t Map;
  _QWORD *v19;
  _QWORD *v20;
  cbor::CBORValue *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::DeferrableRefCountedBase *v24;
  WTF::DeferrableRefCountedBase *v25;
  _QWORD *v26;
  cbor::CBORValue *v27;
  int v28;
  WTF::StringImpl **String;
  void *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::DeferrableRefCountedBase *v36;
  uint64_t v37;
  void *v38;
  char v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  cbor::CBORValue *v42;
  int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  _QWORD *v46;
  cbor::CBORValue *v47;
  int v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::DeferrableRefCountedBase *v51;
  WTF::DeferrableRefCountedBase *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  _DWORD *v62;
  WTF::DeferrableRefCountedBase *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id obj;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76[4];
  WTF::StringImpl *v77;
  _DWORD v78[8];
  unsigned __int8 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  (*(void (**)(id *__return_ptr, const WTF::String *, uint64_t))(*(_QWORD *)a2 + 16))(&v86, a2, a3);
  v84 = 0;
  v85 = 0;
  v4 = objc_msgSend(v86, "count");
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
LABEL_88:
      JUMPOUT(0x197262F48);
    }
    LODWORD(v85) = v4;
    v84 = WTF::fastMalloc((WTF *)(8 * v4));
  }
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  obj = v86;
  v5 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
  if (v5)
  {
    v73 = *(_QWORD *)v81;
    v6 = *MEMORY[0x1E0CD6908];
    v70 = *MEMORY[0x1E0CD6900];
    v69 = *MEMORY[0x1E0CD6890];
    v71 = *MEMORY[0x1E0CD6B60];
    v67 = *MEMORY[0x1E0CD6B80];
    v68 = *MEMORY[0x1E0CD6898];
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v81 != v73)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * v7);
        v9 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", v6);
        v10 = v9;
        if (v9)
        {
          v11 = objc_msgSend(v9, "bytes");
          v12 = objc_msgSend(v10, "length");
          v13 = v12;
          if (v12)
          {
            if (HIDWORD(v12))
            {
              __break(0xC471u);
              goto LABEL_88;
            }
            v14 = WTF::fastMalloc((WTF *)v12);
            v10 = (void *)v14;
            v15 = 0;
            do
            {
              *(_BYTE *)(v14 + v15) = *(_BYTE *)(v11 + v15);
              ++v15;
            }
            while (v13 != v15);
          }
          else
          {
            v10 = 0;
          }
        }
        else
        {
          LODWORD(v13) = 0;
        }
        v76[0] = (WTF::StringImpl *)v10;
        v76[1] = (WTF::StringImpl *)v13;
        cbor::CBORReader::read();
        if (v10)
          WTF::fastFree((WTF *)v10, v16);
        v17 = v79;
        if (!v79 || v78[0] != 5)
        {
          *(_BYTE *)this = 0;
          *((_BYTE *)this + 16) = 0;
          v35 = 1;
          if (!v17)
            goto LABEL_34;
LABEL_33:
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v78);
          goto LABEL_34;
        }
        Map = cbor::CBORValue::getMap((cbor::CBORValue *)v78);
        v77 = 0;
        cbor::CBORValue::CBORValue();
        v19 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        v20 = (_QWORD *)(Map + 8);
        if ((_QWORD *)(Map + 8) != v19)
        {
          v22 = *((_DWORD *)v19 + 16);
          v21 = (cbor::CBORValue *)(v19 + 8);
          if (v22 == 2)
          {
            cbor::CBORValue::getByteString(v21);
            JSC::ArrayBuffer::create();
            v23 = v76[0];
            v76[0] = 0;
            v24 = v77;
            v77 = v23;
            if (v24)
            {
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v24);
              v25 = v76[0];
              v76[0] = 0;
              if (v25)
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v25);
            }
          }
        }
        cbor::CBORValue::CBORValue();
        v26 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        if (v20 == v26 || (v28 = *((_DWORD *)v26 + 16), v27 = (cbor::CBORValue *)(v26 + 8), v28 != 3))
        {
          *(_BYTE *)this = 0;
          *((_BYTE *)this + 16) = 0;
          v35 = 1;
          goto LABEL_75;
        }
        String = (WTF::StringImpl **)cbor::CBORValue::getString(v27);
        v30 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", v70);
        v31 = v30;
        if (v30)
        {
          objc_msgSend(v30, "bytes");
          objc_msgSend(v31, "length");
        }
        JSC::ArrayBuffer::create();
        v32 = *String;
        if (*String)
          *(_DWORD *)v32 += 2;
        v74 = v32;
        objc_msgSend(v8, "objectForKeyedSubscript:", v69);
        WebCore::AuthenticatorAssertionResponse::create();
        v34 = v74;
        v74 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        v36 = v76[0];
        v76[0] = 0;
        if (v36)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v36);
        if (objc_msgSend((id)objc_msgSend(v8, "allKeys"), "containsObject:", v71))
        {
          MEMORY[0x19AEABCC8](&v74, objc_msgSend(v8, "objectForKeyedSubscript:", v71));
          if (v74)
            goto LABEL_49;
        }
        else
        {
          v40 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
          if (*MEMORY[0x1E0CBF6F0])
            *(_DWORD *)v40 += 2;
          v74 = v40;
          if (v40)
          {
LABEL_49:
            WTF::String::operator=((WTF::StringImpl **)(v75 + 160), (WTF::StringImpl *)&v74);
            v39 = 1;
            v37 = v75;
            goto LABEL_50;
          }
        }
        if (!objc_msgSend((id)objc_msgSend(v8, "allKeys"), "containsObject:", v67))
          goto LABEL_51;
        v37 = v75;
        v38 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", v67);
        v39 = objc_msgSend(v38, "isEqual:", MEMORY[0x1E0C9AAB0]);
LABEL_50:
        *(_BYTE *)(v37 + 168) = v39;
LABEL_51:
        cbor::CBORValue::CBORValue();
        v41 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        if (v20 != v41)
        {
          v43 = *((_DWORD *)v41 + 16);
          v42 = (cbor::CBORValue *)(v41 + 8);
          if (v43 == 3)
          {
            v44 = v75;
            v45 = (WTF::StringImpl *)cbor::CBORValue::getString(v42);
            WTF::String::operator=((WTF::StringImpl **)(v44 + 152), v45);
          }
        }
        cbor::CBORValue::CBORValue((cbor::CBORValue *)v76, "largeBlob");
        v46 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v76);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v76);
        if (v20 != v46)
        {
          v48 = *((_DWORD *)v46 + 16);
          v47 = (cbor::CBORValue *)(v46 + 8);
          if (v48 == 2)
          {
            v49 = v75;
            cbor::CBORValue::getByteString(v47);
            JSC::ArrayBuffer::create();
            v50 = v76[0];
            v76[0] = 0;
            v51 = *(WTF::DeferrableRefCountedBase **)(v49 + 200);
            *(_QWORD *)(v49 + 200) = v50;
            if (v51)
            {
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v51);
              v52 = v76[0];
              v76[0] = 0;
              if (v52)
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v52);
            }
          }
        }
        v53 = v75;
        MEMORY[0x19AEABCC8](v76, objc_msgSend(v8, "objectForKeyedSubscript:", v68));
        WTF::String::operator=((WTF::StringImpl **)(v53 + 208), (WTF::StringImpl *)v76);
        v55 = v76[0];
        v76[0] = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v54);
          else
            *(_DWORD *)v55 -= 2;
        }
        LODWORD(v56) = HIDWORD(v85);
        if (HIDWORD(v85) == (_DWORD)v85)
        {
          v57 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v84, HIDWORD(v85) + 1, (unint64_t)&v75);
          v56 = HIDWORD(v85);
          v58 = v84;
          v59 = *v57;
          *v57 = 0;
          *(_QWORD *)(v58 + 8 * v56) = v59;
        }
        else
        {
          v60 = v75;
          v75 = 0;
          *(_QWORD *)(v84 + 8 * HIDWORD(v85)) = v60;
        }
        HIDWORD(v85) = v56 + 1;
        v61 = v74;
        v74 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v54);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = (_DWORD *)v75;
        v75 = 0;
        if (v62)
        {
          if (v62[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
          else
            --v62[2];
        }
        v35 = 0;
LABEL_75:
        v63 = v77;
        v77 = 0;
        if (v63)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v63);
        if (v79)
          goto LABEL_33;
LABEL_34:
        if (v35)
          goto LABEL_83;
        ++v7;
      }
      while (v7 != v5);
      v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
      v5 = v64;
    }
    while (v64);
  }
  *(_QWORD *)this = v84;
  v65 = v85;
  v84 = 0;
  v85 = 0;
  *((_QWORD *)this + 1) = v65;
  *((_BYTE *)this + 16) = 1;
LABEL_83:
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v84);
  v66 = v86;
  v86 = 0;
  if (v66)
    CFRelease(v66);
}

void sub_197262F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  const void *v40;

  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a38);
  v40 = *(const void **)(v38 - 232);
  *(_QWORD *)(v38 - 232) = 0;
  if (v40)
    CFRelease(v40);
  _Unwind_Resume(a1);
}

WTF::ASCIILiteral *WebKit::LocalAuthenticator::makeCredential(WTF::ASCIILiteral *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  JSC::ArrayBuffer *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int i;
  int v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _Unwind_Exception *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;

  *((_DWORD *)this + 194) = 1;
  if (*((_DWORD *)this + 88))
  {
    v33 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v32);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (v34)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v32);
    if (v39)
      WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v37);
    _Unwind_Resume(v33);
  }
  v2 = (uint64_t)this;
  v3 = *((unsigned int *)this + 39);
  if (!(_DWORD)v3)
  {
LABEL_9:
    LOBYTE(v37) = 6;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::LocalAuthenticator::receiveException(v2, (uint64_t)&v37, 5);
    this = v38;
    v38 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::ASCIILiteral *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
    return this;
  }
  v4 = (_QWORD *)(*((_QWORD *)this + 18) + 8);
  while (*((_BYTE *)v4 - 8) || *v4 != -7)
  {
    v4 += 2;
    if (!--v3)
      goto LABEL_9;
  }
  if (*((_BYTE *)this + 80))
  {
    WebKit::LocalAuthenticator::getExistingCredentials((WebKit::LocalAuthenticator *)&v37, *((const WTF::String **)this + 98), (uint64_t)this + 72);
    if (!v39)
    {
      LOBYTE(v35) = 24;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v36 = v40;
      WebKit::LocalAuthenticator::receiveException(v2, (uint64_t)&v35, 5);
      this = v36;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          this = (WTF::ASCIILiteral *)WTF::StringImpl::destroy(v36, v31);
        else
          *(_DWORD *)v36 -= 2;
      }
      goto LABEL_63;
    }
    v8 = *(unsigned int *)(v2 + 804);
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD ***)(v2 + 792);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (v11[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          else
            --v11[2];
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v12 = *(WTF **)(v2 + 792);
    if (v12)
    {
      *(_QWORD *)(v2 + 792) = 0;
      *(_DWORD *)(v2 + 800) = 0;
      WTF::fastFree(v12, v7);
    }
    *(_QWORD *)(v2 + 792) = v37;
    v13 = v38;
    v37 = 0;
    v38 = 0;
    *(_QWORD *)(v2 + 800) = v13;
    WebKit::LocalAuthenticatorInternal::produceHashSet((WTF::StringImpl *)&v34, *(_QWORD *)(v2 + 168), *(_DWORD *)(v2 + 180));
    if (v34 && *((_DWORD *)v34 - 3) && *(_DWORD *)(v2 + 804))
    {
      v14 = 0;
      while (1)
      {
        v15 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)(*(_QWORD *)(v2 + 792) + 8 * v14));
        JSC::ArrayBuffer::span(v15);
        WTF::base64EncodeToString();
        v18 = v34;
        v17 = v35;
        if (v34)
        {
          v19 = *((_DWORD *)v34 - 2);
          v20 = *((_DWORD *)v35 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v35);
          for (i = 0; ; v21 = i + v23)
          {
            v23 = v21 & v19;
            v24 = v18[v21 & v19];
            if (v24 != (WTF *)-1)
            {
              if (!v24)
              {
                LOBYTE(v18) = 0;
                goto LABEL_46;
              }
              if ((WTF::equal(v24, v35, v16) & 1) != 0)
                break;
            }
            ++i;
          }
          LOBYTE(v18) = 1;
LABEL_46:
          v17 = v35;
        }
        v35 = 0;
        if (!v17)
          goto LABEL_31;
        if (*(_DWORD *)v17 != 2)
          break;
        WTF::StringImpl::destroy(v17, a2);
        if ((v18 & 1) != 0)
        {
LABEL_58:
          LOBYTE(v35) = 8;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v36 = v40;
          WebKit::LocalAuthenticator::receiveException(v2, (uint64_t)&v35, 6);
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, a2);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_62;
        }
LABEL_34:
        if (++v14 >= (unint64_t)*(unsigned int *)(v2 + 804))
          goto LABEL_48;
      }
      *(_DWORD *)v17 -= 2;
LABEL_31:
      if ((v18 & 1) != 0)
        goto LABEL_58;
      goto LABEL_34;
    }
LABEL_48:
    v25 = *(_QWORD *)(v2 + 24);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v2 + 16), v2);
        v27 = *(unsigned int **)(v2 + 16);
        if (v27)
        {
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
        }
        v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v29 = &off_1E34CC648;
        *((_QWORD *)v29 + 1) = v27;
        v35 = v29;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v26 + 64))(v26, &v35);
        v30 = v35;
        v35 = 0;
        if (v30)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
LABEL_62:
    this = (WTF::ASCIILiteral *)v34;
    if (!v34)
      goto LABEL_63;
  }
  else
  {
    __break(1u);
  }
  this = (WTF::ASCIILiteral *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)this, a2);
LABEL_63:
  if (v39)
    return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v37);
  return this;
}

uint64_t WebKit::LocalAuthenticator::receiveException(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit *v10;
  WebKit *v11;
  OSStatus v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  uint8_t buf[4];
  OSStatus v23;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  _QWORD v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 808))
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = *MEMORY[0x1E0CD6CC0];
    v8 = *MEMORY[0x1E0CD6900];
    v26[0] = *MEMORY[0x1E0CD6C98];
    v26[1] = v8;
    v9 = *(_QWORD *)(a1 + 808);
    v27[0] = v7;
    v27[1] = v9;
    v26[2] = *MEMORY[0x1E0CD70A8];
    v27[2] = MEMORY[0x1E0C9AAB0];
    v10 = (WebKit *)objc_msgSend(v6, "setDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 3));
    v11 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v10);
    if (v11
      && objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v11), "shouldUseAlternateCredentialStore"))
    {
      objc_msgSend(v6, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CD6B80]);
    }
    v12 = SecItemDelete((CFDictionaryRef)v6);
    if (v12)
    {
      v13 = qword_1ECE71AC8;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v23 = v12;
        _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Couldn't delete provisional credential while handling error: %d", buf, 8u);
        if (!v6)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v6)
LABEL_8:
      CFRelease(v6);
  }
LABEL_9:
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a3);
  }
  buf[0] = *(_BYTE *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v24 = v16;
  v17 = 1;
  v25 = 1;
  v18 = *(_QWORD *)(a1 + 24);
  if (!v18)
    return ((uint64_t (*)(char *, uint8_t *))off_1E34CC4D8[v17])(&v21, buf);
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    return ((uint64_t (*)(char *, uint8_t *))off_1E34CC4D8[v17])(&v21, buf);
  result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 16))(v19, buf);
  v17 = v25;
  if (v25 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E34CC4D8[v17])(&v21, buf);
  return result;
}

void sub_1972637C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::LocalAuthenticatorInternal::produceHashSet(WTF::StringImpl *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v12[3];
  WTF::StringImpl *v13;

  *(_QWORD *)result = 0;
  if (a3)
  {
    v3 = a2;
    v4 = (uint64_t *)result;
    v5 = a2 + 40 * a3;
    do
    {
      v6 = *(unsigned int *)(v3 + 36);
      if ((_DWORD)v6)
      {
        v7 = *(unsigned __int8 **)(v3 + 24);
        while (1)
        {
          v8 = *v7++;
          if (v8 == 3)
            break;
          if (!--v6)
            goto LABEL_15;
        }
      }
      if (!*(_BYTE *)v3)
      {
        v9 = *(unsigned int *)(v3 + 16);
        if ((_DWORD)v9 == -1)
        {
          result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          return result;
        }
        v12[0] = &v13;
        result = (WTF::StringImpl *)((uint64_t (*)(_QWORD *, uint64_t))off_1E34CC4A8[v9])(v12, v3 + 8);
        if (result == (WTF::StringImpl *)20)
        {
          WebCore::BufferSource::span((WebCore::BufferSource *)(v3 + 8));
          WTF::base64EncodeToString();
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v4, &v13, v10, (uint64_t)v12);
          result = v13;
          v13 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
LABEL_15:
      v3 += 40;
    }
    while (v3 != v5);
  }
  return result;
}

void sub_1972638F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::StringImpl ***v12;

  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (*v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  WTF::DeferrableRefCountedBase *v6;

  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_WORD *)a1 = *(_WORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    v6 = *(WTF::DeferrableRefCountedBase **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v5;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t WebKit::LocalAuthenticator::processClientExtensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  _QWORD v7[2];
  _QWORD *v8;

  v7[0] = a2;
  v7[1] = a2;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::LocalAuthenticator::validateUserVerification(v5, v6);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E34CC688[v3])(&v8, a3);
  }
}

uint64_t WebKit::LocalAuthenticator::validateUserVerification(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  NSObject *v7;
  uint8_t v8[8];
  WTF::StringImpl *v9;

  if (a2)
  {
    if (a2 == 2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (!v3)
        return 0;
      result = *(_QWORD *)(v3 + 8);
      if (result)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)result + 72))(result);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v8[0] = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebKit::LocalAuthenticator::receiveException(a1, (uint64_t)v8, 5);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = qword_1ECE71AC8;
    result = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Could not verify user.", v8, 2u);
      return 0;
    }
  }
  return result;
}

void sub_197263AF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::LocalAuthenticator::finishMakeCredential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFDictionary *v23;
  OSStatus v24;
  OSStatus v25;
  NSObject *v26;
  unsigned int *v27;
  WebKit *v28;
  int v29;
  _BYTE *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _Unwind_Exception *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  WTF *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  uint8_t buf[4];
  OSStatus v53;
  _QWORD v54[4];
  _QWORD v55[5];

  v55[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a4 + 16))
    return (_DWORD *)WebKit::LocalAuthenticator::receiveException(a1, a4, 5);
  if (*(_DWORD *)(a1 + 352))
  {
    v44 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    v45 = v48;
    if (v48)
    {
      v48 = 0;
      LODWORD(v49) = 0;
      WTF::fastFree(v45, v43);
    }
    _Unwind_Resume(v44);
  }
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&v48, (const PublicKeyCredentialCreationOptions *)(a1 + 56));
  if (*(_DWORD *)(a1 + 804))
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 792);
      v9 = (const void *)JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(*(_QWORD *)(v8 + 8 * v7) + 136));
      v11 = v10;
      v12 = WebCore::BufferSource::span((WebCore::BufferSource *)&v51);
      if (v11 == v13 && !memcmp(v9, v12, v11))
        break;
      if (++v7 >= (unint64_t)*(unsigned int *)(a1 + 804))
        goto LABEL_16;
    }
    v14 = *MEMORY[0x1E0CD6C98];
    v55[0] = *MEMORY[0x1E0CD6CC0];
    v15 = *MEMORY[0x1E0CD6900];
    v54[0] = v14;
    v54[1] = v15;
    v16 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*(WebCore::AuthenticatorResponse **)(v8 + 8 * v7));
    v17 = JSC::ArrayBuffer::span(v16);
    v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v17, v18);
    v20 = *MEMORY[0x1E0CD6B80];
    v21 = *MEMORY[0x1E0CD6B88];
    v55[1] = v19;
    v55[2] = v21;
    v22 = *MEMORY[0x1E0CD70A8];
    v54[2] = v20;
    v54[3] = v22;
    v55[3] = MEMORY[0x1E0C9AAB0];
    v23 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v55, v54, 4);
    if (v19)
      CFRelease(v19);
    v24 = SecItemDelete(v23);
    v25 = v24;
    if (v24 != -25300)
    {
      if (v24)
      {
        v26 = qword_1ECE71AC8;
        if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v53 = v25;
          _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "Couldn't delete older credential: %d", buf, 8u);
        }
      }
    }
  }
LABEL_16:
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&v48);
  LOBYTE(v54[0]) = 3;
  v27 = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)&v48, (uint64_t)v54, 1);
  v28 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v27);
  if (v28
    && objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v28), "shouldUseAlternateCredentialStore"))
  {
    LOBYTE(v54[0]) = 5;
    v29 = HIDWORD(v49);
    if (HIDWORD(v49) == (_DWORD)v49)
    {
      v30 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, (WTF *)(HIDWORD(v49) + 1), (unint64_t)v54);
      v29 = HIDWORD(v49);
      *((_BYTE *)v48 + HIDWORD(v49)) = *v30;
    }
    else
    {
      *((_BYTE *)v48 + HIDWORD(v49)) = 5;
    }
    HIDWORD(v49) = v29 + 1;
  }
  WebCore::AuthenticatorAttestationResponse::create();
  v32 = v48;
  if (v48)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    WTF::fastFree(v32, v31);
  }
  v33 = v55[0];
  ++*(_DWORD *)(v55[0] + 8);
  v46 = v33;
  v47 = 0;
  WebKit::LocalAuthenticator::processClientExtensions((uint64_t)&v48, a1, (uint64_t)&v46);
  if (*(unsigned __int8 *)(a4 + 16) == v50)
  {
    if (!*(_BYTE *)(a4 + 16))
      goto LABEL_42;
    *(_BYTE *)a4 = (_BYTE)v48;
    v35 = v49;
    v49 = 0;
    v36 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v35;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  else if (*(_BYTE *)(a4 + 16))
  {
    v37 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v34);
      else
        *(_DWORD *)v37 -= 2;
    }
    *(_BYTE *)(a4 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a4 = (_BYTE)v48;
    v38 = v49;
    v49 = 0;
    *(_QWORD *)(a4 + 8) = v38;
    *(_BYTE *)(a4 + 16) = 1;
  }
  if ((_BYTE)v50)
  {
    v39 = v49;
    v49 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v34);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
LABEL_42:
  if (v47 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E34CC4C8[v47])(v54, &v46);
  v47 = -1;
  if (*(_BYTE *)(a4 + 16))
  {
    WebKit::LocalAuthenticator::receiveException(a1, a4, 5);
    goto LABEL_52;
  }
  v40 = (WTF *)v55[0];
  v55[0] = 0;
  v48 = v40;
  v50 = 0;
  v41 = *(_QWORD *)(a1 + 24);
  if (!v41)
    goto LABEL_51;
  v42 = *(_QWORD *)(v41 + 8);
  if (!v42)
  {
    LODWORD(v41) = 0;
    goto LABEL_51;
  }
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v42 + 16))(v42, &v48);
  LODWORD(v41) = v50;
  if (v50 != -1)
LABEL_51:
    ((void (*)(_QWORD *, WTF **))off_1E34CC4D8[v41])(v54, &v48);
LABEL_52:
  result = (_DWORD *)v55[0];
  v55[0] = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF *WebKit::LocalAuthenticator::getAssertion(WebKit::LocalAuthenticator *this)
{
  void *v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;
  uint64_t v8;
  uint64_t v9;
  WebCore::AuthenticatorResponse **v10;
  WebCore::AuthenticatorResponse **v11;
  JSC::ArrayBuffer *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int i;
  int v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  NSObject *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  NSObject *v40;
  NSObject *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t v44[8];
  WTF::StringImpl *v45;
  uint8_t buf[8];
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl **v49[2];

  *((_DWORD *)this + 194) = 1;
  if (*((_DWORD *)this + 88) != 1)
  {
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_80;
  }
  WebKit::LocalAuthenticatorInternal::produceHashSet((WTF::StringImpl *)v49, *((_QWORD *)this + 11), *((_DWORD *)this + 25));
  if (*((_DWORD *)this + 25) && (!v49[0] || !*((_DWORD *)v49[0] - 3)))
  {
    buf[0] = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v47 = *(WTF::StringImpl **)v44;
    WebKit::LocalAuthenticator::receiveException((uint64_t)this, (uint64_t)buf, 7);
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v29);
      else
        *(_DWORD *)v47 -= 2;
    }
    v37 = qword_1ECE71AC8;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "No matched credentials are found in the platform attached authenticator.", buf, 2u);
    }
    goto LABEL_76;
  }
  WebKit::LocalAuthenticator::getExistingCredentials((WebKit::LocalAuthenticator *)buf, *((const WTF::String **)this + 98), (uint64_t)this + 80);
  if (!v48)
  {
    v44[0] = 24;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v45 = v42;
    WebKit::LocalAuthenticator::receiveException((uint64_t)this, (uint64_t)v44, 5);
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v36);
      else
        *(_DWORD *)v45 -= 2;
    }
    v40 = qword_1ECE71AC8;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v44 = 0;
      _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, "Couldn't get existing credentials", v44, 2u);
    }
    goto LABEL_74;
  }
  v3 = *((unsigned int *)this + 201);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 99);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = (WTF *)*((_QWORD *)this + 99);
  if (result)
  {
    *((_QWORD *)this + 99) = 0;
    *((_DWORD *)this + 200) = 0;
    result = (WTF *)WTF::fastFree(result, v2);
  }
  *((_QWORD *)this + 99) = *(_QWORD *)buf;
  v8 = HIDWORD(v47);
  *((_DWORD *)this + 200) = (_DWORD)v47;
  *(_QWORD *)buf = 0;
  v47 = 0;
  *((_DWORD *)this + 201) = v8;
  *(_QWORD *)v44 = 0;
  v45 = 0;
  if ((_DWORD)v8)
  {
    if (!(v8 >> 29))
    {
      LODWORD(v45) = v8;
      *(_QWORD *)v44 = WTF::fastMalloc((WTF *)(8 * v8));
      v9 = *((unsigned int *)this + 201);
      if ((_DWORD)v9)
      {
        v10 = (WebCore::AuthenticatorResponse **)*((_QWORD *)this + 99);
        v11 = &v10[v9];
        while (1)
        {
          if (!v49[0] || !*((_DWORD *)v49[0] - 3))
          {
LABEL_28:
            v17 = *v10;
            *((_DWORD *)v17 + 2) = *((_DWORD *)*v10 + 2) + 1;
            v42 = v17;
            LODWORD(v18) = HIDWORD(v45);
            if (HIDWORD(v45) == (_DWORD)v45)
            {
              v19 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)v44, HIDWORD(v45) + 1, (unint64_t)&v42);
              v18 = HIDWORD(v45);
              v20 = *(WTF::StringImpl **)v44;
              v21 = *v19;
              *v19 = 0;
              *((_QWORD *)v20 + v18) = v21;
            }
            else
            {
              v42 = 0;
              *(_QWORD *)(*(_QWORD *)v44 + 8 * HIDWORD(v45)) = v17;
            }
            HIDWORD(v45) = v18 + 1;
            v22 = v42;
            v42 = 0;
            if (v22)
            {
              if (*((_DWORD *)v22 + 2) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
              else
                --*((_DWORD *)v22 + 2);
            }
            goto LABEL_35;
          }
          v12 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*v10);
          JSC::ArrayBuffer::span(v12);
          WTF::base64EncodeToString();
          v15 = v49[0];
          v16 = v42;
          if (v49[0])
          {
            v23 = *((_DWORD *)v49[0] - 2);
            v24 = *((_DWORD *)v42 + 4);
            if (v24 >= 0x100)
              v25 = v24 >> 8;
            else
              v25 = WTF::StringImpl::hashSlowCase(v42);
            for (i = 0; ; v25 = i + v27)
            {
              v27 = v25 & v23;
              v28 = v15[v25 & v23];
              if (v28 != (WTF *)-1)
              {
                if (!v28)
                {
                  LOBYTE(v15) = 0;
                  goto LABEL_47;
                }
                if ((WTF::equal(v28, v42, v14) & 1) != 0)
                  break;
              }
              ++i;
            }
            LOBYTE(v15) = 1;
LABEL_47:
            v16 = v42;
          }
          v42 = 0;
          if (!v16)
            goto LABEL_25;
          if (*(_DWORD *)v16 != 2)
            break;
          WTF::StringImpl::destroy(v16, v13);
          if ((v15 & 1) != 0)
            goto LABEL_28;
LABEL_35:
          if (++v10 == v11)
            goto LABEL_51;
        }
        *(_DWORD *)v16 -= 2;
LABEL_25:
        if ((v15 & 1) != 0)
          goto LABEL_28;
        goto LABEL_35;
      }
      goto LABEL_51;
    }
LABEL_80:
    __break(0xC471u);
    return result;
  }
LABEL_51:
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)v44, HIDWORD(v45));
  if (HIDWORD(v45))
  {
    (*(void (**)(_QWORD, uint8_t *))(**((_QWORD **)this + 98) + 48))(*((_QWORD *)this + 98), v44);
    v30 = *((_QWORD *)this + 3);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)this + 2, (uint64_t)this);
        v32 = (unsigned int *)*((_QWORD *)this + 2);
        if (v32)
        {
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
        }
        v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v34 = &off_1E34CC6D0;
        *((_QWORD *)v34 + 1) = this;
        *((_QWORD *)v34 + 2) = v32;
        v42 = v34;
        (*(void (**)(uint64_t, uint8_t *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v31 + 48))(v31, v44, 0, &v42);
        v35 = v42;
        v42 = 0;
        if (v35)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
      }
    }
  }
  else
  {
    LOBYTE(v42) = 31;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43 = (WTF::StringImpl *)v49[1];
    WebKit::LocalAuthenticator::receiveException((uint64_t)this, (uint64_t)&v42, 7);
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v39);
      else
        *(_DWORD *)v43 -= 2;
    }
    v41 = qword_1ECE71AC8;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v42) = 0;
      _os_log_error_impl(&dword_196BCC000, v41, OS_LOG_TYPE_ERROR, "No matched credentials are found in the platform attached authenticator.", (uint8_t *)&v42, 2u);
    }
  }
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v44);
LABEL_74:
  if (v48)
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)buf);
LABEL_76:
  result = (WTF *)v49[0];
  if (v49[0])
    return (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v49[0], v38);
  return result;
}

void sub_1972645FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, WTF::StringImpl *a12, char a13, WTF::StringImpl *a14, char a15, uint64_t a16, WTF::StringImpl **a17)
{
  WTF::StringImpl *v18;

  if (a9)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a9 + 8))(a9);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a11);
  if (a15)
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a13);
  if (a17)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a17, v18);
  _Unwind_Resume(a1);
}

void WebKit::LocalConnection::~LocalConnection(id *this)
{
  id v2;

  *this = off_1E34CC388;
  objc_msgSend(this[1], "invalidate");
  v2 = this[1];
  this[1] = 0;
  if (v2)
    CFRelease(v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::LocalConnection::~LocalConnection(this);
  WTF::fastFree(v1, v2);
}

void sub_1972647A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::LocalConnection::verifyUser(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  WebKit *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  const __CFString *v15;
  id v16;
  uint64_t v17;
  WebKit *v18;
  WebKit *v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  id v26;
  WTF::StringImpl *v27;

  v10 = (WebKit *)WebCore::genericTouchIDPromptTitle((WebCore *)a1);
  v11 = (void *)objc_msgSend(objc_alloc((Class)WebKit::getLAContextClass(v10)), "init");
  v12 = v11;
  if (v11)
    CFRetain(v11);
  v13 = a1[1];
  a1[1] = v12;
  if (v13)
    CFRelease(v13);
  v14 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (objc_msgSend(a1[1], "biometryType") == 1)
  {
    if (v27)
      v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E351F1B8;
    objc_msgSend(v14, "setObject:forKey:", v15, &unk_1E356FD48);
    objc_msgSend(v14, "setObject:forKey:", MEMORY[0x1E0C9AAA0], &unk_1E356FD60);
  }
  v16 = a1[1];
  if (v16)
    CFRetain(a1[1]);
  v17 = *a6;
  *a6 = 0;
  v18 = (WebKit *)malloc_type_malloc(0x30uLL, 0x10E00407C3E749EuLL);
  *(_QWORD *)v18 = MEMORY[0x1E0C809A0];
  *((_QWORD *)v18 + 1) = 50331650;
  *((_QWORD *)v18 + 2) = WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke;
  *((_QWORD *)v18 + 3) = &WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::descriptor;
  *((_QWORD *)v18 + 4) = v16;
  *((_QWORD *)v18 + 5) = v17;
  v19 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v18);
  if (v19
    && objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v19), "shouldUseAlternateCredentialStore"))
  {
    v26 = 0;
    v20 = objc_msgSend(a1[1], "canEvaluatePolicy:error:", 1, &v26);
    v21 = objc_msgSend(v26, "code");
    if (a5)
      v22 = v21 == -8;
    else
      v22 = 1;
    if (v22)
      v23 = 1;
    else
      v23 = v20;
    if ((v23 & 1) != 0)
      objc_msgSend(a1[1], "evaluatePolicy:options:reply:", 2, v14, v18);
    else
      (*((void (**)(WebKit *, void *, _QWORD))v18 + 2))(v18, &unk_1E356F848, 0);
  }
  else
  {
    objc_msgSend(a1[1], "evaluateAccessControl:operation:options:reply:", a4, 3, v14, v18);
  }
  _Block_release(v18);
  if (v14)
    CFRelease(v14);
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972649F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LocalConnection::verifyUser(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  id v7;
  uint64_t v8;
  WebKit *v9;
  WebKit *v10;
  int v11;

  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v7, "setObject:forKey:", MEMORY[0x1E0C9AAB0], &unk_1E356FD78);
  v8 = *a4;
  *a4 = 0;
  v9 = (WebKit *)malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *(_QWORD *)v9 = MEMORY[0x1E0C809A0];
  *((_QWORD *)v9 + 1) = 50331650;
  *((_QWORD *)v9 + 2) = WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke;
  *((_QWORD *)v9 + 3) = &WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::descriptor;
  *((_QWORD *)v9 + 4) = v8;
  v10 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v9);
  if (!v10)
    goto LABEL_6;
  v11 = objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v10), "shouldUseAlternateCredentialStore") ^ 1;
  if (a3)
    LOBYTE(v11) = 1;
  if ((v11 & 1) != 0)
LABEL_6:
    objc_msgSend(a3, "evaluateAccessControl:operation:options:reply:", a2, 3, v7, v9);
  else
    (*((void (**)(WebKit *, void *, _QWORD))v9 + 2))(v9, &unk_1E356F870, 0);
  _Block_release(v9);
  if (v7)
    CFRelease(v7);
}

void sub_197264BC4(_Unwind_Exception *exception_object)
{
  const void *v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::LocalConnection::createCredentialPrivateKey(LAContext *a1@<X1>, __SecAccessControl *a2@<X2>, const WTF::String *a3@<X3>, NSData *a4@<X4>, SecKeyRef *a5@<X8>)
{
  uint64_t v10;
  __CFError *v11;
  uint64_t v12;
  const __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __CFError *v19;
  uint64_t v20;
  uint64_t v21;
  WebKit *v22;
  WebKit *v23;
  const __CFString *v24;
  SecKeyRef RandomKey;
  CFErrorRef v26;
  uint64_t v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  SecKeyRef *v32;
  _QWORD v33[4];
  _QWORD v34[4];
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[4];
  CFErrorRef error[6];

  error[4] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v10 = *MEMORY[0x1E0CD69D8];
  v35[0] = *MEMORY[0x1E0CD6890];
  v35[1] = v10;
  v11 = (__CFError *)MEMORY[0x1E0C9AAB0];
  v38[0] = a2;
  v38[1] = MEMORY[0x1E0C9AAB0];
  v12 = *MEMORY[0x1E0CD6898];
  v35[2] = *MEMORY[0x1E0CD6898];
  v38[2] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.webkit.webauthn");
  v36 = *MEMORY[0x1E0CD6A90];
  v31 = v36;
  if (*(_QWORD *)a3)
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  v30 = *MEMORY[0x1E0CD6908];
  v37 = *MEMORY[0x1E0CD6908];
  v38[3] = v13;
  v38[4] = a4;
  v14 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v35, 5);
  v15 = v14;
  if (v14)
    CFRetain(v14);
  v32 = a5;
  v28 = a3;
  v29 = v12;
  if (a1)
  {
    v16 = (void *)objc_msgSend(v15, "mutableCopy");
    objc_msgSend(v16, "setObject:forKeyedSubscript:", a1, *MEMORY[0x1E0CD7088]);
    if (v15)
      CFRelease(v15);
  }
  else
  {
    v16 = v15;
  }
  v17 = *MEMORY[0x1E0CD6BB0];
  v18 = *MEMORY[0x1E0CD6A38];
  v33[0] = *MEMORY[0x1E0CD6B98];
  v33[1] = v18;
  v19 = (__CFError *)*MEMORY[0x1E0CD6A50];
  v34[0] = v17;
  v34[1] = v19;
  v20 = *MEMORY[0x1E0CD6A20];
  v21 = *MEMORY[0x1E0CD6FC0];
  v33[2] = *MEMORY[0x1E0CD6A20];
  v33[3] = v21;
  v34[2] = &unk_1E356FD90;
  v34[3] = v16;
  v22 = (WebKit *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 4, a4);
  v23 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v22);
  if (v23
    && objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v23), "shouldUseAlternateCredentialStore"))
  {
    v41[0] = *MEMORY[0x1E0CD6B80];
    v41[1] = v18;
    error[0] = v11;
    error[1] = v19;
    error[2] = (CFErrorRef)&unk_1E356FD90;
    v41[2] = v20;
    v41[3] = v21;
    v40[0] = v11;
    v39[0] = v10;
    v39[1] = v29;
    v40[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.webkit.webauthn");
    v39[2] = v31;
    if (*(_QWORD *)v28)
      v24 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v24 = &stru_1E351F1B8;
    v39[3] = v30;
    v40[2] = v24;
    v40[3] = v27;
    error[3] = (CFErrorRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 4);
    v22 = (WebKit *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", error, v41, 4);
  }
  error[0] = 0;
  RandomKey = SecKeyCreateRandomKey(v22, error);
  v26 = error[0];
  if (error[0])
  {
    *v32 = 0;
    CFRelease(v26);
    if (RandomKey)
      CFRelease(RandomKey);
    if (v16)
      goto LABEL_18;
  }
  else
  {
    *v32 = RandomKey;
    if (v16)
LABEL_18:
      CFRelease(v16);
  }
}

void sub_197264F1C(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void WebKit::LocalConnection::getExistingCredentials(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  OSStatus v10;
  const void *v11;
  const void *v12;
  void *v13;
  _QWORD v14[8];
  _QWORD v15[9];

  v15[8] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CD69F8];
  v14[0] = *MEMORY[0x1E0CD6C98];
  v14[1] = v5;
  v6 = *MEMORY[0x1E0CD6A00];
  v15[0] = *MEMORY[0x1E0CD6CC0];
  v15[1] = v6;
  v15[2] = *MEMORY[0x1E0CD6B88];
  v7 = *MEMORY[0x1E0CD6898];
  v14[2] = *MEMORY[0x1E0CD6B80];
  v14[3] = v7;
  v15[3] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.webkit.webauthn");
  v14[4] = *MEMORY[0x1E0CD6A90];
  if (*(_QWORD *)a1)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  v9 = *MEMORY[0x1E0CD6F30];
  v14[5] = *MEMORY[0x1E0CD7010];
  v14[6] = v9;
  v14[7] = *MEMORY[0x1E0CD70A8];
  v15[4] = v8;
  v15[5] = MEMORY[0x1E0C9AAB0];
  v15[6] = *MEMORY[0x1E0CD6F38];
  v15[7] = MEMORY[0x1E0C9AAB0];
  v13 = 0;
  v10 = SecItemCopyMatching((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 8), (CFTypeRef *)&v13);
  if (v10 != -25300 && v10)
  {
    *a2 = 0;
  }
  else
  {
    v11 = v13;
    v12 = (const void *)objc_msgSend(v13, "sortedArrayUsingComparator:", &__block_literal_global_27);
    *a2 = v12;
    if (v12)
      CFRetain(v12);
    if (v11)
      CFRelease(v11);
  }
}

void sub_197265108(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit15LocalConnection22getExistingCredentialsERKN3WTF6StringE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  return objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0CD6A98]), "compare:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0CD6A98]));
}

uint64_t WebKit::LocalService::isAvailable(WebKit::LocalService *this)
{
  WebKit *v1;
  uint64_t IsSupported;
  void *v3;
  char v4;
  WebKit *v5;
  WebKit *v7;

  v1 = (WebKit *)objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](this), "shouldUseAlternateCredentialStore");
  if ((v1 & 1) == 0)
  {
    v3 = (void *)objc_msgSend(objc_alloc((Class)WebKit::getLAContextClass(v1)), "init");
    v7 = 0;
    v4 = objc_msgSend(v3, "canEvaluatePolicy:error:", 1, &v7);
    v5 = v7;
    if (v7)
      v4 = 0;
    if ((v4 & 1) != 0 || (v5 = (WebKit *)-[WebKit code](v7, "code"), v5 == (WebKit *)-8))
    {
      IsSupported = WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported(v5);
      if (!v3)
        return IsSupported;
    }
    else
    {
      IsSupported = 0;
      if (!v3)
        return IsSupported;
    }
    CFRelease(v3);
    return IsSupported;
  }
  return 1;
}

void sub_19726522C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LocalService::startDiscoveryInternal(WebKit::LocalService *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  result = (*(uint64_t (**)(WebKit::LocalService *))(*(_QWORD *)this + 32))(this);
  if ((_DWORD)result)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        (*(void (**)(uint64_t *__return_ptr, WebKit::LocalService *))(*(_QWORD *)this + 40))(&v8, this);
        WebKit::LocalAuthenticator::create(&v8, (uint64_t *)&v9);
        v5 = (uint64_t)v9;
        v9 = 0;
        v10 = (_DWORD *)v5;
        (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v4 + 16))(v4, &v10);
        v6 = v10;
        v10 = 0;
        if (v6)
        {
          if (v6[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        v7 = v9;
        v9 = 0;
        if (v7)
        {
          if (v7[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
          else
            --v7[2];
        }
        result = v8;
        v8 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_197265334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  if (a12)
  {
    if (a12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
    else
      --a12[2];
  }
  if (a11)
  {
    if (a11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[2];
  }
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebKit::Authenticator *WebKit::LocalAuthenticator::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WebKit::Authenticator *result;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x330);
  result = WebKit::Authenticator::Authenticator((WebKit::Authenticator *)v4);
  *(_QWORD *)v4 = off_1E34CC358;
  *(_DWORD *)(v4 + 776) = 0;
  v6 = *a1;
  *a1 = 0;
  *(_QWORD *)(v4 + 784) = v6;
  *(_QWORD *)(v4 + 792) = 0;
  *(_QWORD *)(v4 + 808) = 0;
  *(_QWORD *)(v4 + 800) = 0;
  *a2 = v4;
  return result;
}

void sub_19726541C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::LocalService::createLocalConnection@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E34CC388;
  result[1] = 0;
  *a1 = result;
  return result;
}

uint64_t WebKit::NfcConnection::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x48);
  result = WebKit::NfcConnection::NfcConnection(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1972654B0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcConnection::NfcConnection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::RunLoop *v9;
  _QWORD *v10;
  uint64_t v12;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 1;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = -[WKNFReaderSessionDelegate initWithConnection:]([WKNFReaderSessionDelegate alloc], "initWithConnection:", a1);
  v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v7 = *(unsigned int **)(a3 + 8);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 32) = v7;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34CC720;
  v10[1] = WebKit::NfcConnection::startPolling;
  v10[2] = 0;
  v10[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 40), v9);
  *(_QWORD *)(a1 + 40) = off_1E34ABE00;
  *(_QWORD *)(a1 + 64) = v10;
  objc_msgSend(*(id *)(a1 + 16), "setDelegate:", *(_QWORD *)(a1 + 24));
  v12 = 0;
  objc_msgSend(*(id *)(a1 + 16), "startPollingWithError:", &v12);
  return a1;
}

void sub_1972655C4(_Unwind_Exception *a1)
{
  unsigned int **v1;
  _QWORD *v2;
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  const void *v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v6 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = (const void *)v2[3];
  v2[3] = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)v2[2];
  v2[2] = 0;
  if (v10)
    CFRelease(v10);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcConnection::startPolling(id *this)
{
  uint64_t v2;

  v2 = 0;
  return objc_msgSend(this[2], "startPollingWithError:", &v2);
}

void WebKit::NfcConnection::~NfcConnection(WebKit::NfcConnection *this)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;
  const void *v8;

  objc_msgSend(*((id *)this + 2), "disconnectTag");
  objc_msgSend(*((id *)this + 2), "stopPolling");
  objc_msgSend(*((id *)this + 2), "endSession");
  *((_QWORD *)this + 5) = off_1E34ABE00;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::NfcConnection *)((char *)this + 40));
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  v7 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    CFRelease(v8);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

void sub_197265770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  const void *v9;

  *(_QWORD *)(v1 + 40) = off_1E34ABE00;
  v3 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 40));
  v5 = *(unsigned int **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v9)
    CFRelease(v9);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NfcConnection::transact@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  const void *v5;
  void *v6;
  char *v7;
  WTF *v8;

  v4 = *(void **)(a1 + 16);
  v5 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *(_QWORD *)a2, *(unsigned int *)(a2 + 12));
  v6 = (void *)objc_msgSend(v4, "transceive:", v5);
  if (v5)
    CFRelease(v5);
  if (v6)
  {
    v7 = (char *)objc_msgSend(v6, "bytes");
    v8 = (WTF *)objc_msgSend(v6, "length");
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a3, v7, v8);
}

void sub_19726589C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::NfcService *WebKit::NfcService::NfcService(WebKit::NfcService *this, WebKit::AuthenticatorTransportServiceObserver *a2)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::RunLoop *v7;

  *(_QWORD *)this = off_1E34AE8F8;
  *((_QWORD *)this + 1) = 0;
  v4 = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)a2 + 1, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)this = off_1E34CC450;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v5;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::RunLoop::Timer::Timer<WebKit::NfcService>((WebKit::NfcService *)((char *)this + 40), v7, (uint64_t)this, 32, 1);
  return this;
}

void sub_197265934(_Unwind_Exception *a1, void *a2)
{
  WebKit::AuthenticatorTransportService *v2;
  WebKit::NfcConnection *v4;
  uint64_t v5;

  v4 = (WebKit::NfcConnection *)*((_QWORD *)v2 + 4);
  *((_QWORD *)v2 + 4) = 0;
  if (v4)
    WTF::RefCounted<WebKit::NfcConnection>::deref(v4);
  *(_QWORD *)v2 = off_1E34AE928;
  v5 = *((_QWORD *)v2 + 3);
  if (v5)
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v5, a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v2);
  _Unwind_Resume(a1);
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer<WebKit::NfcService>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34CC748;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v10;
  return a1;
}

void sub_1972659E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::NfcService::~NfcService(WebKit::NfcService *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  void *v4;
  WebKit::NfcConnection *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E34CC450;
  *((_QWORD *)this + 5) = off_1E34ABE00;
  v2 = (WebKit::NfcService *)((char *)this + 40);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = (WebKit::NfcConnection *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    WTF::RefCounted<WebKit::NfcConnection>::deref(v5);
  *(_QWORD *)this = off_1E34AE928;
  v6 = *((_QWORD *)this + 3);
  if (v6)
    WTF::HashTable<std::unique_ptr<WebKit::CtapDriver>,std::unique_ptr<WebKit::CtapDriver>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>,WTF::HashTraits<std::unique_ptr<WebKit::CtapDriver>>>::deallocateTable(v6, v4);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::NfcService::~NfcService(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::NfcService::isAvailable(WebKit::NfcService *this)
{
  return objc_msgSend((id)objc_msgSend((id)WebKit::getNFHardwareManagerClass(this), "sharedHardwareManager"), "areFeaturesSupported:outError:", 1, 0);
}

uint64_t WebKit::NfcService::startDiscoveryInternal(WebKit::NfcService *this)
{
  return (*(uint64_t (**)(WebKit::NfcService *))(*(_QWORD *)this + 32))(this);
}

uint64_t WebKit::NfcService::restartDiscoveryInternal(WebKit::NfcService *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    objc_msgSend(*(id *)(v1 + 16), "disconnectTag");
    objc_msgSend(*(id *)(v1 + 16), "stopPolling");
    objc_msgSend(*(id *)(v1 + 16), "endSession");
  }
  return WTF::RunLoop::TimerBase::start();
}

void WebKit::NfcService::platformStartDiscovery(WebKit::NfcService *this)
{
  unsigned int *v2;
  unsigned int v3;
  WebKit *v4;

  if (objc_msgSend((id)objc_msgSend((id)WebKit::getNFHardwareManagerClass(this), "sharedHardwareManager"), "areFeaturesSupported:outError:", 1, 0))
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v2 = (unsigned int *)*((_QWORD *)this + 1);
    if (v2)
    {
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
    }
    v4 = (WebKit *)malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *(_QWORD *)v4 = MEMORY[0x1E0C809A0];
    *((_QWORD *)v4 + 1) = 50331650;
    *((_QWORD *)v4 + 2) = WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::{lambda(void *,NFReaderSession *,NSError *)#1}::__invoke;
    *((_QWORD *)v4 + 3) = &WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::descriptor;
    *((_QWORD *)v4 + 4) = v2;
    *((_QWORD *)v4 + 5) = this;
    objc_msgSend((id)objc_msgSend((id)WebKit::getNFHardwareManagerClass(v4), "sharedHardwareManager"), "startReaderSession:", v4);
    _Block_release(v4);
  }
}

void sub_197265BF8(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197265F20(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_197266154(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1972662A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1972664CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LocalAuthenticator::~LocalAuthenticator(WebKit::LocalAuthenticator *this)
{
  const void *v2;
  uint64_t v3;

  v2 = (const void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v2)
    CFRelease(v2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::LocalAuthenticator *)((char *)this + 792));
  v3 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::Authenticator::~Authenticator(this);
}

{
  const void *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;

  v2 = (const void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v2)
    CFRelease(v2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::LocalAuthenticator *)((char *)this + 792));
  v3 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::Authenticator::~Authenticator(this);
  WTF::fastFree(v4, v5);
}

void WebKit::LocalService::~LocalService(WebKit::LocalService *this)
{
  WTF *v1;
  void *v2;

  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
  WTF::fastFree(v1, v2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(const void **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(v6);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *WTF::BlockPtr<void ()(TKSmartCardSlot *)>::fromCallable<WebKit::CcidService::updateSlots(NSArray *)::$_0>(WebKit::CcidService::updateSlots(NSArray *)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::BlockPtr<void ()(TKSmartCardSlot *)>::fromCallable<WebKit::CcidService::updateSlots(NSArray *)::$_0>(WebKit::CcidService::updateSlots(NSArray *)::$_0)::{lambda(void *,TKSmartCardSlot *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  _WKSmartCardSlotStateObserver *v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  const WTF::StringImpl *v9;
  _WKSmartCardSlotStateObserver *v10;
  CFTypeRef v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  WTF **v23;
  int i;
  unsigned int v25;
  WTF **v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  CFTypeRef cf;
  WTF *v36;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = [_WKSmartCardSlotStateObserver alloc];
  if (v4)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    v6 = *(unsigned int **)(v4 + 8);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v6 = 0;
  }
  cf = a2;
  v36 = (WTF *)v6;
  if (a2)
    CFRetain(a2);
  v10 = -[_WKSmartCardSlotStateObserver initWithService:slot:](v5, "initWithService:slot:", &v36, &cf);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = (unsigned int *)v36;
  v36 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v8);
    }
  }
  v17 = *(_QWORD *)(v4 + 80);
  v15 = (uint64_t *)(v4 + 80);
  v16 = v17;
  if (v17
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v15),
        (v16 = *v15) != 0))
  {
    v18 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = (const WTF::StringImpl **)(a1 + 40);
  v20 = *(WTF::StringImpl **)(a1 + 40);
  v21 = *((_DWORD *)v20 + 4);
  if (v21 >= 0x100)
    v22 = v21 >> 8;
  else
    v22 = WTF::StringImpl::hashSlowCase(v20);
  v23 = 0;
  for (i = 1; ; ++i)
  {
    v25 = v22 & v18;
    v26 = (WTF **)(v16 + 16 * (v22 & v18));
    v27 = *v26;
    if (*v26 == (WTF *)-1)
    {
      v23 = (WTF **)(v16 + 16 * v25);
      goto LABEL_26;
    }
    if (!v27)
      break;
    if ((WTF::equal(v27, *v19, v9) & 1) != 0)
      goto LABEL_42;
LABEL_26:
    v22 = i + v25;
  }
  if (v23)
  {
    *v23 = 0;
    v23[1] = 0;
    --*(_DWORD *)(*v15 - 16);
    v26 = v23;
  }
  WTF::String::operator=(v26, (WTF::StringImpl *)v19);
  if (v10)
    CFRetain(v10);
  v28 = v26[1];
  v26[1] = (WTF *)v10;
  if (v28)
    CFRelease(v28);
  v29 = *v15;
  if (*v15)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v15;
  if (*v15)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33)
LABEL_41:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v15);
  }
  else if (3 * v34 <= 4 * v33)
  {
    goto LABEL_41;
  }
LABEL_42:
  objc_msgSend(a2, "addObserver:forKeyPath:options:context:", v10, CFSTR("state"), 5, 0, cf, v36);
  if (v10)
    CFRelease(v10);
}

void sub_197266944(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  unsigned int v11;
  unsigned int v12;

  if (a10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)a10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)a10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v11 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v11);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v17 = ++v18 + v19;
          }
          while (*(_QWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(const void **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            CFRelease(v21);
            v22 = *(WTF::StringImpl **)v20;
            *(_QWORD *)v20 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v8);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v20 = 0;
          }
          v23 = *v10;
          *v10 = 0;
          *(_QWORD *)v20 = v23;
          v24 = v4 + 16 * v9;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v25;
          v26 = *(const void **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
            CFRelease(v26);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_33;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(const void **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(v13);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_34;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_33:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_34;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_34:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

JSC::ArrayBufferView *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  JSC::ArrayBufferView *result;

  result = *a2;
  if (*a2)
    return (JSC::ArrayBufferView *)JSC::ArrayBufferView::byteLength(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (*(_BYTE *)(v2 + 64))
  {
    v3 = *(_QWORD *)(v2 + 32);
    if (v3)
      return *(_QWORD *)(v3 + 32);
  }
  return *(_QWORD *)(v2 + 48);
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs const&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_197266C80(_Unwind_Exception *a1)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs const&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  if (result)
  {
    v2 = result;
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)result = v3;
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(result + 16), a2 + 16);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_197266CE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_197266D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34CC498[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void sub_197266DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34CC498[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34CC498[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34CC4B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _BYTE v9[8];
  WTF::StringImpl *v10;
  char v11;

  v3 = *a1;
  *a1 = 0;
  if (a3[16])
  {
    v4 = *a3;
    v5 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v9[0] = v4;
    v10 = v5;
    v11 = 1;
  }
  else
  {
    v9[0] = 0;
    v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, a2, v9);
  if (v11)
  {
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_197266F78(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore32AuthenticatorAttestationResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_30AuthenticatorAssertionResponseENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore32AuthenticatorAttestationResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_30AuthenticatorAssertionResponseENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x6666667)
  {
    v5 = 40 * v3;
    v6 = WTF::fastMalloc((WTF *)(40 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::PublicKeyCredentialDescriptor>::uninitializedCopy<WebCore::PublicKeyCredentialDescriptor>(*(_QWORD *)a2, *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1972670B0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::PublicKeyCredentialDescriptor>::uninitializedCopy<WebCore::PublicKeyCredentialDescriptor>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_BYTE *)(a3 + v6) = *(_BYTE *)(v5 + v6);
      result = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3 + v6 + 8, v5 + v6 + 8);
      v8 = (WTF *)*(unsigned int *)(v5 + v6 + 36);
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_DWORD *)(a3 + v6 + 36) = (_DWORD)v8;
      if ((_DWORD)v8)
      {
        v9 = (void *)WTF::fastMalloc(v8);
        *(_DWORD *)(a3 + v6 + 32) = (_DWORD)v8;
        *(_QWORD *)(a3 + v6 + 24) = v9;
        result = (uint64_t)memcpy(v9, *(const void **)(v5 + v6 + 24), *(unsigned int *)(v5 + v6 + 36));
      }
      v6 += 40;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

void sub_19726717C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = v13 + v14;
  v17 = *(unsigned int *)(v16 + 16);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E34CC498[v17])(&a13, v16 + 8);
  *(_DWORD *)(v16 + 16) = -1;
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>((uint64_t)a1, a2);
    a1[144] = 1;
  }
  return a1;
}

void sub_1972671F8(_Unwind_Exception *a1)
{
  WebCore::AuthenticationExtensionsClientInputs *v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs const&,WebCore::AuthenticationExtensionsClientInputs*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    *(_QWORD *)result = v4;
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(result + 16), a2 + 16);
    std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(v3 + 64), a2 + 64);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19726727C(_Unwind_Exception *a1)
{
  WTF::StringImpl **v1;
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v2);
  v5 = *v1;
  *v1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs const&,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
    a1[72] = 1;
  }
  return a1;
}

void sub_1972672FC(_Unwind_Exception *a1)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs *v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs const&,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;

  if (result)
  {
    v3 = result;
    v4 = std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](result, a2);
    std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](v4 + 48, a2 + 48);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19726734C(_Unwind_Exception *a1)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues *v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues const&,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_1972673A0(_Unwind_Exception *a1)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues *v1;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues const&,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    v4 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(result, a2);
    std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(v4 + 16), a2 + 16);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1972673F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34CC498[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_197267470(_Unwind_Exception *exception_object)
{
  WTF::ASCIILiteral *v1;

  if (*((_BYTE *)v1 + 16))
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x5555556)
  {
    v5 = 48 * v3;
    v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::uninitializedCopy<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(*(_BYTE **)a2, (_BYTE *)(*(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 12)), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_197267524(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::VectorCopier<false,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::uninitializedCopy<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>(_BYTE *result, _BYTE *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t v6;
  _DWORD *v7;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(_DWORD **)&v5[v6];
      if (v7)
        *v7 += 2;
      *(_QWORD *)(a3 + v6) = v7;
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3 + v6 + 8, (uint64_t)&v5[v6 + 8]);
      result = std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a3 + v6 + 24), (uint64_t)&v5[v6 + 24]);
      v6 += 48;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

void sub_1972675D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v16 = v13 + v14;
  v17 = *(unsigned int *)(v13 + v14 + 16);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E34CC498[v17])(&a13, v16 + 8);
  *(_DWORD *)(v16 + 16) = -1;
  v18 = *(WTF::StringImpl **)(v13 + v14);
  *(_QWORD *)(v13 + v14) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::PublicKeyCredentialCreationOptions *WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(WebCore::PublicKeyCredentialCreationOptions *this, const PublicKeyCredentialCreationOptions *a2)
{
  StringImpl *m_ptr;
  StringImpl *v5;
  StringImpl *v6;
  StringImpl *v7;
  StringImpl *v8;
  StringImpl *v9;
  uint64_t v10;

  m_ptr = a2->var0.var0.m_impl.m_ptr;
  if (a2->var0.var0.m_impl.m_ptr)
    *(_DWORD *)m_ptr += 2;
  *(_QWORD *)this = m_ptr;
  v5 = a2->var0.var1.m_impl.m_ptr;
  if (v5)
    *(_DWORD *)v5 += 2;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 1) = v5;
  *((_BYTE *)this + 24) = 0;
  if (a2->var0.var2.var1)
  {
    v6 = a2->var0.var2.var0.var1.m_impl.m_ptr;
    if (v6)
      *(_DWORD *)v6 += 2;
    *((_QWORD *)this + 2) = v6;
    *((_BYTE *)this + 24) = 1;
  }
  v7 = a2->var1.var0.m_impl.m_ptr;
  if (v7)
    *(_DWORD *)v7 += 2;
  *((_QWORD *)this + 4) = v7;
  v8 = a2->var1.var1.m_impl.m_ptr;
  if (v8)
    *(_DWORD *)v8 += 2;
  *((_QWORD *)this + 5) = v8;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this + 48, (uint64_t)&a2->var1.var2);
  v9 = a2->var1.var3.m_impl.m_ptr;
  if (v9)
    *(_DWORD *)v9 += 2;
  *((_QWORD *)this + 8) = v9;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)this + 72, (uint64_t)&a2->var2);
  WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 88, (uint64_t)&a2->var3);
  *((_QWORD *)this + 13) = a2->var4;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112, (uint64_t)&a2->var5);
  v10 = *(_QWORD *)&a2->var6.var0.var0;
  *((_BYTE *)this + 136) = a2->var8.var0.var0;
  *((_QWORD *)this + 16) = v10;
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100]((_BYTE *)this + 144, (uint64_t)&a2->var8.var0.var1.var1);
  return this;
}

void sub_197267790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  WTF::ASCIILiteral *v18;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18);
  v21 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 96) = 0;
    WTF::fastFree(v21, v20);
  }
  v22 = *(unsigned int *)(v13 + 80);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E34CC498[v22])(&a12, v16);
  *(_DWORD *)(v13 + 80) = -1;
  v23 = *(WTF::StringImpl **)(v13 + 64);
  *(_QWORD *)(v13 + 64) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(unsigned int *)(v13 + 56);
  if ((_DWORD)v24 != -1)
    ((void (*)(char *, uint64_t))off_1E34CC498[v24])(&a13, v15);
  *(_DWORD *)(v13 + 56) = -1;
  v25 = *(WTF::StringImpl **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(WTF::StringImpl **)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v26 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v14, (WTF::StringImpl *)v20);
  v28 = *(WTF::StringImpl **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(WTF::StringImpl **)v13;
  *(_QWORD *)v13 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v27);
    else
      *(_DWORD *)v29 -= 2;
  }
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0>(WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  char v5;
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  if (a3)
    v5 = 2 * (objc_msgSend(a3, "code") == -2);
  else
    v5 = 1;
  v6 = (WTF::RunLoop *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("UserPresence"));
  WTF::RunLoop::main(v6);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v9 = &off_1E34CC518;
  *(_QWORD *)(v9 + 8) = v7;
  if (v6)
    v10 = 3;
  else
    v10 = v5;
  *(_BYTE *)(v9 + 16) = v10;
  *(_QWORD *)(v9 + 24) = v8;
  v12 = v9;
  WTF::RunLoop::dispatch();
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

void sub_197267A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  *a1 = &off_1E34CC518;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CC518;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_197267B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0>(WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  char v5;
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;

  if (a3)
    v5 = 2 * (objc_msgSend(a3, "code") == -2);
  else
    v5 = 1;
  v6 = (WTF::RunLoop *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("UserPresence"));
  WTF::RunLoop::main(v6);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v8 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E34CC560;
  *(_QWORD *)(v8 + 8) = v7;
  if (v6)
    v9 = 3;
  else
    v9 = v5;
  *(_BYTE *)(v8 + 16) = v9;
  v11 = v8;
  WTF::RunLoop::dispatch();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void sub_197267C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CC560;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC560;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0::operator()(NSDictionary *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197267D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::RunLoop *WTF::BlockPtr<void ()(NFReaderSession *,NSError *)>::fromCallable<WebKit::NfcService::platformStartDiscovery(void)::$_0>(WebKit::NfcService::platformStartDiscovery(void)::$_0)::{lambda(void *,NFReaderSession *,NSError *)#1}::__invoke(WTF::RunLoop *result, const void *a2, uint64_t a3)
{
  WTF::RunLoop *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::RunLoop *v7;
  WTF::RunLoop *v8;

  if (!a3)
  {
    v4 = result;
    v5 = *((_QWORD *)result + 5);
    WTF::RunLoop::main(result);
    v6 = *((_QWORD *)v4 + 4);
    *((_QWORD *)v4 + 4) = 0;
    if (a2)
      CFRetain(a2);
    v7 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = &off_1E34CC5A8;
    *((_QWORD *)v7 + 1) = v6;
    *((_QWORD *)v7 + 2) = v5;
    *((_QWORD *)v7 + 3) = a2;
    v8 = v7;
    WTF::RunLoop::dispatch();
    result = v8;
    if (v8)
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

void sub_197267E24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NfcService::platformStartDiscovery(void)::$_0::operator()(NFReaderSession *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CC5A8;
  v3 = (const void *)a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NfcService::platformStartDiscovery(void)::$_0::operator()(NFReaderSession *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34CC5A8;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::NfcConnection *WTF::Detail::CallableWrapper<WebKit::NfcService::platformStartDiscovery(void)::$_0::operator()(NFReaderSession *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::NfcConnection *result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return (WebKit::NfcConnection *)objc_msgSend(*(id *)(a1 + 24), "endSession");
  v2 = *(_QWORD *)(a1 + 16);
  WebKit::NfcConnection::create((uint64_t *)(a1 + 24), v2, &v4);
  result = *(WebKit::NfcConnection **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v4;
  if (result)
    return WTF::RefCounted<WebKit::NfcConnection>::deref(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::CcidService::*&)(void),WebKit::CcidService*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 == (WTF *)-1)
      goto LABEL_9;
    if (!v11)
      break;
    if ((WTF::equal(v11, *a2, a3) & 1) != 0)
      return v3 + 16 * v10;
LABEL_9:
    ++i;
  }
  if (!*a1)
    return 0;
  return *a1 + 16 * *(unsigned int *)(*a1 - 4);
}

void sub_1972685CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl **a24)
{
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  if (a24)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a24, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  cbor::CBORValue *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(cbor::CBORValue **)a1;
    v5 = 32 * v3;
    do
    {
      cbor::CBORValue::~CBORValue(v4);
      v4 = (cbor::CBORValue *)(v6 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  cbor::CBORValue *v10;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(WTF **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v8 = v6;
        v9 = 32 * v5;
        v10 = v4;
        do
        {
          cbor::CBORValue::CBORValue();
          cbor::CBORValue::~CBORValue(v10);
          v8 += 32;
          v10 = (cbor::CBORValue *)((char *)v10 + 32);
          v9 -= 32;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::makeCredential(void)::$_2,void,LAContext *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CC648;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::makeCredential(void)::$_2,void,LAContext *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CC648;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::makeCredential(void)::$_2,void,LAContext *>::call(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  SecAccessControlRef v5;
  CFErrorRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16[8];
  WTF::StringImpl *v17;
  CFErrorRef error;
  uint64_t v19[2];

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v3 + 776) = 5;
      error = 0;
      v5 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x1E0CD68E0], 0x40000001uLL, &error);
      v6 = error;
      if (error)
      {
        v16[0] = 24;
        MEMORY[0x19AEABCC8](&v15, -[__CFError localizedDescription](error, "localizedDescription"));
        v19[0] = (uint64_t)"Couldn't create access control: ";
        v19[1] = 33;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v19, (uint64_t *)&v15, &v17);
        if (v17)
        {
          WebKit::LocalAuthenticator::receiveException(v3, (uint64_t)v16, 5);
          v8 = v17;
          v17 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v7);
            else
              *(_DWORD *)v8 -= 2;
          }
          v14 = v15;
          v15 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v7);
            else
              *(_DWORD *)v14 -= 2;
          }
          CFRelease(v6);
          if (v5)
            CFRelease(v5);
        }
        else
        {
          __break(0xC471u);
        }
      }
      else
      {
        if (a2)
          CFRetain(a2);
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v3 + 16), v3);
        v9 = *(unsigned int **)(v3 + 16);
        if (v9)
        {
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        v11 = *(_QWORD *)(v3 + 784);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v12 = &off_1E34CC670;
        v12[1] = v5;
        v12[2] = a2;
        v12[3] = v9;
        v19[0] = (uint64_t)v12;
        (*(void (**)(uint64_t, SecAccessControlRef, const void *, uint64_t *))(*(_QWORD *)v11 + 32))(v11, v5, a2, v19);
        v13 = v19[0];
        v19[0] = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
}

void sub_197268B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13)
{
  const void *v13;

  if (v13)
    CFRelease(v13);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterReceivingLAContext(LAContext *)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  const void *v7;

  *a1 = &off_1E34CC670;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (const void *)a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[1];
  a1[1] = 0;
  if (v7)
    CFRelease(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterReceivingLAContext(LAContext *)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;
  const void *v7;

  *(_QWORD *)this = &off_1E34CC670;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    CFRelease(v7);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterReceivingLAContext(LAContext *)::$_0,void,WebKit::LocalConnection::UserVerification>::call(_QWORD *a1, int a2)
{
  const void *v2;
  _QWORD *v3;
  __objc2_prot *v4;
  uint64_t v5;
  uint64_t v6;
  CFDataRef v7;
  uint64_t v8;
  __SecKey *v9;
  CFErrorRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  const void *v15;
  PAL::CryptoDigest *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  PAL::CryptoDigest *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  WebKit *v24;
  int v25;
  PAL::CryptoDigest *v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  __int128 v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  const __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  const __CFDictionary *v40;
  OSStatus v41;
  NSObject *v42;
  WTF::StringImpl *v43;
  __CFError *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  CFTypeRef v48;
  OSStatus v49;
  NSObject *v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  SecKeyRef v54;
  CFDataRef v55;
  CFErrorRef v56;
  NSObject *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  OSStatus v60;
  NSObject *v61;
  uint64_t v62;
  WTF *v63;
  const void *v64;
  SecPolicyRef BasicX509;
  CFArrayRef v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CFDataRef v71;
  CFDataRef v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  WTF::StringImpl *v76;
  char v77;
  void *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  WTF *v84;
  char v85;
  void *v86;
  WTF *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF *v90;
  CFErrorRef v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  SecKeyRef v95;
  WTF *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  _OWORD *v101;
  const __CFData *v102;
  SecCertificateRef v103;
  __SecKey *v104;
  CFTypeRef v105;
  uint64_t v106;
  WTF *v107;
  int v108;
  unsigned int v109;
  WTF *v110;
  WTF::StringImpl *v111;
  __int128 v112;
  SecKeyRef key;
  WTF *v114;
  int v115;
  unsigned int v116;
  char v117;
  WTF **v118;
  WTF *v119[2];
  WTF *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  CFErrorRef error;
  WTF::StringImpl *v125;
  char v126;
  PAL::CryptoDigest *v127[2];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  WTF **v133;
  WTF *v134[2];
  SecTrustRef trust;
  SecCertificateRef certificateRef;
  CFErrorRef v137;
  SecKeyRef privateKeyRef;
  CFTypeRef result[3];
  __int128 buf;
  uint64_t v141;
  SecCertificateRef v142;
  _QWORD v143[3];
  _QWORD v144[5];

  v144[3] = *MEMORY[0x1E0C80C00];
  v5 = a1[3];
  if (!v5)
    return a1;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return a1;
  v7 = (CFDataRef)a1[1];
  v8 = a1[2];
  *(_DWORD *)(v6 + 776) = 2;
  if (*(_DWORD *)(v6 + 352))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_178;
  }
  a1 = (_QWORD *)WebKit::LocalAuthenticator::validateUserVerification(v6, a2);
  if (!(_DWORD)a1)
    return a1;
  if (!*(_BYTE *)(v6 + 80))
    goto LABEL_180;
  v119[0] = 0;
  v119[1] = 0;
  v118 = v119;
  cbor::CBORValue::CBORValue((cbor::CBORValue *)&buf, (const WebCore::BufferSource *)(v6 + 104));
  cbor::CBORValue::CBORValue();
  error = (CFErrorRef)v127;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v118, (cbor::CBORValue *)v127);
  cbor::CBORValue::operator=();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v127);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  cbor::CBORValue::CBORValue((cbor::CBORValue *)&buf, (const WTF::String *)(v6 + 88));
  cbor::CBORValue::CBORValue();
  error = (CFErrorRef)v127;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v118, (cbor::CBORValue *)v127);
  cbor::CBORValue::operator=();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v127);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  cbor::CBORValue::CBORValue((cbor::CBORValue *)&buf, (const WTF::String *)(v6 + 120));
  cbor::CBORValue::CBORValue();
  error = (CFErrorRef)v127;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v118, (cbor::CBORValue *)v127);
  cbor::CBORValue::operator=();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v127);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  cbor::CBORValue::CBORValue();
  cbor::CBORWriter::write();
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&buf);
  if (!v117)
    goto LABEL_180;
  v2 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v114, v116);
  v3 = (_QWORD *)(v6 + 72);
  (*(void (**)(SecKeyRef *__return_ptr, _QWORD, uint64_t, CFDataRef, uint64_t, const void *))(**(_QWORD **)(v6 + 784) + 40))(&key, *(_QWORD *)(v6 + 784), v8, v7, v6 + 72, v2);
  if (!key)
  {
    LOBYTE(buf) = 24;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *((PAL::CryptoDigest **)&buf + 1) = v127[0];
    WebKit::LocalAuthenticator::receiveException(v6, (uint64_t)&buf, 5);
    if (*((_QWORD *)&buf + 1))
    {
      if (**((_DWORD **)&buf + 1) == 2)
        WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v13);
      else
        **((_DWORD **)&buf + 1) -= 2;
    }
    goto LABEL_153;
  }
  v9 = SecKeyCopyPublicKey(key);
  error = 0;
  v7 = SecKeyCopyExternalRepresentation(v9, &error);
  v10 = error;
  if (!error)
  {
    if (v9)
      CFRelease(v9);
    v112 = 0uLL;
    PAL::CryptoDigest::create();
    if (v7)
    {
      -[__CFData bytes](v7, "bytes");
      -[__CFData length](v7, "length");
    }
    PAL::CryptoDigest::addBytes();
    PAL::CryptoDigest::computeHash(v127[0]);
    v112 = buf;
    v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", (_QWORD)buf, HIDWORD(buf));
    v15 = *(const void **)(v6 + 808);
    *(_QWORD *)(v6 + 808) = v14;
    if (v15)
      CFRelease(v15);
    v16 = v127[0];
    v127[0] = 0;
    if (v16)
    {
      PAL::CryptoDigest::~CryptoDigest(v16);
      WTF::fastFree(v17, v18);
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = 0x2000000000;
    v19 = WTF::fastMalloc((WTF *)0x20);
    DWORD2(buf) = 32;
    *(_QWORD *)&buf = v19;
    -[__CFData getBytes:range:](v7, "getBytes:range:", v19, 1, 32);
    v127[0] = 0;
    v127[1] = (PAL::CryptoDigest *)0x2000000000;
    v20 = (PAL::CryptoDigest *)WTF::fastMalloc((WTF *)0x20);
    LODWORD(v127[1]) = 32;
    v127[0] = v20;
    -[__CFData getBytes:range:](v7, "getBytes:range:", v20, 33, 32);
    WebCore::encodeES256PublicKeyAsCBOR();
    v110 = error;
    v111 = v125;
    v22 = v127[0];
    if (v127[0])
    {
      v127[0] = 0;
      LODWORD(v127[1]) = 0;
      WTF::fastFree(v22, v21);
    }
    v23 = (WTF *)buf;
    if ((_QWORD)buf)
    {
      *(_QWORD *)&buf = 0;
      DWORD2(buf) = 0;
      v23 = (WTF *)WTF::fastFree(v23, v21);
    }
    v4 = &OBJC_PROTOCOL___NSSecureCoding;
    v24 = (WebKit *)WebKit::getASCWebKitSPISupportClass[0](v23);
    if (v24)
      objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](v24), "shouldUseAlternateCredentialStore");
    if (!*(_BYTE *)(v6 + 80))
      goto LABEL_180;
    if ((_MergedGlobals_83 & 1) != 0)
    {
LABEL_32:
      v25 = dword_1ECE72BC4;
      v127[0] = 0;
      LODWORD(v127[1]) = 0;
      HIDWORD(v127[1]) = dword_1ECE72BC4;
      if (dword_1ECE72BC4)
      {
        v26 = (PAL::CryptoDigest *)WTF::fastMalloc((WTF *)dword_1ECE72BC4);
        LODWORD(v127[1]) = v25;
        v127[0] = v26;
        memcpy(v26, (const void *)qword_1ECE72BB8, dword_1ECE72BC4);
      }
      WebCore::buildAttestedCredentialData();
      WebCore::buildAuthData();
      v28 = (WTF *)buf;
      if ((_QWORD)buf)
      {
        *(_QWORD *)&buf = 0;
        DWORD2(buf) = 0;
        WTF::fastFree(v28, v27);
      }
      v29 = v127[0];
      if (v127[0])
      {
        v127[0] = 0;
        LODWORD(v127[1]) = 0;
        WTF::fastFree(v29, v27);
      }
      if (*(_BYTE *)(v6 + 192) != 3)
      {
        v44 = (__CFError *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v44 += 2;
        error = v44;
        *((_QWORD *)&buf + 1) = 0;
        v141 = 0;
        *(_QWORD *)&buf = (char *)&buf + 8;
        LOBYTE(v122) = 0;
        WebCore::buildAttestationObject();
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&buf, *((WTF **)&buf + 1));
        v46 = error;
        error = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v45);
          else
            *(_DWORD *)v46 -= 2;
        }
        LOBYTE(buf) = 0;
        LOBYTE(v141) = 0;
        WebKit::LocalAuthenticator::finishMakeCredential(v6, (uint64_t)&v112, (uint64_t)v127, (uint64_t)&buf);
        if ((_BYTE)v141 && *((_QWORD *)&buf + 1))
        {
          if (**((_DWORD **)&buf + 1) == 2)
            WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v13);
          else
            **((_DWORD **)&buf + 1) -= 2;
        }
        v52 = v127[0];
        if (v127[0])
        {
          v127[0] = 0;
          LODWORD(v127[1]) = 0;
          WTF::fastFree(v52, v13);
        }
        goto LABEL_145;
      }
      v30 = v112;
      v112 = 0uLL;
      WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v6 + 16), v6);
      v31 = *(unsigned int **)(v6 + 16);
      if (v31)
      {
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
      }
      v33 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v33 = &off_1E34CC6A8;
      *(_OWORD *)(v33 + 8) = v30;
      *(_QWORD *)(v33 + 24) = v31;
      v106 = v33;
      v34 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithBytes:length:", v107, v109);
      objc_msgSend(v34, "replaceBytesInRange:withBytes:", 37, 16, &enterpriseAAGUID);
      v35 = ((uint64_t (*)(uint64_t))v4[4].name)(objc_msgSend(v34, "appendBytes:length:", *(_QWORD *)(v6 + 32), *(unsigned int *)(v6 + 44)));
      if (*(_BYTE *)(v6 + 80))
      {
        v36 = (void *)v35;
        if (*v3)
          v37 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v37 = &stru_1E351F1B8;
        v38 = objc_msgSend(v36, "entepriseAttestationIdentityPersistentReferenceForRelyingParty:", v37);
        if (!v38)
        {
LABEL_62:
          v127[0] = 0;
          v127[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v47 = buf;
          LOBYTE(buf) = 24;
          *((_QWORD *)&buf + 1) = v47;
          LOBYTE(v141) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(&v106, (uint64_t)v127, (char *)&buf);
          if ((_BYTE)v141 && *((_QWORD *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2)
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v13);
            else
              **((_DWORD **)&buf + 1) -= 2;
          }
          v53 = v127[0];
          if (v127[0])
          {
            v127[0] = 0;
            LODWORD(v127[1]) = 0;
            WTF::fastFree(v53, v13);
          }
LABEL_143:
          if (v106)
            (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
LABEL_145:
          v92 = v107;
          if (v107)
          {
            v107 = 0;
            v108 = 0;
            WTF::fastFree(v92, v13);
          }
          v93 = v110;
          if (v110)
          {
            v110 = 0;
            LODWORD(v111) = 0;
            WTF::fastFree(v93, v13);
          }
          v94 = (WTF *)v112;
          if ((_QWORD)v112)
          {
            *(_QWORD *)&v112 = 0;
            DWORD2(v112) = 0;
            WTF::fastFree(v94, v13);
          }
          goto LABEL_151;
        }
        v39 = *MEMORY[0x1E0CD70E0];
        v143[0] = *MEMORY[0x1E0CD6C98];
        v143[1] = v39;
        v144[0] = *MEMORY[0x1E0CD6CB0];
        v144[1] = v38;
        v143[2] = *MEMORY[0x1E0CD7028];
        v144[2] = MEMORY[0x1E0C9AAB0];
        v40 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v144, v143, 3);
        result[0] = 0;
        v41 = SecItemCopyMatching(v40, result);
        if (v41)
        {
          v42 = qword_1ECE71AC8;
          if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v41;
            _os_log_error_impl(&dword_196BCC000, v42, OS_LOG_TYPE_ERROR, "Couldn't find attestation certificate: %d", (uint8_t *)&buf, 8u);
          }
          goto LABEL_62;
        }
        v48 = result[0];
        privateKeyRef = 0;
        v49 = SecIdentityCopyPrivateKey((SecIdentityRef)result[0], &privateKeyRef);
        if (v49)
        {
          v50 = qword_1ECE71AC8;
          if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v49;
            _os_log_error_impl(&dword_196BCC000, v50, OS_LOG_TYPE_ERROR, "Couldn't access attestation signing key: %d", (uint8_t *)&buf, 8u);
          }
          v127[0] = 0;
          v127[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v51 = buf;
          LOBYTE(buf) = 24;
          *((_QWORD *)&buf + 1) = v51;
          LOBYTE(v141) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(&v106, (uint64_t)v127, (char *)&buf);
          if ((_BYTE)v141 && *((_QWORD *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2)
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v13);
            else
              **((_DWORD **)&buf + 1) -= 2;
          }
          v63 = v127[0];
          if (v127[0])
          {
            v127[0] = 0;
            LODWORD(v127[1]) = 0;
            WTF::fastFree(v63, v13);
          }
LABEL_141:
          if (v48)
            CFRelease(v48);
          goto LABEL_143;
        }
        v54 = privateKeyRef;
        v137 = 0;
        v55 = SecKeyCreateSignature(privateKeyRef, (SecKeyAlgorithm)*MEMORY[0x1E0CD6DF8], (CFDataRef)v34, &v137);
        v56 = v137;
        if (v137)
        {
          v57 = qword_1ECE71AC8;
          if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
          {
            v99 = -[__CFError localizedDescription](v56, "localizedDescription");
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v99;
            _os_log_error_impl(&dword_196BCC000, v57, OS_LOG_TYPE_ERROR, "Couldn't generate attestation signature: %@", (uint8_t *)&buf, 0xCu);
          }
          v127[0] = 0;
          v127[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v58 = buf;
          LOBYTE(buf) = 24;
          *((_QWORD *)&buf + 1) = v58;
          LOBYTE(v141) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(&v106, (uint64_t)v127, (char *)&buf);
          if ((_BYTE)v141 && *((_QWORD *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2)
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v59);
            else
              **((_DWORD **)&buf + 1) -= 2;
          }
          v90 = v127[0];
          if (v127[0])
          {
            v127[0] = 0;
            LODWORD(v127[1]) = 0;
            WTF::fastFree(v90, v59);
          }
          v91 = v56;
LABEL_136:
          CFRelease(v91);
LABEL_137:
          if (v55)
            CFRelease(v55);
          if (v54)
            CFRelease(v54);
          goto LABEL_141;
        }
        certificateRef = 0;
        v60 = SecIdentityCopyCertificate((SecIdentityRef)result[0], &certificateRef);
        if (v60)
        {
          v61 = qword_1ECE71AC8;
          if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v60;
            _os_log_error_impl(&dword_196BCC000, v61, OS_LOG_TYPE_ERROR, "Couldn't access attestation certificate: %d", (uint8_t *)&buf, 8u);
          }
          v127[0] = 0;
          v127[1] = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v62 = buf;
          LOBYTE(buf) = 24;
          *((_QWORD *)&buf + 1) = v62;
          LOBYTE(v141) = 1;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(&v106, (uint64_t)v127, (char *)&buf);
          if ((_BYTE)v141 && *((_QWORD *)&buf + 1))
          {
            if (**((_DWORD **)&buf + 1) == 2)
              WTF::StringImpl::destroy(*((WTF::StringImpl **)&buf + 1), v13);
            else
              **((_DWORD **)&buf + 1) -= 2;
          }
          v97 = v127[0];
          if (v127[0])
          {
            v127[0] = 0;
            LODWORD(v127[1]) = 0;
            WTF::fastFree(v97, v13);
          }
          goto LABEL_137;
        }
        v103 = certificateRef;
        v104 = v54;
        v142 = certificateRef;
        v105 = v48;
        v102 = v55;
        v64 = (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v142, 1);
        BasicX509 = SecPolicyCreateBasicX509();
        trust = 0;
        SecTrustCreateWithCertificates(v64, BasicX509, &trust);
        v66 = SecTrustCopyCertificateChain(trust);
        v67 = (id)CFMakeCollectable(v66);
        v134[0] = 0;
        v134[1] = 0;
        v132 = 0;
        v133 = v134;
        v131 = 0;
        *(_OWORD *)v127 = 0u;
        v128 = 0u;
        v129 = 0u;
        v130 = 0u;
        v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", v127, &buf, 16);
        if (v68)
        {
          v69 = *(_QWORD *)v128;
          do
          {
            v70 = 0;
            do
            {
              if (*(_QWORD *)v128 != v69)
                objc_enumerationMutation(v67);
              v71 = SecCertificateCopyData(*((SecCertificateRef *)v127[1] + v70));
              v72 = v71;
              if (v71)
              {
                v73 = (char *)-[__CFData bytes](v71, "bytes");
                v74 = -[__CFData length](v72, "length");
                v75 = v74;
                v122 = 0;
                LODWORD(v123) = 0;
                HIDWORD(v123) = v74;
                if (v74)
                {
                  if (HIDWORD(v74))
                    goto LABEL_183;
                  v76 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v74);
                  LODWORD(v123) = v75;
                  v122 = v76;
                  do
                  {
                    v77 = *v73++;
                    *(_BYTE *)v76 = v77;
                    v76 = (WTF::StringImpl *)((char *)v76 + 1);
                    --v75;
                  }
                  while (v75);
                }
              }
              else
              {
                v122 = 0;
                v123 = 0;
              }
              cbor::CBORValue::CBORValue();
              if (HIDWORD(v132) == (_DWORD)v132)
                WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v131, HIDWORD(v132) + 1, (unint64_t)&error);
              cbor::CBORValue::CBORValue();
              ++HIDWORD(v132);
              cbor::CBORValue::~CBORValue((cbor::CBORValue *)&error);
              v79 = v122;
              if (v122)
              {
                v122 = 0;
                LODWORD(v123) = 0;
                WTF::fastFree(v79, v78);
              }
              if (v72)
                CFRelease(v72);
              ++v70;
            }
            while (v70 != v68);
            v80 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", v127, &buf, 16);
            v68 = v80;
          }
          while (v80);
        }
        cbor::CBORValue::CBORValue();
        v48 = v105;
        v55 = v102;
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v122, "x5c");
        v120 = (WTF *)&v122;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v133, (cbor::CBORValue *)&v122);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v122);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&error);
        v54 = v104;
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&error);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v122, "alg");
        v120 = (WTF *)&v122;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v133, (cbor::CBORValue *)&v122);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v122);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&error);
        if (!v102)
        {
          v120 = 0;
          v121 = 0;
          goto LABEL_127;
        }
        v81 = (char *)-[__CFData bytes](v102, "bytes");
        v82 = -[__CFData length](v102, "length");
        v83 = v82;
        v120 = 0;
        LODWORD(v121) = 0;
        HIDWORD(v121) = v82;
        if (!v82)
          goto LABEL_127;
        if (!HIDWORD(v82))
        {
          v84 = (WTF *)WTF::fastMalloc((WTF *)v82);
          LODWORD(v121) = v83;
          v120 = v84;
          do
          {
            v85 = *v81++;
            *(_BYTE *)v84 = v85;
            v84 = (WTF *)((char *)v84 + 1);
            --v83;
          }
          while (v83);
LABEL_127:
          cbor::CBORValue::CBORValue();
          cbor::CBORValue::CBORValue((cbor::CBORValue *)&v122, "sig");
          result[2] = &v122;
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v133, (cbor::CBORValue *)&v122);
          cbor::CBORValue::operator=();
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v122);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&error);
          v87 = v120;
          if (v120)
          {
            v120 = 0;
            LODWORD(v121) = 0;
            WTF::fastFree(v87, v86);
          }
          WTF::Vector<cbor::CBORValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v131, v86);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v131 = error;
          WebCore::buildAttestationObject();
          v89 = v131;
          v131 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, v88);
            else
              *(_DWORD *)v89 -= 2;
          }
          LOBYTE(error) = 0;
          v126 = 0;
          WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>)>::operator()(&v106, (uint64_t)&v122, (char *)&error);
          if (v126 && v125)
          {
            if (*(_DWORD *)v125 == 2)
              WTF::StringImpl::destroy(v125, v98);
            else
              *(_DWORD *)v125 -= 2;
          }
          v100 = v122;
          if (v122)
          {
            v122 = 0;
            LODWORD(v123) = 0;
            WTF::fastFree(v100, v98);
          }
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v133, v134[0]);
          v91 = v103;
          if (!v103)
            goto LABEL_137;
          goto LABEL_136;
        }
LABEL_183:
        __break(0xC471u);
        JUMPOUT(0x197269ED8);
      }
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_180:
      __break(1u);
      goto LABEL_183;
    }
LABEL_178:
    qword_1ECE72BB8 = 0;
    *(_QWORD *)&dword_1ECE72BC0 = 0x1000000000;
    v101 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
    dword_1ECE72BC0 = 16;
    qword_1ECE72BB8 = (uint64_t)v101;
    *v101 = xmmword_1978D0280;
    _MergedGlobals_83 = 1;
    goto LABEL_32;
  }
  LOBYTE(v127[0]) = 24;
  MEMORY[0x19AEABCC8](&v122, -[__CFError localizedDescription](error, "localizedDescription"));
  *(_QWORD *)&buf = "Couldn't export the public key: ";
  *((_QWORD *)&buf + 1) = 33;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&buf, (uint64_t *)&v122, &v127[1]);
  if (!v127[1])
  {
    __break(0xC471u);
    JUMPOUT(0x197269EE0);
  }
  WebKit::LocalAuthenticator::receiveException(v6, (uint64_t)v127, 5);
  v12 = v127[1];
  v127[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v43 = v122;
  v122 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v11);
    else
      *(_DWORD *)v43 -= 2;
  }
  CFRelease(v10);
  if (v9)
    CFRelease(v9);
LABEL_151:
  if (v7)
    CFRelease(v7);
LABEL_153:
  v95 = key;
  key = 0;
  if (v95)
    CFRelease(v95);
  if (v2)
    CFRelease(v2);
  if (v117)
  {
    v96 = v114;
    if (v114)
    {
      v114 = 0;
      v115 = 0;
      WTF::fastFree(v96, v13);
    }
  }
  return (_QWORD *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v118, v119[0]);
}

void sub_197269EEC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf, CFTypeRef a11, CFTypeRef a12, uint64_t a13, WTF *a14, int a15, WTF *a16, int a17, WTF *a18, int a19, CFTypeRef a20,WTF *a21,int a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,WTF *a29,uint64_t a30,WTF *a31,int a32,WTF::StringImpl *a33,int a34,uint64_t a35,uint64_t a36,WTF::StringImpl *a37,WTF::StringImpl *a38,char a39,uint64_t a40,PAL::CryptoDigest *a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49,uint64_t a50,char a51,WTF *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,WTF *a61,WTF::StringImpl *a62,char a63)
{
  const void *v63;
  const void *v64;
  WTF::StringImpl *v66;
  WTF *v67;
  void *v68;

  if (a39)
  {
    v66 = a38;
    a38 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, a2);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  v67 = a33;
  if (a33)
  {
    a33 = 0;
    a34 = 0;
    WTF::fastFree(v67, a2);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a51, a52);
  if (cf)
    CFRelease(cf);
  if (a9)
    CFRelease(a9);
  if (a11)
    CFRelease(a11);
  if (a12)
    CFRelease(a12);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a14)
    WTF::fastFree(a14, v68);
  if (a16)
    WTF::fastFree(a16, v68);
  if (a18)
    WTF::fastFree(a18, v68);
  if (v64)
    CFRelease(v64);
  if (a20)
    CFRelease(a20);
  if (v63)
    CFRelease(v63);
  if (a24)
  {
    if (a21)
      WTF::fastFree(a21, v68);
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a26, a29);
  _Unwind_Resume(a1);
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::LocalAuthenticator::processClientExtensions(std::variant<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>)::$_0,WebKit::LocalAuthenticator::processClientExtensions(std::variant<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>> &>@<X0>(uint64_t **result@<X0>, WebCore::AuthenticatorResponse **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::DeferrableRefCountedBase *v6;
  _Unwind_Exception *v7;
  WTF::DeferrableRefCountedBase *v8;
  char v9;
  _BYTE v10[24];
  char v11;
  _BYTE v12[48];
  uint64_t v13;

  v4 = **result;
  if (*(_DWORD *)(v4 + 352))
  {
LABEL_23:
    v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v12);
    if (v11)
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)v10);
    if (v9 && v8)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
    _Unwind_Resume(v7);
  }
  if (!*(_BYTE *)(v4 + 344))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  WebCore::AuthenticatorResponse::extensions(*a2);
  if (!*(_BYTE *)(v4 + 344))
    goto LABEL_22;
  if (!*(_BYTE *)(v4 + 256))
  {
LABEL_15:
    result = (uint64_t **)WebCore::AuthenticatorResponse::setExtensions();
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    goto LABEL_16;
  }
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](v12, v4 + 216);
  if (!v12[40])
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!(v12[9] | v12[32]))
  {
    if (v9)
    {
      v6 = v8;
      v8 = 0;
      if (v6)
        WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v12);
    goto LABEL_15;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v13;
  result = (uint64_t **)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v12);
  *(_BYTE *)a3 = 6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_16:
  if (v11)
    result = (uint64_t **)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)v10);
  if (v9)
  {
    result = (uint64_t **)v8;
    if (v8)
      return (uint64_t **)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::LocalAuthenticator::processClientExtensions(std::variant<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>)::$_0,WebKit::LocalAuthenticator::processClientExtensions(std::variant<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>> &>@<X0>(unint64_t a1@<X0>, WebCore::AuthenticatorResponse **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v8;
  char v9;
  WebKit *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  void *v15;
  int v16;
  JSC::ArrayBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  OSStatus v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *Map;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  const void *v41;
  const __CFDictionary *v42;
  void *v43;
  WTF *v44;
  char v45;
  WTF::DeferrableRefCountedBase *v46;
  WTF::DeferrableRefCountedBase *v47;
  char v48;
  _BYTE v49[32];
  WTF *v50;
  int v51;
  unsigned int v52;
  char v53;
  _QWORD v54[4];
  WTF **v55;
  WTF *v56[2];
  _QWORD v57[4];
  char v58;
  CFTypeRef result;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  WTF **v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[7];
  _QWORD v72[9];

  v72[7] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_DWORD *)(v6 + 352) != 1)
    std::__throw_bad_variant_access[abi:sn180100]();
  if (!*(_BYTE *)(v6 + 256))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return a1;
  }
  WebCore::AuthenticatorResponse::extensions(*a2);
  if (*(_BYTE *)(v6 + 256))
    v8 = *(_BYTE *)(v6 + 168) == 0;
  else
    v8 = 1;
  if (v8)
    goto LABEL_8;
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](&v60, v6 + 128);
  if (!v65)
    goto LABEL_60;
  if (v60)
  {
LABEL_12:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = v57[0];
    a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v60);
    v9 = 6;
LABEL_13:
    *(_BYTE *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v4;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_14;
  }
  if (!v62)
    goto LABEL_29;
  if (v64)
    goto LABEL_12;
  if (!v61)
  {
LABEL_29:
    v3 = 0;
    goto LABEL_39;
  }
  v10 = (WebKit *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *(_QWORD *)(v6 + 32), *(unsigned int *)(v6 + 44));
  v3 = v10;
  if (*(_DWORD *)(v6 + 352) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_60;
  }
  WebKit::getASCWebKitSPISupportClass[0](v10);
  v11 = objc_opt_respondsToSelector();
  if ((v11 & 1) != 0
    && ((v12 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v11), !*(_QWORD *)(v6 + 80))
      ? (v13 = &stru_1E351F1B8)
      : (v13 = (const __CFString *)WTF::StringImpl::operator NSString *()),
        v14 = (void *)objc_msgSend(v12, "alternateLargeBlobIfNecessaryForRelyingParty:clientDataHash:", v13, v3),
        (v15 = v14) != 0))
  {
    objc_msgSend(v14, "bytes");
    objc_msgSend(v15, "length");
    JSC::ArrayBuffer::tryCreate();
  }
  else
  {
    v57[0] = 0;
  }
  if (v3)
    CFRelease(v3);
  v3 = (_DWORD *)v57[0];
  if (v57[0])
  {
    v16 = *(_DWORD *)v57[0];
  }
  else
  {
    v3 = (_DWORD *)*((_QWORD *)*a2 + 25);
    if (!v3)
      goto LABEL_38;
    v16 = *v3 + 2;
    *v3 = v16;
  }
  *v3 = v16 + 2;
  v57[0] = 0;
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v3);
LABEL_38:
  if (!v65)
    goto LABEL_60;
LABEL_39:
  if (!v64)
    goto LABEL_81;
  v17 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*a2);
  v18 = JSC::ArrayBuffer::span(v17);
  v20 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v18, v19);
  v21 = *MEMORY[0x1E0CD6CC0];
  v22 = *MEMORY[0x1E0CD69F8];
  v71[0] = *MEMORY[0x1E0CD6C98];
  v71[1] = v22;
  v23 = *MEMORY[0x1E0CD6A00];
  v72[0] = v21;
  v72[1] = v23;
  v24 = *MEMORY[0x1E0CD6B88];
  v25 = *MEMORY[0x1E0CD6900];
  v71[2] = *MEMORY[0x1E0CD6B80];
  v71[3] = v25;
  v72[2] = v24;
  v72[3] = v20;
  v26 = *MEMORY[0x1E0CD7010];
  v71[4] = *MEMORY[0x1E0CD70A8];
  v71[5] = v26;
  v72[4] = MEMORY[0x1E0C9AAB0];
  v72[5] = MEMORY[0x1E0C9AAB0];
  v71[6] = *MEMORY[0x1E0CD7020];
  v72[6] = MEMORY[0x1E0C9AAB0];
  result = 0;
  v27 = SecItemCopyMatching((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v72, v71, 7), &result);
  if (v27 != -25300 && v27)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = v57[0];
    v40 = 1;
    goto LABEL_77;
  }
  v28 = (void *)result;
  v4 = *MEMORY[0x1E0CD6908];
  v29 = (void *)objc_msgSend((id)result, "objectForKeyedSubscript:", *MEMORY[0x1E0CD6908]);
  v30 = v29;
  if (v29)
  {
    v31 = objc_msgSend(v29, "bytes");
    a1 = objc_msgSend(v30, "length");
    v32 = a1;
    if (a1)
    {
      if (HIDWORD(a1))
      {
        __break(0xC471u);
        return a1;
      }
      v33 = WTF::fastMalloc((WTF *)a1);
      v30 = (void *)v33;
      v34 = 0;
      do
      {
        *(_BYTE *)(v33 + v34) = *(_BYTE *)(v31 + v34);
        ++v34;
      }
      while (v32 != v34);
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  v54[0] = v30;
  v54[1] = v32;
  cbor::CBORReader::read();
  if (v30)
    WTF::fastFree((WTF *)v30, v35);
  if (v58 && LODWORD(v57[0]) == 5)
  {
    v56[0] = 0;
    v56[1] = 0;
    v55 = v56;
    Map = (_QWORD *)cbor::CBORValue::getMap((cbor::CBORValue *)v57);
    if (v58)
    {
      v37 = (_QWORD *)*Map;
      while (v37 != (_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)v57) + 8))
      {
        cbor::CBORValue::clone((cbor::CBORValue *)(v37 + 8));
        cbor::CBORValue::clone((cbor::CBORValue *)(v37 + 4));
        v66 = &v50;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v55, (cbor::CBORValue *)&v50);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v50);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)v54);
        v38 = (_QWORD *)v37[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (_QWORD *)v37[2];
            v8 = *v39 == (_QWORD)v37;
            v37 = v39;
          }
          while (!v8);
        }
        v37 = v39;
        if (!v58)
          goto LABEL_60;
      }
      if (v65)
      {
        if (v64)
        {
          cbor::CBORValue::CBORValue((cbor::CBORValue *)v54, (const WebCore::BufferSource *)&v63);
          cbor::CBORValue::CBORValue((cbor::CBORValue *)&v50, "largeBlob");
          v66 = &v50;
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v55, (cbor::CBORValue *)&v50);
          cbor::CBORValue::operator=();
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v50);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v54);
          cbor::CBORValue::CBORValue();
          cbor::CBORWriter::write();
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)v54);
          if (v53)
          {
            v41 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v50, v52);
            v69 = *MEMORY[0x1E0CD70E0];
            v70 = objc_msgSend(v28, "objectForKeyedSubscript:");
            v42 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1);
            v67 = v4;
            v68 = v41;
            v4 = SecItemUpdate(v42, (CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1)) == 0;
            if (v41)
              CFRelease(v41);
            if (v53)
            {
              v44 = v50;
              if (v50)
              {
                v50 = 0;
                v51 = 0;
                WTF::fastFree(v44, v43);
              }
            }
            std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v55, v56[0]);
            v40 = 0;
            goto LABEL_73;
          }
        }
        else
        {
          std::__throw_bad_optional_access[abi:sn180100]();
        }
      }
    }
LABEL_60:
    __break(1u);
    goto LABEL_81;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v54[0];
  v40 = 1;
LABEL_73:
  if (v58)
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v57);
  if (v28)
    CFRelease(v28);
LABEL_77:
  if (v20)
    CFRelease(v20);
  if (v40)
  {
    v45 = 0;
    v9 = 24;
    goto LABEL_90;
  }
LABEL_81:
  if (v48)
  {
    if (v3)
      *v3 += 2;
    v46 = v47;
    v47 = (WTF::DeferrableRefCountedBase *)v3;
    if (v46)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v46);
    v9 = 0;
    v45 = 1;
  }
  else
  {
    if (v3)
      *v3 += 2;
    v9 = 0;
    v47 = (WTF::DeferrableRefCountedBase *)v3;
    v45 = 1;
    v48 = 1;
  }
LABEL_90:
  if (v3)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v3);
  a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v60);
  if ((v45 & 1) == 0)
    goto LABEL_13;
LABEL_8:
  a1 = WebCore::AuthenticatorResponse::setExtensions();
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_14:
  if (v49[24])
    a1 = (unint64_t)std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)v49);
  if (v48)
  {
    a1 = (unint64_t)v47;
    if (v47)
      return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v47);
  }
  return a1;
}

void sub_19726AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::DeferrableRefCountedBase *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, WTF *a20,int a21,int a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,WTF *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  WTF::DeferrableRefCountedBase *v38;
  const void *v39;
  const void *v40;

  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a25);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a29, a30);
  if (a36)
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a32);
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (v38)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v38);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&a38);
  if (a19)
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&a16);
  if (a14)
  {
    if (a12)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification(__SecAccessControl *,WebKit::LocalConnection::UserVerification,LAContext *)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)a1 = &off_1E34CC6A8;
  v3 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification(__SecAccessControl *,WebKit::LocalConnection::UserVerification,LAContext *)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E34CC6A8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueMakeCredentialAfterUserVerification(__SecAccessControl *,WebKit::LocalConnection::UserVerification,LAContext *)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,std::optional<WebCore::ExceptionData>>::call(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE v8[8];
  WTF::StringImpl *v9;
  char v10;

  v4 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a3 + 16))
  {
    v3 = *(WTF::StringImpl **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
  }
  v5 = *(_QWORD *)(result + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v8[0] = 0;
      v10 = 0;
      result = (uint64_t)WebKit::LocalAuthenticator::finishMakeCredential(v6, result + 8, (uint64_t)a2, (uint64_t)v8);
      if (v10)
      {
        result = (uint64_t)v9;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            result = WTF::StringImpl::destroy(v9, a2);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  if (v4)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

void sub_19726B20C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  WTF::StringImpl *v12;
  int v13;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (v13 && v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  if (*((unsigned int *)result + 2) > a2)
  {
    v3 = result;
    if (*((unsigned int *)result + 3) > a2)
      result = (WTF *)WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (*((_DWORD *)v3 + 2))
      {
        *((_DWORD *)v3 + 2) = a2;
        result = (WTF *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *((unsigned int *)v3 + 3);
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = a2;
      *(_QWORD *)v3 = result;
      if (result != v4)
        result = (WTF *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::getAssertion(void)::$_1,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34CC6D0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::getAssertion(void)::$_1,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34CC6D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::getAssertion(void)::$_1,void,WebCore::AuthenticatorAssertionResponse *>::call(WTF::RunLoop *a1, uint64_t a2)
{
  uint64_t v4;
  WTF::RunLoop *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = *((_QWORD *)a1 + 1);
  v5 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  result = WTF::RunLoop::isCurrent(v5);
  if ((result & 1) == 0)
    goto LABEL_15;
  v7 = *((_QWORD *)a1 + 2);
  if (!v7)
    return result;
  if (!*(_QWORD *)(v7 + 8))
    return result;
  v8 = *(unsigned int *)(v4 + 804);
  if (!(_DWORD)v8)
    return result;
  v9 = 0;
  while (*(_QWORD *)(*(_QWORD *)(v4 + 792) + 8 * v9) != a2)
  {
    if (v8 == ++v9)
      return result;
  }
  if (v9 >= v8)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x19726B530);
  }
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 776) = 4;
  v10 = *(_QWORD *)(a2 + 184);
  v11 = *(_QWORD *)(a2 + 192);
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(v4 + 16), v4);
  v12 = *(unsigned int **)(v4 + 16);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(v4 + 784);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = &off_1E34CC6F8;
  v15[1] = v12;
  v15[2] = a2;
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v14 + 32))(v14, v10, v11, &v16);
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19726B53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected(WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>> &&)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CC6F8;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected(WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>> &&)::$_0,void,WebKit::LocalConnection::UserVerification>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34CC6F8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::LocalAuthenticator::continueGetAssertionAfterResponseSelected(WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>> &&)::$_0,void,WebKit::LocalConnection::UserVerification>::call(WTF::StringImpl *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  WTF *v8;
  JSC::ArrayBuffer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  OSStatus v22;
  OSStatus v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF::StringImpl *v27;
  CFDataRef Signature;
  CFErrorRef v29;
  NSObject *v30;
  _BOOL4 v31;
  CFErrorRef v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  const __CFDictionary *v39;
  OSStatus v40;
  NSObject *v41;
  uint64_t v42;
  CFTypeRef v43;
  WTF::DeferrableRefCountedBase *v44;
  WTF::DeferrableRefCountedBase *v45;
  uint64_t v46;
  __CFError *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  CFTypeRef cf;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF *v55;
  uint64_t v56;
  CFTypeRef v57;
  CFErrorRef error[2];
  int v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl *v62;
  WTF *v63;
  int v64;
  unsigned int v65;
  char v66[8];
  int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  _BYTE v70[24];
  _BYTE v71[152];
  __int16 v72;
  char v73;
  CFTypeRef result;
  WTF::StringImpl *v75;
  char v76;
  WTF::StringImpl *v77;
  CFTypeRef v78;
  uint64_t v79;
  WTF::StringImpl *v80[4];
  __int128 buf;
  uint64_t v82;
  CFTypeRef v83;
  uint64_t v84;
  _QWORD v85[6];
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a1 + 1);
  if (!v2)
    return a1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return a1;
  v4 = a1;
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 192);
  *(_DWORD *)(v3 + 776) = 2;
  a1 = (WTF::StringImpl *)WebKit::LocalAuthenticator::validateUserVerification(v3, a2);
  if (!(_DWORD)a1)
    return a1;
  if (*(_DWORD *)(v3 + 352) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_77;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v66, v3 + 56);
  v6 = *(WTF::StringImpl **)(v3 + 80);
  v68 = *(_QWORD *)(v3 + 72);
  if (v6)
    *(_DWORD *)v6 += 2;
  v69 = v6;
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v70, v3 + 88);
  v70[16] = *(_BYTE *)(v3 + 104);
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](v71, v3 + 112);
  v72 = *(_WORD *)(v3 + 264);
  v86 = 0;
  v87 = 0;
  WebCore::buildAuthData();
  v8 = v86;
  if (v86)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v8, v7);
  }
  v9 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*((WebCore::AuthenticatorResponse **)v4 + 2));
  v10 = JSC::ArrayBuffer::span(v9);
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v10, v11);
  v13 = (WTF *)*MEMORY[0x1E0CD6CC0];
  v14 = (WTF::StringImpl *)*MEMORY[0x1E0CD69F8];
  v56 = *MEMORY[0x1E0CD6C98];
  v85[0] = *MEMORY[0x1E0CD6C98];
  v85[1] = v14;
  v54 = v14;
  v15 = *MEMORY[0x1E0CD6A00];
  v55 = v13;
  v86 = v13;
  v87 = v15;
  v53 = v15;
  v16 = (WTF::StringImpl *)*MEMORY[0x1E0CD6B80];
  v17 = *MEMORY[0x1E0CD6B88];
  v18 = (WTF::StringImpl *)*MEMORY[0x1E0CD6900];
  v85[2] = *MEMORY[0x1E0CD6B80];
  v85[3] = v18;
  v88 = v17;
  v89 = v12;
  v57 = (CFTypeRef)v12;
  v19 = (WTF::StringImpl *)*MEMORY[0x1E0CD70A8];
  v85[4] = *MEMORY[0x1E0CD7028];
  v85[5] = v19;
  v90 = MEMORY[0x1E0C9AAB0];
  v91 = MEMORY[0x1E0C9AAB0];
  v20 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v86, v85, 6), "mutableCopy");
  v21 = v20;
  if (v5)
    -[__CFDictionary setObject:forKeyedSubscript:](v20, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0CD7088]);
  result = 0;
  v22 = SecItemCopyMatching(v21, &result);
  v23 = v22;
  if (v22)
  {
    LOBYTE(v79) = 24;
    *(_QWORD *)&buf = "Couldn't get the private key reference: ";
    *((_QWORD *)&buf + 1) = 41;
    LODWORD(error[0]) = v22;
    WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)&buf, (int *)error, v80);
    if (v80[0])
    {
      WebKit::LocalAuthenticator::receiveException(v3, (uint64_t)&v79, 5);
      v25 = v80[0];
      v80[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v35 = qword_1ECE71AC8;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v23;
        _os_log_error_impl(&dword_196BCC000, v35, OS_LOG_TYPE_ERROR, "Couldn't get the private key reference: %d", (uint8_t *)&buf, 8u);
      }
      Signature = 0;
      LODWORD(v29) = 1;
      goto LABEL_36;
    }
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x19726BE84);
  }
  cf = result;
  v26 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithBytes:length:", v63, v65);
  objc_msgSend(v26, "appendBytes:length:", *(_QWORD *)(v3 + 32), *(unsigned int *)(v3 + 44));
  error[0] = 0;
  Signature = SecKeyCreateSignature((SecKeyRef)result, (SecKeyAlgorithm)*MEMORY[0x1E0CD6DF8], (CFDataRef)v26, error);
  v29 = error[0];
  if (error[0])
  {
    v30 = qword_1ECE71AC8;
    v31 = os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR);
    v32 = v29;
    if (v31)
    {
      v51 = -[__CFError localizedDescription](v29, "localizedDescription");
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v51;
      _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "Couldn't generate signature: %@", (uint8_t *)&buf, 0xCu);
      v32 = error[0];
    }
    LOBYTE(v79) = 24;
    MEMORY[0x19AEABCC8](&v62, -[__CFError localizedDescription](v32, "localizedDescription"));
    *(_QWORD *)&buf = "Couldn't generate the signature: ";
    *((_QWORD *)&buf + 1) = 34;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&buf, (uint64_t *)&v62, v80);
    if (!v80[0])
      goto LABEL_77;
    WebKit::LocalAuthenticator::receiveException(v3, (uint64_t)&v79, 5);
    v34 = v80[0];
    v80[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    v36 = v62;
    v62 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v33);
      else
        *(_DWORD *)v36 -= 2;
    }
    CFRelease(v29);
    LODWORD(v29) = 1;
  }
  if (cf)
    CFRelease(cf);
LABEL_36:
  if (v21)
    CFRelease(v21);
  if ((_DWORD)v29)
    goto LABEL_39;
  v79 = v56;
  v80[0] = v54;
  *(_QWORD *)&buf = v55;
  *((_QWORD *)&buf + 1) = v53;
  v80[1] = v16;
  v80[2] = v18;
  v82 = v17;
  v83 = v57;
  v80[3] = v19;
  v84 = MEMORY[0x1E0C9AAB0];
  v39 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &buf, &v79, 5);
  v77 = v18;
  v78 = v57;
  v40 = SecItemUpdate(v39, (CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, &v77, 1));
  if (v40)
  {
    v41 = qword_1ECE71AC8;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(result) = 67109120;
      HIDWORD(result) = v40;
      _os_log_error_impl(&dword_196BCC000, v41, OS_LOG_TYPE_ERROR, "Couldn't update the Keychain item: %d", (uint8_t *)&result, 8u);
    }
  }
  WebCore::AuthenticatorAssertionResponse::setAuthenticatorData();
  v42 = *((_QWORD *)v4 + 2);
  if (Signature)
  {
    -[__CFData bytes](Signature, "bytes");
    -[__CFData length](Signature, "length");
  }
  JSC::ArrayBuffer::create();
  v43 = result;
  result = 0;
  v44 = *(WTF::DeferrableRefCountedBase **)(v42 + 128);
  *(_QWORD *)(v42 + 128) = v43;
  if (v44)
  {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v44);
    v45 = (WTF::DeferrableRefCountedBase *)result;
    result = 0;
    if (v45)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v45);
  }
  v46 = *((_QWORD *)v4 + 2);
  ++*(_DWORD *)(v46 + 8);
  v60 = v46;
  v61 = 1;
  WebKit::LocalAuthenticator::processClientExtensions((uint64_t)&result, v3, (uint64_t)&v60);
  if (v61 != -1)
    ((void (*)(CFErrorRef *, uint64_t *))off_1E34CC4C8[v61])(error, &v60);
  v61 = -1;
  if (v76)
  {
    WebKit::LocalAuthenticator::receiveException(v3, (uint64_t)&result, 5);
  }
  else
  {
    v47 = (__CFError *)*((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    error[0] = v47;
    v59 = 0;
    v48 = *(_QWORD *)(v3 + 24);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 8);
      if (v49)
      {
        (*(void (**)(uint64_t, CFErrorRef *))(*(_QWORD *)v49 + 16))(v49, error);
        LODWORD(v48) = v59;
        if (v59 == -1)
          goto LABEL_71;
      }
      else
      {
        LODWORD(v48) = 0;
      }
    }
    ((void (*)(char *, CFErrorRef *))off_1E34CC4D8[v48])(&v73, error);
  }
LABEL_71:
  if (v76)
  {
    v50 = v75;
    v75 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v27);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
LABEL_39:
  if (v57)
    CFRelease(v57);
  if (Signature)
    CFRelease(Signature);
  v37 = v63;
  if (v63)
  {
    v63 = 0;
    v64 = 0;
    WTF::fastFree(v37, v27);
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v71);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v70);
  a1 = v69;
  v69 = 0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 2)
      a1 = (WTF::StringImpl *)WTF::StringImpl::destroy(a1, v38);
    else
      *(_DWORD *)a1 -= 2;
  }
  if (v67 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(CFTypeRef *, char *))off_1E34CC498[v67])(&result, v66);
  return a1;
}

void sub_19726BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::ASCIILiteral *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::AuthenticationExtensionsClientInputs *a15, CFTypeRef a16, char a17, uint64_t a18, uint64_t a19, char a20,int a21,int a22,WTF::StringImpl *a23,WTF *a24,int a25,int a26,char a27,int a28,int a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,WTF::StringImpl *a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,WTF::StringImpl *a62)
{
  const void *v62;
  const void *v63;
  const void *v64;
  void *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;

  CFRelease(v64);
  if (cf)
    CFRelease(cf);
  if (v63)
    CFRelease(v63);
  if (a16)
    CFRelease(a16);
  if (v62)
    CFRelease(v62);
  if (a24)
    WTF::fastFree(a24, v66);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](a15);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10);
  v68 = a31;
  a31 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, v67);
    else
      *(_DWORD *)v68 -= 2;
  }
  if (a29 != -1)
    ((void (*)(char *, char *))off_1E34CC498[a29])(&a56, &a27);
  _Unwind_Resume(a1);
}

WebKit::NfcConnection *WTF::RefCounted<WebKit::NfcConnection>::deref(WebKit::NfcConnection *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::NfcConnection::~NfcConnection(result);
    return (WebKit::NfcConnection *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NfcConnection::*&)(void),WebKit::NfcConnection*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NfcService::*&)(void),WebKit::NfcService*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void sub_19726CC94(_Unwind_Exception *exception_object)
{
  WebKit::NfcConnection *v1;

  if (v1)
    WTF::RefCounted<WebKit::NfcConnection>::deref(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WKCertificateInfoGetTypeID()
{
  return 0;
}

uint64_t WKContextMenuItemGetTypeID()
{
  return 0;
}

uint64_t WKContextMenuItemCreateAsAction()
{
  return 0;
}

uint64_t WKContextMenuItemCreateAsCheckableAction()
{
  return 0;
}

uint64_t WKContextMenuItemCreateAsSubmenu()
{
  return 0;
}

uint64_t WKContextMenuItemSeparatorItem()
{
  return 0;
}

uint64_t WKContextMenuItemGetTag()
{
  return 0;
}

uint64_t WKContextMenuItemGetType()
{
  return 0;
}

uint64_t WKContextMenuItemCopyTitle()
{
  return 0;
}

uint64_t WKContextMenuItemGetEnabled()
{
  return 0;
}

uint64_t WKContextMenuItemGetChecked()
{
  return 0;
}

uint64_t WKContextMenuCopySubmenuItems()
{
  return 0;
}

uint64_t WKContextMenuItemGetUserData()
{
  return 0;
}

uint64_t WKDataGetTypeID()
{
  return 8;
}

uint64_t WKDataCreate(const void *a1, WTF *a2)
{
  WebKit *v3;

  API::Data::create(a2, a1, &v3);
  if (v3)
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKDataGetBytes(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKDataGetSize(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
}

uint64_t WKPreferencesGetQTKitEnabled()
{
  return 0;
}

uint64_t WKBundleFrameGetJavaScriptWrapperForFileForWorld()
{
  return 0;
}

uint64_t WKBundleFileHandleCreateWithPath()
{
  return 0;
}

uint64_t WKPreferencesGetAccelerated2DCanvasEnabled()
{
  return 0;
}

uint64_t WKDictionaryGetTypeID()
{
  return 9;
}

uint64_t WKDictionaryCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  WTF **v23;
  int i;
  unsigned int v25;
  WTF **v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WebKit *v36;
  WTF::StringImpl *v39;
  uint64_t v40;

  v5 = (a3 - 1) | ((a3 - 1) >> 1) | ((((_DWORD)a3 - 1) | ((a3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * (unint64_t)a3)
      goto LABEL_6;
    goto LABEL_3;
  }
  if (3 * v7 <= 4 * (unint64_t)a3)
  {
LABEL_3:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400)
      goto LABEL_4;
LABEL_6:
    v8 = (double)a3;
    v9 = (double)v7;
    v10 = 0.416666667;
    goto LABEL_7;
  }
LABEL_4:
  v8 = (double)a3;
  v9 = (double)v7;
  v10 = 0.604166667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(16 * v11 + 16));
  v40 = v12 + 16;
  *(_DWORD *)(v12 + 8) = v11 - 1;
  *(_DWORD *)(v12 + 12) = v11;
  *(_QWORD *)v12 = 0;
  if (!a3)
    goto LABEL_61;
  v13 = 0;
  do
  {
    v14 = *(void **)(a1 + 8 * v13);
    if (v14)
      objc_msgSend(v14, "_apiObject");
    WTF::String::isolatedCopy();
    v17 = *(void **)(a2 + 8 * v13);
    if (v17)
      v18 = objc_msgSend(v17, "_apiObject");
    else
      v18 = 0;
    v19 = v40;
    if (v40
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v40, 0), (v19 = v40) != 0))
    {
      v20 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = *((_DWORD *)v39 + 4);
    if (v21 >= 0x100)
      v22 = v21 >> 8;
    else
      v22 = WTF::StringImpl::hashSlowCase(v39);
    v23 = 0;
    for (i = 1; ; ++i)
    {
      v25 = v22 & v20;
      v26 = (WTF **)(v19 + 16 * (v22 & v20));
      v27 = *v26;
      if (*v26 == (WTF *)-1)
      {
        v23 = (WTF **)(v19 + 16 * v25);
        goto LABEL_30;
      }
      if (!v27)
        break;
      if ((WTF::equal(v27, v39, v16) & 1) != 0)
        goto LABEL_47;
LABEL_30:
      v22 = i + v25;
    }
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(v40 - 16);
      v26 = v23;
    }
    v28 = v39;
    v39 = 0;
    v29 = *v26;
    *v26 = v28;
    if (!v29)
    {
LABEL_36:
      if (!v18)
        goto LABEL_38;
LABEL_37:
      CFRetain(*(CFTypeRef *)(v18 + 8));
      goto LABEL_38;
    }
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
      goto LABEL_36;
    }
    WTF::StringImpl::destroy(v29, v15);
    if (v18)
      goto LABEL_37;
LABEL_38:
    v30 = v26[1];
    v26[1] = (WTF *)v18;
    if (v30)
      CFRelease(*((CFTypeRef *)v30 + 1));
    if (v40)
      v31 = *(_DWORD *)(v40 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v40 - 12) = v31;
    if (v40)
      v32 = *(_DWORD *)(v40 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v40 - 16) + v32);
    v34 = *(unsigned int *)(v40 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
LABEL_46:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v40, (uint64_t)v26);
    }
    else if (3 * v34 <= 4 * v33)
    {
      goto LABEL_46;
    }
LABEL_47:
    v35 = v39;
    v39 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v15);
      else
        *(_DWORD *)v35 -= 2;
    }
    ++v13;
  }
  while (v13 != a3);
LABEL_61:
  v36 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(_QWORD *)v36 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v36);
  *(_QWORD *)v36 = &off_1E34CC280;
  *((_QWORD *)v36 + 2) = v40;
  return *((_QWORD *)v36 + 1);
}

uint64_t WKDictionaryGetItemForKey(void *a1, void *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  v5 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v3 + 16), &v10, v4);
  if (v5)
    v7 = *((_QWORD *)v5 + 1);
  else
    v7 = 0;
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

uint64_t WKDictionaryGetSize(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

uint64_t WKDictionaryCopyKeys(void *a1)
{
  WebKit *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::Dictionary::keys((API::Dictionary *)a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKErrorGetTypeID()
{
  return 10;
}

uint64_t WKErrorCopyWKErrorDomain()
{
  WebKit *v1;

  {
    API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl += 2;
    API::Error::webKitErrorDomain(void)::webKitErrorDomainString = (uint64_t)&API::Error::webKitErrorDomain(void)::$_0::operator() const(void)::impl;
  }
  API::String::create(&v1);
  if (v1)
    return *((_QWORD *)v1 + 1);
  else
    return 0;
}

uint64_t WKErrorCopyDomain(char *a1)
{
  WebKit *v2;

  if (a1)
    a1 = (char *)objc_msgSend(a1, "_apiObject");
  MEMORY[0x19AEB7BFC](a1 + 16);
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKErrorGetErrorCode(void *a1)
{
  uint64_t v1;

  if (a1)
    v1 = objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  MEMORY[0x19AEB7BFC](v1 + 16);
  return *(unsigned int *)(v1 + 72);
}

uint64_t WKErrorCopyFailingURL(void *a1)
{
  uint64_t v1;
  API::URL *v2;
  uint64_t v3;
  WebKit *v5;

  if (a1)
    v1 = objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  MEMORY[0x19AEB7BFC](v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v2 = (API::URL *)(v1 + 24);
  if (v3 && (API::URL::create(v2, &v5), v5))
    return *((_QWORD *)v5 + 1);
  else
    return 0;
}

uint64_t WKErrorCopyLocalizedDescription(void *a1)
{
  uint64_t v1;
  WebKit *v3;

  if (a1)
    v1 = objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  MEMORY[0x19AEB7BFC](v1 + 16);
  API::String::create(&v3);
  if (v3)
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKSizeGetTypeID()
{
  return 37;
}

uint64_t WKPointGetTypeID()
{
  return 36;
}

uint64_t WKRectGetTypeID()
{
  return 38;
}

uint64_t WKPointCreate(double a1, double a2)
{
  uint64_t v4;

  v4 = API::Object::newObject(0x20uLL, 36);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34AD208;
  *(double *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  return *(_QWORD *)(v4 + 8);
}

uint64_t WKSizeCreate(double a1, double a2)
{
  uint64_t v4;

  v4 = API::Object::newObject(0x20uLL, 37);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34AD1E0;
  *(double *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  return *(_QWORD *)(v4 + 8);
}

uint64_t WKRectCreate(double a1, double a2, double a3, double a4)
{
  uint64_t v8;

  v8 = API::Object::newObject(0x30uLL, 38);
  *(_QWORD *)v8 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v8);
  *(_QWORD *)v8 = &off_1E34AD230;
  *(double *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a2;
  *(double *)(v8 + 32) = a3;
  *(double *)(v8 + 40) = a4;
  return *(_QWORD *)(v8 + 8);
}

double WKSizeGetValue(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 16);
}

double WKPointGetValue(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 16);
}

double WKRectGetValue(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKImageGetTypeID()
{
  return 12;
}

uint64_t WKImageCreate(WebCore::DestinationColorSpace *a1, double a2, double a3)
{
  char v3;
  CFTypeRef *v4;
  int32x2_t v6;
  WebKit *v7;

  v6.i32[0] = (int)a2;
  v6.i32[1] = (int)a3;
  v3 = a1 & 1;
  v4 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(a1);
  WebKit::WebImage::create(&v6, v3, v4, 0, &v7);
  if (v7)
    return *((_QWORD *)v7 + 1);
  else
    return 0;
}

double WKImageGetSize(void *a1)
{
  WebCore::ImageBuffer *v1;

  v1 = *(WebCore::ImageBuffer **)(objc_msgSend(a1, "_apiObject") + 16);
  if (v1)
    LODWORD(v1) = WebCore::ImageBuffer::backendSize(v1);
  return (double)(int)v1;
}

uint64_t WebKit::WebAuthenticationPanelClient::WebAuthenticationPanelClient(uint64_t a1, uint64_t a2, id val)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E34CC930;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  objc_initWeak((id *)(a1 + 24), val);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 2;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xFD | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 4;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xFB | v5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = 8;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xF7 | v6;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = 16;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xEF | v7;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = 32;
  else
    v8 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xDF | v8;
  return a1;
}

void sub_19726D70C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::updatePanel(uint64_t a1, int a2)
{
  id WeakRetained;
  const void *v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      v5 = WeakRetained;
      if (((a2 - 1) & 0xF8) != 0)
        v6 = 0;
      else
        v6 = (a2 - 1) + 1;
      objc_msgSend(WeakRetained, "panel:updateWebAuthenticationPanel:", *(_QWORD *)(a1 + 16), v6);
      CFRelease(v5);
    }
  }
}

void sub_19726D79C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::dismissPanel(uint64_t a1, unsigned int a2)
{
  id WeakRetained;
  const void *v5;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      v5 = WeakRetained;
      objc_msgSend(WeakRetained, "panel:dismissWebAuthenticationPanelWithResult:", *(_QWORD *)(a1 + 16), a2);
      CFRelease(v5);
    }
  }
}

void sub_19726D810(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::requestPin(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  WTF::StringImpl *v4;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      v8 = WeakRetained;
      WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_panel_requestPINWithRemainingRetries_completionHandler_, (uint64_t *)&v14);
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      v11 = v14;
      v12 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      *v12 = MEMORY[0x1E0C809A0];
      v12[1] = 50331650;
      v12[2] = WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
      v12[3] = &WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::descriptor;
      v12[4] = v10;
      v12[5] = v11;
      -[WebKit::CompletionHandlerCallChecker panel:requestPINWithRemainingRetries:completionHandler:](v8, "panel:requestPINWithRemainingRetries:completionHandler:", v9, a2, v12);
      _Block_release(v12);
      CFRelease(v8);
      return;
    }
    v14 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (uint64_t)&v14);
  }
  else
  {
    v14 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a3, (uint64_t)&v14);
  }
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
}

void sub_19726D964(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebAuthenticationPanelClient::selectAssertionResponse(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v5;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebKit *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  WebKit::CompletionHandlerCallChecker *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return;
  }
  WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24));
  if (!WeakRetained)
  {
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    goto LABEL_16;
  }
  v10 = WeakRetained;
  v27 = 0;
  v28 = 0;
  v11 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(8 * v11));
    LODWORD(v28) = v11;
    v27 = v12;
    if (*(_DWORD *)(a2 + 12))
    {
      v25 = v10;
      v13 = 0;
      do
      {
        v14 = v13;
        v15 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v13);
        ++*(_DWORD *)(v15 + 8);
        v16 = (WebKit *)API::Object::newObject(0x18uLL, 125);
        *(_QWORD *)v16 = off_1E34CC2A8;
        WebKit::InitializeWebKit2(v16);
        *(_QWORD *)v16 = &off_1E34DA440;
        *((_QWORD *)v16 + 2) = v15;
        v13 = v14 + 1;
        *(_QWORD *)(v12 + 8 * v14) = v16;
      }
      while (v14 + 1 < (unint64_t)*(unsigned int *)(a2 + 12));
      HIDWORD(v28) = v14 + 1;
      v10 = v25;
    }
  }
  WebKit::CompletionHandlerCallChecker::create(v10, (objc_object *)sel_panel_selectAssertionResponse_source_completionHandler_, &v26);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v18 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v18);
  *(_QWORD *)v18 = &off_1E34CC2F8;
  *(_QWORD *)(v18 + 16) = v27;
  v19 = v28;
  v27 = 0;
  v28 = 0;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = *(const void **)(v18 + 8);
  if (v20)
    CFRetain(*(CFTypeRef *)(v18 + 8));
  v21 = *a4;
  *a4 = 0;
  v22 = v26;
  v23 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v23 = MEMORY[0x1E0C809A0];
  v23[1] = 50331650;
  v23[2] = WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::{lambda(void *,_WKWebAuthenticationAssertionResponse *)#1}::__invoke;
  v23[3] = &WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::descriptor;
  v23[4] = v21;
  v23[5] = v22;
  -[WebKit::CompletionHandlerCallChecker panel:selectAssertionResponse:source:completionHandler:](v10, "panel:selectAssertionResponse:source:completionHandler:", v17, v20, a3, v23);
  _Block_release(v23);
  if (v20)
    CFRelease(v20);
  CFRelease(*(CFTypeRef *)(v18 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v24);
  CFRelease(v10);
}

void sub_19726DC54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      v6 = WeakRetained;
      WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_panel_decidePolicyForLocalAuthenticatorWithCompletionHandler_, &v12);
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *a2;
      *a2 = 0;
      v9 = v12;
      v10 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      *v10 = MEMORY[0x1E0C809A0];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::{lambda(void *,_WKLocalAuthenticatorPolicy)#1}::__invoke;
      v10[3] = &WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::descriptor;
      v10[4] = v8;
      v10[5] = v9;
      -[WebKit::CompletionHandlerCallChecker panel:decidePolicyForLocalAuthenticatorWithCompletionHandler:](v6, "panel:decidePolicyForLocalAuthenticatorWithCompletionHandler:", v7, v10);
      _Block_release(v10);
      CFRelease(v6);
    }
    else
    {
      v11 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

void sub_19726DE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WebKit::CompletionHandlerCallChecker *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
  {
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      v6 = WeakRetained;
      WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_panel_requestLAContextForUserVerificationWithCompletionHandler_, &v12);
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *a2;
      *a2 = 0;
      v9 = v12;
      v10 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      *v10 = MEMORY[0x1E0C809A0];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::{lambda(void *,LAContext *)#1}::__invoke;
      v10[3] = &WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::descriptor;
      v10[4] = v8;
      v10[5] = v9;
      -[WebKit::CompletionHandlerCallChecker panel:requestLAContextForUserVerificationWithCompletionHandler:](v6, "panel:requestLAContextForUserVerificationWithCompletionHandler:", v7, v10);
      _Block_release(v10);
      CFRelease(v6);
    }
    else
    {
      v11 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

void sub_19726DFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19726E22C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CcidService *WebKit::MockCcidService::MockCcidService(WebKit::CcidService *a1, WebKit::AuthenticatorTransportServiceObserver *a2, _BYTE *a3)
{
  WebKit::CcidService *v5;

  v5 = WebKit::CcidService::CcidService(a1, a2);
  *(_QWORD *)v5 = off_1E34CC980;
  *((_BYTE *)v5 + 88) = *a3;
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)v5 + 96, (uint64_t)(a3 + 8));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 144, (uint64_t)(a3 + 56));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 184, (uint64_t)(a3 + 96));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)a1 + 224, (uint64_t)(a3 + 136));
  return a1;
}

void sub_19726E30C(_Unwind_Exception *a1, void *a2)
{
  WebKit::CcidService *v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)v2 + 216))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 192, a2);
  if (*((_BYTE *)v2 + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::CcidService::~CcidService(v2);
  _Unwind_Resume(a1);
}

void WebKit::MockCcidService::platformStartDiscovery(WebKit::MockCcidService *this)
{
  _WKMockTKSmartCard *v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;
  _WKMockTKSmartCard *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  CFTypeRef v10;
  CFTypeRef cf;

  if (*((_BYTE *)this + 240))
  {
    v2 = [_WKMockTKSmartCard alloc];
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
    cf = v3;
    v6 = -[_WKMockTKSmartCard initWithService:](v2, "initWithService:", &cf);
    v7 = (unsigned int *)cf;
    cf = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
    cf = v6;
    WebKit::CcidService::onValidCard((uint64_t)this, (uint64_t *)&cf);
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
  }
}

void sub_19726E424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::MockLocalConnection::verifyUser(WTF::RunLoop *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  __int16 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[11];
  char v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  WTF::RunLoop::main(a1);
  v20 = *((_BYTE *)a1 + 16);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](&v21, (uint64_t)a1 + 24);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v25, (uint64_t)a1 + 72);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)v29, (uint64_t)a1 + 112);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](&v34, (uint64_t)a1 + 152);
  v8 = *a6;
  *a6 = 0;
  v37 = v8;
  v9 = WTF::fastMalloc((WTF *)0xB0);
  *(_QWORD *)v9 = off_1E34CCC10;
  *(_BYTE *)(v9 + 8) = v20;
  *(_BYTE *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 56) = 0;
  if (v24)
  {
    *(_WORD *)(v9 + 16) = v21;
    *(_OWORD *)(v9 + 24) = v22;
    *(_QWORD *)(v9 + 40) = v23;
    v10 = *((_QWORD *)&v23 + 1);
    v22 = 0u;
    v23 = 0u;
    *(_QWORD *)(v9 + 48) = v10;
    *(_BYTE *)(v9 + 56) = 1;
  }
  *(_BYTE *)(v9 + 64) = 0;
  *(_BYTE *)(v9 + 96) = 0;
  if (v28)
  {
    *(_QWORD *)(v9 + 64) = v25;
    v11 = v26;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)(v9 + 72) = v11;
    v12 = *(_DWORD *)&v27[7];
    *(_QWORD *)(v9 + 80) = *(_QWORD *)v27;
    *(_DWORD *)(v9 + 87) = v12;
    *(_BYTE *)(v9 + 96) = 1;
  }
  *(_BYTE *)(v9 + 104) = 0;
  *(_BYTE *)(v9 + 136) = 0;
  if (v33)
  {
    *(_BYTE *)(v9 + 104) = v29[0];
    *(_QWORD *)(v9 + 112) = v30;
    v13 = v31;
    v30 = 0;
    v31 = 0;
    *(_QWORD *)(v9 + 120) = v13;
    *(_WORD *)(v9 + 128) = v32;
    *(_BYTE *)(v9 + 136) = 1;
  }
  *(_BYTE *)(v9 + 144) = 0;
  *(_BYTE *)(v9 + 160) = 0;
  if (v36)
  {
    *(_QWORD *)(v9 + 144) = v34;
    v14 = v35;
    v34 = 0;
    v35 = 0;
    *(_QWORD *)(v9 + 152) = v14;
    *(_BYTE *)(v9 + 160) = 1;
  }
  v15 = v37;
  v37 = 0;
  *(_QWORD *)(v9 + 168) = v15;
  v38 = v9;
  WTF::RunLoop::dispatch();
  v17 = v38;
  v38 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v37;
  v37 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v36)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v16);
  if (v33)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v16);
  if (v28)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v16);
  return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, (WTF::StringImpl *)v16);
}

void sub_19726E6A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(v32 - 56);
  *(_QWORD *)(v32 - 56) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = a29;
  a29 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (a28)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31, a2);
  if (a25)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  if (a20)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v29, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::MockLocalConnection::verifyUser(WTF::RunLoop *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[11];
  char v26;
  char v27[8];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  WTF::RunLoop::main(a1);
  v18 = *((_BYTE *)a1 + 16);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](&v19, (uint64_t)a1 + 24);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v23, (uint64_t)a1 + 72);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)v27, (uint64_t)a1 + 112);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](&v32, (uint64_t)a1 + 152);
  v6 = *a4;
  *a4 = 0;
  v35 = v6;
  v7 = WTF::fastMalloc((WTF *)0xB0);
  *(_QWORD *)v7 = off_1E34CCC38;
  *(_BYTE *)(v7 + 8) = v18;
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 56) = 0;
  if (v22)
  {
    *(_WORD *)(v7 + 16) = v19;
    *(_OWORD *)(v7 + 24) = v20;
    *(_QWORD *)(v7 + 40) = v21;
    v8 = *((_QWORD *)&v21 + 1);
    v20 = 0u;
    v21 = 0u;
    *(_QWORD *)(v7 + 48) = v8;
    *(_BYTE *)(v7 + 56) = 1;
  }
  *(_BYTE *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 96) = 0;
  if (v26)
  {
    *(_QWORD *)(v7 + 64) = v23;
    v9 = v24;
    v23 = 0;
    v24 = 0;
    *(_QWORD *)(v7 + 72) = v9;
    v10 = *(_DWORD *)&v25[7];
    *(_QWORD *)(v7 + 80) = *(_QWORD *)v25;
    *(_DWORD *)(v7 + 87) = v10;
    *(_BYTE *)(v7 + 96) = 1;
  }
  *(_BYTE *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 136) = 0;
  if (v31)
  {
    *(_BYTE *)(v7 + 104) = v27[0];
    *(_QWORD *)(v7 + 112) = v28;
    v11 = v29;
    v28 = 0;
    v29 = 0;
    *(_QWORD *)(v7 + 120) = v11;
    *(_WORD *)(v7 + 128) = v30;
    *(_BYTE *)(v7 + 136) = 1;
  }
  *(_BYTE *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 160) = 0;
  if (v34)
  {
    *(_QWORD *)(v7 + 144) = v32;
    v12 = v33;
    v32 = 0;
    v33 = 0;
    *(_QWORD *)(v7 + 152) = v12;
    *(_BYTE *)(v7 + 160) = 1;
  }
  v13 = v35;
  v35 = 0;
  *(_QWORD *)(v7 + 168) = v13;
  v36 = v7;
  WTF::RunLoop::dispatch();
  v15 = v36;
  v36 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v35;
  v35 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v34)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v14);
  if (v31)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v14);
  if (v26)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v14);
  return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, (WTF::StringImpl *)v14);
}

void sub_19726E960(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v34 = *(_QWORD *)(v32 - 56);
  *(_QWORD *)(v32 - 56) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = a29;
  a29 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (a28)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v31, a2);
  if (a25)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, a2);
  if (a20)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v29, (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

void WebKit::MockLocalConnection::createCredentialPrivateKey(WebKit::MockLocalConnection *this@<X0>, const WTF::String *a2@<X3>, NSData *a3@<X4>, SecKeyRef *a4@<X8>)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *v14;
  id v15;
  const __CFString *v16;
  const __CFData *v17;
  SecKeyRef v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFErrorRef v25;
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[3];
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v11 = *MEMORY[0x1E0CD6A50];
  v12 = *MEMORY[0x1E0CD69F8];
  v28[0] = *MEMORY[0x1E0CD6A38];
  v28[1] = v12;
  v13 = *MEMORY[0x1E0CD6A00];
  v29[0] = v11;
  v29[1] = v13;
  v28[2] = *MEMORY[0x1E0CD6A20];
  v29[2] = &unk_1E356FDA8;
  v14 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 3);
  v25 = 0;
  v15 = objc_alloc(MEMORY[0x1E0C99D50]);
  if (*((_BYTE *)this + 64))
  {
    v6 = v15;
    if (*((_QWORD *)this + 4))
    {
      v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  v16 = &stru_1E351F1B8;
LABEL_4:
  v17 = (const __CFData *)objc_msgSend(v6, "initWithBase64EncodedString:options:", v16, 1, v25);
  v18 = SecKeyCreateWithData(v17, v14, &v25);
  if (v17)
    CFRelease(v17);
  if (v25)
    goto LABEL_10;
  v19 = *MEMORY[0x1E0CD6C98];
  v26[0] = *MEMORY[0x1E0CD70E8];
  v26[1] = v19;
  v20 = *MEMORY[0x1E0CD6CC0];
  v27[0] = v18;
  v27[1] = v20;
  v26[2] = *MEMORY[0x1E0CD6A90];
  v21 = *(_QWORD *)a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
  v22 = *MEMORY[0x1E0CD6908];
  v27[2] = v21;
  v27[3] = a3;
  v23 = *MEMORY[0x1E0CD68A0];
  v26[3] = v22;
  v26[4] = v23;
  v24 = *MEMORY[0x1E0CD68A8];
  v26[5] = *MEMORY[0x1E0CD70A8];
  v27[4] = v24;
  v27[5] = MEMORY[0x1E0C9AAB0];
  if (SecItemAdd((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 6), 0))
  {
LABEL_10:
    *a4 = 0;
    if (v18)
      CFRelease(v18);
  }
  else
  {
    *a4 = v18;
  }
}

void sub_19726EC20(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF *WebKit::MockLocalConnection::filterResponses(WTF *result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  WebCore::AuthenticatorResponse **v5;
  JSC::ArrayBuffer *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WebCore::AuthenticatorResponse *v11;
  uint64_t v12;
  WebCore::AuthenticatorResponse **v13;
  uint64_t v14;
  WebCore::AuthenticatorResponse **v15;
  WebCore::AuthenticatorResponse *v16;
  WTF::StringImpl *v17;

  if (*((_BYTE *)result + 64))
  {
    v2 = result;
    v3 = *((_QWORD *)result + 7);
    if (v3 && *(_DWORD *)(v3 + 4))
    {
      v5 = *(WebCore::AuthenticatorResponse ***)a2;
      if (*((_DWORD *)a2 + 3))
      {
        do
        {
          v6 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(*v5);
          JSC::ArrayBuffer::span(v6);
          WTF::base64EncodeToString();
          v9 = WTF::equal(v17, *((const WTF::StringImpl **)v2 + 7), v7);
          v10 = v17;
          v17 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              WTF::StringImpl::destroy(v10, v8);
              if ((v9 & 1) != 0)
                break;
              goto LABEL_11;
            }
            *(_DWORD *)v10 -= 2;
          }
          if ((v9 & 1) != 0)
            break;
LABEL_11:
          ++v5;
        }
        while (v5 != (WebCore::AuthenticatorResponse **)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 3)));
      }
      v11 = *v5;
      *((_DWORD *)v11 + 2) = *((_DWORD *)*v5 + 2) + 1;
      v17 = v11;
      result = WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2, 0);
      v12 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v12 == *((_DWORD *)a2 + 2))
      {
        v13 = (WebCore::AuthenticatorResponse **)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v17);
        v14 = *((unsigned int *)a2 + 3);
        v15 = *(WebCore::AuthenticatorResponse ***)a2;
        v16 = *v13;
        *v13 = 0;
        v15[v14] = v16;
        result = v17;
        *((_DWORD *)a2 + 3) = v14 + 1;
        v17 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
          else
            --*((_DWORD *)result + 2);
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v11;
        *((_DWORD *)a2 + 3) = v12 + 1;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19726EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a10 + 8))(a10);
    else
      --*((_DWORD *)a10 + 2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MockLocalConnection::getExistingCredentials(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  OSStatus v11;
  const void *v12;
  const void *v13;
  void *v14;
  _QWORD v15[7];
  _QWORD v16[8];

  v16[7] = *MEMORY[0x1E0C80C00];
  v4 = *MEMORY[0x1E0CD6CC0];
  v5 = *MEMORY[0x1E0CD69F8];
  v15[0] = *MEMORY[0x1E0CD6C98];
  v15[1] = v5;
  v6 = *MEMORY[0x1E0CD6A00];
  v16[0] = v4;
  v16[1] = v6;
  v7 = *MEMORY[0x1E0CD6B80];
  v16[2] = *MEMORY[0x1E0CD6B88];
  v8 = *MEMORY[0x1E0CD6A90];
  v15[2] = v7;
  v15[3] = v8;
  if (*(_QWORD *)a1)
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = *MEMORY[0x1E0CD6F30];
  v15[4] = *MEMORY[0x1E0CD7010];
  v15[5] = v10;
  v15[6] = *MEMORY[0x1E0CD70A8];
  v16[3] = v9;
  v16[4] = MEMORY[0x1E0C9AAB0];
  v16[5] = *MEMORY[0x1E0CD6F38];
  v16[6] = MEMORY[0x1E0C9AAB0];
  v14 = 0;
  v11 = SecItemCopyMatching((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 7), (CFTypeRef *)&v14);
  if (v11 != -25300 && v11)
  {
    *a2 = 0;
  }
  else
  {
    v12 = v14;
    v13 = (const void *)objc_msgSend(v14, "sortedArrayUsingComparator:", &__block_literal_global_28);
    *a2 = v13;
    if (v13)
      CFRetain(v13);
    if (v12)
      CFRelease(v12);
  }
}

void sub_19726EF90(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit19MockLocalConnection22getExistingCredentialsERKN3WTF6StringE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  return objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0CD6A98]), "compare:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0CD6A98]));
}

uint64_t WebKit::MockLocalService::MockLocalService(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned int *v6;
  unsigned int v7;
  WebKit *v8;
  objc_class *v9;
  objc_method *ClassMethod;

  *(_QWORD *)a1 = off_1E34AE8F8;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  v6 = *(unsigned int **)(a2 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = off_1E34CCA20;
  *(_BYTE *)(a1 + 24) = *a3;
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 32), (uint64_t)(a3 + 8));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100](a1 + 80, (uint64_t)(a3 + 56));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100](a1 + 120, (uint64_t)(a3 + 96));
  v8 = (WebKit *)std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a1 + 160), (uint64_t)(a3 + 136));
  v9 = (objc_class *)WebKit::getASCWebKitSPISupportClass[0](v8);
  ClassMethod = class_getClassMethod(v9, sel_shouldUseAlternateCredentialStore);
  method_setImplementation(ClassMethod, (IMP)ACSWebKitSPIMockSupportMethod);
  return a1;
}

void sub_19726F0E0(_Unwind_Exception *a1, void *a2)
{
  WebKit::AuthenticatorTransportService *v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)v2 + 152))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 128, a2);
  if (*((_BYTE *)v2 + 112))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v2);
  _Unwind_Resume(a1);
}

uint64_t ACSWebKitSPIMockSupportMethod(objc_object *a1, objc_selector *a2)
{
  return 0;
}

uint64_t WebKit::MockLocalService::platformStartDiscovery(WebKit::MockLocalService *this)
{
  return *((unsigned __int8 *)this + 72);
}

_BYTE *WebKit::MockLocalService::createLocalConnection@<X0>(WebKit::MockLocalService *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _BYTE *result;

  v4 = WTF::fastMalloc((WTF *)0xB0);
  *(_QWORD *)v4 = off_1E34CC9B8;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = *((_BYTE *)this + 24);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(v4 + 24), (uint64_t)this + 32);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100](v4 + 72, (uint64_t)this + 80);
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100](v4 + 112, (uint64_t)this + 120);
  result = std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(v4 + 152), (uint64_t)this + 160);
  *a2 = v4;
  return result;
}

void sub_19726F1E8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v6;
  void *v7;

  if (*(_BYTE *)(v2 + 144))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 120, a2);
  if (*(_BYTE *)(v2 + 104))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::LocalConnection::~LocalConnection((id *)v2);
  WTF::fastFree(v6, v7);
  _Unwind_Resume(a1);
}

void sub_19726F3A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::NfcService *WebKit::MockNfcService::MockNfcService(WebKit::NfcService *a1, WebKit::AuthenticatorTransportServiceObserver *a2, _BYTE *a3)
{
  WebKit::NfcService *v5;

  v5 = WebKit::NfcService::NfcService(a1, a2);
  *(_QWORD *)v5 = off_1E34CCA60;
  *((_BYTE *)v5 + 72) = *a3;
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)v5 + 80, (uint64_t)(a3 + 8));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 128, (uint64_t)(a3 + 56));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)a1 + 168, (uint64_t)(a3 + 96));
  std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100]((_BYTE *)a1 + 208, (uint64_t)(a3 + 136));
  return a1;
}

void sub_19726F518(_Unwind_Exception *a1, void *a2)
{
  WebKit::NfcService *v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)v2 + 200))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 176, a2);
  if (*((_BYTE *)v2 + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v3, (WTF::StringImpl *)a2);
  WebKit::NfcService::~NfcService(v2);
  _Unwind_Resume(a1);
}

void WebKit::MockNfcService::platformStartDiscovery(WebKit::NfcConnection **this)
{
  objc_class *v2;
  objc_method *InstanceMethod;
  WebKit *v4;
  objc_class *v5;
  objc_method *v6;
  uint64_t (*v7)();
  WebKit *v8;
  objc_class *v9;
  objc_method *v10;
  WebKit *v11;
  objc_class *v12;
  objc_method *v13;
  WebKit *v14;
  objc_class *v15;
  objc_method *v16;
  WebKit *v17;
  const void *v18;
  const void *v19;
  WebKit::NfcConnection *v20;
  CFTypeRef cf;
  WebKit::NfcConnection *v22;

  if (*((_BYTE *)this + 200))
  {
    v2 = (objc_class *)WebKit::getNFReaderSessionClass[0]((WebKit *)this);
    InstanceMethod = class_getInstanceMethod(v2, sel_setDelegate_);
    v5 = (objc_class *)WebKit::getNFReaderSessionClass[0](v4);
    v6 = class_getInstanceMethod(v5, sel_connectTag_);
    if (*((_BYTE *)this + 200))
    {
      if (*((_BYTE *)this + 168) == 3)
      else
      v8 = (WebKit *)method_setImplementation(v6, (IMP)v7);
      v9 = (objc_class *)WebKit::getNFReaderSessionClass[0](v8);
      v10 = class_getInstanceMethod(v9, sel_transceive_);
      v12 = (objc_class *)WebKit::getNFReaderSessionClass[0](v11);
      v13 = class_getInstanceMethod(v12, sel_stopPolling);
      v15 = (objc_class *)WebKit::getNFReaderSessionClass[0](v14);
      v16 = class_getInstanceMethod(v15, sel_startPollingWithError_);
      v18 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getNFReaderSessionClass[0](v17)), "init");
      v19 = v18;
      cf = v18;
      if (v18)
        CFRetain(v18);
      WebKit::NfcConnection::create((uint64_t *)&cf, (uint64_t)this, (uint64_t *)&v22);
      v20 = this[4];
      this[4] = v22;
      if (v20)
        WTF::RefCounted<WebKit::NfcConnection>::deref(v20);
      if (cf)
        CFRelease(cf);
      if (v19)
        CFRelease(v19);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_19726F6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  const void *v9;

  CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebKit::`anonymous namespace'::NFReaderSessionSetDelegate(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t WebKit::`anonymous namespace'::NFReaderSessionConnectTagFail()
{
  return 0;
}

uint64_t WebKit::`anonymous namespace'::NFReaderSessionConnectTag()
{
  return 1;
}

id WebKit::`anonymous namespace'::NFReaderSessionTransceive(WebKit::_anonymous_namespace_ *this, objc_object *a2, objc_selector *a3, NSData *a4)
{
  void *v4;
  uint64_t v5;
  id result;
  const __CFString *i;
  uint64_t v8;
  WTF::StringImpl *v9;
  const void *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;

    return 0;
    goto LABEL_15;
    return 0;
  result = objc_alloc(MEMORY[0x1E0C99D50]);
  if (!*(_BYTE *)(v5 + 200))
    goto LABEL_15;
  if (*(_DWORD *)(v5 + 188))
  {
    v4 = result;
    if (!**(_QWORD **)(v5 + 176))
      goto LABEL_16;
    for (i = (const __CFString *)WTF::StringImpl::operator NSString *(); ; i = &stru_1E351F1B8)
    {
      v8 = objc_msgSend(v4, "initWithBase64EncodedString:options:", i, 1);
      if (*(_BYTE *)(v5 + 200))
        break;
LABEL_15:
      __break(1u);
LABEL_16:
      ;
    }
    v10 = (const void *)v8;
    v11 = *(WTF::StringImpl ***)(v5 + 176);
    v12 = *v11;
    *v11 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    memmove(v11, v11 + 1, *(_QWORD *)(v5 + 176) + 8 * *(unsigned int *)(v5 + 188) - (_QWORD)(v11 + 1));
    --*(_DWORD *)(v5 + 188);
    return (id)(id)CFMakeCollectable(v10);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WebKit::`anonymous namespace'::NFReaderSessionStopPolling(WebKit::_anonymous_namespace_ *this, objc_object *a2, objc_selector *a3)
{
  uint64_t v3;
  _BOOL8 result;

    return v3 != 0;
  {
    return v3 != 0;
  }
  __break(1u);
  return result;
}

BOOL WebKit::`anonymous namespace'::NFReaderSessionStartPollingWithError(WebKit::_anonymous_namespace_ *this, objc_object *a2, objc_selector *a3, NSError **a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v9;

  {
    WTF::RunLoop::main(this);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    v5 = *(unsigned int **)(v4 + 8);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34CCC60;
    v7[1] = v5;
    v9 = v7;
    WTF::RunLoop::dispatch();
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  return v4 != 0;
}

void sub_19726F8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::useNetworkLoader(WebKit::WebsiteDataStore *this)
{
  uint64_t isMobileSafari;
  char isSafariViewService;
  WebCore *v3;
  int unified_http_enabled;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  char isRunningTest;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  isMobileSafari = WebCore::IOSApplication::isMobileSafari(this);
  if ((isMobileSafari & 1) != 0)
    isSafariViewService = 1;
  else
    isSafariViewService = WebCore::IOSApplication::isSafariViewService((WebCore::IOSApplication *)isMobileSafari);
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  LOWORD(v3) = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key, 0);
  unified_http_enabled = BYTE1(v3);
  if (!BYTE1(v3))
  {
    v3 = (WebCore *)WTF::linkedOnOrAfterSDKWithBehavior();
    if (!(_DWORD)v3)
    {
      unified_http_enabled = 0;
      return v3 | (unified_http_enabled << 8);
    }
    WebCore::applicationBundleIdentifier(v3);
    isRunningTest = WebKit::isRunningTest((WebKit *)&v10, v5);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        if ((isRunningTest & 1) != 0)
          goto LABEL_12;
        goto LABEL_15;
      }
      *(_DWORD *)v8 -= 2;
    }
    if ((isRunningTest & 1) != 0)
    {
LABEL_12:
      LOBYTE(v3) = 1;
      unified_http_enabled = 1;
      return v3 | (unified_http_enabled << 8);
    }
LABEL_15:
    unified_http_enabled = nw_settings_get_unified_http_enabled();
    LOBYTE(v3) = unified_http_enabled & isSafariViewService;
  }
  return v3 | (unified_http_enabled << 8);
}

void sub_19726FA40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WebKit::WebsiteDataStore *a1, WTF::RefCountedBase *a2)
{
  WebKit::WebsiteDataStore *v4;
  WebKit::WebsiteDataStore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  const WTF::UUID *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit::WebsiteDataStore *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebKit::WebsiteDataStore *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 <= 1uLL)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a2, (uint64_t)&v20);
    v7 = v20;
    v20 = 0;
    if (!v7)
      return;
    goto LABEL_23;
  }
  v4 = (WebKit::WebsiteDataStore *)WebKit::WebsiteDataStore::existingDataStoreForIdentifier(a1, &v19);
  v5 = v19;
  if (v19)
  {
    if (WebKit::WebsiteDataStore::hasActivePages(v19) || *((_QWORD *)v5 + 51))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = v20;
      WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a2, (uint64_t)&v18);
      v9 = v18;
      v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      CFRelease(*((CFTypeRef *)v5 + 1));
      return;
    }
    CFRelease(*((CFTypeRef *)v5 + 1));
  }
  v10 = WebKit::WebsiteDataStore::websiteDataStoreIOQueue(v4);
  v11 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v20 = v11;
  v21 = *(_OWORD *)a1;
  WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(a1, v12);
  WTF::String::isolatedCopy();
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v13 = &off_1E34CCCD8;
  *(_QWORD *)(v13 + 16) = v20;
  *(_OWORD *)(v13 + 32) = v21;
  v14 = v22;
  v19 = (WebKit::WebsiteDataStore *)v13;
  v20 = 0;
  v22 = 0;
  *(_QWORD *)(v13 + 48) = v14;
  (*(void (**)(uint64_t, WebKit::WebsiteDataStore **))(*(_QWORD *)v10 + 32))(v10, &v19);
  v15 = v19;
  v19 = 0;
  if (v15)
    (*(void (**)(WebKit::WebsiteDataStore *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v6);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v20;
  v20 = 0;
  if (v17)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 8))(v17);
  v7 = v18;
  v18 = 0;
  if (v7)
  {
LABEL_23:
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void sub_19726FCBC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v15 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebsiteDataStore::defaultWebsiteDataStoreDirectory(WebKit::WebsiteDataStore *this, const WTF::UUID *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WebKit::defaultWebsiteDataStoreRootDirectory((WebKit *)&v6);
  WTF::UUID::toString(this);
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19726FEEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c17_ZTSN3WTF6StringE(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a2 + 32);
  if (v2)
    *v2 += 2;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

WTF::StringImpl *__destroy_helper_block_e8_32c17_ZTSN3WTF6StringE(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void *WebKit::applicationOrProcessIdentifier(WebKit *this)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
  if (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.Safari"))
    && objc_msgSend(v2, "isEqualToString:", CFSTR("SafariForWebKitDevelopment")))
  {
    v1 = v2;
  }
  if (v1)
    return v1;
  else
    return v2;
}

WebCore *WebKit::WebsiteDataStore::addTestDomains(WebCore *this)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6[3];

  {
    if (WebKit::appBoundDomains(void)::appBoundDomains
      && *(_DWORD *)(WebKit::appBoundDomains(void)::appBoundDomains - 12))
    {
      return this;
    }
  }
  else
  {
    WebKit::appBoundDomains(void)::appBoundDomains = 0;
  }
  WebCore::applicationBundleIdentifier(this);
  v3 = WebKit::appBoundDomainsForTesting((WebKit *)v6, v1);
  v4 = v2;
  this = v6[0];
  v6[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = (WebCore *)WTF::StringImpl::destroy(this, v2);
      if (!v4)
        return this;
      goto LABEL_10;
    }
    *(_DWORD *)this -= 2;
  }
  if (!v2)
    return this;
LABEL_10:
  v5 = 8 * (_QWORD)v4;
  do
  {
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
    this = (WebCore *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&WebKit::appBoundDomains(void)::appBoundDomains, (WTF::ASCIICaseInsensitiveHash **)v3++, (uint64_t)v6);
    v5 -= 8;
  }
  while (v5);
  return this;
}

void sub_1972700F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::getAppBoundSchemes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34CCE40;
  v4[1] = v3;
  v6 = v4;
  WebKit::WebsiteDataStore::ensureAppBoundDomains(a1, (uint64_t *)&v6);
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_197270190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebsiteDataStore::appBoundDomainsIfInitialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *result;
  unsigned __int8 v3;
  char v4;

  result = a1;
  v3 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v3 & 1) != 0)
  {
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
    result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(result, &WebKit::appBoundDomains(void)::appBoundDomains);
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)result = 0;
  }
  *((_BYTE *)result + 8) = v4;
  return result;
}

void WebKit::WebsiteDataStore::setAppBoundDomainsForTesting(uint64_t *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  _QWORD v13[2];

  v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, (uint64_t)a2, a3);
  v7 = (_QWORD *)v5;
  v13[0] = v5;
  v13[1] = v6;
  if (*a1)
    v8 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  else
    v8 = 0;
  if (v8 != v5)
  {
    do
    {
      if ((MEMORY[0x19AEABBCC](*v7, "localhost", 9) & 1) == 0
        && (MEMORY[0x19AEABBCC](*v7, "127.0.0.1", 9) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197270340);
      }
      v13[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v13, v9, v10);
      v7 = (_QWORD *)v13[0];
    }
    while (v13[0] != v8);
  }
  {
    WebKit::appBoundDomains(void)::appBoundDomains = 0;
  }
  v11 = *a1;
  *a1 = 0;
  v12 = (WTF::StringImpl **)WebKit::appBoundDomains(void)::appBoundDomains;
  WebKit::appBoundDomains(void)::appBoundDomains = v11;
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v6);
  atomic_store(1u, WebKit::hasInitializedAppBoundDomains);
  WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized(a2);
}

void WebKit::WebsiteDataStore::setManagedDomainsForTesting(uint64_t *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  _QWORD v13[2];

  v5 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a1, (uint64_t)a2, a3);
  v7 = (_QWORD *)v5;
  v13[0] = v5;
  v13[1] = v6;
  if (*a1)
    v8 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  else
    v8 = 0;
  if (v8 != v5)
  {
    do
    {
      if ((MEMORY[0x19AEABBCC](*v7, "localhost", 9) & 1) == 0
        && (MEMORY[0x19AEABBCC](*v7, "127.0.0.1", 9) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197270470);
      }
      v13[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v13, v9, v10);
      v7 = (_QWORD *)v13[0];
    }
    while (v13[0] != v8);
  }
  {
    WebKit::managedDomains(void)::managedDomains = 0;
  }
  v11 = *a1;
  *a1 = 0;
  v12 = (WTF::StringImpl **)WebKit::managedDomains(void)::managedDomains;
  WebKit::managedDomains(void)::managedDomains = v11;
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v6);
  atomic_store(1u, WebKit::hasInitializedManagedDomains);
  WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized(a2);
}

uint64_t WebKit::WebsiteDataStore::networkProcessHasEntitlementForTesting(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WebKit::WebsiteDataStore::networkProcess(this);
  return WTF::hasEntitlement();
}

char *WebKit::WebsiteDataStore::setBackupExclusionPeriodForTesting(WebKit::WebsiteDataStore *a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t *v8[2];
  double v9;
  uint64_t v10;

  v6 = WebKit::WebsiteDataStore::networkProcess(a1);
  v10 = *((_QWORD *)a1 + 3);
  v9 = a3;
  v8[0] = &v10;
  v8[1] = (uint64_t *)&v9;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetBackupExclusionPeriodForTesting,WTF::CompletionHandler<void ()(void)>>(v6, v8, a2, 0, 0, 1);
}

uint64_t WebKit::WebsiteDataStore::saveRecentSearches(WebKit::WebsiteDataStore *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD *v17;

  v5 = *((_QWORD *)a1 + 35);
  WTF::String::isolatedCopy();
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(0ul &)#1},WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(&v14, a3);
  WebKit::WebsiteDataStore::resolvedDirectories(a1);
  WTF::String::isolatedCopy();
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = off_1E34CCEE0;
  v6[1] = v13;
  v7 = v14;
  v14 = 0;
  v6[2] = v7;
  v6[3] = v15;
  v8 = v16;
  v15 = 0;
  v16 = 0;
  v6[4] = v8;
  v17 = v6;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  return 0;
}

void sub_197270668(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v16);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebsiteDataStore::loadRecentSearches(WebKit::WebsiteDataStore *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;

  v5 = *((_QWORD *)a1 + 35);
  WTF::String::isolatedCopy();
  v6 = *a3;
  *a3 = 0;
  v11 = v6;
  WebKit::WebsiteDataStore::resolvedDirectories(a1);
  WTF::String::isolatedCopy();
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34CCF08;
  v7[1] = v10;
  v7[2] = v11;
  v13 = v7;
  v7[3] = v12;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return 0;
}

void sub_197270818(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::removeRecentSearches(WebKit::WebsiteDataStore *a1, uint64_t *a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a1 + 35);
  WebKit::WebsiteDataStore::resolvedDirectories(a1);
  WTF::String::isolatedCopy();
  v5 = *a2;
  *a2 = 0;
  v11 = v5;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34CCF58;
  *(double *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 16) = v10;
  *(_QWORD *)(v6 + 24) = v11;
  v12 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v12);
  v7 = v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return 0;
}

void sub_1972709A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebAuthenticationPanelClient::~WebAuthenticationPanelClient(WebKit::WebAuthenticationPanelClient *this)
{
  void *v2;

  objc_destroyWeak((id *)this + 3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  void *v2;
  void *v3;

  objc_destroyWeak((id *)this + 3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
  WTF::fastFree(this, v3);
}

void WebKit::MockCcidService::~MockCcidService(WebKit::MockCcidService *this, void *a2)
{
  if (*((_BYTE *)this + 240))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, a2);
  if (*((_BYTE *)this + 216))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  if (*((_BYTE *)this + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)a2);
  WebKit::CcidService::~CcidService(this);
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 240))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 224, a2);
  if (*((_BYTE *)this + 216))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  if (*((_BYTE *)this + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 96, (WTF::StringImpl *)a2);
  WebKit::CcidService::~CcidService(this);
  WTF::fastFree(v3, v4);
}

void WebKit::MockLocalConnection::~MockLocalConnection(WebKit::MockLocalConnection *this, void *a2)
{
  if (*((_BYTE *)this + 168))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, a2);
  if (*((_BYTE *)this + 144))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  if (*((_BYTE *)this + 104))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, (WTF::StringImpl *)a2);
  WebKit::LocalConnection::~LocalConnection((id *)this);
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 168))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, a2);
  if (*((_BYTE *)this + 144))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  if (*((_BYTE *)this + 104))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, (WTF::StringImpl *)a2);
  WebKit::LocalConnection::~LocalConnection((id *)this);
  WTF::fastFree(v3, v4);
}

void WebKit::MockLocalService::~MockLocalService(WebKit::MockLocalService *this, void *a2)
{
  if (*((_BYTE *)this + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 160, a2);
  if (*((_BYTE *)this + 152))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  if (*((_BYTE *)this + 112))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 32, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 176))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 160, a2);
  if (*((_BYTE *)this + 152))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  if (*((_BYTE *)this + 112))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 32, (WTF::StringImpl *)a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
  WTF::fastFree(v3, v4);
}

void WebKit::MockNfcService::~MockNfcService(WebKit::MockNfcService *this, void *a2)
{
  if (*((_BYTE *)this + 224))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 208, a2);
  if (*((_BYTE *)this + 200))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  if (*((_BYTE *)this + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, (WTF::StringImpl *)a2);
  WebKit::NfcService::~NfcService(this);
}

{
  WTF *v3;
  void *v4;

  if (*((_BYTE *)this + 224))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 208, a2);
  if (*((_BYTE *)this + 200))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  if (*((_BYTE *)this + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, (WTF::StringImpl *)a2);
  WebKit::NfcService::~NfcService(this);
  WTF::fastFree(v3, v4);
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (cf)
    CFRetain(cf);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34CCB48;
  v5[1] = v3;
  v5[2] = v4;
  v5[3] = cf;
  v7 = (uint64_t)v5;
  WTF::ensureOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_197270E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(NSString *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  unsigned int *v3;
  uint64_t v4;

  *a1 = &off_1E34CCB48;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(NSString *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  unsigned int *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34CCB48;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAuthenticationPanelClient::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(NSString *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::StringImpl *result;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  result = (WTF::StringImpl *)WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 16));
  if ((result & 1) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 24) = 1;
    MEMORY[0x19AEABCC8](&v5, v3);
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 8), (uint64_t)&v5);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197270FA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKWebAuthenticationAssertionResponse *)>::fromCallable<WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1>(WebKit::WebAuthenticationPanelClient::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_1)::{lambda(void *,_WKWebAuthenticationAssertionResponse *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    if (a2)
    {
      v5 = *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 16);
      v6 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return result;
}

void sub_1972710B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(_WKLocalAuthenticatorPolicy)>::fromCallable<WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0)::{lambda(void *,_WKLocalAuthenticatorPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, a2 == 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197271198(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(LAContext *)>::fromCallable<WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0>(WebKit::WebAuthenticationPanelClient::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0)::{lambda(void *,LAContext *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_197271274(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_1972712D0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration const&,WebCore::MockWebAuthenticationConfiguration::LocalConfiguration*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  if (result)
  {
    *(_WORD *)result = *(_WORD *)a2;
    v2 = *(_DWORD **)(a2 + 8);
    if (v2)
      *v2 += 2;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 24) = v4;
    v5 = *(_DWORD **)(a2 + 32);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(result + 32) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 23) = *(_DWORD *)(a2 + 23);
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_1972713AC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 32))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 8, a2 + 8);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_197271428(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v2 + 32))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_197271484(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::{lambda(void const*)#1}::__invoke(_BYTE *a1, void *a2)
{
  if (a1[184])
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 168), a2);
  if (a1[160])
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 136), a2);
  if (a1[120])
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 88), a2);
  return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 40), (WTF::StringImpl *)a2);
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::{lambda(void *)#1}::__invoke(_BYTE *a1)
{
  id v2;
  void *v3;
  WKMockNFTag *v4;
  WKMockNFTag *v5;
  WKMockNFTag *v6;
  const void *v7;
  WKMockNFTag *v8;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (!a1[160])
    goto LABEL_21;
  v3 = v2;
  if (a1[128] == 2 || a1[152])
  {
    v4 = -[WKMockNFTag initWithType:]([WKMockNFTag alloc], "initWithType:", 0);
    objc_msgSend(v3, "addObject:", v4);
  }
  else
  {
    v4 = -[WKMockNFTag initWithType:]([WKMockNFTag alloc], "initWithType:", 3);
    objc_msgSend(v3, "addObject:", v4);
  }
  if (v4)
    CFRelease(v4);
  if (!a1[160])
    goto LABEL_21;
  if (a1[152])
  {
    v5 = -[WKMockNFTag initWithType:]([WKMockNFTag alloc], "initWithType:", 3);
    objc_msgSend(v3, "addObject:", v5);
    if (v5)
      CFRelease(v5);
  }
  if (a1[160])
  {
    if (a1[153])
    {
      v6 = [WKMockNFTag alloc];
      v8 = -[WKMockNFTag initWithType:tagID:](v6, "initWithType:tagID:", 3, v7);
      objc_msgSend(v3, "addObject:", v8);
      if (v8)
        CFRelease(v8);
      if (v7)
        CFRelease(v7);
    }
    if (v3)
      CFRelease(v3);
  }
  else
  {
LABEL_21:
    __break(1u);
  }
}

void sub_197271674(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(0ul &)#1},WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  *result = 0;
  result[1] = 0;
  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v2));
      *((_DWORD *)v4 + 2) = v2;
      *v4 = result;
      v5 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v5)
      {
        v6 = *a2;
        v7 = v6 + 16 * v5;
        v8 = result + 1;
        v9 = 1;
        do
        {
          result = (_QWORD *)WTF::String::isolatedCopy();
          v10 = *(_QWORD *)(v6 + 8);
          *(v8 - 1) = v11;
          *v8 = v10;
          v8 += 2;
          *((_DWORD *)v4 + 3) = v9++;
          v6 += 16;
        }
        while (v6 != v7);
      }
    }
  }
  return result;
}

void sub_197271788(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CCC10;
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  if (*(_BYTE *)(a1 + 136))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  if (*(_BYTE *)(a1 + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  return a1;
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34CCC10;
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  if (*(_BYTE *)(a1 + 136))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  if (*(_BYTE *)(a1 + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 56))
  {
    if (*(unsigned __int8 *)(a1 + 16) >= 4u)
      v2 = 0;
    else
      v2 = *(unsigned __int8 *)(a1 + 16);
    v3 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getLAContextClass((WebKit *)a1)), "init");
    v4 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v4 + 16))(v4, v2, v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    __break(1u);
  }
}

void sub_197271934(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CCC38;
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  if (*(_BYTE *)(a1 + 136))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  if (*(_BYTE *)(a1 + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  return a1;
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34CCC38;
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 160))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 144, a2);
  if (*(_BYTE *)(a1 + 136))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, a2);
  if (*(_BYTE *)(a1 + 96))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 56))
  {
    if (*(unsigned __int8 *)(result + 16) >= 4u)
      v1 = 0;
    else
      v1 = *(unsigned __int8 *)(result + 16);
    v2 = *(_QWORD *)(result + 168);
    *(_QWORD *)(result + 168) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_197271AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::MockNfcService::receiveStartPolling(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CCC60;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MockNfcService::receiveStartPolling(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CCC60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::MockNfcService::receiveStartPolling(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *global_queue;
  char v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  char v28[8];
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_BYTE **)(v1 + 8);
    if (v2)
    {
      if (v2[200])
      {
        if (v2[168] != 1)
        {
          v19 = v2[72];
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__optional_copy_base[abi:sn180100](&v20, (uint64_t)(v2 + 80));
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v24, (uint64_t)(v2 + 128));
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__optional_copy_base[abi:sn180100]((uint64_t)v28, (uint64_t)(v2 + 168));
          std::__optional_copy_base<WebCore::MockWebAuthenticationConfiguration::CcidConfiguration,false>::__optional_copy_base[abi:sn180100](&v33, (uint64_t)(v2 + 208));
          v36 = v19;
          LOBYTE(v37) = 0;
          v40 = 0;
          if (v23)
          {
            v37 = v20;
            v3 = v21;
            v4 = v22;
            v21 = 0u;
            v22 = 0u;
            v38 = v3;
            v39 = v4;
            v40 = 1;
          }
          LOBYTE(v41) = 0;
          v44 = 0;
          if (v27)
          {
            v41 = v24;
            v5 = v25;
            v24 = 0;
            v25 = 0;
            v42 = v5;
            v43[0] = v26[0];
            *(_DWORD *)((char *)v43 + 7) = *(_DWORD *)((char *)v26 + 7);
            v44 = 1;
          }
          v45 = 0;
          v49 = 0;
          if (v32)
          {
            v45 = v28[0];
            v46 = v29;
            v6 = v30;
            v29 = 0;
            v30 = 0;
            v47 = v6;
            v48 = v31;
            v49 = 1;
          }
          LOBYTE(v50) = 0;
          v52 = 0;
          if (v35)
          {
            v50 = v33;
            v7 = v34;
            v33 = 0;
            v34 = 0;
            v51 = v7;
            v52 = 1;
          }
          v8 = (char *)malloc_type_malloc(0xC0uLL, 0x10E204021B436EBuLL);
          v10 = v8;
          *(_QWORD *)v8 = MEMORY[0x1E0C809A0];
          *((_QWORD *)v8 + 1) = 50331650;
          *((_QWORD *)v8 + 2) = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::{lambda(void *)#1}::__invoke;
          *((_QWORD *)v8 + 3) = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::MockNfcService::detectTags(void)::$_0>(WebKit::MockNfcService::detectTags(void)::$_0)::descriptor;
          v8[32] = v36;
          v8[40] = 0;
          v8[80] = 0;
          if (v40)
          {
            *((_WORD *)v8 + 20) = v37;
            v11 = v38;
            v12 = v39;
            v38 = 0u;
            v39 = 0u;
            *((_OWORD *)v8 + 3) = v11;
            *((_OWORD *)v8 + 4) = v12;
            v8[80] = 1;
          }
          v8[88] = 0;
          v8[120] = 0;
          if (v44)
          {
            *((_QWORD *)v8 + 11) = v41;
            v13 = v42;
            v41 = 0;
            v42 = 0;
            *((_QWORD *)v8 + 12) = v13;
            *((_QWORD *)v8 + 13) = v43[0];
            *(_DWORD *)(v8 + 111) = *(_DWORD *)((char *)v43 + 7);
            v8[120] = 1;
          }
          v8[128] = 0;
          v8[160] = 0;
          v14 = v49;
          if (v49)
          {
            v8[128] = v45;
            *((_QWORD *)v8 + 17) = v46;
            v15 = v47;
            v46 = 0;
            v47 = 0;
            *((_QWORD *)v8 + 18) = v15;
            *((_WORD *)v8 + 76) = v48;
            v8[160] = 1;
          }
          v8[168] = 0;
          v8[184] = 0;
          if (v52)
          {
            *((_QWORD *)v8 + 21) = v50;
            v16 = v51;
            v50 = 0;
            v51 = 0;
            *((_QWORD *)v8 + 22) = v16;
            v8[184] = 1;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v9);
            v14 = v49;
          }
          if (v14)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v9);
          if (v44)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v9);
          std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, (WTF::StringImpl *)v9);
          if (v35)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v17);
          if (v32)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v17);
          if (v27)
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v17);
          std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, (WTF::StringImpl *)v17);
          global_queue = dispatch_get_global_queue(0, 0);
          dispatch_async(global_queue, v10);
          _Block_release(v10);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_197271ED0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;

  if (a48)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v53, a2);
  if (a45)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a42, a2);
  if (a40)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v52, a2);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v51, (WTF::StringImpl *)a2);
  if (a28)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v50, v55);
  if (a25)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v55);
  if (a20)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v49, v55);
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100](v48, (WTF::StringImpl *)v55);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34CCC88;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CCC88;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  WTF *result;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  WTF::RunLoop *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  result = (WTF *)WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 16), a2);
  v20 = 0;
  v21 = 0;
  v4 = v19;
  if (v19)
  {
    if (v19 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v5 = (WTF *)WTF::fastMalloc((WTF *)(16 * v19));
    LODWORD(v21) = v19;
    v20 = v5;
    v4 = 0;
    v6 = v18;
    v7 = 8 * v19;
    do
    {
      WTF::UUID::parse();
      if (v24)
      {
        v8 = v23;
        v9 = (_QWORD *)((char *)v5 + 16 * v4);
        *v9 = v22;
        v9[1] = v8;
        ++v4;
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    HIDWORD(v21) = v4;
  }
  WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v20, v4);
  v11 = (WTF::RunLoop *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v10);
  WTF::RunLoop::main(v11);
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v13 = v20;
  v14 = v21;
  v20 = 0;
  v21 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E34CCCB0;
  v15[1] = v12;
  v15[2] = v13;
  v15[3] = v14;
  v22 = v15;
  WTF::RunLoop::dispatch();
  v17 = v22;
  v22 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  result = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    return (WTF *)WTF::fastFree(result, v16);
  }
  return result;
}

void sub_1972721E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E34CCCB0;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CCCB0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197272368(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34CCCD8;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CCCD8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>::call(uint64_t a1)
{
  id v2;
  const __CFString *v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF::StringImpl *v6;
  void *v7;
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  WTF::RunLoop *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _QWORD v32[18];

  v32[16] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C92C68]);
  WTF::UUID::toString((WTF::UUID *)(a1 + 32));
  if (v32[0])
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E351F1B8;
  v5 = (void *)objc_msgSend(v2, "_initWithIdentifier:private:", v3, 0);
  v6 = (WTF::StringImpl *)v32[0];
  v32[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (void *)objc_msgSend(v5, "allCredentials");
  v21 = a1;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v28 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v13 = (void *)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v12), "allValues");
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v14)
        {
          v15 = *(_QWORD *)v24;
          do
          {
            for (j = 0; j != v14; ++j)
            {
              if (*(_QWORD *)v24 != v15)
                objc_enumerationMutation(v13);
              objc_msgSend(v5, "removeCredential:forProtectionSpace:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * j), v12);
            }
            v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          }
          while (v14);
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v9);
  }
  v17 = (WTF::RunLoop *)WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)(v21 + 48), v8);
  v18 = (char)v17;
  WTF::RunLoop::main(v17);
  v19 = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v21 + 16) = 0;
  v20 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v20 = &off_1E34CCD00;
  *(_QWORD *)(v20 + 8) = v19;
  *(_BYTE *)(v20 + 16) = v18;
  v22 = v20;
  WTF::RunLoop::dispatch();
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v5)
    CFRelease(v5);
}

void sub_1972726BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CCD00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CCD00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeDataStoreWithIdentifier(WTF::UUID const&,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF::RefCountedBase *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  v1 = (WTF::RefCountedBase *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 8), (uint64_t)&v4);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v1, (uint64_t)&v4);
  }
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197272858(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;
  WTF::RunLoop *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  v2 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v2 & 1) == 0 || *(_BYTE *)(result + 8))
  {
    v3 = (WTF::RunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "objectForInfoDictionaryKey:", CFSTR("WKAppBoundDomains"));
    atomic_store(v3 != 0, WebKit::keyExists);
    WTF::RunLoop::main(v3);
    v4 = *(_BYTE *)(v1 + 8);
    if (v3)
      CFRetain(v3);
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = &off_1E34CCD50;
    *(_BYTE *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 16) = v3;
    v6 = v5;
    WTF::RunLoop::dispatch();
    result = v6;
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void sub_197272964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E34CCD50;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E34CCD50;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeAppBoundDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned __int8 v3;
  WTF::StringImpl **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned __int8 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[3];
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load(WebKit::hasInitializedAppBoundDomains);
  if ((v3 & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 8))
      return;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 8))
  {
LABEL_5:
    {
      v4 = (WTF::StringImpl **)WebKit::appBoundDomains(void)::appBoundDomains;
      if (WebKit::appBoundDomains(void)::appBoundDomains)
      {
        WebKit::appBoundDomains(void)::appBoundDomains = 0;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
      }
    }
    else
    {
      WebKit::appBoundDomains(void)::appBoundDomains = 0;
    }
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v5 = *(void **)(a1 + 16);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v30;
LABEL_10:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v30 != v7)
        objc_enumerationMutation(v5);
      v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v8);
      {
        v10 = WebKit::appBoundDomains(void)::appBoundDomains;
        if (WebKit::appBoundDomains(void)::appBoundDomains)
          v10 = *(_DWORD *)(WebKit::appBoundDomains(void)::appBoundDomains - 12);
      }
      else
      {
        v10 = 0;
        WebKit::appBoundDomains(void)::appBoundDomains = 0;
      }
      if ((byte_1ECE72BD4 & 1) != 0)
      {
        v11 = qword_1ECE72C18;
        if (qword_1ECE72C18)
          v11 = *(_DWORD *)(qword_1ECE72C18 - 12);
      }
      else
      {
        v11 = 0;
        qword_1ECE72C18 = 0;
        byte_1ECE72BD4 = 1;
      }
      if ((v11 + v10) > 9)
        goto LABEL_58;
      if (!objc_msgSend(v9, "hasSuffix:", CFSTR(":")))
        break;
      MEMORY[0x19AEABCC8](v25, objc_msgSend(v9, "substringToIndex:", objc_msgSend(v9, "length") - 1));
      v14 = v25[0];
      if (!v25[0])
        break;
      v15 = *((_DWORD *)v25[0] + 1);
      if (v15)
      {
        if ((byte_1ECE72BD4 & 1) == 0)
        {
          qword_1ECE72C18 = 0;
          byte_1ECE72BD4 = 1;
        }
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1ECE72C18, v25, v13, (uint64_t)&v27);
        v14 = v25[0];
        v25[0] = 0;
        if (!v14)
          goto LABEL_53;
      }
      else
      {
        v25[0] = 0;
      }
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v12);
        if (!v15)
          break;
      }
      else
      {
        *(_DWORD *)v14 -= 2;
        if (!v15)
          break;
      }
LABEL_53:
      if (v6 == ++v8)
      {
        v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        v6 = v21;
        if (v21)
          goto LABEL_10;
        goto LABEL_58;
      }
    }
    MEMORY[0x19AEABCC8](v25, v9);
    MEMORY[0x19AEABB0C](&v27, v25, 0);
    v17 = v25[0];
    v25[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    WTF::URL::protocol((WTF::URL *)&v27);
    if (!(_DWORD)v18)
      WTF::URL::setProtocol();
    if ((v28 & 1) != 0)
    {
      WebCore::RegistrableDomain::RegistrableDomain(&v26, (const WTF::URL *)&v27);
      if (v26)
      {
        if (*((_DWORD *)v26 + 1) && (MEMORY[0x19AEABBCC]() & 1) == 0)
        {
          {
            WebKit::appBoundDomains(void)::appBoundDomains = 0;
          }
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&WebKit::appBoundDomains(void)::appBoundDomains, &v26, (uint64_t)v25);
        }
        v19 = v26;
        v26 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
    }
    v20 = v27;
    v27 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_53;
  }
LABEL_58:
  atomic_store(1u, WebKit::hasInitializedAppBoundDomains);
  v22 = atomic_load(WebKit::WebsiteDataStore::isAppBoundITPRelaxationEnabled);
  if ((v22 & 1) != 0)
  {
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E34CCD78;
    v27 = v23;
    WebKit::WebsiteDataStore::forwardAppBoundDomainsToITPIfInitialized((uint64_t *)&v27);
    v24 = v27;
    v27 = 0;
    if (v24)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
  }
}

void sub_197272DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34CCDA0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CCDA0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void>::call(WTF::RunLoop *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v2 = *((_QWORD *)a1 + 1);
  WTF::RunLoop::main(a1);
  v4 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34CCDC8;
  v5[1] = v2;
  v5[2] = v4;
  v5[3] = v3;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_197272FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34CCDC8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CCDC8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::ensureAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(WebCore *a1)
{
  uint64_t v2;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 208) + 480))
    WebKit::WebsiteDataStore::addTestDomains(a1);
  {
    WebKit::appBoundDomains(void)::appBoundDomains = 0;
  }
  if ((byte_1ECE72BD4 & 1) == 0)
  {
    qword_1ECE72C18 = 0;
    byte_1ECE72BD4 = 1;
  }
  v2 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &WebKit::appBoundDomains(void)::appBoundDomains, &qword_1ECE72C18);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_197273180(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WTF::String const&,WTF::String const&,WebKit::WebFramePolicyListenerProxy &)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34CCDF0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WTF::String const&,WTF::String const&,WebKit::WebFramePolicyListenerProxy &)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34CCDF0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WTF::String const&,WTF::String const&,WebKit::WebFramePolicyListenerProxy &)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::call(_QWORD *a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  const WTF::StringImpl **v6;
  WebCore::RegistrableDomain *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  __int16 v10;
  WTF::StringImpl *v11;
  __int16 v12;
  WTF::StringImpl *v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int i;
  int v19;
  WTF *v20;
  WTF::StringImpl *v21;

  v4 = atomic_load(WebKit::keyExists);
  if ((v4 & 1) == 0 && (!*a2 || !*(_DWORD *)(*a2 - 12)))
    return WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(a1[3], 0);
  v6 = (const WTF::StringImpl **)a1[2];
  v5 = a1[3];
  v7 = (WebCore::RegistrableDomain *)a1[1];
  v8 = *v6;
  if (*v6 && (v9 = *(_QWORD *)a3) != 0)
  {
    v15 = *(_DWORD *)(v9 - 8);
    v16 = *((_DWORD *)v8 + 4);
    if (v16 >= 0x100)
      v17 = v16 >> 8;
    else
      v17 = WTF::StringImpl::hashSlowCase(v8);
    for (i = 0; ; v17 = i + v19)
    {
      v19 = v17 & v15;
      v20 = *(WTF **)(v9 + 8 * (v17 & v15));
      if (v20 != (WTF *)-1)
      {
        if (!v20)
          goto LABEL_6;
        if ((WTF::equal(v20, *v6, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    v10 = 1;
  }
  else
  {
LABEL_6:
    v10 = 0;
  }
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v7, &v21);
  v12 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a2, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(v5, v10 | v12 | 0x100u);
}

void sub_19727335C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTraits<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CCE18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTraits<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CCE18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTraits<WebKit::WebsiteDataStore::getAppBoundDomains(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)> &&)::$_0>,WTF::HashTableTraits> const&>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197273448(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundSchemes(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CCE40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundSchemes(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CCE40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getAppBoundSchemes(WTF::CompletionHandler<void ()(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_197273524(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebCore::IOSApplication *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0,void>::call(WebCore::IOSApplication *result)
{
  WebCore::IOSApplication *v1;
  unsigned __int8 v2;
  char isMobileSafari;
  uint64_t (**v4)(void);
  const void *v5;
  SEL v6;
  void *v7;
  WebCore::IOSApplication *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v1 = result;
  v2 = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v2 & 1) != 0 && !*((_BYTE *)result + 8))
    return result;
  isMobileSafari = WebCore::IOSApplication::isMobileSafari(result);
  v4 = (uint64_t (**)(void))MEMORY[0x1E0DCE080];
  if (objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE080])(), "instancesRespondToSelector:", sel_crossSiteTrackingPreventionRelaxedDomains))v5 = (const void *)objc_msgSend((id)objc_msgSend((id)(*v4)(), "sharedConnection"), "crossSiteTrackingPreventionRelaxedDomains");
  else
    v5 = (const void *)MEMORY[0x1E0C9AA60];
  v6 = NSSelectorFromString(CFSTR("crossSiteTrackingPreventionRelaxedApps"));
  if (objc_msgSend((id)(*v4)(), "instancesRespondToSelector:", v6))
    v7 = (void *)objc_msgSend((id)objc_msgSend((id)(*v4)(), "sharedConnection"), "performSelector:", v6);
  else
    v7 = (void *)MEMORY[0x1E0C9AA60];
  result = (WebCore::IOSApplication *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if ((isMobileSafari & 1) == 0)
  {
    v8 = result;
    MEMORY[0x19AEABCC8](&v14, result);
    if ((WebKit::isRunningTest((WebKit *)&v14, v9) & 1) != 0)
      v11 = 1;
    else
      v11 = objc_msgSend(v7, "containsObject:", v8);
    result = v14;
    v14 = 0;
    if (!result)
    {
LABEL_16:
      if ((v11 & 1) == 0)
        return result;
      goto LABEL_19;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_16;
    }
    result = (WebCore::IOSApplication *)WTF::StringImpl::destroy(result, v10);
    if ((v11 & 1) == 0)
      return result;
  }
LABEL_19:
  WTF::RunLoop::main(result);
  v12 = *((_BYTE *)v1 + 8);
  if (v5)
    CFRetain(v5);
  v13 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = &off_1E34CCE90;
  *(_BYTE *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 16) = v5;
  v14 = (WTF::StringImpl *)v13;
  WTF::RunLoop::dispatch();
  result = v14;
  v14 = 0;
  if (result)
    return (WebCore::IOSApplication *)(*(uint64_t (**)(WebCore::IOSApplication *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1972736F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E34CCE90;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E34CCE90;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::initializeManagedDomains(WebKit::WebsiteDataStore::ForceReinitialization)::$_0::operator()(void)::{lambda(void)#1},void>::call(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unsigned __int8 v3;
  WTF::StringImpl **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[3];
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v2 = result;
  v26 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load(WebKit::hasInitializedManagedDomains);
  if ((v3 & 1) != 0)
  {
    if (!*((_BYTE *)result + 8))
      return result;
    goto LABEL_5;
  }
  if (*((_BYTE *)result + 8))
  {
LABEL_5:
    {
      v4 = (WTF::StringImpl **)WebKit::managedDomains(void)::managedDomains;
      if (WebKit::managedDomains(void)::managedDomains)
      {
        WebKit::managedDomains(void)::managedDomains = 0;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
      }
    }
    else
    {
      WebKit::managedDomains(void)::managedDomains = 0;
    }
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = (void *)*((_QWORD *)v2 + 2);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v22;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v8);
        {
          if (WebKit::managedDomains(void)::managedDomains
            && *(_DWORD *)(WebKit::managedDomains(void)::managedDomains - 12) > 9u)
          {
            goto LABEL_41;
          }
        }
        else
        {
          WebKit::managedDomains(void)::managedDomains = 0;
        }
        MEMORY[0x19AEABCC8](v17, v9);
        MEMORY[0x19AEABB0C](&v19, v17, 0);
        v11 = v17[0];
        v17[0] = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        WTF::URL::protocol((WTF::URL *)&v19);
        if (!(_DWORD)v12)
          WTF::URL::setProtocol();
        if ((v20 & 1) != 0)
        {
          WebCore::RegistrableDomain::RegistrableDomain(&v18, (const WTF::URL *)&v19);
          if (v18)
          {
            if (*((_DWORD *)v18 + 1) && (MEMORY[0x19AEABBCC]() & 1) == 0)
            {
              {
                WebKit::managedDomains(void)::managedDomains = 0;
              }
              WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(&WebKit::managedDomains(void)::managedDomains, &v18, (uint64_t)v17);
            }
            v13 = v18;
            v18 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v12);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
        }
        v14 = v19;
        v19 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        ++v8;
      }
      while (v6 != v8);
      v15 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v6 = v15;
    }
    while (v15);
  }
LABEL_41:
  atomic_store(1u, WebKit::hasInitializedManagedDomains);
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v16 = off_1E34CCEB8;
  v19 = v16;
  WebKit::WebsiteDataStore::forwardManagedDomainsToITPIfInitialized((uint64_t *)&v19);
  result = v19;
  if (v19)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
  return result;
}

void sub_197273A94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::$_0 &&>>()
{
  NSString *v0;
  uint64_t v1;
  unint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v0 = NSTemporaryDirectory();
  MEMORY[0x19AEABCC8](&v8, v0);
  if (v8)
  {
    v1 = *((_QWORD *)v8 + 1);
    v2 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v1 = 0;
    v2 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v1, v2, &v9);
  v4 = v9;
  v9 = 0;
  v5 = (WTF::StringImpl *)WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::resolvedTemporaryDirectory;
  WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::resolvedTemporaryDirectory = (uint64_t)v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      v6 = v9;
      v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v3);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v5 -= 2;
      v9 = 0;
    }
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197273C00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::saveRecentSearches(WTF::String const&,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *a1 = off_1E34CCEE0;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::saveRecentSearches(WTF::String const&,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)a1 = off_1E34CCEE0;
  v3 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::saveRecentSearches(WTF::String const&,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void>::call()
{
  return WebCore::saveRecentSearchesToFile();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34CCF08;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34CCF08;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(_QWORD *a1, uint64_t a2, const WTF::String *a3)
{
  WTF::RunLoop *RecentSearchesFromFile;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17[2];

  RecentSearchesFromFile = (WTF::RunLoop *)WebCore::loadRecentSearchesFromFile((WebCore *)(a1 + 1), (const WTF::String *)(a1 + 3), a3);
  WTF::RunLoop::main(RecentSearchesFromFile);
  v5 = a1[2];
  a1[2] = 0;
  v13 = v5;
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(0ul &)#1},WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(&v14, v17);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34CCF30;
  v6[1] = v13;
  v7 = v14;
  v14 = 0;
  v6[2] = v7;
  v8 = v15;
  v15 = 0;
  v16 = v6;
  v6[3] = v8;
  WTF::RunLoop::dispatch();
  v10 = v16;
  v16 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v11);
}

void sub_197273F30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a6);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v8);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34CCF30;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34CCF30;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::loadRecentSearches(WTF::String const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197274064(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeRecentSearches(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34CCF58;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeRecentSearches(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34CCF58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::removeRecentSearches(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::RunLoop *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (WTF::RunLoop *)WebCore::removeRecentlyModifiedRecentSearchesFromFile();
  WTF::RunLoop::main(v2);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v4, (uint64_t *)(a1 + 24));
  WTF::RunLoop::dispatch();
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1972741B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WKMutableArrayCreate()
{
  WebKit *v1;

  API::Array::create(&v1);
  if (v1)
    return *((_QWORD *)v1 + 1);
  else
    return 0;
}

char *WKArrayAppendItem(char *result, void *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (result)
  {
    result = (char *)objc_msgSend(result, "_apiObject");
    v3 = result;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + 16;
  if (a2)
  {
    v5 = objc_msgSend(a2, "_apiObject");
    v13 = v5;
    v8 = *((_DWORD *)v3 + 7);
    v7 = v3 + 28;
    v6 = v8;
    if (v8 == *(v7 - 1))
      return (char *)WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>((uint64_t)v4, &v13);
    v9 = v5;
    v10 = (uint64_t *)(*v4 + 8 * v6);
    result = (char *)CFRetain(*(CFTypeRef *)(v5 + 8));
    LODWORD(v11) = *v7;
  }
  else
  {
    v13 = 0;
    v12 = *((_DWORD *)v3 + 7);
    v7 = v3 + 28;
    v11 = v12;
    if (v12 == *(v7 - 1))
      return (char *)WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>((uint64_t)v4, &v13);
    v9 = 0;
    v10 = (uint64_t *)(*v4 + 8 * v11);
  }
  *v10 = v9;
  *v7 = v11 + 1;
  return result;
}

void *WKArrayRemoveItemAtIndex(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *result;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (uint64_t *)(*(_QWORD *)(v3 + 16) + 8 * a2);
  v5 = *v4;
  *v4 = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  result = memmove(v4, v4 + 1, *(_QWORD *)(v3 + 16) + 8 * *(unsigned int *)(v3 + 28) - (_QWORD)(v4 + 1));
  --*(_DWORD *)(v3 + 28);
  return result;
}

uint64_t WKMutableDictionaryCreate()
{
  WebKit *v0;

  v0 = (WebKit *)API::Object::newObject(0x18uLL, 9);
  *(_QWORD *)v0 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v0);
  *(_QWORD *)v0 = &off_1E34CC280;
  *((_QWORD *)v0 + 2) = 0;
  return *((_QWORD *)v0 + 1);
}

BOOL WKDictionarySetItem(void *a1, void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  CFTypeRef *v11;
  WTF::StringImpl *v12;
  _BYTE v13[24];

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
    a3 = (CFTypeRef *)-[CFTypeRef _apiObject](a3, "_apiObject");
    CFRetain(a3[1]);
  }
  v11 = a3;
  WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)(v5 + 16), &v12, (uint64_t *)&v11, (uint64_t)v13);
  v7 = v13[16];
  v8 = (uint64_t)v11;
  v11 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v7 != 0;
}

uint64_t WKBooleanGetTypeID()
{
  return 32;
}

uint64_t WKBooleanCreate(API::Boolean *a1)
{
  WebKit *v2;

  API::Boolean::create(a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKBooleanGetValue(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKDoubleGetTypeID()
{
  return 33;
}

uint64_t WKDoubleCreate(double a1)
{
  uint64_t v2;

  v2 = API::Object::newObject(0x18uLL, 33);
  *(double *)(v2 + 16) = a1;
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(_QWORD *)v2 = &off_1E34AE778;
  return *(_QWORD *)(v2 + 8);
}

double WKDoubleGetValue(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKUInt64GetTypeID()
{
  return 34;
}

uint64_t WKUInt64Create(uint64_t a1)
{
  WebKit *v2;

  v2 = (WebKit *)API::Object::newObject(0x18uLL, 34);
  *((_QWORD *)v2 + 2) = a1;
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v2);
  *(_QWORD *)v2 = &off_1E34AD280;
  return *((_QWORD *)v2 + 1);
}

uint64_t WKUInt64GetValue(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKPluginInformationBundleIdentifierKey()
{
  return 0;
}

uint64_t WKPluginInformationBundleVersionKey()
{
  return 0;
}

uint64_t WKPluginInformationBundleShortVersionKey()
{
  return 0;
}

uint64_t WKPluginInformationPathKey()
{
  return 0;
}

uint64_t WKPluginInformationDisplayNameKey()
{
  return 0;
}

uint64_t WKPluginInformationDefaultLoadPolicyKey()
{
  return 0;
}

uint64_t WKPluginInformationUpdatePastLastBlockedVersionIsKnownAvailableKey()
{
  return 0;
}

uint64_t WKPluginInformationHasSandboxProfileKey()
{
  return 0;
}

uint64_t WKPluginInformationFrameURLKey()
{
  return 0;
}

uint64_t WKPluginInformationMIMETypeKey()
{
  return 0;
}

uint64_t WKPluginInformationPageURLKey()
{
  return 0;
}

uint64_t WKPluginInformationPluginspageAttributeURLKey()
{
  return 0;
}

uint64_t WKPluginInformationPluginURLKey()
{
  return 0;
}

uint64_t WKPlugInInformationReplacementObscuredKey()
{
  return 0;
}

uint64_t WKSecurityOriginGetTypeID()
{
  return 18;
}

uint64_t WKSecurityOriginCreateFromString(void *a1)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WTF::String::isolatedCopy();
  WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v7, v1);
  API::SecurityOrigin::create(&v9);
  if (v9)
    v3 = *(_QWORD *)(v9 + 8);
  else
    v3 = 0;
  v4 = v8;
  v8 = 0;
  v9 = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v4, v2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKSecurityOriginCreateFromDatabaseIdentifier(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v6;
  WTF::StringImpl *v7;
  _BYTE v8[24];
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    objc_msgSend(a1, "_apiObject");
  WTF::String::isolatedCopy();
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  v2 = v7;
  v7 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (!v10)
    return 0;
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)v8);
  API::SecurityOrigin::create(&v7);
  if (v7)
    v4 = *((_QWORD *)v7 + 1);
  else
    v4 = 0;
  v7 = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v6, v3);
  if (v10 && v9 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34CCF70[v9])(&v7, v8);
  return v4;
}

uint64_t WKSecurityOriginCreate(void *a1, void *a2, int a3)
{
  __int16 v3;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v3 = a3;
  if (a3)
    v5 = a3 < 0x10000;
  else
    v5 = 0;
  v6 = v5;
  if (a1)
    objc_msgSend(a1, "_apiObject");
  WTF::String::isolatedCopy();
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (v6)
    v7 = v3;
  else
    v7 = 0;
  v8 = v7 | v3 & 0xFF00;
  if (v6)
    v9 = 0x10000;
  else
    v9 = 0;
  API::SecurityOrigin::create((_DWORD **)&v15, (_DWORD **)&v14, v8 | v9, &v16);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v16)
    return *(_QWORD *)(v16 + 8);
  else
    return 0;
}

uint64_t API::SecurityOrigin::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WebKit *v9;
  uint64_t result;
  char v11;
  _BYTE v12[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = API::Object::newObject(0x30uLL, 18);
  v9 = (WebKit *)WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v12, a1, a2, a3);
  *(_QWORD *)v8 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v9);
  *(_QWORD *)v8 = off_1E34BC2E0;
  *(_BYTE *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 40) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 16, (uint64_t)v12);
  *a4 = v8;
  if (v13 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CCF70[v13])(&v11, v12);
  return result;
}

uint64_t WKSecurityOriginCopyDatabaseIdentifier(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(a1 + 16));
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKSecurityOriginCopyToString(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a1 + 16));
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKSecurityOriginCopyProtocol(uint64_t a1)
{
  WebKit *v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::SecurityOriginData::protocol((WebCore::SecurityOriginData *)(a1 + 16));
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKSecurityOriginCopyHost(uint64_t a1)
{
  WebKit *v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)(a1 + 16));
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKSecurityOriginGetPort(uint64_t a1)
{
  int v1;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  v1 = WebCore::SecurityOriginData::port((WebCore::SecurityOriginData *)(a1 + 16));
  if ((v1 & 0xFF0000) != 0)
    return (unsigned __int16)v1;
  else
    return 0;
}

uint64_t WKSerializedScriptValueGetTypeID()
{
  return 20;
}

uint64_t WKSerializedScriptValueCreate(WebCore::SerializedScriptValue *a1, const OpaqueJSContext *a2, const OpaqueJSValue *a3, const OpaqueJSValue **a4)
{
  WebKit *v4;
  uint64_t v6;

  WebCore::SerializedScriptValue::create(a1, a2, a3, a4);
  if (!v6)
    return 0;
  v4 = (WebKit *)API::Object::newObject(0x18uLL, 20);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v4);
  *(_QWORD *)v4 = &off_1E34AD2F8;
  *((_QWORD *)v4 + 2) = v6;
  return *((_QWORD *)v4 + 1);
}

uint64_t WKSerializedScriptValueDeserialize(void *a1, const OpaqueJSContext *a2, const OpaqueJSValue **a3)
{
  return WebCore::SerializedScriptValue::deserialize(*(WebCore::SerializedScriptValue **)(objc_msgSend(a1, "_apiObject") + 16), a2, a3);
}

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD *)a1;
  v10 = *a2;
  if (v10)
    CFRetain(*(CFTypeRef *)(v10 + 8));
  v11 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(v9 + 8 * v8) = v10;
  *(_DWORD *)(a1 + 12) = v11 + 1;
  return 1;
}

id *WebKit::CompactContextMenuPresenter::CompactContextMenuPresenter(id *a1, void *a2, uint64_t a3)
{
  WKCompactContextMenuPresenterButton *v5;

  objc_initWeak(a1, a2);
  v5 = +[WKCompactContextMenuPresenterButton buttonWithType:](WKCompactContextMenuPresenterButton, "buttonWithType:", 1);
  a1[1] = v5;
  if (v5)
  {
    CFRetain(v5);
    v5 = (WKCompactContextMenuPresenterButton *)a1[1];
  }
  -[WKCompactContextMenuPresenterButton setExternalDelegate:](v5, "setExternalDelegate:", a3);
  objc_msgSend((id)objc_msgSend(a1[1], "layer"), "setZPosition:", 2.22507386e-308);
  objc_msgSend(a1[1], "setHidden:", 1);
  objc_msgSend(a1[1], "setUserInteractionEnabled:", 0);
  objc_msgSend(a1[1], "setContextMenuInteractionEnabled:", 1);
  objc_msgSend(a1[1], "setShowsMenuAsPrimaryAction:", 1);
  return a1;
}

void sub_1972750B4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebKit::CompactContextMenuPresenter::~CompactContextMenuPresenter(id *this)
{
  id v2;
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN6WebKit27CompactContextMenuPresenterD2Ev_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = this;
  objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v3);
  objc_msgSend(this[1], "removeFromSuperview");
  v2 = this[1];
  this[1] = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak(this);
}

void sub_197275168(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  objc_destroyWeak((id *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27CompactContextMenuPresenterD2Ev_block_invoke(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "contextMenuInteraction"), "dismissMenu");
}

uint64_t WebKit::CompactContextMenuPresenter::present(id *this, CGRect a2)
{
  double height;
  double width;
  double y;
  double x;
  uint64_t result;
  int v8;
  void *v9;
  double MidX;
  CGRect v11;
  CGRect v12;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  result = objc_msgSend(objc_loadWeak(this), "window");
  if (result)
  {
    objc_msgSend(this[1], "setFrame:", x, y, width, height);
    if (!objc_msgSend(this[1], "superview"))
      objc_msgSend(objc_loadWeak(this), "addSubview:", this[1]);
    if ((byte_1ECE72C21 & 1) != 0)
    {
      v8 = _MergedGlobals_85;
    }
    else
    {
      v8 = objc_msgSend(MEMORY[0x1E0CEA3A0], "instancesRespondToSelector:", sel_performPrimaryAction);
      _MergedGlobals_85 = v8;
      byte_1ECE72C21 = 1;
    }
    if (v8)
    {
      return objc_msgSend(this[1], "performPrimaryAction");
    }
    else
    {
      v9 = (void *)objc_msgSend(this[1], "contextMenuInteraction");
      v11.origin.x = x;
      v11.origin.y = y;
      v11.size.width = width;
      v11.size.height = height;
      MidX = CGRectGetMidX(v11);
      v12.origin.x = x;
      v12.origin.y = y;
      v12.size.width = width;
      v12.size.height = height;
      return objc_msgSend(v9, "_presentMenuAtLocation:", MidX, CGRectGetMidY(v12));
    }
  }
  return result;
}

void WebKit::DragDropInteractionState::prepareForDragSession(uint64_t a1, CFTypeRef cf, void *aBlock)
{
  const void *v6;
  void *v7;

  if (cf)
    CFRetain(cf);
  v6 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  if (v6)
    CFRelease(v6);
  v7 = _Block_copy(aBlock);
  _Block_release(*(const void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = v7;
  _Block_release(0);
}

void sub_197275350(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::updatePreviewsForActiveDragSources(WebKit::DragDropInteractionState *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  const __CFString *v12;
  char v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t v19;
  CFTypeRef v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef (*v28)(uint64_t);
  void *v29;
  CFTypeRef v30;
  CFTypeRef cf;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 103);
  if (!v1)
    return;
  v2 = *((_QWORD *)this + 50);
  v3 = v2 + 312 * v1;
  do
  {
    if (!*(_BYTE *)(v2 + 296) || (*(_BYTE *)v2 & 0x20) == 0 && (*(_BYTE *)v2 & 6) != 4)
      goto LABEL_39;
    v4 = (void *)*((_QWORD *)this + 5);
    v5 = *(_QWORD *)(v2 + 304);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v6 = (void *)objc_msgSend(v4, "items");
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, &v26, 16);
    if (!v7)
      goto LABEL_39;
    v8 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        v11 = (void *)objc_msgSend(v10, "_privateLocalContext");
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v11, "integerValue") == v5)
        {
          if (!v10)
            goto LABEL_39;
          if ((*(_BYTE *)v2 & 4) == 0)
          {
            if ((*(_BYTE *)v2 & 0x20) == 0)
              goto LABEL_38;
            v12 = *(const __CFString **)(v2 + 40);
            if (v12)
            {
              CFRetain(*(CFTypeRef *)(v2 + 40));
              v26 = MEMORY[0x1E0C809B0];
              v27 = 3321888768;
              v28 = ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__1cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke;
              v29 = &__block_descriptor_40_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1_e20___UIDragPreview_8__0l;
              v30 = v12;
              CFRetain(v12);
            }
            else
            {
              v26 = MEMORY[0x1E0C809B0];
              v27 = 3321888768;
              v28 = ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__1cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke;
              v29 = &__block_descriptor_40_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1_e20___UIDragPreview_8__0l;
              v30 = 0;
            }
            v19 = objc_msgSend((id)objc_msgSend(&v26, "copy"), "autorelease");
            v20 = v30;
            v30 = 0;
            if (v20)
              CFRelease(v20);
            objc_msgSend(v10, "setPreviewProvider:", v19);
            if (!v12)
              goto LABEL_38;
            goto LABEL_37;
          }
          if (*(_QWORD *)(v2 + 248))
          {
            v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
            if (!v12)
            {
              v13 = 1;
LABEL_24:
              v14 = (const void *)WTF::URL::operator NSURL *();
              v15 = v14;
              if (v14)
                CFRetain(v14);
              v26 = MEMORY[0x1E0C809B0];
              v27 = 3321888768;
              v28 = ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__0cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke;
              v29 = &__block_descriptor_48_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__0_e20___UIDragPreview_8__0l;
              v30 = v12;
              if ((v13 & 1) == 0)
                CFRetain(v12);
              cf = v15;
              if (v15)
                CFRetain(v15);
              v16 = objc_msgSend((id)objc_msgSend(&v26, "copy"), "autorelease");
              v17 = cf;
              cf = 0;
              if (v17)
                CFRelease(v17);
              v18 = v30;
              v30 = 0;
              if (v18)
                CFRelease(v18);
              objc_msgSend(v10, "setPreviewProvider:", v16);
              if (v15)
                CFRelease(v15);
              if ((v13 & 1) != 0)
                goto LABEL_38;
LABEL_37:
              CFRelease(v12);
LABEL_38:
              *(_BYTE *)(v2 + 296) = 0;
              goto LABEL_39;
            }
          }
          else
          {
            v12 = &stru_1E351F1B8;
          }
          CFRetain(v12);
          v13 = 0;
          goto LABEL_24;
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, &v26, 16);
      if (v7)
        continue;
      break;
    }
LABEL_39:
    v2 += 312;
  }
  while (v2 != v3);
}

void sub_197275688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf,CFTypeRef a24)
{
  const void *v24;

  CFRelease(v24);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::addDefaultDropPreview(WebKit::DragDropInteractionState *this, CFTypeRef cf, UITargetedDragPreview *a3)
{
  uint64_t *v3;
  CFTypeRef v4;
  _BYTE v5[24];
  CFTypeRef cfa;
  const void *v7;

  v7 = a3;
  v3 = (uint64_t *)((char *)this + 416);
  cfa = cf;
  if (cf)
    CFRetain(cf);
  WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::add<UITargetedDragPreview*&>(v3, &cfa, &v7, (uint64_t)v5);
  v4 = cfa;
  cfa = 0;
  if (v4)
    CFRelease(v4);
}

void sub_197275790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::add<UITargetedDragPreview*&>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  const void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  _QWORD *v18;
  int v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (const void *)*a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = v8 + 16 * v15;
  v17 = *(const void **)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        v30 = 0;
        v31 = v8 + 16 * v25;
        goto LABEL_35;
      }
      if (v17 == (const void *)-1)
        v18 = (_QWORD *)v16;
      v15 = (v15 + v19) & v10;
      v16 = v8 + 16 * v15;
      v17 = *(const void **)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = (const void *)*a2;
      v16 = (uint64_t)v18;
    }
  }
  *a2 = 0;
  v20 = *(const void **)v16;
  *(_QWORD *)v16 = v11;
  if (v20)
    CFRelease(v20);
  v21 = *a3;
  if (v21)
    CFRetain(v21);
  v22 = *(const void **)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v21;
  if (v22)
    CFRelease(v22);
  v23 = *a1;
  if (*a1)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_28:
      v16 = WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(a1, (const void **)v16);
      v26 = *a1;
      if (*a1)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_28;
  }
  v31 = v26 + 16 * v29;
  v30 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v31;
  *(_BYTE *)(a4 + 16) = v30;
}

uint64_t *WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::get<WTF::RetainPtr<UIDragItem>>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *result;
  if (!*result)
  {
LABEL_8:
    *a3 = 0;
    return result;
  }
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v3 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_6:
  result = *(uint64_t **)(v3 + 16 * v8 + 8);
  *a3 = result;
  if (result)
    return (uint64_t *)CFRetain(result);
  return result;
}

CFTypeRef WebKit::DragDropInteractionState::finalDropPreview(WebKit::DragDropInteractionState *this, UIDragItem *a2)
{
  CFTypeRef v2;
  CFTypeRef cf;

  WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::get<WTF::RetainPtr<UIDragItem>>((uint64_t *)this + 53, (uint64_t)a2, (uint64_t **)&cf);
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  return v2;
}

void WebKit::DragDropInteractionState::deliverDelayedDropPreview(WebKit::DragDropInteractionState *this, UIView *a2, UIView *a3, WebCore::Image **a4)
{
  const void *v8;
  const Color *v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  uint64_t v15;
  CFTypeRef *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  const void **v25;
  const void *v26;
  const void **v27;
  int v28;
  const void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  CFTypeRef *v36;
  int v37;
  CFTypeRef cf;
  CFTypeRef v39;
  const void *v40;

  WebKit::uiImageForImage((WebCore::DestinationColorSpace *)&v40, a4[11]);
  v8 = v40;
  WebCore::cocoaColor((WebCore *)(a4 + 12), v9);
  WebKit::createTargetedDragPreview(&v39, (uint64_t)v8, a2, a3, (uint64_t)(a4 + 2), (uint64_t)(a4 + 6), (uint64_t)cf, 0, 0);
  if (cf)
    CFRelease(cf);
  v10 = v39;
  if (!v39)
    goto LABEL_63;
  v11 = *((_QWORD *)this + 52);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = (CFTypeRef *)(v11 + 16 * v12);
    if (*(_DWORD *)(v11 - 12))
    {
      v14 = (CFTypeRef *)*((_QWORD *)this + 52);
      if ((_DWORD)v12)
      {
        v15 = 16 * v12;
        v14 = (CFTypeRef *)*((_QWORD *)this + 52);
        while ((unint64_t)*v14 + 1 <= 1)
        {
          v14 += 2;
          v15 -= 16;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v14 = (CFTypeRef *)(v11 + 16 * v12);
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = (CFTypeRef *)(v11 + 16 * v12);
LABEL_14:
  if (v11)
    v16 = (CFTypeRef *)(v11 + 16 * *(unsigned int *)(v11 - 4));
  else
    v16 = 0;
  if (v16 != v14)
  {
    v17 = (uint64_t *)((char *)this + 424);
    do
    {
      v18 = (void *)*v14;
      if (*v14)
        CFRetain(*v14);
      v19 = *v17;
      if (*v17
        || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v17, 0), (v19 = *v17) != 0))
      {
        v20 = *(_DWORD *)(v19 - 8);
      }
      else
      {
        v20 = 0;
      }
      v21 = ((unint64_t)v18 + ~((_QWORD)v18 << 32)) ^ (((unint64_t)v18 + ~((_QWORD)v18 << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = (const void **)(v19 + 16 * v24);
      v26 = *v25;
      if (*v25)
      {
        v27 = 0;
        v28 = 1;
        while (v26 != v18)
        {
          if (v26 == (const void *)-1)
            v27 = v25;
          v24 = (v24 + v28) & v20;
          v25 = (const void **)(v19 + 16 * v24);
          v26 = *v25;
          ++v28;
          if (!*v25)
          {
            if (v27)
            {
              *v27 = 0;
              v27[1] = 0;
              --*(_DWORD *)(*v17 - 16);
              v25 = v27;
            }
            goto LABEL_32;
          }
        }
      }
      else
      {
LABEL_32:
        if (v18)
        {
          CFRetain(v18);
          v29 = *v25;
          *v25 = v18;
          if (v29)
            CFRelease(v29);
        }
        else
        {
          *v25 = 0;
        }
        WTF::GenericHashTraits<WTF::RetainPtr<UITargetedDragPreview>>::assignToEmpty<WTF::RetainPtr<UITargetedDragPreview>,UITargetedDragPreview*>(v25 + 1, v10);
        v30 = *v17;
        if (*v17)
          v31 = *(_DWORD *)(v30 - 12) + 1;
        else
          v31 = 1;
        *(_DWORD *)(v30 - 12) = v31;
        v32 = *v17;
        if (*v17)
          v33 = *(_DWORD *)(v32 - 12);
        else
          v33 = 0;
        v34 = (*(_DWORD *)(v32 - 16) + v33);
        v35 = *(unsigned int *)(v32 - 4);
        if (v35 <= 0x400)
        {
          if (3 * v35 > 4 * v34)
            goto LABEL_45;
LABEL_44:
          WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v17, v25);
          goto LABEL_45;
        }
        if (v35 <= 2 * v34)
          goto LABEL_44;
      }
LABEL_45:
      if (byte_1ECE72C23 != 1)
      {
        v37 = objc_msgSend(MEMORY[0x1E0CEA558], "instancesRespondToSelector:", sel__setNeedsDropPreviewUpdate);
        byte_1ECE72C22 = v37;
        byte_1ECE72C23 = 1;
        if (!v37)
          goto LABEL_48;
LABEL_47:
        objc_msgSend(v18, "_setNeedsDropPreviewUpdate");
        goto LABEL_48;
      }
      if (byte_1ECE72C22)
        goto LABEL_47;
LABEL_48:
      if (v18)
        CFRelease(v18);
      v36 = v14 + 2;
      v14 = v13;
      if (v36 != v13)
      {
        v14 = v36;
        while ((unint64_t)*v14 + 1 <= 1)
        {
          v14 += 2;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
    }
    while (v14 != v16);
  }
  CFRelease(v10);
LABEL_63:
  if (v8)
    CFRelease(v8);
}

void sub_197275DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  const void *v12;

  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

WebCore::DestinationColorSpace *WebKit::uiImageForImage(WebCore::DestinationColorSpace *this, WebCore::Image *a2)
{
  WebCore::DestinationColorSpace *v2;
  uint64_t v4;
  id v5;
  void *v6;
  WebCore::NativeImage *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  WebCore::NativeImage *v16;

  v2 = this;
  if (!a2
    || (v4 = WebCore::DestinationColorSpace::SRGB(this),
        this = (WebCore::DestinationColorSpace *)(*(_QWORD *(**)(WebCore::NativeImage **__return_ptr, WebCore::Image *, uint64_t))(*(_QWORD *)a2 + 288))(&v16, a2, v4), !v16))
  {
    *(_QWORD *)v2 = 0;
    return this;
  }
  v5 = objc_alloc(MEMORY[0x1E0CEA638]);
  this = (WebCore::DestinationColorSpace *)objc_msgSend(v5, "initWithCGImage:", *(_QWORD *)WebCore::NativeImage::platformImage(v16));
  *(_QWORD *)v2 = this;
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 1);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_9;
    }
    this = (WebCore::DestinationColorSpace *)MEMORY[0x19AEABB3C](v8);
LABEL_9:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return this;
LABEL_17:
        if (v12)
          this = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          return (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v8, v6);
        return this;
      }
    }
    else
    {
      __clrex();
    }
    this = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return this;
    goto LABEL_17;
  }
  return this;
}

void sub_197275F54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  if (!a10)
    goto LABEL_19;
  v11 = *(_QWORD *)(a10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_7:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_14:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree((WTF *)v11, a2);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v11);
  goto LABEL_7;
}

void WebKit::createTargetedDragPreview(_QWORD *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  float v21;
  float v22;
  float v23;
  float v24;
  void *v25;
  uint64_t v26;
  float v27;
  CGPoint *v28;
  uint64_t v29;
  float v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  double MidX;
  const void *v37;
  CGRect v38;
  _BYTE v39[8];
  float v40;
  float v41;
  CGRect v42;
  CGRect v43;

  if (*(float *)(a5 + 8) <= 0.0)
    goto LABEL_14;
  if (!a2)
    goto LABEL_14;
  if (*(float *)(a5 + 12) <= 0.0)
    goto LABEL_14;
  if (!objc_msgSend(a4, "window"))
    goto LABEL_14;
  WebCore::FloatRect::operator CGRect();
  objc_msgSend(a3, "convertRect:toView:", a4);
  v38.origin.x = v17;
  v38.origin.y = v18;
  v38.size.width = v19;
  v38.size.height = v20;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v39, &v38);
  v21 = v40;
  if (v40 <= 0.0)
    goto LABEL_14;
  v22 = v41;
  if (v41 > 0.0)
  {
    v24 = *(float *)(a5 + 8);
    v23 = *(float *)(a5 + 12);
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a6 + 12));
    v26 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v26)
    {
      v27 = v21 / v24;
      v28 = *(CGPoint **)a6;
      v29 = 16 * v26;
      v30 = v22 / v23;
      do
      {
        v38.origin = *v28;
        WebCore::FloatRect::scale((WebCore::FloatRect *)&v38, v27, v30);
        v31 = (void *)MEMORY[0x1E0CB3B18];
        WebCore::FloatRect::operator CGRect();
        v32 = objc_msgSend(v31, "valueWithCGRect:");
        if (v32)
          objc_msgSend(v25, "addObject:", v32);
        ++v28;
        v29 -= 16;
      }
      while (v29);
    }
    v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA658]), "initWithImage:", a2);
    WebCore::FloatRect::operator CGRect();
    objc_msgSend(v33, "setFrame:");
    if (objc_msgSend(v25, "count"))
      v34 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA568]), "initWithTextLineRects:", v25);
    else
      v34 = objc_alloc_init(MEMORY[0x1E0CEA568]);
    v35 = v34;
    if (a7)
      objc_msgSend(v34, "setBackgroundColor:", a7);
    if (a8)
      objc_msgSend(v35, "setVisiblePath:", a8);
    if (a9)
      objc_msgSend(a4, "addSubview:", v33);
    WebCore::FloatRect::operator CGRect();
    MidX = CGRectGetMidX(v42);
    WebCore::FloatRect::operator CGRect();
    v37 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA570]), "initWithContainer:center:", a4, MidX, CGRectGetMidY(v43));
    *a1 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA90]), "initWithView:parameters:target:", v33, v35, v37);
    if (v37)
      CFRelease(v37);
    if (v35)
      CFRelease(v35);
    if (v33)
      CFRelease(v33);
    if (v25)
      CFRelease(v25);
  }
  else
  {
LABEL_14:
    *a1 = 0;
  }
}

void sub_197276288(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::DragDropInteractionState::deliverDelayedDropPreview(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGFloat a;
  double v17;
  double v18;
  double v19;
  double v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int v25;
  int *v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  const CGRect *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  float32x2_t v41;
  int v42;
  int v43;
  float32x2_t v44;
  id v45;
  uint64_t v46;
  double v47;
  double v48;
  const void *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  const void **v56;
  const void *v57;
  const void **v58;
  int v59;
  const void *v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  const void *v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  const void **v73;
  const void *v74;
  const void **v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  const void *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int v94;
  double v95;
  double v96;
  _BYTE v98[32];
  uint64_t *v99;
  uint64_t *v100;
  CGAffineTransform v102;
  _QWORD v103[2];
  float32x2_t v104;
  float32x2_t v105;
  CGAffineTransform cf;
  uint64_t v107;
  CGRect v108;
  CGRect v109;

  *(double *)&v98[16] = a7;
  *(double *)&v98[24] = a8;
  *(double *)v98 = a5;
  *(double *)&v98[8] = a6;
  v107 = *MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(a3, "count");
  v11 = *((unsigned int *)a4 + 3);
  if (v10 == v11)
  {
    if ((_DWORD)v11)
    {
      v12 = 0;
      v93 = sel__setNeedsDropPreviewUpdate;
      v99 = (uint64_t *)(a1 + 424);
      v100 = (uint64_t *)(a1 + 416);
      do
      {
        v13 = objc_msgSend(a3, "objectAtIndex:", v12, v93);
        if (v12 >= *((unsigned int *)a4 + 3))
        {
          __break(0xC471u);
          return;
        }
        v14 = v13;
        v15 = *a4;
        WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::get<WTF::RetainPtr<UIDragItem>>(v100, v13, (uint64_t **)&cf);
        a = cf.a;
        cf.a = 0.0;
        if (a != 0.0)
          CFRelease(*(CFTypeRef *)&a);
        objc_msgSend(*(id *)&a, "size");
        v19 = v18;
        if (v18 <= 0.0 || *(_QWORD *)&a == 0)
          goto LABEL_79;
        v21 = v17;
        if (v17 <= 0.0)
          goto LABEL_79;
        v22 = v15 + 16 * v12;
        v23 = (int *)(v22 + 8);
        if (*(int *)(v22 + 8) < 1)
          goto LABEL_79;
        v25 = *(_DWORD *)(v22 + 12);
        v24 = (int *)(v22 + 12);
        if (v25 < 1)
          goto LABEL_79;
        v26 = (int *)(v15 + 16 * v12);
        WebCore::IntRect::operator CGRect();
        v109.origin.x = v27;
        v109.origin.y = v28;
        v109.size.width = v29;
        v109.size.height = v30;
        v108 = CGRectIntersection(*(CGRect *)v98, v109);
        cf.a = v108.origin.x;
        cf.b = v108.origin.y;
        cf.c = v108.size.width;
        cf.d = v108.size.height;
        v103[0] = WebCore::enclosingIntRect((WebCore *)&cf, v31);
        v103[1] = v32;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v104, (const WebCore::IntRect *)v103);
        if (v105.f32[0] > 0.0)
        {
          LODWORD(v33) = v105.i32[1];
          if (v105.f32[1] > 0.0)
          {
            objc_msgSend((id)objc_msgSend(*(id *)&a, "view", v33), "bounds");
            v95 = v35;
            v96 = v34;
            v37 = v36;
            v39 = v38;
            v40 = *v24;
            v41 = v104;
            v42 = v26[1];
            v94 = *v26;
            v43 = *v23;
            memset(&cf, 0, sizeof(cf));
            v44 = v105;
            CGAffineTransformMakeScale(&cf, (double)*v23 / v19, (double)*v24 / v21);
            v45 = objc_alloc(MEMORY[0x1E0CEA570]);
            v103[0] = vadd_f32(v104, vmul_f32(v105, (float32x2_t)0x3F0000003F000000));
            WebCore::FloatPoint::operator CGPoint();
            v102 = cf;
            v46 = objc_msgSend(v45, "initWithContainer:center:transform:", a2, &v102);
            v47 = v39 * (float)((float)(v41.f32[1] - (float)v42) / (float)v40);
            v48 = v37 * (float)((float)(v41.f32[0] - (float)v94) / (float)v43);
            objc_msgSend((id)objc_msgSend(*(id *)&a, "parameters"), "setVisiblePath:", objc_msgSend(MEMORY[0x1E0CEA390], "bezierPathWithRect:", v96 + v48, v95 + v47, v37 - (v48 + v37 * (float)((float)((float)(v43 + v94) - (float)(v41.f32[0] + v44.f32[0])) / (float)v43)), v39 - (v47 + v39 * (float)((float)((float)(v40 + v42) - (float)(v41.f32[1] + v44.f32[1])) / (float)v40))));
            if (v14)
              CFRetain((CFTypeRef)v14);
            v49 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA90]), "initWithView:parameters:target:", objc_msgSend(*(id *)&a, "view"), objc_msgSend(*(id *)&a, "parameters"), v46);
            v50 = *v99;
            if (*v99
              || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v99, 0), (v50 = *v99) != 0))
            {
              v51 = *(_DWORD *)(v50 - 8);
            }
            else
            {
              v51 = 0;
            }
            v52 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = (const void **)(v50 + 16 * v55);
            v57 = *v56;
            if (!*v56)
            {
LABEL_29:
              v60 = v56[1];
              *v56 = (const void *)v14;
              v56[1] = v49;
              if (v60)
                CFRelease(v60);
              v61 = *v99;
              if (*v99)
                v62 = *(_DWORD *)(v61 - 12) + 1;
              else
                v62 = 1;
              *(_DWORD *)(v61 - 12) = v62;
              v84 = *v99;
              if (*v99)
                v85 = *(_DWORD *)(v84 - 12);
              else
                v85 = 0;
              v86 = (*(_DWORD *)(v84 - 16) + v85);
              v87 = *(unsigned int *)(v84 - 4);
              if (v87 > 0x400)
              {
                if (v87 > 2 * v86)
                  goto LABEL_73;
              }
              else if (3 * v87 > 4 * v86)
              {
                goto LABEL_73;
              }
              WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v99, v56);
              goto LABEL_73;
            }
            v58 = 0;
            v59 = 1;
            while (v57 != (const void *)v14)
            {
              if (v57 == (const void *)-1)
                v58 = v56;
              v55 = (v55 + v59) & v51;
              v56 = (const void **)(v50 + 16 * v55);
              v57 = *v56;
              ++v59;
              if (!*v56)
              {
                if (v58)
                {
                  *v58 = 0;
                  v58[1] = 0;
                  --*(_DWORD *)(*v99 - 16);
                  v56 = v58;
                }
                goto LABEL_29;
              }
            }
            if (v49)
              CFRelease(v49);
            if (v14)
              CFRelease((CFTypeRef)v14);
LABEL_73:
            if (byte_1ECE72C23 == 1)
            {
              if (byte_1ECE72C22)
                goto LABEL_75;
            }
            else
            {
              v89 = objc_msgSend(MEMORY[0x1E0CEA558], "instancesRespondToSelector:", v93);
              byte_1ECE72C22 = v89;
              byte_1ECE72C23 = 1;
              if (v89)
LABEL_75:
                objc_msgSend((id)v14, "_setNeedsDropPreviewUpdate");
            }
            if (v46)
            {
              v83 = (const void *)v46;
              goto LABEL_78;
            }
            goto LABEL_79;
          }
        }
        v63 = objc_alloc(MEMORY[0x1E0CEA570]);
        LODWORD(cf.a) = *(_DWORD *)(v15 + 16 * v12) + *v23 / 2;
        HIDWORD(cf.a) = *(_DWORD *)(v15 + 16 * v12 + 4) + *v24 / 2;
        WebCore::IntPoint::operator CGPoint();
        v64 = objc_msgSend(v63, "initWithContainer:center:", a2);
        if (v14)
          CFRetain((CFTypeRef)v14);
        v65 = (const void *)objc_msgSend(*(id *)&a, "retargetedPreviewWithTarget:", v64);
        v66 = v99;
        v67 = *v99;
        if (*v99
          || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v99, 0), v66 = v99, (v67 = *v99) != 0))
        {
          v68 = *(_DWORD *)(v67 - 8);
        }
        else
        {
          v68 = 0;
        }
        v69 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
        v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
        v72 = v68 & ((v71 >> 31) ^ v71);
        v73 = (const void **)(v67 + 16 * v72);
        v74 = *v73;
        if (*v73)
        {
          v75 = 0;
          v76 = 1;
          while (v74 != (const void *)v14)
          {
            if (v74 == (const void *)-1)
              v75 = v73;
            v72 = (v72 + v76) & v68;
            v73 = (const void **)(v67 + 16 * v72);
            v74 = *v73;
            ++v76;
            if (!*v73)
            {
              if (v75)
              {
                *v75 = 0;
                v75[1] = 0;
                --*(_DWORD *)(*v66 - 16);
                v73 = v75;
              }
              goto LABEL_46;
            }
          }
          if (v14)
            CFRelease((CFTypeRef)v14);
        }
        else
        {
LABEL_46:
          *v73 = (const void *)v14;
          WTF::GenericHashTraits<WTF::RetainPtr<UITargetedDragPreview>>::assignToEmpty<WTF::RetainPtr<UITargetedDragPreview>,UITargetedDragPreview*>(v73 + 1, v65);
          v77 = *v99;
          if (*v99)
            v78 = *(_DWORD *)(v77 - 12) + 1;
          else
            v78 = 1;
          *(_DWORD *)(v77 - 12) = v78;
          v79 = *v99;
          if (*v99)
            v80 = *(_DWORD *)(v79 - 12);
          else
            v80 = 0;
          v81 = (*(_DWORD *)(v79 - 16) + v80);
          v82 = *(unsigned int *)(v79 - 4);
          if (v82 <= 0x400)
          {
            if (3 * v82 > 4 * v81)
              goto LABEL_61;
LABEL_60:
            WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v99, v73);
            goto LABEL_61;
          }
          if (v82 <= 2 * v81)
            goto LABEL_60;
        }
LABEL_61:
        if (byte_1ECE72C23 == 1)
        {
          if (!byte_1ECE72C22)
            goto LABEL_64;
LABEL_63:
          objc_msgSend((id)v14, "_setNeedsDropPreviewUpdate");
          goto LABEL_64;
        }
        v88 = objc_msgSend(MEMORY[0x1E0CEA558], "instancesRespondToSelector:", v93);
        byte_1ECE72C22 = v88;
        byte_1ECE72C23 = 1;
        if (v88)
          goto LABEL_63;
LABEL_64:
        if (v64)
        {
          v83 = (const void *)v64;
LABEL_78:
          CFRelease(v83);
        }
LABEL_79:
        ++v12;
      }
      while (v12 < *((unsigned int *)a4 + 3));
    }
  }
  else
  {
    v90 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_ERROR))
    {
      v91 = objc_msgSend(a3, "count");
      v92 = *((unsigned int *)a4 + 3);
      LODWORD(cf.a) = 134218240;
      *(_QWORD *)((char *)&cf.a + 4) = v91;
      WORD2(cf.b) = 2048;
      *(_QWORD *)((char *)&cf.b + 6) = v92;
      _os_log_error_impl(&dword_196BCC000, v90, OS_LOG_TYPE_ERROR, "Failed to animate image placeholders: number of drag items (%tu) does not match number of placeholders (%tu)", (uint8_t *)&cf, 0x16u);
    }
  }
}

void sub_197276AC0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::DragDropInteractionState::previewForLifting(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  CFTypeRef cf;

  WebKit::DragDropInteractionState::createDragPreviewInternal(a1, a2, a3, a4, 0, a5, &cf);
  return (id)CFMakeCollectable(cf);
}

uint64_t WebKit::DragDropInteractionState::createDragPreviewInternal@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  Color *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  const void *v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;
  uint64_t v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  CFTypeRef v34;
  const Color *v35;
  CFTypeRef v36;
  CFTypeRef v37;
  WebCore::Image *v38;
  CFTypeRef v39;
  _DWORD *v40;
  _DWORD *v41;
  WTF *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  CFTypeRef v46[2];
  CFTypeRef cf[2];
  CFTypeRef v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  int v54;
  _DWORD *v55;
  _DWORD *v56;
  WebCore::Image *v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  TextIndicatorData v62;
  char v63;
  _BYTE v64[80];
  _DWORD *v65;
  _DWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "_privateLocalContext");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || (v15 = objc_msgSend((id)objc_msgSend(a2, "_privateLocalContext"), "integerValue"),
        (v16 = *(_DWORD *)(a1 + 412)) == 0))
  {
LABEL_6:
    LOBYTE(v59[0]) = 0;
    v70 = 0;
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(a1 + 400) + 168;
  v18 = 312 * v16;
  while (*(_QWORD *)(v17 + 136) != v15)
  {
    v17 += 312;
    v18 -= 312;
    if (!v18)
      goto LABEL_6;
  }
  v20 = *(_OWORD *)(v17 - 168);
  v21 = *(_OWORD *)(v17 - 152);
  v60 = *(_QWORD *)(v17 - 136);
  v59[0] = v20;
  v59[1] = v21;
  v22 = *(const void **)(v17 - 128);
  v61 = (uint64_t)v22;
  if (v22)
    CFRetain(v22);
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)&v62, v17 - 120);
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)v64, (const WebCore::Path *)v17);
  v23 = *(_DWORD **)(v17 + 80);
  if (v23)
    *v23 += 2;
  v65 = v23;
  v24 = *(_DWORD **)(v17 + 88);
  if (v24)
    *v24 += 2;
  v66 = v24;
  v25 = *(_OWORD *)(v17 + 96);
  v68 = *(_OWORD *)(v17 + 112);
  v67 = v25;
  v69 = *(_OWORD *)(v17 + 128);
  v70 = 1;
  if (*(_BYTE *)(a6 + 112))
  {
    WebKit::uiImageForImage((WebCore::DestinationColorSpace *)&v49, *(WebCore::Image **)(a6 + 88));
    v26 = *(unsigned __int8 *)(a6 + 112);
    if (*(_BYTE *)(a6 + 112))
    {
      v27 = v49;
      WebCore::cocoaColor((WebCore *)(a6 + 96), v14);
      WebKit::createTargetedDragPreview(cf, (uint64_t)v27, a3, a4, a6 + 16, a6 + 48, (uint64_t)v46[0], 0, a5);
      v28 = (id)CFMakeCollectable(cf[0]);
      *a7 = v28;
      if (v28)
        CFRetain(v28);
      v29 = v46[0];
      v46[0] = 0;
      if (v29)
        CFRelease(v29);
      if (v27)
        CFRelease(v27);
      return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, (WTF::StringImpl *)v14);
    }
    __break(1u);
LABEL_57:
    v43 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v14);
    }
LABEL_40:
    v38 = v57;
    v57 = 0;
    if (v38)
    {
      if (*((_DWORD *)v38 + 2) == 1)
        (*(void (**)(WebCore::Image *))(*(_QWORD *)v38 + 8))(v38);
      else
        --*((_DWORD *)v38 + 2);
    }
    v40 = v56;
    v56 = 0;
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
    v41 = v55;
    v55 = 0;
    if (v41)
    {
      if (v41[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      else
        --v41[2];
    }
    v42 = v52;
    if (v52)
    {
      v52 = 0;
      v53 = 0;
      WTF::fastFree(v42, v14);
    }
    return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, (WTF::StringImpl *)v14);
  }
  v30 = v61;
  if (!v61 || (v59[0] & 0x63) == 0)
  {
    if (v63 && (v59[0] & 0x1C) != 0)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)&v49, &v62);
      WebKit::uiImageForImage((WebCore::DestinationColorSpace *)cf, v57);
      v34 = cf[0];
      WebCore::cocoaColor((WebCore *)&v58, v35);
      WebKit::createTargetedDragPreview(v46, (uint64_t)v34, a3, a4, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)v48, 0, a5);
      v36 = (id)CFMakeCollectable(v46[0]);
      *a7 = v36;
      if (v36)
        CFRetain(v36);
      v37 = v48;
      v48 = 0;
      if (v37)
        CFRelease(v37);
      if (v34)
        CFRelease(v34);
      v26 = v58;
      if ((v58 & 0x8000000000000) == 0)
        goto LABEL_40;
      goto LABEL_57;
    }
LABEL_7:
    *a7 = 0;
    return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, (WTF::StringImpl *)v14);
  }
  if ((v59[0] & 0x20) != 0 && v64[72])
  {
    WebCore::Path::Path((WebCore::Path *)&v49, (const WebCore::Path *)v64);
    v31 = objc_msgSend(MEMORY[0x1E0CEA390], "bezierPathWithCGPath:", WebCore::Path::platformPath((WebCore::Path *)&v49));
    v32 = v61;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)cf, (const CGRect *)((char *)v59 + 8));
    v46[0] = 0;
    v46[1] = 0;
    WebKit::createTargetedDragPreview(&v48, v32, a3, a4, (uint64_t)cf, (uint64_t)v46, 0, v31, a5);
    v33 = (id)CFMakeCollectable(v48);
    *a7 = v33;
    if (v33)
      CFRetain(v33);
    if (v54 != -1)
      ((void (*)(CFTypeRef *, uint64_t *))off_1E34CD7E8[v54])(cf, &v50);
  }
  else
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v49, (const CGRect *)((char *)v59 + 8));
    cf[0] = 0;
    cf[1] = 0;
    WebKit::createTargetedDragPreview(v46, v30, a3, a4, (uint64_t)&v49, (uint64_t)cf, 0, 0, a5);
    v39 = (id)CFMakeCollectable(v46[0]);
    *a7 = v39;
    if (v39)
      CFRetain(v39);
  }
  return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, (WTF::StringImpl *)v14);
}

void sub_197277050(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, char a12, uint64_t a13, CFTypeRef cf, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,int a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef a35)
{
  if (a24 != -1)
    ((void (*)(char *, uint64_t *))off_1E34CD7E8[a24])(&a12, &a16);
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a30, a2);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::DragDropInteractionState::previewForCancelling(WebKit::DragDropInteractionState *this, UIDragItem *a2, UIView *a3, UIView *a4)
{
  void *v5;
  id v6;
  const void *v7;
  const void *v8;
  const void *v9;
  _BYTE v11[120];
  id v12;

  v11[0] = 0;
  v11[112] = 0;
  WebKit::DragDropInteractionState::createDragPreviewInternal((uint64_t)this, a2, a3, a4, 1, (uint64_t)v11, &v12);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v5);
  v6 = v12;
  v7 = (const void *)objc_msgSend(v12, "view");
  v8 = v7;
  if (v7)
    CFRetain(v7);
  v9 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v8;
  if (v9)
    CFRelease(v9);
  return (id)CFMakeCollectable(v6);
}

void sub_197277290(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::dragSessionWillRequestAdditionalItem(uint64_t a1, WTF::StringImpl *a2)
{
  void *v4;

  std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](a1 + 80, a2);
  v4 = _Block_copy(a2);
  _Block_release(*(const void **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = v4;
  _Block_release(0);
}

void sub_1972772FC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::clearStagedDragSource(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void **v3;
  __int128 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  const void *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  __int128 v15;
  _Unwind_Exception *v16;
  void *v17;
  const void *v18;

  if ((_DWORD)a2)
  {
    if (!*(_BYTE *)(a1 + 392))
    {
      v16 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, v17);
      v18 = *v3;
      *v3 = 0;
      if (v18)
        CFRelease(v18);
      _Unwind_Resume(v16);
    }
    v5 = (__int128 *)(a1 + 80);
    v6 = *(_DWORD *)(a1 + 412);
    if (v6 == *(_DWORD *)(a1 + 408))
    {
      WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::DragSourceState const&>(a1 + 400, (unint64_t)v5);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 400);
      v8 = v7 + 312 * v6;
      v9 = *v5;
      v10 = *(_OWORD *)(a1 + 96);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a1 + 112);
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      v11 = *(const void **)(a1 + 120);
      *(_QWORD *)(v8 + 40) = v11;
      if (v11)
        CFRetain(v11);
      std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)(v7 + 312 * v6 + 48), a1 + 128);
      std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)(v7 + 312 * v6 + 168), (const WebCore::Path *)(a1 + 248));
      v12 = *(_DWORD **)(a1 + 328);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(v7 + 312 * v6 + 248) = v12;
      v13 = *(_DWORD **)(a1 + 336);
      if (v13)
        *v13 += 2;
      v14 = v7 + 312 * v6;
      *(_QWORD *)(v14 + 256) = v13;
      v15 = *(_OWORD *)(a1 + 344);
      *(_OWORD *)(v14 + 280) = *(_OWORD *)(a1 + 360);
      *(_OWORD *)(v14 + 264) = v15;
      *(_OWORD *)(v14 + 296) = *(_OWORD *)(a1 + 376);
      ++*(_DWORD *)(a1 + 412);
    }
  }
  std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](a1 + 80, a2);
}

uint64_t WebKit::DragDropInteractionState::dropSessionDidEnterOrUpdate(_QWORD *a1, CFTypeRef cf)
{
  const void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (cf)
    CFRetain(cf);
  v4 = (const void *)a1[6];
  a1[6] = cf;
  if (v4)
    CFRelease(v4);
  result = WebCore::IntPoint::operator CGPoint();
  *a1 = v6;
  a1[1] = v7;
  return result;
}

void WebKit::DragDropInteractionState::stageDragItem(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef cf;
  _BYTE v28[120];
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;
  char v36;
  uint64_t v37;
  __int128 v38[19];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WebCore::IntPoint::operator CGPoint();
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(unsigned __int16 *)(a2 + 216);
  if (v8 <= 0x100)
    LOBYTE(v8) = 0;
  LOBYTE(v23) = v8;
  WebCore::IntRect::operator CGRect();
  *((_QWORD *)&v23 + 1) = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  cf = a3;
  if (a3)
    CFRetain(a3);
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v28, a2 + 8);
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)&v29, (const WebCore::Path *)(a2 + 128));
  v13 = *(_QWORD *)(a2 + 248);
  if (v13 && *(_DWORD *)(v13 + 4))
    v14 = WTF::StringImpl::operator NSString *();
  else
    v14 = 0;
  MEMORY[0x19AEABCC8](&v33, v14);
  v15 = *(_QWORD *)(a2 + 256);
  if (v15 && *(_DWORD *)(v15 + 4))
    v16 = WTF::URL::operator NSURL *();
  else
    v16 = 0;
  MEMORY[0x19AEABB18](&v34, v16);
  v35 = 1;
  v36 = *(_BYTE *)(a2 + 312);
  v37 = ++WebKit::DragDropInteractionState::stageDragItem(WebCore::DragItem const&,UIImage *)::currentDragSourceItemIdentifier;
  WebKit::DragSourceState::DragSourceState((uint64_t)v38, &v23);
  v39 = 1;
  std::__optional_storage_base<WebKit::DragSourceState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::DragSourceState,false>>(a1 + 80, v38);
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v17);
  v19 = v34;
  v34 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (v32)
  {
    if (v31 != -1)
      ((void (*)(char *, uint64_t *))off_1E34CD7E8[v31])(&v22, &v30);
    v31 = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v28, v18);
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
}

void sub_1972776C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  CFTypeRef v60;

  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a53, a2);
  v57 = *(WTF::StringImpl **)(v54 + 256);
  *(_QWORD *)(v54 + 256) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = *(WTF::StringImpl **)(v54 + 248);
  *(_QWORD *)(v54 + 248) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  if (a44)
  {
    v59 = *(unsigned int *)(v54 + 232);
    if ((_DWORD)v59 != -1)
      ((void (*)(char *, uint64_t *))off_1E34CD7E8[v59])(&a13, &a36);
    *(_DWORD *)(v54 + 232) = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v53, v56);
  v60 = cf;
  cf = 0;
  if (v60)
    CFRelease(v60);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::dragAndDropSessionsDidBecomeInactive(WebKit::DragDropInteractionState *this)
{
  void *v2;
  void (**v3)(_QWORD, _QWORD);
  void (**v4)(_QWORD);

  v2 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
  {
    objc_msgSend(v2, "removeFromSuperview");
    CFRelease(v2);
  }
  v3 = (void (**)(_QWORD, _QWORD))*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    v3[2](v3, MEMORY[0x1E0C9AA60]);
  _Block_release(v3);
  v4 = (void (**)(_QWORD))*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    v4[2](v4);
  _Block_release(v4);
}

void sub_197277814(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

id *WebKit::GestureRecognizerConsistencyEnforcer::GestureRecognizerConsistencyEnforcer(id *this, WKContentView *a2)
{
  WTF::RunLoop *inited;
  WTF::RunLoop *v4;

  *this = 0;
  inited = (WTF::RunLoop *)objc_initWeak(this, a2);
  v4 = (WTF::RunLoop *)WTF::RunLoop::main(inited);
  WTF::RunLoop::Timer::Timer<WebKit::GestureRecognizerConsistencyEnforcer>((WTF::RunLoop::TimerBase *)(this + 1), v4, (uint64_t)this, (uint64_t)WebKit::GestureRecognizerConsistencyEnforcer::timerFired, 0);
  this[5] = 0;
  return this;
}

void sub_197277888(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebKit::GestureRecognizerConsistencyEnforcer::timerFired(id *this)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  void *v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (objc_loadWeak(this))
  {
    WeakRetained = objc_loadWeakRetained(this);
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v4 = (void *)objc_msgSend(WeakRetained, "deferringGestures");
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v18 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          if (!objc_msgSend(v8, "state") && objc_msgSend(v8, "isEnabled"))
            objc_msgSend(v3, "addObject:", v8);
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
      }
      while (v5);
    }
    if (!objc_msgSend(v3, "count")
      || (unint64_t)objc_msgSend((id)objc_msgSend(WeakRetained, "touchEventGestureRecognizer"), "state") < 3)
    {
      goto LABEL_22;
    }
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v9 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v23, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v14;
      do
      {
        for (j = 0; j != v9; ++j)
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * j), "setState:", 3);
        }
        v9 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v23, 16);
      }
      while (v9);
    }
    v12 = qword_1ECE71A00;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v3;
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "Touch event gesture recognizer failed to reset after ending gesture deferral: %@", buf, 0xCu);
      if (!WeakRetained)
        return;
    }
    else
    {
LABEL_22:
      if (!WeakRetained)
        return;
    }
    CFRelease(WeakRetained);
  }
}

void sub_197277AD4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer<WebKit::GestureRecognizerConsistencyEnforcer>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34CD908;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a3;
  WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v10;
  return a1;
}

void sub_197277B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::GestureRecognizerConsistencyEnforcer::~GestureRecognizerConsistencyEnforcer(WebKit::GestureRecognizerConsistencyEnforcer *this, void *a2)
{
  const void **v3;
  uint64_t v4;

  v3 = (const void **)*((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 1) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::GestureRecognizerConsistencyEnforcer *)((char *)this + 8));
  objc_destroyWeak((id *)this);
}

void WebKit::GestureRecognizerConsistencyEnforcer::beginTracking(WebKit::GestureRecognizerConsistencyEnforcer *this, WKDeferringGestureRecognizer *a2)
{
  uint64_t *v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  WTF::RunLoop::TimerBase::stop((WebKit::GestureRecognizerConsistencyEnforcer *)((char *)this + 8));
  v4 = (uint64_t *)((char *)this + 40);
  cf = a2;
  if (a2)
    CFRetain(a2);
  WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::add(v4, &cf, (uint64_t)&v6);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_197277C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::GestureRecognizerConsistencyEnforcer::endTracking(WebKit::GestureRecognizerConsistencyEnforcer *this, WKDeferringGestureRecognizer *a2)
{
  uint64_t *v3;
  const void **v4;
  uint64_t v5;
  const void **v6;
  WKDeferringGestureRecognizer *v7;

  v3 = (uint64_t *)((char *)this + 40);
  v7 = a2;
  v4 = (const void **)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>((uint64_t *)this + 5, &v7);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (const void **)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v6 = 0;
  }
  if (v6 != v4)
  {
    WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::remove(v3, v4);
    v5 = *v3;
  }
  if (!v5 || !*(_DWORD *)(v5 - 12))
    WTF::RunLoop::TimerBase::start();
}

const void **WebKit::GestureRecognizerConsistencyEnforcer::reset(WebKit::GestureRecognizerConsistencyEnforcer *this)
{
  void *v2;
  const void **result;

  WTF::RunLoop::TimerBase::stop((WebKit::GestureRecognizerConsistencyEnforcer *)((char *)this + 8));
  result = (const void **)*((_QWORD *)this + 5);
  if (result)
  {
    *((_QWORD *)this + 5) = 0;
    return (const void **)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(result, v2);
  }
  return result;
}

void `non-virtual thunk to'WebKit::PageClientImpl::~PageClientImpl(WebKit::PageClientImpl *this)
{
  WebKit::PageClientImpl::~PageClientImpl((WebKit::PageClientImpl *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;

  WebKit::PageClientImpl::~PageClientImpl((WebKit::PageClientImpl *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

void WebKit::PageClientImpl::requestScroll(uint64_t a1, _DWORD *a2, _QWORD *a3, uint64_t a4)
{
  id WeakRetained;
  double v8;
  double v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  LODWORD(v8) = *a2;
  LODWORD(v9) = a2[1];
  objc_msgSend(WeakRetained, "_scrollToContentScrollPosition:scrollOrigin:animated:", *a3, a4, v8, v9);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197277DE8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::viewScrollPosition(id *this)
{
  id WeakRetained;
  void *v2;
  CGFloat v3;
  CGFloat v4;
  CGPoint v6;
  float v7;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v2 = (void *)objc_msgSend(WeakRetained, "_scroller");
  if (WeakRetained)
    CFRelease(WeakRetained);
  if (!v2)
    return 0.0;
  objc_msgSend(v2, "contentOffset");
  v6.x = v3;
  v6.y = v4;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v7, &v6);
  return v7;
}

void sub_197277E6C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::viewIsBecomingVisible(id *this)
{
  id WeakRetained;
  const void *v2;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v2 = WeakRetained;
    -[WKWebView _updatePageLoadObserverState]((uint64_t)WeakRetained);
    CFRelease(v2);
  }
}

void sub_197277EC0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::processDidExit(id *this)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_processDidExit");
  if (WeakRetained)
    CFRelease(WeakRetained);
  v3 = objc_loadWeakRetained(this + 2);
  objc_msgSend(v3, "_processDidExit");
  if (v3)
    CFRelease(v3);
}

void sub_197277F30(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::processWillSwap(id *this)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_processWillSwap");
  if (WeakRetained)
    CFRelease(WeakRetained);
  v3 = objc_loadWeakRetained(this + 2);
  objc_msgSend(v3, "_processWillSwap");
  if (v3)
    CFRelease(v3);
}

void sub_197277FA8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didRelaunchProcess(id *this)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didRelaunchProcess");
  if (WeakRetained)
    CFRelease(WeakRetained);
  v3 = objc_loadWeakRetained(this + 2);
  objc_msgSend(v3, "_didRelaunchProcess");
  if (v3)
    CFRelease(v3);
}

void sub_197278020(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCreateContextInWebProcessForVisibilityPropagation(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_webProcessDidCreateContextForVisibilityPropagation");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278078(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::createVisibilityPropagationView(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v2 = objc_msgSend(WeakRetained, "_createVisibilityPropagationView");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_1972780CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::gpuProcessDidExit(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_gpuProcessDidExit");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return WebKit::PageClientImplCocoa::gpuProcessDidExit(this);
}

void sub_197278120(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didNotHandleTapAsClick(id *this, const WebCore::IntPoint *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didNotHandleTapAsClick:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278180(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didHandleTapAsHover(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didHandleTapAsHover");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972781D4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCompleteSyntheticClick(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didCompleteSyntheticClick");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278228(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::decidePolicyForGeolocationPermissionRequest(uint64_t a1, uint64_t a2, const WebKit::FrameInfoData *a3, uint64_t *a4)
{
  id WeakRetained;
  const void *v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef cf;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = (void *)objc_msgSend(*((id *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(*((_QWORD *)WeakRetained + 53) + 48) + 24))+ 1), "_geolocationProvider");
    WebKit::FrameInfoData::FrameInfoData(&v14, a3);
    v13 = *a4;
    *a4 = 0;
    objc_msgSend(v8, "decidePolicyForGeolocationRequestFromOrigin:completionHandler:view:", &v14, &v13, v7);
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v19;
    v19 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v18 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E34CD860[v18])(&v13, &v17);
    v18 = -1;
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v15);
    CFRelease(v7);
  }
}

void sub_197278398(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf,uint64_t a37,uint64_t a38,uint64_t a39,int a40,WTF::StringImpl *a41)
{
  const void *v41;
  uint64_t v43;
  WTF::StringImpl *v44;
  CFTypeRef v45;

  v43 = a10;
  a10 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = a41;
  a41 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (a40 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E34CD860[a40])(&a10, &a37);
  a40 = -1;
  v45 = cf;
  cf = 0;
  if (v45)
    CFRelease(v45);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a12);
  CFRelease(v41);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didFailProvisionalLoadForMainFrame(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_hidePasswordView");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278480(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::disableDoubleTapGesturesDuringTapIfNecessary(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_disableDoubleTapGesturesDuringTapIfNecessary:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972784DC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::handleSmartMagnificationInformationForPotentialTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleSmartMagnificationInformationForPotentialTap:renderRect:fitEntireRect:viewportMinimumScale:viewportMaximumScale:nodeIsRootLevel:", a2, a3, a4, a5, a6, a7);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278584(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::setCursor(id *this, const WebCore::Cursor *a2)
{
  uint64_t result;

  result = WebKit::PageClientImpl::isViewWindowActive(this);
  if ((_DWORD)result)
    return WebCore::Cursor::setAsPlatformCursor(a2);
  return result;
}

void WebKit::PageClientImpl::registerEditCommand(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  WKEditCommand *v6;
  id WeakRetained;
  void *v8;
  char **v9;
  WTF::StringImpl *v10;

  v5 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 32);
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = -[WKEditCommand initWithWebEditCommandProxy:]([WKEditCommand alloc], "initWithWebEditCommandProxy:", a2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)objc_msgSend(WeakRetained, "undoManagerForWebView");
  if (WeakRetained)
    CFRelease(WeakRetained);
  v9 = &selRef_undoEditing_;
  if (a3)
    v9 = &selRef_redoEditing_;
  objc_msgSend(v8, "registerUndoWithTarget:selector:object:", *(_QWORD *)(a1 + 48), *v9, v6);
  if (v5 && *((_DWORD *)v5 + 1))
    objc_msgSend(v8, "setActionName:", WTF::StringImpl::operator NSString *());
  if (v6)
    CFRelease(v6);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v10);
    else
      *(_DWORD *)v5 -= 2;
  }
}

void sub_1972786E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  const void *v3;
  const void *v4;

  if (v4)
  {
    CFRelease(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  CFRelease(v3);
  if (!v2)
    goto LABEL_10;
LABEL_7:
  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
LABEL_10:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::canUndoRedo(uint64_t a1, char a2)
{
  id WeakRetained;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if ((a2 & 1) != 0)
    v5 = objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "canRedo");
  else
    v5 = objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "canUndo");
  v6 = v5;
  if (v4)
    CFRelease(v4);
  return v6;
}

void sub_1972787A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::executeUndoRedo(uint64_t a1, char a2)
{
  id WeakRetained;
  const void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if ((a2 & 1) != 0)
    objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "redo");
  else
    objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "undo");
  if (v4)
    CFRelease(v4);
}

void sub_197278820(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::accessibilityWebProcessTokenReceived(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  const void *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
  objc_msgSend(WeakRetained, "_setAccessibilityWebProcessToken:", v6);
  if (v6)
    CFRelease(v6);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972788BC(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::interpretKeyEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = objc_msgSend(WeakRetained, "_interpretKeyEvent:isCharEvent:", *(_QWORD *)(a2 + 88), a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v6;
}

void sub_19727893C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::positionInformationDidChange(id *this, const InteractionInformationAtPosition *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_positionInformationDidChange:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278998(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::saveImageToLibrary(uint64_t a1, WebCore::SharedBuffer **a2)
{
  CFTypeRef cf;

  WebCore::SharedBuffer::createNSData(*a2);
  UIImageDataWriteToSavedPhotosAlbum();
  if (cf)
    CFRelease(cf);
}

void sub_197278A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::executeSavedCommandBySelector(WebKit::PageClientImpl *this, const WTF::String *a2)
{
  return 0;
}

void WebKit::PageClientImpl::selectionDidChange(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_selectionChanged");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278A60(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::assistiveTechnologyMakeFirstResponder(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "becomeFirstResponder");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278AC0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::convertToDeviceSpace(WebKit::PageClientImpl *this, const FloatRect *a2)
{
  return a2->m_location.m_x;
}

float WebKit::PageClientImpl::convertToUserSpace(WebKit::PageClientImpl *this, const FloatRect *a2)
{
  return a2->m_location.m_x;
}

uint64_t WebKit::PageClientImpl::screenToRootView(id *this, const WebCore::IntPoint *a2)
{
  id WeakRetained;
  CGFloat v3;
  CGFloat v4;
  CGPoint v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::IntPoint::operator CGPoint();
  objc_msgSend(WeakRetained, "convertPoint:fromView:", 0);
  v6.x = v3;
  v6.y = v4;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v7, &v6);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v7;
}

void sub_197278B58(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::rootViewToScreen(id *this, const WebCore::IntRect *a2)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CGRect *v7;
  uint64_t v8;
  _QWORD v10[4];

  WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::IntRect::operator CGRect();
  objc_msgSend(WeakRetained, "convertRect:toView:", 0);
  v10[0] = v3;
  v10[1] = v4;
  v10[2] = v5;
  v10[3] = v6;
  v8 = WebCore::enclosingIntRect((WebCore *)v10, v7);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v8;
}

void sub_197278BE8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::accessibilityScreenToRootView(id *this, const WebCore::IntPoint *a2)
{
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  id WeakRetained;
  CGFloat v8;
  CGFloat v9;
  CGPoint v11;
  uint64_t v12;

  WebCore::IntPoint::operator CGPoint();
  v4 = v3;
  v6 = v5;
  v11.x = v3;
  v11.y = v5;
  WeakRetained = objc_loadWeakRetained(this + 5);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "accessibilityConvertPointFromSceneReferenceCoordinates:", v4, v6);
    v11.x = v8;
    v11.y = v9;
  }
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v12, &v11);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v12;
}

void sub_197278C8C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::relayAccessibilityNotification(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id WeakRetained;
  const __CFString *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*a2)
      v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "accessibilityRelayNotification:notificationData:", v6, *a3);
  }
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278D2C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::rootViewToAccessibilityScreen(id *this, const WebCore::IntRect *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id WeakRetained;
  const CGRect *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v19;
  double v20;
  double v21;
  double v22;

  WebCore::IntRect::operator CGRect();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v19 = v3;
  v20 = v5;
  v21 = v7;
  v22 = v9;
  WeakRetained = objc_loadWeakRetained(this + 5);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "accessibilityConvertRectToSceneReferenceCoordinates:", v4, v6, v8, v10, *(_QWORD *)&v19, *(_QWORD *)&v20, *(_QWORD *)&v21, *(_QWORD *)&v22);
    v19 = v13;
    v20 = v14;
    v21 = v15;
    v22 = v16;
  }
  v17 = WebCore::enclosingIntRect((WebCore *)&v19, v12);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v17;
}

void sub_197278E00(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneWithKeyEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didHandleKeyEvent:eventWasHandled:", *(_QWORD *)(a2 + 88), a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278E74(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneWithTouchEvent(id *this, const WebKit::NativeWebTouchEvent *a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_touchEvent:preventsNativeGestures:", a2, a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278EE4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneDeferringTouchStart(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_doneDeferringTouchStart:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278F40(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneDeferringTouchMove(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_doneDeferringTouchMove:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278F9C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneDeferringTouchEnd(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_doneDeferringTouchEnd:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197278FF8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  id WeakRetained;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WTF::URL::operator NSURL *();
  if (*a4)
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E351F1B8;
  if (*a5)
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  objc_msgSend(WeakRetained, "requestTextRecognition:imageData:sourceLanguageIdentifier:targetLanguageIdentifier:completionHandler:", v11, a3, v12, v13, a6);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972790D0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::dataOwnerForPasteboard(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = objc_msgSend(WeakRetained, "_dataOwnerForPasteboard:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v4;
}

void sub_19727912C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::createPopupMenuProxy(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::PageClientImpl::setTextIndicator(uint64_t a1, _DWORD **a2)
{
  id WeakRetained;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = *a2;
  *v4 = **a2 + 1;
  v6 = v4;
  objc_msgSend(WeakRetained, "setUpTextIndicator:", &v6);
  v5 = v6;
  v6 = 0;
  if (v5)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v5);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972791B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  const void *v10;

  if (a10)
    WTF::RefCounted<WebCore::TextIndicator>::deref(a10);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::clearTextIndicator(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "clearTextIndicator:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279220(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::setTextIndicatorAnimationProgress(id *this, float a2)
{
  id WeakRetained;
  double v4;

  WeakRetained = objc_loadWeakRetained(this + 5);
  *(float *)&v4 = a2;
  objc_msgSend(WeakRetained, "setTextIndicatorAnimationProgress:", v4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279288(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::makeViewBlank(id *this, int a2)
{
  id WeakRetained;
  void *v4;
  double v5;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v4 = (void *)objc_msgSend(WeakRetained, "layer");
  *(float *)&v5 = (float)(a2 ^ 1u);
  objc_msgSend(v4, "setOpacity:", v5);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972792F0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showSafeBrowsingWarning(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id WeakRetained;
  const void *v6;
  uint64_t v7;
  _BYTE v8[40];
  int v9;
  char v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    objc_msgSend(WeakRetained, "_showSafeBrowsingWarning:completionHandler:", a2, a3);
    CFRelease(v6);
  }
  else
  {
    v8[0] = 0;
    v9 = 0;
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9 != -1)
      ((void (*)(char *, _BYTE *))off_1E34CD870[v9])(&v10, v8);
  }
}

void sub_1972793C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E34CD870[a15])(v16 - 33, &a10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PageClientImpl::didPerformDictionaryLookup(id *this, const WebCore::DictionaryPopupInfo *a2)
{
  objc_loadWeak(this + 5);
  WebCore::DictionaryLookup::showPopup();
  return 0;
}

void sub_1972794B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::acceleratedCompositingRootLayer(WebKit::PageClientImpl *this)
{
  return 0;
}

void WebKit::PageClientImpl::takeViewSnapshot(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id WeakRetained;
  const void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_takeViewSnapshot");
    CFRelease(v4);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_197279554(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::commitPotentialTapFailed(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_commitPotentialTapFailed");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972795A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didGetTapHighlightGeometries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id WeakRetained;
  uint64_t v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  LOBYTE(v17) = a9;
  objc_msgSend(WeakRetained, "_didGetTapHighlightForRequest:color:quads:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius:nodeHasBuiltInClickHandling:", a2, a3, a4, a5, a6, a7, a8, v17);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279678(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::couldNotRestorePageState(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_couldNotRestorePageState");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972796CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::restorePageState(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, _DWORD *a5, double a6)
{
  id WeakRetained;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  LODWORD(v12) = *a4;
  LODWORD(v13) = a4[1];
  LODWORD(v14) = *a5;
  LODWORD(v15) = a5[1];
  LODWORD(v16) = a5[2];
  LODWORD(v17) = a5[3];
  objc_msgSend(WeakRetained, "_restorePageScrollPosition:scrollOrigin:previousObscuredInset:scale:", a2, a3, v12, v13, v14, v15, v16, v17, a6);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279770(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::restorePageCenterAndScale(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  objc_msgSend(WeakRetained, "_restorePageStateToUnobscuredCenter:scale:", a2, a3, a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972797F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::elementDidFocus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5, API::Object *this)
{
  id WeakRetained;
  CFTypeRef v12;
  CFTypeRef cf;

  if (this)
    API::Object::toNSObject(this, &cf);
  else
    cf = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:", a2, a3, a4, a5, cf);
  if (WeakRetained)
    CFRelease(WeakRetained);
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
}

void sub_1972798A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::updateInputContextAfterBlurringAndRefocusingElement(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_updateInputContextAfterBlurringAndRefocusingElement");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279914(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::updateFocusedElementInformation(id *this, const FocusedElementInformation *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_updateFocusedElementInformation:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279970(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isFocusingElement(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v2 = objc_msgSend(WeakRetained, "isFocusingElement");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_1972799C4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::elementDidBlur(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_elementDidBlur");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279A18(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::focusedElementDidChangeInputMode(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didUpdateInputMode:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279A74(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didUpdateEditorState(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didUpdateEditorState");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279AC8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showPlaybackTargetPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id WeakRetained;
  const __CFString *v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*a5)
    v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E351F1B8;
  objc_msgSend(WeakRetained, "_showPlaybackTargetPicker:fromRect:routeSharingPolicy:routingContextUID:", a2, a3, a4, v10);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279B70(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::handleRunOpenPanel(id *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, const FrameInfoData *a4, OpenPanelParameters *a5, WebOpenPanelResultListenerProxy *a6)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_showRunOpenPanel:frameInfo:resultListener:", a5, a4, a6);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return 1;
}

void sub_197279BE0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::showShareSheet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  _BYTE v7[20];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7[0] = 0;
  v7[16] = 0;
  objc_msgSend(WeakRetained, "_showShareSheet:inRect:completionHandler:", a2, v7, a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return 1;
}

void sub_197279C5C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showContactPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_showContactPicker:completionHandler:", a2, a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279CCC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showInspectorHighlight(id *this, const InspectorOverlayHighlight *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_showInspectorHighlight:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279D28(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::hideInspectorHighlight(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_hideInspectorHighlight");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279D7C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showInspectorIndication(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "setShowingInspectorIndication:", 1);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279DD4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::hideInspectorIndication(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "setShowingInspectorIndication:", 0);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279E2C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::enableInspectorNodeSearch(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_enableInspectorNodeSearch");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279E80(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::disableInspectorNodeSearch(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_disableInspectorNodeSearch");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279ED4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::enterFullScreen(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  v2 = (void *)objc_msgSend(WeakRetained, "fullScreenWindowController");
  WebCore::FloatSize::operator CGSize();
  objc_msgSend(v2, "enterFullScreen:");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279F40(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::PageClientImpl::enterFullScreen(uint64_t a1)
{
  WebKit::PageClientImpl::enterFullScreen(a1 - 32);
}

void WebKit::PageClientImpl::exitFullScreen(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "exitFullScreen");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197279FA0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::PageClientImpl::exitFullScreen(id *this)
{
  WebKit::PageClientImpl::exitFullScreen(this - 4);
}

uint64_t WebKit::PageClientImpl::lockFullscreenOrientation(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v4;
  uint64_t v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  v4 = (void *)objc_msgSend(WeakRetained, "fullScreenWindowController");
  if ((a2 - 1) > 2)
    v5 = 2;
  else
    v5 = qword_1978D02D8[(char)(a2 - 1)];
  objc_msgSend(v4, "setSupportedOrientations:", v5);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return 1;
}

void sub_19727A024(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebKit::PageClientImpl::lockFullscreenOrientation(uint64_t a1, int a2)
{
  WebKit::PageClientImpl::lockFullscreenOrientation(a1 - 32, a2);
  return 1;
}

void WebKit::PageClientImpl::unlockFullscreenOrientation(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "resetSupportedOrientations");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A098(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::PageClientImpl::unlockFullscreenOrientation(id *this)
{
  WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4);
}

void WebKit::PageClientImpl::beganEnterFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  id WeakRetained;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v4 = (void *)objc_msgSend(WeakRetained, "fullScreenWindowController");
  WebCore::IntRect::operator CGRect();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  WebCore::IntRect::operator CGRect();
  objc_msgSend(v4, "beganEnterFullScreenWithInitialFrame:finalFrame:", v6, v8, v10, v12, v13, v14, v15, v16);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A16C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::PageClientImpl::beganEnterFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  WebKit::PageClientImpl::beganEnterFullScreen(this - 4, a2, a3);
}

void WebKit::PageClientImpl::beganExitFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  id WeakRetained;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v4 = (void *)objc_msgSend(WeakRetained, "fullScreenWindowController");
  WebCore::IntRect::operator CGRect();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  WebCore::IntRect::operator CGRect();
  objc_msgSend(v4, "beganExitFullScreenWithInitialFrame:finalFrame:", v6, v8, v10, v12, v13, v14, v15, v16);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A240(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::PageClientImpl::beganExitFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  WebKit::PageClientImpl::beganExitFullScreen(this - 4, a2, a3);
}

void WebKit::PageClientImpl::didFinishLoadingDataForCustomContentProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;
  const void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  v8 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a3, a4);
  objc_msgSend(WeakRetained, "_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:data:", a2, v8);
  if (v8)
    CFRelease(v8);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A2E8(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollViewWillStartPanGesture(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "scrollViewWillStartPanOrPinchGesture");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A350(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollViewDidScroll(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_didScroll");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A3A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollWillStartScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_scrollingNodeScrollingWillBegin:", a2, a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A414(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollDidEndScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_scrollingNodeScrollingDidEnd:", a2, a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A484(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::navigationGestureDidBegin(id *this)
{
  WebKit::NavigationState **WeakRetained;
  WebKit::NavigationState **v2;
  WebKit::WebPageProxy *v3;
  id *v4;

  WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_navigationGestureDidBegin");
    v4 = (id *)WebKit::NavigationState::fromWebPage(v2[53], v3);
    if (v4)
      WebKit::NavigationState::navigationGestureDidBegin(v4);
    CFRelease(v2);
  }
}

void sub_19727A4F0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::navigationGestureWillEnd(id *this, int a2, WebKit::WebBackForwardListItem *a3)
{
  WebKit::NavigationState **WeakRetained;
  WebKit::WebPageProxy *v6;
  WebKit::NavigationState **v7;
  id *v8;

  WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = (id *)WebKit::NavigationState::fromWebPage(WeakRetained[53], v6);
    if (v8)
      WebKit::NavigationState::navigationGestureWillEnd(v8, a2, a3);
    CFRelease(v7);
  }
}

void sub_19727A574(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::navigationGestureDidEnd(id *this, int a2, WebKit::WebBackForwardListItem *a3)
{
  WebKit::NavigationState **WeakRetained;
  WebKit::WebPageProxy *v6;
  WebKit::NavigationState **v7;
  id *v8;

  WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = (id *)WebKit::NavigationState::fromWebPage(WeakRetained[53], v6);
    if (v8)
      WebKit::NavigationState::navigationGestureDidEnd(v8, a2, a3);
    objc_msgSend(v7, "_navigationGestureDidEnd");
    CFRelease(v7);
  }
}

void sub_19727A5FC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::navigationGestureDidEnd(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_navigationGestureDidEnd");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A650(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::willRecordNavigationSnapshot(id *this, WebKit::WebBackForwardListItem *a2)
{
  WebKit::NavigationState **WeakRetained;
  WebKit::WebPageProxy *v4;
  WebKit::NavigationState **v5;
  id *v6;

  WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = (id *)WebKit::NavigationState::fromWebPage(WeakRetained[53], v4);
    if (v6)
      WebKit::NavigationState::willRecordNavigationSnapshot(v6, a2);
    CFRelease(v5);
  }
}

void sub_19727A6C0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didRemoveNavigationGestureSnapshot(id *this)
{
  WebKit::NavigationState **WeakRetained;
  WebKit::WebPageProxy *v2;
  WebKit::NavigationState **v3;
  id *v4;

  WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = (id *)WebKit::NavigationState::fromWebPage(WeakRetained[53], v2);
    if (v4)
      WebKit::NavigationState::navigationGestureSnapshotWasRemoved(v4);
    CFRelease(v3);
  }
}

void sub_19727A724(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didFinishNavigation(id *this, Navigation *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_didFinishNavigation:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A77C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didFailNavigation(id *this, Navigation *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_didFailNavigation:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A7D8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didSameDocumentNavigationForMainFrame(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  objc_msgSend(WeakRetained, "_didSameDocumentNavigationForMainFrame:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A834(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didChangeBackgroundColor(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_updateScrollViewBackground");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A888(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::videoControlsManagerDidChange(id *this)
{
  id WeakRetained;

  WebKit::PageClientImplCocoa::videoControlsManagerDidChange(this);
  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_videoControlsManagerDidChange");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727A8E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::createValidationBubble@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id Weak;
  uint64_t v8;
  uint64_t result;

  Weak = objc_loadWeak((id *)(a1 + 40));
  v8 = WTF::fastMalloc((WTF *)0x48);
  result = MEMORY[0x19AEAF61C](v8, Weak, a2, a3);
  *a4 = v8;
  return result;
}

void sub_19727A960(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::createColorPicker(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

unsigned int *WebKit::PageClientImpl::createDataListSuggestionsDropdown@<X0>(id *this@<X0>, WebKit::WebPageProxy *a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebPageProxy *Weak;
  unsigned int *result;
  uint64_t v7;

  Weak = (WebKit::WebPageProxy *)objc_loadWeak(this + 5);
  result = WebKit::WebDataListSuggestionsDropdownIOS::create(a2, Weak, &v7);
  *a3 = v7;
  return result;
}

void WebKit::PageClientImpl::createDateTimePicker(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::PageClientImpl::didPerformDragOperation(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didPerformDragOperation:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AA10(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didHandleDragStartRequest(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didHandleDragStartRequest:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AA6C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didHandleAdditionalDragItemsRequest(id *this, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didHandleAdditionalDragItemsRequest:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AAC8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::startDrag(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  id WeakRetained;
  void *v6;
  CFTypeRef v7;
  CFTypeRef cf;
  WebCore::ShareableBitmap *v9;

  result = WebCore::ShareableBitmap::create();
  if (v9)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    WebCore::ShareableBitmap::makeCGImageCopy(v9);
    objc_msgSend(WeakRetained, "_startDrag:item:", &cf, a2);
    v7 = cf;
    cf = 0;
    if (v7)
    {
      CFRelease(v7);
      if (!WeakRetained)
      {
LABEL_5:
        result = (uint64_t)v9;
        v9 = 0;
        if (result)
          return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v6);
        return result;
      }
    }
    else if (!WeakRetained)
    {
      goto LABEL_5;
    }
    CFRelease(WeakRetained);
    goto LABEL_5;
  }
  return result;
}

void sub_19727AB7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::willReceiveEditDragSnapshot(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_willReceiveEditDragSnapshot");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AC00(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didReceiveEditDragSnapshot(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  _BYTE v5[120];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v5, a2);
  objc_msgSend(WeakRetained, "_didReceiveEditDragSnapshot:", v5);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AC74(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  const void *v3;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didChangeDragCaretRect(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  id WeakRetained;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::IntRect::operator CGRect();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  WebCore::IntRect::operator CGRect();
  objc_msgSend(WeakRetained, "_didChangeDragCaretRect:currentRect:", v5, v7, v9, v11, v12, v13, v14, v15);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AD48(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::performSwitchHapticFeedback(WebKit::PageClientImpl *this)
{
  void *v1;

  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA660]), "initWithStyle:", 0);
  objc_msgSend(v1, "impactOccurred");
  if (v1)
    CFRelease(v1);
}

void sub_19727ADA8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::requestPasswordForQuickLookDocument(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  const __CFString *v10;

  v5 = *a3;
  *a3 = 0;
  v6 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v6 = MEMORY[0x1E0C809A0];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::descriptor;
  v6[4] = v5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  v8 = (void *)objc_msgSend(WeakRetained, "_passwordView");
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "showPasswordFailureAlert");
    objc_msgSend(v9, "setUserDidEnterPassword:", v6);
  }
  else
  {
    if (*a2)
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_showPasswordViewWithDocumentName:passwordHandler:", v10, v6);
  }
  if (WeakRetained)
    CFRelease(WeakRetained);
  _Block_release(v6);
}

void sub_19727AEA4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::requestDOMPasteAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_requestDOMPasteAccessForCategory:requiresInteraction:elementRect:originIdentifier:completionHandler:", a2, a3, a4, a5, a6);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AF68(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::cancelPointersForGestureRecognizer(id *this, UIGestureRecognizer *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "cancelPointersForGestureRecognizer:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727AFC4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::activeTouchIdentifierForGestureRecognizer(id *this, UIGestureRecognizer *a2)
{
  id WeakRetained;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v4 = objc_msgSend(WeakRetained, "activeTouchIdentifierForGestureRecognizer:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v4;
}

void sub_19727B020(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::handleAutocorrectionContext(id *this, const WebAutocorrectionContext *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_handleAutocorrectionContext:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B07C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showDataDetectorsUIForPositionInformation(id *this, const InteractionInformationAtPosition *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_showDataDetectorsUIForPositionInformation:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B0DC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::hardwareKeyboardAvailabilityChanged(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_hardwareKeyboardAvailabilityChanged");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B130(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCleanupFullscreen(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "didCleanupFullscreen");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B188(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::writePromisedAttachmentToPasteboard(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_writePromisedAttachmentToPasteboard:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B1E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::setMouseEventPolicy(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_setMouseEventPolicy:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B240(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_showMediaControlsContextMenu:items:completionHandler:", a2, a3, a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B2B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::handleAsynchronousCancelableScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  objc_msgSend(WeakRetained, "scrollView:handleScrollUpdate:completion:", a2, a3, a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B330(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::runModalJavaScriptDialog(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "runModalJavaScriptDialog:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B38C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit14PageClientImpl26contentViewBackgroundColorEv_block_invoke(uint64_t a1)
{
  id WeakRetained;
  WebCore *v3;
  CGColor *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore *v8;
  CGColor *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 40));
  v3 = (WebCore *)objc_msgSend((id)objc_msgSend(WeakRetained, "backgroundColor"), "CGColor");
  v5 = WebCore::roundAndClampToSRGBALossy(v3, v4);
  v6 = bswap32(v5) | 0x1104000000000000;
  if (!BYTE4(v5))
    v6 = 0;
  v19 = v6;
  WebCore::Color::operator=();
  if ((v19 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v7);
    }
  }
  if (WeakRetained)
    CFRelease(WeakRetained);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 6) & 4) == 0)
  {
    v8 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA478], "systemBackgroundColor"), "CGColor");
    v10 = WebCore::roundAndClampToSRGBALossy(v8, v9);
    v11 = bswap32(v10) | 0x1104000000000000;
    if (!BYTE4(v10))
      v11 = 0;
    v20 = v11;
    WebCore::Color::operator=();
    if ((v20 & 0x8000000000000) != 0)
    {
      v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v12);
      }
    }
  }
}

void sub_19727B4C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c65_ZTSKZN6WebKit14PageClientImpl26contentViewBackgroundColorEvE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t WebKit::PageClientImpl::isScreenBeingCaptured(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v2 = objc_msgSend(WeakRetained, "screenIsBeingCaptured");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_19727B588(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::requestScrollToRect(id *this, const WebCore::FloatRect *a2, const WebCore::FloatPoint *a3)
{
  id WeakRetained;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::FloatRect::operator CGRect();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  WebCore::FloatPoint::operator CGPoint();
  objc_msgSend(WeakRetained, "_scrollToRect:withOrigin:minimumScrollDistance:", v5, v7, v9, v11, v12, v13, 0.0);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B648(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::sceneID(id *this@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  MEMORY[0x19AEABCC8](a2, objc_msgSend((id)objc_msgSend((id)objc_msgSend(WeakRetained, "window"), "windowScene"), "_sceneIdentifier"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B6B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::beginTextRecognitionForFullscreenVideo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "beginTextRecognitionForFullscreenVideo:playerViewController:", a2, a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B724(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::cancelTextRecognitionForFullscreenVideo(id *this, AVPlayerViewController *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "cancelTextRecognitionForFullscreenVideo:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B780(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isTextRecognitionInFullscreenVideoEnabled(id *this)
{
  id WeakRetained;
  uint64_t v2;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v2 = objc_msgSend(WeakRetained, "isTextRecognitionInFullscreenVideoEnabled");
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v2;
}

void sub_19727B7D4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::beginTextRecognitionForVideoInElementFullscreen(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  id WeakRetained;
  double v12;
  double v13;
  double v14;
  double v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(float *)&v12 = a3;
  *(float *)&v13 = a4;
  *(float *)&v14 = a5;
  *(float *)&v15 = a6;
  objc_msgSend(WeakRetained, "beginTextRecognitionForVideoInElementFullscreen:bounds:", a2, v12, v13, v14, v15);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B868(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::cancelTextRecognitionForVideoInElementFullscreen(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "cancelTextRecognitionForVideoInElementFullscreen");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727B8BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::presentingViewController(id *this)
{
  _QWORD *WeakRetained;
  uint64_t v2;
  uint64_t v3;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if (objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "isFullScreen"))
  {
    v2 = objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "fullScreenViewController");
    if (!WeakRetained)
      return v2;
  }
  else
  {
    v3 = WeakRetained[53];
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 + 8));
      v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 104) + 488))(*(_QWORD *)(v3 + 104));
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
    else
    {
      v2 = 0;
    }
  }
  CFRelease(WeakRetained);
  return v2;
}

void sub_19727B96C(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

float WebKit::PageClientImpl::rootViewToWebView(id *this, const WebCore::FloatRect *a2)
{
  id WeakRetained;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGRect v18;
  float v19;

  WeakRetained = objc_loadWeakRetained(this + 2);
  WebCore::FloatRect::operator CGRect();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "convertRect:fromView:", v12, v5, v7, v9, v11);
  v18.origin.x = v13;
  v18.origin.y = v14;
  v18.size.width = v15;
  v18.size.height = v16;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v19, &v18);
  if (v12)
    CFRelease(v12);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v19;
}

void sub_19727BA5C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::webViewToRootView(id *this, const WebCore::FloatPoint *a2)
{
  id WeakRetained;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  CGFloat v9;
  CGFloat v10;
  CGPoint v12;
  float v13;

  WeakRetained = objc_loadWeakRetained(this + 2);
  WebCore::FloatPoint::operator CGPoint();
  v5 = v4;
  v7 = v6;
  v8 = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "convertPoint:toView:", v8, v5, v7);
  v12.x = v9;
  v12.y = v10;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v13, &v12);
  if (v8)
    CFRelease(v8);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v13;
}

void sub_19727BB2C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scheduleVisibleContentRectUpdate(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_scheduleVisibleContentRectUpdate");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_19727BB98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ProcessStateMonitor::ProcessStateMonitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::RunLoop *v4;
  _QWORD *v5;
  NSObject *v6;
  _BOOL8 v7;
  WTF::RunLoop *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  const void *v18;
  void *v19;
  const void *v20;
  const void *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v29[4];
  WTF *v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v3;
  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34CD930;
  v5[1] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 24), v4);
  *(_QWORD *)(a1 + 24) = off_1E34ABE00;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = qword_1ECE71640;
  v7 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    *(_DWORD *)buf = 134217984;
    v32 = a1;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::ProcessStateMonitor", buf, 0xCu);
  }
  v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  if ((WTF::RunLoop::isCurrent(v8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19727BDE8);
  }
  v9 = (void *)MEMORY[0x1E0D87D90];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3321888768;
  v29[2] = ___ZN6WebKit19ProcessStateMonitorC2EON3WTF8FunctionIFvbEEE_block_invoke;
  v29[3] = &__block_descriptor_40_e8_32c65_ZTSKZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEE3__1_e40_v16__0___RBSProcessMonitorConfiguring__8l;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    goto LABEL_31;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a1;
  v12 = *(unsigned int **)a1;
  *(_QWORD *)a1 = v10;
  if (!v12)
    goto LABEL_31;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
LABEL_31:
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
    do
      v16 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v16 + 1, (unsigned int *)v10));
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  v30 = (WTF *)v10;
  v18 = (const void *)objc_msgSend(v9, "monitorWithConfiguration:", v29);
  v20 = v18;
  if (v18)
    CFRetain(v18);
  v21 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v20;
  if (v21)
    CFRelease(v21);
  if ((v17 & 1) == 0)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v10);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v10));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, v19);
    }
  }
  WebKit::ProcessStateMonitor::checkRemainingRunTime((WebKit::ProcessStateMonitor *)a1);
  v25 = (unsigned int *)v30;
  v30 = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v24);
    }
  }
  return a1;
}

void sub_19727BE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  uint64_t v14;
  WTF::RunLoop::TimerBase *v15;
  uint64_t v16;
  const void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v18 = *(const void **)(v14 + 56);
  *(_QWORD *)(v14 + 56) = 0;
  if (v18)
    CFRelease(v18);
  *(_QWORD *)(v14 + 24) = v16;
  v19 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v14 + 48) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  WTF::RunLoop::TimerBase::~TimerBase(v15);
  v21 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v14, v20);
  _Unwind_Resume(a1);
}

void sub_19727C0C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!a14)
    goto LABEL_4;
  do
  {
    v16 = __ldaxr((unsigned int *)a14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)a14));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14)
      goto LABEL_9;
  }
  else
  {
LABEL_4:
    if (!v14)
      goto LABEL_9;
  }
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c65_ZTSKZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEE3__1(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c65_ZTSKZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEE3__1(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebKit::ProcessStateMonitor::checkRemainingRunTime(WebKit::ProcessStateMonitor *this)
{
  uint64_t result;
  double v3;
  double v4;
  NSObject *v5;
  int v6;
  WebKit::ProcessStateMonitor *v7;
  __int16 v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D87D68], "currentProcess"), "activeLimitations"), "runTime");
  if (v3 == *MEMORY[0x1E0D87E30])
    return WebKit::ProcessStateMonitor::processDidBecomeRunning((uint64_t)this);
  if (v3 <= 15.0)
    return WebKit::ProcessStateMonitor::processWillBeSuspendedImmediately((uint64_t)this);
  if (!*((_BYTE *)this + 8))
  {
    v4 = v3 + -15.0;
    v5 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134218240;
      v7 = this;
      v8 = 2048;
      v9 = v4;
      _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::processWillBeSuspended starts timer for %fs", (uint8_t *)&v6, 0x16u);
    }
    result = WTF::RunLoop::TimerBase::start();
    *((_BYTE *)this + 8) = 1;
  }
  return result;
}

void WebKit::ProcessStateMonitor::~ProcessStateMonitor(id *this)
{
  NSObject *v2;
  _BOOL8 v3;
  WTF::RunLoop *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  int v9;
  id *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v9 = 134217984;
    v10 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::~ProcessStateMonitor", (uint8_t *)&v9, 0xCu);
  }
  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v3);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19727C438);
  }
  objc_msgSend(this[7], "invalidate");
  WebKit::ProcessStateMonitor::processDidBecomeRunning((uint64_t)this);
  v5 = this[7];
  this[7] = 0;
  if (v5)
    CFRelease(v5);
  this[3] = off_1E34ABE00;
  v6 = this[6];
  this[6] = 0;
  if (v6)
    (*(void (**)(id))(*(_QWORD *)v6 + 8))(v6);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 3));
  v8 = this[2];
  this[2] = 0;
  if (v8)
    (*(void (**)(id))(*(_QWORD *)v8 + 8))(v8);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v7);
}

void sub_19727C440(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = *(const void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(v1 + 24) = off_1E34ABE00;
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 24));
  v6 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v1, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessStateMonitor::processDidBecomeRunning(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 8))
  {
    v1 = this;
    if (*(_BYTE *)(this + 8) == 2)
      this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 16) + 16))(*(_QWORD *)(this + 16), 0);
    else
      this = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 24));
    *(_BYTE *)(v1 + 8) = 0;
  }
  return this;
}

uint64_t WebKit::ProcessStateMonitor::processWillBeSuspendedImmediately(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 8) != 2)
  {
    v1 = this;
    v2 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 134217984;
      v4 = v1;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::processWillBeSuspendedImmediately", (uint8_t *)&v3, 0xCu);
    }
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 24));
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), 1);
    *(_BYTE *)(v1 + 8) = 2;
  }
  return this;
}

id WebKit::RevealFocusedElementDeferrer::create@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  id result;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  result = objc_initWeak((id *)(v6 + 8), a1);
  *(_BYTE *)(v6 + 16) = a2;
  *a3 = v6;
  return result;
}

void sub_19727C61C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RevealFocusedElementDeferrer::fulfill(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  id *v4;
  id to;

  v2 = *(unsigned __int8 *)(result + 16);
  *(_BYTE *)(result + 16) = v2 & ~(_BYTE)a2;
  if ((v2 & (a2 ^ 0xFF)) == 0)
  {
    v3 = result;
    ++*(_DWORD *)result;
    v4 = (id *)(result + 8);
    to = 0;
    objc_moveWeak(&to, (id *)(result + 8));
    objc_storeWeak(v4, 0);
    objc_msgSend(objc_loadWeak(&to), "_zoomToRevealFocusedElement");
    objc_destroyWeak(&to);
    return WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v3);
  }
  return result;
}

void sub_19727C6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  uint64_t v10;

  objc_destroyWeak(&location);
  WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const void *v6;
  char v8;

  if (*(_BYTE *)(a1 + 312))
  {
    v3 = *(WTF::StringImpl **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    if (*(_BYTE *)(a1 + 240))
    {
      v5 = *(unsigned int *)(a1 + 232);
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, uint64_t))off_1E34CD7E8[v5])(&v8, a1 + 176);
      *(_DWORD *)(a1 + 232) = -1;
    }
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](a1 + 48, a2);
    v6 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v6)
      CFRelease(v6);
  }
  return a1;
}

WebCore::TextIndicatorData *std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100](WebCore::TextIndicatorData *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    WebCore::TextIndicatorData::TextIndicatorData(this, (const TextIndicatorData *)a2);
    *((_BYTE *)this + 112) = 1;
  }
  return this;
}

void sub_19727C7E4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DragSourceState::DragSourceState(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 48), (uint64_t)(a2 + 3));
  std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 168), (uint64_t)a2 + 168);
  v7 = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = 0;
  *(_QWORD *)(a1 + 248) = v7;
  WTF::URL::URL(a1 + 256, (uint64_t *)a2 + 32);
  *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
  return a1;
}

void sub_19727C88C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  const void *v18;

  v16 = *(WTF::StringImpl **)(v13 + 248);
  *(_QWORD *)(v13 + 248) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*(_BYTE *)(v13 + 240))
  {
    v17 = *(unsigned int *)(v13 + 232);
    if ((_DWORD)v17 != -1)
      ((void (*)(char *, uint64_t))off_1E34CD7E8[v17])(&a13, v13 + 176);
    *(_DWORD *)(v13 + 232) = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v14, a2);
  v18 = *(const void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v18)
    CFRelease(v18);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<WebKit::DragSourceState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::DragSourceState,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;

  if (*(unsigned __int8 *)(a1 + 312) == *((unsigned __int8 *)a2 + 312))
  {
    if (*(_BYTE *)(a1 + 312))
    {
      v4 = *a2;
      v5 = a2[1];
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
      v6 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = 0;
      v7 = *(const void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v6;
      if (v7)
        CFRelease(v7);
      std::__optional_storage_base<WebCore::TextIndicatorData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextIndicatorData,false>>(a1 + 48, (unsigned __int8 *)a2 + 48);
      std::__optional_storage_base<WebCore::Path,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Path,false>>(a1 + 168, (uint64_t)a2 + 168);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 248), (WTF::StringImpl *)((char *)a2 + 248));
      WTF::URL::operator=(a1 + 256, (WTF::StringImpl *)(a2 + 16));
      *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
    }
  }
  else if (*(_BYTE *)(a1 + 312))
  {
    std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    WebKit::DragSourceState::DragSourceState(a1, a2);
    *(_BYTE *)(a1 + 312) = 1;
  }
}

void std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const void *v6;
  char v7;

  if (*(_BYTE *)(a1 + 312))
  {
    v3 = *(WTF::StringImpl **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    if (*(_BYTE *)(a1 + 240))
    {
      v5 = *(unsigned int *)(a1 + 232);
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, uint64_t))off_1E34CD7E8[v5])(&v7, a1 + 176);
      *(_DWORD *)(a1 + 232) = -1;
    }
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](a1 + 48, a2);
    v6 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v6)
      CFRelease(v6);
    *(_BYTE *)(a1 + 312) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::TextIndicatorData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextIndicatorData,false>>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v3 = result;
  if (*(unsigned __int8 *)(result + 112) == a2[112])
  {
    if (*(_BYTE *)(result + 112))
    {
      v4 = *(_OWORD *)a2;
      v5 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(result + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(result + 32) = v5;
      *(_OWORD *)result = v4;
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(result + 48, (_DWORD *)a2 + 12);
      *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 16);
      v6 = *((_QWORD *)a2 + 9);
      *((_QWORD *)a2 + 9) = 0;
      v7 = *(_DWORD **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v6;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v8 = *((_QWORD *)a2 + 10);
      *((_QWORD *)a2 + 10) = 0;
      v9 = *(_DWORD **)(v3 + 80);
      *(_QWORD *)(v3 + 80) = v8;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v10 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a2 + 11) = 0;
      v11 = *(_DWORD **)(v3 + 88);
      *(_QWORD *)(v3 + 88) = v10;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      result = WebCore::Color::operator=();
      *(_DWORD *)(v3 + 104) = *((_DWORD *)a2 + 26);
    }
  }
  else if (*(_BYTE *)(result + 112))
  {
    return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    result = WebCore::TextIndicatorData::TextIndicatorData(result, (__int128 *)a2);
    *(_BYTE *)(v3 + 112) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::TextIndicatorData,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (*(_BYTE *)(result + 112))
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 96);
    if ((v3 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    v4 = *(_DWORD **)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    v5 = *(_DWORD **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    v6 = *(_DWORD **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    result = *(_QWORD *)(v2 + 48);
    if (result)
    {
      *(_QWORD *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v2 + 112) = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::Path,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Path,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(result + 72))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>(result + 8, a2 + 8);
  }
  else if (*(_BYTE *)(result + 72))
  {
    v3 = *(unsigned int *)(result + 64);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E34CD7E8[v3])(&v4, result + 8);
    *(_DWORD *)(v2 + 64) = -1;
    *(_BYTE *)(v2 + 72) = 0;
  }
  else
  {
    result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](result + 8, a2 + 8);
    *(_BYTE *)(v2 + 72) = 1;
  }
  return result;
}

CFTypeRef ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__0cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)objc_msgSend(MEMORY[0x1E0CEA560], "previewForURL:title:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v2 = v1;
  if (v1)
    CFRetain(v1);
  return (id)CFMakeCollectable(v2);
}

CFTypeRef __copy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_19727CDE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__0(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

CFTypeRef ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__1cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  const void *v4;
  CFTypeRef v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA658]), "initWithImage:", *(_QWORD *)(a1 + 32));
  v2 = objc_alloc(MEMORY[0x1E0CEA568]);
  v3 = (void *)MEMORY[0x1E0CB3B18];
  objc_msgSend(v1, "bounds");
  v7[0] = objc_msgSend(v3, "valueWithCGRect:");
  v4 = (const void *)objc_msgSend(v2, "initWithTextLineRects:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1));
  v5 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA560]), "initWithView:parameters:", v1, v4));
  if (v4)
    CFRelease(v4);
  if (v1)
    CFRelease(v1);
  return v5;
}

void sub_19727CF48(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(const void **a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  const void *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (const void *)-1)
      {
        *v4 = 0;
        if (v5)
          CFRelease(v5);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  MEMORY[0x19AEABCC8](&v4);
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19727D084(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_object_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v1 = *(unsigned int **)(a1 + 32);
  if (v1)
  {
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34CD8E0;
  v3[1] = v1;
  v5 = v3;
  WTF::ensureOnMainRunLoop();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_19727D124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c194_ZTSKZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_objectEUlP17RBSProcessMonitorP16RBSProcessHandleP21RBSProcessStateUpdateE_(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c194_ZTSKZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_objectEUlP17RBSProcessMonitorP16RBSProcessHandleP21RBSProcessStateUpdateE_(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_1::operator()(objc_object  {objcproto28RBSProcessMonitorConfiguring}*)::{lambda(RBSProcessMonitor *,RBSProcessHandle *,RBSProcessStateUpdate *)#1}::operator() const(objc_object  {objcproto28RBSProcessMonitorConfiguring}*,RBSProcessMonitor *,RBSProcessHandle *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CD8E0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_1::operator()(objc_object  {objcproto28RBSProcessMonitorConfiguring}*)::{lambda(RBSProcessMonitor *,RBSProcessHandle *,RBSProcessStateUpdate *)#1}::operator() const(objc_object  {objcproto28RBSProcessMonitorConfiguring}*,RBSProcessMonitor *,RBSProcessHandle *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CD8E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ProcessStateMonitor *WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_1::operator()(objc_object  {objcproto28RBSProcessMonitorConfiguring}*)::{lambda(RBSProcessMonitor *,RBSProcessHandle *,RBSProcessStateUpdate *)#1}::operator() const(objc_object  {objcproto28RBSProcessMonitorConfiguring}*,RBSProcessMonitor *,RBSProcessHandle *)::{lambda(void)#1},void>::call(WebKit::ProcessStateMonitor *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WebKit::ProcessStateMonitor **)(v1 + 8);
    if (result)
      return (WebKit::ProcessStateMonitor *)WebKit::ProcessStateMonitor::checkRemainingRunTime(result);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(uint64_t *a1, const void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (const void **)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != (const void *)-1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = v16 + 16 * v23;
          v26 = *(const void **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            CFRelease(v26);
            v27 = *(const void **)v25;
            *(_QWORD *)v25 = 0;
            if (v27)
              CFRelease(v27);
          }
          else
          {
            *(_QWORD *)v25 = 0;
          }
          v28 = *v12;
          *v12 = 0;
          *(_QWORD *)v25 = v28;
          v29 = v4 + 16 * v10;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v30;
          v31 = *(const void **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
            CFRelease(v31);
          v32 = *v12;
          *v12 = 0;
          if (v32)
            CFRelease(v32);
          if (v12 == a2)
            v11 = v25;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(const void **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            CFRelease(v15);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
            CFRelease(v13);
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

void WTF::GenericHashTraits<WTF::RetainPtr<UITargetedDragPreview>>::assignToEmpty<WTF::RetainPtr<UITargetedDragPreview>,UITargetedDragPreview*>(const void **a1, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = *a1;
  *a1 = cf;
  if (v4)
    CFRelease(v4);
}

uint64_t WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::DragSourceState const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  const void *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  __int128 v13;

  v3 = WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 312 * v4;
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v3;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = v7;
  v9 = *(const void **)(v3 + 40);
  *(_QWORD *)(v6 + 40) = v9;
  if (v9)
    CFRetain(v9);
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)(v5 + 312 * v4 + 48), v3 + 48);
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)(v5 + 312 * v4 + 168), (const WebCore::Path *)(v3 + 168));
  v10 = *(_DWORD **)(v3 + 248);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 312 * v4 + 248) = v10;
  v11 = *(_DWORD **)(v3 + 256);
  if (v11)
    *v11 += 2;
  v12 = v5 + 312 * v4;
  *(_QWORD *)(v12 + 256) = v11;
  v13 = *(_OWORD *)(v3 + 264);
  *(_OWORD *)(v12 + 280) = *(_OWORD *)(v3 + 280);
  *(_OWORD *)(v12 + 264) = v13;
  *(_OWORD *)(v12 + 296) = *(_OWORD *)(v3 + 296);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_19727D5FC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  const void **v3;
  const void *v5;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  v5 = *v3;
  *v3 = 0;
  if (v5)
    CFRelease(v5);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 312 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  char v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xD20D21)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 312 * a2;
      v6 = WTF::fastMalloc((WTF *)(312 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x138;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v8 = v6;
        v9 = 0;
        v10 = 312 * v4;
        do
        {
          v11 = (char *)v3 + v9;
          WebKit::DragSourceState::DragSourceState(v8 + v9, (__int128 *)((char *)v3 + v9));
          v13 = *(WTF::StringImpl **)((char *)v3 + v9 + 256);
          *(_QWORD *)((char *)v3 + v9 + 256) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = (WTF::StringImpl *)*((_QWORD *)v11 + 31);
          *((_QWORD *)v11 + 31) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v12);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = (char *)v3 + v9;
          if (*((_BYTE *)v3 + v9 + 240))
          {
            v16 = *((unsigned int *)v15 + 58);
            if ((_DWORD)v16 != -1)
              ((void (*)(char *, char *))off_1E34CD7E8[v16])(&v18, (char *)v3 + v9 + 176);
            *((_DWORD *)v15 + 58) = -1;
          }
          std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v15 + 48), v12);
          v17 = (const void *)*((_QWORD *)v15 + 5);
          *((_QWORD *)v15 + 5) = 0;
          if (v17)
            CFRelease(v17);
          v9 += 312;
        }
        while (v10 != v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::GestureRecognizerConsistencyEnforcer::*&)(void),WebKit::GestureRecognizerConsistencyEnforcer*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::add(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  int v8;
  const void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  const void **v14;
  const void *v15;
  const void **v16;
  int v17;
  const void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (const void *)*a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (const void **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v21;
        goto LABEL_31;
      }
      if (v15 == (const void *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (const void **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a1 - 16);
      v9 = (const void *)*a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
    CFRelease(v18);
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_24:
      v14 = WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::expand(a1, v14);
      v22 = *a1;
      if (*a1)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_24;
  }
  v27 = v22 + 8 * v25;
  v26 = 1;
LABEL_31:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
}

const void **WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::expand(uint64_t *a1, const void **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::rehash(a1, v5, a2);
}

const void **WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::rehash(uint64_t *a1, unsigned int a2, const void **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  const void **v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (const void **)v6;
    do
    {
      if (*v13 != (const void *)-1)
      {
        if (*v13)
        {
          v14 = (const void **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(a1, v13);
          v15 = *v14;
          *v14 = 0;
          if (v15)
            CFRelease(v15);
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
            CFRelease(v17);
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::remove(uint64_t *a1, const void **a2)
{
  const void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *a2;
  *a2 = 0;
  if (v4)
    CFRelease(v4);
  *a2 = (const void *)-1;
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::rehash(a1, v9 >> 1, 0);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    v2 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 134217984;
      v4 = v1;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::suspendTimerFired", (uint8_t *)&v3, 0xCu);
    }
    return WebKit::ProcessStateMonitor::processWillBeSuspendedImmediately(v1);
  }
  return result;
}

uint64_t WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(uint64_t result)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)result;
  if (*(_DWORD *)result == 1)
  {
    objc_destroyWeak((id *)(result + 8));
    return WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WKStringGetTypeID()
{
  return 21;
}

uint64_t WKStringCreateWithUTF8CString(WTF::String *a1, const char *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  WTF::String::fromUTF8((uint64_t *)&v6, a1, a2);
  API::String::create(&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

BOOL WKStringIsEmpty(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  return !v1 || *(_DWORD *)(v1 + 4) == 0;
}

uint64_t WKStringGetLength(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 0;
}

uint64_t WKStringGetCharacters(void *a1, char *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int8x16_t *v7;
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  if (a3 >= 0xFFFFFFFF)
    v4 = 0xFFFFFFFFLL;
  else
    v4 = a3;
  v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(v5 + 4);
  if (!v6)
    return 0;
  v7 = *(int8x16_t **)(v5 + 8);
  if (v6 <= v4)
    v4 = *(unsigned int *)(v5 + 4);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    v8 = &a2[2 * v4];
    if (v4 >= 0x40)
    {
      v9 = &a2[2 * (v4 & 0xFFFFFFC0)];
      v10 = 0uLL;
      do
      {
        v19.val[0] = *v7;
        v11 = v7[1];
        v20.val[0] = v7[2];
        v12 = v7[3];
        v7 += 4;
        v13 = v12;
        v20.val[1] = 0uLL;
        v21.val[0] = v11;
        v19.val[1] = 0uLL;
        v14 = a2;
        vst2q_s8(v14, v19);
        v14 += 32;
        v21.val[1] = 0uLL;
        vst2q_s8(v14, v21);
        v15 = a2 + 64;
        vst2q_s8(v15, v20);
        v16 = a2 + 96;
        vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
        a2 += 128;
      }
      while (a2 != v9);
      a2 = v9;
    }
    while (a2 != v8)
    {
      v17 = v7->u8[0];
      v7 = (int8x16_t *)((char *)v7 + 1);
      *(_WORD *)a2 = v17;
      a2 += 2;
    }
  }
  else if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 1)
    {
      *(_WORD *)a2 = v7->i16[0];
      return 1;
    }
    else
    {
      memcpy(a2, v7, 2 * v4);
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t WKStringGetMaximumUTF8CStringSize(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (v1)
    return 3 * *(unsigned int *)(v1 + 4) + 1;
  else
    return 1;
}

uint64_t WKStringGetUTF8CString(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v6;
  uint64_t v7;

  if (!a3)
    return 0;
  v4 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (!v4 || (*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    WTF::Unicode::convert();
  }
  else
  {
    WTF::Unicode::convert();
    if (v6 == 1)
      return 0;
  }
  *(_BYTE *)(a2 + v7) = 0;
  return v7 + 1;
}

uint64_t WKStringGetUTF8CStringNonStrict(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  if (!a3)
    return 0;
  v4 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (!v4 || (*(_BYTE *)(v4 + 16) & 4) != 0)
    WTF::Unicode::convert();
  else
    WTF::Unicode::convertReplacingInvalidSequences();
  *(_BYTE *)(a2 + v6) = 0;
  return v6 + 1;
}

BOOL WKStringIsEqual(void *a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (v3)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 16);
  if (v6)
  {
    v7 = *(unsigned __int8 **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  return WTF::operator==(v4, v5, v7, v8);
}

BOOL WKStringIsEqualToUTF8CString(void *a1, WTF::String *a2)
{
  const char *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;

  v4 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (v4)
  {
    v5 = *(unsigned __int8 **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  WTF::String::fromUTF8((uint64_t *)&v13, a2, v3);
  if (v13)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v8 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v10 = WTF::operator==(v5, v6, v7, v8);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v10;
}

BOOL WKStringIsEqualToUTF8CStringIgnoringCase(void *a1, WTF::String *a2)
{
  const char *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  unsigned __int8 *v14[2];
  unsigned __int16 *v15[2];

  v4 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (v4)
  {
    v5 = *(unsigned __int16 **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  WTF::String::fromUTF8((uint64_t *)&v13, a2, v3);
  if (v13)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v8 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v15[0] = v5;
  v15[1] = (unsigned __int16 *)v6;
  v14[0] = v7;
  v14[1] = (unsigned __int8 *)v8;
  v10 = WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(v15, v14);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v10;
}

uint64_t WKStringCreateWithJSString(OpaqueJSString *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WebKit *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
  {
    OpaqueJSString::string(a1);
    API::String::create(&v5, &v6);
    v2 = v5;
    v5 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v1);
      else
        *(_DWORD *)v2 -= 2;
    }
    v3 = v6;
    if (!v6)
      return 0;
  }
  else
  {
    v3 = (WebKit *)API::Object::newObject(0x18uLL, 21);
    *(_QWORD *)v3 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v3);
    *(_QWORD *)v3 = &off_1E34AE7A0;
    *((_QWORD *)v3 + 2) = 0;
  }
  return *((_QWORD *)v3 + 1);
}

uint64_t WKStringCopyJSString(JSC *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v4;
  uint64_t v5;

  JSC::initialize(a1);
  if (a1)
    -[JSC _apiObject](a1, "_apiObject");
  WTF::String::isolatedCopy();
  OpaqueJSString::tryCreate();
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v5;
}

uint64_t WKGetTypeID(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

void *WKRetain(void *a1)
{
  CFRetain(*(CFTypeRef *)(objc_msgSend(a1, "_apiObject") + 8));
  return a1;
}

void WKRelease(void *a1)
{
  CFRelease(*(CFTypeRef *)(objc_msgSend(a1, "_apiObject") + 8));
}

uint64_t WKURLGetTypeID()
{
  return 24;
}

uint64_t WKURLCreateWithUTF8CString(WTF::String *a1, const char *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  WTF::String::fromUTF8((uint64_t *)&v6, a1, a2);
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKURLCreateWithBaseURL(void *a1, WTF::String *a2)
{
  API::URL *v3;
  uint64_t v4;
  _DWORD **v5;
  WebKit *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  if (a1)
    v3 = (API::URL *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  WTF::String::fromUTF8((uint64_t *)&v12, a2, (const char *)a2);
  API::URL::parseURLIfNecessary(v3);
  v4 = *((_QWORD *)v3 + 3);
  v5 = (_DWORD **)WTF::fastMalloc((WTF *)0x28);
  MEMORY[0x19AEABB24](v5, v4, &v12, 0);
  v6 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(_QWORD *)v6 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v6);
  *(_QWORD *)v6 = &off_1E34AD320;
  v8 = *v5;
  if (*v5)
    *v8 += 2;
  *((_QWORD *)v6 + 2) = v8;
  *((_QWORD *)v6 + 3) = v5;
  v9 = *((_QWORD *)v6 + 1);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v9;
}

uint64_t WKURLCopyString(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKURLIsEqual(void *a1, const WTF::StringImpl ***a2)
{
  const WTF::StringImpl ***v2;
  API::URL *v3;
  WTF **v4;
  const WTF::StringImpl *v5;

  v2 = a2;
  if (!a1)
  {
    v3 = 0;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = (API::URL *)objc_msgSend(a1, "_apiObject");
  if (v2)
LABEL_3:
    v2 = (const WTF::StringImpl ***)objc_msgSend(v2, "_apiObject");
LABEL_4:
  API::URL::parseURLIfNecessary(v3);
  v4 = (WTF **)*((_QWORD *)v3 + 3);
  API::URL::parseURLIfNecessary((API::URL *)v2);
  return WTF::equal(*v4, *v2[3], v5);
}

uint64_t WKURLCopyHostName(void *a1)
{
  WTF::URL **v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  if (a1)
    v1 = (WTF::URL **)objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::host(v1[3]);
  if ((v2 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  API::String::create(&v7);
  if (v7)
    v4 = *((_QWORD *)v7 + 1);
  else
    v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WKURLCopyScheme(void *a1)
{
  WTF::URL **v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  if (a1)
    v1 = (WTF::URL **)objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::protocol(v1[3]);
  if ((v2 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  API::String::create(&v7);
  if (v7)
    v4 = *((_QWORD *)v7 + 1);
  else
    v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WKURLCopyPath(void *a1)
{
  WTF::URL **v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  if (a1)
    v1 = (WTF::URL **)objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::path(v1[3]);
  if ((v2 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  API::String::create(&v7);
  if (v7)
    v4 = *((_QWORD *)v7 + 1);
  else
    v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WKURLCopyLastPathComponent(void *a1)
{
  WTF::URL **v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  if (a1)
    v1 = (WTF::URL **)objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  API::URL::parseURLIfNecessary((API::URL *)v1);
  WTF::URL::lastPathComponent(v1[3]);
  if ((v2 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  API::String::create(&v7);
  if (v7)
    v4 = *((_QWORD *)v7 + 1);
  else
    v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WKURLRequestGetTypeID()
{
  return 25;
}

uint64_t WKURLRequestCreateWithWKURL(WTF::StringImpl **a1)
{
  uint64_t v1;
  uint64_t v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7[5];
  _BYTE v8[192];
  CFTypeRef cf;

  if (a1)
    a1 = (WTF::StringImpl **)objc_msgSend(a1, "_apiObject");
  WTF::URL::URL((uint64_t)v7, a1 + 2);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v8, (const WTF::URL *)v7, 0);
  cf = 0;
  v1 = API::Object::newObject(0xD8uLL, 25);
  *(_QWORD *)v1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v1);
  *(_QWORD *)v1 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v1 + 16), (const WebCore::ResourceRequest *)v8);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v2;
}

uint64_t WKURLRequestCopyURL(uint64_t a1)
{
  API::URL *v1;
  WebKit *v3;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  v1 = (API::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 16));
  if (*(_QWORD *)v1 && (API::URL::create(v1, &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKURLRequestCopyFirstPartyForCookies(uint64_t a1)
{
  API::URL *PartyForCookies;
  WebKit *v3;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  PartyForCookies = (API::URL *)WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)(a1 + 16));
  if (*(_QWORD *)PartyForCookies && (API::URL::create(PartyForCookies, &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKURLRequestCopyHTTPMethod(uint64_t a1)
{
  WebKit *v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(a1 + 16));
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKURLRequestCopySettingHTTPBody(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  WTF::RefCountedBase *v7;
  CFTypeRef v8[24];
  CFTypeRef cf;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::ResourceRequest::ResourceRequest(v8, (const WebCore::ResourceRequest *)(a1 + 16));
  objc_msgSend(a2, "_apiObject");
  objc_msgSend(a2, "_apiObject");
  WebCore::FormData::create();
  WebCore::ResourceRequestBase::setHTTPBody();
  if (v7)
    WTF::RefCounted<WebCore::FormData>::deref(v7);
  v3 = API::Object::newObject(0xD8uLL, 25);
  *(_QWORD *)v3 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v3);
  *(_QWORD *)v3 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v3 + 16), (const WebCore::ResourceRequest *)v8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
  return v4;
}

uint64_t WKURLResponseGetTypeID()
{
  return 26;
}

uint64_t WKURLResponseCopyURL(uint64_t a1)
{
  API::URL *v1;
  WebKit *v3;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  v1 = (API::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(a1 + 16));
  if (*(_QWORD *)v1 && (API::URL::create(v1, &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKURLResponseCopyMIMEType(uint64_t a1)
{
  WebKit *v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(a1 + 16));
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKURLResponseHTTPStatusCode(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)(a1 + 16));
}

uint64_t WKURLResponseCopySuggestedFilename(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WebKit *v5;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::ResourceResponseBase::suggestedFilename((WebCore::ResourceResponseBase *)(a1 + 16));
  API::String::create(&v5);
  if (v5)
    v2 = *((_QWORD *)v5 + 1);
  else
    v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

uint64_t WKURLResponseIsAttachment(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::ResourceResponseBase::isAttachment((WebCore::ResourceResponseBase *)(a1 + 16));
}

uint64_t WKURLResponseGetExpectedContentLength(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)(a1 + 16));
}

uint64_t WKUserContentURLPatternGetTypeID()
{
  return 27;
}

uint64_t WKUserContentURLPatternCreate(void *a1)
{
  API::UserContentURLPattern *v1;
  API::UserContentURLPattern *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WTF::String::isolatedCopy();
  v1 = (API::UserContentURLPattern *)API::Object::newObject(0x38uLL, 27);
  v2 = API::UserContentURLPattern::UserContentURLPattern(v1, (const WTF::String *)&v7);
  if (v2)
    v4 = *((_QWORD *)v2 + 1);
  else
    v4 = 0;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WKUserContentURLPatternCopyHost(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKUserContentURLPatternCopyScheme(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

BOOL WKUserContentURLPatternIsValid(void *a1)
{
  return *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 40) == 0;
}

uint64_t WKUserContentURLPatternMatchesURL(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[5];
  WTF::StringImpl *v13[5];

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  v3 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v4)
    *(_DWORD *)v4 += 2;
LABEL_7:
  v11 = v4;
  v12[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v12);
  MEMORY[0x19AEABB24](v13, v12, &v11, 0);
  v6 = WebCore::UserContentURLPattern::matches<WTF::URL>((WebCore::UserContentURLPattern *)(v3 + 16), (const WTF::URL *)v13);
  v7 = v13[0];
  v13[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v6;
}

uint64_t WKUserContentURLPatternMatchesSubdomains(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 41);
}

uint64_t WKErrorCreateWithCFError(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  CFTypeRef cf;

  MEMORY[0x19AEADCCC](&v10, a1);
  v1 = API::Object::newObject(0x60uLL, 10);
  v2 = API::Error::Error(v1, (uint64_t)&v10);
  if (v2)
    v4 = *(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  v6 = v12;
  v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v4;
}

const void *WKErrorCopyCFError(uint64_t a1, void *a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (a2)
    v2 = objc_msgSend(a2, "_apiObject");
  else
    v2 = 0;
  v3 = (const void *)WebCore::ResourceError::nsError((WebCore::ResourceError *)(v2 + 16));
  v4 = v3;
  if (v3)
    CFRetain(v3);
  return v4;
}

CFTypeRef WKImageCreateCGImage(void *a1)
{
  uint64_t v1;
  CFTypeRef *v2;
  void *v3;
  CFTypeRef v4;
  WebCore::NativeImage *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  WebCore::NativeImage *v15;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  if (!v1)
    return 0;
  (*(void (**)(WebCore::NativeImage **__return_ptr))(*(_QWORD *)v1 + 48))(&v15);
  if (!v15)
    return 0;
  v2 = (CFTypeRef *)WebCore::NativeImage::platformImage(v15);
  v4 = *v2;
  if (*v2)
    CFRetain(*v2);
  v5 = v15;
  v15 = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEABB3C](v6);
LABEL_12:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return v4;
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return v4;
LABEL_20:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, v3);
  }
  return v4;
}

uint64_t WKImageCreateFromCGImage(const void *a1, char a2)
{
  CFTypeRef v3;
  CFTypeRef *v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WebCore::NativeImage *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  CFTypeRef cf[2];
  WebKit *v21;
  uint64_t v22;
  WebCore::NativeImage *v23;

  if (!a1)
    return 0;
  cf[0] = a1;
  CFRetain(a1);
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebCore::NativeImage::create();
  v3 = cf[0];
  cf[0] = 0;
  CFRelease(v3);
  v22 = WebCore::NativeImage::size(v23);
  v4 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v22);
  WebKit::WebImage::create((int32x2_t *)&v22, a2 & 1, v4, 0, &v21);
  v5 = v21;
  v6 = *((_QWORD *)v21 + 2);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v21 + 2) + 16))(*((_QWORD *)v21 + 2));
    cf[0] = 0;
    cf[1] = (CFTypeRef)vcvt_f32_s32((int32x2_t)v22);
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v7 + 280))(v7, cf);
    WebCore::GraphicsContext::drawNativeImage();
    if (v21)
    {
      v9 = *((_QWORD *)v21 + 1);
      goto LABEL_8;
    }
  }
  else
  {
    v21 = 0;
    CFRelease(*((CFTypeRef *)v5 + 1));
  }
  v9 = 0;
LABEL_8:
  v10 = v23;
  v23 = 0;
  if (!v10)
    return v9;
  v11 = *((_QWORD *)v10 + 1);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEABB3C](v11);
LABEL_13:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v19 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v19 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (v14)
        return v9;
      goto LABEL_21;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (v14)
    return v9;
LABEL_21:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, v8);
  return v9;
}

uint64_t WKImageCreateDataURLFromImage()
{
  const char *v0;
  WTF::String *v1;
  void *v2;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::dataURL();
  WTF::String::utf8();
  if (v5)
    v1 = (WTF *)((char *)v5 + 16);
  else
    v1 = 0;
  v3 = WKStringCreateWithUTF8CString(v1, v0);
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v2);
    else
      --*(_DWORD *)v5;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v3;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(unsigned __int16 **a1, unsigned __int8 **a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  v3 = *a1;
  v4 = *a2;
  if (!*((_BYTE *)a1 + 12))
  {
    if (*((_BYTE *)a2 + 12))
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*v3 | (32 * (*v3 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v4))
      {
        v9 = 1;
        do
        {
          v6 = v9;
          if (v2 == v9)
            break;
          v10 = v3[v9] | (32 * (v3[v9] - 65 < 0x1A));
          ++v9;
        }
        while (v10 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4[v6]));
        return v6 >= v2;
      }
    }
    else
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*v3 | (32 * (*v3 - 65 < 0x1A))) == (*(unsigned __int16 *)v4 | (32
                                                                                       * (*(unsigned __int16 *)v4
                                                                                        - 65 < 0x1A))))
      {
        v16 = 1;
        do
        {
          v17 = v16;
          if (v2 == v16)
            break;
          v18 = v3[v16] | (32 * (v3[v16] - 65 < 0x1A));
          ++v16;
        }
        while (v18 == (*(unsigned __int16 *)&v4[2 * v17] | (32
                                                           * (*(unsigned __int16 *)&v4[2 * v17] - 65 < 0x1A))));
        return v17 >= v2;
      }
    }
    return 0;
  }
  if (!*((_BYTE *)a2 + 12))
  {
    if (!(_DWORD)v2)
      return 1;
    if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v3))
    {
      v11 = 1;
      do
      {
        v6 = v11;
        if (v2 == v11)
          break;
        v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v3 + v11));
        v13 = *(unsigned __int16 *)&v4[2 * v11] | (32 * (*(unsigned __int16 *)&v4[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v13 == v12);
      return v6 >= v2;
    }
    return 0;
  }
  if (!(_DWORD)v2)
    return 1;
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v3) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + *v4))
    return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v3 + v5));
    v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4[v5++]);
  }
  while (v7 == v8);
  return v6 >= v2;
}

void API::URL::parseURLIfNecessary(API::URL *this)
{
  int v1;
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;

  v1 = (_DWORD)this + 24;
  if (!*((_QWORD *)this + 3))
  {
    v3 = (WTF::StringImpl **)((char *)this + 16);
    v4 = WTF::fastMalloc((WTF *)0x28);
    v5 = WTF::URL::URL(v4, v3);
    v6 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v5;
    if (v6)
      std::default_delete<WTF::URL>::operator()[abi:sn180100](v1, v6);
  }
}

uint64_t API::Error::Error(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  int v8;
  const void *v9;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34AD190;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 72) = v8;
  v9 = *(const void **)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v9;
  if (v9)
    CFRetain(v9);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 72);
  return a1;
}

void WebKit::SmartMagnificationController::~SmartMagnificationController(WebKit::SmartMagnificationController *this)
{
  void *v2;

  *(_QWORD *)this = off_1E34CD958;
  IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 152, 0x89u, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 1896));
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::SmartMagnificationController::~SmartMagnificationController(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::SmartMagnificationController::zoomFactorForTargetRect(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, double a7, double a8)
{
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  uint64_t v16;

  if ((a2 & 1) == 0)
  {
    a3 = a3 - (float)(a5 * 0.05);
    a5 = (float)(a5 * 0.05) + (float)(a5 + (float)(a5 * 0.05));
    a4 = a4 - (float)(a6 * 0.05);
    a6 = (float)(a6 * 0.05) + (float)(a6 + (float)(a6 * 0.05));
  }
  if (a7 >= 0.0)
    v10 = a7;
  else
    v10 = 0.0;
  if (a8 <= 1.6)
    v11 = a8;
  else
    v11 = 1.6;
  objc_msgSend(*(id *)(a1 + 24), "_contentZoomScale", __PAIR64__(LODWORD(a4), LODWORD(a3)), __PAIR64__(LODWORD(a6), LODWORD(a5)), *(_QWORD *)&v10, *(_QWORD *)&v11);
  v13 = v12;
  result = objc_msgSend(*(id *)(a1 + 24), "_targetContentZoomScaleForRect:currentScale:fitEntireRect:minimumScale:maximumScale:", &v16, a2);
  if (v15 == v13)
    return objc_msgSend(*(id *)(a1 + 24), "_initialScaleFactor");
  return result;
}

uint64_t WebKit::SmartMagnificationController::didCollectGeometryForSmartMagnificationGesture(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, float a7, float a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v20;
  double v21;
  PAL *v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t result;
  void *v37;
  double v38;
  double v39;

  if (a7 <= 0.0 || a8 <= 0.0)
    goto LABEL_13;
  v21 = a13;
  v20 = a14;
  if (a13 < 0.0)
    v21 = 0.0;
  if (a14 > 1.6)
    v20 = 1.6;
  v38 = v21;
  v39 = v20;
  v22 = (PAL *)objc_msgSend(*(id *)(a1 + 24), "bounds");
  if (v23 <= *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 2280))
    v24 = 60.0;
  else
    v24 = PAL::currentUserInterfaceIdiomIsSmallScreen(v22) ? 100.0 : 150.0;
  v25 = *(void **)(a1 + 24);
  WebCore::FloatRect::operator CGRect();
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  WebCore::FloatPoint::operator CGPoint();
  result = objc_msgSend(v25, "_zoomToRect:withOrigin:fitEntireRect:minimumScale:maximumScale:minimumScrollDistance:", a2, v27, v29, v31, v33, v34, v35, v38, v39, *(_QWORD *)&v24);
  if ((result & 1) == 0)
  {
LABEL_13:
    v37 = *(void **)(a1 + 24);
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v37, "_zoomToInitialScaleWithOrigin:");
  }
  return result;
}

uint64_t WebKit::SmartMagnificationController::scrollToRect(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *(void **)(a1 + 24);
  WebCore::FloatRect::operator CGRect();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  WebCore::FloatPoint::operator CGPoint();
  return objc_msgSend(v1, "_scrollToRect:withOrigin:minimumScrollDistance:", v3, v5, v7, v9, v10, v11, 0.0);
}

BOOL WebKit::TextChecker::setContinuousSpellCheckingEnabled(WebKit::TextChecker *this)
{
  int v1;
  __int16 *v2;
  int v3;

  v1 = (int)this;
  v2 = WebKit::mutableState(this);
  v3 = word_1ECE72C44;
  if (word_1ECE72C44 != v1)
  {
    WebKit::mutableState((WebKit *)v2);
    LOBYTE(word_1ECE72C44) = v1;
  }
  return v3 != v1;
}

__int16 *WebKit::TextChecker::setGrammarCheckingEnabled(WebKit::TextChecker *this)
{
  int v1;
  __int16 *result;

  v1 = (int)this;
  result = WebKit::mutableState(this);
  if (HIBYTE(word_1ECE72C44) != v1)
  {
    result = WebKit::mutableState((WebKit *)result);
    HIBYTE(word_1ECE72C44) = v1;
  }
  return result;
}

void WebKit::TextChecker::closeSpellDocumentWithTag(WebKit::TextChecker *this)
{
  _QWORD *v1;
  uint64_t v2;
  WebKit::TextChecker *v3;

  v3 = this;
  {
    WebKit::spellDocumentTagMap(void)::tagMap = 0;
  }
  v1 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::spellDocumentTagMap(void)::tagMap, &v3);
  if (WebKit::spellDocumentTagMap(void)::tagMap)
  {
    v2 = WebKit::spellDocumentTagMap(void)::tagMap
       + 16 * *(unsigned int *)(WebKit::spellDocumentTagMap(void)::tagMap - 4);
    if ((_QWORD *)v2 == v1)
      return;
  }
  else
  {
    if (!v1)
      return;
    v2 = 0;
  }
  if ((_QWORD *)v2 != v1)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(&WebKit::spellDocumentTagMap(void)::tagMap, v1);
}

void WebKit::TextChecker::checkTextOfParagraph(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  const void *v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  void *v59;
  WTF *v60;
  WTF *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  void *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  void *v82;
  WTF *v83;
  WTF *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  char *v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  CFTypeRef v111;
  void *v112;
  char v113;
  id obj;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF *v120;
  WTF::StringImpl *v121[2];
  WTF *v122[2];
  WTF::StringImpl *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[24];
  __int128 v129;
  WTF::StringImpl *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  CFTypeRef cf;
  _QWORD v136[2];
  _BYTE v137[128];
  _BYTE v138[128];
  const __CFString *v139;
  uint64_t v140;
  _QWORD v141[3];

  v141[1] = *MEMORY[0x1E0C80C00];
  v136[0] = a2;
  v136[1] = a3;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  if ((a5 & 1) == 0)
    return;
  {
    v9 = WebKit::spellDocumentTagMap(void)::tagMap;
    if (WebKit::spellDocumentTagMap(void)::tagMap)
    {
LABEL_5:
      v10 = *(_DWORD *)(v9 - 8);
      goto LABEL_6;
    }
  }
  else
  {
    WebKit::spellDocumentTagMap(void)::tagMap = 0;
  }
  WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,WTF::RetainPtr<UITextChecker>,WTF::DefaultHash<long long>,WTF::HashTraits<long long>,WTF::HashTraits<WTF::RetainPtr<UITextChecker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long long>>::expand(0);
  v9 = WebKit::spellDocumentTagMap(void)::tagMap;
  if (WebKit::spellDocumentTagMap(void)::tagMap)
    goto LABEL_5;
  v10 = 0;
LABEL_6:
  v11 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (uint64_t *)(v9 + 16 * v14);
  v16 = *v15;
  if (!*v15)
  {
LABEL_14:
    v19 = (const void *)v15[1];
    *v15 = a1;
    v15[1] = 0;
    if (v19)
      CFRelease(v19);
    if (WebKit::spellDocumentTagMap(void)::tagMap)
      v20 = *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12) = v20;
    if (WebKit::spellDocumentTagMap(void)::tagMap)
      v21 = *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 16) + v21);
    v23 = *(unsigned int *)(WebKit::spellDocumentTagMap(void)::tagMap - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
      {
LABEL_25:
        v24 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEAAA8]), "_initWithAsynchronousLoading:", 1);
        v25 = (const void *)v15[1];
        v15[1] = v24;
        if (v25)
          CFRelease(v25);
        goto LABEL_27;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_25;
    }
    v15 = WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,WTF::RetainPtr<UITextChecker>,WTF::DefaultHash<long long>,WTF::HashTraits<long long>,WTF::HashTraits<WTF::RetainPtr<UITextChecker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long long>>::expand(v15);
    goto LABEL_25;
  }
  v17 = 0;
  v18 = 1;
  while (v16 != a1)
  {
    if (v16 == -1)
      v17 = v15;
    v14 = (v14 + v18) & v10;
    v15 = (uint64_t *)(v9 + 16 * v14);
    v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(v9 - 16);
        v15 = v17;
      }
      goto LABEL_14;
    }
  }
LABEL_27:
  v26 = (void *)v15[1];
  if (v26)
  {
    v27 = (void *)v15[1];
    CFRetain(v26);
    v26 = v27;
  }
  v112 = v26;
  if ((objc_msgSend(v26, "_doneLoading") & 1) == 0)
    goto LABEL_134;
  v28 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA6F8], "sharedInputModeController"), "currentInputMode");
  if (objc_msgSend((id)objc_msgSend(v28, "multilingualLanguages"), "count"))
  {
    v29 = objc_msgSend(v28, "multilingualLanguages");
LABEL_34:
    v30 = v29;
    goto LABEL_35;
  }
  if (objc_msgSend(v28, "primaryLanguage"))
  {
    v141[0] = objc_msgSend(v28, "languageWithRegion");
    v29 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v141, 1);
    goto LABEL_34;
  }
  v30 = MEMORY[0x1E0C9AA60];
LABEL_35:
  WTF::StringView::createNSStringWithoutCopying((WTF::StringView *)v136);
  v31 = objc_msgSend((id)cf, "length");
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v99 = 0;
    do
    {
      v100 = objc_msgSend(v112, "rangeOfMisspelledWordInString:range:startingAt:wrap:languages:", cf, 0, v31, v99, 0, v30);
      v102 = v100;
      if (v100 == 0x7FFFFFFFFFFFFFFFLL)
        break;
      v103 = v101;
      v129 = 0uLL;
      v130 = 0;
      v128[0] = 1;
      *(_QWORD *)&v128[8] = v100;
      *(_QWORD *)&v128[16] = v101;
      v104 = *(_DWORD *)(a6 + 12);
      if (v104 == *(_DWORD *)(a6 + 8))
      {
        WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(a6, (unint64_t)v128);
      }
      else
      {
        v105 = *(_QWORD *)a6 + 48 * v104;
        v106 = *(_QWORD *)&v128[16];
        *(_OWORD *)v105 = *(_OWORD *)v128;
        *(_QWORD *)(v105 + 24) = 0;
        *(_QWORD *)(v105 + 32) = 0;
        *(_QWORD *)(v105 + 16) = v106;
        v107 = v129;
        *(_QWORD *)&v129 = 0;
        *(_QWORD *)(v105 + 24) = v107;
        LODWORD(v107) = DWORD2(v129);
        DWORD2(v129) = 0;
        *(_DWORD *)(v105 + 32) = v107;
        LODWORD(v107) = HIDWORD(v129);
        HIDWORD(v129) = 0;
        *(_DWORD *)(v105 + 36) = v107;
        v108 = v130;
        v130 = 0;
        *(_QWORD *)(v105 + 40) = v108;
        ++*(_DWORD *)(a6 + 12);
      }
      v109 = v130;
      v130 = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
          WTF::StringImpl::destroy(v109, v101);
        else
          *(_DWORD *)v109 -= 2;
      }
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v101);
      v110 = objc_msgSend((id)cf, "length");
      v99 = (char *)v103 + v102;
    }
    while ((unint64_t)v103 + v102 < v110);
    goto LABEL_132;
  }
  v32 = a5;
  v33 = 6;
  if ((a5 & 2) == 0)
    v33 = 2;
  if ((a5 & 0x40) != 0)
    v34 = v33 | 0x200;
  else
    v34 = v33;
  v139 = CFSTR("InsertionPoint");
  v140 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  obj = (id)objc_msgSend(v112, "checkString:range:types:languages:options:", cf, 0, v31, v34, v30, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v140, &v139, 1));
  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v131, v138, 16);
  if (!v35)
  {
LABEL_132:
    v111 = cf;
    cf = 0;
    if (v111)
      CFRelease(v111);
LABEL_134:
    if (v112)
      CFRelease(v112);
    return;
  }
  v116 = *(_QWORD *)v132;
  v113 = v32;
LABEL_43:
  v36 = 0;
  v117 = v35;
  while (1)
  {
    if (*(_QWORD *)v132 != v116)
      objc_enumerationMutation(obj);
    v118 = v36;
    v37 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * v36);
    v38 = objc_msgSend(v37, "resultType");
    v39 = objc_msgSend(v37, "range");
    v41 = v39;
    v42 = v40;
    if (v38 == 512)
    {
      if ((v32 & 0x40) == 0)
        goto LABEL_117;
      v129 = 0uLL;
      v130 = 0;
      v128[0] = 64;
      *(_QWORD *)&v128[8] = v39;
      *(_QWORD *)&v128[16] = v40;
      MEMORY[0x19AEABCC8](v121, objc_msgSend(v37, "replacementString"));
      v70 = v121[0];
      v121[0] = 0;
      v71 = v130;
      v130 = v70;
      if (v71)
      {
        v72 = *(_DWORD *)v71 - 2;
        if (*(_DWORD *)v71 != 2)
        {
LABEL_88:
          *(_DWORD *)v71 = v72;
          goto LABEL_89;
        }
        WTF::StringImpl::destroy(v71, v69);
        v71 = v121[0];
        v121[0] = 0;
        if (v71)
        {
          v72 = *(_DWORD *)v71 - 2;
          if (*(_DWORD *)v71 == 2)
          {
            WTF::StringImpl::destroy(v71, v73);
            goto LABEL_89;
          }
          goto LABEL_88;
        }
      }
LABEL_89:
      if ((objc_opt_respondsToSelector() & 1) == 0)
        goto LABEL_110;
      v74 = (void *)objc_msgSend(v37, "detail");
      if (!v74)
        goto LABEL_110;
      v75 = WTF::fastMalloc((WTF *)0x28);
      DWORD2(v129) = 1;
      *(_QWORD *)&v129 = v75;
      v123 = 0;
      *(_OWORD *)v121 = 0u;
      *(_OWORD *)v122 = 0u;
      v121[0] = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(v74, "objectForKey:", CFSTR("NSGrammarRange")), "rangeValue");
      v121[1] = v76;
      MEMORY[0x19AEABCC8](&v119, objc_msgSend(v74, "objectForKey:", CFSTR("NSGrammarUserDescription")));
      v78 = v119;
      v119 = 0;
      v79 = v123;
      v123 = v78;
      if (v79)
      {
        v80 = *(_DWORD *)v79 - 2;
        if (*(_DWORD *)v79 != 2)
        {
LABEL_95:
          *(_DWORD *)v79 = v80;
          goto LABEL_96;
        }
        WTF::StringImpl::destroy(v79, v77);
        v79 = v119;
        v119 = 0;
        if (v79)
        {
          v80 = *(_DWORD *)v79 - 2;
          if (*(_DWORD *)v79 == 2)
          {
            WTF::StringImpl::destroy(v79, v81);
            goto LABEL_96;
          }
          goto LABEL_95;
        }
      }
LABEL_96:
      WTF::makeVector<WTF::String>((void *)objc_msgSend(v74, "objectForKey:", CFSTR("NSGrammarCorrections")), (uint64_t)&v119);
      if (HIDWORD(v122[1]))
        WTF::VectorDestructor<true,WTF::String>::destruct(v122[0], (WTF *)((char *)v122[0] + 8 * HIDWORD(v122[1])));
      v83 = v122[0];
      if (v122[0])
      {
        v122[0] = 0;
        LODWORD(v122[1]) = 0;
        WTF::fastFree(v83, v82);
      }
      v122[0] = v119;
      v84 = v120;
      v119 = 0;
      v120 = 0;
      v122[1] = v84;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v82);
      if (HIDWORD(v129) == DWORD2(v129))
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>((uint64_t)&v129, (unint64_t)v121);
      }
      else
      {
        v90 = v129 + 40 * HIDWORD(v129);
        *(_OWORD *)v90 = *(_OWORD *)v121;
        *(_QWORD *)(v90 + 16) = 0;
        *(_QWORD *)(v90 + 24) = 0;
        v91 = v122[0];
        v122[0] = 0;
        *(_QWORD *)(v90 + 16) = v91;
        LODWORD(v91) = v122[1];
        LODWORD(v122[1]) = 0;
        *(_DWORD *)(v90 + 24) = (_DWORD)v91;
        LODWORD(v91) = HIDWORD(v122[1]);
        HIDWORD(v122[1]) = 0;
        *(_DWORD *)(v90 + 28) = (_DWORD)v91;
        v92 = v123;
        v123 = 0;
        *(_QWORD *)(v90 + 32) = v92;
        ++HIDWORD(v129);
      }
      v93 = v123;
      v123 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v85);
        else
          *(_DWORD *)v93 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v122, v85);
LABEL_110:
      v43 = a6;
      v44 = *(_DWORD *)(a6 + 12);
      if (v44 == *(_DWORD *)(a6 + 8))
        goto LABEL_50;
      goto LABEL_111;
    }
    if (v38 == 4)
      break;
    if (v38 != 2)
      goto LABEL_117;
    v129 = 0uLL;
    v130 = 0;
    v128[0] = 1;
    *(_QWORD *)&v128[8] = v39;
    *(_QWORD *)&v128[16] = v40;
    v43 = a6;
    v44 = *(_DWORD *)(a6 + 12);
    if (v44 == *(_DWORD *)(a6 + 8))
    {
LABEL_50:
      WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(v43, (unint64_t)v128);
      goto LABEL_112;
    }
LABEL_111:
    v94 = *(_QWORD *)v43 + 48 * v44;
    v95 = *(_QWORD *)&v128[16];
    *(_OWORD *)v94 = *(_OWORD *)v128;
    *(_QWORD *)(v94 + 24) = 0;
    *(_QWORD *)(v94 + 32) = 0;
    *(_QWORD *)(v94 + 16) = v95;
    v96 = v129;
    *(_QWORD *)&v129 = 0;
    *(_QWORD *)(v94 + 24) = v96;
    LODWORD(v96) = DWORD2(v129);
    DWORD2(v129) = 0;
    *(_DWORD *)(v94 + 32) = v96;
    LODWORD(v96) = HIDWORD(v129);
    HIDWORD(v129) = 0;
    *(_DWORD *)(v94 + 36) = v96;
    v97 = v130;
    v130 = 0;
    *(_QWORD *)(v94 + 40) = v97;
    ++*(_DWORD *)(v43 + 12);
LABEL_112:
    v98 = v130;
    v130 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
        WTF::StringImpl::destroy(v98, v40);
      else
        *(_DWORD *)v98 -= 2;
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v40);
LABEL_117:
    v36 = v118 + 1;
    if (v118 + 1 == v117)
    {
      v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v131, v138, 16);
      if (!v35)
        goto LABEL_132;
      goto LABEL_43;
    }
  }
  if ((v32 & 2) == 0)
    goto LABEL_117;
  v128[0] = 0;
  *(_OWORD *)&v128[8] = 0u;
  v129 = 0u;
  v130 = 0;
  v45 = (void *)objc_msgSend(v37, "grammarDetails");
  v128[0] = 2;
  *(_QWORD *)&v128[8] = v41;
  *(_QWORD *)&v128[16] = v42;
  v46 = objc_msgSend(v45, "count");
  if (!v46)
    goto LABEL_55;
  if (v46 < 0x6666667)
  {
    v47 = 40 * v46;
    v48 = WTF::fastMalloc((WTF *)(40 * v46));
    DWORD2(v129) = v47 / 0x28;
    *(_QWORD *)&v129 = v48;
LABEL_55:
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v49 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v124, v137, 16);
    if (!v49)
    {
LABEL_80:
      v68 = *(_DWORD *)(a6 + 12);
      if (v68 == *(_DWORD *)(a6 + 8))
      {
        WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(a6, (unint64_t)v128);
      }
      else
      {
        v86 = *(_QWORD *)a6 + 48 * v68;
        v87 = *(_QWORD *)&v128[16];
        *(_OWORD *)v86 = *(_OWORD *)v128;
        *(_QWORD *)(v86 + 24) = 0;
        *(_QWORD *)(v86 + 32) = 0;
        *(_QWORD *)(v86 + 16) = v87;
        v88 = v129;
        *(_QWORD *)&v129 = 0;
        *(_QWORD *)(v86 + 24) = v88;
        LODWORD(v88) = DWORD2(v129);
        DWORD2(v129) = 0;
        *(_DWORD *)(v86 + 32) = v88;
        LODWORD(v88) = HIDWORD(v129);
        HIDWORD(v129) = 0;
        *(_DWORD *)(v86 + 36) = v88;
        v89 = v130;
        v130 = 0;
        *(_QWORD *)(v86 + 40) = v89;
        ++*(_DWORD *)(a6 + 12);
      }
      v32 = v113;
      goto LABEL_112;
    }
    v50 = *(_QWORD *)v125;
    while (2)
    {
      v51 = 0;
LABEL_58:
      if (*(_QWORD *)v125 != v50)
        objc_enumerationMutation(v45);
      v52 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * v51);
      v123 = 0;
      *(_OWORD *)v121 = 0u;
      *(_OWORD *)v122 = 0u;
      v121[0] = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(v52, "objectForKey:", CFSTR("NSGrammarRange")), "rangeValue");
      v121[1] = v53;
      MEMORY[0x19AEABCC8](&v119, objc_msgSend(v52, "objectForKey:", CFSTR("NSGrammarUserDescription")));
      v55 = v119;
      v119 = 0;
      v56 = v123;
      v123 = v55;
      if (v56)
      {
        v57 = *(_DWORD *)v56 - 2;
        if (*(_DWORD *)v56 != 2)
          goto LABEL_64;
        WTF::StringImpl::destroy(v56, v54);
        v56 = v119;
        v119 = 0;
        if (v56)
        {
          v57 = *(_DWORD *)v56 - 2;
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v58);
          else
LABEL_64:
            *(_DWORD *)v56 = v57;
        }
      }
      WTF::makeVector<WTF::String>((void *)objc_msgSend(v52, "objectForKey:", CFSTR("NSGrammarCorrections")), (uint64_t)&v119);
      if (HIDWORD(v122[1]))
        WTF::VectorDestructor<true,WTF::String>::destruct(v122[0], (WTF *)((char *)v122[0] + 8 * HIDWORD(v122[1])));
      v60 = v122[0];
      if (v122[0])
      {
        v122[0] = 0;
        LODWORD(v122[1]) = 0;
        WTF::fastFree(v60, v59);
      }
      v122[0] = v119;
      v61 = v120;
      v119 = 0;
      v120 = 0;
      v122[1] = v61;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v59);
      if (HIDWORD(v129) == DWORD2(v129))
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>((uint64_t)&v129, (unint64_t)v121);
      }
      else
      {
        v63 = v129 + 40 * HIDWORD(v129);
        *(_OWORD *)v63 = *(_OWORD *)v121;
        *(_QWORD *)(v63 + 16) = 0;
        *(_QWORD *)(v63 + 24) = 0;
        v64 = v122[0];
        v122[0] = 0;
        *(_QWORD *)(v63 + 16) = v64;
        LODWORD(v64) = v122[1];
        LODWORD(v122[1]) = 0;
        *(_DWORD *)(v63 + 24) = (_DWORD)v64;
        LODWORD(v64) = HIDWORD(v122[1]);
        HIDWORD(v122[1]) = 0;
        *(_DWORD *)(v63 + 28) = (_DWORD)v64;
        v65 = v123;
        v123 = 0;
        *(_QWORD *)(v63 + 32) = v65;
        ++HIDWORD(v129);
      }
      v66 = v123;
      v123 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v62);
        else
          *(_DWORD *)v66 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v122, v62);
      if (v49 == ++v51)
      {
        v67 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v124, v137, 16);
        v49 = v67;
        if (!v67)
          goto LABEL_80;
        continue;
      }
      goto LABEL_58;
    }
  }
  __break(0xC471u);
}

void sub_19728066C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, a2);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c98_ZTSKZ85__UIScrollView_WebKitInternal___wk_setContentOffsetAndShowScrollIndicators_animated__E3__0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

void WebKit::createUIAlertController(WebKit *this@<X0>, NSString *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", this);
  v8 = objc_msgSend(MEMORY[0x1E0CEA5E8], "preferredFontForTextStyle:", *MEMORY[0x1E0CEB568]);
  v9 = -[WebKit length](this, "length");
  objc_msgSend(v7, "addAttribute:value:range:", *MEMORY[0x1E0CEA098], v8, 0, v9);
  v10 = objc_alloc_init(MEMORY[0x1E0CEA2E8]);
  *a3 = v10;
  objc_msgSend(v10, "_setAttributedTitle:", v7);
  objc_msgSend(v10, "setTitle:", this);
  objc_msgSend(v10, "setMessage:", a2);
  objc_msgSend(v10, "setPreferredStyle:", 1);
  if (v7)
    CFRelease(v7);
}

void sub_197280DFC(_Unwind_Exception *exception_object)
{
  const void *v1;
  _QWORD *v2;
  const void *v3;

  *v2 = 0;
  if (v3)
    CFRelease(v3);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::scrollViewForTouches(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(_QWORD *)v9;
LABEL_3:
  v5 = 0;
  while (1)
  {
    if (*(_QWORD *)v9 != v4)
      objc_enumerationMutation(a1);
    v6 = objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v5), "view");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (v6)
        return v6;
    }
    if (v3 == ++v5)
    {
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        goto LABEL_3;
      return 0;
    }
  }
}

void WebKit::ViewGestureController::beginSwipeGesture(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebPageProxy *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  WebKit::ViewSnapshot *v26;
  uint64_t v27;
  uint64_t v28;
  CGFloat v29;
  CGFloat v30;
  id v31;
  void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int v46;
  float v47;
  int v48;
  uint64_t v49;
  WebCore *v50;
  Color *v51;
  uint64_t v52;
  CFTypeRef v53;
  void *v54;
  double v55;
  id v56;
  void *v57;
  const void *v58;
  id v59;
  void *v60;
  const void *v61;
  id v62;
  id v63;
  uint64_t v64;
  const void *v65;
  id v66;
  const void *v67;
  double *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  NSObject *v79;
  const char *v80;
  float v81;
  char v82;
  uint64_t v83;
  const void *v84;
  _QWORD v85[6];
  uint64_t v86;
  _QWORD v87[5];
  uint64_t v88;
  CFTypeRef cf;
  uint64_t v90;
  float32x2_t v91;
  uint8_t buf[16];
  unsigned __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 24))
    return;
  WebKit::ViewGestureController::willBeginGesture(a1, 1);
  WebKit::WebPageProxy::recordAutomaticNavigationSnapshot(*(WebKit::WebPageProxy **)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 72);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
    v9 = 0;
    v10 = (uint64_t *)(a1 + 80);
    v11 = v8;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v8 = *(_QWORD *)(a1 + 16);
    v10 = (uint64_t *)(a1 + 80);
    v9 = 1;
    if (!v8)
      goto LABEL_7;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v12 = v8;
LABEL_7:
  v13 = *v10;
  *v10 = v12;
  if (v13)
  {
    CFRelease(*(CFTypeRef *)(v13 + 8));
    v12 = *v10;
  }
  v14 = *(_QWORD *)(v12 + 592);
  v15 = WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(v14, a3 != 0);
  if (!v15)
  {
    v79 = qword_1ECE71A00;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_ERROR))
    {
      v80 = "back";
      if (a3)
        v80 = "forward";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v80;
      _os_log_error_impl(&dword_196BCC000, v79, OS_LOG_TYPE_ERROR, "Failed to find %s item when beginning swipe.", buf, 0xCu);
    }
    WebKit::ViewGestureController::didEndGesture((WebKit::ViewGestureController *)a1);
    if ((v9 & 1) == 0)
      goto LABEL_78;
    return;
  }
  v16 = v15;
  v83 = v11;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  WebKit::WebPageProxy::navigationGestureDidBegin(*(WebKit::WebPageProxy **)(a1 + 80));
  v17 = *(WebKit::WebPageProxy **)(a1 + 16);
  if (*(WebKit::WebPageProxy **)(a1 + 80) != v17)
  {
    WebKit::WebPageProxy::navigationGestureDidBegin(v17);
    v18 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 80) != v18)
    {
      v19 = *(_QWORD *)(v18 + 592);
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        if (*(_QWORD *)(v20 + 8) && *(_BYTE *)(v19 + 48))
        {
          v21 = *(_QWORD *)(v19 + 40);
          if (v21 < *(unsigned int *)(v19 + 36))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * v21);
            if (!v22)
              goto LABEL_27;
            v23 = *(_QWORD *)(v14 + 16);
            if (!v23)
              goto LABEL_23;
            v23 = *(_QWORD *)(v23 + 8);
            if (!v23)
              goto LABEL_23;
            if (!*(_BYTE *)(v14 + 48))
            {
              v23 = 0;
              goto LABEL_23;
            }
            v24 = *(_QWORD *)(v14 + 40);
            if (v24 < *(unsigned int *)(v14 + 36))
            {
              v23 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8 * v24);
LABEL_23:
              v25 = *(_DWORD **)(v22 + 336);
              if (v25)
                ++*v25;
              v26 = *(WebKit::ViewSnapshot **)(v23 + 336);
              *(_QWORD *)(v23 + 336) = v25;
              if (v26)
                WTF::RefCounted<WebKit::ViewSnapshot>::deref(v26);
              goto LABEL_27;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x1972817C8);
        }
      }
    }
  }
LABEL_27:
  *(_OWORD *)buf = 0u;
  v93 = 0u;
  objc_msgSend(*(id *)(a1 + 104), "frame");
  *(_QWORD *)buf = v27;
  *(_QWORD *)&buf[8] = v28;
  *(CGFloat *)&v93 = v29;
  *((CGFloat *)&v93 + 1) = v30;
  v31 = objc_alloc_init(MEMORY[0x1E0CEABB8]);
  v82 = v9;
  v84 = v31;
  v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEABB0]), "initWithFrame:", *(double *)buf, *(double *)&buf[8], v93);
  v33 = *(const void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v32;
  if (v33)
  {
    CFRelease(v33);
    v32 = *(void **)(a1 + 120);
  }
  objc_msgSend(v32, "setUserInteractionEnabled:", 0);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 120), "layer"), "setName:", CFSTR("SwipeSnapshot"));
  v34 = (const void *)objc_msgSend(MEMORY[0x1E0CEA478], "whiteColor");
  v35 = v34;
  if (v34)
    CFRetain(v34);
  v36 = *(_QWORD *)(v16 + 336);
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 16);
    v38 = 692;
    if (!*(_BYTE *)(v37 + 696))
      v38 = 688;
    v81 = *(float *)(v37 + v38);
    WebCore::FloatSize::FloatSize((WebCore::FloatSize *)&v91, (const CGSize *)&v93);
    v91 = vmul_n_f32(v91, v81);
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    if (v39)
      v40 = *(_QWORD *)(v39 + 8);
    else
      v40 = 0;
    v41 = *(unsigned __int8 *)(v16 + 160);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 1584))(v40);
    v42 = (*(float (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    v44 = v43;
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 1592))(v40);
    v45 = roundf(v42);
    if (v45 >= 2147500000.0)
    {
      v46 = 0x7FFFFFFF;
    }
    else if (v45 <= -2147500000.0)
    {
      v46 = 0x80000000;
    }
    else
    {
      v46 = (int)v45;
    }
    v47 = roundf(v44);
    if (v47 >= 2147500000.0)
    {
      v48 = 0x7FFFFFFF;
    }
    else if (v47 <= -2147500000.0)
    {
      v48 = 0x80000000;
    }
    else
    {
      v48 = (int)v47;
    }
    v49 = *(_QWORD *)(v36 + 16);
    if (v49
      && v91.f32[0] == (float)*(int *)(v49 + 24)
      && v91.f32[1] == (float)*(int *)(v49 + 28)
      && v81 == *(float *)(v36 + 32)
      && (v41 || v46 == *(_DWORD *)(v36 + 48) && v48 == *(_DWORD *)(v36 + 52)))
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 120), "layer"), "setContents:", WebKit::ViewSnapshot::asLayerContents((WebKit::ViewSnapshot *)v36));
    }
    v50 = (WebCore *)WebCore::Color::Color((WebCore::Color *)&v90, (const Color *)(v36 + 40));
    v52 = v90;
    if ((v90 & 0x4000000000000) != 0)
    {
      WebCore::cocoaColor(v50, v51);
      v53 = cf;
      cf = 0;
      if (v35)
      {
        CFRelease(v35);
        cf = 0;
      }
      v52 = v90;
      v35 = v53;
    }
    if ((v52 & 0x8000000000000) != 0)
    {
      v76 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v76);
        WTF::fastFree((WTF *)v76, v51);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 120), "setBackgroundColor:", v35);
  v54 = (void *)objc_msgSend(*(id *)(a1 + 120), "layer");
  objc_msgSend(v54, "setContentsGravity:", *MEMORY[0x1E0CD2FB0]);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "window"), "screen"), "scale");
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 120), "layer"), "setContentsScale:", v55);
  objc_msgSend(v31, "setView:", *(_QWORD *)(a1 + 120));
  v56 = objc_alloc(MEMORY[0x1E0CEABB0]);
  v57 = (void *)objc_msgSend(v56, "initWithFrame:", *(double *)buf, *(double *)&buf[8], v93);
  v58 = *(const void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v57;
  if (v58)
  {
    CFRelease(v58);
    v57 = *(void **)(a1 + 128);
  }
  objc_msgSend((id)objc_msgSend(v57, "layer"), "setName:", CFSTR("SwipeTransitionContainer"));
  v59 = objc_alloc(MEMORY[0x1E0CEABB0]);
  v60 = (void *)objc_msgSend(v59, "initWithFrame:", *(double *)buf, *(double *)&buf[8], v93);
  v61 = *(const void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v60;
  if (v61)
  {
    CFRelease(v61);
    v60 = *(void **)(a1 + 112);
  }
  objc_msgSend((id)objc_msgSend(v60, "layer"), "setName:", CFSTR("LiveSwipeViewClipping"));
  objc_msgSend(*(id *)(a1 + 112), "setClipsToBounds:", 1);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "superview"), "insertSubview:belowSubview:", *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 104));
  objc_msgSend(*(id *)(a1 + 128), "addSubview:", *(_QWORD *)(a1 + 112));
  objc_msgSend(*(id *)(a1 + 112), "addSubview:", *(_QWORD *)(a1 + 104));
  v62 = objc_alloc_init(MEMORY[0x1E0CEABB8]);
  objc_msgSend(v62, "setView:", *(_QWORD *)(a1 + 112));
  v63 = objc_alloc(MEMORY[0x1E0CEAE20]);
  if (a3)
    v64 = 1;
  else
    v64 = 2;
  v65 = (const void *)objc_msgSend(v63, "initWithCurrentOperation:", v64);
  v66 = objc_alloc_init(MEMORY[0x1E0CEAF50]);
  v67 = *(const void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v66;
  if (v67)
  {
    CFRelease(v67);
    v66 = *(id *)(a1 + 144);
  }
  objc_msgSend(v66, "_setFromViewController:", v62);
  objc_msgSend(*(id *)(a1 + 144), "_setToViewController:", v31);
  objc_msgSend(*(id *)(a1 + 144), "_setContainerView:", *(_QWORD *)(a1 + 128));
  objc_msgSend(*(id *)(a1 + 144), "_setFromStartFrame:", *(double *)buf, *(double *)&buf[8], v93);
  objc_msgSend(*(id *)(a1 + 144), "_setToEndFrame:", *(double *)buf, *(double *)&buf[8], v93);
  v68 = (double *)MEMORY[0x1E0C9D648];
  objc_msgSend(*(id *)(a1 + 144), "_setToStartFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
  objc_msgSend(*(id *)(a1 + 144), "_setFromEndFrame:", *v68, v68[1], v68[2], v68[3]);
  objc_msgSend(*(id *)(a1 + 144), "_setAnimator:", v65);
  objc_msgSend(*(id *)(a1 + 144), "_setInteractor:", a2);
  objc_msgSend(*(id *)(a1 + 144), "_setTransitionIsInFlight:", 1);
  *(_BYTE *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 163) = 0;
  v69 = *(void **)(a1 + 144);
  v70 = MEMORY[0x1E0C809B0];
  v87[0] = MEMORY[0x1E0C809B0];
  v87[1] = 3321888768;
  v87[2] = ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke;
  v87[3] = &__block_descriptor_48_e8_40c107_ZTSN3WTF6RefPtrIN6WebKit22WebBackForwardListItemENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE_e53_v32__0B8d12B20___UIViewControllerTransitionContext_24l;
  v87[4] = a1;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  v88 = v16;
  objc_msgSend(v69, "_setInteractiveUpdateHandler:", v87);
  v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 744);
  v72 = *(_QWORD *)(a1 + 96);
  v73 = *(void **)(a1 + 144);
  v85[0] = v70;
  v85[1] = 3321888768;
  v85[2] = ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke_167;
  v85[3] = &__block_descriptor_56_e8_32c124_ZTSKZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionEE3__0_e47_v20__0___UIViewControllerTransitionContext_8B16l;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  v85[4] = v71;
  v85[5] = v72;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  v86 = v16;
  objc_msgSend(v73, "_setCompletionHandler:", v85);
  CFRelease(*(CFTypeRef *)(v16 + 8));
  objc_msgSend(a2, "setAnimationController:", v65);
  objc_msgSend(a2, "startInteractiveTransition:", *(_QWORD *)(a1 + 144));
  v74 = v86;
  v86 = 0;
  if (v74)
    CFRelease(*(CFTypeRef *)(v74 + 8));
  v75 = v88;
  v88 = 0;
  if (v75)
    CFRelease(*(CFTypeRef *)(v75 + 8));
  if (v65)
    CFRelease(v65);
  if (v62)
    CFRelease(v62);
  if (v35)
    CFRelease(v35);
  v11 = v83;
  if (v84)
    CFRelease(v84);
  CFRelease(*(CFTypeRef *)(v16 + 8));
  if ((v82 & 1) == 0)
LABEL_78:
    CFRelease(*(CFTypeRef *)(v11 + 8));
}

void sub_1972817D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, CFTypeRef a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  if (cf)
    CFRelease(cf);
  if (a17)
    CFRelease(a17);
  CFRelease(*(CFTypeRef *)(v30 + 8));
  if ((a15 & 1) == 0)
    CFRelease(*(CFTypeRef *)(a16 + 8));
  _Unwind_Resume(a1);
}

void ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke(uint64_t a1, int a2, int a3)
{
  if (a2)
    WebKit::ViewGestureController::willEndSwipeGesture(*(WebKit::ViewGestureController **)(a1 + 32), *(const Color ***)(a1 + 40), a3 ^ 1);
}

void WebKit::ViewGestureController::willEndSwipeGesture(WebKit::ViewGestureController *this, const Color **a2, int a3)
{
  char v3;
  const Color *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WebKit::WebBackForwardListItem *v12;
  _QWORD *v13;
  const Color *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v3 = a3;
  *((_BYTE *)this + 160) = 1;
  WebKit::WebPageProxy::navigationGestureWillEnd(*((WebKit::WebPageProxy **)this + 10), a3 ^ 1u, (WebKit::WebBackForwardListItem *)a2);
  if ((v3 & 1) == 0)
  {
    *((_QWORD *)this + 19) = 0;
    v6 = a2[42];
    if (v6)
      *((_QWORD *)this + 19) = (unint64_t)(float)((float)v6[3].m_colorAndFlags * 0.5);
    *((_BYTE *)this + 162) = 0;
    WebKit::WebPageProxy::goToBackForwardItem(*((_QWORD *)this + 10), (uint64_t)a2, 3u, &v21);
    v8 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v21;
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
    v9 = *(_QWORD *)(*((_QWORD *)this + 10) + 592);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10 && *(_QWORD *)(v10 + 8) && *(_BYTE *)(v9 + 48))
    {
      v11 = *(_QWORD *)(v9 + 40);
      if (v11 >= *(unsigned int *)(v9 + 36))
      {
        __break(0xC471u);
        return;
      }
      v12 = *(WebKit::WebBackForwardListItem **)(*(_QWORD *)(v9 + 24) + 8 * v11);
      if (v12 && WebKit::WebBackForwardListItem::itemIsClone(v12, (const WebKit::WebBackForwardListItem *)a2, v7))
      {
        WebKit::ViewGestureController::removeSwipeSnapshot((id *)this);
        return;
      }
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E34CDBF8;
    v13[1] = this;
    v21 = (uint64_t)v13;
    WebKit::ViewGestureController::SnapshotRemovalTracker::start((uint64_t)this + 168, 62, &v21);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v14 = a2[42];
    if (v14)
    {
      WebCore::Color::Color((WebCore::Color *)&v21, v14 + 5);
      WebCore::Color::operator=();
      if ((v21 & 0x8000000000000) != 0)
      {
        v18 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v15);
        }
      }
      v16 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
      if (v16)
        v17 = *(_QWORD *)(v16 + 8);
      else
        v17 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1376))(v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
    }
  }
}

void sub_197281C4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_40c107_ZTSN3WTF6RefPtrIN6WebKit22WebBackForwardListItemENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(v3 + 8));
  v2[5] = v3;
  return result;
}

void __destroy_helper_block_e8_40c107_ZTSN3WTF6RefPtrIN6WebKit22WebBackForwardListItemENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke_167(uint64_t *a1, void *a2, int a3)
{
  WebKit::ViewGestureController *v6;
  WebKit::ViewGestureController *v7;
  const Color **v8;
  const void *v9;
  const void *v10;
  CFTypeRef *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  v6 = (WebKit::ViewGestureController *)WebKit::ViewGestureController::controllerForGesture(a1[4], a1[5]);
  if (v6)
  {
    v7 = v6;
    v8 = (const Color **)a1[6];
    if (!*((_BYTE *)v6 + 160))
      WebKit::ViewGestureController::willEndSwipeGesture(v6, v8, a3 ^ 1);
    *((_BYTE *)v7 + 163) = 1;
    objc_msgSend(a2, "_setTransitionIsInFlight:", 0);
    objc_msgSend(a2, "_setInteractor:", 0);
    objc_msgSend(a2, "_setAnimator:", 0);
    objc_msgSend((id)objc_msgSend(*((id *)v7 + 16), "superview"), "insertSubview:aboveSubview:", *((_QWORD *)v7 + 15), *((_QWORD *)v7 + 16));
    objc_msgSend((id)objc_msgSend(*((id *)v7 + 16), "superview"), "insertSubview:aboveSubview:", *((_QWORD *)v7 + 13), *((_QWORD *)v7 + 16));
    objc_msgSend(*((id *)v7 + 14), "removeFromSuperview");
    v9 = (const void *)*((_QWORD *)v7 + 14);
    *((_QWORD *)v7 + 14) = 0;
    if (v9)
      CFRelease(v9);
    objc_msgSend(*((id *)v7 + 16), "removeFromSuperview");
    v10 = (const void *)*((_QWORD *)v7 + 16);
    *((_QWORD *)v7 + 16) = 0;
    if (v10)
      CFRelease(v10);
    v11 = (CFTypeRef *)*((_QWORD *)v7 + 10);
    if ((a3 & 1) != 0)
    {
      WebKit::WebPageProxy::navigationGestureDidEnd(*((WebKit::WebPageProxy **)v7 + 10), 1, (WebKit::WebBackForwardListItem *)v8);
      v12 = (_QWORD *)*((_QWORD *)v7 + 2);
      if (*((_QWORD **)v7 + 10) != v12)
      {
        v13 = v12[5];
        if (v13)
          v14 = *(_QWORD *)(v13 + 8);
        else
          v14 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1240))(v14);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
        v12 = (_QWORD *)*((_QWORD *)v7 + 2);
      }
      v18 = v12[140];
      if ((!v18 || !*(_QWORD *)(v18 + 64)) && !v12[23] || *((_BYTE *)v7 + 164))
        goto LABEL_23;
      v19 = *(_QWORD *)(v12[4] + 744);
      v20 = *((_QWORD *)v7 + 12);
      if (*((_BYTE *)v7 + 162))
      {
        if (!v18 || (v21 = *(_QWORD *)(v18 + 64)) == 0)
        {
          v21 = v12[23];
          if (!v21)
          {
LABEL_23:
            WebKit::ViewGestureController::removeSwipeSnapshot((id *)v7);
            return;
          }
        }
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v22 = off_1E34CDBD0;
        v22[1] = v19;
        v22[2] = v20;
        v25 = v22;
        WebKit::WebPageProxy::callAfterNextPresentationUpdate((uint64_t)v12, (uint64_t *)&v25);
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 168))(v21);
      }
      else
      {
        v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v23 = off_1E34CDC20;
        v23[1] = v7;
        v23[2] = v19;
        v23[3] = v20;
        v24 = *((_QWORD *)v7 + 30);
        *((_QWORD *)v7 + 30) = v23;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
    }
    else
    {
      if (v11)
        CFRetain(v11[1]);
      WebKit::ViewGestureController::removeSwipeSnapshot((id *)v7);
      WebKit::WebPageProxy::navigationGestureDidEnd((WebKit::WebPageProxy *)v11, 0, (WebKit::WebBackForwardListItem *)v8);
      v15 = *((_QWORD *)v7 + 2);
      if (v11 != (CFTypeRef *)v15)
      {
        v16 = *(_QWORD *)(v15 + 40);
        if (v16)
          v17 = *(_QWORD *)(v16 + 8);
        else
          v17 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1240))(v17);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
      }
      if (v11)
        CFRelease(v11[1]);
    }
  }
}

void sub_197281FB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

_OWORD *__copy_helper_block_e8_32c124_ZTSKZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionEE3__0(_OWORD *result, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;

  v2 = result;
  result[2] = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(v3 + 8));
  *((_QWORD *)v2 + 6) = v3;
  return result;
}

void __destroy_helper_block_e8_32c124_ZTSKZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionEE3__0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

uint64_t WebKit::ViewGestureController::removeSwipeSnapshot(id *this)
{
  uint64_t result;

  result = WebKit::ViewGestureController::SnapshotRemovalTracker::reset((WebKit::ViewGestureController::SnapshotRemovalTracker *)(this + 21));
  if (*((_DWORD *)this + 6) == 1)
  {
    if (*((_BYTE *)this + 163))
      return WebKit::ViewGestureController::resetState(this);
    else
      *((_BYTE *)this + 164) = 1;
  }
  return result;
}

uint64_t WebKit::ViewGestureController::resetState(id *this)
{
  id v2;
  uint64_t v3;
  CFTypeRef *v4;
  id v5;
  CFTypeRef *v6;

  objc_msgSend(this[15], "removeFromSuperview");
  v2 = this[15];
  this[15] = 0;
  if (v2)
    CFRelease(v2);
  this[19] = 0;
  v3 = (uint64_t)this[10];
  if (v3)
  {
    WebKit::WebPageProxy::navigationGestureSnapshotWasRemoved(v3);
    v4 = (CFTypeRef *)this[10];
    this[10] = 0;
    if (v4)
      CFRelease(v4[1]);
  }
  v5 = this[18];
  this[18] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::Color::operator=();
  v6 = (CFTypeRef *)this[11];
  this[11] = 0;
  if (v6)
    CFRelease(v6[1]);
  return WebKit::ViewGestureController::didEndGesture((WebKit::ViewGestureController *)this);
}

void sub_19728213C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::ViewGestureController::beginSimulatedSwipeInDirectionForTesting(uint64_t a1, uint64_t a2)
{
  _BOOL8 canSwipeInDirection;
  void *v5;

  canSwipeInDirection = WebKit::ViewGestureController::canSwipeInDirection(a1, a2);
  if (canSwipeInDirection)
  {
    v5 = (void *)objc_msgSend(*(id *)(a1 + 136), "transitionForDirection:", a2);
    WebKit::ViewGestureController::beginSwipeGesture(a1, v5, a2);
    objc_msgSend(v5, "_stopInteractiveTransition");
  }
  return canSwipeInDirection;
}

void sub_197282B54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;

  if (LOBYTE(STACK[0x280]))
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&a9, a2);
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void sub_197282F4C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31)
{
  const void *v31;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if ((a31 & 0x8000000000000) != 0)
  {
    v33 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFLL);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, a2);
    }
  }
  if (a30)
  {
    if (a30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a30 + 8))(a30);
    else
      --a30[2];
  }
  if (a29)
  {
    if (a29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a29 + 8))(a29);
    else
      --a29[2];
  }
  if (a28)
  {
    if (a28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a28 + 8))(a28);
    else
      --a28[2];
  }
  if (a25)
    WTF::fastFree(a25, a2);
  CFRelease(v31);
  _Unwind_Resume(a1);
}

void sub_19728317C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197283264(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972833D8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19728344C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972835F4(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::InteractionInformationAtPosition *v2;

  if (*((_BYTE *)v2 + 640))
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition(v2, a2);
  _Unwind_Resume(exception_object);
}

void sub_197283970(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36)
{
  if (a36)
  {
    if (*(_DWORD *)a36 == 2)
      WTF::StringImpl::destroy(a36, a2);
    else
      *(_DWORD *)a36 -= 2;
  }
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_197283BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef a22)
{
  const void *v22;
  const void *v23;
  const void *v24;

  if (cf)
    CFRelease(cf);
  CFRelease(v23);
  if (v24)
    CFRelease(v24);
  if (a22)
    CFRelease(a22);
  CFRelease(v22);
  _Unwind_Resume(a1);
}

void sub_197283E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12)
{
  const void *v12;

  if (cf)
    CFRelease(cf);
  if (a12)
    CFRelease(a12);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c79_ZTSN3WTF9RetainPtrIU41objcproto30WKActionSheetAssistantDelegate11objc_objectEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c79_ZTSN3WTF9RetainPtrIU41objcproto30WKActionSheetAssistantDelegate11objc_objectEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

CFTypeRef __copy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WKActionSheetAssistantEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WKActionSheetAssistantEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_19728420C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19728448C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197284924(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197284B88(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197284DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;

  if (a10)
    CFRelease(a10);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_197284E7C(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  WTF *v3;

  WTF::fastFree(v3, a2);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_197284F78(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  WTF *v3;

  WTF::fastFree(v3, a2);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_197285050(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197285188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  const void *v20;

  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  _Unwind_Resume(exception_object);
}

void sub_1972856D8(_Unwind_Exception *a1)
{
  const void *v1;
  id *v2;

  objc_destroyWeak(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197285908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v12;
  WTF::StringImpl *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v13);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197285B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_197285E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c93_ZTSKZ80__WKActionSheetAssistant_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c93_ZTSKZ80__WKActionSheetAssistant_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_197286100(_Unwind_Exception *a1)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197286200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197286288(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c103_ZTSKZ90__WKActionSheetAssistant_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c103_ZTSKZ90__WKActionSheetAssistant_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_197286390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197286418(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c95_ZTSKZ82__WKActionSheetAssistant_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c95_ZTSKZ82__WKActionSheetAssistant_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972868D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11)
{
  const void *v11;

  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void sub_197286A3C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,WTF::RetainPtr<UITextChecker>,WTF::DefaultHash<long long>,WTF::HashTraits<long long>,WTF::HashTraits<WTF::RetainPtr<UITextChecker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long long>>::expand(uint64_t *a1)
{
  int v1;
  unsigned int v2;

  if (WebKit::spellDocumentTagMap(void)::tagMap
    && (v1 = *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 4)) != 0)
  {
    v2 = v1 << (6 * *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12) >= (2 * v1));
  }
  else
  {
    v2 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&WebKit::spellDocumentTagMap(void)::tagMap, v2, a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewGestureController::endSwipeGesture(WebKit::WebBackForwardListItem *,_UIViewControllerTransitionContext *,BOOL)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result;

  result = WebKit::ViewGestureController::controllerForGesture(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 1)
      return WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(result + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)4, "outstanding event occurred: ", 29, 1);
  }
  return result;
}

uint64_t WebKit::InteractionInformationAtPosition::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  const void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::URL::operator=(a1 + 72, (WTF::StringImpl *)(a2 + 72));
  WTF::URL::operator=(a1 + 112, (WTF::StringImpl *)(a2 + 112));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 152), (WTF::StringImpl *)(a2 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 160), (WTF::StringImpl *)(a2 + 160));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 168), (WTF::StringImpl *)(a2 + 168));
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v9 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v8;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v9, v7);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 200), (WTF::StringImpl *)(a2 + 200));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 208), (WTF::StringImpl *)(a2 + 208));
  v10 = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = v10;
  std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Cursor,false>>((__n128 *)(a1 + 240), (__n128 *)(a2 + 240));
  v11 = *(_OWORD *)(a2 + 280);
  v12 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v12;
  *(_OWORD *)(a1 + 280) = v11;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 328, (_DWORD *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  v13 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  v14 = *(_DWORD **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v13;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  v16 = *(_DWORD **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v15;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  v18 = *(_DWORD **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v17;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  WebCore::Color::operator=();
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 392), (WTF::StringImpl *)(a2 + 392));
  v19 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  v20 = *(const void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v19;
  if (v20)
    CFRelease(v20);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v21 = *(_OWORD *)(a2 + 424);
  v22 = *(_OWORD *)(a2 + 440);
  v23 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v23;
  *(_OWORD *)(a1 + 424) = v21;
  *(_OWORD *)(a1 + 440) = v22;
  v24 = *(_OWORD *)(a2 + 488);
  v25 = *(_OWORD *)(a2 + 504);
  v26 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v26;
  *(_OWORD *)(a1 + 488) = v24;
  *(_OWORD *)(a1 + 504) = v25;
  v27 = *(_OWORD *)(a2 + 552);
  v28 = *(_OWORD *)(a2 + 568);
  v29 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 593) = *(_OWORD *)(a2 + 593);
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 552) = v27;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 624, (_DWORD *)(a2 + 624));
  return a1;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 72));
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 112), (WTF::StringImpl *)(a2 + 112));
  v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v8;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 152), (WTF::StringImpl *)(a2 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 160), (WTF::StringImpl *)(a2 + 160));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 168), (WTF::StringImpl *)(a2 + 168));
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v10 = *(unsigned int **)(a2 + 192);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v10;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v12, v9);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 200), (WTF::StringImpl *)(a2 + 200));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 208), (WTF::StringImpl *)(a2 + 208));
  v13 = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = v13;
  std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Cursor,false> const&>((__n128 *)(a1 + 240), (__n128 *)(a2 + 240));
  WebCore::TextIndicatorData::operator=(a1 + 280, (__int128 *)(a2 + 280));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 392), (WTF::StringImpl *)(a2 + 392));
  v14 = *(_QWORD *)(a2 + 400);
  if (v14)
    CFRetain(*(CFTypeRef *)(a2 + 400));
  v15 = *(const void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v14;
  if (v15)
    CFRelease(v15);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v16 = *(_OWORD *)(a2 + 424);
  v17 = *(_OWORD *)(a2 + 440);
  v18 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v18;
  *(_OWORD *)(a1 + 424) = v16;
  *(_OWORD *)(a1 + 440) = v17;
  v19 = *(_OWORD *)(a2 + 488);
  v20 = *(_OWORD *)(a2 + 504);
  v21 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v21;
  *(_OWORD *)(a1 + 488) = v19;
  *(_OWORD *)(a1 + 504) = v20;
  v22 = *(_OWORD *)(a2 + 552);
  v23 = *(_OWORD *)(a2 + 568);
  v24 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 593) = *(_OWORD *)(a2 + 593);
  *(_OWORD *)(a1 + 568) = v23;
  *(_OWORD *)(a1 + 584) = v24;
  *(_OWORD *)(a1 + 552) = v22;
  WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 624, a2 + 624);
  return a1;
}

__n128 std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Cursor,false>>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _DWORD *v5;
  __n128 result;
  unint64_t v7;

  if (a1[2].n128_u8[0] == a2[2].n128_u8[0])
  {
    if (a1[2].n128_u8[0])
    {
      a1->n128_u8[0] = a2->n128_u8[0];
      v4 = a2->n128_u64[1];
      a2->n128_u64[1] = 0;
      v5 = (_DWORD *)a1->n128_u64[1];
      a1->n128_u64[1] = v4;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      result = a2[1];
      a1[1] = result;
    }
  }
  else if (a1[2].n128_u8[0])
  {
    std::__optional_destruct_base<WebCore::Cursor,false>::reset[abi:sn180100]((uint64_t)a1);
  }
  else
  {
    a1->n128_u8[0] = a2->n128_u8[0];
    v7 = a2->n128_u64[1];
    a2->n128_u64[1] = 0;
    a1->n128_u64[1] = v7;
    result = a2[1];
    a1[1] = result;
    a1[2].n128_u8[0] = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::Cursor,false>::reset[abi:sn180100](uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 32))
  {
    v1 = result;
    result = *(_QWORD *)(result + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

WebKit::InteractionInformationAtPosition *WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition(WebKit::InteractionInformationAtPosition *this, const WebKit::InteractionInformationAtPosition *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  __int128 v18;
  uint64_t v19;
  _DWORD *v20;
  const void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  v7 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 9) = v7;
  v8 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 14) = v9;
  v10 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 19);
  if (v11)
    *v11 += 2;
  *((_QWORD *)this + 19) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 20) = v12;
  v13 = (_DWORD *)*((_QWORD *)a2 + 21);
  if (v13)
    *v13 += 2;
  *((_QWORD *)this + 21) = v13;
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  v14 = (unsigned int *)*((_QWORD *)a2 + 24);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  *((_QWORD *)this + 24) = v14;
  v16 = (_DWORD *)*((_QWORD *)a2 + 25);
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 25) = v16;
  v17 = (_DWORD *)*((_QWORD *)a2 + 26);
  if (v17)
    *v17 += 2;
  *((_QWORD *)this + 26) = v17;
  v18 = *(_OWORD *)((char *)a2 + 216);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *(_OWORD *)((char *)this + 216) = v18;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 272) = 0;
  if (*((_BYTE *)a2 + 272))
  {
    *((_BYTE *)this + 240) = *((_BYTE *)a2 + 240);
    v19 = *((_QWORD *)a2 + 31);
    if (v19)
      ++*(_DWORD *)(v19 + 8);
    *((_QWORD *)this + 31) = v19;
    *((_OWORD *)this + 16) = *((_OWORD *)a2 + 16);
    *((_BYTE *)this + 272) = 1;
  }
  WebCore::TextIndicatorData::TextIndicatorData((WebKit::InteractionInformationAtPosition *)((char *)this + 280), (const TextIndicatorData *)((char *)a2 + 280));
  v20 = (_DWORD *)*((_QWORD *)a2 + 49);
  if (v20)
    *v20 += 2;
  v21 = (const void *)*((_QWORD *)a2 + 50);
  *((_QWORD *)this + 49) = v20;
  *((_QWORD *)this + 50) = v21;
  if (v21)
    CFRetain(v21);
  *(_OWORD *)((char *)this + 408) = *(_OWORD *)((char *)a2 + 408);
  v22 = *(_OWORD *)((char *)a2 + 424);
  v23 = *(_OWORD *)((char *)a2 + 440);
  v24 = *(_OWORD *)((char *)a2 + 472);
  *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a2 + 456);
  *(_OWORD *)((char *)this + 472) = v24;
  *(_OWORD *)((char *)this + 424) = v22;
  *(_OWORD *)((char *)this + 440) = v23;
  v25 = *(_OWORD *)((char *)a2 + 488);
  v26 = *(_OWORD *)((char *)a2 + 504);
  v27 = *(_OWORD *)((char *)a2 + 536);
  *(_OWORD *)((char *)this + 520) = *(_OWORD *)((char *)a2 + 520);
  *(_OWORD *)((char *)this + 536) = v27;
  *(_OWORD *)((char *)this + 488) = v25;
  *(_OWORD *)((char *)this + 504) = v26;
  v28 = *(_OWORD *)((char *)a2 + 552);
  v29 = *(_OWORD *)((char *)a2 + 568);
  v30 = *(_OWORD *)((char *)a2 + 584);
  *(_OWORD *)((char *)this + 593) = *(_OWORD *)((char *)a2 + 593);
  *(_OWORD *)((char *)this + 568) = v29;
  *(_OWORD *)((char *)this + 584) = v30;
  *(_OWORD *)((char *)this + 552) = v28;
  WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 624, (uint64_t)a2 + 624);
  return this;
}

void sub_197287AFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v4 = *(WTF::StringImpl **)(v2 + 392);
  *(_QWORD *)(v2 + 392) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)(v2 + 376);
  if ((v5 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v6 = *(_DWORD **)(v2 + 368);
  *(_QWORD *)(v2 + 368) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 360);
  *(_QWORD *)(v2 + 360) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *(_DWORD **)(v2 + 352);
  *(_QWORD *)(v2 + 352) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(WTF **)(v2 + 328);
  if (v9)
  {
    *(_QWORD *)(v2 + 328) = 0;
    *(_DWORD *)(v2 + 336) = 0;
    WTF::fastFree(v9, a2);
  }
  if (*(_BYTE *)(v2 + 272))
  {
    v13 = *(_DWORD **)(v2 + 248);
    *(_QWORD *)(v2 + 248) = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
  }
  v14 = *(WTF::StringImpl **)(v2 + 208);
  *(_QWORD *)(v2 + 208) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)(v2 + 200);
  *(_QWORD *)(v2 + 200) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(_QWORD *)(v2 + 192);
  *(_QWORD *)(v2 + 192) = 0;
  if (v16)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v16, a2);
  v17 = *(WTF::StringImpl **)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(WTF::StringImpl **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(WTF::StringImpl **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id *std::unique_ptr<WebKit::CompactContextMenuPresenter>::reset[abi:sn180100](id **a1, id *a2)
{
  id *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CompactContextMenuPresenter::~CompactContextMenuPresenter(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

__n128 std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Cursor,false> const&>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _DWORD *v5;
  __n128 result;
  unint64_t v7;

  if (a1[2].n128_u8[0] == a2[2].n128_u8[0])
  {
    if (a1[2].n128_u8[0])
    {
      a1->n128_u8[0] = a2->n128_u8[0];
      v4 = a2->n128_u64[1];
      if (v4)
        ++*(_DWORD *)(v4 + 8);
      v5 = (_DWORD *)a1->n128_u64[1];
      a1->n128_u64[1] = v4;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      result = a2[1];
      a1[1] = result;
    }
  }
  else if (a1[2].n128_u8[0])
  {
    std::__optional_destruct_base<WebCore::Cursor,false>::reset[abi:sn180100]((uint64_t)a1);
  }
  else
  {
    a1->n128_u8[0] = a2->n128_u8[0];
    v7 = a2->n128_u64[1];
    if (v7)
      ++*(_DWORD *)(v7 + 8);
    a1->n128_u64[1] = v7;
    result = a2[1];
    a1[1] = result;
    a1[2].n128_u8[0] = 1;
  }
  return result;
}

id *std::unique_ptr<WebKit::ApplicationStateTracker>::reset[abi:sn180100](id **a1, id *a2)
{
  id *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ApplicationStateTracker::~ApplicationStateTracker(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::ViewGestureGeometryCollector::CollectGeometryForSmartMagnificationGesture>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1516;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972881B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::TextCheckingResult>::destruct(*(_QWORD *)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::TextCheckingResult>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = result + 24;
    do
    {
      v4 = *(WTF::StringImpl **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      v5 = (WTF::StringImpl *)(v3 + 24);
      v3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v4 + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 36);
  *(_DWORD *)(v3 + 36) = 0;
  *(_DWORD *)(v4 + 36) = v6;
  v7 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v4 + 40) = v7;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197288488);
    }
    v3 = *(WTF **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextCheckingResult>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::TextCheckingResult>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  if ((WTF::StringImpl *)result != a2)
  {
    v5 = result + 24;
    do
    {
      v6 = *(_QWORD *)(v5 - 8);
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      v7 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 32) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 36) = v7;
      v8 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 40) = v8;
      v9 = *(WTF::StringImpl **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v5 - 24;
      result = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v5 += 48;
      a3 += 48;
    }
    while ((WTF::StringImpl *)(v10 + 48) != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewGestureController::willEndSwipeGesture(WebKit::WebBackForwardListItem &,BOOL)::$_0,void>::call(uint64_t a1)
{
  return WebKit::ViewGestureController::removeSwipeSnapshot(*(id **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewGestureController::endSwipeGesture(WebKit::WebBackForwardListItem *,_UIViewControllerTransitionContext *,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v2 = *(_QWORD *)(v1 + 1120);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 64)) == 0)
  {
    v3 = *(_QWORD *)(v1 + 184);
    if (!v3)
      return WebKit::ViewGestureController::removeSwipeSnapshot(*(id **)(a1 + 8));
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34CDBD0;
  v6[1] = v4;
  v6[2] = v5;
  v8 = v6;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate(v1, (uint64_t *)&v8);
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v3);
}

uint64_t WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 72 * v3;
    v6 = (_DWORD *)((char *)v4 + 64);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E34CDC38[v7])(&v9, v6 - 14);
      *v6 = -1;
      v6 += 18;
      v5 -= 72;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void ___ZZ73__WKActionSheetAssistant__uiMenuElementsForMediaControlContextMenuItems__ENK3__6clERN7WebCore28MediaControlsContextMenuItemE_block_invoke(uint64_t a1)
{
  id WeakRetained;
  const void *v3;
  uint64_t v4;
  uint64_t v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *((_QWORD *)WeakRetained + 91);
    *((_QWORD *)WeakRetained + 91) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    CFRelease(v3);
  }
}

void sub_197288718(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c148_ZTSKZZ73__WKActionSheetAssistant__uiMenuElementsForMediaControlContextMenuItems__ENK3__6clERN7WebCore28MediaControlsContextMenuItemEEUlP8UIActionE_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 40);
}

void __destroy_helper_block_e8_32c148_ZTSKZZ73__WKActionSheetAssistant__uiMenuElementsForMediaControlContextMenuItems__ENK3__6clERN7WebCore28MediaControlsContextMenuItemEEUlP8UIActionE_(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t WKMediaFormatReaderCreate(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t WKMediaFormatReaderStartOnMainThread()
{
  return 0xFFFFFFFFLL;
}

uint64_t WKWebArchiveGetTypeID()
{
  return 30;
}

uint64_t WKWebArchiveCreate(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WebKit *v11;

  if (a1)
  {
    v5 = objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      v6 = objc_msgSend(a2, "_apiObject");
      CFRetain(*(CFTypeRef *)(v6 + 8));
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  v10 = v6;
  if (a3)
  {
    v7 = objc_msgSend(a3, "_apiObject");
    CFRetain(*(CFTypeRef *)(v7 + 8));
    v9 = v7;
    API::WebArchive::create(v5, &v10, &v9, &v11);
    CFRelease(*(CFTypeRef *)(v7 + 8));
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  v9 = 0;
  API::WebArchive::create(v5, &v10, &v9, &v11);
  if (a2)
LABEL_6:
    CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_7:
  if (v11)
    return *((_QWORD *)v11 + 1);
  else
    return 0;
}

uint64_t WKWebArchiveCreateWithData(void *a1)
{
  API::WebArchive *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::WebArchive::create((API::WebArchive *)a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKWebArchiveCreateFromRange(void *a1)
{
  uint64_t v1;
  const Range *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend(a1, "_apiObject");
  WebCore::makeSimpleRange(*(WebCore **)(v1 + 24), v2);
  API::WebArchive::create(&v6);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v5);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v4);
  if (v6)
    return *(_QWORD *)(v6 + 8);
  else
    return 0;
}

WebKit *WKWebArchiveCopyMainResource(void *a1)
{
  WebKit *result;
  WebKit *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = API::WebArchive::mainResource((API::WebArchive *)a1);
  if (result)
  {
    v2 = result;
    CFRetain(*((CFTypeRef *)result + 1));
    return (WebKit *)*((_QWORD *)v2 + 1);
  }
  return result;
}

uint64_t WKWebArchiveCopySubresources(void *a1)
{
  uint64_t result;
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = API::WebArchive::subresources((API::WebArchive *)a1);
  if (result)
  {
    v2 = result;
    CFRetain(*(CFTypeRef *)(result + 8));
    return *(_QWORD *)(v2 + 8);
  }
  return result;
}

uint64_t WKWebArchiveCopySubframeArchives(void *a1)
{
  uint64_t result;
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = API::WebArchive::subframeArchives((API::WebArchive *)a1);
  if (result)
  {
    v2 = result;
    CFRetain(*(CFTypeRef *)(result + 8));
    return *(_QWORD *)(v2 + 8);
  }
  return result;
}

uint64_t WKWebArchiveCopyData(void *a1)
{
  WebKit *v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::WebArchive::data((WebCore::LegacyWebArchive **)a1, &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKWebArchiveResourceGetTypeID()
{
  return 31;
}

uint64_t WKWebArchiveResourceCreate(void *a1, void *a2, void *a3, void *a4)
{
  API::WebArchiveResource *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  API::WebArchiveResource *v17;

  if (a1)
  {
    v7 = (API::WebArchiveResource *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v7 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v8 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v8)
    *(_DWORD *)v8 += 2;
LABEL_7:
  v16 = v8;
  if (a3)
  {
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
    if (a4)
    {
LABEL_9:
      objc_msgSend(a4, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_10;
    }
  }
  else
  {
    v15 = 0;
    if (a4)
      goto LABEL_9;
  }
  v14 = 0;
LABEL_10:
  API::WebArchiveResource::create(v7, &v16, (const WTF::String *)&v15, (const WTF::String *)&v14, &v17);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v17)
    return *((_QWORD *)v17 + 1);
  else
    return 0;
}

uint64_t WKWebArchiveResourceCopyData(void *a1, void *a2)
{
  WebKit *v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::WebArchiveResource::data((API::WebArchiveResource *)a1, a2, &v3);
  if (v3)
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKWebArchiveResourceCopyURL(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = *(WTF::StringImpl **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16) + 16);
  if (!v1)
    return 0;
  *(_DWORD *)v1 += 2;
  v6 = v1;
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKWebArchiveResourceCopyMIMEType(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16) + 320);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKWebArchiveResourceCopyTextEncoding(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16) + 328);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WebKit::WebPaymentCoordinatorProxy::messageSenderConnection(WebKit::WebPaymentCoordinatorProxy *this)
{
  return (*(uint64_t (**)(_QWORD, WebKit::WebPaymentCoordinatorProxy *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), this);
}

uint64_t `non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::messageSenderConnection(WebKit::WebPaymentCoordinatorProxy *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (char *)this - 16);
}

uint64_t WebKit::WebPaymentCoordinatorProxy::messageSenderDestinationID(uint64_t this)
{
  if (*(_BYTE *)(this + 48))
    return *(_QWORD *)(this + 40);
  __break(1u);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::messageSenderDestinationID(uint64_t this)
{
  if (*(_BYTE *)(this + 32))
    return *(_QWORD *)(this + 24);
  __break(1u);
  return this;
}

_BYTE *WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _BYTE *result;
  NSObject *v8;
  const char *v9;
  _BYTE v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_9:
      result = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1);
      result[98] = 1;
      return result;
    }
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v10[4] = "void WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard(const String &, const St"
                         "ring &, CompletionHandler<void (BOOL)> &&)";
    v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 71: I"
         "nvalid message dispatched %s";
LABEL_11:
    _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, v9, v10, 0xCu);
    goto LABEL_9;
  }
  if (!*a3)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_9;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v10[4] = "void WebKit::WebPaymentCoordinatorProxy::canMakePaymentsWithActiveCard(const String &, const St"
                         "ring &, CompletionHandler<void (BOOL)> &&)";
    v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 72: I"
         "nvalid message dispatched %s";
    goto LABEL_11;
  }
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(v10, a4);
  WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(a1, a2, a3, (uint64_t *)v10);
  result = *(_BYTE **)v10;
  *(_QWORD *)v10 = 0;
  if (result)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  return result;
}

_BYTE *WebKit::WebPaymentCoordinatorProxy::openPaymentSetup(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _BYTE *result;
  NSObject *v8;
  const char *v9;
  _BYTE v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_9:
      result = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1);
      result[98] = 1;
      return result;
    }
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v10[4] = "void WebKit::WebPaymentCoordinatorProxy::openPaymentSetup(const String &, const String &, Compl"
                         "etionHandler<void (BOOL)> &&)";
    v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 78: I"
         "nvalid message dispatched %s";
LABEL_11:
    _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, v9, v10, 0xCu);
    goto LABEL_9;
  }
  if (!*a3)
  {
    v8 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_9;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v10[4] = "void WebKit::WebPaymentCoordinatorProxy::openPaymentSetup(const String &, const String &, Compl"
                         "etionHandler<void (BOOL)> &&)";
    v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 79: I"
         "nvalid message dispatched %s";
    goto LABEL_11;
  }
  WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(v10, a4);
  WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(a1, a2, a3, (uint64_t *)v10);
  result = *(_BYTE **)v10;
  *(_QWORD *)v10 = 0;
  if (result)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::WebPaymentCoordinatorProxy::showPaymentUI(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  const void *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *result;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42[5];
  _BYTE cf[36];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  {
    if (WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy)
    {
      v14 = *(_QWORD *)(WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy + 8);
      if (v14)
      {
        *(_QWORD *)cf = 0;
        WebKit::WebPaymentCoordinatorProxy::didReachFinalState(v14, (WebCore::PaymentSessionError *)cf);
        v15 = *(const void **)cf;
        *(_QWORD *)cf = 0;
        if (v15)
          CFRelease(v15);
      }
    }
  }
  else
  {
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy = 0;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v17 = *(unsigned int **)(a1 + 8);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  {
    v19 = (unsigned int *)WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy;
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy = (uint64_t)v17;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v16);
      }
    }
  }
  else
  {
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy = (uint64_t)v17;
  }
  if (*(unsigned __int16 *)(a1 + 56) - 10 >= 0xFFFFFFF7)
  {
    v38 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)cf = 136315138;
      *(_QWORD *)&cf[4] = "void WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WebCore::PageIdentifier, WebPageProxyId"
                          "entifier, const String &, const Vector<String> &, const WebCore::ApplePaySessionPaymentRequest"
                          " &, CompletionHandler<void (BOOL)> &&)";
      v39 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 89"
            ": Invalid message dispatched %s";
      goto LABEL_42;
    }
LABEL_40:
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1);
    *((_BYTE *)result + 98) = 1;
    return result;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v38 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)cf = 136315138;
      *(_QWORD *)&cf[4] = "void WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WebCore::PageIdentifier, WebPageProxyId"
                          "entifier, const String &, const Vector<String> &, const WebCore::ApplePaySessionPaymentRequest"
                          " &, CompletionHandler<void (BOOL)> &&)";
      v39 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 90"
            ": Invalid message dispatched %s";
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v38 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_40;
    *(_DWORD *)cf = 136315138;
    *(_QWORD *)&cf[4] = "void WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WebCore::PageIdentifier, WebPageProxyIden"
                        "tifier, const String &, const Vector<String> &, const WebCore::ApplePaySessionPaymentRequest &, "
                        "CompletionHandler<void (BOOL)> &&)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 91: "
          "Invalid message dispatched %s";
LABEL_42:
    _os_log_fault_impl(&dword_196BCC000, v38, OS_LOG_TYPE_FAULT, v39, cf, 0xCu);
    goto LABEL_40;
  }
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 56) = 1;
  result = (WTF::StringImpl *)WTF::URL::URL((uint64_t)v42, a4);
  v40 = 0;
  v41 = 0;
  v23 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v23)
  {
    if (v23 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v31 = 40 * v23;
    v32 = WTF::fastMalloc((WTF *)(40 * v23));
    LODWORD(v41) = (v31 & 0xFFFFFFF8) / 0x28;
    v40 = v32;
    if (*(_DWORD *)(a5 + 12))
    {
      v33 = v32;
      v34 = 0;
      v35 = 0;
      do
      {
        WTF::URL::URL((uint64_t)cf, (WTF::StringImpl **)(*(_QWORD *)a5 + v34));
        WTF::URL::URL(v33, (uint64_t *)cf);
        v37 = *(WTF::StringImpl **)cf;
        *(_QWORD *)cf = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v36);
          else
            *(_DWORD *)v37 -= 2;
        }
        ++v35;
        v33 += 40;
        v34 += 8;
      }
      while (v35 < *(unsigned int *)(a5 + 12));
      HIDWORD(v41) = v35;
    }
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v24 = *(unsigned int **)(a1 + 8);
  if (v24)
  {
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v26 = &off_1E34CDD98;
  v26[1] = a1;
  v26[2] = v24;
  *(_QWORD *)cf = v26;
  WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(a1, a3, (uint64_t)v42, (uint64_t)&v40, a6, (uint64_t *)cf);
  v27 = *(_QWORD *)cf;
  *(_QWORD *)cf = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v29);
  result = v42[0];
  v42[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebKit::WebPaymentCoordinatorProxy::didReachFinalState(uint64_t a1, WebCore::PaymentSessionError *a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;

  v3 = *(unsigned __int16 *)(a1 + 56);
  v4 = v3 > 9;
  v5 = (1 << v3) & 0x301;
  if (v4 || v5 == 0)
  {
    v11 = a1 + 16;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2530;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v17 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::encode((IPC::Encoder *)v13, a2);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(a1 + 16, &v17, 0);
    v14 = v17;
    v17 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, a2);
      WTF::fastFree(v15, v16);
    }
  }
  result = *(unsigned int **)(a1 + 64);
  if (result)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    result = *(unsigned int **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_WORD *)(a1 + 56) = 0;
  {
    result = (unsigned int *)WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy;
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy = 0;
    if (result)
    {
      do
      {
        v8 = __ldaxr(result);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, result));
      if (!v9)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  else
  {
    WebKit::activePaymentCoordinatorProxy(void)::activePaymentCoordinatorProxy = 0;
  }
  return result;
}

void WebKit::WebPaymentCoordinatorProxy::completeMerchantValidation(uint64_t a1, const void **a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_DWORD *)(a1 + 60) == 1)
    {
      WebKit::PaymentAuthorizationPresenter::completeMerchantValidation(*(_QWORD *)(a1 + 64), a2);
      *(_DWORD *)(a1 + 60) = 2;
    }
    else
    {
      v3 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v4 = 136315138;
        v5 = "void WebKit::WebPaymentCoordinatorProxy::completeMerchantValidation(const WebCore::PaymentMerchantSession &)";
        _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 131: Invalid message dispatched %s", (uint8_t *)&v4, 0xCu);
      }
      *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completeShippingMethodSelection(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 4)
    {
      WebKit::PaymentAuthorizationPresenter::completeShippingMethodSelection(*(_QWORD *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      v3 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v4 = 136315138;
        v5 = "void WebKit::WebPaymentCoordinatorProxy::completeShippingMethodSelection(std::optional<WebCore::ApplePayShi"
             "ppingMethodUpdate> &&)";
        _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 143: Invalid message dispatched %s", (uint8_t *)&v4, 0xCu);
      }
      *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completeShippingContactSelection(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 5)
    {
      WebKit::PaymentAuthorizationPresenter::completeShippingContactSelection(*(_QWORD *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      v3 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v4 = 136315138;
        v5 = "void WebKit::WebPaymentCoordinatorProxy::completeShippingContactSelection(std::optional<WebCore::ApplePaySh"
             "ippingContactUpdate> &&)";
        _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 155: Invalid message dispatched %s", (uint8_t *)&v4, 0xCu);
      }
      *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 6)
    {
      WebKit::PaymentAuthorizationPresenter::completePaymentMethodSelection(*(_QWORD *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      v3 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v4 = 136315138;
        v5 = "void WebKit::WebPaymentCoordinatorProxy::completePaymentMethodSelection(std::optional<WebCore::ApplePayPaym"
             "entMethodUpdate> &&)";
        _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 167: Invalid message dispatched %s", (uint8_t *)&v4, 0xCu);
      }
      *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completeCouponCodeChange(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 7)
    {
      WebKit::PaymentAuthorizationPresenter::completeCouponCodeChange(*(_QWORD *)(a1 + 64), a2);
      *(_WORD *)(a1 + 56) = 2;
    }
    else
    {
      v3 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        v4 = 136315138;
        v5 = "void WebKit::WebPaymentCoordinatorProxy::completeCouponCodeChange(std::optional<WebCore::ApplePayCouponCodeUpdate> &&)";
        _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/ApplePay/WebPaymentCoordinatorProxy.cpp 181: Invalid message dispatched %s", (uint8_t *)&v4, 0xCu);
      }
      *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1)
               + 98) = 1;
    }
  }
}

void WebKit::WebPaymentCoordinatorProxy::completePaymentSession(uint64_t a1, WebCore::ApplePayPaymentAuthorizationResult *this)
{
  unsigned int v2;
  int isFinalState;
  __int16 v7;

  v2 = *(unsigned __int16 *)(a1 + 56);
  if (v2 > 9 || v2 == 3)
  {
    isFinalState = WebCore::ApplePayPaymentAuthorizationResult::isFinalState(this);
    WebKit::PaymentAuthorizationPresenter::completePaymentSession(*(_QWORD *)(a1 + 64), (__int16 *)this);
    if (isFinalState)
      v7 = 9;
    else
      v7 = 2;
    *(_WORD *)(a1 + 56) = v7;
  }
}

void WebKit::WebPaymentCoordinatorProxy::abortPaymentSession(WebKit::WebPaymentCoordinatorProxy *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  BOOL v4;
  CFTypeRef v5;
  CFTypeRef cf;

  v1 = *((unsigned __int16 *)this + 28);
  v2 = v1 >= 9;
  v4 = v1 == 9;
  v3 = (1 << v1) & 0x301;
  v4 = !v4 && v2 || v3 == 0;
  if (v4)
  {
    cf = 0;
    WebKit::WebPaymentCoordinatorProxy::didReachFinalState((uint64_t)this, (WebCore::PaymentSessionError *)&cf);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterWillValidateMerchant(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 60) = 1;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2535;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterWillValidateMerchant(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterWillValidateMerchant(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidAuthorizePayment(uint64_t a1, uint64_t a2, WebCore::Payment *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 3;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2529;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::Payment,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidAuthorizePayment(uint64_t a1, uint64_t a2, WebCore::Payment *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidAuthorizePayment(a1 - 24, a2, a3);
}

unsigned int *WebKit::WebPaymentCoordinatorProxy::presenterDidFinish(uint64_t a1, uint64_t a2, WebCore::PaymentSessionError *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::didReachFinalState(a1, a3);
}

unsigned int *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidFinish(uint64_t a1, uint64_t a2, WebCore::PaymentSessionError *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::didReachFinalState(a1 - 24, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingMethod(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 4;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2534;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::ApplePayShippingMethod,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingMethod(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingMethod(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidChangeCouponCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 7;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2531;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidChangeCouponCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidChangeCouponCode(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingContact(uint64_t a1, uint64_t a2, WebCore::PaymentContact *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 5;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2533;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode((IPC::Encoder *)v7, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingContact(uint64_t a1, uint64_t a2, WebCore::PaymentContact *a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidSelectShippingContact(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::WebPaymentCoordinatorProxy::presenterDidSelectPaymentMethod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 56) = 6;
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 16);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2532;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::encodeObjectDirectly<PKPaymentMethod>((IPC::Encoder *)v7, *(objc_object **)(a3 + 8));
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::presenterDidSelectPaymentMethod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebPaymentCoordinatorProxy::presenterDidSelectPaymentMethod(a1 - 24, a2, a3);
}

void WebKit::AuthenticationManager::~AuthenticationManager(WebKit::AuthenticationManager *this, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E34CDC90;
  *((_QWORD *)this + 1) = &unk_1E34CDCC8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          a2 = (_QWORD *)*v5;
          *v5 = 0;
          if (a2)
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v5, a2);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::AuthenticationManager::~AuthenticationManager(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::AuthenticationManager::~AuthenticationManager(WebKit::AuthenticationManager *this, _QWORD *a2)
{
  WebKit::AuthenticationManager::~AuthenticationManager((WebKit::AuthenticationManager *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::AuthenticationManager::~AuthenticationManager((WebKit::AuthenticationManager *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::AuthenticationManager::shouldCoalesceChallenge(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::AuthenticationChallengeBase *this)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::ProtectionSpaceBase *v14;
  const WebCore::ProtectionSpace *v15;
  const WebCore::ProtectionSpace *v16;

  if (*(_BYTE *)(WebCore::AuthenticationChallengeBase::protectionSpace(this) + 21) == 8)
    return 0;
  v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 32));
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v12 ? v12 + 16 * *(unsigned int *)(v12 - 4) : 0;
  if ((_QWORD *)v13 == v8)
    return 0;
  while (1)
  {
    if (*v9 != a3 && *(_QWORD *)v9[1] == a2)
    {
      v14 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace(this);
      v15 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v9[1] + 8));
      if ((WebCore::ProtectionSpaceBase::compare(v14, v15, v16) & 1) != 0)
        return 1;
    }
    while (1)
    {
      v9 += 2;
      if (v9 == v11)
        break;
      if ((unint64_t)(*v9 + 1) > 1)
        goto LABEL_13;
    }
    v9 = v11;
LABEL_13:
    if (v9 == (_QWORD *)v13)
      return 0;
  }
}

unint64_t WebKit::AuthenticationManager::coalesceChallengesMatching@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD **v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  WebCore::ProtectionSpaceBase *v22;
  const WebCore::ProtectionSpace *v23;
  const WebCore::ProtectionSpace *v24;
  _QWORD *v25;
  uint64_t v26;

  v26 = a2;
  v5 = (_QWORD **)(result + 32);
  v4 = *(_QWORD *)(result + 32);
  if (!v4)
  {
LABEL_10:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v6 = *(_DWORD *)(v4 - 8);
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v4 + 16 * v10);
  if (v11 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(_QWORD *)(v4 + 16 * v10);
      ++v12;
      if (v11 == a2)
        goto LABEL_6;
    }
    goto LABEL_10;
  }
LABEL_6:
  v13 = *(_QWORD **)(v4 + 16 * v10 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (v13)
  {
    v14 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, 1uLL, (unint64_t)&v26);
    v15 = *(unsigned int *)(a3 + 12);
    v16 = *(_QWORD *)a3;
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = *v14;
    v17 = v15 + 1;
    *(_DWORD *)(a3 + 12) = v15 + 1;
    result = WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v13 + 1));
    if (*(_BYTE *)(result + 21) != 8)
    {
      result = (unint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v5);
      v18 = (_QWORD *)result;
      v20 = v19;
      v21 = *v5 ? (uint64_t)&(*v5)[2 * *((unsigned int *)*v5 - 1)] : 0;
      if (v21 != result)
      {
        do
        {
          if (*v18 != v26 && *(_QWORD *)v18[1] == *v13)
          {
            v22 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v13 + 1));
            v23 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(v18[1] + 8));
            result = WebCore::ProtectionSpaceBase::compare(v22, v23, v24);
            if ((_DWORD)result)
            {
              if (v17 == *(_DWORD *)(a3 + 8))
              {
                result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v17 + 1, (unint64_t)v18);
                v16 = *(_QWORD *)a3;
                v25 = (_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 12));
              }
              else
              {
                v25 = (_QWORD *)(v16 + 8 * v17);
                result = (unint64_t)v18;
              }
              *v25 = *(_QWORD *)result;
              v17 = *(_DWORD *)(a3 + 12) + 1;
              *(_DWORD *)(a3 + 12) = v17;
            }
          }
          while (1)
          {
            v18 += 2;
            if (v18 == v20)
              break;
            if ((unint64_t)(*v18 + 1) > 1)
              goto LABEL_25;
          }
          v18 = v20;
LABEL_25:
          ;
        }
        while (v18 != (_QWORD *)v21);
      }
    }
  }
  return result;
}

uint64_t WebKit::AuthenticationManager::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::AuthenticationChallengeBase *a5, char a6, uint64_t *a7)
{
  _QWORD *v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  IPC::Encoder *IdentifierInternal;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  CFTypeRef cf;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v32 = a3;
  v33 = a2;
  if (a3)
  {
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x1C0);
    v31 = WebKit::AuthenticationManager::Challenge::Challenge(v13, a3, a5, a7);
    IdentifierInternal = (IPC::Encoder *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>((uint64_t *)(a1 + 32), (uint64_t *)&IdentifierInternal, (uint64_t *)&v31, (uint64_t)&v35);
    v14 = IdentifierInternal;
    v15 = v31;
    v31 = 0;
    if (v15)
      std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)&v31, v15);
    result = WebKit::AuthenticationManager::shouldCoalesceChallenge(a1, a3, (uint64_t)v14, a5);
    if ((result & 1) == 0)
    {
      LOBYTE(v35) = 0;
      v38 = 0;
      if (a4)
        std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]<WebCore::SecurityOriginData const&,void>((uint64_t)&v35, a4);
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v18 = (unsigned int *)(v17 + 120);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 16) + 56))(v17 + 16);
      v21 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v21 = 313;
      *(_QWORD *)(v21 + 8) = v20;
      *(_QWORD *)(v21 + 528) = v21 + 16;
      *(_QWORD *)(v21 + 536) = v21 + 16;
      *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v21 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
      IdentifierInternal = (IPC::Encoder *)v21;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, &v33);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, &v32);
      IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v21, (uint64_t)&v35);
      IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode((IPC::Encoder *)v21, a5);
      *IPC::Encoder::grow((IPC::Encoder *)v21, 1uLL, 1) = a6;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v21, 8uLL, 8) = v14;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v17 + 16) + 32))(v17 + 16, &IdentifierInternal, 0);
      result = (uint64_t)IdentifierInternal;
      IdentifierInternal = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v22);
        result = WTF::fastFree(v23, v24);
      }
      do
      {
        v25 = __ldaxr(v18);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v18));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)(v17 + 120));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      if (v38)
      {
        if ((_DWORD)cf != -1)
          return ((uint64_t (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34CDCF0[cf])(&IdentifierInternal, &v35);
      }
    }
  }
  else
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v35);
    cf = 0;
    v27 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v27 + 16))(v27, 1, &v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v29 = cf;
    cf = 0;
    if (v29)
      CFRelease(v29);
    v30 = v36;
    v36 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    result = (uint64_t)v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]<WebCore::SecurityOriginData const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

IPC::Encoder *WebKit::AuthenticationManager::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, WebCore::AuthenticationChallengeBase *a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  IPC::Encoder *result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  IPC::Encoder *v18[3];
  int v19[2];

  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x1C0);
  v17 = WebKit::AuthenticationManager::Challenge::Challenge(v8, 0, a3, a4);
  *(_QWORD *)v19 = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>((uint64_t *)(a1 + 32), (uint64_t *)v19, (uint64_t *)&v17, (uint64_t)v18);
  v9 = *(_QWORD *)v19;
  v10 = v17;
  v17 = 0;
  if (v10)
    std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)&v17, v10);
  result = (IPC::Encoder *)WebKit::AuthenticationManager::shouldCoalesceChallenge(a1, 0, v9, a3);
  if ((result & 1) == 0)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 12;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v18[0] = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::encode((IPC::Encoder *)v13, a3);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v9;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a2 + 32))(a2, v18, 0);
    result = v18[0];
    v18[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void WebKit::AuthenticationManager::completeAuthenticationChallenge(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  WTF *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF *v15;
  unsigned int v16;

  WebKit::AuthenticationManager::coalesceChallengesMatching(a1, a2, (uint64_t)&v15);
  v8 = v15;
  if (v16)
  {
    v9 = (uint64_t *)(a1 + 32);
    v10 = 8 * v16;
    v11 = v15;
    do
    {
      v12 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v9, v11);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::take(v9, v12, &v14);
      v13 = v14[55];
      v14[55] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a3, a4);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v7 = v14;
      v14 = 0;
      if (v7)
        std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)&v14, v7);
      v11 = (WTF *)((char *)v11 + 8);
      v10 -= 8;
    }
    while (v10);
  }
  if (v8)
    WTF::fastFree(v8, v7);
}

IPC::Encoder *WebKit::AuthenticationManager::negotiatedLegacyTLS(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  IPC::Encoder *v14;

  v13 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v3 = (unsigned int *)(v2 + 120);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 324;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 16) + 32))(v2 + 16, &v14, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  do
  {
    v11 = __ldaxr(v3);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v3));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)(v2 + 120));
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

void WebKit::ConsumerSharedCARingBuffer::map(WebCore::CARingBuffer *this@<X0>, WebCore::CARingBuffer **a2@<X8>)
{
  NSObject *v3;
  const char *v4;
  WebCore::CARingBuffer *v5;
  unsigned int *v6;
  WebCore::CARingBuffer *v7;
  unsigned int *v8;
  NSObject *v9;
  __int16 v10[8];
  uint8_t buf[16];
  char v12;
  unint64_t v13;

  WebCore::CARingBuffer::computeSizeForBuffers((WebCore::CARingBuffer *)this);
  if (!v12 && v13 < 0xFFFFFFFFFFFFFFE8)
  {
    WebCore::SharedMemory::map();
    if (*(_QWORD *)buf)
    {
      if (*(_QWORD *)(*(_QWORD *)buf + 8) >= v13 + 24)
      {
        v5 = (WebCore::CARingBuffer *)WTF::fastMalloc((WTF *)0x50);
        v6 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        v7 = (WebCore::CARingBuffer *)WebCore::CARingBuffer::CARingBuffer(v5);
        *((_QWORD *)v7 + 9) = v6;
        *(_QWORD *)v7 = off_1E34CDD10;
        *a2 = v7;
        WebCore::CARingBuffer::initialize(v7);
LABEL_10:
        v8 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v8)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
        return;
      }
      v3 = qword_1ECE71348;
      if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_FAULT))
      {
        v10[0] = 0;
        v4 = "ConsumerSharedCARingBuffer::map: Storage size is insufficient for format and frameCount";
LABEL_14:
        _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, v4, (uint8_t *)v10, 2u);
      }
    }
    else
    {
      v3 = qword_1ECE71348;
      if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_FAULT))
      {
        v10[0] = 0;
        v4 = "ConsumerSharedCARingBuffer::map: Failed to map memory";
        goto LABEL_14;
      }
    }
    *a2 = 0;
    goto LABEL_10;
  }
  v9 = qword_1ECE71348;
  if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_196BCC000, v9, OS_LOG_TYPE_FAULT, "ConsumerSharedCARingBuffer::map: Overflowed when trying to compute the storage size", buf, 2u);
  }
  *a2 = 0;
}

void WebKit::ProducerSharedCARingBuffer::allocate(WebKit::ProducerSharedCARingBuffer *this@<X0>, const WebCore::CAAudioStreamDescription *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  WebCore::CARingBuffer *v10;
  uint64_t v11;
  WebCore::CARingBuffer *v12;
  WebCore::CARingBuffer *v13;
  WebCore::CARingBuffer *v14;
  unsigned int *v15;
  NSObject *v16;
  WebCore::CARingBuffer *v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[8];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;

  v5 = ((_DWORD)a2 - 1) | (((_DWORD)a2 - 1) >> 1) | ((((_DWORD)a2 - 1) | (((_DWORD)a2 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  v8 = WebCore::CAAudioStreamDescription::bytesPerFrame(this);
  WebCore::CAAudioStreamDescription::numberOfChannelStreams(this);
  WebCore::CARingBuffer::computeSizeForBuffers((WebCore::CARingBuffer *)v8);
  if (v24 || v25 >= 0xFFFFFFFFFFFFFFE8)
  {
LABEL_14:
    v16 = qword_1ECE71348;
    if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v17) = 0;
      _os_log_fault_impl(&dword_196BCC000, v16, OS_LOG_TYPE_FAULT, "ProducerSharedCARingBuffer::allocate: Overflowed when trying to compute the storage size", (uint8_t *)&v17, 2u);
    }
    goto LABEL_16;
  }
  WebCore::SharedMemory::allocate((WebCore::SharedMemory *)(v25 + 24));
  if (!v23)
  {
LABEL_16:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return;
  }
  WebCore::SharedMemory::createHandle();
  if (v22)
  {
    v9 = *(_QWORD **)(v23 + 16);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    v10 = (WebCore::CARingBuffer *)WTF::fastMalloc((WTF *)0x50);
    v11 = v23;
    v23 = 0;
    v12 = (WebCore::CARingBuffer *)WebCore::CARingBuffer::CARingBuffer(v10);
    *((_QWORD *)v12 + 9) = v11;
    *(_QWORD *)v12 = off_1E34CDD40;
    WebCore::CARingBuffer::initialize(v12);
    v17 = v10;
    if (v22)
    {
      WTF::MachSendRight::MachSendRight();
      *(_QWORD *)&v19 = v21;
      *((_QWORD *)&v19 + 1) = v7;
      v13 = v17;
      v17 = 0;
      *(_QWORD *)a3 = v13;
      WTF::MachSendRight::MachSendRight();
      *(_OWORD *)(a3 + 16) = v19;
      *(_BYTE *)(a3 + 32) = 1;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v18);
      v14 = v17;
      v17 = 0;
      if (v14)
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v17, v14);
      if (v22)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_14;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
LABEL_11:
  v15 = (unsigned int *)v23;
  v23 = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v15);
}

void std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  void *v6;

  if (a2)
  {
    v3 = a2[55];
    a2[55] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = (const void *)a2[54];
    a2[54] = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a2[53];
    a2[53] = 0;
    if (v5)
      CFRelease(v5);
    WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a2 + 1), (WTF::StringImpl *)a2);
    WTF::fastFree((WTF *)a2, v6);
  }
}

void WebKit::ConsumerSharedCARingBuffer::~ConsumerSharedCARingBuffer(WebKit::ConsumerSharedCARingBuffer *this)
{
  unsigned int *v2;

  *(_QWORD *)this = off_1E34B3128;
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::CARingBuffer::~CARingBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B3128;
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::CARingBuffer::~CARingBuffer(this);
  WTF::fastFree(v3, v4);
}

void WebKit::ProducerSharedCARingBuffer::~ProducerSharedCARingBuffer(WebKit::ProducerSharedCARingBuffer *this)
{
  unsigned int *v2;

  *(_QWORD *)this = off_1E34B3128;
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::CARingBuffer::~CARingBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B3128;
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::CARingBuffer::~CARingBuffer(this);
  WTF::fastFree(v3, v4);
}

uint64_t WTF::Function<void ()(BOOL)>::Function<WTF::CompletionHandler<void ()(BOOL)>,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = *a2;
  *a2 = 0;
  *v4 = &off_1E34CDD70;
  v4[1] = v5;
  if (v5)
  {
    *a1 = v4;
    return (uint64_t)a1;
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(BOOL)>,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CDD70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(BOOL)>,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CDD70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(BOOL)>,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34CDD98;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34CDD98;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::showPaymentUI(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (*(_WORD *)(v3 + 56))
      {
        if ((a2 & 1) != 0)
        {
          *(_WORD *)(v3 + 56) = 2;
        }
        else
        {
          cf = 0;
          WebKit::WebPaymentCoordinatorProxy::didReachFinalState(v3, (WebCore::PaymentSessionError *)&cf);
          v4 = cf;
          cf = 0;
          if (v4)
            CFRelease(v4);
        }
      }
    }
  }
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *a3;
    *a3 = 0;
    v21 = (_QWORD *)v16[1];
    v16[1] = v20;
    if (v21)
      std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)(v16 + 1), v21);
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_24:
        v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v16);
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_24;
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = *a3;
  *a3 = 0;
  v32 = (_QWORD *)v16[1];
  v31 = v16 + 1;
  v30 = v32;
  *v31 = v29;
  if (v32)
    std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v31, v30);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v29 = v27 + 1;
          v28 = (_QWORD *)v27[1];
          v27[1] = 0;
          if (v28)
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v29, v28);
          *v27 = *v13;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (_QWORD *)(v30 + 8);
          *v31 = 0;
          *v29 = v32;
          v10 = (_QWORD *)*v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v31, v10);
          if (v13 == a3)
            v12 = v27;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(_QWORD **)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
            std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WebKit::AuthenticationManager::Challenge::Challenge(_QWORD *a1, uint64_t a2, WebCore::AuthenticationChallengeBase *a3, uint64_t *a4)
{
  const void *v7;
  const void *v8;
  uint64_t v9;

  *a1 = a2;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 1), a3);
  v7 = (const void *)*((_QWORD *)a3 + 52);
  a1[53] = v7;
  if (v7)
    CFRetain(v7);
  v8 = (const void *)*((_QWORD *)a3 + 53);
  a1[54] = v8;
  if (v8)
    CFRetain(v8);
  v9 = *a4;
  *a4 = 0;
  a1[55] = v9;
  return a1;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::take(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v5 = 0;
  }
  if (v5 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v5 = (_QWORD *)a2[1];
  v3 = a2 + 1;
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebKit::AuthenticationManager::Challenge>::operator()[abi:sn180100]((uint64_t)v3, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::AuthenticationManager::Challenge>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
}

void sub_19728BF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t startUpdatingCallback(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_startUpdating");
}

uint64_t stopUpdatingCallback(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_stopUpdating");
}

uint64_t setEnableHighAccuracy(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "_setEnableHighAccuracy:", a2);
}

void sub_19728C250(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CFTypeRef cf,uint64_t a43,uint64_t a44,uint64_t a45,int a46,WTF::StringImpl *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  WTF::StringImpl *v55;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  GeolocationRequestData::~GeolocationRequestData((GeolocationRequestData *)&a12, a2);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v55);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19728C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  WTF::StringImpl *v10;
  va_list va;

  va_start(va, a8);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  if (a5)
    CFRelease(*(CFTypeRef *)(a5 + 8));
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  GeolocationRequestData::~GeolocationRequestData((GeolocationRequestData *)va, v10);
  _Unwind_Resume(a1);
}

void sub_19728C9B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  GeolocationRequestData *v8;
  uint64_t v9;
  GeolocationRequestData *v10;
  uint64_t v11;
  uint64_t v12;
  GeolocationRequestData *v13;
  uint64_t v14;
  uint64_t v15;

  if (v3 <= v5)
  {
    v13 = (GeolocationRequestData *)((char *)v2 + 352 * v3);
    v14 = 352 * v5 - 352 * v3;
    do
    {
      GeolocationRequestData::~GeolocationRequestData(v13, a2);
      v13 = (GeolocationRequestData *)(v15 + 352);
      v14 -= 352;
    }
    while (v14);
  }
  else
  {
    if (v5)
    {
      v7 = 352 * v5;
      v8 = (GeolocationRequestData *)v2;
      do
      {
        GeolocationRequestData::~GeolocationRequestData(v8, a2);
        v8 = (GeolocationRequestData *)(v9 + 352);
        v7 -= 352;
      }
      while (v7);
    }
    if (v3 != v4)
    {
      v10 = (GeolocationRequestData *)((char *)v2 + 352 * v3);
      v11 = 352 * v4 - 352 * v3;
      do
      {
        GeolocationRequestData::~GeolocationRequestData(v10, a2);
        v10 = (GeolocationRequestData *)(v12 + 352);
        v11 -= 352;
      }
      while (v11);
    }
  }
  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void GeolocationRequestData::~GeolocationRequestData(GeolocationRequestData *this, WTF::StringImpl *a2)
{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  v3 = (const void *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 68);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E34CDDD8[v6])(&v10, (char *)this + 248);
  *((_DWORD *)this + 68) = -1;
  v7 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)this + 48));
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void WTF::VectorMover<false,GeolocationRequestData>::move(GeolocationRequestData *a1, GeolocationRequestData *a2, uint64_t a3)
{
  GeolocationRequestData *v5;
  WTF::StringImpl *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      GeolocationRequestData::GeolocationRequestData(a3, (uint64_t)v5);
      GeolocationRequestData::~GeolocationRequestData(v5, v6);
      a3 += 352;
      v5 = (GeolocationRequestData *)((char *)v5 + 352);
    }
    while (v5 != a2);
  }
}

uint64_t GeolocationRequestData::GeolocationRequestData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  WTF::URL::URL(a1, (uint64_t *)a2);
  *(_WORD *)(v4 + 40) = *(_WORD *)(a2 + 40);
  WebCore::ResourceRequestBase::ResourceRequestBase(v4 + 48, a2 + 48);
  v5 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 248, a2 + 248);
  v6 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 280) = v6;
  v7 = *(_OWORD *)(a2 + 288);
  v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 318) = *(_OWORD *)(a2 + 318);
  *(_OWORD *)(a1 + 288) = v7;
  *(_OWORD *)(a1 + 304) = v8;
  v9 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a1 + 336) = v9;
  v10 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a1 + 344) = v10;
  return a1;
}

void sub_19728E394(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::ResourceRequestBase *v2;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = *(const void **)(v1 + 240);
  *(_QWORD *)(v1 + 240) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v6 = *(WTF::StringImpl **)v1;
  *(_QWORD *)v1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::GamepadData::GamepadData(uint64_t a1, int a2, _DWORD **a3, _DWORD **a4, uint64_t *a5, uint64_t *a6, unsigned __int8 **a7, double a8)
{
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_DWORD *)a1 = a2;
  v13 = *a3;
  if (*a3)
    *v13 += 2;
  *(_QWORD *)(a1 + 8) = v13;
  v14 = *a4;
  if (*a4)
    *v14 += 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v14;
  v15 = *((unsigned int *)a5 + 3);
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
      goto LABEL_18;
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 24) = v16;
    v17 = *((unsigned int *)a5 + 3);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = *a5;
      v20 = 8 * v17;
      do
      {
        *(_QWORD *)(v16 + 8 * v18) = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v18) + 8);
        ++v18;
        v20 -= 8;
      }
      while (v20);
      *(_DWORD *)(a1 + 36) = v18;
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v21 = *((unsigned int *)a6 + 3);
  if (!(_DWORD)v21)
    goto LABEL_17;
  if (v21 >> 29)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19728E680);
  }
  v22 = WTF::fastMalloc((WTF *)(8 * v21));
  *(_DWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 40) = v22;
  v23 = *((unsigned int *)a6 + 3);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = *a6;
    v26 = 8 * v23;
    do
    {
      *(_QWORD *)(v22 + 8 * v24) = *(_QWORD *)(*(_QWORD *)(v25 + 8 * v24) + 8);
      ++v24;
      v26 -= 8;
    }
    while (v26);
    *(_DWORD *)(a1 + 52) = v24;
  }
LABEL_17:
  *(double *)(a1 + 56) = a8;
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)(a1 + 64), a7);
  return a1;
}

uint64_t *WebKit::RemoteScrollingCoordinatorTransaction::RemoteScrollingCoordinatorTransaction(uint64_t *result, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  WebCore::ScrollingStateTree *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;

  v6 = *a2;
  *a2 = 0;
  *result = v6;
  *((_BYTE *)result + 8) = a3;
  result[2] = a4;
  result[3] = a5;
  if (!v6)
  {
    v11 = result;
    v10 = a6;
    v7 = (WebCore::ScrollingStateTree *)WTF::fastMalloc((WTF *)0x50);
    WebCore::ScrollingStateTree::ScrollingStateTree(v7, 0);
    a6 = v10;
    result = v11;
    v8 = *v11;
    *v11 = (uint64_t)v7;
    if (v8)
    {
      WebCore::ScrollingStateTree::operator delete(v8, 0x50uLL);
      a6 = v10;
      result = v11;
    }
  }
  if (a6)
  {
    v9 = result;
    WebCore::ScrollingStateTree::attachDeserializedNodes((WebCore::ScrollingStateTree *)*result);
    return v9;
  }
  return result;
}

uint64_t WebKit::RemoteScrollingUIState::reset(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = this;
  *(_BYTE *)this = 0;
  v3 = *(_QWORD *)(this + 8);
  if (v3)
  {
    *(_QWORD *)(this + 8) = 0;
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    *(_QWORD *)(v2 + 16) = 0;
    this = WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    *(_QWORD *)(v2 + 24) = 0;
    return WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return this;
}

uint64_t WebKit::RemoteScrollingUIState::addNodeWithActiveUserScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v5[24];
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t *)(a1 + 16), v6, (uint64_t)v5);
  if (v5[16])
    *(_BYTE *)a1 |= 2u;
  return result;
}

_OWORD *WebKit::RemoteScrollingUIState::removeNodeWithActiveUserScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _OWORD *result;
  uint64_t v6;
  _OWORD *v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v4 = (uint64_t *)(a1 + 16);
  result = (_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 16), v8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = (_OWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v7 = 0;
  }
  if (v7 != result)
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, result);
  *(_BYTE *)a1 |= 2u;
  return result;
}

WTF *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF *result;
  void *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[3];
  uint64_t v29;
  char v30;
  WTF *v31;
  uint64_t v32;
  _QWORD v33[8];
  _QWORD *v34;

  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  result = (WTF *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  if (result)
  {
    v9 = result;
    v32 = 0;
    v10 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v10)
    {
      if (v10 >= 0x4924925)
      {
LABEL_26:
        __break(0xC471u);
        return result;
      }
      v11 = 56 * v10;
      result = (WTF *)WTF::fastMalloc((WTF *)(56 * v10));
      v12 = v11 / 0x38;
      LODWORD(v32) = v11 / 0x38;
      v31 = result;
      v10 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v10)
      {
        v13 = *(_QWORD *)(a2 + 16);
        v14 = (unsigned int *)(v13 + 40);
        v15 = 48 * v10;
        while (1)
        {
          v33[0] = a1;
          v33[1] = v13;
          v33[2] = a1;
          v33[3] = v13;
          v33[4] = a1;
          v33[5] = v13;
          v33[6] = a1;
          v33[7] = v13;
          v16 = *v14;
          if ((_DWORD)v16 == -1)
          {
            result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_26;
          }
          v34 = v33;
          ((void (*)(_OWORD *__return_ptr, _QWORD **, unsigned int *))off_1E34CDE98[v16])(v28, &v34, v14 - 8);
          if (!v30)
            break;
          v17 = HIDWORD(v32);
          if (HIDWORD(v32) == (_DWORD)v32)
          {
            v18 = WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, HIDWORD(v32) + 1, (unint64_t)v28);
            v19 = HIDWORD(v32);
            result = v31;
            v20 = (char *)v31 + 56 * HIDWORD(v32);
            v22 = *(_OWORD *)(v18 + 16);
            v21 = *(_OWORD *)(v18 + 32);
            v23 = *(_OWORD *)v18;
            *((_QWORD *)v20 + 6) = *(_QWORD *)(v18 + 48);
            *((_OWORD *)v20 + 1) = v22;
            *((_OWORD *)v20 + 2) = v21;
            *(_OWORD *)v20 = v23;
            v17 = v19;
          }
          else
          {
            result = v31;
            v24 = (char *)v31 + 56 * HIDWORD(v32);
            v25 = v28[0];
            v26 = v28[1];
            v27 = v28[2];
            *((_QWORD *)v24 + 6) = v29;
            *((_OWORD *)v24 + 1) = v26;
            *((_OWORD *)v24 + 2) = v27;
            *(_OWORD *)v24 = v25;
          }
          LODWORD(v10) = v17 + 1;
          HIDWORD(v32) = v10;
          v14 += 12;
          v13 += 48;
          v15 -= 48;
          if (!v15)
          {
            v12 = v32;
            goto LABEL_17;
          }
        }
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 32) = 0;
        result = v31;
        if (v31)
        {
          v31 = 0;
          LODWORD(v32) = 0;
          result = (WTF *)WTF::fastFree(result, v8);
        }
        goto LABEL_18;
      }
    }
    else
    {
      v12 = 0;
      result = 0;
    }
LABEL_17:
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 24) = v12;
    *(_DWORD *)(a3 + 28) = v10;
    *(_BYTE *)(a3 + 32) = 1;
    v6 = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
LABEL_18:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

{
  WTF *result;
  void *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char v30;
  char *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  WTF *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  WTF *v57;
  uint64_t v58;

  result = (WTF *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)&v51);
  if (!v56)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    return (WTF *)std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v6);
  }
  v49 = 0;
  v50 = 0;
  v7 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v7)
  {
LABEL_37:
    v44[0] = v51;
    LOBYTE(v44[1]) = 0;
    LOBYTE(v45) = 0;
    v34 = v53;
    if (v53)
    {
      v35 = v52;
      v52 = 0;
      v44[1] = v35;
      LOBYTE(v45) = 1;
    }
    v36 = v54;
    v54 = 0;
    v37 = v55;
    v55 = 0;
    v38 = v49;
    v49 = 0;
    v39 = v50;
    v50 = 0;
    *(_QWORD *)a3 = v51;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v34)
    {
      v40 = v44[1];
      v44[1] = 0;
      *(_QWORD *)(a3 + 8) = v40;
      *(_BYTE *)(a3 + 16) = 1;
    }
    v46 = 0;
    *(_QWORD *)(a3 + 24) = v36;
    v47 = 0;
    *(_QWORD *)(a3 + 32) = v37;
    v48[0] = 0;
    *(_QWORD *)(a3 + 40) = v38;
    v48[1] = 0;
    *(_QWORD *)(a3 + 48) = v39;
    *(_BYTE *)(a3 + 56) = 1;
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v6);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v41);
    if ((_BYTE)v45)
    {
      v43 = v44[1];
      v44[1] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v42);
        else
          *(_DWORD *)v43 -= 2;
      }
    }
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v42);
    return (WTF *)std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v6);
  }
  if (v7 < 0x6666667)
  {
    v8 = 40 * v7;
    result = (WTF *)WTF::fastMalloc((WTF *)(40 * v7));
    LODWORD(v50) = (v8 & 0xFFFFFFF8) / 0x28;
    v49 = result;
    v9 = *(_DWORD *)(a2 + 52);
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 40);
      v11 = v10 + 40 * v9;
      do
      {
        if (*(_BYTE *)(v10 + 32))
        {
          v58 = 0;
          v12 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v12)
          {
            if (v12 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              goto LABEL_50;
            }
            v13 = 24 * v12;
            result = (WTF *)WTF::fastMalloc((WTF *)(24 * v12));
            LODWORD(v12) = (v13 & 0xFFFFFFF8) / 0x18;
            LODWORD(v58) = v12;
            v57 = result;
            v14 = *(_DWORD *)(v10 + 28);
            if (v14)
            {
              v15 = 0;
              v16 = *(_QWORD *)(v10 + 16);
              v17 = v16 + 24 * v14;
              do
              {
                v18 = *(WTF::StringImpl **)(v16 + 8);
                v19 = *(_DWORD *)(v16 + 16);
                LOBYTE(v44[0]) = *(_BYTE *)v16;
                v44[1] = v18;
                LODWORD(v45) = v19;
                LOBYTE(v46) = 1;
                if (v15 == (_DWORD)v58)
                {
                  v20 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, v15 + 1, (unint64_t)v44);
                  v15 = HIDWORD(v58);
                  result = v57;
                  v21 = (char *)v57 + 24 * HIDWORD(v58);
                  v22 = *(_QWORD *)(v20 + 16);
                  *(_OWORD *)v21 = *(_OWORD *)v20;
                  *((_QWORD *)v21 + 2) = v22;
                }
                else
                {
                  v23 = *(_OWORD *)v44;
                  v24 = (char *)result + 24 * v15;
                  *((_QWORD *)v24 + 2) = v45;
                  *(_OWORD *)v24 = v23;
                }
                HIDWORD(v58) = ++v15;
                v16 += 24;
              }
              while (v16 != v17);
              LODWORD(v12) = v58;
            }
            else
            {
              v15 = 0;
            }
          }
          else
          {
            v15 = 0;
            result = 0;
          }
          v30 = *(_BYTE *)(v10 + 8);
          v44[0] = *(WTF::StringImpl **)v10;
          LOBYTE(v44[1]) = v30;
          v45 = result;
          v46 = __PAIR64__(v15, v12);
          LOBYTE(v47) = 1;
          if (HIDWORD(v50) == (_DWORD)v50)
          {
            result = (WTF *)WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>((uint64_t)&v49, (unint64_t)v44);
          }
          else
          {
            v31 = (char *)v49 + 40 * HIDWORD(v50);
            *v31 = 0;
            v31[32] = 0;
            if ((_BYTE)v47)
            {
              v32 = v44[0];
              v31[8] = (char)v44[1];
              *(_QWORD *)v31 = v32;
              *((_QWORD *)v31 + 2) = 0;
              *((_QWORD *)v31 + 3) = 0;
              v33 = v45;
              v45 = 0;
              *((_QWORD *)v31 + 2) = v33;
              *((_DWORD *)v31 + 6) = v46;
              LODWORD(v33) = HIDWORD(v46);
              HIDWORD(v46) = 0;
              *((_DWORD *)v31 + 7) = (_DWORD)v33;
              v31[32] = 1;
            }
            ++HIDWORD(v50);
          }
          if ((_BYTE)v47)
          {
            result = v45;
            if (v45)
            {
              v45 = 0;
              LODWORD(v46) = 0;
              result = (WTF *)WTF::fastFree(result, v6);
            }
          }
        }
        else
        {
          v25 = HIDWORD(v50);
          if (HIDWORD(v50) == (_DWORD)v50)
          {
            v26 = HIDWORD(v50) + ((unint64_t)HIDWORD(v50) >> 2);
            if (v26 >= 0x10)
              v27 = v26 + 1;
            else
              v27 = 16;
            if (v27 <= (unint64_t)HIDWORD(v50) + 1)
              v28 = HIDWORD(v50) + 1;
            else
              v28 = v27;
            result = (WTF *)WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v49, v28);
            v25 = HIDWORD(v50);
          }
          v29 = (char *)v49 + 40 * v25;
          *v29 = 0;
          v29[32] = 0;
          ++HIDWORD(v50);
        }
        v10 += 40;
      }
      while (v10 != v11);
      if (v56)
        goto LABEL_37;
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    goto LABEL_37;
  }
LABEL_51:
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  int *v12;
  uint64_t v13;
  void *v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF *v43;
  _QWORD v44[3];
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  __int128 v50;
  char v51;
  char v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  int v57;
  _BYTE v58[9];

  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
  if (result)
  {
    v41 = result;
    v47 = 0;
    v48 = 0;
    v9 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v9)
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19728EF8CLL);
      }
      LODWORD(v48) = 48 * (int)v9 / 0x30u;
      v47 = WTF::fastMalloc((WTF *)(48 * v9));
      v10 = *(_DWORD *)(a2 + 28);
      if (v10)
      {
        v11 = *(int **)(a2 + 16);
        v12 = &v11[14 * v10];
        while (1)
        {
          switch(*((_BYTE *)v11 + 48))
          {
            case 0:
              v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 160))(a1, *((_QWORD *)v11 + 5));
              if (!v13)
                goto LABEL_55;
              v15 = *v11;
              v53 = *v11;
              v54 = v13;
              v57 = 0;
              goto LABEL_23;
            case 1:
              v22 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, *((_QWORD *)v11 + 5));
              if (!v22)
                goto LABEL_55;
              v53 = *v11;
              v54 = v22;
              v57 = 1;
              LODWORD(v42) = v53;
              LOBYTE(v43) = 0;
              v45 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43, (uint64_t)&v54);
              v46 = 1;
              goto LABEL_26;
            case 2:
              WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, (uint64_t)(v11 + 2), (uint64_t)&v49);
              if (v52)
              {
                v53 = *v11;
                v16 = (unsigned int *)v49;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 + 1, v16));
                v54 = (uint64_t)v16;
                v55 = v50;
                v56 = v51;
                v57 = 2;
                LODWORD(v42) = v53;
                LOBYTE(v43) = 0;
                v45 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43, (uint64_t)&v54);
                v46 = 1;
                if (v57 != -1)
                  ((void (*)(_BYTE *, uint64_t *))off_1E34CDE58[v57])(v58, &v54);
                if (v52)
                {
                  v18 = (unsigned int *)v49;
                  v49 = 0;
                  if (v18)
                  {
                    do
                    {
                      v19 = __ldaxr(v18);
                      v20 = v19 - 1;
                    }
                    while (__stlxr(v20, v18));
                    if (!v20)
                    {
                      atomic_store(1u, v18);
                      WTF::fastFree((WTF *)v18, v14);
                    }
                  }
                }
              }
              else
              {
                LOBYTE(v42) = 0;
                v46 = 0;
              }
              goto LABEL_28;
            case 3:
              v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(a1, *((_QWORD *)v11 + 5));
              if (!v21)
                goto LABEL_55;
              v15 = *v11;
              v53 = *v11;
              v54 = v21;
              v57 = 3;
LABEL_23:
              LODWORD(v42) = v15;
              LOBYTE(v43) = 0;
              v45 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43, (uint64_t)&v54);
              v46 = 1;
LABEL_26:
              if (v57 != -1)
                ((void (*)(WTF **, uint64_t *))off_1E34CDE58[v57])(&v49, &v54);
LABEL_28:
              if (!v46)
              {
LABEL_55:
                *(_BYTE *)a3 = 0;
                *(_BYTE *)(a3 + 32) = 0;
                goto LABEL_56;
              }
              v23 = HIDWORD(v48);
              if (HIDWORD(v48) == (_DWORD)v48)
              {
                v24 = (int *)WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, HIDWORD(v48) + 1, (unint64_t)&v42);
                v23 = HIDWORD(v48);
                v25 = (uint64_t)(v24 + 2);
                v26 = *v24;
                v27 = v47 + 48 * HIDWORD(v48);
                *(_DWORD *)v27 = v26;
                *(_DWORD *)(v27 + 40) = -1;
                *(_BYTE *)(v27 + 8) = 0;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(v27 + 8, v25);
              }
              else
              {
                v28 = v47 + 48 * HIDWORD(v48);
                *(_DWORD *)v28 = (_DWORD)v42;
                *(_DWORD *)(v28 + 40) = -1;
                *(_BYTE *)(v28 + 8) = 0;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(v28 + 8, (uint64_t)&v43);
              }
              HIDWORD(v48) = v23 + 1;
              if (v46 && v45 != -1)
                ((void (*)(int *, WTF **))off_1E34CDE58[v45])(&v53, &v43);
              v11 += 14;
              if (v11 == v12)
                goto LABEL_38;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19728EF84);
          }
        }
      }
    }
LABEL_38:
    v42 = v6;
    if (!*(_QWORD *)(v41 + 16))
    {
      v29 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = v41;
      v30 = *(unsigned int **)(v41 + 16);
      *(_QWORD *)(v41 + 16) = v29;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v8);
        }
      }
    }
    v33 = *(unsigned int **)(v41 + 16);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = v47;
    v47 = 0;
    *(_QWORD *)a3 = v42;
    *(_QWORD *)(a3 + 8) = v33;
    v43 = 0;
    v44[0] = 0;
    v42 = 0;
    *(_QWORD *)(a3 + 16) = v35;
    v44[1] = 0;
    v36 = v48;
    v48 = 0;
    *(_QWORD *)(a3 + 24) = v36;
    *(_BYTE *)(a3 + 32) = 1;
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v8);
    v37 = (unsigned int *)v43;
    v43 = 0;
    if (v37)
    {
      do
      {
        v39 = __ldaxr(v37);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v37));
      if (!v40)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v14);
      }
    }
    v38 = v42;
    v42 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v38 -= 2;
    }
    v6 = 0;
LABEL_56:
    result = WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v14);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  char v35;
  _QWORD v36[4];
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v39);
  if (!v44)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, (void *)v7);
  }
  v37 = 0;
  v38 = 0;
  v8 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v8)
  {
LABEL_30:
    v12 = 0;
LABEL_31:
    v26 = v39;
    v39 = 0;
    LOBYTE(v34) = 0;
    v35 = 0;
    v27 = v41;
    if (v41)
    {
      v28 = v40;
      v40 = 0;
      v34 = v28;
      v35 = 1;
    }
    v29 = v42;
    v42 = 0;
    v30 = v43;
    v43 = 0;
    v31 = v37;
    v37 = 0;
    v32 = v38;
    v38 = 0;
    *(_QWORD *)a3 = v26;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v27)
    {
      v33 = v34;
      v34 = 0;
      *(_QWORD *)(a3 + 8) = v33;
      *(_BYTE *)(a3 + 16) = 1;
    }
    v36[0] = 0;
    *(_QWORD *)(a3 + 24) = v29;
    v36[1] = 0;
    *(_QWORD *)(a3 + 32) = v30;
    v36[2] = 0;
    *(_QWORD *)(a3 + 40) = v31;
    v36[3] = 0;
    *(_DWORD *)(a3 + 48) = v32;
    *(_DWORD *)(a3 + 52) = v12;
    *(_BYTE *)(a3 + 56) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, (void *)v7);
    if (v35 && v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v34 -= 2;
    }
LABEL_41:
    if (v37)
      WTF::fastFree(v37, (void *)v7);
    return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, (void *)v7);
  }
  if (!(v8 >> 28))
  {
    v9 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
    LODWORD(v38) = v8;
    v37 = v9;
    v10 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v10)
    {
      v11 = v9;
      v12 = 0;
      v13 = *(unsigned __int8 **)(a2 + 40);
      v14 = 16 * v10;
      do
      {
        if (v13[12])
        {
          v15 = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, v13);
          if ((v7 & 0xFF00000000) == 0)
          {
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 56) = 0;
            goto LABEL_41;
          }
          v16 = v15;
          v17 = v7;
          if (v12 == (_DWORD)v38)
          {
            v18 = v12 + ((unint64_t)v12 >> 2);
            if (v18 >= 0x10)
              v19 = v18 + 1;
            else
              v19 = 16;
            if (v19 <= (unint64_t)v12 + 1)
              v20 = v12 + 1;
            else
              v20 = v19;
            WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v37, v20);
            v12 = HIDWORD(v38);
            v11 = v37;
            v21 = (char *)v37 + 16 * HIDWORD(v38);
          }
          else
          {
            v21 = (char *)v11 + 16 * v12;
          }
          *(_QWORD *)v21 = v16;
          *((_DWORD *)v21 + 2) = v17;
          v25 = 1;
        }
        else if (v12 == (_DWORD)v38)
        {
          v22 = v12 + ((unint64_t)v12 >> 2);
          if (v22 >= 0x10)
            v23 = v22 + 1;
          else
            v23 = 16;
          if (v23 <= (unint64_t)v12 + 1)
            v24 = v12 + 1;
          else
            v24 = v23;
          WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v37, v24);
          v25 = 0;
          v12 = HIDWORD(v38);
          v11 = v37;
          v21 = (char *)v37 + 16 * HIDWORD(v38);
          *v21 = 0;
        }
        else
        {
          v25 = 0;
          v21 = (char *)v11 + 16 * v12;
          *v21 = 0;
        }
        v21[12] = v25;
        HIDWORD(v38) = ++v12;
        v13 += 16;
        v14 -= 16;
      }
      while (v14);
      if (v44)
        goto LABEL_31;
      __break(1u);
    }
    goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, *(_QWORD *)a2);
  if (result)
  {
    v6 = result;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(result + 16), result);
    v7 = *(unsigned int **)(v6 + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v15 = (WTF *)v7;
    LOBYTE(v16) = 0;
    v17 = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v9 = *(WTF::StringImpl **)(a2 + 8);
      if (v9)
        *(_DWORD *)v9 += 2;
      v16 = v9;
      v17 = 1;
    }
    v10 = WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v18, (uint64_t *)(a2 + 24));
    *(_QWORD *)a3 = v15;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v17)
    {
      v12 = v16;
      v16 = 0;
      *(_QWORD *)(a3 + 8) = v12;
      *(_BYTE *)(a3 + 16) = 1;
    }
    *(_QWORD *)(a3 + 24) = v18;
    v13 = v19;
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(a3 + 32) = v13;
    *(_BYTE *)(a3 + 40) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v11);
    if (v17 && v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    return 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl *v48;
  void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int *v52;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  WTF::StringImpl *v58[2];
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v64);
  if (!v69)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v5);
  }
  v62 = 0;
  v63 = 0;
  v6 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v6)
    goto LABEL_40;
  if (v6 >= 0x6666667)
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  v7 = 40 * v6;
  v8 = WTF::fastMalloc((WTF *)(40 * v6));
  LODWORD(v63) = (v7 & 0xFFFFFFF8) / 0x28;
  v62 = v8;
  v9 = *(_DWORD *)(a2 + 52);
  if (!v9)
    goto LABEL_40;
  v10 = v8;
  v11 = 0;
  v12 = *(uint64_t **)(a2 + 40);
  v56 = a3;
  v57 = &v12[5 * v9];
  do
  {
    if (*((_BYTE *)v12 + 32))
    {
      v71 = 0;
      v13 = *((unsigned int *)v12 + 7);
      if (!(_DWORD)v13)
      {
        v18 = 0;
        v16 = 0;
        v15 = 0;
LABEL_27:
        v34 = *v12;
        v35 = *((_BYTE *)v12 + 8);
        if (v11 == (_DWORD)v63)
        {
          v36 = v11 + ((unint64_t)v11 >> 2);
          if (v36 >= 0x10)
            v37 = v36 + 1;
          else
            v37 = 16;
          if (v37 <= (unint64_t)v11 + 1)
            v38 = v11 + 1;
          else
            v38 = v37;
          WTF::Vector<std::optional<WebCore::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)&v62, v38);
          v31 = HIDWORD(v63);
          v10 = v62;
          v39 = v62 + 40 * HIDWORD(v63);
          *(_QWORD *)v39 = v34;
          *(_BYTE *)(v39 + 8) = v35;
          *(_QWORD *)(v39 + 16) = v15;
          *(_DWORD *)(v39 + 24) = v16;
          *(_DWORD *)(v39 + 28) = v18;
          *(_BYTE *)(v39 + 32) = 1;
          goto LABEL_37;
        }
        v40 = v10 + 40 * v11;
        *(_QWORD *)v40 = v34;
        *(_BYTE *)(v40 + 8) = v35;
        *(_QWORD *)(v40 + 16) = v15;
        *(_DWORD *)(v40 + 24) = v16;
        *(_DWORD *)(v40 + 28) = v18;
        *(_BYTE *)(v40 + 32) = 1;
LABEL_36:
        v31 = HIDWORD(v63);
        goto LABEL_37;
      }
      if (v13 < 0xAAAAAAB)
      {
        v14 = 24 * v13;
        v15 = WTF::fastMalloc((WTF *)(24 * v13));
        v16 = (v14 & 0xFFFFFFF8) / 0x18;
        LODWORD(v71) = v16;
        v70 = v15;
        v17 = *((_DWORD *)v12 + 7);
        if (v17)
        {
          v18 = 0;
          v19 = v12[2];
          v20 = v19 + 24 * v17;
          do
          {
            v21 = *(WTF::StringImpl **)(v19 + 8);
            v22 = *(_DWORD *)(v19 + 16);
            LOBYTE(v58[0]) = *(_BYTE *)v19;
            v58[1] = v21;
            LODWORD(v59) = v22;
            LOBYTE(v60[0]) = 1;
            if (v18 == (_DWORD)v71)
            {
              v23 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v70, v18 + 1, (unint64_t)v58);
              v18 = HIDWORD(v71);
              v15 = v70;
              v24 = v70 + 24 * HIDWORD(v71);
              v25 = *(_QWORD *)(v23 + 16);
              *(_OWORD *)v24 = *(_OWORD *)v23;
              *(_QWORD *)(v24 + 16) = v25;
            }
            else
            {
              v26 = *(_OWORD *)v58;
              v27 = v15 + 24 * v18;
              *(_QWORD *)(v27 + 16) = v59;
              *(_OWORD *)v27 = v26;
            }
            HIDWORD(v71) = ++v18;
            v19 += 24;
          }
          while (v19 != v20);
          v16 = v71;
        }
        else
        {
          v18 = 0;
        }
        goto LABEL_27;
      }
      __break(0xC471u);
LABEL_59:
      JUMPOUT(0x1972CF960);
    }
    if (v11 != (_DWORD)v63)
    {
      v33 = (_BYTE *)(v10 + 40 * v11);
      *v33 = 0;
      v33[32] = 0;
      goto LABEL_36;
    }
    v28 = v11 + ((unint64_t)v11 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= (unint64_t)v11 + 1)
      v30 = v11 + 1;
    else
      v30 = v29;
    WTF::Vector<std::optional<WebCore::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)&v62, v30);
    v31 = HIDWORD(v63);
    v10 = v62;
    v32 = (_BYTE *)(v62 + 40 * HIDWORD(v63));
    *v32 = 0;
    v32[32] = 0;
LABEL_37:
    v11 = v31 + 1;
    HIDWORD(v63) = v31 + 1;
    v12 += 5;
  }
  while (v12 != v57);
  a3 = v56;
  if (!v69)
  {
    __break(1u);
LABEL_40:
    v11 = 0;
  }
  v41 = v64;
  v64 = 0;
  LOBYTE(v58[1]) = 0;
  LOBYTE(v59) = 0;
  v42 = v66;
  if (v66)
  {
    v43 = v65;
    v65 = 0;
    v58[1] = v43;
    LOBYTE(v59) = 1;
  }
  v44 = v67;
  v67 = 0;
  v45 = v68;
  v68 = 0;
  v46 = v62;
  v62 = 0;
  v47 = v63;
  v63 = 0;
  v58[0] = 0;
  *(_QWORD *)a3 = v41;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (v42)
  {
    v48 = v58[1];
    v58[1] = 0;
    *(_QWORD *)(a3 + 8) = v48;
    *(_BYTE *)(a3 + 16) = 1;
  }
  v60[0] = 0;
  *(_QWORD *)(a3 + 24) = v44;
  v60[1] = 0;
  *(_QWORD *)(a3 + 32) = v45;
  v61[0] = 0;
  *(_QWORD *)(a3 + 40) = v46;
  v61[1] = 0;
  *(_DWORD *)(a3 + 48) = v47;
  *(_DWORD *)(a3 + 52) = v11;
  *(_BYTE *)(a3 + 56) = 1;
  WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v61, v5);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v49);
  if ((_BYTE)v59)
  {
    v51 = v58[1];
    v58[1] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  v52 = (unsigned int *)v58[0];
  v58[0] = 0;
  if (v52)
  {
    do
    {
      v54 = __ldaxr(v52);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v52));
    if (!v55)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, v50);
    }
  }
  WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v50);
  return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v5);
}

void WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  char v27;
  __int16 v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v4 += 2;
  v41 = 0;
  v5 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v5)
  {
    v11 = 0;
    v7 = 0;
LABEL_25:
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 20) = v11;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  if (v5 < 0x5555556)
  {
    v6 = 48 * v5;
    v7 = WTF::fastMalloc((WTF *)(48 * v5));
    LODWORD(v5) = (v6 & 0xFFFFFFF0) / 0x30;
    LODWORD(v41) = v5;
    v40 = v7;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 3 * v10;
      v13 = *(_QWORD *)(a1 + 8);
      v14 = 16 * v12;
      v15 = (unsigned __int8 *)(v13 + 43);
      do
      {
        v16 = *(v15 - 19);
        if (v16)
        {
          v16 = *(v15 - 35);
          v8 = *(v15 - 34);
          v17 = 1;
          v9 = *(_QWORD *)(v15 - 27);
        }
        else
        {
          v17 = 0;
        }
        v18 = *(v15 - 6);
        if (*(v15 - 6))
        {
          v18 = *(v15 - 9);
          v19 = (*(v15 - 8) << 8) | (*(v15 - 7) << 16);
          v20 = 0x1000000;
        }
        else
        {
          v20 = 0;
          v19 = 0;
        }
        v21 = *(v15 - 2);
        if (*(v15 - 2))
        {
          v21 = *(v15 - 5);
          v22 = (*(v15 - 4) << 8) | (*(v15 - 3) << 16);
          v23 = 0x1000000;
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
        v24 = *(v15 - 10);
        v25 = *(v15 - 11);
        if (!*(v15 - 10))
          v25 = 0;
        v26 = *(_DWORD *)(v15 - 43);
        v27 = *(v15 - 39);
        BYTE9(v36) = v8;
        *(_QWORD *)&v37 = v9;
        v8 = v25;
        v9 = v20 | v18 | v19;
        v28 = *v15 << 8;
        LODWORD(v36) = v26;
        BYTE4(v36) = v27;
        BYTE8(v36) = v16;
        BYTE8(v37) = v17;
        LOWORD(v38) = v25 | (v24 << 8);
        *(_DWORD *)((char *)&v38 + 2) = v9;
        *(_DWORD *)((char *)&v38 + 6) = v23 | v22 | v21;
        WORD5(v38) = v28;
        v39 = 1;
        if (v11 == (_DWORD)v41)
        {
          v29 = (_OWORD *)WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v11 + 1, (unint64_t)&v36);
          v11 = HIDWORD(v41);
          v7 = v40;
          v30 = (_OWORD *)(v40 + 48 * HIDWORD(v41));
          v32 = v29[1];
          v31 = v29[2];
          *v30 = *v29;
          v30[1] = v32;
          v30[2] = v31;
        }
        else
        {
          v33 = (_OWORD *)(v7 + 48 * v11);
          v34 = v36;
          v35 = v38;
          v33[1] = v37;
          v33[2] = v35;
          *v33 = v34;
        }
        HIDWORD(v41) = ++v11;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
      LODWORD(v5) = v41;
    }
    else
    {
      v11 = 0;
    }
    goto LABEL_25;
  }
  __break(0xC471u);
}

void WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  char v27;
  __int16 v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v4 += 2;
  v41 = 0;
  v5 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v5)
  {
    v11 = 0;
    v7 = 0;
LABEL_25:
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 20) = v11;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  if (v5 < 0x5555556)
  {
    v6 = 48 * v5;
    v7 = WTF::fastMalloc((WTF *)(48 * v5));
    LODWORD(v5) = (v6 & 0xFFFFFFF0) / 0x30;
    LODWORD(v41) = v5;
    v40 = v7;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 3 * v10;
      v13 = *(_QWORD *)(a1 + 8);
      v14 = 16 * v12;
      v15 = (unsigned __int8 *)(v13 + 43);
      do
      {
        v16 = *(v15 - 19);
        if (v16)
        {
          v16 = *(v15 - 35);
          v8 = *(v15 - 34);
          v17 = 1;
          v9 = *(_QWORD *)(v15 - 27);
        }
        else
        {
          v17 = 0;
        }
        v18 = *(v15 - 6);
        if (*(v15 - 6))
        {
          v18 = *(v15 - 9);
          v19 = (*(v15 - 8) << 8) | (*(v15 - 7) << 16);
          v20 = 0x1000000;
        }
        else
        {
          v20 = 0;
          v19 = 0;
        }
        v21 = *(v15 - 2);
        if (*(v15 - 2))
        {
          v21 = *(v15 - 5);
          v22 = (*(v15 - 4) << 8) | (*(v15 - 3) << 16);
          v23 = 0x1000000;
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
        v24 = *(v15 - 10);
        v25 = *(v15 - 11);
        if (!*(v15 - 10))
          v25 = 0;
        v26 = *(_DWORD *)(v15 - 43);
        v27 = *(v15 - 39);
        BYTE9(v36) = v8;
        *(_QWORD *)&v37 = v9;
        v8 = v25;
        v9 = v20 | v18 | v19;
        v28 = *v15 << 8;
        LODWORD(v36) = v26;
        BYTE4(v36) = v27;
        BYTE8(v36) = v16;
        BYTE8(v37) = v17;
        LOWORD(v38) = v25 | (v24 << 8);
        *(_DWORD *)((char *)&v38 + 2) = v9;
        *(_DWORD *)((char *)&v38 + 6) = v23 | v22 | v21;
        WORD5(v38) = v28;
        v39 = 1;
        if (v11 == (_DWORD)v41)
        {
          v29 = (_OWORD *)WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v11 + 1, (unint64_t)&v36);
          v11 = HIDWORD(v41);
          v7 = v40;
          v30 = (_OWORD *)(v40 + 48 * HIDWORD(v41));
          v32 = v29[1];
          v31 = v29[2];
          *v30 = *v29;
          v30[1] = v32;
          v30[2] = v31;
        }
        else
        {
          v33 = (_OWORD *)(v7 + 48 * v11);
          v34 = v36;
          v35 = v38;
          v33[1] = v37;
          v33[2] = v35;
          *v33 = v34;
        }
        HIDWORD(v41) = ++v11;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
      LODWORD(v5) = v41;
    }
    else
    {
      v11 = 0;
    }
    goto LABEL_25;
  }
  __break(0xC471u);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34CDE58[v4])(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34CDE78[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_BYTE *)(a2 + 24) = *((_BYTE *)a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

unint64_t WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = 48 * v4;
        v8 = (_DWORD *)((char *)v3 + 40);
        do
        {
          *(_DWORD *)result = *(v8 - 10);
          *(_BYTE *)(result + 8) = 0;
          v9 = result + 8;
          *(_DWORD *)(result + 40) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(result + 8, (uint64_t)(v8 - 8));
          v10 = *v8;
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, _DWORD *))off_1E34CDE58[v10])(&v11, v8 - 8);
          *v8 = -1;
          v8 += 12;
          result = v9 + 40;
          v7 -= 48;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_1,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_2,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::reference_wrapper<WebCore::WebGPU::Sampler>,std::__variant_detail::_Trait<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::__variant_detail::_Trait<WebCore::WebGPU::ExternalTexture>> const&>@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  char v7;

  v4 = (uint64_t)*a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 184))(**a1, *a2);
  if (result)
  {
    *(_DWORD *)a3 = **(_DWORD **)(v4 + 8);
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = result;
    v6 = (_BYTE *)(a3 + 48);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = (_BYTE *)a3;
  }
  *v6 = 0;
  *(_BYTE *)(a3 + 56) = v7;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_1,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_2,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::reference_wrapper<WebCore::WebGPU::Sampler>,std::__variant_detail::_Trait<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::__variant_detail::_Trait<WebCore::WebGPU::ExternalTexture>> const&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*a1 + 16) + 208))(*(_QWORD *)(*a1 + 16), *a2);
  if (result)
  {
    *(_DWORD *)a3 = **(_DWORD **)(v4 + 24);
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = result;
    v6 = 1;
    *(_BYTE *)(a3 + 48) = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 56) = v6;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_1,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_2,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::reference_wrapper<WebCore::WebGPU::Sampler>,std::__variant_detail::_Trait<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::__variant_detail::_Trait<WebCore::WebGPU::ExternalTexture>> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v5 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*a1 + 32) + 40))(*(_QWORD *)(*a1 + 32), *(_QWORD *)(*(_QWORD *)a2 + 8));
  if (result)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a3 + 24) = v7;
    *(_BYTE *)(a3 + 32) = *(_BYTE *)(a2 + 24);
    *(_DWORD *)a3 = **(_DWORD **)(v5 + 40);
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 40) = result;
    *(_BYTE *)(a3 + 48) = 2;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 56) = v8;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_1,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_2,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(WebCore::WebGPU::BindGroupEntry const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::reference_wrapper<WebCore::WebGPU::Sampler>,std::__variant_detail::_Trait<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::__variant_detail::_Trait<WebCore::WebGPU::ExternalTexture>> const&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*a1 + 48) + 104))(*(_QWORD *)(*a1 + 48), *a2);
  if (result)
  {
    *(_DWORD *)a3 = **(_DWORD **)(v4 + 56);
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = result;
    *(_BYTE *)(a3 + 48) = 3;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 56) = v6;
  return result;
}

unint64_t WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  __int128 v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = 48 * v4;
        v8 = v3;
        do
        {
          v9 = *(_OWORD *)v8;
          v10 = *((_OWORD *)v8 + 2);
          *(_OWORD *)(result + 16) = *((_OWORD *)v8 + 1);
          *(_OWORD *)(result + 32) = v10;
          *(_OWORD *)result = v9;
          result += 48;
          v8 = (WTF *)((char *)v8 + 48);
          v7 -= 48;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void sub_19728FD1C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  unsigned int *v13;
  WTF::StringImpl *v15;

  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, a2);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v15);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19728FF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void *__copy_helper_block_e8_32c64_ZTSKZ51__WKMouseDeviceObserver_stopWithCompletionHandler__E3__1(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_197290634(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c64_ZTSKZ51__WKMouseDeviceObserver_stopWithCompletionHandler__E3__1(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1972906F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_197290D30(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::NativeWebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_197290EF8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::NativeWebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_197291038(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972910E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197291290(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972914E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c71_ZTSKZ58__WKPDFView_web_setContentProviderData_suggestedFilename__E3__6(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v2 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (id *)(a1 + 40);
  *(v3 - 1) = v2;
  objc_copyWeak(v3, (id *)(a2 + 40));
}

void __destroy_helper_block_e8_32c71_ZTSKZ58__WKPDFView_web_setContentProviderData_suggestedFilename__E3__6(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_197291AFC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_197291BC4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_197291CE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197291F80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197292558(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1972927CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197292AAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&a21, a2);
  _Unwind_Resume(a1);
}

void sub_197292C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_197293128(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
  if (a29)
  {
    v32 = a24;
    a24 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v31);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v33);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v33);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v33);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197293388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19729395C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197293A4C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197293FC4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  const void *v5;

  v4 = *(WTF::StringImpl **)(v2 - 32);
  *(_QWORD *)(v2 - 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(const void **)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v5)
    CFRelease(v5);
  _Unwind_Resume(exception_object);
}

void sub_197294268(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

Class initASVInlinePreview(void)
{
  Class result;
  void *v1;

  if ((byte_1ECE72C5C & 1) == 0)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x197294A58);
    }
    *(_QWORD *)algn_1ECE72C78 = v1;
    byte_1ECE72C5C = 1;
  }
  result = objc_getClass("ASVInlinePreview");
  qword_1ECE72C70 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getASVInlinePreviewClass = ASVInlinePreviewFunction;
  return result;
}

uint64_t ASVInlinePreviewFunction(void)
{
  return qword_1ECE72C70;
}

uint64_t std::__optional_destruct_base<WebKit::NativeWebMouseEvent,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(const void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)a2);
  if (result)
  {
    v6 = result;
    result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(result + 4, (uint64_t)result);
    v7 = (unsigned int *)*((_QWORD *)v6 + 2);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a3 + 16) = v9;
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)a3 = v7;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 32) = v10;
  return result;
}

{
  unsigned int *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  __int16 v9;
  int v10;
  void *v11;
  char v12;
  __int16 v13;
  char v14;

  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, *(_QWORD *)a2);
  if (result)
  {
    v6 = result;
    result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(result + 4, (uint64_t)result);
    v7 = (unsigned int *)*((_QWORD *)v6 + 2);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(_WORD *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 28);
    if (v10)
    {
      v11 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 28));
      result = (unsigned int *)memcpy(v11, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
    }
    else
    {
      v11 = 0;
    }
    v13 = *(_WORD *)(a2 + 32);
    v14 = *(_BYTE *)(a2 + 34);
    *(_QWORD *)a3 = v7;
    *(_WORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v11;
    *(_DWORD *)(a3 + 24) = v10;
    *(_DWORD *)(a3 + 28) = v10;
    *(_WORD *)(a3 + 32) = v13;
    *(_BYTE *)(a3 + 34) = v14;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 40) = v12;
  return result;
}

{
  unsigned int *result;
  void *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  int v22;
  int v23;
  unsigned __int8 v24;
  int v25;
  unsigned __int8 v26;
  char v27;
  _BYTE v28[16];
  int v29;
  unsigned __int8 v30;
  uint64_t v31;

  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)a2);
  if (!result)
    goto LABEL_22;
  v8 = result;
  v28[0] = 0;
  v30 = 0;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_11;
  result = (unsigned int *)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2 + 16);
  if (v30 != v24)
  {
    v28[0] = 0;
    v29 = -1;
    result = (unsigned int *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v28, (uint64_t)&v21);
    v30 = 1;
    if (v24)
    {
      if (v23 != -1)
        result = (unsigned int *)((uint64_t (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v23])(&v31, &v21);
    }
  }
  if (v30)
  {
LABEL_11:
    if (!*((_QWORD *)v8 + 2))
    {
      v9 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = v8;
      v10 = (unsigned int *)*((_QWORD *)v8 + 2);
      *((_QWORD *)v8 + 2) = v9;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, v7);
        }
      }
    }
    v13 = (unsigned int *)*((_QWORD *)v8 + 2);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v21 = (WTF *)v13;
    v15 = *(_DWORD *)(a2 + 8);
    v22 = v15;
    LOBYTE(v23) = 0;
    v26 = 0;
    v16 = v30;
    if (v30)
    {
      v25 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v23, (uint64_t)v28);
      v26 = 1;
      v13 = (unsigned int *)v21;
      v15 = v22;
    }
    v17 = *(_BYTE *)(a2 + 48);
    v27 = v17;
    v21 = 0;
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a3 + 8) = v15;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 40) = 0;
    if (v16)
    {
      *(_DWORD *)(a3 + 32) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a3 + 16, (uint64_t)&v23);
      *(_BYTE *)(a3 + 40) = 1;
      v18 = v26;
      *(_BYTE *)(a3 + 48) = v27;
      *(_BYTE *)(a3 + 56) = 1;
      if (v18)
      {
        if (v25 != -1)
          ((void (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v25])(&v31, &v23);
        v25 = -1;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 48) = v17;
      *(_BYTE *)(a3 + 56) = 1;
    }
    result = (unsigned int *)v21;
    v21 = 0;
    if (result)
    {
      do
      {
        v19 = __ldaxr(result);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, result));
      if (!v20)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
    if (v30)
    {
      if (v29 != -1)
        return (unsigned int *)((uint64_t (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v29])(&v21, v28);
    }
  }
  else
  {
LABEL_22:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  return result;
}

void *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *result;
  void *v6;
  char v7;
  char v8;
  int v9;
  void *v10;
  char v11;
  __int16 v12;
  char v13;

  result = (void *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(a1, *(_QWORD *)(*(_QWORD *)a2 + 8));
  if (result)
  {
    v6 = result;
    v7 = *(_BYTE *)(a2 + 8);
    v8 = *(_BYTE *)(a2 + 9);
    v9 = *(_DWORD *)(a2 + 28);
    if (v9)
    {
      v10 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 28));
      result = memcpy(v10, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
    }
    else
    {
      v10 = 0;
    }
    v12 = *(_WORD *)(a2 + 32);
    v13 = *(_BYTE *)(a2 + 34);
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 9) = v8;
    *(_QWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 24) = v9;
    *(_DWORD *)(a3 + 28) = v9;
    *(_WORD *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 34) = v13;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 40) = v11;
  return result;
}

unint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE3__0JZNSA_16convertToBackingESL_E3__1EEEEEJRKNS0_6__implIJSF_SI_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

unint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU25ConvertFromBackingContext18convertFromBackingERKNS_7variantIJNS6_6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_9ColorDictEEEEE3__0JZNSA_18convertFromBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

unint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a2[7])
  {
    v2 = ((unint64_t)a2[2] << 16) | ((unint64_t)a2[3] << 24) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48);
    v3 = (unint64_t)a2[1] << 8;
    v4 = 0x100000000000000;
  }
  else
  {
    v2 = 0;
    v4 = 0;
    v3 = 0;
  }
  return v4 | v2 | v3 | *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[32];
  int v5;
  char v6;

  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 40) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CE1D8[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict> const&>@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  _OWORD v5[2];
  int v6;
  char v7;

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v6 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v5);
  *(_BYTE *)(a2 + 40) = 1;
  if (v6 != -1)
    return ((uint64_t (*)(char *, _OWORD *))off_1E34CE1D8[v6])(&v7, v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[32];
  int v5;
  char v6;

  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 40) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CE1F8[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict> const&>@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  _OWORD v5[2];
  int v6;
  char v7;

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v6 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v5);
  *(_BYTE *)(a2 + 40) = 1;
  if (v6 != -1)
    return ((uint64_t (*)(char *, _OWORD *))off_1E34CE1F8[v6])(&v7, v5);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34CE1F8[v4])(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34CE208[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void sub_197295C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  if (a22 != -1)
    ((void (*)(char *, uint64_t *))off_1E34CE218[a22])(&a13, &a15);
  _Unwind_Resume(exception_object);
}

void sub_19729764C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972977F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972978D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_1972979BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

Class initASVThumbnailView(void)
{
  Class result;
  void *v1;

  if ((_MergedGlobals_8 & 1) == 0)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x197297DA0);
    }
    qword_1EE341928 = (uint64_t)v1;
    _MergedGlobals_8 = 1;
  }
  result = objc_getClass("ASVThumbnailView");
  qword_1EE341920 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getASVThumbnailViewClass = ASVThumbnailViewFunction;
  return result;
}

uint64_t ASVThumbnailViewFunction(void)
{
  return qword_1EE341920;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  if (!*(_BYTE *)(a2 + 24))
    goto LABEL_8;
  v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
  {
LABEL_9:
    v9 = 0;
    v8 = 0;
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v7 + 8) || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result)) == 0)
  {
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  a4 = *(double *)(a2 + 16);
  v8 = result & 0xFFFFFFFFFFFFFF00;
  v7 = result;
  v9 = 1;
LABEL_10:
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8 | v7;
  *(double *)(a3 + 16) = a4;
  *(_BYTE *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  if (!*(_BYTE *)(a2 + 24)
    || (result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking((uint64_t)result, (_QWORD *)(a2 + 8), (uint64_t)&v13), !v15))
  {
    *(_QWORD *)a3 = v4;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
LABEL_13:
    *(_BYTE *)(a3 + 32) = 1;
    return result;
  }
  v6 = (unsigned int *)v13;
  if (!v13)
  {
    v12 = v14;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = v12;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_13;
  }
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = v15;
  v9 = v14;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = 1;
  *(_BYTE *)(a3 + 32) = 1;
  if (v8)
  {
    result = (unsigned int *)v13;
    v13 = 0;
    if (result)
    {
      do
      {
        v10 = __ldaxr(result);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, result));
      if (!v11)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v5);
      }
    }
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  if (!*(_QWORD *)(a2 + 8))
  {
    v7 = 0;
LABEL_9:
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 104))(result);
  if (result)
  {
    v6 = result;
    result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(result + 4, (uint64_t)result);
    v7 = (unsigned int *)*((_QWORD *)v6 + 2);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    goto LABEL_9;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (unsigned int *)WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(a1, *a2);
  if (result)
  {
    v6 = result;
    result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(result + 4, (uint64_t)result);
    v7 = (unsigned int *)*((_QWORD *)v6 + 2);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v9 = a2[1];
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v9;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;
  _QWORD v20[2];
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[2];
  char v28;

  result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)v27);
  if (v28)
  {
    WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2 + 16, (uint64_t)&v21);
    if (v26)
    {
      v8 = v27[1];
      v9 = v21;
      LOBYTE(v18) = 0;
      v19 = 0;
      v10 = v23;
      if (v23)
      {
        v11 = v22;
        v22 = 0;
        v18 = v11;
        v19 = 1;
      }
      v12 = v24;
      v13 = v25;
      v24 = 0;
      v25 = 0;
      *(_QWORD *)a3 = v27[0];
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v9;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      if (v10)
      {
        v14 = v18;
        v18 = 0;
        *(_QWORD *)(a3 + 24) = v14;
        *(_BYTE *)(a3 + 32) = 1;
      }
      v20[0] = 0;
      v20[1] = 0;
      *(_QWORD *)(a3 + 40) = v12;
      *(_QWORD *)(a3 + 48) = v13;
      *(_BYTE *)(a3 + 56) = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v7);
      if (v19 && v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      return std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v15);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 56) = 0;
      v16 = (WTF::StringImpl *)v27[0];
      result = std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v7);
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          return WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  char v36;
  _QWORD v37[4];
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)&v40);
  if (!v45)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, (void *)v7);
  }
  v38 = 0;
  v39 = 0;
  v8 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v8)
  {
LABEL_29:
    v10 = 0;
LABEL_30:
    LOBYTE(v35) = 0;
    v36 = 0;
    v27 = v42;
    if (v42)
    {
      v28 = v41;
      v41 = 0;
      v35 = v28;
      v36 = 1;
    }
    v29 = v43;
    v43 = 0;
    v30 = v44;
    v44 = 0;
    v31 = v38;
    v38 = 0;
    v32 = v39;
    v39 = 0;
    *(_QWORD *)a3 = v40;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v27)
    {
      v33 = v35;
      v35 = 0;
      *(_QWORD *)(a3 + 8) = v33;
      *(_BYTE *)(a3 + 16) = 1;
    }
    v37[0] = 0;
    *(_QWORD *)(a3 + 24) = v29;
    v37[1] = 0;
    *(_QWORD *)(a3 + 32) = v30;
    v37[2] = 0;
    *(_QWORD *)(a3 + 40) = v31;
    v37[3] = 0;
    *(_DWORD *)(a3 + 48) = v32;
    *(_DWORD *)(a3 + 52) = v10;
    *(_BYTE *)(a3 + 56) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, (void *)v7);
    if (v36 && v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v35 -= 2;
    }
LABEL_41:
    v34 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v34, (void *)v7);
    }
    return std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, (void *)v7);
  }
  if (!(v8 >> 28))
  {
    LODWORD(v39) = *(_DWORD *)(a2 + 52);
    v38 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
    v9 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *(unsigned __int8 **)(a2 + 40);
      v12 = 16 * v9;
      while (1)
      {
        if (v11[12])
        {
          v13 = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, v11);
          if ((v7 & 0xFF00000000) == 0)
          {
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 56) = 0;
            goto LABEL_41;
          }
          v14 = v13;
          v15 = v7;
          v16 = HIDWORD(v39);
          if (HIDWORD(v39) == (_DWORD)v39)
          {
            v17 = HIDWORD(v39) + ((unint64_t)HIDWORD(v39) >> 2);
            if (v17 >= 0x10)
              v18 = v17 + 1;
            else
              v18 = 16;
            if (v18 <= (unint64_t)HIDWORD(v39) + 1)
              v19 = HIDWORD(v39) + 1;
            else
              v19 = v18;
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v19);
            v16 = HIDWORD(v39);
          }
          v20 = (char *)v38 + 16 * v16;
          *(_QWORD *)v20 = v14;
          *((_DWORD *)v20 + 2) = v15;
          v21 = 1;
        }
        else
        {
          v22 = v10;
          if (v10 == (_DWORD)v39)
          {
            v23 = v10 + 1;
            v24 = v22 + (v22 >> 2);
            if (v24 >= 0x10)
              v25 = v24 + 1;
            else
              v25 = 16;
            if (v25 <= v23)
              v26 = v22 + 1;
            else
              v26 = v25;
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v26);
            v21 = 0;
            v20 = (char *)v38 + 16 * HIDWORD(v39);
          }
          else
          {
            v21 = 0;
            v20 = (char *)v38 + 16 * v10;
          }
          *v20 = 0;
        }
        v20[12] = v21;
        v10 = ++HIDWORD(v39);
        v11 += 16;
        v12 -= 16;
        if (!v12)
          goto LABEL_30;
      }
    }
    goto LABEL_29;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  _BYTE v18[16];
  int v19;
  char v20;
  uint64_t v21;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 200))(a1, *(_QWORD *)(*(_QWORD *)a2 + 8));
  if (!result)
    goto LABEL_16;
  v7 = result;
  v18[0] = 0;
  v20 = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2 + 16);
    if (v20 != v14)
    {
      v18[0] = 0;
      v19 = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v18, (uint64_t)&v11);
      v20 = 1;
      if (v14)
      {
        if (v13 != -1)
          result = ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v13])(&v21, &v11);
      }
    }
    if (v20)
    {
      v11 = v7;
      v12 = *(_DWORD *)(a2 + 8);
      LOBYTE(v13) = 0;
      v16 = 0;
      v15 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v13, (uint64_t)v18);
      v16 = 1;
      v17 = *(_BYTE *)(a2 + 48);
      *(_QWORD *)a3 = v11;
      *(_DWORD *)(a3 + 8) = v12;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_DWORD *)(a3 + 32) = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a3 + 16, (uint64_t)&v13);
      *(_BYTE *)(a3 + 40) = 1;
      v10 = v16;
      *(_BYTE *)(a3 + 48) = v17;
      *(_BYTE *)(a3 + 56) = 1;
      if (v10 && v15 != -1)
        result = ((uint64_t (*)(uint64_t *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v15])(&v21, &v13);
      goto LABEL_13;
    }
LABEL_16:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    return result;
  }
  v11 = result;
  v12 = *(_DWORD *)(a2 + 8);
  v8 = v12;
  LOBYTE(v13) = 0;
  v16 = 0;
  v17 = *(_BYTE *)(a2 + 48);
  v9 = v17;
  *(_QWORD *)a3 = result;
  *(_DWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = v9;
  *(_BYTE *)(a3 + 56) = 1;
LABEL_13:
  if (v20)
  {
    if (v19 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v19])(&v11, v18);
  }
  return result;
}

{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t result;
  WTF::StringImpl *v7;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    result = 0;
    goto LABEL_10;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
  {
LABEL_10:
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, *(_QWORD *)(*(_QWORD *)a2 + 8));
  if (result)
  {
    v12 = result;
    LOBYTE(v13) = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v6 = *(WTF::StringImpl **)(a2 + 8);
      if (v6)
        *(_DWORD *)v6 += 2;
      v13 = v6;
      v14 = 1;
    }
    v7 = WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v15, (uint64_t *)(a2 + 24));
    *(_QWORD *)a3 = v12;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v14)
    {
      v9 = v13;
      v13 = 0;
      *(_QWORD *)(a3 + 8) = v9;
      *(_BYTE *)(a3 + 16) = 1;
    }
    *(_QWORD *)(a3 + 24) = v15;
    v10 = v16;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(a3 + 32) = v10;
    *(_BYTE *)(a3 + 40) = 1;
    result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v8);
    if (v14)
    {
      result = (uint64_t)v13;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          return WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  char v17;
  _QWORD v18[3];
  uint64_t v19;
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v25);
  if (v26)
  {
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking((uint64_t)a1, a2 + 16, (uint64_t)&v19);
    if (v24)
    {
      v8 = v25;
      v25 = 0uLL;
      v9 = v19;
      v19 = 0;
      LOBYTE(v16) = 0;
      v17 = 0;
      v10 = v21;
      if (v21)
      {
        v11 = v20;
        v20 = 0;
        v16 = v11;
        v17 = 1;
      }
      v12 = v22;
      v13 = v23;
      v22 = 0;
      v23 = 0;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      if (v10)
      {
        v14 = v16;
        v16 = 0;
        *(_QWORD *)(a3 + 24) = v14;
        *(_BYTE *)(a3 + 32) = 1;
      }
      v18[0] = 0;
      v18[1] = 0;
      *(_QWORD *)(a3 + 40) = v12;
      *(_QWORD *)(a3 + 48) = v13;
      *(_BYTE *)(a3 + 56) = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v7);
      if (v17 && v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 56) = 0;
    }
    std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  return std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v6);
}

{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v11;
  uint64_t result;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  WTF::StringImpl *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  WTF::StringImpl *v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v79[69];
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  unsigned int *v96;
  WTF::StringImpl *v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v104);
  if (!v106
    || (result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking((uint64_t)a1, a2 + 16, (uint64_t)&v96),
        !v103))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 208) = 0;
    return std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v104, v11);
  }
  if (*(_BYTE *)(a2 + 78))
  {
    v16 = *(_BYTE *)(a2 + 72);
    v14 = *(unsigned int *)(a2 + 73) | ((unint64_t)*(unsigned __int8 *)(a2 + 77) << 32);
    v17 = 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  if (*(_BYTE *)(a2 + 124))
  {
    v6 = *(_QWORD *)(a2 + 85);
    v18 = *(_BYTE *)(a2 + 80);
    v13 = *(_WORD *)(a2 + 81);
    v15 = *(_WORD *)(a2 + 83);
    v3 = ((unint64_t)*(unsigned int *)(a2 + 96) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 100) << 56);
    v4 = ((unint64_t)*(unsigned int *)(a2 + 104) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 108) << 56);
    v5 = *(_DWORD *)(a2 + 112);
    v7 = *(_QWORD *)(a2 + 116);
    v19 = 1;
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v20 = *(unsigned __int8 *)(a2 + 140);
  v21 = *(_QWORD *)(a2 + 128);
  if (*(_BYTE *)(a2 + 140))
    v22 = *(unsigned __int8 *)(a2 + 136) | 0x100000000;
  else
    v22 = 0;
  v23 = *(unsigned __int8 *)(a2 + 200);
  if (*(_BYTE *)(a2 + 200))
  {
    v64 = v22;
    v65 = *(_QWORD *)(a2 + 128);
    v66 = *(unsigned __int8 *)(a2 + 140);
    v67 = v5;
    v68 = v4;
    v69 = v19;
    v24 = v3;
    v25 = v15;
    v26 = v14;
    v27 = v13;
    v28 = v18;
    v29 = v17;
    v30 = v16;
    result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking((uint64_t)a1, a2 + 144, (uint64_t)&v88);
    v23 = v95;
    v16 = v30;
    v17 = v29;
    v18 = v28;
    v13 = v27;
    v14 = v26;
    v15 = v25;
    v3 = v24;
    if (*(_BYTE *)(a2 + 200))
    {
      v19 = v69;
      v4 = v68;
      v20 = v66;
      v5 = v67;
      v22 = v64;
      v21 = v65;
      if (!v95)
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 208) = 0;
LABEL_36:
        std::__optional_destruct_base<WebCore::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v31);
        if (v103)
        {
          WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v11);
          WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v59);
          if (v98)
          {
            v60 = v97;
            v97 = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2)
                WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v11);
              else
                *(_DWORD *)v60 -= 2;
            }
          }
          v61 = v96;
          v96 = 0;
          if (v61)
          {
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v11);
            }
          }
        }
        return std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v104, v11);
      }
    }
    else
    {
      v19 = v69;
      v4 = v68;
      v20 = v66;
      v5 = v67;
      v22 = v64;
      v21 = v65;
    }
  }
  else
  {
    LOBYTE(v88) = 0;
    v95 = 0;
  }
  v32 = v104;
  v33 = v105;
  v104 = 0;
  v105 = 0;
  v70 = v32;
  v71 = v33;
  if (v103)
  {
    v34 = v96;
    v96 = 0;
    v72 = v34;
    LOBYTE(v73) = 0;
    v74 = 0;
    v35 = v98;
    if (v98)
    {
      v36 = v97;
      v97 = 0;
      v73 = v36;
      v74 = 1;
    }
    v37 = v99;
    v99 = 0;
    v75 = v37;
    v38 = v100;
    v39 = HIDWORD(v100);
    v100 = 0;
    v76 = __PAIR64__(v39, v38);
    v40 = v101;
    v101 = 0;
    v77 = v40;
    v41 = v102;
    v42 = HIDWORD(v102);
    v102 = 0;
    v78 = __PAIR64__(v42, v41);
    v79[0] = v16;
    *(_DWORD *)&v79[1] = v14;
    v79[5] = BYTE4(v14);
    v79[6] = v17;
    v79[8] = v18;
    *(_WORD *)&v79[9] = v13;
    *(_WORD *)&v79[11] = v15;
    *(_QWORD *)&v79[13] = v6;
    *(_QWORD *)&v79[21] = v3;
    *(_QWORD *)&v79[29] = v4;
    *(_DWORD *)&v79[40] = v5;
    *(_QWORD *)&v79[44] = v7;
    v79[52] = v19;
    if (v20)
      v43 = v21;
    else
      v43 = 0;
    *(_QWORD *)&v79[56] = v43;
    *(_DWORD *)&v79[64] = v22;
    v79[68] = BYTE4(v22);
    LOBYTE(v80) = 0;
    v87 = 0;
    if (v23)
    {
      v44 = v88;
      v88 = 0;
      v80 = v44;
      LOBYTE(v81) = 0;
      v82 = 0;
      if (v90)
      {
        v45 = v89;
        v89 = 0;
        v81 = v45;
        v82 = 1;
      }
      v46 = v91;
      v91 = 0;
      v83 = v46;
      v47 = v92;
      v92 = 0;
      v84 = v47;
      v48 = v93;
      v93 = 0;
      v85 = v48;
      v49 = v94;
      v94 = 0;
      v86 = v49;
      v87 = 1;
    }
    v70 = 0;
    v71 = 0;
    *(_QWORD *)a3 = v32;
    *(_QWORD *)(a3 + 8) = v33;
    v72 = 0;
    *(_QWORD *)(a3 + 16) = v34;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (v35)
    {
      v50 = v73;
      v73 = 0;
      *(_QWORD *)(a3 + 24) = v50;
      *(_BYTE *)(a3 + 32) = 1;
    }
    v76 = 0;
    v78 = 0;
    v51 = *(_OWORD *)v79;
    *(_OWORD *)(a3 + 88) = *(_OWORD *)&v79[16];
    v52 = *(_OWORD *)&v79[48];
    *(_OWORD *)(a3 + 104) = *(_OWORD *)&v79[32];
    *(_OWORD *)(a3 + 120) = v52;
    v75 = 0;
    *(_QWORD *)(a3 + 40) = v37;
    *(_DWORD *)(a3 + 48) = v38;
    *(_DWORD *)(a3 + 52) = v39;
    v77 = 0;
    *(_QWORD *)(a3 + 56) = v40;
    *(_DWORD *)(a3 + 64) = v41;
    *(_DWORD *)(a3 + 68) = v42;
    *(_QWORD *)(a3 + 133) = *(_QWORD *)&v79[61];
    *(_OWORD *)(a3 + 72) = v51;
    *(_BYTE *)(a3 + 144) = 0;
    *(_BYTE *)(a3 + 200) = 0;
    if (v23)
    {
      v53 = v80;
      v80 = 0;
      *(_QWORD *)(a3 + 144) = v53;
      *(_BYTE *)(a3 + 152) = 0;
      *(_BYTE *)(a3 + 160) = 0;
      if (v82)
      {
        v54 = v81;
        v81 = 0;
        *(_QWORD *)(a3 + 152) = v54;
        *(_BYTE *)(a3 + 160) = 1;
      }
      v55 = v83;
      v83 = 0;
      *(_QWORD *)(a3 + 168) = v55;
      v56 = v84;
      v84 = 0;
      *(_QWORD *)(a3 + 176) = v56;
      v57 = v85;
      v85 = 0;
      *(_QWORD *)(a3 + 184) = v57;
      v58 = v86;
      v86 = 0;
      *(_QWORD *)(a3 + 192) = v58;
      *(_BYTE *)(a3 + 200) = 1;
    }
    *(_BYTE *)(a3 + 208) = 1;
    WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor((WebCore::WebGPU::RenderPipelineDescriptor *)&v70, v79);
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v4 += 2;
  v5 = (WTF *)*(unsigned int *)(a1 + 20);
  LODWORD(v12) = 0;
  *(_OWORD *)v11 = (unint64_t)v4;
  HIDWORD(v12) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    LODWORD(v12) = *(_DWORD *)(a1 + 20);
    v11[1] = (WTF::StringImpl *)WTF::fastMalloc(v5);
    memcpy(v11[1], *(const void **)(a1 + 8), *(unsigned int *)(a1 + 20));
  }
  v6 = WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v13, (uint64_t *)(a1 + 24));
  *(_OWORD *)a2 = *(_OWORD *)v11;
  *(_QWORD *)(a2 + 16) = v12;
  v7 = v13;
  v13 = 0;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = v14;
  v14 = 0;
  *(_QWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 40) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v9);
  return 0;
}

{
  void *v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  __int128 v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, (uint64_t)&v10);
  v5 = v13;
  if (v13)
  {
    v6 = v12;
    v7 = *(_WORD *)(a1 + 32);
    v8 = v10;
    v10 = 0uLL;
    *(_OWORD *)a2 = v8;
    *(_QWORD *)&v8 = v11;
    v11 = 0;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v6;
    v5 = 1;
    *(_WORD *)(a2 + 32) = v7;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 40) = v5;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPassLayout,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v4);
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v7;
  unsigned int v8;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, v3);
    v5 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v4);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = *a2 + 16 * v6;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          *v9 += 2;
        v10 = *(_QWORD *)(v7 + 8);
        *v5 = v9;
        v5[1] = v10;
        v5 += 2;
        v7 += 16;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = off_1E34CE230[v4](&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34CE248[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void sub_197298A14(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t clearGeolocationCache(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  return objc_msgSend(a2, "clearCache", a3, a4, a5);
}

void sub_197298DC0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  std::default_delete<PermissionRequest>::operator()[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void sub_197299304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;
  id *v17;
  uint64_t v18;
  const void *v20;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(v16);
  v20 = *(const void **)(v18 - 88);
  *(_QWORD *)(v18 - 88) = 0;
  if (v20)
    CFRelease(v20);
  _Unwind_Resume(a1);
}

void sub_197299404(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__2(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__2(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19729946C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__3(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__3(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972997F4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v1)
    CFRelease(v1);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_48c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_48c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

unsigned int *WebKit::WebDataListSuggestionsDropdownIOS::create@<X0>(WebKit::WebDataListSuggestionsDropdownIOS *this@<X0>, WebKit::WebPageProxy *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;

  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = off_1E34D2D58;
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  v9 = (unsigned int *)*((_QWORD *)this + 3);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_QWORD *)v7 = off_1E34CE330;
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = 0;
  *a3 = v7;
  return result;
}

uint64_t WebKit::WebDataListSuggestionsDropdownIOS::show(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  uint64_t v6;
  PAL *v7;
  __objc2_class *v8;
  void *v9;
  const void *v10;

  v4 = *(void **)(a1 + 40);
  if (v4)
    return objc_msgSend(v4, "updateWithInformation:", a2);
  v6 = *a2;
  v7 = (PAL *)objc_msgSend(*(id *)(a1 + 32), "_shouldUseContextMenusForFormControls");
  if ((_DWORD)v7)
  {
    v8 = WKDataListSuggestionsDropdown;
  }
  else if (PAL::currentUserInterfaceIdiomIsSmallScreen(v7))
  {
    v8 = WKDataListSuggestionsPicker;
  }
  else
  {
    v8 = WKDataListSuggestionsPopover;
  }
  v9 = (void *)objc_msgSend([v8 alloc], "initWithInformation:inView:", a2, *(_QWORD *)(a1 + 32));
  v10 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if (v10)
  {
    CFRelease(v10);
    v9 = *(void **)(a1 + 40);
  }
  return objc_msgSend(v9, "showSuggestionsDropdown:activationType:", a1, v6);
}

_DWORD *WebKit::WebDataListSuggestionsDropdownIOS::close(id *this)
{
  void *v2;
  id v3;

  objc_msgSend(this[5], "invalidate");
  v3 = this[5];
  this[5] = 0;
  if (v3)
    CFRelease(v3);
  return WebKit::WebDataListSuggestionsDropdown::close(this, v2);
}

void sub_19729A45C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19729A780(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19729A8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(exception_object);
}

void sub_19729AB14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_19729AEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19729AFBC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c62_ZTSKZ49__WKDataListSuggestionsDropdown__showSuggestions_E3__5(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c62_ZTSKZ49__WKDataListSuggestionsDropdown__showSuggestions_E3__5(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19729B1F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19729B298(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c76_ZTSKZ63__WKDataListSuggestionsDropdown__updateSuggestionsMenuElements_E3__6(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 40);
}

void __destroy_helper_block_e8_32c76_ZTSKZ63__WKDataListSuggestionsDropdown__updateSuggestionsMenuElements_E3__6(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19729B480(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19729B500(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c100_ZTSKZ87__WKDataListSuggestionsDropdown_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c100_ZTSKZ87__WKDataListSuggestionsDropdown_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19729B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19729B618(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c110_ZTSKZ97__WKDataListSuggestionsDropdown_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c110_ZTSKZ97__WKDataListSuggestionsDropdown_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19729B6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19729B730(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c102_ZTSKZ89__WKDataListSuggestionsDropdown_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c102_ZTSKZ89__WKDataListSuggestionsDropdown_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t WebKit::WebPageProxy::getIsSpeaking(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19729B804(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::requestFocusedElementInformation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _BYTE v5[416];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v5[0] = 0;
    v6 = 0;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (v6)
      WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v5, v3);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 208);
    v5[0] = 0;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(v4, (uint64_t)v5, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_19729B8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebKit::WebPageProxy::updateStringForFind(WTF::StringImpl **this, const WTF::String *a2)
{
  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    {
      WebKit::globalStringForFind(void)::string = 0;
    }
    return WTF::String::operator=((WTF::StringImpl **)&WebKit::globalStringForFind(void)::string, a2);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollViewWillStartPanGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 1024))(v6, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

void sub_19729B9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  if (*((_BYTE *)a2 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1032))(v4, v5, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729BA64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  if (*((_BYTE *)a2 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1040))(v4, v5, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729BAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::dynamicViewportSizeUpdate(WebKit::WebPageProxy *result, uint64_t a2)
{
  WebKit::WebPageProxy *v2;
  _DWORD *v4;
  uint64_t v5;
  int *v6;

  if (!*((_BYTE *)result + 729))
  {
    v2 = result;
    if (*((_BYTE *)result + 728))
    {
      v4 = (_DWORD *)*((_QWORD *)result + 102);
      *((_QWORD *)v2 + 102) = 0;
      if (v4)
        WTF::RefCounted<WebCore::ValidationBubble>::deref(v4);
      *(_QWORD *)(*((_QWORD *)v2 + 4) + 2116) = *(_QWORD *)a2;
      *(_QWORD *)(*((_QWORD *)v2 + 4) + 216) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(*((_QWORD *)v2 + 4) + 828) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(*((_QWORD *)v2 + 4) + 800) = *(_QWORD *)(a2 + 16);
      v5 = *((_QWORD *)v2 + 26);
      v6 = (int *)a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DynamicViewportSizeUpdate>(v5, &v6, *(_QWORD *)(*((_QWORD *)v2 + 4) + 1896), 0);
      return (WebKit::WebPageProxy *)WebKit::WebPageProxy::setDeviceOrientation(v2, *(_DWORD *)(a2 + 96));
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setOverrideViewportArguments(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *(_QWORD *)(result + 32);
  v5 = *(unsigned __int8 *)(v4 + 2112);
  if (*(_BYTE *)(a2 + 56))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((*(_BYTE *)(a2 + 56) != 0) == (v5 != 0))
      return result;
  }
  else
  {
    result = WebCore::ViewportArguments::operator==(a2, v4 + 2056);
    if ((result & 1) != 0)
      return result;
    v4 = *(_QWORD *)(v3 + 32);
  }
  v7 = (_OWORD *)(v4 + 2056);
  v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)((char *)v7 + 41) = *(_OWORD *)(a2 + 41);
  v7[1] = v9;
  v7[2] = v10;
  *v7 = v8;
  if (!*(_BYTE *)(v3 + 729))
  {
    if (*(_BYTE *)(v3 + 728))
    {
      v11 = *(_QWORD *)(v3 + 208);
      v12 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverrideViewportArguments>(v11, &v12, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::selectWithGesture(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;

  v13 = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v9 = 0;
    v6 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, &v9, 0, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 208);
    v9 = &v13;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v8, (uint64_t)&v9, a6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_19729BD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;

  v5 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_19729BD78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateSelectionWithTouches(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;

  v11 = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v8 = 0;
    v5 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **, _QWORD, _QWORD))(*(_QWORD *)v5 + 16))(v5, &v8, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
    v8 = &v11;
    v9 = a3;
    v10 = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(v7, (uint64_t)&v8, a5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_19729BE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19729BE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPageProxy::requestAutocorrectionData(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v3;
  CFTypeRef v4;
  WTF *result;
  uint64_t v6;
  uint64_t *v7;
  WTF *v8;
  uint64_t v9;
  CFTypeRef cf;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v8 = 0;
    v9 = 0;
    cf = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v8);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
    result = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7 = a2;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(v6, &v7, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_19729BF40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  CFTypeRef v6;
  WTF *v7;
  uint64_t result;
  WTF *v9;
  uint64_t v10;
  CFTypeRef cf;
  uint64_t v12;

  v2 = *a1;
  *a1 = 0;
  v9 = *(WTF **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = v3;
  v4 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  cf = v4;
  v12 = v2;
  WTF::Function<void ()(WebKit::WebAutocorrectionData)>::operator()(&v12, (uint64_t)&v9);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  v7 = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    WTF::fastFree(v7, v5);
  }
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19729C000(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, CFTypeRef cf, uint64_t a12)
{
  if (cf)
    CFRelease(cf);
  if (a9)
    WTF::fastFree(a9, a2);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebPageProxy::applyAutocorrection(WebKit::WebPageProxy *this, const WTF::String *a2, const WTF::String *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  int v8;
  BOOL v9;
  _QWORD v11[2];
  char v12;
  _BYTE v13[16];
  int v14;

  v4 = *((_QWORD *)this + 26);
  v11[0] = a2;
  v11[1] = a3;
  v12 = a4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  WTF::ApproximateTime::now(this);
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::SyncApplyAutocorrection>(v4, (uint64_t)v11, v5, 0, (uint64_t)v13, v6 + 1.0);
  v7 = v14;
  v8 = v13[8];
  if (v14 != -1)
    ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage23SyncApplyAutocorrectionEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v14])(v11, v13);
  if (v7)
    v9 = 1;
  else
    v9 = v8 == 0;
  return !v9;
}

IPC::Encoder *WebKit::WebPageProxy::selectTextWithGranularityAtPoint(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v5;
  IPC::Encoder *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v23 = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v5 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 208);
    v20 = &v23;
    v21 = a3;
    v22 = a4;
    v9 = *a5;
    *a5 = 0;
    v10 = *(_QWORD *)(a1 + 208);
    v11 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v11, v10 + 200, "WebPageProxy::selectTextWithGranularityAtPoint", 47, 0, 0);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2358;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v26 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v13, (_DWORD **)&v20);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34CE5B0;
    v14[1] = v9;
    v14[2] = v11;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v24[0] = v14;
    v24[1] = v15;
    v25 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v26, 0, (uint64_t)v24, 1);
    if (v25)
    {
      v17 = v24[0];
      v24[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    result = v26;
    v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

void sub_19729C268(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  WTF *v17;
  void *v18;

  if (a15 && a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  IPC::Encoder *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v24 = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v6 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 208);
    v13 = *a6;
    *a6 = 0;
    v14 = *(_QWORD *)(a1 + 208);
    v15 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v15, v14 + 200, "WebPageProxy::selectPositionAtBoundaryWithDirection", 52, 0, 0);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 2356;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v27 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v17, &v24);
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a3;
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a4;
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a5;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v18 = off_1E34CE5D8;
    v18[1] = v13;
    v18[2] = v15;
    v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v25[0] = v18;
    v25[1] = v19;
    v26 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v27, 0, (uint64_t)v25, 1);
    if (v26)
    {
      v21 = v25[0];
      v25[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v20);
      return (IPC::Encoder *)WTF::fastFree(v22, v23);
    }
  }
  return result;
}

void sub_19729C504(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  IPC::Encoder *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  char v21;
  IPC::Encoder *v22;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *a4;
    *a4 = 0;
    v11 = *(_QWORD *)(a1 + 208);
    v12 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v12, v11 + 200, "WebPageProxy::moveSelectionAtBoundaryWithDirection", 51, 0, 0);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 2282;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v22 = (IPC::Encoder *)v14;
    *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = a2;
    *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = a3;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34CE600;
    v15[1] = v10;
    v15[2] = v12;
    v20[0] = v15;
    v20[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v22, 0, (uint64_t)v20, 1);
    if (v21)
    {
      v17 = v20[0];
      v20[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    result = v22;
    v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

void sub_19729C778(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::selectPositionAtPoint(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  IPC::Encoder *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  IPC::Encoder *v23;

  v20 = a2;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 208);
    v9 = *a4;
    *a4 = 0;
    v10 = *(_QWORD *)(a1 + 208);
    v11 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v11, v10 + 200, "WebPageProxy::selectPositionAtPoint", 36, 0, 0);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2357;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v23 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v13, &v20);
    *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a3;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E34CE628;
    v14[1] = v9;
    v14[2] = v11;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21[0] = v14;
    v21[1] = v15;
    v22 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v23, 0, (uint64_t)v21, 1);
    if (v22)
    {
      v17 = v21[0];
      v21[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

void sub_19729C9C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::requestRVItemInCurrentSelectedRange(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7[2];
  CFTypeRef cf[2];

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)cf = 0u;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v4 = cf[1];
    cf[1] = 0;
    if (v4)
      CFRelease(v4);
    result = v7[0];
    v7[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    LOBYTE(v7[0]) = 0;
    return (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(v6, (uint64_t)v7, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_19729CB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (cf)
    CFRelease(cf);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *result;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[2];
  CFTypeRef cf[2];

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)cf = 0u;
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, 0, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v6 = cf[1];
    cf[1] = 0;
    if (v6)
      CFRelease(v6);
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    v10 = *(unsigned int **)(a1 + 24);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = *a3;
    *a3 = 0;
    v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E34CE6F0;
    *((_QWORD *)v13 + 1) = v10;
    *((_QWORD *)v13 + 2) = a2;
    *((_QWORD *)v13 + 3) = v12;
    v14[0] = v13;
    WebKit::WebPageProxy::dispatchAfterCurrentContextMenuEvent(a1, (uint64_t *)v14);
    result = v14[0];
    v14[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19729CCC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  unsigned int *v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;

  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v12)
  {
    do
    {
      v15 = __ldaxr(v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v12));
    if (!v16)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::handleAutocorrectionContext(WebKit::WebPageProxy *this, const WebAutocorrectionContext *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, const WebAutocorrectionContext *))(*(_QWORD *)v4 + 1112))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729CDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::getSelectionContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];
  char v19;
  WTF::StringImpl *v20;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v17 = 0;
    v18[0] = 0;
    v20 = 0;
    v3 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, v18, &v20, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v5 = v17;
    v17 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v4);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 2237;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v20 = (WTF::StringImpl *)v8;
    v9 = *a2;
    *a2 = 0;
    v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v10 = &off_1E34CE740;
    *((_QWORD *)v10 + 1) = v9;
    v18[0] = v10;
    v18[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      v12 = v18[0];
      v18[0] = 0;
      if (v12)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (WTF::StringImpl *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

void sub_19729CF80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, char a13, WTF::StringImpl *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::selectWithTwoTouches(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v12 = a3;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v9[0] = 0;
    v6 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, v9, 0, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 208);
    v9[0] = &v13;
    v9[1] = &v12;
    v10 = a4;
    v11 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v8, (uint64_t)v9, a6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_19729D118(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didReceivePositionInformation(WebKit::WebPageProxy *this, const InteractionInformationAtPosition *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, const InteractionInformationAtPosition *))(*(_QWORD *)v4 + 960))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729D194(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken(WebKit::WebPageProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;

  result = (uint64_t)*a2;
  if (*a2)
  {
    v5 = *((_QWORD *)this + 130);
    if (v5)
    {
      v7 = *(_DWORD *)(v5 - 8);
      v8 = *(_DWORD *)(result + 16);
      if (v8 >= 0x100)
        v9 = v8 >> 8;
      else
        v9 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      for (i = 0; ; v9 = i + v11)
      {
        v11 = v9 & v7;
        result = *(_QWORD *)(v5 + 8 * (v9 & v7));
        if (result != -1)
        {
          if (!result)
            return result;
          if ((WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
            break;
        }
        ++i;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::performActionOnElement(WebKit::WebPageProxy *this, int a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  char v21;
  IPC::Encoder *v22;

  WTF::createVersion4UUIDString(this);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 130, &v19, v4, (uint64_t)v20);
  v5 = *((_QWORD *)this + 26);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2291;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v22 = (IPC::Encoder *)v10;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 4uLL, 4) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v19);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34CE790;
  v11[1] = v6;
  v11[2] = v8;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20[0] = v11;
  v20[1] = v12;
  v21 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v22, 0, (uint64_t)v20, 1);
  if (v21)
  {
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19729D3D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::saveImageToLibrary(WebKit::WebPageProxy *a1, int a2, const WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  NSObject *v9;
  unsigned int *v10;
  WebCore::SharedMemory *buf[4];

  buf[3] = *(WebCore::SharedMemory **)MEMORY[0x1E0C80C00];
  if ((WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken(a1, a3, (const WTF::StringImpl *)a3) & 1) != 0)
  {
    WebCore::SharedMemory::map();
    if (buf[0])
    {
      WebCore::SharedMemory::createSharedBuffer(buf[0]);
      v4 = *((_QWORD *)a1 + 5);
      if (v4)
        v5 = *(_QWORD *)(v4 + 8);
      else
        v5 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v5 + 968))(v5, &v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
      v7 = v10;
      v10 = 0;
      if (v7)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
      v8 = (unsigned int *)buf[0];
      buf[0] = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
    }
  }
  else
  {
    v9 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(WebCore::SharedMemory **)((char *)buf + 4) = (WebCore::SharedMemory *)"void WebKit::WebPageProxy::saveImageToLibr"
                                                                              "ary(SharedMemory::Handle &&, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ios/WebPageProxyIOS.mm 582: Invalid message dispatched %s", (uint8_t *)buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 26) + 144) + 98) = 1;
  }
}

void sub_19729D654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, unsigned int *a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  v12 = v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v14);
  if (a11)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a11);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::applicationDidEnterBackground(WebKit::WebPageProxy *this)
{
  int v2;
  NSObject *v3;
  WebKit::WebPageProxy *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;
  _BYTE buf[12];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 1033) = 1;
  v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "isSuspendedUnderLock");
  v3 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *(_QWORD *)(v5 + 744);
    v7 = *(_QWORD *)(v5 + 1896);
    v8 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = this;
    v20 = 2048;
    v21 = v6;
    v22 = 2048;
    v23 = v7;
    v24 = 1024;
    v25 = v8;
    v26 = 1024;
    v27 = v2;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationDidEnterBackground: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  if (v2)
  {
    v9 = WebKit::NavigationState::fromWebPage(this, v4);
    if (v9)
      WebKit::NavigationState::releaseNetworkActivity(v9, 1);
  }
  v10 = *((_QWORD *)this + 26);
  v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2106;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v18 = (IPC::Encoder *)v12;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v2;
  buf[0] = 0;
  BYTE2(v21) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v18, 0, (uint64_t)buf, 1);
  if (BYTE2(v21))
  {
    v14 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

void sub_19729D870(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF *v14;
  void *v15;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::applicationDidFinishSnapshottingAfterEnteringBackground(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 192))(v2);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 23) + 168))(*((_QWORD *)this + 23));
  }
  v3 = *((_QWORD *)this + 26);
  v5 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidFinishSnapshottingAfterEnteringBackground>(v3, (uint64_t)&v5, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
}

uint64_t WebKit::WebPageProxy::applicationWillEnterForeground(WebKit::WebPageProxy *this)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;
  _BYTE buf[12];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 1033) = 0;
  v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "isSuspendedUnderLock");
  v3 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *(_QWORD *)(v4 + 744);
    v6 = *(_QWORD *)(v4 + 1896);
    v7 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = this;
    v19 = 2048;
    v20 = v5;
    v21 = 2048;
    v22 = v6;
    v23 = 1024;
    v24 = v7;
    v25 = 1024;
    v26 = v2;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationWillEnterForeground: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  v8 = *((_QWORD *)this + 26);
  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2109;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v2;
  buf[0] = 0;
  BYTE2(v20) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v17, 0, (uint64_t)buf, 1);
  if (BYTE2(v20))
  {
    v12 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return WebKit::WebPageProxy::hardwareKeyboardAvailabilityChanged(this);
}

void sub_19729DADC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF *v14;
  void *v15;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::hardwareKeyboardAvailabilityChanged(WebKit::WebPageProxy *this)
{
  uint64_t result;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  unsigned __int8 v10;

  result = WebKit::currentHardwareKeyboardState(this);
  v9 = result;
  v10 = BYTE2(result);
  v3 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (v3[2568] != result
    || __PAIR64__(v3[2570], v3[2569]) != __PAIR64__((result & 0xFF0000) >> 16, BYTE1(result)))
  {
    v4 = v3 + 2568;
    *(_WORD *)v4 = v9;
    v4[2] = v10;
    v5 = *((_QWORD *)this + 5);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1056))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
    WebKit::WebPageProxy::updateCurrentModifierState(this);
    v7 = *((_QWORD *)this + 26);
    v8 = (char *)&v9;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HardwareKeyboardAvailabilityChanged>(v7, &v8, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
  }
  return result;
}

void sub_19729DC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::applicationDidEnterBackgroundForMedia(WebKit::WebPageProxy *this)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "isSuspendedUnderLock");
  v3 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *(_QWORD *)(v4 + 744);
    v6 = *(_QWORD *)(v4 + 1896);
    v7 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = this;
    v18 = 2048;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    v24 = 1024;
    v25 = v2;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationWillEnterForegroundForMedia: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  v8 = *((_QWORD *)this + 26);
  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2107;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v16 = (IPC::Encoder *)v10;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v2;
  buf[0] = 0;
  BYTE2(v19) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v16, 0, (uint64_t)buf, 1);
  if (BYTE2(v19))
  {
    v12 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_19729DDD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF *v14;
  void *v15;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::applicationWillEnterForegroundForMedia(WebKit::WebPageProxy *this)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "isSuspendedUnderLock");
  v3 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *(_QWORD *)(v4 + 744);
    v6 = *(_QWORD *)(v4 + 1896);
    v7 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = this;
    v18 = 2048;
    v19 = v5;
    v20 = 2048;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    v24 = 1024;
    v25 = v2;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationWillEnterForegroundForMedia: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  v8 = *((_QWORD *)this + 26);
  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2110;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v16 = (IPC::Encoder *)v10;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v2;
  buf[0] = 0;
  BYTE2(v19) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v16, 0, (uint64_t)buf, 1);
  if (BYTE2(v19))
  {
    v12 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_19729DFC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  WTF *v14;
  void *v15;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::extendSelection(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  char v15;
  IPC::Encoder *v16;

  v4 = *(_QWORD *)(a1 + 208);
  v5 = *a3;
  *a3 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2200;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34CE7B8;
  v8[1] = v5;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    v10 = v14[0];
    v14[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void sub_19729E118(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebPageProxy::requestRectsForGranularityWithSelectionOffset(uint64_t a1, char a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  void *v5;
  WTF *result;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v8 = 0;
    v9 = 0;
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
    LOBYTE(v8) = a2;
    HIDWORD(v8) = a3;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v7, (uint64_t)&v8, a4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_19729E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPageProxy::requestRectsAtSelectionOffsetWithText(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void *v5;
  WTF *result;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v8 = 0;
    v9 = 0;
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
    LODWORD(v8) = a2;
    v9 = a3;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v7, (uint64_t)&v8, a4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_19729E318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::moveSelectionByOffset(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  IPC::Encoder *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  IPC::Encoder *v20;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
    v8 = *a3;
    *a3 = 0;
    v9 = *(_QWORD *)(a1 + 208);
    v10 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9 + 200, "WebPageProxy::moveSelectionByOffset", 36, 0, 0);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2283;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v20 = (IPC::Encoder *)v12;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 4uLL, 4) = a2;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34CE858;
    v13[1] = v8;
    v13[2] = v10;
    v18[0] = v13;
    v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      v15 = v18[0];
      v18[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

void sub_19729E4D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::interpretKeyEvent(WebKit::WebPageProxy *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  WebKit::WebPageProxy::updateEditorState(a1, a2, 2);
  if (*(_QWORD *)(*((_QWORD *)a1 + 4) + 752) == *(_QWORD *)(*((_QWORD *)a1 + 4) + 760))
  {
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    v8 = 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8 * v8))(v7);
  }
  v9 = *((_QWORD *)a1 + 5);
  if (v9)
    v7 = *(_QWORD *)(v9 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  v10 = (_QWORD *)*((_QWORD *)a1 + 4);
  v11 = v10[94];
  if (v11 != v10[95])
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 952))(v7, v10[96] + 96 * v11, a3);
    v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v8 = 199;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8 * v8))(v7);
  }
  result = 81;
  __break(0xC471u);
  return result;
}

void sub_19729E6A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::registerWebProcessAccessibilityToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _xpc_connection_s *v11;
  uint64_t pid;

  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v11 = *(_xpc_connection_s **)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 352);
  if (v11)
    pid = xpc_connection_get_pid(v11);
  else
    pid = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 376))(v10, a2, a3, a4, a5, pid);
}

uint64_t WebKit::WebPageProxy::relayAccessibilityNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
  v9 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a3, a4);
  v10 = v9;
  cf = v9;
  if (v9)
    CFRetain(v9);
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v8 + 528))(v8, a2, &cf);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
}

void sub_19729E834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  const void *v11;

  CFRelease(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::assistiveTechnologyMakeFirstResponder(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 424))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729E8D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::registerUIProcessAccessibilityTokens(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const void **v6[2];
  _QWORD v7[2];
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v5 = *(_QWORD *)(result + 208);
      v6[0] = (const void **)v8;
      v6[1] = (const void **)v7;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterUIProcessAccessibilityTokens>(v5, v6, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::executeSavedCommandBySelector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19729E988(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::potentialTapAtPosition(_QWORD *a1, uint64_t *a2, char a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v10[2];
  char v11;
  uint64_t v12;

  v12 = a4;
  v7 = (_DWORD *)a1[102];
  a1[102] = 0;
  if (v7)
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v7);
  v8 = a1[26];
  v10[0] = &v12;
  v10[1] = a2;
  v11 = a3;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PotentialTapAtPosition>(v8, v10, *(_QWORD *)(a1[4] + 1896), 0);
}

uint64_t WebKit::WebPageProxy::attemptSyntheticClick(uint64_t a1, float *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  char v15;

  v15 = a3;
  v14 = a4;
  v4 = *(_QWORD *)(a1 + 208);
  v5 = roundf(*a2);
  v6 = 0x7FFFFFFFLL;
  v7 = 0x80000000;
  if (v5 > -2147500000.0)
    v7 = (int)v5;
  if (v5 < 2147500000.0)
    v6 = v7;
  v8 = roundf(a2[1]);
  v9 = 0x7FFFFFFF00000000;
  v10 = 0x8000000000000000;
  if (v8 > -2147500000.0)
    v10 = (unint64_t)(int)v8 << 32;
  if (v8 < 2147500000.0)
    v9 = v10;
  v12 = v9 | v6;
  v13[0] = &v12;
  v13[1] = &v15;
  v13[2] = &v14;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AttemptSyntheticClick>(v4, (uint64_t)v13, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
}

uint64_t WebKit::WebPageProxy::couldNotRestorePageState(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 872))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729EB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::restorePageState(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a6 <= 0.0)
  {
    v14 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v15 = 136315138;
      v16 = "void WebKit::WebPageProxy::restorePageState(std::optional<WebCore::FloatPoint>, const WebCore::FloatPoint &,"
            " const WebCore::FloatBoxExtent &, double)";
      _os_log_fault_impl(&dword_196BCC000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ios/WebPageProxyIOS.mm 886: Invalid message dispatched %s", (uint8_t *)&v15, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)v13 + 880))(v13, a2, a3, a4, a5, a6);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
  }
}

void sub_19729ECA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::restorePageCenterAndScale(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a4 <= 0.0)
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v11 = 136315138;
      v12 = "void WebKit::WebPageProxy::restorePageCenterAndScale(std::optional<WebCore::FloatPoint>, double)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ios/WebPageProxyIOS.mm 892: Invalid message dispatched %s", (uint8_t *)&v11, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 144) + 98) = 1;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)v9 + 888))(v9, a2, a3, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  }
}

void sub_19729EE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didGetTapHighlightGeometries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))(*(_QWORD *)v17 + 864))(v17, a2, a3, a4, a5, a6, a7, a8, a9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
}

void sub_19729EEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateInputContextAfterBlurringAndRefocusingElement(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 904))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729EF6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::elementDidFocus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5, API::Object **a6)
{
  WebKit *v11;
  uint64_t v12;
  uint64_t v13;
  WebKit *v15;

  if (*(_BYTE *)(a1 + 394))
    *(_BYTE *)(a1 + 394) = 0;
  WebKit::WebProcessProxy::transformHandlesToObjects(*(WebKit::WebProcessProxy **)(a1 + 208), *a6, &v15);
  v11 = v15;
  v15 = 0;
  if (v11)
    CFRelease(*((CFTypeRef *)v11 + 1));
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, WebKit *))(*(_QWORD *)v13 + 896))(v13, a2, a3, a4, a5, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
}

void sub_19729F054(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::elementDidBlur(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  if (*((_BYTE *)this + 394))
    *((_BYTE *)this + 394) = 0;
  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 920))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateFocusedElementInformation(WebKit::WebPageProxy *this, const FocusedElementInformation *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, const FocusedElementInformation *))(*(_QWORD *)v4 + 912))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729F150(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::focusedElementDidChangeInputMode(uint64_t result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE **)(result + 32);
  if (v3[2208] || v3[2209] || v3[2210] || v3[2211])
  {
    *(_WORD *)(result + 393) = a2 | 0x100;
  }
  else
  {
    v4 = *(_QWORD *)(result + 40);
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 928))(v5, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  }
  return result;
}

void sub_19729F208(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didReleaseAllTouchPoints(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 394))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 40);
    if (v2)
      v3 = *(_QWORD *)(v2 + 8);
    else
      v3 = 0;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
    if (*(_BYTE *)(v1 + 394))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 928))(v3, *(unsigned __int8 *)(v1 + 393));
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
      if (*(_BYTE *)(v1 + 394))
        *(_BYTE *)(v1 + 394) = 0;
    }
    else
    {
      __break(1u);
    }
  }
  return this;
}

void sub_19729F2A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showInspectorHighlight(WebKit::WebPageProxy *this, const InspectorOverlayHighlight *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, const InspectorOverlayHighlight *))(*(_QWORD *)v4 + 1064))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729F324(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::hideInspectorHighlight(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1072))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F398(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showInspectorIndication(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1080))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::hideInspectorIndication(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1088))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F480(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::enableInspectorNodeSearch(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1096))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::disableInspectorNodeSearch(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1104))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F568(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::focusNextFocusedElement(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  IPC::Encoder *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  IPC::Encoder *v20;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v3 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
    v8 = *a3;
    *a3 = 0;
    v9 = *(_QWORD *)(a1 + 208);
    v10 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9 + 200, "WebPageProxy::focusNextFocusedElement", 38, 0, 0);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2209;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v20 = (IPC::Encoder *)v12;
    *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a2;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34CE880;
    v13[1] = v8;
    v13[2] = v10;
    v18[0] = v13;
    v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      v15 = v18[0];
      v18[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

void sub_19729F710(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::didPerformDictionaryLookup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 712))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729F81C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeHost *WebKit::WebPageProxy::setRemoteLayerTreeRootNode(WebKit::WebPageProxy *this, WebKit::RemoteLayerTreeNode *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  (*(void (**)(uint64_t, WebKit::RemoteLayerTreeNode *))(*(_QWORD *)v5 + 432))(v5, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  return std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 24, 0);
}

void sub_19729F8B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showPlaybackTargetPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 976))(v10, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
}

void sub_19729F954(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::commitPotentialTapFailed(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 856))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729F9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didNotHandleTapAsClick(WebKit::WebPageProxy *this, const IntPoint *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  (*(void (**)(uint64_t, const IntPoint *))(*(_QWORD *)v5 + 536))(v5, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
  return (*(uint64_t (**)(_QWORD, const IntPoint *))(**((_QWORD **)this + 13) + 464))(*((_QWORD *)this + 13), a2);
}

void sub_19729FA64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didHandleTapAsHover(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 544))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729FAD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didCompleteSyntheticClick(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 552))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_19729FB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::disableDoubleTapGesturesDuringTapIfNecessary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 992))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_19729FBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::handleSmartMagnificationInformationForPotentialTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v13;
  uint64_t v14;

  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 1584))(v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)v14 + 1000))(v14, a2, a3, a4, a5, a6, a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1592))(v14);
}

void sub_19729FC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::computePagesForPrintingiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;
  char v14;

  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a3;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
    return 0;
  v13 = v11;
  v7[0] = &v11;
  v7[1] = a4;
  v6 = 0x7FF0000000000000;
  v14 = 1;
  v12[0] = v7;
  v12[1] = &v6;
  WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPage::ComputePagesForPrintingiOS> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingiOS>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::ComputePagesForPrintingiOS&&,IPC::Timeout const&)::{lambda(Messages::WebPage::ComputePagesForPrintingiOS&)#1}>(a1, (uint64_t)&v13, (uint64_t)v12, (uint64_t)v8);
  v4 = 0;
  if (v10 != -1)
  {
    if (!v10)
      v4 = v9;
    ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage26ComputePagesForPrintingiOSEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(&v13, v8);
  }
  return v4;
}

uint64_t WebKit::WebPageProxy::drawToPDFiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  _QWORD v10[3];
  __int128 v11;
  _QWORD v12[2];
  char v13;
  __int128 v14;
  char v15;

  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a3;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    *(_QWORD *)&v14 = 0;
    v6 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 16))(v6, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v8 = (unsigned int *)v14;
    *(_QWORD *)&v14 = 0;
    if (v8)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
    return 0;
  }
  else
  {
    v14 = v11;
    v10[0] = &v11;
    v10[1] = a4;
    v10[2] = a5;
    v15 = 1;
    v12[0] = v10;
    v12[1] = a6;
    v13 = 0;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawToPDFiOS &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(a1, (uint64_t)&v14, (uint64_t)v12);
  }
}

void sub_19729FDFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  unsigned int *v5;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v5 = *(unsigned int **)(v2 - 48);
  *(_QWORD *)(v2 - 48) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::drawToImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD v6[2];
  __int128 v7;
  char v8;
  char v9;
  __int128 v10;
  _QWORD v11[2];
  char v12;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    LOBYTE(v7) = 0;
    v9 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v7);
    return 0;
  }
  else
  {
    v7 = v10;
    v6[0] = &v10;
    v6[1] = a4;
    v8 = 1;
    v11[0] = v6;
    v11[1] = a5;
    v12 = 0;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::DrawToImage &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(a1, (uint64_t)&v7, (uint64_t)v11);
  }
}

void sub_19729FEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::generateSyntheticEditingCommand(uint64_t result, char a2)
{
  uint64_t v2;
  char v3;

  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v2 = *(_QWORD *)(result + 208);
      v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateSyntheticEditingCommand>(v2, &v3, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

WebKit::WebPageProxy *WebKit::WebPageProxy::didUpdateEditorState(WebKit::WebPageProxy *this, _BYTE *a2, _BYTE *a3)
{
  WebKit::WebPageProxy *v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = this;
  if (a2[9])
    v5 = 0;
  else
    v5 = a3[15] == a2[15];
  if (!v5 && a3[9] == 0)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 392))(v8);
    this = (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
  }
  if (!a3[8])
  {
    WebKit::WebPageProxy::updateFontAttributesAfterEditorStateChange(v4, a2);
    v9 = *((_QWORD *)v4 + 5);
    if (v9)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 448))(v10);
    return (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  }
  return this;
}

void sub_19729FFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::dispatchDidUpdateEditorState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 1032))
  {
    v1 = this;
    if (*(_BYTE *)(*(_QWORD *)(this + 32) + 560))
    {
      v2 = *(_QWORD *)(this + 40);
      if (v2)
        v3 = *(_QWORD *)(v2 + 8);
      else
        v3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 936))(v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
      *(_BYTE *)(v1 + 1032) = 0;
    }
  }
  return this;
}

void sub_1972A0090(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showValidationMessage(WebKit::WebPageProxy *this, const IntRect *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  WebCore::ValidationBubble *v12;
  UIViewController *v13;
  uint64_t result;
  double v15;
  _DWORD *v16;

  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  v8 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  v15 = WebKit::valueForKey<double>(v8 + 40, v8 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, const WTF::String *, double *))(*(_QWORD *)v7 + 680))(&v16, v7, a3, &v15);
  v9 = v16;
  v16 = 0;
  v10 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = v9;
  if (v10)
  {
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v10);
    v11 = v16;
    v16 = 0;
    if (v11)
      WTF::RefCounted<WebCore::ValidationBubble>::deref(v11);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
  v12 = (WebCore::ValidationBubble *)*((_QWORD *)this + 102);
  v13 = (UIViewController *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 488))(*((_QWORD *)this + 13));
  result = WebCore::ValidationBubble::setAnchorRect(v12, a2, v13);
  if (!*((_BYTE *)this + 402))
    return WebCore::ValidationBubble::show(*((WebCore::ValidationBubble **)this + 102));
  return result;
}

void sub_1972A01E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPageProxy::requestEvasionRectsAboveSelection(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  WTF *result;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v6 = 0;
    v7 = 0;
    v2 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 16))(v2, &v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = v6;
    if (v6)
    {
      v6 = 0;
      LODWORD(v7) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 208);
    LOBYTE(v6) = 0;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v5, (uint64_t)&v6, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_1972A029C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateSelectionWithDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[2];

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7[0] = a2;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(v6, v7, a4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_1972A035C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

float WebKit::WebPageProxy::selectionBoundingRectInRootViewCoordinates(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  WebCore::SelectionGeometry *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v1 + 233))
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v3 = *(unsigned __int8 *)(v1 + 688);
    v10 = 0;
    v11 = 0;
    if (v3)
    {
      if (*(_BYTE *)(v1 + 234))
      {
        v4 = *(_DWORD *)(v1 + 636);
        if (v4)
        {
          v5 = *(WebCore::SelectionGeometry **)(v1 + 624);
          v6 = 84 * v4;
          do
          {
            v8[0] = WebCore::SelectionGeometry::rect(v5);
            v8[1] = v7;
            WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v9, (const WebCore::IntRect *)v8);
            WebCore::FloatRect::unite((WebCore::FloatRect *)&v10, (const WebCore::FloatRect *)v9);
            v5 = (WebCore::SelectionGeometry *)((char *)v5 + 84);
            v6 -= 84;
          }
          while (v6);
        }
      }
      else
      {
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v10, (const WebCore::IntRect *)(v1 + 576));
      }
    }
  }
  return *(float *)&v10;
}

IPC::Encoder *WebKit::WebPageProxy::requestDocumentEditingContext(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  IPC::Encoder *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  _QWORD v19[2];
  char v20;
  _BYTE v21[40];
  _BYTE v22[40];
  _BYTE v23[40];
  _BYTE v24[56];
  WTF *v25[2];
  WTF *v26[2];
  IPC::Encoder *v27;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v19);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v21);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v22);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v23);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v24);
    *(_OWORD *)v26 = 0u;
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)&v24[40] = 0u;
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v6 = v26[0];
    if (v26[0])
    {
      v26[0] = 0;
      LODWORD(v26[1]) = 0;
      WTF::fastFree(v6, v5);
    }
    v7 = v25[0];
    if (v25[0])
    {
      v25[0] = 0;
      LODWORD(v25[1]) = 0;
      WTF::fastFree(v7, v5);
    }
    MEMORY[0x19AEAEECC](v24);
    MEMORY[0x19AEAEECC](v23);
    MEMORY[0x19AEAEECC](v22);
    MEMORY[0x19AEAEECC](v21);
    return (IPC::Encoder *)MEMORY[0x19AEAEECC](v19);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 208);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2326;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v27 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::DocumentEditingContextRequest,void>::encode((IPC::Encoder *)v12, a2);
    v13 = *a3;
    *a3 = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E34CE8F8;
    v14[1] = v13;
    v19[0] = v14;
    v19[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v20 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v27, 0, (uint64_t)v19, 1);
    if (v20)
    {
      v16 = v19[0];
      v19[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

void sub_1972A0610(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF *a36,int a37,WTF *a38,int a39)
{
  uint64_t v39;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v41 = *(IPC::Encoder **)(v39 - 72);
  *(_QWORD *)(v39 - 72) = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, a2);
    WTF::fastFree(v42, v43);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::didHandleDragStartRequest(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1640))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_1972A0764(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didHandleAdditionalDragItemsRequest(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1648))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_1972A07E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::requestDragStart(uint64_t result, _DWORD *a2, _DWORD *a3, char a4)
{
  uint64_t v4;
  _DWORD *v5[3];
  char v6;

  v6 = a4;
  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v4 = *(_QWORD *)(result + 208);
      v5[0] = a2;
      v5[1] = a3;
      v5[2] = &v6;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestDragStart>(v4, v5, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::requestAdditionalItemsForDragSession(uint64_t result, _DWORD *a2, _DWORD *a3, char a4)
{
  uint64_t v4;
  _DWORD *v5[3];
  char v6;

  v6 = a4;
  if (!*(_BYTE *)(result + 729))
  {
    if (*(_BYTE *)(result + 728))
    {
      v4 = *(_QWORD *)(result + 208);
      v5[0] = a2;
      v5[1] = a3;
      v5[2] = &v6;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestAdditionalItemsForDragSession>(v4, v5, *(_QWORD *)(*(_QWORD *)(result + 32) + 1896), 0);
    }
  }
  return result;
}

WTF *WebKit::WebPageProxy::insertDroppedImagePlaceholders(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  void *v4;
  WTF *result;
  uint64_t v6;
  _BYTE v7[120];
  WTF *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v8 = 0;
    v9 = 0;
    v7[0] = 0;
    v7[112] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)&v8, (uint64_t)v7);
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
    result = v8;
    if (v8)
    {
      v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v8 = (WTF *)a2;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(v6, (uint64_t *)&v8, a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_1972A093C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  WTF *v6;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  v6 = *(WTF **)(v3 - 32);
  if (v6)
  {
    *(_QWORD *)(v3 - 32) = 0;
    *(_DWORD *)(v3 - 24) = 0;
    WTF::fastFree(v6, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t result;
  _BYTE v6[120];
  uint64_t v7;

  v7 = *a1;
  *a1 = 0;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v6, a3);
  WTF::Function<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(&v7, a2, (uint64_t)v6);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1972A09D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  v11 = *(_QWORD *)(v9 - 24);
  *(_QWORD *)(v9 - 24) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::willReceiveEditDragSnapshot(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1584))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1656))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1592))(v2);
}

void sub_1972A0A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didReceiveEditDragSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _BYTE v7[120];

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v7, a2);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 1664))(v4, v7);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_1972A0AFC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::didStartLoadForQuickLookDocumentInMainFrame(WebKit::WebPageProxy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v4;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v4 = *((_QWORD *)this + 9);
  if (*a2 && (v6 = WTF::StringImpl::reverseFind(), (v7 = *a2) != 0))
  {
    if (v6 != -1 || (*((_DWORD *)v7 + 1) & 0x80000000) != 0)
    {
      WTF::StringImpl::substring(v7);
    }
    else
    {
      *(_DWORD *)v7 += 2;
      v10 = v7;
    }
  }
  else
  {
    v10 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **, const WTF::String *))(*(_QWORD *)v4 + 280))(v4, &v10, a3);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972A0BF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::didFinishLoadForQuickLookDocumentInMainFrame(uint64_t a1)
{
  unsigned int *result;
  void *v3;
  unsigned int *v4;

  result = (unsigned int *)WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
  if (v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 288))(*(_QWORD *)(a1 + 72));
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v3);
  }
  return result;
}

void sub_1972A0C78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::requestPasswordForQuickLookDocumentInMainFrameShared(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 1584))(v6);
  WTF::Function<void ()(WTF::String const&)>::Function<WTF::CompletionHandler<void ()(WTF::String const&)>,void>(&v9, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 1632))(v6, a2, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 1592))(v6);
}

void sub_1972A0D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorAuthorizationPresenter@<X0>(WebKit::WebPaymentCoordinatorProxy *a1@<X1>, PKPaymentRequest *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = WTF::fastMalloc((WTF *)0x28);
  result = WebKit::PaymentAuthorizationViewController::PaymentAuthorizationViewController(v7, (uint64_t)a1 + 24, (uint64_t)a2);
  *a3 = v7;
  return result;
}

void sub_1972A0DBC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorPresentingViewController(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 5) + 104) + 488))(*(_QWORD *)(*((_QWORD *)this + 5) + 104));
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorPresentingViewController(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 104) + 488))(*(_QWORD *)(*((_QWORD *)this + 4) + 104));
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorCTDataConnectionServiceType(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 264) + 208) + 320;
}

uint64_t `non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorCTDataConnectionServiceType(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 264) + 208) + 320;
}

WTF *WebKit::WebPageProxy::textInputContextsInRect(uint64_t a1, uint64_t *a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  void *v7;
  WTF *result;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD v12[4];

  *(float *)v12 = a3;
  *(float *)&v12[1] = a4;
  *(float *)&v12[2] = a5;
  *(float *)&v12[3] = a6;
  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v10 = 0;
    v11 = 0;
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v6 + 16))(v6, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = v10;
    if (v10)
    {
      v10 = 0;
      LODWORD(v11) = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 208);
    v10 = (WTF *)v12;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v9, (int **)&v10, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
  return result;
}

void sub_1972A0ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::focusTextInputContextAndPlaceCaret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_BYTE *)(a1 + 729) || !*(_BYTE *)(a1 + 728))
  {
    v4 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 208);
    v7[0] = a2;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(v6, (uint64_t)v7, a4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0, 1);
  }
}

void sub_1972A0F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::setShouldRevealCurrentSelectionAfterInsertion(uint64_t this, char a2)
{
  uint64_t v2;
  char v3;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v2 = *(_QWORD *)(this + 208);
      v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetShouldRevealCurrentSelectionAfterInsertion>(v2, &v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setScreenIsBeingCaptured(uint64_t this, char a2)
{
  uint64_t v2;
  char v3;

  if (!*(_BYTE *)(this + 729))
  {
    if (*(_BYTE *)(this + 728))
    {
      v2 = *(_QWORD *)(this + 208);
      v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScreenIsBeingCaptured>(v2, &v3, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
    }
  }
  return this;
}

unsigned int *WebKit::WebPageProxy::willOpenAppLink(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  WTF::WorkQueue *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;

  v1 = this;
  v2 = *((_QWORD *)this + 70);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0 || !*(_QWORD *)(v3 + 8))
  {
    v4 = WebKit::WebPageProxy::ProcessActivityState::takeOpeningAppLinkActivity((WebKit::WebPageProxy::ProcessActivityState *)(this + 132));
    v5 = WTF::WorkQueue::main(v4);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1 + 6, (uint64_t)(v1 + 4));
    v6 = (unsigned int *)*((_QWORD *)v1 + 3);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = &off_1E34CE9C0;
    *((_QWORD *)v8 + 1) = v6;
    v9 = v8;
    (*(void (**)(uint64_t, unsigned int **, double))(*(_QWORD *)v5 + 16))(v5, &v9, 25.0);
    this = v9;
    v9 = 0;
    if (this)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void sub_1972A10F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPageProxy::willPerformPasteCommand(WTF::StringImpl *result, unsigned int a2, __int128 *a3)
{
  WebKit::WebPasteboardProxy *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (a2 <= 1)
  {
    v4 = result;
    MEMORY[0x19AEABCC8](&v8, *MEMORY[0x1E0CEB9F8]);
    v6 = *a3;
    v7 = *((_QWORD *)a3 + 2);
    WebKit::WebPageProxy::grantAccessToCurrentPasteboardData(v4, &v8, (uint64_t)&v6);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1972A11D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::showDataDetectorsUIForPositionInformation(WebKit::WebPageProxy *this, const InteractionInformationAtPosition *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t, const InteractionInformationAtPosition *))(*(_QWORD *)v4 + 984))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
}

void sub_1972A1268(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::statusBarWasTapped(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v6[16];

  v2 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_INFO, "WebPageProxy::statusBarWasTapped", v6, 2u);
  }
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  if ((objc_msgSend(v3, "supportsMultipleScenes") & 1) == 0 && objc_msgSend(v3, "applicationState"))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
    objc_msgSend(v4, "openApplicationWithBundleID:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 472))(*((_QWORD *)this + 13));
}

uint64_t WebKit::WebScreenOrientationManagerProxy::platformShouldRejectLockRequest@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v4;
  char v5;
  uint64_t v6;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "supportsMultipleScenes");
  if ((_DWORD)result)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(a1 + 8) = v6;
    v4 = 1;
    v5 = 6;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  *(_BYTE *)a1 = v5;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

void sub_1972A15D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf)
{
  CFTypeRef v23;

  _Block_object_dispose(&a16, 8);
  v23 = cf;
  cf = 0;
  if (v23)
    CFRelease(v23);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

void WebKit::WebDataListSuggestionsDropdownIOS::~WebDataListSuggestionsDropdownIOS(WebKit::WebDataListSuggestionsDropdownIOS *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E34CE330;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebDataListSuggestionsDropdown::~WebDataListSuggestionsDropdown(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34CE330;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::WebDataListSuggestionsDropdown::~WebDataListSuggestionsDropdown(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t std::default_delete<PermissionRequest>::operator()[abi:sn180100](WTF *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v7)
    CFRelease(v7);
  return WTF::fastFree(this, a2);
}

Class initCLLocationManager(void)
{
  Class result;
  void *v1;

  if ((byte_1EE341942 & 1) == 0)
  {
    v1 = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x1972A1818);
    }
    unk_1EE341960 = v1;
    byte_1EE341942 = 1;
  }
  result = objc_getClass("CLLocationManager");
  qword_1EE341958 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getCLLocationManagerClass = CLLocationManagerFunction;
  return result;
}

uint64_t CLLocationManagerFunction(void)
{
  return qword_1EE341958;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage23SyncApplyAutocorrectionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage26ComputePagesForPrintingiOSEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

Class initMPAVRoutingController(void)
{
  Class result;

  if ((byte_1EE341944 & 1) == 0)
  {
    *(_QWORD *)algn_1EE341978 = ___ZL18MediaPlayerLibraryv_block_invoke();
    byte_1EE341944 = 1;
  }
  result = objc_getClass("MPAVRoutingController");
  qword_1EE341970 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1972A18F4);
  }
  off_1EE33FC18 = MPAVRoutingControllerFunction;
  return result;
}

uint64_t MPAVRoutingControllerFunction(void)
{
  return qword_1EE341970;
}

uint64_t ___ZL18MediaPlayerLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer", 2);
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

Class initMPMediaControlsConfiguration(void)
{
  Class result;

  if ((byte_1EE341944 & 1) == 0)
  {
    *(_QWORD *)algn_1EE341978 = ___ZL18MediaPlayerLibraryv_block_invoke();
    byte_1EE341944 = 1;
  }
  result = objc_getClass("MPMediaControlsConfiguration");
  qword_1EE341980 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1972A19C4);
  }
  _MergedGlobals_247 = MPMediaControlsConfigurationFunction;
  return result;
}

uint64_t MPMediaControlsConfigurationFunction(void)
{
  return qword_1EE341980;
}

Class initMPMediaControlsViewController(void)
{
  Class result;

  if ((byte_1EE341944 & 1) == 0)
  {
    *(_QWORD *)algn_1EE341978 = ___ZL18MediaPlayerLibraryv_block_invoke();
    byte_1EE341944 = 1;
  }
  result = objc_getClass("MPMediaControlsViewController");
  qword_1EE341988 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1972A1A50);
  }
  off_1EE33FC20 = MPMediaControlsViewControllerFunction;
  return result;
}

uint64_t MPMediaControlsViewControllerFunction(void)
{
  return qword_1EE341988;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::RetainPtr<objc_object  {objcproto13UIInteraction}*>>>::moveOverlapping(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = a2;
  v4 = result;
  if (result > (unsigned int *)a3)
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::RetainPtr<objc_object  {objcproto13UIInteraction}*>>>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (char *)a3 + (char *)a2 - (char *)result;
    do
    {
      v6 = *((_QWORD *)v3 - 2);
      v3 -= 4;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v5 - 2) = v6;
      v5 -= 16;
      v7 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v5 + 1) = v7;
      v8 = (const void *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v8)
        CFRelease(v8);
      result = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::ValidationBubble>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEAF628]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2329;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CE500;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_1972A1C6C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE500;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE500;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[432];
  char v26;
  _BYTE v27[416];
  char v28;
  char v29;
  __int128 v30[26];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>((uint64_t *)(a1 + 8));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v4, v5);
        v9 = 0;
        v22 = *a2;
        v23 = a2[1];
        v24 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v10 = 0;
        if (v24 && v23)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v23);
          v10 = *a2;
          v9 = a2[1];
        }
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (unint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v9 = v5;
    v10 = v4;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12 && v9)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
    goto LABEL_14;
  }
  if (v7)
  {
    IPC::Decoder::decode<WebKit::FocusedElementInformation>(a2, v30);
    if (v31)
    {
      WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)v27, v30);
      v28 = 1;
      goto LABEL_10;
    }
LABEL_14:
    v27[0] = 0;
    v29 = 0;
    goto LABEL_15;
  }
  LOBYTE(v30[0]) = 0;
  v31 = 0;
  std::__optional_move_base<WebKit::FocusedElementInformation,false>::__optional_move_base[abi:sn180100](v27, (uint64_t)v30);
LABEL_10:
  v29 = 1;
  if (v31)
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v30, v8);
LABEL_15:
  if (v29
    || (v16 = *a2, v17 = a2[1], *a2 = 0, a2[1] = 0, (v18 = a2[3]) != 0)
    && v17
    && ((*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16), v29))
  {
    std::__optional_move_base<WebKit::FocusedElementInformation,false>::__optional_move_base[abi:sn180100](v25, (uint64_t)v27);
    v26 = 1;
    if (!v29)
      goto LABEL_19;
    if (!v28)
      goto LABEL_19;
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v27, v13);
    if (v26)
      goto LABEL_19;
  }
  else
  {
    v25[0] = 0;
    v26 = 0;
  }
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (!v21
    || !v20
    || ((*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19), !v26))
  {
    IPC::Connection::cancelReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(v2);
    return;
  }
LABEL_19:
  v14 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v14 + 16))(v14, v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v26)
  {
    if (v25[416])
      WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v25, v15);
  }
}

void sub_1972A2000(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  if (a63)
  {
    if (a61)
      WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a9, a2);
  }
  _Unwind_Resume(a1);
}

void IPC::Connection::cancelReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  _BYTE v3[416];
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v4 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4)
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v3, v2);
}

void sub_1972A2114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  void *v63;

  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  if (a61)
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a9, v63);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::FocusedElementInformation>@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::decode(a1, a2);
  if (!a2[416])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1972A2194(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::FocusedElementInformation *v2;

  if (*((_BYTE *)v2 + 416))
    WebKit::FocusedElementInformation::~FocusedElementInformation(v2, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_move_base<WebKit::FocusedElementInformation,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[416] = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)a1, (__int128 *)a2);
    a1[416] = 1;
  }
  return a1;
}

void sub_1972A21F0(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::FocusedElementInformation *v2;

  if (*((_BYTE *)v2 + 416))
    WebKit::FocusedElementInformation::~FocusedElementInformation(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DynamicViewportSizeUpdate>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2191;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::DynamicViewportSizeUpdate,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A22F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDeviceOrientation>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2383;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A242C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverrideViewportArguments>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2415;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<WebCore::ViewportArguments>,void>::encode<IPC::Encoder,std::optional<WebCore::ViewportArguments> const&>((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A2550(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::optional<WebCore::ViewportArguments>,void>::encode<IPC::Encoder,std::optional<WebCore::ViewportArguments> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 56);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 56))
    {
      return IPC::ArgumentCoder<WebCore::ViewportArguments,void>::encode(a1, (char *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2359;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *(_DWORD **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  LOBYTE(a4) = *(_BYTE *)(a2 + 9);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  LOBYTE(a2) = *(_BYTE *)(a2 + 10);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a2;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE528;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A2770(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (v5[0] = IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>>>(a2),
        v5[1] = v3,
        (v3 & 0xFF00000000) != 0))
  {
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v2, (uint64_t)v5, v3, BYTE1(v3), BYTE2(v3));
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v1 + 16))(v1, &v3, 0, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A2928(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>>>(unint64_t *a1)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;

  v2 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (v3)
  {
    v4 = v2;
    if ((unsigned __int16)IPC::Decoder::decode<WebKit::GestureType>((uint64_t *)a1) >= 0x100u
      && (unsigned __int16)IPC::Decoder::decode<WebKit::GestureRecognizerState>((uint64_t *)a1) >= 0x100u
      && (unsigned __int16)IPC::Decoder::decode<WTF::OptionSet<WebKit::SelectionFlags>>(a1) >= 0x100u)
    {
      return v4;
    }
  }
  else
  {
    v9 = *a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
  }
  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = a1[3];
  if (v7 && v6)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  return 0;
}

uint64_t IPC::Decoder::decode<WebKit::GestureType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::GestureType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GestureType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 8)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<WebKit::GestureRecognizerState>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::GestureRecognizerState,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GestureRecognizerState,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 6)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::SelectionFlags>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v17;
        v10 = *v17;
        v9 = v17[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v5) = *v4;
      v6 = v5 < 8;
      if (v5 >= 8)
        LODWORD(v5) = 0;
      goto LABEL_5;
    }
    v9 = v1;
    v10 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v5 = a1[3];
  if (v5)
  {
    v16 = a1;
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v10);
    LODWORD(v5) = 0;
    v6 = 0;
    a1 = v16;
  }
  else
  {
    v6 = 0;
  }
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v13)
      {
        v15 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
        return v15;
      }
    }
  }
  return v7;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2491;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *(_DWORD **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  LOBYTE(a2) = *(_BYTE *)(a2 + 9);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a2;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE550;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A2F0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE550;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE550;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 v8;
  unsigned __int16 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(v2);
  v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (v5)
  {
    v6 = v4;
    v7 = IPC::Decoder::decode<WebKit::GestureRecognizerState>((uint64_t *)a2);
    if (v7 >= 0x100u)
    {
      v8 = v7;
      v9 = IPC::Decoder::decode<WTF::OptionSet<WebKit::SelectionFlags>>(a2);
      if (v9 >= 0x100u)
      {
        v13 = (unsigned __int16)(v8 | (unsigned __int16)(v9 << 8)) | 0x100000000;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v15 = *a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v16)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v12 = a2[3];
  if (v12)
  {
    if (v11)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
  }
  v6 = 0;
  v13 = 0;
LABEL_9:
  v18[0] = v6;
  v18[1] = v13;
  if ((v13 & 0xFF00000000) != 0)
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v2, (uint64_t)v18, v13, BYTE1(v13));
  return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v1 + 16))(v1, &v3, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A3164(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WillInsertFinalDictationResult>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2503;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A324C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidInsertFinalDictationResult>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2172;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A3358(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceDictatedText>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2317;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A3488(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceSelectedText>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2321;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A35B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Function<void ()(WebKit::WebAutocorrectionData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  CFTypeRef v6;
  WTF *result;
  WTF *v8;
  uint64_t v9;
  CFTypeRef cf;

  v2 = *a1;
  v8 = *(WTF **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v9 = v3;
  v4 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  cf = v4;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 16))(v2, &v8);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  result = v8;
  if (v8)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_1972A3670(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2325;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE578;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A37C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE578;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE578;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  CFTypeRef v6;
  void *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  CFTypeRef v11;
  WTF *v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  CFTypeRef v20;
  char v21;
  WTF *v22;
  uint64_t v23;
  CFTypeRef cf;
  char v25;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>((uint64_t *)(a1 + 8));
  IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::decode(a2, a2, (uint64_t)&v22);
  if (v25
    || (v4 = (void *)*a2, v14 = a2[1], *a2 = 0, a2[1] = 0, (v15 = a2[3]) != 0)
    && v14
    && ((*(void (**)(unint64_t, void *))(*(_QWORD *)v15 + 16))(v15, v4), v25))
  {
    v18 = v22;
    v5 = v23;
    v22 = 0;
    v23 = 0;
    v19 = v5;
    v6 = cf;
    cf = 0;
    v20 = v6;
    v21 = 1;
    std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v4);
  }
  else
  {
    LOBYTE(v18) = 0;
    v21 = 0;
    std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v4);
    v7 = (void *)*a2;
    v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v16)
      (*(void (**)(unint64_t, void *))(*(_QWORD *)v17 + 16))(v17, v7);
  }
  if (v21)
  {
    v22 = v18;
    v8 = v19;
    v18 = 0;
    v19 = 0;
    v23 = v8;
    v9 = v20;
    v20 = 0;
    cf = v9;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(v2, (uint64_t)&v22);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v22;
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      WTF::fastFree(v12, v10);
    }
    return (WTF *)std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v10);
  }
  else
  {
    std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v7);
    return IPC::Connection::cancelReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(v2);
  }
}

void sub_1972A3A08(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, CFTypeRef cf)
{
  std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a13, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(uint64_t *a1)
{
  void *v1;
  CFTypeRef v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;
  CFTypeRef cf;

  v4 = 0;
  v5 = 0;
  cf = 0;
  WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a1, (uint64_t)&v4);
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

void sub_1972A3AAC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  const void *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::SyncApplyAutocorrection>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v11;

  if (*(_QWORD *)(result + 144))
  {
    v11 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::WebPage::SyncApplyAutocorrection>(*(_QWORD *)(v11 + 144), a2, a3, a4, a5, a6);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

void sub_1972A3BF0(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPage::SyncApplyAutocorrection>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  IPC::Encoder *v11;
  char v12;
  int v13;
  unsigned __int16 v14;
  void *v15;
  uint64_t *v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  uint64_t *v20;
  int v21;
  IPC::Encoder *v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3700, a3, &v23, (uint64_t *)&v22);
  v11 = v22;
  if ((a4 & 1) != 0)
  {
    **((_BYTE **)v22 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v11, *(uint64_t **)(a2 + 8));
  v12 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(v11, 1uLL, 1) = v12;
  IPC::Connection::sendSyncMessage(a1, v23, (uint64_t *)&v22, a4, (uint64_t)&v20, a6);
  v13 = v21;
  if (v21)
  {
    if (v21 == 1)
    {
      *(_BYTE *)a5 = (_BYTE)v20;
LABEL_11:
      *(_DWORD *)(a5 + 16) = v13;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  v14 = IPC::Decoder::decode<std::tuple<BOOL>>(v20);
  if (v14 >= 0x100u)
  {
    if (!v21)
    {
      v16 = v20;
      v20 = 0;
      *(_QWORD *)a5 = v16;
      *(_BYTE *)(a5 + 8) = v14;
      goto LABEL_11;
    }
LABEL_16:
    result = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  v13 = v21;
  if (v21 != -1)
LABEL_12:
    ((void (*)(char *, uint64_t **))off_1E34CE590[v13])(&v24, &v20);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

void sub_1972A3D8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, IPC::Encoder *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;

  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34CE590[a12])(&a18, &a10);
  v19 = a13;
  a13 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, a2);
    WTF::fastFree(v20, v21);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, _DWORD **a2)
{
  _DWORD **v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 9);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectTextWithGranularityAtPoint,WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CE5B0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CE5B0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectTextWithGranularityAtPoint,WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A3F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtBoundaryWithDirection,WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CE5D8;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CE5D8;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtBoundaryWithDirection,WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A404C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionAtBoundaryWithDirection,WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CE600;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CE600;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionAtBoundaryWithDirection,WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A4168(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtPoint,WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CE628;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CE628;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtPoint,WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A4284(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2117;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LOBYTE(a4) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE650;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A43D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE650;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE650;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972A4530(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A458C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2489;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *(_DWORD **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  LOBYTE(a2) = *(_BYTE *)(a2 + 9);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a2;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE678;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A46FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE678;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE678;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972A4860(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A48BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, _DWORD **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2490;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE6A0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A49FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE6A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE6A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972A4B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A4BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2334;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CE6C8;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_1972A4CE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE6C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE6C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN3WTF17CompletionHandlerIFvRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSH_((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WebKit::RevealItem>((uint64_t)&v16, a2);
  if (v19)
  {
    v12 = v16;
    v13 = v17;
    v5 = v18;
    v16 = 0;
    v18 = 0;
    v14 = v5;
    v15 = 1;
    std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v4);
  }
  else
  {
    LOBYTE(v12) = 0;
    v15 = 0;
    std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v4);
    v6 = (WTF::StringImpl *)*a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9 && v7)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9, v6);
  }
  if (v15)
  {
    v10 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 16))(v10, &v12, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return (WTF::StringImpl *)std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v11);
  }
  else
  {
    std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v6);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN3WTF17CompletionHandlerIFvRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSH_(v2);
  }
}

void sub_1972A4EDC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::RevealItem>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RevealItem,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1972A4F64(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage35RequestRVItemInCurrentSelectedRangeEN3WTF17CompletionHandlerIFvRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSH_(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[2];
  CFTypeRef cf[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)cf = 0u;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = cf[1];
  cf[1] = 0;
  if (v3)
    CFRelease(v3);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972A505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (cf)
    CFRelease(cf);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(WebCore::IntPoint,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CE6F0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(WebCore::IntPoint,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34CE6F0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(WebCore::IntPoint,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19[2];
  CFTypeRef cf[2];
  IPC::Encoder *v21;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 && ((v4 = *(_QWORD *)(v3 + 8)) != 0 ? (v5 = a2 == 0) : (v5 = 0), v5))
  {
    v10 = *(_QWORD *)(v4 + 192);
    v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 2303;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v21 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, (_DWORD *)(a1 + 16));
    v13 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v14 = &off_1E34CE718;
    *((_QWORD *)v14 + 1) = v13;
    v19[0] = v14;
    v19[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    LOBYTE(cf[0]) = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v21, 0, (uint64_t)v19, 1);
    if (LOBYTE(cf[0]))
    {
      v16 = v19[0];
      v19[0] = 0;
      if (v16)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (WTF::StringImpl *)WTF::fastFree(v17, v18);
    }
  }
  else
  {
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)cf = 0u;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v6 + 16))(v6, 0, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v8 = cf[1];
    cf[1] = 0;
    if (v8)
      CFRelease(v8);
    result = v19[0];
    v19[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1972A5328(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, CFTypeRef cf, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a11 && a9)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a9 + 8))(a9);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE718;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24[8];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN3WTF17CompletionHandlerIFvbRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN3WTF17CompletionHandlerIFvbRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v4, v5);
        v17 = 0;
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v18 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v22);
          v18 = *a2;
          v17 = a2[1];
        }
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_17;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v17 = v5;
    v18 = v4;
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    v24[0] = 0;
    v28 = 0;
    goto LABEL_9;
  }
  IPC::Decoder::decode<WebKit::RevealItem>((uint64_t)&v29, a2);
  if (!v32)
  {
    v24[0] = 0;
    v28 = 0;
    std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v8);
LABEL_9:
    v10 = (WTF::StringImpl *)*a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13 && v12)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v13 + 16))(v13, v10);
    goto LABEL_10;
  }
  v25 = v29;
  v26 = v30;
  v9 = v31;
  v29 = 0;
  v31 = 0;
  v27 = v9;
  v24[0] = v7 != 0;
  v28 = 1;
  std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v8);
LABEL_10:
  if (v28)
  {
    v14 = v24[0];
    v15 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BOOL8, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v14, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v16);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v10);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN3WTF17CompletionHandlerIFvbRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(v2);
  }
}

void sub_1972A5664(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage48PrepareSelectionForContextMenuWithLocationInViewEN3WTF17CompletionHandlerIFvbRKN6WebKit10RevealItemEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSH_(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[2];
  CFTypeRef cf[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)cf = 0u;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, 0, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = cf[1];
  cf[1] = 0;
  if (v3)
    CFRelease(v3);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972A5778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (cf)
    CFRelease(cf);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleAutocorrectionContextRequest>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2246;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A5898(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionContext,WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE740;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionContext,WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE740;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionContext,WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _BYTE v7[8];
  uint64_t v8;
  _BYTE v9[16];

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage19GetSelectionContextEN3WTF17CompletionHandlerIFvRKNS5_6StringES9_S9_EEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSG_((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>(a2, v7);
  if (v9[8])
  {
    v4 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t *, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7, &v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  else
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage19GetSelectionContextEN3WTF17CompletionHandlerIFvRKNS5_6StringES9_S9_EEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSG_(v2);
  }
}

void sub_1972A5A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1972A5A7C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

void sub_1972A5B10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_1972A5BD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<WTF::String>(a1, &v11);
  v8 = v12;
  if (!v12)
  {
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*((_BYTE *)a2 + 8) && *((_BYTE *)a3 + 8))
  {
    v9 = *a2;
    *a2 = 0;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    *(_QWORD *)(a4 + 16) = v11;
    v8 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 24) = v8;
    return result;
  }
  __break(1u);
  return result;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage19GetSelectionContextEN3WTF17CompletionHandlerIFvRKNS5_6StringES9_S9_EEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSG_(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v8, &v7, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v6;
  v6 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = v7;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972A5D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v15;

  v13 = v12;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v15);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v15);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleTwoFingerTapAtPoint>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2248;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A5ECC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *(_DWORD **)a2);
  v4 = **(_BYTE **)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = **(_QWORD **)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2360;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *(_DWORD **)a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *(_DWORD **)(a2 + 8));
  LOBYTE(a4) = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  LOBYTE(a2) = *(_BYTE *)(a2 + 17);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a2;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE768;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A60DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE768;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE768;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (v5[0] = IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>>>(a2),
        v5[1] = v3,
        (v3 & 0xFF00000000) != 0))
  {
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v2, (uint64_t)v5, v3, BYTE1(v3), BYTE2(v3));
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v1 + 16))(v1, &v3, 0, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A6294(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestPositionInformation>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2333;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A6394(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2449;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>((IPC::Encoder *)v8, *(_QWORD *)a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, *(_DWORD **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A64CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopInteraction>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2454;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A65E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformActionOnElement,WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0>(WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CE790;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformActionOnElement,WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0>(WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34CE790;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformActionOnElement,WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0>(WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF::StringImpl **result, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;

  v3 = result[1];
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    if (v4)
    {
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v4 + 1024), result + 2, a3);
      v5 = *(_QWORD *)(v4 + 1024);
      if (v5)
      {
        v6 = (WTF::StringImpl **)(v5 + 8 * *(unsigned int *)(v5 - 4));
        if (v6 == result)
          return result;
      }
      else
      {
        if (!result)
          return result;
        v6 = 0;
      }
      if (v6 != result)
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v4 + 1024), result);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PerformActionOnElements>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2292;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, *(_QWORD *)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A689C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 80 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, v7);
      v7 += 80;
      v8 -= 80;
    }
    while (v8);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidFinishSnapshottingAfterEnteringBackground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2108;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A6A18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationWillResignActive>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2111;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A6B24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelection,WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE7B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelection,WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE7B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelection,WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  if (a2 && *a2)
  {
    v2 = *(_QWORD *)(result + 8);
    if (!v2)
      return result;
  }
  else
  {
    v2 = *(_QWORD *)(result + 8);
    if (!v2)
      return result;
  }
  *(_QWORD *)(result + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1972A6C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectWordBackward>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2361;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A6D48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2201;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CE7E0;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_1972A6E94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE7E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE7E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A6FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2231;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LOBYTE(a4) = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 4uLL, 4) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE808;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A7144(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE808;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE808;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, a2);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1972A72C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, v15);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_1972A7360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD v8[2];
  char v9;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)v8);
  if (v9)
  {
    *(_QWORD *)a1 = v8[0];
    *(_QWORD *)(a1 + 8) = v8[1];
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2230;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  LODWORD(a4) = *(_DWORD *)a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 4uLL, 4) = a4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *(uint64_t **)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE830;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972A7554(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE830;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE830;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v6, a2);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1972A76D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, v15);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_1972A7770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StoreSelectionForAccessibility>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2459;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A7890(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartAutoscrollAtPosition>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2448;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A79B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelAutoscroll>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2120;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A7AC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionByOffset,WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CE858;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CE858;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionByOffset,WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A7C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RegisterUIProcessAccessibilityTokens>(uint64_t a1, const void ***a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2307;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A7D08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul>(uint64_t a1, const void ***a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **a2, (size_t)(*a2)[1]);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *a2[1], (size_t)a2[1][1]);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WillStartUserTriggeredZooming>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2504;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A7E54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PotentialTapAtPosition>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2300;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatPoint const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatPoint const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A7F78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatPoint const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatPoint const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(a1, (int *)v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CommitPotentialTap>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2137;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&,unsigned int const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8108(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&,unsigned int const&>,0ul,1ul,2ul>(IPC::Encoder *a1, char **a2)
{
  char **v2;
  char v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = **a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LODWORD(v2) = *(_DWORD *)v2[2];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPotentialTap>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2122;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A8294(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TapHighlightAtPosition>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2468;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, (int *)a2[1]);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void sub_1972A83D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AttemptSyntheticClick>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2113;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8500(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRecognizeLongPress>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2174;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A8614(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleDoubleTapForDoubleClickAtPoint>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2247;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WTF::ObjectIdentifierGeneric<WebKit::TapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8738(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InspectorNodeSearchMovedToPosition>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2263;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8864(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InspectorNodeSearchEndedAtPosition>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2262;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8990(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BlurFocusedElement>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2118;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972A8AA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsShowingInputViewForFocusedElement>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2397;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8BD4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AutofillLoginCredentials>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2114;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8D04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusNextFocusedElement,WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34CE880;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CE880;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusNextFocusedElement,WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A8E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementValue>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2389;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode((IPC::Encoder *)v8, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A8F50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementSelectedIndex>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2388;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ElementContext const&,unsigned int,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ElementContext const&,unsigned int,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A907C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ElementContext const&,unsigned int,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::ElementContext const&,unsigned int,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, *a2);
  v4 = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 12);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ContentSizeCategoryDidChange>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2144;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A9208(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateSyntheticEditingCommand>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2215;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A9338(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HardwareKeyboardAvailabilityChanged>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2250;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972A945C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2328;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34CE8A8;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

void sub_1972A95B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE8A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE8A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    result = v6;
    if (v6)
    {
      v6 = 0;
      v7 = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1972A9740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  uint64_t v13;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a13)
  {
    if (a10)
      WTF::fastFree(a10, v15);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_1972A97DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1972A9860(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  char v5;
  _QWORD v6[2];
  char v7;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  v5 = v7;
  if (v7)
  {
    *(_QWORD *)a3 = v6[0];
    *(_QWORD *)(a3 + 8) = v6[1];
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v5;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2488;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = *a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34CE8D0;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

void sub_1972A9A24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE8D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE8D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972A9B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE8F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE8F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[248];
  char v15;
  _BYTE v16[248];
  char v17;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage29RequestDocumentEditingContextEN3WTF17CompletionHandlerIFvON6WebKit22DocumentEditingContextEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSG_((uint64_t *)(a1 + 8));
  IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::decode(a2, v16);
  if (v17
    || (v4 = (void *)*a2, v9 = a2[1], *a2 = 0, a2[1] = 0, (v10 = a2[3]) != 0)
    && v9
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 16))(v10, v4), v17))
  {
    WebKit::DocumentEditingContext::DocumentEditingContext((uint64_t)v14, (uint64_t)v16);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v14[0] = 0;
  }
  v15 = v5;
  std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v4);
  if (v15
    || (v11 = (void *)*a2, v12 = a2[1], *a2 = 0, a2[1] = 0, (v13 = a2[3]) != 0)
    && v12
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v13 + 16))(v13, v11), v15))
  {
    v6 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v7);
  }
  else
  {
    std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v11);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage29RequestDocumentEditingContextEN3WTF17CompletionHandlerIFvON6WebKit22DocumentEditingContextEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSG_(v2);
  }
}

void sub_1972A9D44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 248))
  {
    v3 = *(WTF **)(a1 + 232);
    if (v3)
    {
      *(_QWORD *)(a1 + 232) = 0;
      *(_DWORD *)(a1 + 240) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)(a1 + 216);
    if (v4)
    {
      *(_QWORD *)(a1 + 216) = 0;
      *(_DWORD *)(a1 + 224) = 0;
      WTF::fastFree(v4, a2);
    }
    MEMORY[0x19AEAEECC](a1 + 160);
    MEMORY[0x19AEAEECC](a1 + 120);
    MEMORY[0x19AEAEECC](a1 + 80);
    MEMORY[0x19AEAEECC](a1 + 40);
    MEMORY[0x19AEAEECC](a1);
  }
  return a1;
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage29RequestDocumentEditingContextEN3WTF17CompletionHandlerIFvON6WebKit22DocumentEditingContextEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSG_(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  WTF *v4;
  WTF *v5;
  _BYTE v7[40];
  _BYTE v8[40];
  _BYTE v9[40];
  _BYTE v10[40];
  _BYTE v11[56];
  __int128 v12;
  __int128 v13;

  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v7);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v8);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v9);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v10);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v11);
  v13 = 0u;
  v12 = 0u;
  *(_OWORD *)&v11[40] = 0u;
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = (WTF *)v13;
  if ((_QWORD)v13)
  {
    *(_QWORD *)&v13 = 0;
    DWORD2(v13) = 0;
    WTF::fastFree(v4, v3);
  }
  v5 = (WTF *)v12;
  if ((_QWORD)v12)
  {
    *(_QWORD *)&v12 = 0;
    DWORD2(v12) = 0;
    WTF::fastFree(v5, v3);
  }
  MEMORY[0x19AEAEECC](v11);
  MEMORY[0x19AEAEECC](v10);
  MEMORY[0x19AEAEECC](v9);
  MEMORY[0x19AEAEECC](v8);
  return MEMORY[0x19AEAEECC](v7);
}

void sub_1972A9F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,WTF *a39,int a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  WTF *v47;
  WTF *v48;

  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v47 = a39;
  if (a39)
  {
    a39 = 0;
    a40 = 0;
    WTF::fastFree(v47, v46);
  }
  v48 = a37;
  if (a37)
  {
    a37 = 0;
    a38 = 0;
    WTF::fastFree(v48, v46);
  }
  MEMORY[0x19AEAEECC](v43);
  MEMORY[0x19AEAEECC](v42);
  MEMORY[0x19AEAEECC](v41);
  MEMORY[0x19AEAEECC](v40);
  MEMORY[0x19AEAEECC](&a10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestDragStart>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2327;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972AA074(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, _DWORD **a2)
{
  _DWORD **v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, v2[1]);
  LOBYTE(v2) = *(_BYTE *)v2[2];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestAdditionalItemsForDragSession>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2324;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972AA1F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  _QWORD v28[2];
  char v29;
  IPC::Encoder *v30;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2258;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v30 = (IPC::Encoder *)v12;
  v13 = *a2;
  v14 = *(unsigned int *)(*a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(_DWORD **)v13;
    v17 = 8 * v15;
    do
    {
      IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, v16);
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
  }
  v18 = *a3;
  *a3 = 0;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = &off_1E34CE920;
  v19[1] = v18;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v28[0] = v19;
  v28[1] = v20;
  v29 = 1;
  v22 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v30, a5, (uint64_t)v28, a6);
  if (v29)
  {
    v23 = v28[0];
    v28[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v21);
    WTF::fastFree(v25, v26);
  }
  if (v22)
    return v20;
  else
    return 0;
}

void sub_1972AA394(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE920;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE920;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v9;
  void *v10;
  void *v11;
  _QWORD v12[2];
  _BYTE v13[120];
  char v14;
  WTF *v15;
  uint64_t v16;
  char v17;
  _BYTE v18[120];
  char v19;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v15);
  if (v17)
  {
    v4 = IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>(a2, v18);
    if (v19)
    {
      if (!v17)
      {
        __break(1u);
LABEL_19:
        if (v6)
        {
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v4 + 16))(v4, v5);
          if (v14)
            goto LABEL_15;
        }
        goto LABEL_17;
      }
      v12[0] = v15;
      v7 = v16;
      v15 = 0;
      v16 = 0;
      v12[1] = v7;
      std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v13, (uint64_t)v18);
      v14 = 1;
      if (v19)
        std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v5);
    }
    else
    {
      LOBYTE(v12[0]) = 0;
      v14 = 0;
    }
    if (v17)
    {
      v9 = v15;
      if (v15)
      {
        v15 = 0;
        LODWORD(v16) = 0;
        WTF::fastFree(v9, v5);
      }
    }
  }
  else
  {
    LOBYTE(v12[0]) = 0;
    v14 = 0;
  }
  if (v14)
  {
LABEL_15:
    std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v18, (uint64_t)v13);
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(v2, (uint64_t)v12, (uint64_t)v18);
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v10);
    return (WTF *)std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v11);
  }
  v5 = (void *)*a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = a2[3];
  if (v4)
    goto LABEL_19;
LABEL_17:
  std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v5);
  return IPC::Connection::cancelReply<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(v2);
}

void sub_1972AA5F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF *a28,int a29,int a30,char a31)
{
  std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(uint64_t *a1)
{
  void *v1;
  void *v2;
  WTF *result;
  _BYTE v4[120];
  WTF *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v4[0] = 0;
  v4[112] = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a1, (uint64_t)&v5, (uint64_t)v4);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v1);
  result = v5;
  if (v5)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_1972AA6BC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  WTF *v6;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  v6 = *(WTF **)(v3 - 32);
  if (v6)
  {
    *(_QWORD *)(v3 - 32) = 0;
    *(_DWORD *)(v3 - 24) = 0;
    WTF::fastFree(v6, v5);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1972AA738(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  WTF *v13;
  __int128 v14;
  int v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  WTF *v20;
  __int128 v21;
  unint64_t v22;
  WTF *result;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  WTF *v30;
  uint64_t v31;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v6, v5);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_29;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v24 = v5;
    v25 = 0;
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v24)
        result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v25);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v30 = 0;
  v31 = 0;
  if (v10 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v28);
      if (!v29)
        break;
      v18 = HIDWORD(v31);
      if (HIDWORD(v31) == (_DWORD)v31)
      {
        v19 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v28);
        v18 = HIDWORD(v31);
        v20 = v30;
        v21 = *v19;
      }
      else
      {
        v20 = v30;
        v21 = v28;
      }
      *((_OWORD *)v20 + v18) = v21;
      v22 = ++HIDWORD(v31);
      if (!--v10)
      {
        WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v30, v22);
        *(_QWORD *)a3 = v30;
        v27 = v31;
        v30 = 0;
        v31 = 0;
        *(_QWORD *)(a3 + 8) = v27;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v15 = 0;
      v17 = 0;
      v16 = 0;
LABEL_17:
      v30 = 0;
      *(_QWORD *)a3 = v16;
      HIDWORD(v31) = 0;
      *(_DWORD *)(a3 + 8) = v17;
      *(_DWORD *)(a3 + 12) = v15;
LABEL_18:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v31) = v10;
    v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v28);
      if (!v29)
        break;
      v11 = HIDWORD(v31);
      if (HIDWORD(v31) == (_DWORD)v31)
      {
        v12 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v28);
        v11 = HIDWORD(v31);
        v13 = v30;
        v14 = *v12;
      }
      else
      {
        v13 = v30;
        v14 = v28;
      }
      *((_OWORD *)v13 + v11) = v14;
      v15 = ++HIDWORD(v31);
      if (!--v10)
      {
        v16 = v30;
        v17 = v31;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_25:
  result = v30;
  if (v30)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_1972AA98C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 136))
  {
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
    v4 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, v3);
    }
  }
  return a1;
}

uint64_t WTF::Function<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  _BYTE v7[120];

  v4 = *a1;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v7, a3);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, a2, v7);
  return std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

void sub_1972AAA4C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidConcludeDrop>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2165;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_1972AAB2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Function<void ()(WTF::String const&)>::Function<WTF::CompletionHandler<void ()(WTF::String const&)>,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = *a2;
  *a2 = 0;
  *v4 = &off_1E34CE948;
  v4[1] = v5;
  if (v5)
  {
    *a1 = v4;
    return (uint64_t)a1;
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE948;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE948;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String const&>::call(uint64_t a1, uint64_t a2)
{
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 8), a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, int **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2469;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE970;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972AAD80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE970;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE970;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  WTF *result;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  char v14;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)v13);
  if (v14)
  {
    v10 = (WTF *)v13[0];
    v11 = v13[1];
    v12 = 1;
    v4 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v10);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v12)
    {
      result = v10;
      if (v10)
      {
        v10 = 0;
        LODWORD(v11) = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9 && v8)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
    return IPC::Connection::cancelReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  }
  return result;
}

void sub_1972AAF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  uint64_t v12;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    if (a9)
      WTF::fastFree(a9, v14);
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

void sub_1972AAFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;
  void *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
    WTF::fastFree(a9, v12);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1972AB078(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _OWORD *v12;
  WTF *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  WTF *result;
  int v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v6, v5);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v24 = v5;
    v25 = 0;
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v24)
        result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v25);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v39 = 0;
  v40 = 0;
  if (v10 >= 0x3333)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)&v41);
      if (!v46)
        break;
      v28 = HIDWORD(v40);
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        v29 = (_OWORD *)WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
        v28 = HIDWORD(v40);
        v30 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        v31 = v29[4];
        v33 = v29[1];
        v32 = v29[2];
        v30[3] = v29[3];
        v30[4] = v31;
        v30[1] = v33;
        v30[2] = v32;
        *v30 = *v29;
      }
      else
      {
        v34 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        v35 = v45;
        v37 = v42;
        v36 = v43;
        v34[3] = v44;
        v34[4] = v35;
        v34[1] = v37;
        v34[2] = v36;
        *v34 = v41;
      }
      HIDWORD(v40) = v28 + 1;
      if (!--v10)
      {
        WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v39, (v28 + 1));
        *(_QWORD *)a3 = v39;
        v38 = v40;
        v39 = 0;
        v40 = 0;
        *(_QWORD *)(a3 + 8) = v38;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v22 = 0;
      v23 = 0;
      v13 = 0;
LABEL_17:
      v39 = 0;
      *(_QWORD *)a3 = v13;
      HIDWORD(v40) = 0;
      *(_DWORD *)(a3 + 8) = v23;
      *(_DWORD *)(a3 + 12) = v22;
LABEL_18:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_29;
    }
    LODWORD(v40) = 80 * (int)v10 / 0x50u;
    v39 = (WTF *)WTF::fastMalloc((WTF *)(80 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)&v41);
      if (!v46)
        break;
      v11 = HIDWORD(v40);
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        v12 = (_OWORD *)WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
        v11 = HIDWORD(v40);
        v13 = v39;
        v14 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        v15 = v12[4];
        v17 = v12[1];
        v16 = v12[2];
        v14[3] = v12[3];
        v14[4] = v15;
        v14[1] = v17;
        v14[2] = v16;
        *v14 = *v12;
      }
      else
      {
        v13 = v39;
        v18 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        v19 = v45;
        v21 = v42;
        v20 = v43;
        v18[3] = v44;
        v18[4] = v19;
        v18[1] = v21;
        v18[2] = v20;
        *v18 = v41;
      }
      v22 = v11 + 1;
      HIDWORD(v40) = v22;
      if (!--v10)
      {
        v23 = v40;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_29:
  result = v39;
  if (v39)
  {
    v39 = 0;
    LODWORD(v40) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_1972AB36C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x3333334)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 80 * a2;
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = 80 * v4;
      v9 = v3;
      do
      {
        *v6 = *(_OWORD *)v9;
        v10 = *((_OWORD *)v9 + 1);
        v11 = *((_OWORD *)v9 + 2);
        v12 = *((_OWORD *)v9 + 4);
        v6[3] = *((_OWORD *)v9 + 3);
        v6[4] = v12;
        v6[1] = v10;
        v6[2] = v11;
        v6 += 5;
        v9 = (WTF *)((char *)v9 + 80);
        v8 -= 80;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

