uint64_t IPC::Decoder::decode<std::tuple<float,float>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v23 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        a1 = v23;
        v13 = *v23;
        v12 = v23[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15 && v12)
    {
      v22 = a1;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
LABEL_28:
      a1 = v22;
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  v5 = (unsigned int *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    v12 = v1;
    v13 = 0;
    goto LABEL_14;
  }
  v6 = (((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    v8 = *v5;
    v9 = (unsigned int *)(v2 + v6);
    v10 = *v9;
    a1[2] = v9 + 1;
    return v8 | (v10 << 32);
  }
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16)
  {
    if (v1)
    {
      v22 = a1;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      a1 = v22;
      v19 = *v22;
      v20 = v22[1];
      v21 = v22[3];
      *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
          goto LABEL_28;
        }
      }
    }
  }
LABEL_18:
  v17 = *a1;
  v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
    return 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>(unint64_t *a1)
{
  unint64_t result;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<WebCore::FloatSize>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::FloatSize>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t *v21;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (_DWORD *)(v2 + v3);
    a1[2] = (unint64_t)(v5 + 1);
    if (v2)
    {
      v6 = 0;
      LODWORD(v7) = *v5;
      v8 = v2;
      goto LABEL_8;
    }
    goto LABEL_33;
  }
  v8 = 0;
  v15 = 0;
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16)
  {
    v20 = a1;
    if (v1)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v16 + 16))(v16);
      a1 = v20;
      v15 = *v20;
      v8 = v20[1];
    }
    else
    {
      v8 = 0;
      v15 = 0;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v18 = a1;
      if (v8)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v15, v8);
        LODWORD(v7) = 0;
        a1 = v18;
        v8 = *v18;
        v1 = v18[1];
        v6 = 1;
        v2 = *v18;
      }
      else
      {
        v1 = 0;
        v2 = 0;
        LODWORD(v7) = 0;
        v6 = 1;
      }
    }
    else
    {
      v8 = 0;
      v1 = 0;
      v2 = 0;
      v6 = 1;
    }
LABEL_8:
    v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v9 && v1 - v9 > 3)
    {
      v11 = (unsigned int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (unint64_t)(v11 + 1);
      v12 = v1;
      if (v2)
      {
        if (!v6)
        {
          v13 = (unint64_t)*v11 << 32;
          return v13 | v7;
        }
        goto LABEL_32;
      }
    }
    else
    {
      v12 = 0;
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      v17 = a1[3];
      if (v17)
      {
        v21 = a1;
        if (v1)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v17 + 16))(v17);
          a1 = v21;
          v8 = *v21;
          v12 = v21[1];
        }
        else
        {
          v12 = 0;
          v8 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (!v7)
    {
      v13 = 0;
      return v13 | v7;
    }
    v19 = a1;
    if (!v12)
      break;
    a1 = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v8, v12);
    v13 = *v19;
    if (!*v19)
      goto LABEL_27;
LABEL_32:
    __break(1u);
LABEL_33:
    v8 = v1;
    v15 = v2;
  }
  v13 = 0;
LABEL_27:
  LODWORD(v7) = 0;
  return v13 | v7;
}

uint64_t WebKit::RemoteDisplayListRecorder::setState(uint64_t a1, WebCore::SourceBrush *this)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  WebCore::GraphicsContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  _BYTE v16[24];
  char v17;

  v14 = a1;
  v4 = WebCore::SourceBrush::pattern(this);
  if (v4)
  {
    v8 = v4;
    v9 = v4 + 8;
    v10 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(v4 + 8));
    WebKit::RemoteDisplayListRecorder::sourceImage(a1, v10, v15);
    if (!v17)
      return std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v15);
    std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>>(v8 + 24, (uint64_t)v16);
    std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
  }
  result = WebKit::RemoteDisplayListRecorder::setState(WebCore::DisplayList::SetState &&)::$_1::operator()(&v14, this);
  if (!(_DWORD)result)
    return result;
  v6 = WebCore::SourceBrush::pattern((WebCore::SourceBrush *)((char *)this + 88));
  if (v6)
  {
    v13 = v6;
    v11 = v6 + 8;
    v12 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(v6 + 8));
    WebKit::RemoteDisplayListRecorder::sourceImage(a1, v12, v15);
    if (v17)
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v15);
      std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>>(v13 + 24, (uint64_t)v16);
      std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
      goto LABEL_4;
    }
    return std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
  }
LABEL_4:
  result = WebKit::RemoteDisplayListRecorder::setState(WebCore::DisplayList::SetState &&)::$_1::operator()(&v14, (WebCore::SourceBrush *)((char *)this + 88));
  if ((_DWORD)result)
  {
    v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    return WebCore::DisplayList::SetState::apply(this, v7);
  }
  return result;
}

uint64_t IPC::requestNoSenderNotifications(mach_port_name_t name, mach_port_t notify)
{
  uint64_t result;
  mach_port_t previous;

  previous = 0;
  result = mach_port_request_notification(*MEMORY[0x1E0C83DA0], name, 70, 0, notify, 0x15u, &previous);
  if (!(_DWORD)result)
    return WTF::deallocateSendRightSafely((WTF *)previous);
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::FloatRect>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::FloatRoundedRect>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v9[3];
  char v10;

  result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a2, (uint64_t)v9);
  if (v10)
  {
    v5 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_BYTE *)(a1 + 48) = 1;
    return result;
  }
  v6 = *a2;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result)
  {
    v7 = 0;
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (!v7)
    goto LABEL_6;
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  v8 = *a2;
  v7 = a2[1];
  result = a2[3];
LABEL_7:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::FloatRoundedRect>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<WebCore::DisplayList::FillRectWithGradient>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradient,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, unint64_t))(*result + 16))(result, v5);
  }
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillCompositedRect(uint64_t a1, __int128 *a2, Color *a3, char a4, char a5)
{
  WebCore::GraphicsContext *v8;
  unsigned int *result;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  char v16;

  v13 = *a2;
  WebCore::Color::Color((WebCore::Color *)&v14, a3);
  v15 = a4;
  v16 = a5;
  v8 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  result = (unsigned int *)WebCore::DisplayList::FillCompositedRect::apply((WebCore::DisplayList::FillCompositedRect *)&v13, v8);
  if ((v14 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, result));
    if (!v12)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DisplayList::DrawGlyphs>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C34904(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::DisplayList::DrawGlyphs,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::ImagePaintingOptions>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a1);
  if (!BYTE3(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::FloatRect,float>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  char v20;

  result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v19);
  if (!v20)
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (v14)
      goto LABEL_17;
    goto LABEL_21;
  }
  v5 = a2[1];
  v6 = *a2;
  v7 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    v9 = (int *)(v6 + v7);
    a2[2] = (unint64_t)(v9 + 1);
    if (v6)
    {
      v10 = *v9;
      *(_OWORD *)a1 = v19;
      *(_DWORD *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 20) = 1;
      return result;
    }
    v15 = v5;
    v11 = 0;
  }
  else
  {
    v15 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v6, v5);
        v11 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v11 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v13 = a2[3];
  if (v13 && v15)
LABEL_21:
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
LABEL_17:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 20) = 0;
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v18)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillRectWithColor(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2, Color *a3)
{
  WebCore::GraphicsContext *v4;
  unsigned int *result;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;

  v9 = *(_OWORD *)a2;
  WebCore::Color::Color((WebCore::Color *)&v10, a3);
  v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  result = (unsigned int *)WebCore::DisplayList::FillRectWithColor::apply((WebCore::DisplayList::FillRectWithColor *)&v9, v4);
  if ((v10 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::Path>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _BYTE v12[8];
  _BYTE v13[56];
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::Path,void>::decode(a2, a2, v12);
  if (v15
    || ((v5 = *a2, v6 = a2[1], *a2 = 0, a2[1] = 0, (v7 = a2[3]) != 0) ? (v8 = v6 == 0) : (v8 = 1),
        !v8 && ((*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v5), v15)))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 64) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>(a1 + 8, (uint64_t)v13);
    *(_BYTE *)(a1 + 72) = 1;
    if (!v15)
      return result;
    if (v14 == -1)
      return result;
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34B4D38[v14])(&v11, v13);
    if (*(_BYTE *)(a1 + 72))
      return result;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v10)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t WebKit::WebFrame::shouldEnableInAppBrowserPrivacyProtections(WebKit::WebFrame *this)
{
  WebKit::WebFrame *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebFrame *v11;
  WebKit::WebFrame *v13;

  v1 = this;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v6 + 1368))(v6) & 1) == 0)
          {
            if (*(_QWORD *)(v6[2] + 8))
            {
              v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 24) + 8)
                                          + 48)
                              + 16);
              (*(void (**)(_QWORD *))(*v7 + 1368))(v7);
              v8 = *(_QWORD *)(v7[2] + 8);
              v9 = v8 ? v8 - 16 : 0;
              if (*(_BYTE *)(v9 + 195))
                return 0;
            }
          }
        }
      }
    }
  }
  if (!*((_BYTE *)v1 + 105) || *((_BYTE *)v1 + 104))
  {
    CFRetain(*((CFTypeRef *)v1 + 1));
    while (*((unsigned __int16 *)v1 + 52) < 0x100u || *((_WORD *)v1 + 52) != 0)
    {
      WebKit::WebFrame::parentFrame((unsigned int *)v1, &v13);
      v11 = v13;
      CFRelease(*((CFTypeRef *)v1 + 1));
      v1 = v11;
      if (!v11)
        return 0;
    }
    CFRelease(*((CFTypeRef *)v1 + 1));
  }
  return 1;
}

unsigned int *WebKit::WebFrame::parentFrame@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 3);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v4 + 48));
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      WebKit::WebFrame::fromCoreFrame(v7, a2);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    }
    else
    {
      *a2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t IPC::Decoder::decode<WebCore::RunJavaScriptParameters>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::decode(a2, a1);
  if (!a1[88])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 PartyWebsiteDataRemoval;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  void *v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v12[11];
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16[5];
  char v17;
  uint64_t v18;
  char v19;

  IPC::Decoder::decode<WTF::String>(a1, &v18);
  PartyWebsiteDataRemoval = IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(a1);
  IPC::Decoder::decode<WTF::URL>(a1, v16);
  v5 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  IPC::Decoder::decode<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>(&v13, a1);
  v6 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  v7 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  if (!*a1)
    goto LABEL_16;
  if (!v19 || PartyWebsiteDataRemoval <= 0xFFu || !v17 || v5 <= 0xFFu || !v15 || v6 <= 0xFFu || v7 <= 0xFFu)
  {
    __break(1u);
LABEL_16:
    *a2 = 0;
    a2[88] = 0;
    goto LABEL_10;
  }
  WebCore::RunJavaScriptParameters::RunJavaScriptParameters((uint64_t)v12, &v18, PartyWebsiteDataRemoval, v16, v5 != 0, &v13, v6 != 0, v7 != 0);
  std::__optional_destruct_base<WebCore::RunJavaScriptParameters,false>::__optional_destruct_base[abi:sn180100]<WebCore::RunJavaScriptParameters>((uint64_t)a2, v12);
  WebCore::RunJavaScriptParameters::~RunJavaScriptParameters((WebCore::RunJavaScriptParameters *)v12, v9);
LABEL_10:
  if (v15 && v14 && v13)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v8);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, (WTF::StringImpl *)v8);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v10);
}

void sub_196C34FC4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;
  WTF::StringImpl *v32;

  WebCore::RunJavaScriptParameters::~RunJavaScriptParameters((WebCore::RunJavaScriptParameters *)&a9, a2);
  if ((_BYTE)a23 && a21)
  {
    if (a20)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v31);
  }
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, (WTF::StringImpl *)v31);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v29 - 64, v32);
  _Unwind_Resume(a1);
}

void sub_196C35020()
{
  JUMPOUT(0x196C35010);
}

void WebCore::RunJavaScriptParameters::~RunJavaScriptParameters(WebCore::RunJavaScriptParameters *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*((_BYTE *)this + 72))
  {
    v3 = *((_QWORD *)this + 8);
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebCore::RunJavaScriptParameters::RunJavaScriptParameters(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4, char a5, uint64_t *a6, char a7, char a8)
{
  uint64_t v13;
  uint64_t v14;

  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v13;
  *(_BYTE *)(a1 + 8) = a3;
  WTF::URL::URL(a1 + 16, a4);
  *(_BYTE *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a6 + 8))
  {
    *(_QWORD *)(a1 + 64) = 0;
    v14 = *a6;
    *a6 = 0;
    *(_QWORD *)(a1 + 64) = v14;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_BYTE *)(a1 + 80) = a7;
  *(_BYTE *)(a1 + 81) = a8;
  return a1;
}

void sub_196C35138(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C351BC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::optional<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::AllowsCellularAccess>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::AllowsCellularAccess,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::FirstPartyWebsiteDataRemovalMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  char v7;

  result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a1 = 0;
    a1[16] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      result = IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>((uint64_t)&v6, a2);
      v5 = v7;
      if (v7)
      {
        *(_QWORD *)a1 = v6;
        v5 = 1;
        a1[8] = 1;
      }
      else
      {
        *a1 = 0;
      }
    }
    else
    {
      *a1 = 0;
      a1[8] = 0;
      v5 = 1;
    }
    a1[16] = v5;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::FirstPartyWebsiteDataRemovalMode,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  __int16 v3;

  v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 4u || HIBYTE(v3) == 0)
    return 0;
  else
    return v3 | 0x100u;
}

uint64_t WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(uint64_t a1, uint64_t a2, double a3)
{
  WTF::RunLoop *v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34D13F8;
  v7[1] = WebKit::ProcessThrottlerTimedActivity::activityTimedOut;
  v7[2] = 0;
  v7[3] = a1;
  v8 = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)a1, v6);
  *(_QWORD *)a1 = off_1E34ABE00;
  *(_QWORD *)(a1 + 24) = v7;
  *(double *)(a1 + 32) = a3;
  *(_BYTE *)(v8 + 40) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v8 + 40, a2);
  WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)a1);
  return a1;
}

uint64_t WebKit::ProcessThrottlerTimedActivity::updateTimer(WebKit::ProcessThrottlerTimedActivity *this)
{
  if (*((_DWORD *)this + 12))
    return WTF::RunLoop::TimerBase::start();
  else
    return WTF::RunLoop::TimerBase::stop(this);
}

void sub_196C355F8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

WebKit *API::ContentWorld::pageContentWorld(API::ContentWorld *this)
{
  WebKit *result;
  WebKit *v2;
  uint64_t v3;
  WebKit *v4;

    return (WebKit *)API::ContentWorld::pageContentWorld(void)::world;
  v2 = (WebKit *)API::Object::newObject(0x38uLL, 50);
  {
    v3 = WebKit::pageContentWorldIdentifier(void)::identifier;
  }
  else
  {
    v3 = 1;
    WebKit::pageContentWorldIdentifier(void)::identifier = 1;
  }
  v4 = v2;
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v2);
  result = v4;
  *(_QWORD *)v4 = &off_1E34D9280;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v3;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 4) = 0;
  API::ContentWorld::pageContentWorld(void)::world = (uint64_t)v4;
  return result;
}

uint64_t WebKit::WebScriptMessageHandler::create@<X0>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v8 = WTF::fastMalloc((WTF *)0x30);
  v9 = *a1;
  *a1 = 0;
  v11 = v9;
  *a4 = WebKit::WebScriptMessageHandler::WebScriptMessageHandler(v8, &v11, a2, a3);
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t WebKit::WebScriptMessageHandler::WebScriptMessageHandler(uint64_t a1, uint64_t *a2, _DWORD **a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34DED10;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  *(_QWORD *)(a1 + 32) = v9;
  CFRetain(*(CFTypeRef *)(a4 + 8));
  *(_QWORD *)(a1 + 40) = a4;
  return a1;
}

uint64_t ScriptMessageHandlerDelegate::ScriptMessageHandlerDelegate(uint64_t a1, CFTypeRef cf, CFTypeRef a3, void *a4)
{
  *(_QWORD *)a1 = off_1E34BCC70;
  *(_QWORD *)(a1 + 8) = cf;
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 16) = a3;
  if (a3)
    CFRetain(a3);
  *(_QWORD *)(a1 + 24) = objc_msgSend(a4, "copy");
  *(_BYTE *)(a1 + 32) = 0;
  return a1;
}

void sub_196C35870(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

void sub_196C35950(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196C35FDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v39;

  if (*(_BYTE *)(v37 - 240))
  {
    v39 = *(_QWORD *)(v37 - 248);
    if (v39)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v39, a2);
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(WebKit *this)
{
  uint64_t result;
  char v2;

    return WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(void)::staticShouldEvaluateJavaScriptWithoutTransientActivation != 0;
  v2 = WTF::linkedOnOrAfterSDKWithBehavior();
  result = 1;
  if ((v2 & 1) == 0)
    result = WebKit::isFullWebBrowserOrRunningTest((WebKit *)1);
  WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(void)::staticShouldEvaluateJavaScriptWithoutTransientActivation = result;
  return result;
}

BOOL WebKit::PageClientImpl::canTakeForegroundAssertions(WebKit::PageClientImpl *this)
{
  double v2;

  {
    WebKit::EndowmentStateTracker::singleton(void)::tracker = 0u;
    unk_1ECE734C8 = 0u;
  }
  if (*((_BYTE *)WebKit::EndowmentStateTracker::ensureState((WebKit::EndowmentStateTracker *)&WebKit::EndowmentStateTracker::singleton(void)::tracker)
       + 1))
    return 1;
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D87D68], "currentProcess"), "activeLimitations"), "runTime");
  return v2 == *MEMORY[0x1E0D87E30];
}

_WORD *WebKit::EndowmentStateTracker::ensureState(WebKit::EndowmentStateTracker *this)
{
  _WORD *v1;
  void *v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;

  v1 = (_WORD *)((char *)this + 24);
  if (!*((_BYTE *)this + 26))
  {
    v3 = (void *)WebKit::endowmentsForHandle((void *)objc_msgSend(MEMORY[0x1E0D87D68], "currentProcess"));
    v4 = objc_msgSend(v3, "containsObject:", CFSTR("com.apple.launchservices.userfacing"));
    if (objc_msgSend(v3, "containsObject:", CFSTR("com.apple.frontboard.visibility")))
      v5 = 256;
    else
      v5 = 0;
    v6 = v5 | v4;
    if (!*((_BYTE *)this + 26))
      *((_BYTE *)this + 26) = 1;
    *v1 = v6;
  }
  return v1;
}

uint64_t WebKit::WebPageProxy::launchInitialProcessIfNecessary(WebKit::WebProcessProxy **this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  result = WebKit::WebProcessProxy::isDummyProcessProxy(this[26]);
  if ((_DWORD)result)
  {
    v4 = 0;
    WebKit::WebPageProxy::launchProcess((uint64_t)this, &v4, 0);
    result = (uint64_t)v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebKit::WebProcessProxy::isDummyProcessProxy(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 94);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  return WebKit::WebProcessPool::dummyProcessProxy(v4, *(_QWORD *)(v1 + 24)) == (_QWORD)this;
}

uint64_t WebKit::WebProcessPool::dummyProcessProxy(uint64_t a1, uint64_t a2)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  uint64_t v9;

  v9 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((unsigned int **)(a1 + 96), &v9, (unsigned int **)&v8);
  v3 = (unsigned int *)v8;
  if (!v8)
    return 0;
  v4 = *((_QWORD *)v8 + 1);
  v8 = 0;
  do
  {
    v5 = __ldaxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

unsigned int **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(unsigned int **result@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v3 = *result;
  if (*result)
  {
    v4 = *(v3 - 2);
    v5 = *a2 + ~(*a2 << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = *(_QWORD *)&v3[4 * v8];
    if (v9 == *a2)
    {
LABEL_6:
      v3 = *(unsigned int **)&v3[4 * v8 + 2];
      if (v3)
      {
        do
          v11 = __ldaxr(v3);
        while (__stlxr(v11 + 1, v3));
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)&v3[4 * v8];
        ++v10;
        if (v9 == *a2)
          goto LABEL_6;
      }
      v3 = 0;
    }
  }
  *a3 = v3;
  return result;
}

char *IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  char v6;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 2);
  v5 = *((_BYTE *)v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>> const&>(a1, (uint64_t)(v2 + 8));
  v6 = *((_BYTE *)v2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v2) = *((_BYTE *)v2 + 81);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::endowmentsForHandle(v6);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t WebKit::endowmentsForHandle(void *a1)
{
  void *v2;
  NSObject *v4;
  uint8_t buf[4];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("com.apple.frontboard.visibility"), CFSTR("com.apple.launchservices.userfacing"), 0);
  v2 = (void *)objc_msgSend(a1, "currentState");
  if (objc_msgSend(v2, "taskState") == 4)
    return objc_msgSend(v2, "endowmentNamespaces");
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v6 = objc_msgSend(a1, "pid");
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "endowmentsForHandle: Process with PID %d is not running", buf, 8u);
  }
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::webPageProxyID(WebKit::WebFrame **this)
{
  uint64_t result;

  result = WebKit::WebFrame::page(this[2]);
  if (result)
    return *(_QWORD *)(WebKit::WebFrame::page(this[2]) + 2120);
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::overrideMediaType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(_QWORD *)(*(_QWORD *)(this + 16) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16);
          this = (*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7);
          if ((this & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              v9 = *(_DWORD **)(v8 + 2216);
              if (!v9)
                goto LABEL_11;
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  v9 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
LABEL_10:
    *v9 += 2;
LABEL_11:
  *a2 = v9;
  return this;
}

uint64_t WebKit::WebFrame::page(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(v5[2] + 8);
  if (v6)
    return v6 - 16;
  else
    return 0;
}

uint64_t WebCore::ChromeClient::isEmptyChromeClient(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebKit::WebPageDebuggable::name@<X0>(unsigned __int8 **this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  *a2 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34DD018;
  v4[1] = this;
  v4[2] = this;
  v4[3] = a2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void IPC::ArgumentCoder<WebKit::LayerProperties,void>::decode(WTF::StringImpl **a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF *v19;
  WTF *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  WTF::StringImpl *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  __int128 v107;
  __int128 v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  unsigned int v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  void *v139;
  WTF::StringImpl *v140;
  WTF *v141;
  uint64_t v142;
  WTF *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl **v146;
  WTF::StringImpl **v147;
  WTF *v148;
  uint64_t v149;
  _DWORD *v150;
  WTF *v151;
  WTF *v152;
  uint64_t v153;
  void *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned __int8 v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unsigned __int8 *v170;
  unsigned int v171;
  char v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  unsigned __int8 v180;
  int v181;
  unint64_t v182;
  int v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unsigned __int8 *v224;
  unsigned int v225;
  int v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  WTF *v244;
  WTF *v245;
  WTF *v246;
  unint64_t v247;
  unint64_t v248;
  unsigned __int8 *v249;
  unsigned int v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  WTF *v254;
  void *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  void *v266;
  unsigned __int16 v267;
  unsigned __int16 v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unsigned __int8 *v272;
  int v273;
  unsigned __int16 v274;
  unsigned __int16 v275;
  unint64_t v276;
  unint64_t v277;
  unsigned __int8 *v278;
  unsigned int v279;
  unint64_t v280;
  unint64_t v281;
  unsigned __int8 *v282;
  unsigned int v283;
  unint64_t v284;
  unint64_t v285;
  unsigned __int8 *v286;
  unsigned int v287;
  unint64_t v288;
  unint64_t v289;
  unsigned __int8 *v290;
  unsigned int v291;
  unint64_t v292;
  unint64_t v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unint64_t v296;
  unint64_t v297;
  unsigned __int8 *v298;
  unsigned int v299;
  unint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unsigned int v303;
  unint64_t v304;
  unint64_t v305;
  unsigned __int8 *v306;
  unsigned int v307;
  unint64_t v308;
  unint64_t v309;
  unsigned __int8 *v310;
  unsigned int v311;
  unint64_t v312;
  unint64_t v313;
  unsigned __int8 *v314;
  unsigned int v315;
  unint64_t v316;
  unint64_t v317;
  unsigned __int8 *v318;
  unsigned int v319;
  unint64_t v320;
  void *v321;
  unint64_t v322;
  unsigned int v323;
  WTF *v324;
  void *v325;
  WTF *v326;
  WTF *v327;
  WTF *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  WTF *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  char *v411;
  unint64_t v412;
  char *v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  WTF *v420;
  WTF *v421;
  void *v422;
  void *v423;
  void *v424;
  WTF *v425;
  uint64_t v426;
  uint64_t v427;
  WTF *v428;
  WTF *v429;
  uint64_t v430;
  char v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char v440;
  char v441;
  char v442;
  char v443;
  char v444;
  char v445;
  char v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  char v453;
  char v454;
  int v455;
  unsigned int v456;
  char v457;
  WTF::StringImpl *v458;
  int v459;
  WTF::StringImpl **v460;
  WTF::StringImpl **v461;
  __int128 v462;
  __int128 v463;
  _BYTE v464[40];
  __int128 v465;
  __int128 v466;
  _BYTE v467[48];
  __int128 v468;
  _BYTE v469[46];
  char v470;
  int v471;
  unsigned __int8 v472;
  char v473;
  char v474;
  int v475;
  unsigned __int8 v476;
  char v477;
  char v478;
  int v479;
  unsigned __int8 v480;
  char v481;
  char v482;
  int v483;
  unsigned __int8 v484;
  char v485;
  char v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  WTF *v492[2];
  __int128 v493;
  __int128 v494;
  __int128 v495;
  _BYTE v496[29];
  int v497;
  unsigned __int8 v498;
  unsigned __int8 v499;
  char v500;
  int v501;
  unsigned __int8 v502;
  unsigned __int8 v503;
  char v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  __int128 v508;
  __int128 v509;
  int v510;
  unsigned __int8 v511;
  char v512;
  char v513;
  int v514;
  unsigned __int8 v515;
  char v516;
  char v517;
  int v518;
  unsigned __int8 v519;
  char v520;
  char v521;
  int v522;
  unsigned __int8 v523;
  char v524;
  char v525;
  int v526;
  unsigned __int8 v527;
  char v528;
  char v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  char v535;
  uint64_t v536;
  char v537;
  char v538;
  char v539;
  WTF *v540;
  char v541;
  _QWORD v542[2];
  __int128 v543;
  char v544;
  char v545;
  __int128 v546;
  char v547;
  char v548;
  WTF *v549;
  WTF *v550;
  char v551;
  __int128 v552;
  char v553;
  char v554;
  WTF::StringImpl *v555[2];
  __int128 v556;
  _BYTE v557[24];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  _BYTE v561[32];
  __int128 v562;
  __int128 v563;
  __int128 v564;
  _BYTE v565[30];
  char v566;
  int v567;
  char v568;
  char v569;
  char v570;
  int v571;
  char v572;
  char v573;
  char v574;
  int v575;
  char v576;
  char v577;
  char v578;
  int v579;
  char v580;
  char v581;
  char v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  int v586;
  uint64_t v587;
  int v588;
  int v589;
  char v590;
  _QWORD v591[2];
  WTF::StringImpl *v592;
  WTF *v593;
  WTF *v594;
  WTF *v595;
  WTF *v596;
  WTF::StringImpl *v597;
  WTF *v598;
  WTF::StringImpl *v599;
  WTF::StringImpl **v600;
  WTF *v601;
  uint64_t v602;
  _QWORD v603[32];
  int v604;
  unint64_t v605;
  int v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  WTF *v611;
  WTF *v612;
  uint64_t v613;
  _OWORD v614[6];
  uint64_t v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  char v621;
  char v622;
  char v623;
  char v624;
  char v625;
  char v626;
  BOOL v627;
  BOOL v628;
  BOOL v629;
  BOOL v630;
  BOOL v631;
  BOOL v632;
  BOOL v633;
  BOOL v634;
  BOOL v635;
  BOOL v636;
  BOOL v637;
  WTF *v638;
  uint64_t v639;
  uint64_t v640;
  unsigned __int8 v641;
  _BYTE v642[15];
  uint64_t v643;

  v643 = *MEMORY[0x1E0C80C00];
  WebKit::LayerProperties::LayerProperties((WebKit::LayerProperties *)v591);
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_10:
    v4 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v4 = a2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (!((unint64_t)*v8 >> 41))
  {
    v10 = 1;
    goto LABEL_13;
  }
LABEL_11:
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
  v9 = 0;
  v10 = 0;
LABEL_13:
  if (!v10)
    goto LABEL_509;
  v591[0] = v9;
  if ((v9 & 1) != 0)
  {
    IPC::Decoder::decode<WTF::String>(a2, v555);
    if (!LOBYTE(v555[1]))
      goto LABEL_509;
    v16 = v555[0];
    v555[0] = 0;
    v17 = v592;
    v592 = v16;
    if (v17)
    {
      v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 != 2)
      {
LABEL_18:
        *(_DWORD *)v17 = v18;
        goto LABEL_19;
      }
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v5);
      if (LOBYTE(v555[1]))
      {
        v17 = v555[0];
        v555[0] = 0;
        if (v17)
        {
          v18 = *(_DWORD *)v17 - 2;
          if (*(_DWORD *)v17 != 2)
            goto LABEL_18;
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v5);
        }
      }
    }
  }
LABEL_19:
  if ((v9 & 2) != 0)
  {
    IPC::Decoder::decode<std::unique_ptr<WebCore::TransformationMatrix>>(v555, a2);
    if (!LOBYTE(v555[1]))
      goto LABEL_509;
    v19 = v593;
    v593 = v555[0];
    if (v19)
      WTF::fastFree(v19, (void *)v5);
  }
  if ((v9 & 4) != 0)
  {
    IPC::Decoder::decode<std::unique_ptr<WebCore::TransformationMatrix>>(v555, a2);
    if (!LOBYTE(v555[1]))
      goto LABEL_509;
    v20 = v594;
    v594 = v555[0];
    if (v20)
      WTF::fastFree(v20, (void *)v5);
  }
  if ((v9 & 8) != 0)
  {
    v21 = a2[1];
    v5 = *a2;
    v22 = a2[2] - *a2;
    if (v21 <= v22)
    {
      v43 = 0;
      v44 = 0;
      *a2 = 0;
      a2[1] = 0;
      v45 = a2[3];
      if (v45)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          v44 = *a2;
          v43 = a2[1];
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
      }
    }
    else
    {
      v23 = (unsigned __int8 *)(v5 + v22);
      a2[2] = (uint64_t)(v23 + 1);
      if (v5)
      {
        v24 = *v23;
        if (v24 < 2)
        {
          if (!v24)
          {
            v25 = 0;
LABEL_39:
            v26 = v595;
            v595 = v25;
            if (v26)
              WTF::fastFree(v26, (void *)v5);
            goto LABEL_41;
          }
          IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode((unint64_t *)a2, (uint64_t)v555);
          if (v557[16])
          {
            v25 = (WTF *)WTF::fastMalloc((WTF *)0x30);
            *(_OWORD *)v25 = *(_OWORD *)v555;
            *((_OWORD *)v25 + 1) = v556;
            *((_OWORD *)v25 + 2) = *(_OWORD *)v557;
            goto LABEL_39;
          }
          v5 = *a2;
          v48 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          v47 = a2[3];
          if (v47 && v48)
            goto LABEL_69;
          goto LABEL_71;
        }
LABEL_67:
        *a2 = 0;
        a2[1] = 0;
        v47 = a2[3];
        if (v47 && v21)
LABEL_69:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v5);
LABEL_71:
        v49 = *a2;
        v50 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v51 = a2[3];
        if (v51 && v50)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
        goto LABEL_509;
      }
      v43 = v21;
      v44 = 0;
    }
    v21 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v46 = a2[3];
    if (v46)
    {
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
        v5 = *a2;
        v21 = a2[1];
      }
      else
      {
        v21 = 0;
        v5 = 0;
      }
    }
    goto LABEL_67;
  }
LABEL_41:
  if ((v9 & 0x10) != 0)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v555, a2);
    if (!(_BYTE)v556)
      goto LABEL_509;
    v27 = v596;
    if (v596)
    {
      v596 = 0;
      LODWORD(v597) = 0;
      WTF::fastFree(v27, (void *)v5);
    }
    v596 = v555[0];
    v597 = v555[1];
  }
  if ((v9 & 0x20) == 0)
  {
LABEL_210:
    if ((v9 & 0x40) != 0)
    {
      v155 = IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
      if ((v5 & 0xFF00000000) == 0)
        goto LABEL_509;
      v603[31] = v155;
      v604 = v5;
    }
    if ((v9 & 0x80) != 0)
    {
      v156 = IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
      if ((v5 & 0xFF00000000) == 0)
        goto LABEL_509;
      v605 = v156;
      v606 = v5;
    }
    if ((v9 & 0x100) != 0)
    {
      v157 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
      v159 = v158;
      if (!v158)
      {
        v187 = *a2;
        v188 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v189 = a2[3];
        if (v189)
        {
          if (v188)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, v187);
        }
      }
      v160 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
      v161 = v5;
      if (!(_BYTE)v5)
      {
        v5 = *a2;
        v190 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v191 = a2[3];
        if (v191)
        {
          if (v190)
          {
            v192 = v160;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v191 + 16))(a2[3], v5);
            v160 = v192;
          }
        }
      }
      if (!*a2)
      {
        v193 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v194 = a2[3];
        if (!v194 || !v193)
          goto LABEL_509;
        goto LABEL_288;
      }
      if (!v159 || !v161)
        goto LABEL_660;
      v607 = v157;
      v608 = v160;
    }
    if ((v9 & 0x200) == 0)
      goto LABEL_230;
    v162 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    v164 = v163;
    if (!v163)
    {
      v195 = *a2;
      v196 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v197 = a2[3];
      if (v197)
      {
        if (v196)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 16))(v197, v195);
      }
    }
    v165 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    v166 = v5;
    if (!(_BYTE)v5)
    {
      v5 = *a2;
      v198 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v199 = a2[3];
      if (v199)
      {
        if (v198)
        {
          v200 = v165;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v199 + 16))(a2[3], v5);
          v165 = v200;
        }
      }
    }
    if (*a2)
    {
      if (!v164 || !v166)
        goto LABEL_660;
      v609 = v162;
      v610 = v165;
LABEL_230:
      if ((v9 & 0x400) == 0)
        goto LABEL_357;
      v167 = a2[1];
      v168 = *a2;
      v169 = a2[2] - *a2;
      if (v167 <= v169)
      {
        v202 = 0;
        v203 = 0;
        *a2 = 0;
        a2[1] = 0;
        v204 = a2[3];
        if (v204)
        {
          if (v167)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v204 + 16))(v204);
            v203 = *a2;
            v202 = a2[1];
          }
          else
          {
            v202 = 0;
            v203 = 0;
          }
        }
      }
      else
      {
        v170 = (unsigned __int8 *)(v168 + v169);
        a2[2] = (uint64_t)(v170 + 1);
        if (v168)
        {
          if (*v170 < 2u)
          {
            if (!*v170)
            {
              v183 = 0;
              v540 = 0;
              v541 = 1;
LABEL_347:
              if (*a2)
              {
                if (v183)
                  goto LABEL_660;
                v555[1] = 0;
                v555[0] = 0;
                v549 = 0;
                v550 = v540;
                v551 = 1;
                WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::RemoteLayerBackingStoreOrProperties *)v555);
              }
              else
              {
                LOBYTE(v549) = 0;
                v551 = 0;
                if ((v183 & 1) == 0)
                {
                  v328 = v540;
                  v540 = 0;
                  if (v328)
                    std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100]((int)&v540, v328);
                }
                v329 = a2[1];
                *a2 = 0;
                a2[1] = 0;
                v330 = a2[3];
                if (v330 && v329)
                  (*(void (**)(uint64_t))(*(_QWORD *)v330 + 16))(v330);
              }
              if (!v551)
                goto LABEL_509;
              v244 = v549;
              v549 = 0;
              v245 = v611;
              v611 = v244;
              if (v245)
                (*(void (**)(WTF *))(*(_QWORD *)v245 + 8))(v245);
              v246 = v550;
              v550 = 0;
              v5 = (uint64_t)v612;
              v612 = v246;
              if (v5)
                std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100]((int)&v612, (WTF *)v5);
              if (v551)
                WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::RemoteLayerBackingStoreOrProperties *)&v549);
LABEL_357:
              if ((v9 & 0x800) == 0)
                goto LABEL_368;
              v247 = a2[1];
              v5 = *a2;
              v248 = a2[2] - *a2;
              if (v247 <= v248)
              {
                v331 = 0;
                v332 = 0;
                *a2 = 0;
                a2[1] = 0;
                v333 = a2[3];
                if (v333)
                {
                  if (v247)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 16))(v333);
                    v332 = *a2;
                    v331 = a2[1];
                  }
                  else
                  {
                    v331 = 0;
                    v332 = 0;
                  }
                }
              }
              else
              {
                v249 = (unsigned __int8 *)(v5 + v248);
                a2[2] = (uint64_t)(v249 + 1);
                if (v5)
                {
                  v250 = *v249;
                  if (v250 < 2)
                  {
                    if (!v250)
                    {
                      v251 = 0;
LABEL_366:
                      v253 = v613;
                      v613 = v251;
                      if (v253)
                      {
                        v254 = (WTF *)WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v253, (void *)v5);
                        WTF::fastFree(v254, v255);
                      }
LABEL_368:
                      if ((v9 & 0x1000) != 0)
                      {
                        IPC::ArgumentCoder<WebCore::Path,void>::decode((unint64_t *)a2, (void *)v5, v555);
                        if (!(_BYTE)v559)
                        {
                          v338 = *a2;
                          v339 = a2[1];
                          *a2 = 0;
                          a2[1] = 0;
                          v340 = a2[3];
                          if (!v340)
                            goto LABEL_509;
                          if (!v339)
                            goto LABEL_509;
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v340 + 16))(v340, v338);
                          if (!(_BYTE)v559)
                            goto LABEL_509;
                        }
                        std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>((uint64_t)v614, (uint64_t)&v555[1]);
                        if ((_BYTE)v559 && DWORD2(v558) != -1)
                          ((void (*)(__int128 *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[DWORD2(v558)])(&v462, &v555[1]);
                      }
                      if ((v9 & 0x2000) != 0)
                      {
                        IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>>(v555, a2);
                        if (!(_BYTE)v556)
                          goto LABEL_509;
                        v614[4] = *(_OWORD *)v555;
                      }
                      if ((v9 & 0x4000) != 0)
                      {
                        IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>>(v555, a2);
                        if (!(_BYTE)v556)
                          goto LABEL_509;
                        v614[5] = *(_OWORD *)v555;
                      }
                      if ((v9 & 0x8000) == 0)
                        goto LABEL_384;
                      v256 = a2[1];
                      v257 = *a2;
                      v258 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
                      if (v256 < v258 || v256 - v258 <= 7)
                      {
                        v347 = 0;
                        v348 = 0;
                        *a2 = 0;
                        a2[1] = 0;
                        v349 = a2[3];
                        if (v349)
                        {
                          if (v256)
                          {
                            (*(void (**)(uint64_t))(*(_QWORD *)v349 + 16))(v349);
                            v348 = *a2;
                            v347 = a2[1];
                          }
                          else
                          {
                            v347 = 0;
                            v348 = 0;
                          }
                        }
                      }
                      else
                      {
                        v259 = (uint64_t *)(v257 + v258);
                        a2[2] = (uint64_t)(v259 + 1);
                        if (v257)
                        {
                          v615 = *v259;
LABEL_384:
                          if ((v9 & 0x10000) != 0)
                          {
                            v260 = IPC::Decoder::decode<float>(a2);
                            if ((v260 & 0xFF00000000) == 0)
                              goto LABEL_509;
                            v616 = v260;
                          }
                          if ((v9 & 0x20000) != 0)
                          {
                            v261 = IPC::Decoder::decode<float>(a2);
                            if ((v261 & 0xFF00000000) == 0)
                              goto LABEL_509;
                            v617 = v261;
                          }
                          if ((v9 & 0x40000) != 0)
                          {
                            v262 = IPC::Decoder::decode<float>(a2);
                            if ((v262 & 0xFF00000000) == 0)
                              goto LABEL_509;
                            v618 = v262;
                          }
                          if ((v9 & 0x80000) != 0)
                          {
                            v263 = IPC::Decoder::decode<float>(a2);
                            if ((v263 & 0xFF00000000) == 0)
                              goto LABEL_509;
                            v619 = v263;
                          }
                          if ((v9 & 0x100000) != 0)
                          {
                            v264 = IPC::Decoder::decode<float>(a2);
                            if ((v264 & 0xFF00000000) == 0)
                              goto LABEL_509;
                            v620 = v264;
                          }
                          if ((v9 & 0x200000) != 0)
                          {
                            IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v555);
                            if (!LOBYTE(v555[1]))
                            {
                              v352 = (void *)*a2;
                              v353 = a2[1];
                              *a2 = 0;
                              a2[1] = 0;
                              v354 = a2[3];
                              if (!v354)
                                goto LABEL_532;
                              if (!v353)
                                goto LABEL_532;
                              (*(void (**)(uint64_t, void *))(*(_QWORD *)v354 + 16))(v354, v352);
                              if (!LOBYTE(v555[1]))
                                goto LABEL_532;
                            }
                            WebCore::Color::operator=();
                            std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555, v265);
                          }
                          if ((v9 & 0x400000) != 0)
                          {
                            IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, v555);
                            if (!LOBYTE(v555[1]))
                            {
                              v352 = (void *)*a2;
                              v355 = a2[1];
                              *a2 = 0;
                              a2[1] = 0;
                              v356 = a2[3];
                              if (!v356
                                || !v355
                                || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v356 + 16))(v356, v352),
                                    !LOBYTE(v555[1])))
                              {
LABEL_532:
                                *(_BYTE *)a1 = 0;
                                *((_BYTE *)a1 + 728) = 0;
                                std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555, v352);
                                goto LABEL_510;
                              }
                            }
                            WebCore::Color::operator=();
                            std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555, v266);
                          }
                          if ((v9 & 0x800000) == 0)
                          {
LABEL_408:
                            if ((v9 & 0x1000000) != 0)
                            {
                              v267 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
                              if (v267 < 0x100u)
                                goto LABEL_509;
                              v622 = v267;
                            }
                            if ((v9 & 0x2000000) != 0)
                            {
                              v268 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
                              if (v268 < 0x100u)
                                goto LABEL_509;
                              v623 = v268;
                            }
                            if ((v9 & 0x4000000) == 0)
                              goto LABEL_419;
                            v269 = a2[1];
                            v270 = *a2;
                            v271 = a2[2] - *a2;
                            if (v269 <= v271)
                            {
                              v358 = 0;
                              v359 = 0;
                              *a2 = 0;
                              a2[1] = 0;
                              v360 = a2[3];
                              if (v360)
                              {
                                if (v269)
                                {
                                  (*(void (**)(uint64_t))(*(_QWORD *)v360 + 16))(v360);
                                  v359 = *a2;
                                  v358 = a2[1];
                                }
                                else
                                {
                                  v358 = 0;
                                  v359 = 0;
                                }
                              }
                            }
                            else
                            {
                              v272 = (unsigned __int8 *)(v270 + v271);
                              a2[2] = (uint64_t)(v272 + 1);
                              if (v270)
                              {
                                v273 = *v272;
                                if ((v273 - 1) < 0x12)
                                {
                                  v624 = v273;
LABEL_419:
                                  if ((v9 & 0x8000000) != 0)
                                  {
                                    v274 = IPC::Decoder::decode<WebCore::RotationDirection>(a2);
                                    if (v274 < 0x100u)
                                      goto LABEL_509;
                                    v625 = v274;
                                  }
                                  if ((v9 & 0x10000000) == 0)
                                    goto LABEL_425;
                                  v275 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
                                  if (v275 >= 0x100u)
                                  {
                                    v626 = v275;
LABEL_425:
                                    if ((v9 & 0x20000000) == 0)
                                      goto LABEL_430;
                                    v276 = a2[1];
                                    v270 = *a2;
                                    v277 = a2[2] - *a2;
                                    if (v276 <= v277)
                                    {
                                      v362 = 0;
                                      v363 = 0;
                                      *a2 = 0;
                                      a2[1] = 0;
                                      v364 = a2[3];
                                      if (v364)
                                      {
                                        if (v276)
                                        {
                                          (*(void (**)(uint64_t))(*(_QWORD *)v364 + 16))(v364);
                                          v363 = *a2;
                                          v362 = a2[1];
                                        }
                                        else
                                        {
                                          v362 = 0;
                                          v363 = 0;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v278 = (unsigned __int8 *)(v270 + v277);
                                      a2[2] = (uint64_t)(v278 + 1);
                                      if (v270)
                                      {
                                        v279 = *v278;
                                        if (v279 < 2)
                                        {
                                          v627 = v279 != 0;
LABEL_430:
                                          if ((v9 & 0x40000000) == 0)
                                            goto LABEL_435;
                                          v280 = a2[1];
                                          v270 = *a2;
                                          v281 = a2[2] - *a2;
                                          if (v280 <= v281)
                                          {
                                            v366 = 0;
                                            v367 = 0;
                                            *a2 = 0;
                                            a2[1] = 0;
                                            v368 = a2[3];
                                            if (v368)
                                            {
                                              if (v280)
                                              {
                                                (*(void (**)(uint64_t))(*(_QWORD *)v368 + 16))(v368);
                                                v367 = *a2;
                                                v366 = a2[1];
                                              }
                                              else
                                              {
                                                v366 = 0;
                                                v367 = 0;
                                              }
                                            }
                                          }
                                          else
                                          {
                                            v282 = (unsigned __int8 *)(v270 + v281);
                                            a2[2] = (uint64_t)(v282 + 1);
                                            if (v270)
                                            {
                                              v283 = *v282;
                                              if (v283 < 2)
                                              {
                                                v628 = v283 != 0;
LABEL_435:
                                                if ((v9 & 0x80000000) == 0)
                                                  goto LABEL_440;
                                                v284 = a2[1];
                                                v270 = *a2;
                                                v285 = a2[2] - *a2;
                                                if (v284 <= v285)
                                                {
                                                  v370 = 0;
                                                  v371 = 0;
                                                  *a2 = 0;
                                                  a2[1] = 0;
                                                  v372 = a2[3];
                                                  if (v372)
                                                  {
                                                    if (v284)
                                                    {
                                                      (*(void (**)(uint64_t))(*(_QWORD *)v372 + 16))(v372);
                                                      v371 = *a2;
                                                      v370 = a2[1];
                                                    }
                                                    else
                                                    {
                                                      v370 = 0;
                                                      v371 = 0;
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  v286 = (unsigned __int8 *)(v270 + v285);
                                                  a2[2] = (uint64_t)(v286 + 1);
                                                  if (v270)
                                                  {
                                                    v287 = *v286;
                                                    if (v287 < 2)
                                                    {
                                                      v629 = v287 != 0;
LABEL_440:
                                                      if ((v9 & 0x100000000) == 0)
                                                        goto LABEL_445;
                                                      v288 = a2[1];
                                                      v270 = *a2;
                                                      v289 = a2[2] - *a2;
                                                      if (v288 <= v289)
                                                      {
                                                        v374 = 0;
                                                        v375 = 0;
                                                        *a2 = 0;
                                                        a2[1] = 0;
                                                        v376 = a2[3];
                                                        if (v376)
                                                        {
                                                          if (v288)
                                                          {
                                                            (*(void (**)(uint64_t))(*(_QWORD *)v376 + 16))(v376);
                                                            v375 = *a2;
                                                            v374 = a2[1];
                                                          }
                                                          else
                                                          {
                                                            v374 = 0;
                                                            v375 = 0;
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v290 = (unsigned __int8 *)(v270 + v289);
                                                        a2[2] = (uint64_t)(v290 + 1);
                                                        if (v270)
                                                        {
                                                          v291 = *v290;
                                                          if (v291 < 2)
                                                          {
                                                            v630 = v291 != 0;
LABEL_445:
                                                            if ((v9 & 0x200000000) == 0)
                                                              goto LABEL_450;
                                                            v292 = a2[1];
                                                            v270 = *a2;
                                                            v293 = a2[2] - *a2;
                                                            if (v292 <= v293)
                                                            {
                                                              v378 = 0;
                                                              v379 = 0;
                                                              *a2 = 0;
                                                              a2[1] = 0;
                                                              v380 = a2[3];
                                                              if (v380)
                                                              {
                                                                if (v292)
                                                                {
                                                                  (*(void (**)(uint64_t))(*(_QWORD *)v380
                                                                                                  + 16))(v380);
                                                                  v379 = *a2;
                                                                  v378 = a2[1];
                                                                }
                                                                else
                                                                {
                                                                  v378 = 0;
                                                                  v379 = 0;
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v294 = (unsigned __int8 *)(v270 + v293);
                                                              a2[2] = (uint64_t)(v294 + 1);
                                                              if (v270)
                                                              {
                                                                v295 = *v294;
                                                                if (v295 < 2)
                                                                {
                                                                  v631 = v295 != 0;
LABEL_450:
                                                                  if ((v9 & 0x400000000) == 0)
                                                                    goto LABEL_455;
                                                                  v296 = a2[1];
                                                                  v270 = *a2;
                                                                  v297 = a2[2] - *a2;
                                                                  if (v296 <= v297)
                                                                  {
                                                                    v382 = 0;
                                                                    v383 = 0;
                                                                    *a2 = 0;
                                                                    a2[1] = 0;
                                                                    v384 = a2[3];
                                                                    if (v384)
                                                                    {
                                                                      if (v296)
                                                                      {
                                                                        (*(void (**)(uint64_t))(*(_QWORD *)v384 + 16))(v384);
                                                                        v383 = *a2;
                                                                        v382 = a2[1];
                                                                      }
                                                                      else
                                                                      {
                                                                        v382 = 0;
                                                                        v383 = 0;
                                                                      }
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v298 = (unsigned __int8 *)(v270 + v297);
                                                                    a2[2] = (uint64_t)(v298 + 1);
                                                                    if (v270)
                                                                    {
                                                                      v299 = *v298;
                                                                      if (v299 < 2)
                                                                      {
                                                                        v632 = v299 != 0;
LABEL_455:
                                                                        if ((v9 & 0x800000000) == 0)
                                                                          goto LABEL_460;
                                                                        v300 = a2[1];
                                                                        v270 = *a2;
                                                                        v301 = a2[2] - *a2;
                                                                        if (v300 <= v301)
                                                                        {
                                                                          v386 = 0;
                                                                          v387 = 0;
                                                                          *a2 = 0;
                                                                          a2[1] = 0;
                                                                          v388 = a2[3];
                                                                          if (v388)
                                                                          {
                                                                            if (v300)
                                                                            {
                                                                              (*(void (**)(uint64_t))(*(_QWORD *)v388 + 16))(v388);
                                                                              v387 = *a2;
                                                                              v386 = a2[1];
                                                                            }
                                                                            else
                                                                            {
                                                                              v386 = 0;
                                                                              v387 = 0;
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          v302 = (unsigned __int8 *)(v270 + v301);
                                                                          a2[2] = (uint64_t)(v302 + 1);
                                                                          if (v270)
                                                                          {
                                                                            v303 = *v302;
                                                                            if (v303 < 2)
                                                                            {
                                                                              v633 = v303 != 0;
LABEL_460:
                                                                              if ((v9 & 0x1000000000) == 0)
                                                                                goto LABEL_465;
                                                                              v304 = a2[1];
                                                                              v270 = *a2;
                                                                              v305 = a2[2] - *a2;
                                                                              if (v304 <= v305)
                                                                              {
                                                                                v390 = 0;
                                                                                v391 = 0;
                                                                                *a2 = 0;
                                                                                a2[1] = 0;
                                                                                v392 = a2[3];
                                                                                if (v392)
                                                                                {
                                                                                  if (v304)
                                                                                  {
                                                                                    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 16))(v392);
                                                                                    v391 = *a2;
                                                                                    v390 = a2[1];
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v390 = 0;
                                                                                    v391 = 0;
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                v306 = (unsigned __int8 *)(v270 + v305);
                                                                                a2[2] = (uint64_t)(v306 + 1);
                                                                                if (v270)
                                                                                {
                                                                                  v307 = *v306;
                                                                                  if (v307 < 2)
                                                                                  {
                                                                                    v634 = v307 != 0;
LABEL_465:
                                                                                    if ((v9 & 0x2000000000) == 0)
                                                                                      goto LABEL_470;
                                                                                    v308 = a2[1];
                                                                                    v270 = *a2;
                                                                                    v309 = a2[2] - *a2;
                                                                                    if (v308 <= v309)
                                                                                    {
                                                                                      v394 = 0;
                                                                                      v395 = 0;
                                                                                      *a2 = 0;
                                                                                      a2[1] = 0;
                                                                                      v396 = a2[3];
                                                                                      if (v396)
                                                                                      {
                                                                                        if (v308)
                                                                                        {
                                                                                          (*(void (**)(uint64_t))(*(_QWORD *)v396 + 16))(v396);
                                                                                          v395 = *a2;
                                                                                          v394 = a2[1];
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v394 = 0;
                                                                                          v395 = 0;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v310 = (unsigned __int8 *)(v270 + v309);
                                                                                      a2[2] = (uint64_t)(v310 + 1);
                                                                                      if (v270)
                                                                                      {
                                                                                        v311 = *v310;
                                                                                        if (v311 < 2)
                                                                                        {
                                                                                          v635 = v311 != 0;
LABEL_470:
                                                                                          if ((v9 & 0x4000000000) == 0)
                                                                                            goto LABEL_475;
                                                                                          v312 = a2[1];
                                                                                          v270 = *a2;
                                                                                          v313 = a2[2] - *a2;
                                                                                          if (v312 <= v313)
                                                                                          {
                                                                                            v398 = 0;
                                                                                            v399 = 0;
                                                                                            *a2 = 0;
                                                                                            a2[1] = 0;
                                                                                            v400 = a2[3];
                                                                                            if (v400)
                                                                                            {
                                                                                              if (v312)
                                                                                              {
                                                                                                (*(void (**)(uint64_t))(*(_QWORD *)v400 + 16))(v400);
                                                                                                v399 = *a2;
                                                                                                v398 = a2[1];
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v398 = 0;
                                                                                                v399 = 0;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v314 = (unsigned __int8 *)(v270 + v313);
                                                                                            a2[2] = (uint64_t)(v314 + 1);
                                                                                            if (v270)
                                                                                            {
                                                                                              v315 = *v314;
                                                                                              if (v315 < 2)
                                                                                              {
                                                                                                v636 = v315 != 0;
LABEL_475:
                                                                                                if ((v9 & 0x8000000000) == 0)
                                                                                                  goto LABEL_480;
                                                                                                v316 = a2[1];
                                                                                                v270 = *a2;
                                                                                                v317 = a2[2] - *a2;
                                                                                                if (v316 <= v317)
                                                                                                {
                                                                                                  v402 = 0;
                                                                                                  v403 = 0;
                                                                                                  *a2 = 0;
                                                                                                  a2[1] = 0;
                                                                                                  v404 = a2[3];
                                                                                                  if (v404)
                                                                                                  {
                                                                                                    if (v316)
                                                                                                    {
                                                                                                      (*(void (**)(uint64_t))(*(_QWORD *)v404 + 16))(v404);
                                                                                                      v403 = *a2;
                                                                                                      v402 = a2[1];
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v402 = 0;
                                                                                                      v403 = 0;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v318 = (unsigned __int8 *)(v270 + v317);
                                                                                                  a2[2] = (uint64_t)(v318 + 1);
                                                                                                  if (v270)
                                                                                                  {
                                                                                                    v319 = *v318;
                                                                                                    if (v319 < 2)
                                                                                                    {
                                                                                                      v637 = v319 != 0;
LABEL_480:
                                                                                                      if ((v9 & 0x10000000000) == 0)
                                                                                                        goto LABEL_658;
                                                                                                      IPC::Decoder::decode<WebCore::Region>(&v552, (unint64_t *)a2);
                                                                                                      v320 = IPC::Decoder::decode<unsigned long long>(a2);
                                                                                                      if ((_BYTE)v321)
                                                                                                      {
                                                                                                        v322 = v320;
                                                                                                        v492[0] = 0;
                                                                                                        v492[1] = 0;
                                                                                                        if (v320 >= 0xAAAA)
                                                                                                        {
                                                                                                          while (1)
                                                                                                          {
                                                                                                            IPC::Decoder::decode<WebCore::Region>(&v462, (unint64_t *)a2);
                                                                                                            if (!BYTE8(v463))
                                                                                                              break;
                                                                                                            if (HIDWORD(v492[1]) == LODWORD(v492[1]))
                                                                                                            {
                                                                                                              WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region>((uint64_t)v492, (unint64_t)&v462);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              WebCore::Region::Region();
                                                                                                              ++HIDWORD(v492[1]);
                                                                                                            }
                                                                                                            if (BYTE8(v463))
                                                                                                              WebCore::Region::~Region((WebCore::Region *)&v462);
                                                                                                            if (!--v322)
                                                                                                            {
                                                                                                              WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v492, HIDWORD(v492[1]));
                                                                                                              v549 = v492[0];
                                                                                                              v406 = v492[1];
                                                                                                              v492[0] = 0;
                                                                                                              v492[1] = 0;
                                                                                                              v550 = v406;
                                                                                                              goto LABEL_496;
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          if (!v320)
                                                                                                          {
                                                                                                            v326 = 0;
                                                                                                            v327 = 0;
LABEL_495:
                                                                                                            v492[0] = 0;
                                                                                                            v492[1] = 0;
                                                                                                            v549 = v326;
                                                                                                            v550 = v327;
LABEL_496:
                                                                                                            v551 = 1;
                                                                                                            WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v321);
LABEL_606:
                                                                                                            IPC::Decoder::decode<WebCore::Region>(&v546, (unint64_t *)a2);
                                                                                                            IPC::Decoder::decode<WebCore::Region>(&v543, (unint64_t *)a2);
                                                                                                            v410 = a2[1];
                                                                                                            v411 = (char *)*a2;
                                                                                                            v412 = a2[2] - *a2;
                                                                                                            if (v410 <= v412)
                                                                                                            {
                                                                                                              v415 = 0;
                                                                                                              v416 = 0;
                                                                                                              *a2 = 0;
                                                                                                              a2[1] = 0;
                                                                                                              v417 = a2[3];
                                                                                                              if (v417)
                                                                                                              {
                                                                                                                if (v410)
                                                                                                                {
                                                                                                                  (*(void (**)(uint64_t))(*(_QWORD *)v417 + 16))(v417);
                                                                                                                  v416 = *a2;
                                                                                                                  v415 = a2[1];
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  v415 = 0;
                                                                                                                  v416 = 0;
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v413 = &v411[v412];
                                                                                                              a2[2] = (uint64_t)(v413 + 1);
                                                                                                              if (v411)
                                                                                                              {
                                                                                                                v414 = *v413;
                                                                                                                if (v414 < 2)
                                                                                                                {
                                                                                                                  if (!v414)
                                                                                                                  {
                                                                                                                    LOBYTE(v462) = 0;
                                                                                                                    BYTE8(v463) = 0;
                                                                                                                    std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100](v492, (uint64_t)&v462);
LABEL_613:
                                                                                                                    LOBYTE(v494) = 1;
                                                                                                                    if (BYTE8(v463))
                                                                                                                      WebCore::Region::~Region((WebCore::Region *)&v462);
                                                                                                                    goto LABEL_621;
                                                                                                                  }
                                                                                                                  IPC::Decoder::decode<WebCore::Region>(&v462, (unint64_t *)a2);
                                                                                                                  if (BYTE8(v463))
                                                                                                                  {
                                                                                                                    WebCore::Region::Region();
                                                                                                                    BYTE8(v493) = 1;
                                                                                                                    goto LABEL_613;
                                                                                                                  }
LABEL_620:
                                                                                                                  LOBYTE(v492[0]) = 0;
                                                                                                                  LOBYTE(v494) = 0;
LABEL_621:
                                                                                                                  if (!(_BYTE)v494)
                                                                                                                    goto LABEL_661;
                                                                                                                  while (1)
                                                                                                                  {
                                                                                                                    if (!*a2)
                                                                                                                    {
                                                                                                                      LOBYTE(v555[0]) = 0;
                                                                                                                      v561[16] = 0;
                                                                                                                      goto LABEL_633;
                                                                                                                    }
                                                                                                                    if (v554)
                                                                                                                    {
                                                                                                                      if (v551)
                                                                                                                      {
                                                                                                                        v420 = v549;
                                                                                                                        v549 = 0;
                                                                                                                        v542[0] = v420;
                                                                                                                        v421 = v550;
                                                                                                                        v550 = 0;
                                                                                                                        v542[1] = v421;
                                                                                                                        if (v548)
                                                                                                                        {
                                                                                                                          WebCore::Region::Region();
                                                                                                                          if (v545)
                                                                                                                          {
                                                                                                                            WebCore::Region::Region();
                                                                                                                            if ((_BYTE)v494)
                                                                                                                              break;
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
LABEL_660:
                                                                                                                    __break(1u);
LABEL_661:
                                                                                                                    v411 = (char *)*a2;
                                                                                                                    v432 = a2[1];
                                                                                                                    *a2 = 0;
                                                                                                                    a2[1] = 0;
                                                                                                                    v433 = a2[3];
                                                                                                                    if (v433 && v432)
                                                                                                                      (*(void (**)(uint64_t, char *))(*(_QWORD *)v433 + 16))(v433, v411);
                                                                                                                  }
                                                                                                                  std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100](&v536, (uint64_t)v492);
                                                                                                                  WebCore::EventRegion::EventRegion();
                                                                                                                  WebCore::EventRegion::EventRegion((uint64_t)v555, (uint64_t)&v462);
                                                                                                                  v561[16] = 1;
                                                                                                                  if (v467[8])
                                                                                                                    WebCore::Region::~Region((WebCore::Region *)&v466);
                                                                                                                  WebCore::Region::~Region((WebCore::Region *)&v464[32]);
                                                                                                                  WebCore::Region::~Region((WebCore::Region *)&v464[8]);
                                                                                                                  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v463 + 8, v422);
                                                                                                                  WebCore::Region::~Region((WebCore::Region *)&v462);
                                                                                                                  if (v539)
                                                                                                                    WebCore::Region::~Region((WebCore::Region *)&v536);
                                                                                                                  WebCore::Region::~Region((WebCore::Region *)v642);
                                                                                                                  WebCore::Region::~Region((WebCore::Region *)&v540);
                                                                                                                  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v542, v423);
LABEL_633:
                                                                                                                  if ((_BYTE)v494 && BYTE8(v493))
                                                                                                                    WebCore::Region::~Region((WebCore::Region *)v492);
                                                                                                                  if (v545)
                                                                                                                    WebCore::Region::~Region((WebCore::Region *)&v543);
                                                                                                                  if (v548)
                                                                                                                    WebCore::Region::~Region((WebCore::Region *)&v546);
                                                                                                                  if (v551)
                                                                                                                    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v549, v411);
                                                                                                                  if (v554)
                                                                                                                    WebCore::Region::~Region((WebCore::Region *)&v552);
                                                                                                                  if (!v561[16])
                                                                                                                  {
                                                                                                                    v434 = *a2;
                                                                                                                    v435 = a2[1];
                                                                                                                    *a2 = 0;
                                                                                                                    a2[1] = 0;
                                                                                                                    v436 = a2[3];
                                                                                                                    if (!v436 || !v435 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v436 + 16))(v436, v434), !v561[16]))
                                                                                                                    {
                                                                                                                      *(_BYTE *)a1 = 0;
                                                                                                                      *((_BYTE *)a1 + 728) = 0;
                                                                                                                      std::__optional_destruct_base<WebCore::EventRegion,false>::~__optional_destruct_base[abi:sn180100](v555);
                                                                                                                      goto LABEL_510;
                                                                                                                    }
                                                                                                                  }
                                                                                                                  WebCore::Region::operator=();
                                                                                                                  if (HIDWORD(v639))
                                                                                                                  {
                                                                                                                    v425 = v638;
                                                                                                                    v426 = 24 * HIDWORD(v639);
                                                                                                                    do
                                                                                                                    {
                                                                                                                      WebCore::Region::~Region(v425);
                                                                                                                      v425 = (WTF *)(v427 + 24);
                                                                                                                      v426 -= 24;
                                                                                                                    }
                                                                                                                    while (v426);
                                                                                                                  }
                                                                                                                  v428 = v638;
                                                                                                                  if (v638)
                                                                                                                  {
                                                                                                                    v638 = 0;
                                                                                                                    LODWORD(v639) = 0;
                                                                                                                    WTF::fastFree(v428, v424);
                                                                                                                  }
                                                                                                                  v429 = (WTF *)*((_QWORD *)&v556 + 1);
                                                                                                                  *((_QWORD *)&v556 + 1) = 0;
                                                                                                                  v638 = v429;
                                                                                                                  v430 = *(_QWORD *)v557;
                                                                                                                  *(_QWORD *)v557 = 0;
                                                                                                                  v639 = v430;
                                                                                                                  WebCore::Region::operator=();
                                                                                                                  WebCore::Region::operator=();
                                                                                                                  if (v641 == v561[8])
                                                                                                                  {
                                                                                                                    if (v641)
                                                                                                                      WebCore::Region::operator=();
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    if (v641)
                                                                                                                    {
                                                                                                                      WebCore::Region::~Region((WebCore::Region *)&v640);
                                                                                                                      v431 = 0;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      WebCore::Region::Region();
                                                                                                                      v431 = 1;
                                                                                                                    }
                                                                                                                    v641 = v431;
                                                                                                                  }
                                                                                                                  std::__optional_destruct_base<WebCore::EventRegion,false>::~__optional_destruct_base[abi:sn180100](v555);
LABEL_658:
                                                                                                                  if (*a2)
                                                                                                                  {
                                                                                                                    WebKit::LayerProperties::LayerProperties((uint64_t)a1, (uint64_t)v591);
                                                                                                                    *((_BYTE *)a1 + 728) = 1;
                                                                                                                    goto LABEL_510;
                                                                                                                  }
                                                                                                                  goto LABEL_509;
                                                                                                                }
LABEL_619:
                                                                                                                *a2 = 0;
                                                                                                                a2[1] = 0;
                                                                                                                v419 = a2[3];
                                                                                                                if (v419 && v410)
                                                                                                                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v419 + 16))(v419, v411);
                                                                                                                goto LABEL_620;
                                                                                                              }
                                                                                                              v415 = v410;
                                                                                                              v416 = 0;
                                                                                                            }
                                                                                                            v410 = 0;
                                                                                                            v411 = 0;
                                                                                                            *a2 = 0;
                                                                                                            a2[1] = 0;
                                                                                                            v418 = a2[3];
                                                                                                            if (v418)
                                                                                                            {
                                                                                                              if (v415)
                                                                                                              {
                                                                                                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418 + 16))(v418, v416, v415);
                                                                                                                v411 = (char *)*a2;
                                                                                                                v410 = a2[1];
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v410 = 0;
                                                                                                                v411 = 0;
                                                                                                              }
                                                                                                            }
                                                                                                            goto LABEL_619;
                                                                                                          }
                                                                                                          v323 = 24 * v320;
                                                                                                          v324 = (WTF *)WTF::fastMalloc((WTF *)(24 * v320));
                                                                                                          LODWORD(v492[1]) = v323 / 0x18;
                                                                                                          v492[0] = v324;
                                                                                                          while (1)
                                                                                                          {
                                                                                                            IPC::Decoder::decode<WebCore::Region>(&v462, (unint64_t *)a2);
                                                                                                            if (!BYTE8(v463))
                                                                                                              break;
                                                                                                            if (HIDWORD(v492[1]) == LODWORD(v492[1]))
                                                                                                            {
                                                                                                              WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region>((uint64_t)v492, (unint64_t)&v462);
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              WebCore::Region::Region();
                                                                                                              ++HIDWORD(v492[1]);
                                                                                                            }
                                                                                                            if (BYTE8(v463))
                                                                                                              WebCore::Region::~Region((WebCore::Region *)&v462);
                                                                                                            if (!--v322)
                                                                                                            {
                                                                                                              v326 = v492[0];
                                                                                                              v327 = v492[1];
                                                                                                              goto LABEL_495;
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        LOBYTE(v549) = 0;
                                                                                                        v551 = 0;
                                                                                                        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v325);
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        LOBYTE(v549) = 0;
                                                                                                        v551 = 0;
                                                                                                      }
                                                                                                      v407 = *a2;
                                                                                                      v408 = a2[1];
                                                                                                      *a2 = 0;
                                                                                                      a2[1] = 0;
                                                                                                      v409 = a2[3];
                                                                                                      if (v409 && v408)
                                                                                                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v409 + 16))(v409, v407);
                                                                                                      goto LABEL_606;
                                                                                                    }
LABEL_593:
                                                                                                    *a2 = 0;
                                                                                                    a2[1] = 0;
                                                                                                    v337 = a2[3];
                                                                                                    if (!v337 || !v316)
                                                                                                      goto LABEL_509;
                                                                                                    goto LABEL_595;
                                                                                                  }
                                                                                                  v402 = v316;
                                                                                                  v403 = 0;
                                                                                                }
                                                                                                v316 = 0;
                                                                                                v270 = 0;
                                                                                                *a2 = 0;
                                                                                                a2[1] = 0;
                                                                                                v405 = a2[3];
                                                                                                if (v405)
                                                                                                {
                                                                                                  if (v402)
                                                                                                  {
                                                                                                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v405 + 16))(v405, v403, v402);
                                                                                                    v270 = *a2;
                                                                                                    v316 = a2[1];
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v316 = 0;
                                                                                                    v270 = 0;
                                                                                                  }
                                                                                                }
                                                                                                goto LABEL_593;
                                                                                              }
                                                                                              goto LABEL_588;
                                                                                            }
                                                                                            v398 = v312;
                                                                                            v399 = 0;
                                                                                          }
                                                                                          v312 = 0;
                                                                                          v270 = 0;
                                                                                          *a2 = 0;
                                                                                          a2[1] = 0;
                                                                                          v401 = a2[3];
                                                                                          if (v401)
                                                                                          {
                                                                                            if (v398)
                                                                                            {
                                                                                              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v401 + 16))(v401, v399, v398);
                                                                                              v270 = *a2;
                                                                                              v312 = a2[1];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v312 = 0;
                                                                                              v270 = 0;
                                                                                            }
                                                                                          }
LABEL_588:
                                                                                          *a2 = 0;
                                                                                          a2[1] = 0;
                                                                                          v337 = a2[3];
                                                                                          if (!v337 || !v312)
                                                                                            goto LABEL_509;
                                                                                          goto LABEL_595;
                                                                                        }
                                                                                        goto LABEL_583;
                                                                                      }
                                                                                      v394 = v308;
                                                                                      v395 = 0;
                                                                                    }
                                                                                    v308 = 0;
                                                                                    v270 = 0;
                                                                                    *a2 = 0;
                                                                                    a2[1] = 0;
                                                                                    v397 = a2[3];
                                                                                    if (v397)
                                                                                    {
                                                                                      if (v394)
                                                                                      {
                                                                                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v397 + 16))(v397, v395, v394);
                                                                                        v270 = *a2;
                                                                                        v308 = a2[1];
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v308 = 0;
                                                                                        v270 = 0;
                                                                                      }
                                                                                    }
LABEL_583:
                                                                                    *a2 = 0;
                                                                                    a2[1] = 0;
                                                                                    v337 = a2[3];
                                                                                    if (!v337 || !v308)
                                                                                      goto LABEL_509;
                                                                                    goto LABEL_595;
                                                                                  }
                                                                                  goto LABEL_578;
                                                                                }
                                                                                v390 = v304;
                                                                                v391 = 0;
                                                                              }
                                                                              v304 = 0;
                                                                              v270 = 0;
                                                                              *a2 = 0;
                                                                              a2[1] = 0;
                                                                              v393 = a2[3];
                                                                              if (v393)
                                                                              {
                                                                                if (v390)
                                                                                {
                                                                                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v393 + 16))(v393, v391, v390);
                                                                                  v270 = *a2;
                                                                                  v304 = a2[1];
                                                                                }
                                                                                else
                                                                                {
                                                                                  v304 = 0;
                                                                                  v270 = 0;
                                                                                }
                                                                              }
LABEL_578:
                                                                              *a2 = 0;
                                                                              a2[1] = 0;
                                                                              v337 = a2[3];
                                                                              if (!v337 || !v304)
                                                                                goto LABEL_509;
                                                                              goto LABEL_595;
                                                                            }
                                                                            goto LABEL_573;
                                                                          }
                                                                          v386 = v300;
                                                                          v387 = 0;
                                                                        }
                                                                        v300 = 0;
                                                                        v270 = 0;
                                                                        *a2 = 0;
                                                                        a2[1] = 0;
                                                                        v389 = a2[3];
                                                                        if (v389)
                                                                        {
                                                                          if (v386)
                                                                          {
                                                                            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v389 + 16))(v389, v387, v386);
                                                                            v270 = *a2;
                                                                            v300 = a2[1];
                                                                          }
                                                                          else
                                                                          {
                                                                            v300 = 0;
                                                                            v270 = 0;
                                                                          }
                                                                        }
LABEL_573:
                                                                        *a2 = 0;
                                                                        a2[1] = 0;
                                                                        v337 = a2[3];
                                                                        if (!v337 || !v300)
                                                                          goto LABEL_509;
                                                                        goto LABEL_595;
                                                                      }
                                                                      goto LABEL_568;
                                                                    }
                                                                    v382 = v296;
                                                                    v383 = 0;
                                                                  }
                                                                  v296 = 0;
                                                                  v270 = 0;
                                                                  *a2 = 0;
                                                                  a2[1] = 0;
                                                                  v385 = a2[3];
                                                                  if (v385)
                                                                  {
                                                                    if (v382)
                                                                    {
                                                                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v385 + 16))(v385, v383, v382);
                                                                      v270 = *a2;
                                                                      v296 = a2[1];
                                                                    }
                                                                    else
                                                                    {
                                                                      v296 = 0;
                                                                      v270 = 0;
                                                                    }
                                                                  }
LABEL_568:
                                                                  *a2 = 0;
                                                                  a2[1] = 0;
                                                                  v337 = a2[3];
                                                                  if (!v337 || !v296)
                                                                    goto LABEL_509;
                                                                  goto LABEL_595;
                                                                }
                                                                goto LABEL_563;
                                                              }
                                                              v378 = v292;
                                                              v379 = 0;
                                                            }
                                                            v292 = 0;
                                                            v270 = 0;
                                                            *a2 = 0;
                                                            a2[1] = 0;
                                                            v381 = a2[3];
                                                            if (v381)
                                                            {
                                                              if (v378)
                                                              {
                                                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v381 + 16))(v381, v379, v378);
                                                                v270 = *a2;
                                                                v292 = a2[1];
                                                              }
                                                              else
                                                              {
                                                                v292 = 0;
                                                                v270 = 0;
                                                              }
                                                            }
LABEL_563:
                                                            *a2 = 0;
                                                            a2[1] = 0;
                                                            v337 = a2[3];
                                                            if (!v337 || !v292)
                                                              goto LABEL_509;
                                                            goto LABEL_595;
                                                          }
                                                          goto LABEL_558;
                                                        }
                                                        v374 = v288;
                                                        v375 = 0;
                                                      }
                                                      v288 = 0;
                                                      v270 = 0;
                                                      *a2 = 0;
                                                      a2[1] = 0;
                                                      v377 = a2[3];
                                                      if (v377)
                                                      {
                                                        if (v374)
                                                        {
                                                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v377 + 16))(v377, v375, v374);
                                                          v270 = *a2;
                                                          v288 = a2[1];
                                                        }
                                                        else
                                                        {
                                                          v288 = 0;
                                                          v270 = 0;
                                                        }
                                                      }
LABEL_558:
                                                      *a2 = 0;
                                                      a2[1] = 0;
                                                      v337 = a2[3];
                                                      if (!v337 || !v288)
                                                        goto LABEL_509;
                                                      goto LABEL_595;
                                                    }
                                                    goto LABEL_553;
                                                  }
                                                  v370 = v284;
                                                  v371 = 0;
                                                }
                                                v284 = 0;
                                                v270 = 0;
                                                *a2 = 0;
                                                a2[1] = 0;
                                                v373 = a2[3];
                                                if (v373)
                                                {
                                                  if (v370)
                                                  {
                                                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v373 + 16))(v373, v371, v370);
                                                    v270 = *a2;
                                                    v284 = a2[1];
                                                  }
                                                  else
                                                  {
                                                    v284 = 0;
                                                    v270 = 0;
                                                  }
                                                }
LABEL_553:
                                                *a2 = 0;
                                                a2[1] = 0;
                                                v337 = a2[3];
                                                if (!v337 || !v284)
                                                  goto LABEL_509;
                                                goto LABEL_595;
                                              }
                                              goto LABEL_548;
                                            }
                                            v366 = v280;
                                            v367 = 0;
                                          }
                                          v280 = 0;
                                          v270 = 0;
                                          *a2 = 0;
                                          a2[1] = 0;
                                          v369 = a2[3];
                                          if (v369)
                                          {
                                            if (v366)
                                            {
                                              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v369 + 16))(v369, v367, v366);
                                              v270 = *a2;
                                              v280 = a2[1];
                                            }
                                            else
                                            {
                                              v280 = 0;
                                              v270 = 0;
                                            }
                                          }
LABEL_548:
                                          *a2 = 0;
                                          a2[1] = 0;
                                          v337 = a2[3];
                                          if (!v337 || !v280)
                                            goto LABEL_509;
                                          goto LABEL_595;
                                        }
                                        goto LABEL_543;
                                      }
                                      v362 = v276;
                                      v363 = 0;
                                    }
                                    v276 = 0;
                                    v270 = 0;
                                    *a2 = 0;
                                    a2[1] = 0;
                                    v365 = a2[3];
                                    if (v365)
                                    {
                                      if (v362)
                                      {
                                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v365 + 16))(v365, v363, v362);
                                        v270 = *a2;
                                        v276 = a2[1];
                                      }
                                      else
                                      {
                                        v276 = 0;
                                        v270 = 0;
                                      }
                                    }
LABEL_543:
                                    *a2 = 0;
                                    a2[1] = 0;
                                    v337 = a2[3];
                                    if (!v337 || !v276)
                                      goto LABEL_509;
                                    goto LABEL_595;
                                  }
LABEL_509:
                                  *(_BYTE *)a1 = 0;
                                  *((_BYTE *)a1 + 728) = 0;
                                  goto LABEL_510;
                                }
                                goto LABEL_538;
                              }
                              v358 = v269;
                              v359 = 0;
                            }
                            v269 = 0;
                            v270 = 0;
                            *a2 = 0;
                            a2[1] = 0;
                            v361 = a2[3];
                            if (v361)
                            {
                              if (v358)
                              {
                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v361 + 16))(v361, v359, v358);
                                v270 = *a2;
                                v269 = a2[1];
                              }
                              else
                              {
                                v269 = 0;
                                v270 = 0;
                              }
                            }
LABEL_538:
                            *a2 = 0;
                            a2[1] = 0;
                            v337 = a2[3];
                            if (!v337 || !v269)
                              goto LABEL_509;
                            goto LABEL_595;
                          }
                          LOWORD(v555[0]) = 0;
                          IPC::Decoder::operator>><BOOL>(a2, v555);
                          if (BYTE1(v555[0]))
                          {
                            v621 = (char)v555[0];
                            goto LABEL_408;
                          }
                          v270 = *a2;
                          v357 = a2[1];
                          *a2 = 0;
                          a2[1] = 0;
                          v337 = a2[3];
                          if (!v337 || !v357)
                            goto LABEL_509;
LABEL_595:
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v337 + 16))(v337, v270);
                          goto LABEL_509;
                        }
                        v347 = v256;
                        v348 = 0;
                      }
                      *a2 = 0;
                      a2[1] = 0;
                      v350 = a2[3];
                      if (v350 && v347)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v350 + 16))(v350, v348);
                      goto LABEL_509;
                    }
                    IPC::Decoder::decode<WebCore::FilterOperations>((uint64_t)v555, a2);
                    if ((_BYTE)v556)
                    {
                      v251 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v251 = 0;
                      *(_QWORD *)(v251 + 8) = 0;
                      v252 = v555[0];
                      v555[0] = 0;
                      *(_QWORD *)v251 = v252;
                      LODWORD(v252) = v555[1];
                      LODWORD(v555[1]) = 0;
                      *(_DWORD *)(v251 + 8) = (_DWORD)v252;
                      LODWORD(v252) = HIDWORD(v555[1]);
                      HIDWORD(v555[1]) = 0;
                      *(_DWORD *)(v251 + 12) = (_DWORD)v252;
                      if ((_BYTE)v556)
                        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v555, (void *)v5);
                      goto LABEL_366;
                    }
LABEL_508:
                    v270 = *a2;
                    v336 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    v337 = a2[3];
                    if (!v337 || !v336)
                      goto LABEL_509;
                    goto LABEL_595;
                  }
LABEL_507:
                  *a2 = 0;
                  a2[1] = 0;
                  v335 = a2[3];
                  if (v335 && v247)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v335 + 16))(v335, v5);
                  goto LABEL_508;
                }
                v331 = v247;
                v332 = 0;
              }
              v247 = 0;
              v5 = 0;
              *a2 = 0;
              a2[1] = 0;
              v334 = a2[3];
              if (v334)
              {
                if (v331)
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v334 + 16))(v334, v332, v331);
                  v5 = *a2;
                  v247 = a2[1];
                }
                else
                {
                  v247 = 0;
                  v5 = 0;
                }
              }
              goto LABEL_507;
            }
            if (v167 <= (unint64_t)&v170[-v168 + 1])
            {
              *a2 = 0;
              a2[1] = 0;
              v207 = a2[3];
              if (v207)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v207 + 16))(v207);
                v171 = 0;
                v167 = 0;
                v437 = *a2;
                v438 = a2[1];
                v439 = a2[3];
                *a2 = 0;
                a2[1] = 0;
                v168 = 0;
                if (v439 && v438)
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v439 + 16))(v439, v437, v438);
                  v171 = 0;
                  v168 = *a2;
                  v167 = a2[1];
                }
              }
              else
              {
                v167 = 0;
                v168 = 0;
                v171 = 0;
              }
            }
            else
            {
              a2[2] = (uint64_t)(v170 + 2);
              v171 = v170[1];
              if (v171 < 2)
              {
                v459 = 0;
                v172 = 1;
                goto LABEL_238;
              }
            }
            *a2 = 0;
            a2[1] = 0;
            v208 = a2[3];
            if (v208 && v167)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v208 + 16))(v208, v168);
            v172 = 0;
            v459 = 1;
LABEL_238:
            if (!v171)
              v172 = 0;
            v457 = v172;
            LOWORD(v462) = 0;
            IPC::Decoder::operator>><BOOL>(a2, &v462);
            v455 = BYTE1(v462);
            if (BYTE1(v462))
            {
              v454 = v462;
            }
            else
            {
              v209 = *a2;
              v210 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              v211 = a2[3];
              if (v211 && v210)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v211 + 16))(v211, v209);
              v454 = 0;
            }
            IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a2, (uint64_t)v492);
            v173 = a2[1];
            v174 = *a2;
            v175 = a2[2] - *a2;
            if (v173 <= v175)
            {
              v212 = 0;
              v213 = 0;
              *a2 = 0;
              a2[1] = 0;
              v214 = a2[3];
              if (v214)
              {
                if (v173)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v214 + 16))(v214);
                  v213 = *a2;
                  v212 = a2[1];
                }
                else
                {
                  v212 = 0;
                  v213 = 0;
                }
              }
            }
            else
            {
              v176 = (unsigned __int8 *)(v174 + v175);
              a2[2] = (uint64_t)(v176 + 1);
              if (v174)
              {
                v177 = *v176;
                if (v177 < 2)
                {
                  if (!v177)
                  {
                    v181 = 0;
                    v453 = 0;
                    v180 = 0;
                    v182 = 0;
                    goto LABEL_313;
                  }
                  v178 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
                  if (v179)
                  {
                    v180 = v178;
                    v181 = 0;
                    v182 = v178 & 0xFFFFFFFFFFFFFF00;
                    v453 = 1;
                    goto LABEL_313;
                  }
LABEL_311:
                  v217 = *a2;
                  v218 = a2[1];
                  *a2 = 0;
                  a2[1] = 0;
                  v219 = a2[3];
                  if (v219 && v218)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v219 + 16))(v219, v217);
                  v180 = 0;
                  v182 = 0;
                  v181 = 1;
LABEL_313:
                  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v552, a2);
                  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v546, a2);
                  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v543, a2);
                  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v536);
                  v220 = v642;
                  v221 = a2[1];
                  v222 = *a2;
                  v223 = a2[2] - *a2;
                  v461 = a1;
                  if (v221 <= v223)
                  {
                    v228 = 0;
                    v229 = 0;
                    *a2 = 0;
                    a2[1] = 0;
                    v230 = a2[3];
                    if (v230)
                    {
                      if (v221)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v230 + 16))(v230);
                        v229 = *a2;
                        v228 = a2[1];
                      }
                      else
                      {
                        v228 = 0;
                        v229 = 0;
                      }
                    }
                  }
                  else
                  {
                    v224 = (unsigned __int8 *)(v222 + v223);
                    a2[2] = (uint64_t)(v224 + 1);
                    if (v222)
                    {
                      v225 = *v224;
                      if (v225 < 2)
                      {
                        if (!v225)
                        {
                          v226 = 0;
                          LOBYTE(v220) = 0;
                          v227 = 0;
                          goto LABEL_327;
                        }
                        IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v462);
                        if ((_BYTE)v463)
                        {
                          v226 = 0;
                          v227 = v462;
                          *(_QWORD *)v642 = *(_QWORD *)((char *)&v462 + 1);
                          *(_QWORD *)&v642[7] = *((_QWORD *)&v462 + 1);
                          LOBYTE(v220) = 1;
LABEL_327:
                          a1 = v555;
                          if (*a2)
                          {
                            LOBYTE(v462) = 0;
                            LOBYTE(v465) = 0;
                            *((_QWORD *)&v465 + 1) = 0;
                            LOBYTE(v466) = 0;
                            BYTE8(v466) = 0;
                            v467[0] = 0;
                            v467[16] = 0;
                            v467[24] = 0;
                            v467[40] = 0;
                            LOBYTE(v468) = 0;
                            v469[0] = 0;
                            v469[8] = 0;
                            v469[16] = 0;
                            v469[24] = 0;
                            v469[40] = 0;
                            if (v459)
                              goto LABEL_660;
                            v469[44] = v457;
                            if (!v455)
                              goto LABEL_660;
                            v469[45] = v454;
                            if (!v496[16])
                              goto LABEL_660;
                            std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>((unsigned int *)&v462, (uint64_t)v492);
                            if (v181)
                              goto LABEL_660;
                            *(_QWORD *)&v466 = v182 | v180;
                            BYTE8(v466) = v453;
                            if (!v554)
                              goto LABEL_660;
                            *(_OWORD *)v467 = v552;
                            v467[16] = v553;
                            if (!v548)
                              goto LABEL_660;
                            *(_OWORD *)&v467[24] = v546;
                            v467[40] = v547;
                            if (!v545)
                              goto LABEL_660;
                            v468 = v543;
                            v469[0] = v544;
                            if (!v538)
                              goto LABEL_660;
                            *(_QWORD *)&v469[8] = v536;
                            v469[16] = v537;
                            if (v226)
                              goto LABEL_660;
                            v469[24] = v227;
                            *(_QWORD *)&v469[25] = *(_QWORD *)v642;
                            *(_QWORD *)&v469[32] = *(_QWORD *)&v642[7];
                            v469[40] = (_BYTE)v220;
                            std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)v555, (uint64_t)&v462);
                            v563 = v468;
                            v564 = *(_OWORD *)v469;
                            *(_OWORD *)v565 = *(_OWORD *)&v469[16];
                            *(_OWORD *)&v565[14] = *(_OWORD *)&v469[30];
                            v560 = v466;
                            *(_OWORD *)v561 = *(_OWORD *)v467;
                            *(_OWORD *)&v561[16] = *(_OWORD *)&v467[16];
                            *((_QWORD *)&v559 + 1) = *((_QWORD *)&v465 + 1);
                            v562 = *(_OWORD *)&v467[32];
                            LOBYTE(v567) = 1;
                            *((_QWORD *)&v465 + 1) = 0;
                            if ((_BYTE)v465 && *(_DWORD *)&v464[32] != -1)
                              __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[*(unsigned int *)&v464[32]]((int)v542, (WTF::MachSendRight *)&v462);
                          }
                          else
                          {
                            LOBYTE(v555[0]) = 0;
                            LOBYTE(v567) = 0;
                          }
                          if (v496[16] && v496[8] && *(_DWORD *)v496 != -1)
                            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[*(unsigned int *)v496]((int)&v462, (WTF::MachSendRight *)v492);
                          if ((_BYTE)v567
                            || (v341 = *a2, v342 = a2[1], *a2 = 0, a2[1] = 0, (v343 = a2[3]) != 0)
                            && v342
                            && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v343 + 16))(v343, v341),
                                (_BYTE)v567))
                          {
                            v236 = WTF::fastMalloc((WTF *)0xD8);
                            std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](v236, (uint64_t)v555);
                            v237 = *((_QWORD *)&v559 + 1);
                            *((_QWORD *)&v559 + 1) = 0;
                            *(_QWORD *)(v236 + 80) = v237;
                            v238 = v560;
                            v239 = *(_OWORD *)v561;
                            v240 = *(_OWORD *)&v561[16];
                            *(_OWORD *)(v236 + 136) = v562;
                            *(_OWORD *)(v236 + 120) = v240;
                            *(_OWORD *)(v236 + 104) = v239;
                            *(_OWORD *)(v236 + 88) = v238;
                            v241 = v563;
                            v242 = v564;
                            v243 = *(_OWORD *)v565;
                            *(_OWORD *)(v236 + 198) = *(_OWORD *)&v565[14];
                            *(_OWORD *)(v236 + 184) = v243;
                            *(_OWORD *)(v236 + 168) = v242;
                            *(_OWORD *)(v236 + 152) = v241;
                            v540 = (WTF *)v236;
                            v541 = 1;
                            std::__optional_destruct_base<WebKit::RemoteLayerBackingStoreProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555);
                            v183 = 0;
LABEL_346:
                            a1 = v461;
                            goto LABEL_347;
                          }
                          LOBYTE(v540) = 0;
                          v541 = 0;
                          std::__optional_destruct_base<WebKit::RemoteLayerBackingStoreProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555);
LABEL_520:
                          v344 = *a2;
                          v345 = a2[1];
                          *a2 = 0;
                          a2[1] = 0;
                          v346 = a2[3];
                          if (v346 && v345)
                          {
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v346 + 16))(v346, v344);
                            a1 = v461;
                            v183 = 1;
                            goto LABEL_347;
                          }
                          v183 = 1;
                          goto LABEL_346;
                        }
LABEL_325:
                        v233 = *a2;
                        v234 = a2[1];
                        *a2 = 0;
                        a2[1] = 0;
                        v235 = a2[3];
                        if (v235 && v234)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v235 + 16))(v235, v233);
                        v227 = 0;
                        v226 = 1;
                        goto LABEL_327;
                      }
LABEL_324:
                      *a2 = 0;
                      a2[1] = 0;
                      v232 = a2[3];
                      if (v232 && v221)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v232 + 16))(v232, v222);
                      goto LABEL_325;
                    }
                    v228 = v221;
                    v229 = 0;
                  }
                  v221 = 0;
                  v222 = 0;
                  *a2 = 0;
                  a2[1] = 0;
                  v231 = a2[3];
                  if (v231)
                  {
                    if (v228)
                    {
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v231 + 16))(v231, v229, v228);
                      v222 = *a2;
                      v221 = a2[1];
                    }
                    else
                    {
                      v221 = 0;
                      v222 = 0;
                    }
                  }
                  goto LABEL_324;
                }
LABEL_310:
                *a2 = 0;
                a2[1] = 0;
                v216 = a2[3];
                if (v216 && v173)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(v216, v174);
                goto LABEL_311;
              }
              v212 = v173;
              v213 = 0;
            }
            v173 = 0;
            v174 = 0;
            *a2 = 0;
            a2[1] = 0;
            v215 = a2[3];
            if (v215)
            {
              if (v212)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v215 + 16))(v215, v213, v212);
                v174 = *a2;
                v173 = a2[1];
              }
              else
              {
                v173 = 0;
                v174 = 0;
              }
            }
            goto LABEL_310;
          }
LABEL_300:
          *a2 = 0;
          a2[1] = 0;
          v206 = a2[3];
          if (v206 && v167)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v206 + 16))(v206, v168);
          v461 = a1;
          LOBYTE(v540) = 0;
          v541 = 0;
          goto LABEL_520;
        }
        v202 = v167;
        v203 = 0;
      }
      v167 = 0;
      v168 = 0;
      *a2 = 0;
      a2[1] = 0;
      v205 = a2[3];
      if (v205)
      {
        if (v202)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v205 + 16))(v205, v203, v202);
          v168 = *a2;
          v167 = a2[1];
        }
        else
        {
          v167 = 0;
          v168 = 0;
        }
      }
      goto LABEL_300;
    }
    v201 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v194 = a2[3];
    if (!v194 || !v201)
      goto LABEL_509;
LABEL_288:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v194 + 16))(v194, 0);
    goto LABEL_509;
  }
  v28 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v29)
  {
    LOBYTE(v552) = 0;
    v553 = 0;
LABEL_83:
    v63 = *a2;
    v64 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v65 = a2[3];
    if (v65 && v64)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v63);
    goto LABEL_84;
  }
  v30 = v28;
  v492[0] = 0;
  v492[1] = 0;
  if (v28 >= 0x1C71)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)&v462, a2);
      if (!v467[40])
        goto LABEL_82;
      if (HIDWORD(v492[1]) == LODWORD(v492[1]))
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)v492, (unint64_t)&v462);
      }
      else
      {
        v52 = (char *)v492[0] + 144 * HIDWORD(v492[1]);
        v53 = v462;
        *(_QWORD *)&v462 = 0;
        *(_QWORD *)v52 = v53;
        v54 = *((_QWORD *)&v462 + 1);
        *((_QWORD *)&v462 + 1) = 0;
        *((_QWORD *)v52 + 1) = v54;
        v55 = v463;
        v56 = *(_OWORD *)v464;
        *(_OWORD *)(v52 + 42) = *(_OWORD *)&v464[10];
        *((_OWORD *)v52 + 1) = v55;
        *((_OWORD *)v52 + 2) = v56;
        v57 = *(_QWORD *)&v464[32];
        *(_QWORD *)&v464[32] = 0;
        *((_QWORD *)v52 + 8) = v57;
        LODWORD(v57) = v465;
        v52[76] = BYTE4(v465);
        *((_DWORD *)v52 + 18) = v57;
        *((_QWORD *)v52 + 10) = 0;
        *((_QWORD *)v52 + 11) = 0;
        v58 = *((_QWORD *)&v465 + 1);
        *((_QWORD *)&v465 + 1) = 0;
        *((_QWORD *)v52 + 10) = v58;
        LODWORD(v58) = v466;
        LODWORD(v466) = 0;
        *((_DWORD *)v52 + 22) = v58;
        LODWORD(v58) = DWORD1(v466);
        DWORD1(v466) = 0;
        *((_DWORD *)v52 + 23) = v58;
        *((_QWORD *)v52 + 12) = 0;
        *((_QWORD *)v52 + 13) = 0;
        v59 = *((_QWORD *)&v466 + 1);
        *((_QWORD *)&v466 + 1) = 0;
        *((_QWORD *)v52 + 12) = v59;
        LODWORD(v59) = *(_DWORD *)v467;
        *(_DWORD *)v467 = 0;
        *((_DWORD *)v52 + 26) = v59;
        LODWORD(v59) = *(_DWORD *)&v467[4];
        *(_DWORD *)&v467[4] = 0;
        *((_DWORD *)v52 + 27) = v59;
        *((_QWORD *)v52 + 14) = 0;
        *((_QWORD *)v52 + 15) = 0;
        v60 = *(_QWORD *)&v467[8];
        *(_QWORD *)&v467[8] = 0;
        *((_QWORD *)v52 + 14) = v60;
        LODWORD(v60) = *(_DWORD *)&v467[16];
        *(_DWORD *)&v467[16] = 0;
        *((_DWORD *)v52 + 30) = v60;
        LODWORD(v60) = *(_DWORD *)&v467[20];
        *(_DWORD *)&v467[20] = 0;
        *((_DWORD *)v52 + 31) = v60;
        *((_QWORD *)v52 + 16) = 0;
        *((_QWORD *)v52 + 17) = 0;
        v61 = *(_QWORD *)&v467[24];
        *(_QWORD *)&v467[24] = 0;
        *((_QWORD *)v52 + 16) = v61;
        LODWORD(v61) = *(_DWORD *)&v467[32];
        *(_DWORD *)&v467[32] = 0;
        *((_DWORD *)v52 + 34) = v61;
        LODWORD(v61) = *(_DWORD *)&v467[36];
        *(_DWORD *)&v467[36] = 0;
        *((_DWORD *)v52 + 35) = v61;
        ++HIDWORD(v492[1]);
      }
      if (v467[40])
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)&v462, v29);
      if (!--v30)
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v492, HIDWORD(v492[1]));
        *(WTF **)&v552 = v492[0];
        v62 = v492[1];
        v492[0] = 0;
        v492[1] = 0;
        *((_QWORD *)&v552 + 1) = v62;
        goto LABEL_62;
      }
    }
  }
  if (v28)
  {
    LODWORD(v492[1]) = 144 * (int)v28 / 0x90u;
    v492[0] = (WTF *)WTF::fastMalloc((WTF *)(144 * v28));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)&v462, a2);
      if (!v467[40])
        break;
      if (HIDWORD(v492[1]) == LODWORD(v492[1]))
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)v492, (unint64_t)&v462);
      }
      else
      {
        v31 = (char *)v492[0] + 144 * HIDWORD(v492[1]);
        v32 = v462;
        *(_QWORD *)&v462 = 0;
        *(_QWORD *)v31 = v32;
        v33 = *((_QWORD *)&v462 + 1);
        *((_QWORD *)&v462 + 1) = 0;
        *((_QWORD *)v31 + 1) = v33;
        v34 = v463;
        v35 = *(_OWORD *)v464;
        *(_OWORD *)(v31 + 42) = *(_OWORD *)&v464[10];
        *((_OWORD *)v31 + 1) = v34;
        *((_OWORD *)v31 + 2) = v35;
        v36 = *(_QWORD *)&v464[32];
        *(_QWORD *)&v464[32] = 0;
        *((_QWORD *)v31 + 8) = v36;
        LODWORD(v36) = v465;
        v31[76] = BYTE4(v465);
        *((_DWORD *)v31 + 18) = v36;
        *((_QWORD *)v31 + 10) = 0;
        *((_QWORD *)v31 + 11) = 0;
        v37 = *((_QWORD *)&v465 + 1);
        *((_QWORD *)&v465 + 1) = 0;
        *((_QWORD *)v31 + 10) = v37;
        LODWORD(v37) = v466;
        LODWORD(v466) = 0;
        *((_DWORD *)v31 + 22) = v37;
        LODWORD(v37) = DWORD1(v466);
        DWORD1(v466) = 0;
        *((_DWORD *)v31 + 23) = v37;
        *((_QWORD *)v31 + 12) = 0;
        *((_QWORD *)v31 + 13) = 0;
        v38 = *((_QWORD *)&v466 + 1);
        *((_QWORD *)&v466 + 1) = 0;
        *((_QWORD *)v31 + 12) = v38;
        LODWORD(v38) = *(_DWORD *)v467;
        *(_DWORD *)v467 = 0;
        *((_DWORD *)v31 + 26) = v38;
        LODWORD(v38) = *(_DWORD *)&v467[4];
        *(_DWORD *)&v467[4] = 0;
        *((_DWORD *)v31 + 27) = v38;
        *((_QWORD *)v31 + 14) = 0;
        *((_QWORD *)v31 + 15) = 0;
        v39 = *(_QWORD *)&v467[8];
        *(_QWORD *)&v467[8] = 0;
        *((_QWORD *)v31 + 14) = v39;
        LODWORD(v39) = *(_DWORD *)&v467[16];
        *(_DWORD *)&v467[16] = 0;
        *((_DWORD *)v31 + 30) = v39;
        LODWORD(v39) = *(_DWORD *)&v467[20];
        *(_DWORD *)&v467[20] = 0;
        *((_DWORD *)v31 + 31) = v39;
        *((_QWORD *)v31 + 16) = 0;
        *((_QWORD *)v31 + 17) = 0;
        v40 = *(_QWORD *)&v467[24];
        *(_QWORD *)&v467[24] = 0;
        *((_QWORD *)v31 + 16) = v40;
        LODWORD(v40) = *(_DWORD *)&v467[32];
        *(_DWORD *)&v467[32] = 0;
        *((_DWORD *)v31 + 34) = v40;
        LODWORD(v40) = *(_DWORD *)&v467[36];
        *(_DWORD *)&v467[36] = 0;
        *((_DWORD *)v31 + 35) = v40;
        ++HIDWORD(v492[1]);
      }
      if (v467[40])
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)&v462, v29);
      if (!--v30)
      {
        v41 = v492[0];
        v42 = v492[1];
        goto LABEL_61;
      }
    }
LABEL_82:
    LOBYTE(v552) = 0;
    v553 = 0;
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v29);
    goto LABEL_83;
  }
  v41 = 0;
  v42 = 0;
LABEL_61:
  v492[0] = 0;
  v492[1] = 0;
  *(_QWORD *)&v552 = v41;
  *((_QWORD *)&v552 + 1) = v42;
LABEL_62:
  v553 = 1;
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v29);
LABEL_84:
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a2, &v543);
  v66 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v67)
  {
    LOBYTE(v546) = 0;
    v547 = 0;
LABEL_114:
    v88 = *a2;
    v89 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v90 = a2[3];
    if (v90 && v89)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, v88);
    goto LABEL_115;
  }
  v68 = v66;
  v462 = 0uLL;
  if (v66 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>(v492, a2);
      if (!LOBYTE(v492[1]))
      {
LABEL_113:
        LOBYTE(v546) = 0;
        v547 = 0;
        WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v462, v67);
        goto LABEL_114;
      }
      v80 = HIDWORD(v462);
      if (HIDWORD(v462) != DWORD2(v462))
        break;
      v81 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v462, HIDWORD(v462) + 1, (unint64_t)v492);
      v82 = HIDWORD(v462);
      v83 = HIDWORD(v462) + 1;
      v84 = v462;
      v85 = *v81;
      *v81 = 0;
      *(_QWORD *)(v84 + 8 * v82) = v85;
      HIDWORD(v462) = v83;
      if (LOBYTE(v492[1]))
        goto LABEL_107;
LABEL_111:
      if (!--v68)
      {
        WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v462, HIDWORD(v462));
        v351 = *((_QWORD *)&v462 + 1);
        *(_QWORD *)&v546 = v462;
        v462 = 0uLL;
        *((_QWORD *)&v546 + 1) = v351;
        goto LABEL_102;
      }
    }
    v86 = v492[0];
    v492[0] = 0;
    *(_QWORD *)(v462 + 8 * HIDWORD(v462)) = v86;
    HIDWORD(v462) = v80 + 1;
LABEL_107:
    v87 = v492[0];
    v492[0] = 0;
    if (v87)
    {
      if (*((_DWORD *)v87 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v87 + 56))(v87);
      else
        --*((_DWORD *)v87 + 2);
    }
    goto LABEL_111;
  }
  if (v66)
  {
    v69 = WTF::fastMalloc((WTF *)(8 * v66));
    DWORD2(v462) = v68;
    *(_QWORD *)&v462 = v69;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>(v492, a2);
      if (!LOBYTE(v492[1]))
        goto LABEL_113;
      v70 = HIDWORD(v462);
      if (HIDWORD(v462) != DWORD2(v462))
        break;
      v71 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v462, HIDWORD(v462) + 1, (unint64_t)v492);
      v72 = HIDWORD(v462);
      v73 = HIDWORD(v462) + 1;
      v74 = v462;
      v75 = *v71;
      *v71 = 0;
      *(_QWORD *)(v74 + 8 * v72) = v75;
      HIDWORD(v462) = v73;
      if (LOBYTE(v492[1]))
        goto LABEL_93;
LABEL_97:
      if (!--v68)
      {
        v79 = *((_QWORD *)&v462 + 1);
        v78 = v462;
        goto LABEL_101;
      }
    }
    v76 = v492[0];
    v492[0] = 0;
    *(_QWORD *)(v462 + 8 * HIDWORD(v462)) = v76;
    HIDWORD(v462) = v70 + 1;
LABEL_93:
    v77 = v492[0];
    v492[0] = 0;
    if (v77)
    {
      if (*((_DWORD *)v77 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v77 + 56))(v77);
      else
        --*((_DWORD *)v77 + 2);
    }
    goto LABEL_97;
  }
  v78 = 0;
  v79 = 0;
LABEL_101:
  v462 = 0uLL;
  *(_QWORD *)&v546 = v78;
  *((_QWORD *)&v546 + 1) = v79;
LABEL_102:
  v547 = 1;
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v462, v67);
LABEL_115:
  IPC::Decoder::decode<WebCore::AcceleratedEffectValues>(v492, (unint64_t *)a2);
  if (!*a2)
  {
    LOBYTE(v555[0]) = 0;
    v590 = 0;
    goto LABEL_183;
  }
  if (!v553)
    goto LABEL_660;
  v92 = (WTF::StringImpl *)v552;
  *(_QWORD *)&v462 = v552;
  v93 = DWORD2(v552);
  v94 = HIDWORD(v552);
  v552 = 0uLL;
  *((_QWORD *)&v462 + 1) = __PAIR64__(v94, v93);
  if (!BYTE8(v543))
    goto LABEL_660;
  v95 = v543;
  *(_QWORD *)&v543 = 0;
  *(_QWORD *)&v463 = v95;
  if (!v547)
    goto LABEL_660;
  v96 = v546;
  *((_QWORD *)&v463 + 1) = v546;
  v97 = DWORD2(v546);
  v98 = HIDWORD(v546);
  v546 = 0uLL;
  *(_DWORD *)v464 = v97;
  *(_DWORD *)&v464[4] = v98;
  if (!v535)
    goto LABEL_660;
  v465 = v494;
  v466 = v495;
  *(_OWORD *)v467 = *(_OWORD *)v496;
  *(_OWORD *)&v467[13] = *(_OWORD *)&v496[13];
  *(_OWORD *)&v464[8] = *(_OWORD *)v492;
  *(_OWORD *)&v464[24] = v493;
  *(_DWORD *)&v467[32] = 0;
  v99 = v498;
  v467[36] = v498;
  v100 = v498 - 2;
  *(_WORD *)&v467[37] = v499;
  if (v100 >= 9)
  {
    v446 = 0;
    if (v498 == 11)
    {
      *(_DWORD *)&v467[32] = v497;
      v101 = v497;
      v497 = 0;
    }
    else
    {
      v101 = 0;
    }
  }
  else
  {
    v467[38] = v500;
    if (v500)
    {
      v101 = v497;
      *(_DWORD *)&v467[32] = v497;
      v446 = 1;
    }
    else
    {
      v446 = 0;
      *(_DWORD *)&v467[32] = v497;
      v101 = v497;
    }
  }
  v498 = 0;
  *(_DWORD *)&v467[40] = 0;
  v467[46] = 0;
  v102 = v502;
  v467[44] = v502;
  v467[45] = v503;
  v452 = v502 - 2;
  v453 = v503;
  if (v452 >= 9)
  {
    v445 = 0;
    if (v502 == 11)
    {
      *(_DWORD *)&v467[40] = v501;
      v103 = v501;
      v501 = 0;
    }
    else
    {
      v103 = 0;
    }
  }
  else
  {
    v467[46] = v504;
    if (v504)
    {
      v103 = v501;
      *(_DWORD *)&v467[40] = v501;
      v445 = 1;
    }
    else
    {
      v445 = 0;
      *(_DWORD *)&v467[40] = v501;
      v103 = v501;
    }
  }
  v502 = 0;
  LOBYTE(v468) = v505;
  v104 = v506;
  v506 = 0;
  *((_QWORD *)&v468 + 1) = v104;
  v105 = v507;
  v106 = HIDWORD(v507);
  v507 = 0;
  v451 = v105;
  *(_DWORD *)v469 = v105;
  v450 = v106;
  *(_DWORD *)&v469[4] = v106;
  v107 = v508;
  v508 = 0u;
  *(_OWORD *)&v469[8] = v107;
  v108 = v509;
  v509 = 0u;
  *(_OWORD *)&v469[24] = v108;
  *(_DWORD *)&v469[40] = 0;
  v470 = 0;
  v109 = v511;
  v469[44] = v511;
  v469[45] = v512;
  v449 = v511 - 2;
  if (v449 >= 9)
  {
    v444 = 0;
    if (v511 == 11)
    {
      *(_DWORD *)&v469[40] = v510;
      v110 = v510;
      v510 = 0;
    }
    else
    {
      v110 = 0;
    }
  }
  else
  {
    v470 = v513;
    if (v513)
    {
      v110 = v510;
      *(_DWORD *)&v469[40] = v510;
      v444 = 1;
    }
    else
    {
      v444 = 0;
      *(_DWORD *)&v469[40] = v510;
      v110 = v510;
    }
  }
  v511 = 0;
  v471 = 0;
  v474 = 0;
  v111 = v515;
  v472 = v515;
  v473 = v516;
  v112 = v515 - 2;
  v458 = v92;
  v456 = v93;
  if (v112 >= 9)
  {
    v443 = 0;
    if (v515 == 11)
    {
      v471 = v514;
      v113 = v514;
      v514 = 0;
    }
    else
    {
      v113 = 0;
    }
  }
  else
  {
    v474 = v517;
    if (v517)
    {
      v113 = v514;
      v471 = v514;
      v443 = 1;
    }
    else
    {
      v443 = 0;
      v471 = v514;
      v113 = v514;
    }
  }
  v515 = 0;
  v475 = 0;
  v478 = 0;
  v114 = v519;
  v476 = v519;
  v477 = v520;
  v115 = v519 - 2;
  v116 = v95;
  if (v115 >= 9)
  {
    v442 = 0;
    if (v519 == 11)
    {
      v475 = v518;
      v117 = v518;
      v518 = 0;
    }
    else
    {
      v117 = 0;
    }
  }
  else
  {
    v478 = v521;
    if (v521)
    {
      v117 = v518;
      v475 = v518;
      v442 = 1;
    }
    else
    {
      v442 = 0;
      v475 = v518;
      v117 = v518;
    }
  }
  v519 = 0;
  v479 = 0;
  v482 = 0;
  v118 = v523;
  v480 = v523;
  v481 = v524;
  v119 = v523 - 2;
  v448 = v112;
  if (v119 >= 9)
  {
    v441 = 0;
    if (v523 == 11)
    {
      v479 = v522;
      v120 = v522;
      v522 = 0;
    }
    else
    {
      v120 = 0;
    }
  }
  else
  {
    v482 = v525;
    if (v525)
    {
      v120 = v522;
      v479 = v522;
      v441 = 1;
    }
    else
    {
      v441 = 0;
      v479 = v522;
      v120 = v522;
    }
  }
  v523 = 0;
  v483 = 0;
  v486 = 0;
  v121 = v527;
  v484 = v527;
  v485 = v528;
  v122 = v527 - 2;
  v460 = a1;
  v447 = v115;
  if (v122 >= 9)
  {
    v123 = v104;
    v440 = 0;
    if (v527 == 11)
    {
      v483 = v526;
      v124 = v526;
      v526 = 0;
    }
    else
    {
      v124 = 0;
    }
  }
  else
  {
    v486 = v529;
    v123 = v104;
    if (v529)
    {
      v124 = v526;
      v483 = v526;
      v440 = 1;
    }
    else
    {
      v440 = 0;
      v483 = v526;
      v124 = v526;
    }
  }
  v527 = 0;
  v125 = v531;
  v531 = 0;
  v487 = v530;
  v488 = v125;
  v126 = v532;
  v127 = HIDWORD(v532);
  v489 = v532;
  v532 = 0;
  v128 = v533;
  v533 = 0;
  v490 = v128;
  v129 = v534;
  v130 = HIDWORD(v534);
  v491 = v534;
  v534 = 0;
  v462 = 0uLL;
  v555[0] = v458;
  v555[1] = (WTF::StringImpl *)__PAIR64__(v94, v456);
  v463 = 0uLL;
  *(_QWORD *)&v556 = v116;
  *((_QWORD *)&v556 + 1) = v96;
  *(_QWORD *)v464 = 0;
  *(_DWORD *)v557 = v97;
  *(_DWORD *)&v557[4] = v98;
  *(_OWORD *)&v557[8] = *(_OWORD *)&v464[8];
  v558 = *(_OWORD *)&v464[24];
  *(_OWORD *)&v561[13] = *(_OWORD *)&v467[13];
  v560 = v466;
  *(_OWORD *)v561 = *(_OWORD *)v467;
  v559 = v465;
  LODWORD(v562) = 0;
  BYTE4(v562) = v99;
  *(_WORD *)((char *)&v562 + 5) = v499;
  if (v100 >= 9)
  {
    v184 = v99 == 11;
    v132 = v451;
    v131 = v452;
    v133 = v505;
    if (v184)
    {
      *(_DWORD *)&v467[32] = 0;
      LODWORD(v562) = v101;
    }
  }
  else
  {
    BYTE6(v562) = v446;
    LODWORD(v562) = v101;
    v132 = v451;
    v131 = v452;
    v133 = v505;
  }
  v467[36] = 0;
  DWORD2(v562) = 0;
  BYTE12(v562) = v102;
  *(_WORD *)((char *)&v562 + 13) = v503;
  if (v131 >= 9)
  {
    v184 = v102 == 11;
    v134 = v450;
    v135 = (void *)v108;
    v136 = *((_QWORD *)&v107 + 1);
    v137 = *((_QWORD *)&v108 + 1);
    v138 = v449;
    if (v184)
    {
      *(_DWORD *)&v467[40] = 0;
      DWORD2(v562) = v103;
    }
  }
  else
  {
    BYTE14(v562) = v445;
    DWORD2(v562) = v103;
    v134 = v450;
    v135 = (void *)v108;
    v136 = *((_QWORD *)&v107 + 1);
    v137 = *((_QWORD *)&v108 + 1);
    v138 = v449;
  }
  v467[44] = 0;
  LOBYTE(v563) = v133;
  *((_QWORD *)&v468 + 1) = 0;
  memset(v469, 0, 40);
  *((_QWORD *)&v563 + 1) = v123;
  *(_QWORD *)&v564 = __PAIR64__(v134, v132);
  *((_QWORD *)&v564 + 1) = v107;
  *(_QWORD *)v565 = v136;
  *(_QWORD *)&v565[8] = v135;
  *(_QWORD *)&v565[16] = v137;
  *(_DWORD *)&v565[24] = 0;
  v566 = 0;
  v565[28] = v109;
  v565[29] = v512;
  if (v138 < 9)
  {
    v566 = v444;
LABEL_168:
    *(_DWORD *)&v565[24] = v110;
    goto LABEL_169;
  }
  if (v109 == 11)
  {
    *(_DWORD *)&v469[40] = 0;
    goto LABEL_168;
  }
LABEL_169:
  v469[44] = 0;
  v567 = 0;
  v570 = 0;
  v568 = v111;
  v569 = v516;
  if (v448 < 9)
  {
    v570 = v443;
LABEL_171:
    v567 = v113;
    goto LABEL_172;
  }
  if (v111 == 11)
  {
    v471 = 0;
    goto LABEL_171;
  }
LABEL_172:
  v472 = 0;
  v571 = 0;
  v574 = 0;
  v572 = v114;
  v573 = v520;
  if (v447 >= 9)
  {
    if (v114 == 11)
    {
      v475 = 0;
      v571 = v117;
    }
  }
  else
  {
    v574 = v442;
    v571 = v117;
  }
  v476 = 0;
  v575 = 0;
  v578 = 0;
  v576 = v118;
  v577 = v524;
  if (v119 < 9)
  {
    v578 = v441;
LABEL_176:
    v575 = v120;
    goto LABEL_177;
  }
  if (v118 == 11)
  {
    v479 = 0;
    goto LABEL_176;
  }
LABEL_177:
  v480 = 0;
  v579 = 0;
  v582 = 0;
  v580 = v121;
  v581 = v528;
  if (v122 >= 9)
  {
    if (v121 != 11)
      goto LABEL_180;
    v483 = 0;
  }
  else
  {
    v582 = v440;
  }
  v579 = v124;
LABEL_180:
  v484 = 0;
  v488 = 0;
  v583 = v530;
  v584 = v125;
  v585 = v126;
  v489 = 0;
  v586 = v127;
  v490 = 0;
  v587 = v128;
  v588 = v129;
  v491 = 0;
  v589 = v130;
  v590 = 1;
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v464[8], v135);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v463 + 8, v139);
  if ((_QWORD)v463)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v463, v140);
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v462, v140);
  a1 = v460;
LABEL_183:
  if (v535)
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v492, v91);
  if (v547)
    WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v546, v91);
  if (BYTE8(v543) && (_QWORD)v543)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v543, (WTF::StringImpl *)v91);
  if (v553)
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v552, (WTF::StringImpl *)v91);
  if (v590
    || (v91 = (void *)*a2, v185 = a2[1], *a2 = 0, a2[1] = 0, (v186 = a2[3]) != 0)
    && v185
    && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v186 + 16))(v186, v91), v590))
  {
    if (HIDWORD(v599))
    {
      v141 = v598;
      v142 = 144 * HIDWORD(v599);
      do
      {
        v141 = (WTF *)(std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v141, (WTF::StringImpl *)v91)+ 144);
        v142 -= 144;
      }
      while (v142);
    }
    v143 = v598;
    if (v598)
    {
      v598 = 0;
      LODWORD(v599) = 0;
      WTF::fastFree(v143, v91);
    }
    v144 = v555[0];
    v555[0] = 0;
    v598 = v144;
    v145 = v555[1];
    v555[1] = 0;
    v599 = v145;
    v146 = (WTF::StringImpl **)v556;
    *(_QWORD *)&v556 = 0;
    v147 = v600;
    v600 = v146;
    if (v147)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v147, (WTF::StringImpl *)v91);
    if (HIDWORD(v602))
    {
      v148 = v601;
      v149 = 8 * HIDWORD(v602);
      do
      {
        v150 = *(_DWORD **)v148;
        *(_QWORD *)v148 = 0;
        if (v150)
        {
          if (v150[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v150 + 56))(v150);
          else
            --v150[2];
        }
        v148 = (WTF *)((char *)v148 + 8);
        v149 -= 8;
      }
      while (v149);
    }
    v151 = v601;
    if (v601)
    {
      v601 = 0;
      LODWORD(v602) = 0;
      WTF::fastFree(v151, v91);
    }
    v152 = (WTF *)*((_QWORD *)&v556 + 1);
    *((_QWORD *)&v556 + 1) = 0;
    v601 = v152;
    v153 = *(_QWORD *)v557;
    *(_QWORD *)v557 = 0;
    v602 = v153;
    WebCore::AcceleratedEffectValues::operator=((uint64_t)v603, (uint64_t)&v557[8]);
    std::__optional_destruct_base<WebKit::LayerProperties::AnimationChanges,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555, v154);
    goto LABEL_210;
  }
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 728) = 0;
  std::__optional_destruct_base<WebKit::LayerProperties::AnimationChanges,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v555, v91);
LABEL_510:
  WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)v591);
}

void sub_196C39DBC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::EventRegion,false>::~__optional_destruct_base[abi:sn180100](&STACK[0x380]);
  WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)&STACK[0x4A8]);
  _Unwind_Resume(a1);
}

void sub_196C3A224()
{
  JUMPOUT(0x196C3A21CLL);
}

void WebKit::LayerProperties::~LayerProperties(WebKit::LayerProperties *this)
{
  WebCore::Region *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  v2 = (WebKit::LayerProperties *)((char *)this + 608);
  if (*((_BYTE *)this + 720))
    WebCore::Region::~Region((WebKit::LayerProperties *)((char *)this + 696));
  WebCore::Region::~Region((WebKit::LayerProperties *)((char *)this + 672));
  WebCore::Region::~Region((WebKit::LayerProperties *)((char *)this + 648));
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 632, v3);
  WebCore::Region::~Region(v2);
  v5 = *((_QWORD *)this + 72);
  if ((v5 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v4);
    }
  }
  v6 = *((_QWORD *)this + 71);
  if ((v6 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v4);
    }
  }
  v7 = *((unsigned int *)this + 124);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v7])(&v24, (char *)this + 440);
  *((_DWORD *)this + 124) = -1;
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100]((uint64_t *)this + 53, 0);
  WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::LayerProperties *)((char *)this + 408));
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebKit::LayerProperties *)((char *)this + 104), v8);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v9);
  v11 = (WTF::StringImpl **)*((_QWORD *)this + 10);
  if (v11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v10);
  v13 = (WTF *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v13, v12);
  }
  v14 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    WTF::fastFree(v14, v12);
  v15 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    WTF::fastFree(v15, v12);
  v16 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    WTF::fastFree(v16, v12);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v17 -= 2;
  }
}

void WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties(WebKit::RemoteLayerBackingStoreOrProperties *this)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  v4 = (WTF *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100]((int)v2, v3);
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Region *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::Region **)a1;
    v5 = 24 * v3;
    do
    {
      WebCore::Region::~Region(v4);
      v4 = (WebCore::Region *)(v6 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)a1;
    v7 = 144 * v3;
    do
    {
      v6 = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair(v6, a2) + 144;
      v7 -= 144;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(WebCore::AcceleratedEffectValues *this, void *a2)
{
  void *v3;
  void *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, a2);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v3);
  if (*((_BYTE *)this + 204) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 200));
  if (*((_BYTE *)this + 196) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 192));
  if (*((_BYTE *)this + 188) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 184));
  if (*((_BYTE *)this + 180) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 176));
  if (*((_BYTE *)this + 172) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 168));
  v5 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v4);
  if (*((_BYTE *)this + 108) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 104));
  if (*((_BYTE *)this + 100) == 11)
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 96));
}

uint64_t WebKit::LayerProperties::LayerProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 56) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 60) = v8;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 72) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = a1 + 88;
  *(_DWORD *)(a1 + 76) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 96) = 0;
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_DWORD *)(a1 + 100) = v12;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 104, a2 + 104);
  v13 = *(_OWORD *)(a2 + 352);
  v14 = *(_OWORD *)(a2 + 368);
  v15 = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(v11 + 312) = *(_QWORD *)(a2 + 400);
  *(_OWORD *)(v11 + 296) = v15;
  *(_OWORD *)(v11 + 280) = v14;
  *(_OWORD *)(v11 + 264) = v13;
  v16 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(v11 + 320) = v16;
  v17 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(v11 + 328) = v17;
  v18 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(v11 + 336) = v18;
  std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](v11 + 352, a2 + 440);
  v19 = *(_OWORD *)(a2 + 504);
  v20 = *(_OWORD *)(a2 + 520);
  v21 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 548) = *(_OWORD *)(a2 + 548);
  *(_OWORD *)(a1 + 520) = v20;
  *(_OWORD *)(a1 + 536) = v21;
  *(_OWORD *)(a1 + 504) = v19;
  WebCore::Color::Color();
  WebCore::Color::Color();
  v22 = *(_OWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = v22;
  WebCore::EventRegion::EventRegion(a1 + 608, a2 + 608);
  return a1;
}

void sub_196C3A844(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::AcceleratedEffectValues *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  WTF **v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF::StringImpl *v38;

  if ((*v19 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  if ((*v18 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, a2);
    }
  }
  v28 = *(unsigned int *)(v13 + 496);
  if ((_DWORD)v28 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v28])(&a13, v17);
  *(_DWORD *)(v13 + 496) = -1;
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100]((uint64_t *)(v15 + 336), 0);
  WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::RemoteLayerBackingStoreOrProperties *)(v15 + 320));
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v16, v29);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v30);
  v32 = *(WTF::StringImpl ***)(v13 + 80);
  if (v32)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v31);
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v31);
  v34 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    WTF::fastFree(v34, v33);
  }
  v35 = *(WTF **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v35)
    WTF::fastFree(v35, v33);
  v36 = *(WTF **)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0;
  if (v36)
    WTF::fastFree(v36, v33);
  v37 = *(WTF **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v37)
    WTF::fastFree(v37, v33);
  v38 = *(WTF::StringImpl **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v38 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::EventRegion::EventRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WebCore::Region::Region();
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(v4 + 32) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(v4 + 36) = v5;
  WebCore::Region::Region();
  WebCore::Region::Region();
  std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 88), a2 + 88);
  return a1;
}

void sub_196C3AA28(_Unwind_Exception *a1)
{
  WebCore::Region *v1;
  uint64_t v2;
  WebCore::Region *v3;
  WebCore::Region *v4;
  void *v6;

  WebCore::Region::~Region(v4);
  WebCore::Region::~Region(v3);
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, v6);
  WebCore::Region::~Region(v1);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::Region>(_BYTE *a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t isValid;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  WTF *v11;
  int *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  int v22;
  _OWORD *v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  int v32;
  _OWORD *v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  int v39;
  int v40;
  void *v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  int v61;
  WebCore::Region::Shape *v62;
  char v63;
  _BYTE v64[20];
  char *v65;
  uint64_t v66;
  _BYTE v67[128];
  __int128 *v68;
  uint64_t v69;
  _BYTE v70[256];
  char v71;
  void *__src;
  unint64_t v73;
  _BYTE v74[128];
  __int128 *v75;
  int v76;
  unsigned int v77;
  _BYTE v78[256];
  _BYTE *v79;
  uint64_t v80;
  _BYTE v81[256];
  unsigned __int8 v82;
  _BYTE *v83;
  int v84;
  int v85;
  _BYTE v86[128];
  char v87;
  __int128 v88;
  unsigned __int8 v89;

  isValid = IPC::Decoder::decode<WebCore::IntRect>(a2, (uint64_t)v64);
  v6 = a2[1];
  v7 = (char *)*a2;
  v8 = a2[2] - *a2;
  if (v6 <= v8)
  {
    v44 = 0;
    v45 = 0;
    *a2 = 0;
    a2[1] = 0;
    v46 = a2[3];
    if (v46)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v46 + 16))(v46);
        v45 = *a2;
        v44 = a2[1];
      }
      else
      {
        v44 = 0;
        v45 = 0;
      }
    }
    goto LABEL_74;
  }
  v9 = &v7[v8];
  a2[2] = (unint64_t)(v9 + 1);
  if (!v7)
  {
    v44 = v6;
    v45 = 0;
LABEL_74:
    v6 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v47 = a2[3];
    if (v47)
    {
      if (v44)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v47 + 16))(v47, v45, v44);
        v7 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_75;
  }
  v10 = *v9;
  if (v10 >= 2)
  {
LABEL_75:
    *a2 = 0;
    a2[1] = 0;
    v48 = a2[3];
    if (v48 && v6)
      (*(void (**)(unint64_t, char *))(*(_QWORD *)v48 + 16))(v48, v7);
    LOBYTE(v62) = 0;
    v63 = 0;
    goto LABEL_77;
  }
  if (v10)
  {
    IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>((uint64_t *)a2, (uint64_t)&__src);
    if (!v74[0])
    {
      LOBYTE(v83) = 0;
      v87 = 0;
      v56 = *a2;
      v57 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v58 = a2[3];
      if (v58 && v57)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
LABEL_23:
      v17 = IPC::Decoder::decode<unsigned long long>(a2);
      v2 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(WTF::String const&)::constantValues;
      if (!(_BYTE)v7)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_89;
      }
      v18 = v17;
      __src = v74;
      v73 = 16;
      if (v17 < 0x10000)
      {
        if (v17 >= 0x11)
        {
          v41 = (void *)WTF::fastMalloc((WTF *)(16 * v17));
          LODWORD(v73) = v18;
          __src = v41;
          do
          {
LABEL_27:
            IPC::Decoder::decode<WebCore::Region::Span>((uint64_t)&v88, a2);
            v19 = v89;
            if (!v89)
              goto LABEL_114;
            if (HIDWORD(v73) == (_DWORD)v73)
            {
              WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region::Span>((uint64_t)&__src, (unint64_t)&v88);
            }
            else
            {
              *((_OWORD *)__src + HIDWORD(v73)) = v88;
              ++HIDWORD(v73);
            }
            --v18;
          }
          while (v18);
          v20 = __src;
          v79 = v81;
          v80 = 16;
          v18 = HIDWORD(v73);
          if (__src == v74)
          {
LABEL_32:
            if ((_DWORD)v18)
              memcpy(v81, v74, 16 * v18);
          }
          else
          {
            __src = v74;
            v79 = v20;
            v42 = v73;
            LODWORD(v73) = 16;
            LODWORD(v80) = v42;
          }
        }
        else
        {
          if (v17)
            goto LABEL_27;
          v79 = v81;
          v80 = 16;
        }
        goto LABEL_34;
      }
      while (1)
      {
        IPC::Decoder::decode<WebCore::Region::Span>((uint64_t)&v88, a2);
        v19 = v89;
        if (!v89)
          break;
        if (HIDWORD(v73) == (_DWORD)v73)
        {
          WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region::Span>((uint64_t)&__src, (unint64_t)&v88);
        }
        else
        {
          *((_OWORD *)__src + HIDWORD(v73)) = v88;
          ++HIDWORD(v73);
        }
        if (!--v18)
        {
          WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&__src, (void *)HIDWORD(v73));
          v79 = v81;
          LODWORD(v80) = 16;
          v60 = __src;
          if (__src == v74)
          {
            v18 = HIDWORD(v73);
            goto LABEL_32;
          }
          __src = v74;
          v79 = v60;
          v61 = v73;
          LODWORD(v18) = HIDWORD(v73);
          LODWORD(v73) = 16;
          LODWORD(v80) = v61;
LABEL_34:
          HIDWORD(v73) = 0;
          HIDWORD(v80) = v18;
          v19 = 1;
          v82 = 1;
LABEL_35:
          isValid = (uint64_t)__src;
          if (v74 == __src || __src == 0)
            goto LABEL_40;
          goto LABEL_72;
        }
      }
LABEL_114:
      LOBYTE(v79) = 0;
      v82 = 0;
      goto LABEL_35;
    }
    v12 = (int *)__src;
    v13 = v73;
    v14 = v86;
    v83 = v86;
    v84 = 32;
    v85 = v73;
    if (v73 >= 0x21)
    {
      if (v73 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x196C3B0C8);
      }
      v14 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v73));
      v84 = v13;
      v83 = v14;
    }
    else if (!v73)
    {
LABEL_22:
      v87 = 1;
      goto LABEL_23;
    }
    v15 = 4 * v13;
    do
    {
      v16 = *v12++;
      *v14++ = v16;
      v15 -= 4;
    }
    while (v15);
    goto LABEL_22;
  }
  v62 = 0;
  v63 = 1;
  while (1)
  {
    if (!*a2)
      goto LABEL_61;
    if (!v10)
      break;
    do
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __src = 0;
      LODWORD(v73) = 0;
      isValid = WTF::fastFree((WTF *)isValid, v7);
      v19 = v82;
LABEL_40:
      if (!v19)
      {
LABEL_89:
        v7 = (char *)*a2;
        v59 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        isValid = a2[3];
        if (isValid && v59)
          isValid = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)isValid + 16))(isValid, v7);
      }
      if (!*a2)
      {
        LOBYTE(v65) = 0;
        v71 = 0;
        goto LABEL_51;
      }
    }
    while (!v87 || !v82);
    WebCore::Region::Shape::Shape();
    v65 = v67;
    v66 = 32;
    v7 = (char *)__src;
    if (__src == v74)
    {
      v22 = HIDWORD(v73);
      memcpy(v67, __src, 4 * HIDWORD(v73));
    }
    else
    {
      __src = v74;
      v65 = v7;
      v40 = v73;
      v22 = HIDWORD(v73);
      LODWORD(v73) = 32;
      LODWORD(v66) = v40;
    }
    HIDWORD(v73) = 0;
    HIDWORD(v66) = v22;
    v23 = v70;
    v68 = (__int128 *)v70;
    v69 = v2[171];
    v24 = v75;
    if (v75 == (__int128 *)v78)
    {
      v25 = v77;
      if (v77)
      {
        v26 = 16 * v77;
        do
        {
          v27 = *v24++;
          *v23++ = v27;
          v26 -= 16;
        }
        while (v26);
      }
    }
    else
    {
      v75 = (__int128 *)v78;
      v68 = v24;
      v25 = v77;
      LODWORD(v69) = v76;
    }
    HIDWORD(v69) = v25;
    v71 = 1;
LABEL_51:
    std::__optional_destruct_base<WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v7);
    std::__optional_destruct_base<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83, v28);
    if (v71
      || (v53 = (void *)*a2, v54 = a2[1], *a2 = 0, a2[1] = 0, (v55 = a2[3]) != 0)
      && v54
      && ((*(void (**)(unint64_t, void *))(*(_QWORD *)v55 + 16))(v55, v53), v71))
    {
      v29 = WTF::fastMalloc((WTF *)0x1A0);
      *(_QWORD *)v29 = v29 + 16;
      *(_QWORD *)(v29 + 8) = 32;
      v30 = v65;
      v31 = v67;
      if (v65 == v67)
      {
        v32 = HIDWORD(v66);
        memcpy((void *)(v29 + 16), v67, 4 * HIDWORD(v66));
      }
      else
      {
        v65 = v67;
        *(_QWORD *)v29 = v30;
        v39 = v66;
        LODWORD(v66) = 32;
        *(_DWORD *)(v29 + 8) = v39;
        v32 = HIDWORD(v66);
      }
      HIDWORD(v66) = 0;
      *(_DWORD *)(v29 + 12) = v32;
      v33 = (_OWORD *)(v29 + 160);
      *(_QWORD *)(v29 + 144) = v29 + 160;
      *(_QWORD *)(v29 + 152) = v2[171];
      v34 = v68;
      v35 = (__int128 *)v70;
      if (v68 == (__int128 *)v70)
      {
        if (HIDWORD(v69))
        {
          v36 = 16 * HIDWORD(v69);
          do
          {
            v37 = *v35++;
            *v33++ = v37;
            v36 -= 16;
          }
          while (v36);
        }
      }
      else
      {
        v68 = (__int128 *)v70;
        *(_QWORD *)(v29 + 144) = v34;
        v43 = v69;
        LODWORD(v69) = 16;
        *(_DWORD *)(v29 + 152) = v43;
      }
      v38 = HIDWORD(v69);
      HIDWORD(v69) = 0;
      *(_DWORD *)(v29 + 156) = v38;
      v62 = (WebCore::Region::Shape *)v29;
      v63 = 1;
      isValid = std::__optional_destruct_base<WebCore::Region::Shape,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v31);
      v10 = 0;
    }
    else
    {
      LOBYTE(v62) = 0;
      v63 = 0;
      std::__optional_destruct_base<WebCore::Region::Shape,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v53);
LABEL_77:
      v7 = (char *)*a2;
      v49 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      isValid = a2[3];
      if (isValid && v49)
        isValid = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)isValid + 16))(isValid, v7);
      v10 = 1;
    }
  }
  isValid = (uint64_t)v62;
  if (v62)
  {
    isValid = WebCore::Region::Shape::isValid(v62);
    if ((isValid & 1) == 0 || !*a2)
    {
LABEL_61:
      *a1 = 0;
      a1[24] = 0;
      goto LABEL_12;
    }
  }
  if (!v64[16] || !v63)
    goto LABEL_71;
  WebCore::Region::Region();
  WebCore::Region::Region();
  a1[24] = 1;
  WebCore::Region::~Region((WebCore::Region *)&v65);
LABEL_12:
  if (v63)
  {
    v11 = v62;
    v62 = 0;
    if (v11)
      std::default_delete<WebCore::Region::Shape>::operator()[abi:sn180100]((int)&v62, v11);
  }
  if (!a1[24])
  {
    v50 = *a2;
    v51 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v52 = a2[3];
    if (v52)
    {
      if (v51)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v52 + 16))(v52, v50);
    }
  }
}

uint64_t IPC::Decoder::decode<WebCore::IntRect>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::IntRect,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::create(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  uint64_t result;

  if ((a2 & 0xFE) == 4)
  {
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x360);
    WebKit::PlatformCALayerRemoteTiledBacking::PlatformCALayerRemoteTiledBacking((uint64_t)v8, a2, a3, a4);
  }
  else
  {
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x348);
    WebKit::PlatformCALayerRemote::PlatformCALayerRemote((uint64_t)v8, a2, a3, a4);
  }
  result = WebKit::RemoteLayerTreeContext::layerDidEnterContext(a4, v8, a2);
  *a1 = v8;
  return result;
}

void sub_196C3B328(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::PlatformCALayerRemote(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;

  v8 = (_QWORD *)WebCore::PlatformCALayer::PlatformCALayer();
  v8[7] = 0;
  *v8 = &off_1E34D6898;
  WebKit::LayerProperties::LayerProperties((WebKit::LayerProperties *)(v8 + 8));
  *(_WORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v9 = *(unsigned int **)(a4 + 16);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 832) = v9;
  if (a3 && a2 != 3 && a2 != 9)
  {
    *(float *)(a1 + 612) = (*(float (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3);
    *(int8x16_t *)(a1 + 64) = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x20000uLL));
  }
  return a1;
}

void sub_196C3B42C(_Unwind_Exception *a1, void *a2)
{
  WebCore::PlatformCALayer *v2;
  unsigned int **v3;
  WebKit::LayerProperties *v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;

  v7 = (unsigned int *)*((_QWORD *)v2 + 104);
  *((_QWORD *)v2 + 104) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)v2 + 102);
  if (v10)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, (WTF::StringImpl *)a2);
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  WebKit::LayerProperties::~LayerProperties(v4);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v11);
  WebCore::PlatformCALayer::~PlatformCALayer(v2);
  _Unwind_Resume(a1);
}

void sub_196C3B49C()
{
  JUMPOUT(0x196C3B47CLL);
}

WebKit::LayerProperties *WebKit::LayerProperties::LayerProperties(WebKit::LayerProperties *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 108) = 0;
  *((_BYTE *)this + 196) = 0;
  *((_DWORD *)this + 50) = 0;
  *(_DWORD *)((char *)this + 203) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_DWORD *)((char *)this + 211) = 0;
  *((_BYTE *)this + 216) = 1;
  *((_DWORD *)this + 70) = 0;
  *(_DWORD *)((char *)this + 283) = 0;
  *(_DWORD *)((char *)this + 291) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 74) = 0;
  *(_DWORD *)((char *)this + 299) = 0;
  *((_DWORD *)this + 76) = 0;
  *(_DWORD *)((char *)this + 307) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_BYTE *)this + 316) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_QWORD *)((char *)this + 271) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_QWORD *)((char *)this + 364) = 0x3F0000003F000000;
  *(_QWORD *)((char *)this + 372) = 0;
  *((_DWORD *)this + 99) = 0;
  *(_QWORD *)((char *)this + 380) = 0;
  *(_QWORD *)((char *)this + 388) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)this + 50) = _D1;
  *((_DWORD *)this + 124) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_OWORD *)this + 34) = xmmword_1978CE590;
  *((_DWORD *)this + 140) = 1065353216;
  *(_OWORD *)((char *)this + 568) = xmmword_1978CE5A0;
  *((_QWORD *)this + 73) = 0x1010001000000;
  *((_BYTE *)this + 592) = 1;
  *((_BYTE *)this + 597) = 0;
  *(_DWORD *)((char *)this + 593) = 0;
  *((_WORD *)this + 299) = 1;
  *((_BYTE *)this + 600) = 0;
  WebCore::EventRegion::EventRegion((WebKit::LayerProperties *)((char *)this + 608));
  return this;
}

void sub_196C3B5F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  WebCore::AcceleratedEffectValues *v15;
  WebKit::RemoteLayerBackingStoreOrProperties *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  void *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  v20 = *(_QWORD *)(v13 + 576);
  if ((v20 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, a2);
    }
  }
  if ((*v18 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, a2);
    }
  }
  v21 = *(unsigned int *)(v13 + 496);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v21])(&a13, v13 + 440);
  *(_DWORD *)(v13 + 496) = -1;
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](v17, 0);
  WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties(v16);
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v15, v22);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 88, v23);
  v25 = *(WTF::StringImpl ***)(v13 + 80);
  if (v25)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v24);
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v24);
  v27 = *(WTF **)(v13 + 48);
  if (v27)
  {
    *(_QWORD *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    WTF::fastFree(v27, v26);
  }
  v28 = *(WTF **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v28)
    WTF::fastFree(v28, v26);
  v29 = *(WTF **)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0;
  if (v29)
    WTF::fastFree(v29, v26);
  v30 = *(WTF **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v30)
    WTF::fastFree(v30, v26);
  v31 = *(WTF::StringImpl **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v31 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeContext::layerDidEnterContext(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int *v6;
  _BYTE v7[24];
  __int128 v8;
  __int128 v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *((_OWORD *)a2 + 1);
  v11 = 0;
  v12 = 0;
  v14 = 0;
  v9 = 0uLL;
  v10 = 0;
  (*(void (**)(unsigned int *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a2 + 880))(a2, &v9, a1, a3);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::add<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t *)(a1 + 32), &v8, &v9, (uint64_t)v7);
  v6 = a2;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>((uint64_t *)(a1 + 56), &v8, &v6, (uint64_t)v7);
  if (v14 != -1)
    return ((uint64_t (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[v14])(v7, &v13);
  return result;
}

void sub_196C3B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix_0[a25])(&a10, &a23);
  _Unwind_Resume(exception_object);
}

__n128 WebKit::PlatformCALayerRemote::populateCreationProperties(__n128 *a1, __n128 *a2, uint64_t a3, unsigned __int8 a4)
{
  __n128 result;

  result = a1[1];
  *a2 = result;
  a2[1].n128_u8[0] = a4;
  return result;
}

unsigned int *WTF::GenericHashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::PlatformCALayerRemote*>(unsigned int **a1, unsigned int *a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  v2 = a1;
  if (a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 14, (uint64_t)a2);
    v3 = (unsigned int *)*((_QWORD *)a2 + 7);
    if (v3)
    {
      do
        v8 = __ldaxr(v3);
      while (__stlxr(v8 + 1, v3));
    }
    v2 = a1;
  }
  else
  {
    v3 = 0;
  }
  result = *v2;
  *v2 = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::FloatPoint3D>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = IPC::Decoder::decode<float>(a1);
  v3 = IPC::Decoder::decode<float>(a1);
  v4 = IPC::Decoder::decode<float>(a1);
  if (*a1)
  {
    if ((v2 & 0xFF00000000) != 0 && (v3 & 0xFF00000000) != 0 && (v4 & 0xFF00000000) != 0)
      return v2 | ((unint64_t)v3 << 32);
    __break(1u);
  }
  LODWORD(v2) = 0;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = a1[3];
  if (v7)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    LODWORD(v2) = 0;
  }
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t IPC::Decoder::decode<WebCore::Region::Span>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  BOOL v8;

  v4 = IPC::Decoder::decode<unsigned int>(a2);
  result = IPC::Decoder::decode<unsigned long long>(a2);
  if (*a2)
  {
    if ((v4 & 0xFF00000000) != 0 && v6)
    {
      *(_DWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = result;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

unint64_t IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v5)
    goto LABEL_14;
  if (!result)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    goto LABEL_11;
  }
  if (result >> 62)
    goto LABEL_14;
  v6 = a1[1];
  v7 = *a1;
  v8 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  v9 = 4 * result;
  if (v6 < v8 || v6 - v8 < v9)
  {
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v6)
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 16))(result);
    goto LABEL_14;
  }
  v11 = v7 + v8;
  a1[2] = v11 + v9;
  if (!v7)
  {
LABEL_14:
    v12 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_12;
  }
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = result;
LABEL_11:
  v12 = 1;
LABEL_12:
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::PlatformCALayerRemoteTiledBacking(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  WebCore::TileController *v5;
  int v6;

  *(_QWORD *)WebKit::PlatformCALayerRemote::PlatformCALayerRemote(a1, a2, a3, a4) = &off_1E34F1C58;
  WTF::fastMalloc((WTF *)0x158);
  v5 = (WebCore::TileController *)WebCore::TileController::TileController();
  *(_QWORD *)(a1 + 840) = v5;
  *(_OWORD *)(a1 + 848) = 0u;
  WebCore::TileController::contentsScale(v5);
  if (*(_BYTE *)(a1 + 12) != 3)
  {
    *(_DWORD *)(a1 + 612) = v6;
    *(int8x16_t *)(a1 + 64) = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x20000uLL));
    WebKit::PlatformCALayerRemote::updateBackingStore((WebKit::PlatformCALayerRemote *)a1);
  }
  return a1;
}

float WebCore::GraphicsLayerClient::deviceScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 1.0;
}

WebCore::Length *IPC::Decoder::decode<WebCore::AcceleratedEffectValues>(_BYTE *a1, unint64_t *a2)
{
  WebCore::Length *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::decode(a1, a2);
  if (!a1[248])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WebCore::Length *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::Length *)(*(uint64_t (**)(WebCore::Length *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C3BC2C(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::AcceleratedEffectValues *v2;

  if (*((_BYTE *)v2 + 248))
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkCache::updateFileModificationTimeIfNeeded(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WTF::WallTime *v3;
  const WTF::String *v4;
  double v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v5 = WebKit::NetworkCache::fileTimes(this, a2);
  if (v5 == v6)
    return WTF::FileSystemImpl::updateFileModificationTime(this, v4);
  v8 = v6;
  result = WTF::WallTime::now(v3);
  if (v9 - v8 >= 3600.0)
    return WTF::FileSystemImpl::updateFileModificationTime(this, v4);
  return result;
}

double WebKit::NetworkCache::fileTimes(WebKit::NetworkCache *this, const WTF::String *a2)
{
  const char *v2;
  void *v3;
  int v4;
  double result;
  WTF *v6;
  stat v7;

  WTF::FileSystemImpl::fileSystemRepresentation(this, a2);
  if (v6)
    v2 = (char *)v6 + 16;
  else
    v2 = 0;
  v4 = stat(v2, &v7);
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v3);
    else
      --*(_DWORD *)v6;
  }
  result = (double)v7.st_birthtimespec.tv_sec;
  if (v4)
    return 0.0;
  return result;
}

WKWebProcessBundleParameters *WebKit::InjectedBundle::bundleParameters(WebKit::InjectedBundle *this)
{
  WKWebProcessBundleParameters *result;
  WKWebProcessBundleParameters *v3;
  const void *v4;

  result = (WKWebProcessBundleParameters *)*((_QWORD *)this + 6);
  if (!result)
  {
    v3 = [WKWebProcessBundleParameters alloc];
    result = -[WKWebProcessBundleParameters initWithDictionary:](v3, "initWithDictionary:", MEMORY[0x1E0C9AA70]);
    v4 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = result;
    if (v4)
    {
      CFRelease(v4);
      return (WKWebProcessBundleParameters *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t WebKit::InspectorTargetProxy::identifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 40);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

void WebKit::WebLocalFrameLoaderClient::userAgent(WebKit::WebFrame **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WebKit::WebFrame::page(this[2]);
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WebKit::WebPage::userAgent((WTF::StringImpl **)v5, a2);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    *a2 = 0;
  }
}

WTF::StringImpl *WebKit::WebPage::userAgent@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WebKit::WebPage::platformUserAgent((WebKit::WebPage *)this, &v8);
  result = v8;
  if (v8 && *((_DWORD *)v8 + 1))
  {
    *a2 = v8;
  }
  else
  {
    v7 = this[13];
    if (v7)
      *(_DWORD *)v7 += 2;
    *a2 = v7;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::platformUserAgent@<X0>(WebKit::WebPage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *v8;
  WebCore::Quirks *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = WebCore::Settings::needsSiteSpecificQuirks(*(WebCore::Settings **)(*((_QWORD *)this + 6) + 112));
  if ((result & 1) == 0)
    goto LABEL_5;
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (!v6)
    goto LABEL_5;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_5;
  if (*(_BYTE *)(v7 + 144))
    goto LABEL_5;
  v8 = *(WebCore::Document **)(v7 + 296);
  if (!v8)
    goto LABEL_5;
  result = WebCore::osNameForUserAgent((WebCore *)result);
  if (result)
  {
    result = strcmp((const char *)result, "iPhone OS");
    if (!(_DWORD)result)
      goto LABEL_11;
LABEL_5:
    *a2 = 0;
    return result;
  }
  if ("iPhone OS")
    goto LABEL_5;
LABEL_11:
  v9 = (WebCore::Quirks *)*((_QWORD *)v8 + 86);
  if (!v9)
    v9 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v8);
  result = WebCore::Quirks::shouldAvoidUsingIOS13ForGmail(v9);
  if (!(_DWORD)result)
    goto LABEL_5;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::standardUserAgentWithApplicationName();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return 0;
}

void sub_196C3BFEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v3;

  v1 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return result;
}

uint64_t WebKit::ImageBufferBackendHandleSharing::isImageBufferBackendHandleSharing(WebKit::ImageBufferBackendHandleSharing *this)
{
  return 1;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBackend::toBackendSharing(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
  return (uint64_t)this + 88;
}

uint64_t IPC::StreamServerConnection::startReceivingMessages(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 *v6;
  uint64_t result;
  int v9;
  _BYTE v10[24];
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v6 = (unsigned __int8 *)(a1 + 113);
  if (__ldaxr((unsigned __int8 *)(a1 + 113)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 113);
    goto LABEL_4;
  }
  if (__stxr(1u, v6))
    goto LABEL_3;
LABEL_4:
  result = WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::add<IPC::StreamMessageReceiver&>(a1 + 120, (unsigned __int8 *)v11, a2, (uint64_t)v10);
  v9 = __ldxr(v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

WTF *WebKit::RemoteImageBufferSet::prepareBufferForDisplay(WebKit::RemoteImageBufferSet *this, const WebCore::Region *a2, int a3)
{
  WTF *result;
  uint64_t v7;
  uint64_t v8;
  const FloatRect *v9;
  uint64_t v10;
  IntSize v11;
  char v12;
  uint64_t v13;
  const WebCore::IntRect *m_location;
  uint64_t v15;
  WebCore::FloatRect *v16;
  const FloatRect *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  FloatRect *v32;
  uint64_t v33;
  FloatRect v34;
  _QWORD v35[2];
  WTF *v36[2];
  _BYTE v37[80];
  IntRect v38;
  uint64_t v39;
  FloatRect v40;
  FloatRect v41;
  FloatRect v42;
  _QWORD v43[2];
  FloatRect v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  result = (WTF *)*((_QWORD *)this + 5);
  if (result)
  {
    v7 = *((_QWORD *)this + 9);
    v43[0] = 0;
    v43[1] = v7;
    v8 = (*(uint64_t (**)(WTF *))(*(_QWORD *)result + 16))(result);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 448))(v8);
    v42 = (FloatRect)0;
    v10 = *((_QWORD *)this + 8);
    if (v10 && *((_QWORD *)this + 5) != v10)
    {
      if (*((_BYTE *)this + 116))
      {
        v38 = *(IntRect *)((char *)this + 100);
      }
      else
      {
        v38.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v43, v9);
        v38.m_size = v11;
      }
      WebCore::Region::Region((WebCore::Region *)v36, &v38);
      v12 = WebCore::Region::contains(a2, (const WebCore::Region *)v36);
      WebCore::Region::~Region((WebCore::Region *)v36);
      if ((v12 & 1) == 0)
      {
        WebCore::Region::Region((WebCore::Region *)v36, &v38);
        WebCore::Region::subtract();
        v40 = *(FloatRect *)v36;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v41, (const WebCore::IntRect *)&v40);
        v44 = v41;
        WebCore::FloatRect::intersect((WebCore::FloatRect *)&v44, (const WebCore::FloatRect *)v43);
        v42 = v44;
        if (v44.m_size.m_width > 0.0 && v44.m_size.m_height > 0.0)
        {
          v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
          (*(void (**)(uint64_t, _QWORD, FloatRect *, FloatRect *, uint64_t))(*(_QWORD *)v30 + 384))(v30, *((_QWORD *)this + 8), &v42, &v42, 4385);
        }
        WebCore::Region::~Region((WebCore::Region *)v36);
      }
    }
    WebCore::Region::rects(a2);
    v41 = *(FloatRect *)a2;
    if (v38.m_size.m_height > 5u
      || (v13 = WebCore::Region::totalArea(a2),
          (float)((float)((float)SLODWORD(v41.m_size.m_width) * 0.75) * (float)SLODWORD(v41.m_size.m_height)) < (float)(unint64_t)v13))
    {
      WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v38, 0);
      if (v38.m_size.m_height == v38.m_size.m_width)
        WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect&>((uint64_t)&v38, (unint64_t)&v41);
      else
        *(FloatRect *)(*(_QWORD *)&v38.m_location + 16 * v38.m_size.m_height++) = v41;
    }
    v36[0] = (WTF *)v37;
    v36[1] = (WTF *)5;
    if (v38.m_size.m_height)
    {
      m_location = (const WebCore::IntRect *)v38.m_location;
      v15 = 16 * v38.m_size.m_height;
      do
      {
        v16 = (WebCore::FloatRect *)WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v44, m_location);
        WebCore::FloatRect::scale(v16, *((float *)this + 21), *((float *)this + 21));
        v35[0] = WebCore::enclosingIntRect((WebCore *)&v44, v17);
        v35[1] = v18;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v40, (const WebCore::IntRect *)v35);
        v44 = v40;
        WebCore::FloatRect::scale((WebCore::FloatRect *)&v44, 1.0 / *((float *)this + 21), 1.0 / *((float *)this + 21));
        if (HIDWORD(v36[1]) == LODWORD(v36[1]))
        {
          WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>((uint64_t)v36, (unint64_t)&v44);
        }
        else
        {
          *((FloatRect *)v36[0] + HIDWORD(v36[1])) = v44;
          ++HIDWORD(v36[1]);
        }
        if (WebCore::FloatRect::intersects((WebCore::FloatRect *)&v42, (const WebCore::FloatRect *)&v44))
          *((_BYTE *)this + 97) = 0;
        m_location = (const WebCore::IntRect *)((char *)m_location + 16);
        v15 -= 16;
      }
      while (v15);
      if (HIDWORD(v36[1]) == 1)
      {
        (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v8 + 456))(v8, v36[0]);
        goto LABEL_20;
      }
      v45 = 0;
      if (HIDWORD(v36[1]))
      {
        v32 = (FloatRect *)v36[0];
        v33 = 16 * HIDWORD(v36[1]);
        do
        {
          v34 = *v32++;
          v40 = v34;
          WebCore::Path::addRect((WebCore::Path *)&v44, &v40);
          v33 -= 16;
        }
        while (v33);
      }
    }
    else
    {
      v45 = 0;
    }
    (*(void (**)(uint64_t, FloatRect *, uint64_t))(*(_QWORD *)v8 + 496))(v8, &v44, 1);
    if (v45 != -1)
      ((void (*)(FloatRect *, FloatSize *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v45])(&v40, &v44.m_size);
LABEL_20:
    if (a3 && !*((_BYTE *)this + 97))
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 280))(v8, v43);
    v20 = *((unsigned __int8 *)this + 116);
    *(_OWORD *)((char *)this + 100) = *(_OWORD *)a2;
    if (!v20)
      *((_BYTE *)this + 116) = 1;
    v21 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (!v21)
      goto LABEL_32;
    v22 = *(_QWORD *)(v21 + 8);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
LABEL_27:
      v24 = *(_QWORD *)(v22 + 8);
      v25 = v24 - 1;
      *(_QWORD *)(v22 + 8) = v24 - 1;
      if (v24 == 1)
      {
        v31 = *(_QWORD *)(v22 + 16);
        v26 = *(_QWORD *)(v22 + 24);
        *(_QWORD *)(v22 + 24) = 0;
        v27 = v31 != 0;
      }
      else
      {
        v26 = 0;
        v27 = 1;
      }
      v28 = __ldxr((unsigned __int8 *)v22);
      if (v28 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
          goto LABEL_31;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_31:
      if (!v25)
      {
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        if (!v27)
          WTF::fastFree((WTF *)v22, v19);
      }
LABEL_32:
      *((_BYTE *)this + 97) = 0;
      v29 = v36[0];
      if (v37 != (_BYTE *)v36[0] && v36[0])
      {
        v36[0] = 0;
        LODWORD(v36[1]) = 0;
        WTF::fastFree(v29, v19);
      }
      result = (WTF *)v38.m_location;
      if (&v39 != (uint64_t *)v38.m_location)
      {
        if (v38.m_location)
        {
          v38.m_location = 0;
          v38.m_size.m_width = 0;
          return (WTF *)WTF::fastFree(result, v19);
        }
      }
      return result;
    }
    MEMORY[0x19AEABB3C](v22);
    goto LABEL_27;
  }
  if (*((_BYTE *)this + 116))
    *((_BYTE *)this + 116) = 0;
  return result;
}

unsigned int *WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  __int128 v7;
  unsigned int *v8;

  if (result[2] > (unint64_t)a2)
  {
    v2 = (uint64_t)result;
    v3 = result[3];
    if (v3 > (unint64_t)a2)
    {
      result[3] = a2;
      LODWORD(v3) = (_DWORD)a2;
    }
    result = *(unsigned int **)result;
    v4 = *(unsigned int **)v2;
    if (a2)
    {
      v8 = *(unsigned int **)v2;
      WTF::VectorBuffer<WebCore::IntRect,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v2, (unint64_t)a2);
      v4 = *(unsigned int **)v2;
      if ((_DWORD)v3 && v4 != v8)
      {
        v5 = 16 * v3;
        v6 = v8;
        do
        {
          v7 = *(_OWORD *)v6;
          v6 += 4;
          *(_OWORD *)v4 = v7;
          v4 += 4;
          v5 -= 16;
        }
        while (v5);
        v4 = *(unsigned int **)v2;
      }
      result = v8;
    }
    if ((unsigned int *)(v2 + 16) != result && result)
    {
      if (v4 == result)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      v4 = *(unsigned int **)v2;
    }
    if (!v4)
    {
      *(_QWORD *)v2 = v2 + 16;
      *(_DWORD *)(v2 + 8) = 1;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::BufferIdentifierSet,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2 + 2);
  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2 + 4);
}

BOOL WebKit::isSmallLayerBacking(uint64_t a1)
{
  unint64_t v2;
  _BOOL8 result;
  unint64_t v4;
  unint64_t v5;

  v2 = WebCore::ImageBuffer::calculateBackendSize((WebCore::ImageBuffer *)a1, *(FloatSize *)a1, *(float *)(a1 + 8));
  result = 0;
  v4 = HIDWORD(v2);
  if ((v2 & 0x80000000) != 0)
    LODWORD(v2) = -(int)v2;
  if ((v4 & 0x80000000) != 0)
    LODWORD(v4) = -(int)v4;
  v5 = v2 * (unint64_t)v4;
  if (*(unsigned __int8 *)(a1 + 25) - 5 >= 0xFFFFFFFE
    && (v5 & 0xFFFFFFFF00000000) == 0
    && v5 <= 0x1000)
  {
    return *(unsigned __int8 *)(a1 + 24) < 2u;
  }
  return result;
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBackend::create@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  WebCore::IOSurface *v5;
  _QWORD *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  void *v10;
  WebCore::IOSurface *v11;
  CGContext *cf;
  WebCore::IOSurface *v13;
  CGRect v14;

  result = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize();
  if ((int)result < 1 || result <= 0)
    goto LABEL_12;
  WebCore::IOSurface::nameForRenderingPurpose();
  if ((unint64_t)*(char *)(a1 + 24) >= 4)
  {
    result = 74;
    __break(0xC471u);
    return result;
  }
  result = WebCore::IOSurface::create();
  if (!v13)
  {
LABEL_12:
    *a2 = 0;
    return result;
  }
  if (WebCore::ProcessIdentity::operator BOOL())
    WebCore::IOSurface::setOwnershipIdentity();
  WebCore::IOSurface::createPlatformContext(v13);
  if (cf)
  {
    WebCore::FloatRect::operator CGRect();
    CGContextClearRect(cf, v14);
    bmalloc::api::isoAllocate();
    v5 = v13;
    v13 = 0;
    v11 = v5;
    v6 = (_QWORD *)WebCore::ImageBufferIOSurfaceBackend::ImageBufferIOSurfaceBackend();
    *v6 = off_1E34E5D28;
    v6[11] = &unk_1E34E5E08;
    *a2 = v6;
    CFRelease(cf);
    WebCore::IOSurface::~IOSurface(v11);
    WTF::fastFree(v7, v8);
  }
  else
  {
    *a2 = 0;
  }
  result = (uint64_t)v13;
  if (v13)
  {
    WebCore::IOSurface::~IOSurface(v13);
    return WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[64];
  int v8;
  char v9;
  __int128 v10;
  _BYTE v11[32];
  __int128 v12;
  char v13;
  __int128 v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  _BYTE v23[64];
  int v24;
  char v25;
  char v26;
  char v27;

  IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, (uint64_t)v23);
  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v20, a1);
  IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v17, a1);
  result = IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v14, a1);
  if (!*a1)
    goto LABEL_15;
  if (!v26
    || (result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)v7, (uint64_t)v23), !v22)|| (v10 = v20, v11[0] = v21, !v19)|| (*(_OWORD *)&v11[8] = v17, v11[24] = v18, !v16))
  {
    __break(1u);
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 152) = 0;
    goto LABEL_9;
  }
  v12 = v14;
  v13 = v15;
  result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v7);
  v5 = v12;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v11[16];
  *(_OWORD *)(a2 + 128) = v5;
  *(_BYTE *)(a2 + 144) = v13;
  v6 = *(_OWORD *)v11;
  *(_OWORD *)(a2 + 80) = v10;
  *(_OWORD *)(a2 + 96) = v6;
  *(_BYTE *)(a2 + 152) = 1;
  if (v9 && v8 != -1)
    result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v8]((int)&v27, (WTF::MachSendRight *)v7);
LABEL_9:
  if (v26 && v25 && v24 != -1)
    return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v24]((int)v7, (WTF::MachSendRight *)v23);
  return result;
}

void sub_196C3CAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  uint64_t v20;
  BOOL v22;
  uint64_t v23;

  if (a20 && a18 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a18](v20 - 33, (WTF::MachSendRight *)&a10);
  if (*(_BYTE *)(v20 - 48))
    v22 = *(_BYTE *)(v20 - 56) == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = *(unsigned int *)(v20 - 64);
    if ((_DWORD)v23 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v23]((int)&a10, (WTF::MachSendRight *)(v20 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = a2[1];
  v3 = *a2;
  v4 = a2[2] - *a2;
  if (v2 <= v4)
  {
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      v40 = a2;
      v45 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v3);
        a2 = v40;
        result = v45;
        v18 = *v40;
        v17 = v40[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_21;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  v6 = v3 + v4 + 1;
  a2[2] = v6;
  if (v3)
  {
    v7 = *v5;
    if (v7 >= 2)
      goto LABEL_22;
    if (!v7)
    {
      *(_BYTE *)result = 0;
      *(_BYTE *)(result + 16) = 0;
      goto LABEL_18;
    }
    v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v8 && v2 - v8 > 7)
    {
      v11 = v3 + v8 + 8;
      v10 = *(_QWORD *)(v3 + v8);
      a2[2] = v11;
      if (v10 - 1 < 0xFFFFFFFFFFFFFFFELL)
      {
        v12 = 0;
        goto LABEL_12;
      }
      v10 = v2;
      v22 = v3;
    }
    else
    {
      v10 = 0;
      v22 = 0;
      *a2 = 0;
      a2[1] = 0;
      v23 = a2[3];
      if (v23)
      {
        v47 = result;
        v32 = a2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v3);
        v10 = 0;
        v34 = *v32;
        v33 = v32[1];
        v35 = v32[3];
        *v32 = 0;
        v32[1] = 0;
        v22 = 0;
        if (v35)
        {
          a2 = v32;
          result = v47;
          if (v33)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 16))(v35, v34, v33, 0);
            v3 = *v32;
            if (*v32)
            {
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
            v22 = 0;
            a2 = v32;
            result = v47;
            v10 = v32[1];
          }
        }
        else
        {
          a2 = v32;
          result = v47;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v3 = a2[3];
    if (v3)
    {
      v41 = a2;
      v46 = result;
      if (!v10)
      {
        v2 = 0;
        v3 = 0;
        v12 = 1;
        goto LABEL_12;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 16))(v3, v22, v10);
      v10 = 0;
      a2 = v41;
      result = v46;
      v3 = *v41;
      v2 = v41[1];
    }
    else
    {
      v2 = 0;
      v10 = 0;
    }
    v12 = 1;
LABEL_12:
    v13 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 < v13 || v2 - v13 <= 3)
    {
      v24 = 0;
      v25 = 0;
      *a2 = 0;
      a2[1] = 0;
      v15 = (_DWORD *)a2[3];
      if (v15)
      {
LABEL_51:
        v37 = v12;
        v42 = a2;
        v48 = result;
        if (v2)
        {
          (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v3);
          a2 = v42;
          result = v48;
          v25 = *v42;
          v24 = v42[1];
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
        v12 = v37;
      }
    }
    else
    {
      v14 = (int *)((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v15 = v14 + 1;
      a2[2] = v14 + 1;
      if (v3)
      {
        if (!v12)
        {
          v16 = *v14;
          *(_QWORD *)result = v10;
          *(_DWORD *)(result + 8) = v16;
          *(_BYTE *)(result + 16) = 1;
LABEL_18:
          *(_BYTE *)(result + 24) = 1;
          return result;
        }
        goto LABEL_50;
      }
      v24 = v2;
      v25 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (!v26 || !v24)
      goto LABEL_31;
    v36 = v12;
    v43 = result;
    v29 = a2;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v25, v24);
    v38 = v29;
    if (!*v29)
    {
      a2 = v29;
      result = v43;
      v30 = v29[1];
      v31 = v29[3];
      *v29 = 0;
      v29[1] = 0;
      if (v31 && v30)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 0);
        goto LABEL_45;
      }
      goto LABEL_31;
    }
    v3 = v36;
    __break(1u);
  }
  v17 = v2;
  v18 = v3;
LABEL_21:
  v2 = 0;
  v3 = 0;
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20)
  {
    v39 = a2;
    v44 = result;
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
      a2 = v39;
      result = v44;
      v3 = *v39;
      v2 = v39[1];
    }
    else
    {
      v2 = 0;
      v3 = 0;
    }
  }
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v2)
  {
    v38 = a2;
    v43 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v3);
LABEL_45:
    a2 = v38;
    result = v43;
  }
LABEL_31:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  v28 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v27)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28);
  }
  return result;
}

__n128 WebKit::RemoteLayerBackingStoreProperties::setBackendHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  _BYTE v8[64];
  int v9;
  char v10;
  char v11;

  std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)v8, a2);
  if (*(_BYTE *)(a2 + 72))
  {
    v4 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v4 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v4]((int)&v11, (WTF::MachSendRight *)a2);
    *(_DWORD *)(a2 + 64) = -1;
    *(_BYTE *)(a2 + 72) = 0;
  }
  std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>((unsigned int *)a1, (uint64_t)v8);
  if (v10 && v9 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v9]((int)&v11, (WTF::MachSendRight *)v8);
  v5 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = v5;
  v6 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = v6;
  result = *(__n128 *)(a2 + 128);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 144);
  *(__n128 *)(a1 + 152) = result;
  return result;
}

void sub_196C3CFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20)
{
  uint64_t v20;

  if (a20)
  {
    if (a18 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[a18](v20 - 17, (WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setBounds(WebCore::TileController **this, const WebCore::FloatRect *a2)
{
  WebKit::PlatformCALayerRemote::setBounds((WebKit::PlatformCALayerRemote *)this, a2);
  return WebCore::TileController::tileCacheLayerBoundsChanged(this[105]);
}

void WebKit::PlatformCALayerRemote::setBounds(WebKit::PlatformCALayerRemote *this, const WebCore::FloatRect *a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(float *)a2 == *((float *)this + 110) && *((float *)a2 + 1) == *((float *)this + 111);
  if (!v2
    || (*((float *)a2 + 2) == *((float *)this + 112) ? (v3 = *((float *)a2 + 3) == *((float *)this + 113)) : (v3 = 0),
        !v3))
  {
    *(_OWORD *)((char *)this + 440) = *(_OWORD *)a2;
    v4 = *((_QWORD *)this + 8);
    v5 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = v4 | 0x100;
    *((_QWORD *)this + 9) = v5 | 0x100;
    if (*((_BYTE *)this + 648))
    {
      *((_QWORD *)this + 8) = v4 | 0x800100;
      *((_QWORD *)this + 9) = v5 | 0x800100;
    }
    WebKit::PlatformCALayerRemote::updateBackingStore(this);
  }
}

void WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebProcess *v17;
  os_unfair_lock_s *v18;
  const void *v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  CFTypeRef v32;
  WebKit::WebProcess *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  IPC::Encoder *v37;
  char v38[8];
  uint64_t v39;
  CFTypeRef cf;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (v6)
    {
      WebKit::WebFrame::fromCoreFrame(v6, &v35);
      v9 = (CFTypeRef *)v35;
      if (v35)
      {
        v10 = *(_QWORD *)(v35 + 24);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 24);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 8);
              if (v13)
              {
                v14 = *(_QWORD **)(*(_QWORD *)(v13 + 48) + 16);
                if (((*(uint64_t (**)(_QWORD *))(*v14 + 1368))(v14) & 1) == 0)
                {
                  v15 = *(_QWORD *)(v14[2] + 8);
                  if (v15)
                  {
                    CFRetain(*(CFTypeRef *)(v15 - 8));
                    v16 = *a4;
                    *a4 = 0;
                    {
                      v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
                    }
                    else
                    {
                      v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                      v17 = WebKit::WebProcess::WebProcess(v33);
                      WebKit::WebProcess::singleton(void)::process = (uint64_t)v17;
                    }
                    v18 = (os_unfair_lock_s *)*((_QWORD *)v17 + 4);
                    v34 = *(_QWORD *)(v15 + 2104);
                    WebKit::WebFrame::info((WebKit::WebFrame *)v9, (uint64_t)v38);
                    v19 = *(const void **)(a3 + 8);
                    v20 = *(unsigned int *)(a3 + 20);
                    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
                    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v22 = &off_1E34EE2F0;
                    v22[1] = v16;
                    v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
                    v24 = WTF::fastMalloc((WTF *)0x240);
                    *(_WORD *)v24 = 2803;
                    *(_QWORD *)(v24 + 8) = v21;
                    *(_QWORD *)(v24 + 528) = v24 + 16;
                    *(_QWORD *)(v24 + 536) = v24 + 16;
                    *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
                    *(_OWORD *)(v24 + 560) = 0u;
                    IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
                    v37 = (IPC::Encoder *)v24;
                    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v24, &v34);
                    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v24, v38);
                    v25 = *(_QWORD *)(a1 + 40);
                    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v24, 8uLL, 8) = v25;
                    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v24, v19, v20);
                    v36[0] = (uint64_t)v22;
                    v36[1] = v23;
                    IPC::Connection::sendMessageWithAsyncReply(v18, &v37, v36, 0, 0);
                    v27 = v36[0];
                    v36[0] = 0;
                    if (v27)
                      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
                    v28 = v37;
                    v37 = 0;
                    if (v28)
                    {
                      IPC::Encoder::~Encoder(v28, v26);
                      WTF::fastFree(v29, v30);
                    }
                    v31 = v43;
                    v43 = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                    if (v42 != -1)
                      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v42])(v36, &v41);
                    v42 = -1;
                    v32 = cf;
                    cf = 0;
                    if (v32)
                      CFRelease(v32);
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v39);
                    CFRelease(*(CFTypeRef *)(v15 - 8));
                  }
                }
              }
            }
          }
        }
        CFRelease(v9[1]);
      }
    }
  }
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WebKit::WebProcess *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  WebKit::WebProcess *v16;
  IPC::Encoder *v17;
  __int128 v18;

  {
    v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v16);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
  }
  v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = *a3;
  *a3 = 0;
  v18 = *(_OWORD *)a2;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = &off_1E34EFBB8;
  *(_QWORD *)(v8 + 8) = v7;
  *(_OWORD *)(v8 + 16) = v18;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 275;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, a2);
  *(_QWORD *)&v18 = v8;
  *((_QWORD *)&v18 + 1) = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v17, (uint64_t *)&v18, 0, 0);
  v12 = v18;
  *(_QWORD *)&v18 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::entangleLocalPortInThisProcessToRemote(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v5;
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  WebKit::WebProcess *v13;
  IPC::Encoder *v14[3];
  uint64_t v15[2];

  v15[0] = 0;
  v15[1] = 0;
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v14, (uint64_t *)(a1 + 16), a2, v15);
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v5);
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v6) + 24);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 228;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v14[0] = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, a2);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, a3);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)v14, 0, 0);
  result = v14[0];
  v14[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

WTF *WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  WTF *result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _OWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char v32;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v30 = -1640531527;
  v31 = 0;
  v32 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&v30, a3, a3 + 1);
  result = (WTF *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  v12 = result & v9;
  v13 = v8 + 32 * v12;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  if (*(_OWORD *)v13 != 0)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v14 == *a3 && v15 == a3[1])
      {
        v28 = *a2;
        if (*a2)
          v29 = *(unsigned int *)(v28 - 4);
        else
          v29 = 0;
        v25 = 0;
        v24 = v28 + 32 * v29;
        goto LABEL_15;
      }
      if (v14 == -1)
        v26 = (_OWORD *)v13;
      v12 = ((_DWORD)v12 + v27) & v9;
      v13 = v8 + 32 * v12;
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      ++v27;
    }
    while (*(_OWORD *)v13 != 0);
    if (v26)
    {
      *v26 = 0u;
      v26[1] = 0u;
      --*(_DWORD *)(*a2 - 16);
      v13 = (uint64_t)v26;
    }
  }
  *(_OWORD *)v13 = *(_OWORD *)a3;
  v16 = *(_DWORD *)(v13 + 28);
  if (v16)
    WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct(*(WTF **)(v13 + 16), (WTF *)(*(_QWORD *)(v13 + 16) + 24 * v16));
  result = *(WTF **)(v13 + 16);
  if (result)
  {
    *(_QWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = 0;
    result = (WTF *)WTF::fastFree(result, v11);
  }
  v17 = *a4;
  *a4 = 0;
  *(_QWORD *)(v13 + 16) = v17;
  LODWORD(v17) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v13 + 24) = v17;
  LODWORD(v17) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v13 + 28) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_14;
LABEL_25:
    result = (WTF *)WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a2, v13);
    v13 = (uint64_t)result;
    v20 = *a2;
    if (*a2)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_14;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_25;
LABEL_14:
  v24 = v20 + 32 * v23;
  v25 = 1;
LABEL_15:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v25;
  return result;
}

void WebKit::ProcessLauncher::didFinishLaunchingProcess(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  mach_port_name_t v6;
  void *v7;
  mach_port_name_t v8;
  void *object;

  *(_DWORD *)(a1 + 108) = a2;
  *(_BYTE *)(a1 + 104) = 0;
  kdebug_trace();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)a3;
  if (v5)
  {
    v8 = *(_DWORD *)a3;
    v7 = *(void **)(a3 + 8);
    object = v7;
    if (v7)
      os_retain(v7);
    (*(void (**)(uint64_t, uint64_t, mach_port_name_t *))(*(_QWORD *)v5 + 16))(v5, a1, &v8);
    if (object)
      os_release(object);
  }
  else if (v6)
  {
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v6, 1u, -1);
  }
}

unsigned int *WebKit::WebProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  void *v11;
  WebKit::WebsiteDataStore *v12;
  WebKit::NetworkProcessProxy *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  unsigned int *result;
  WTF::WallTime *v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned __int8 **v49;
  unsigned __int8 **v50;
  void *v51;
  const char **v52;
  uint64_t v53;
  WebKit::WebPageProxy *v54;
  uint64_t v55;
  NSObject *v56;
  char *v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int shouldTakeNearSuspendedAssertion;
  int shouldDropNearSuspendedAssertionAfterDelay;
  uint64_t v63;
  int v64;
  void *object;
  WTF::StringImpl *v66;
  const char **v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  _BYTE buf[24];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  v7 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didFinishLaunching:", buf, 0x12u);
  }
  if ((WebKit::isMainThreadOrCheckDisabled((WebKit *)v7) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_105;
  }
  v9 = (unsigned int *)(a1 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v64 = *(_DWORD *)a3;
  v11 = *(void **)(a3 + 8);
  object = v11;
  if (v11)
    os_retain(v11);
  WebKit::AuxiliaryProcessProxy::didFinishLaunching(a1, a2, &v64);
  if (object)
    os_release(object);
  if ((*(_DWORD *)a3 - 1) < 0xFFFFFFFE)
  {
    v12 = *(WebKit::WebsiteDataStore **)(a1 + 752);
    if (v12)
    {
      v13 = (WebKit::NetworkProcessProxy *)WebKit::WebsiteDataStore::networkProcess(v12);
      v14 = (unsigned int *)((char *)v13 + 16);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v13, (WebKit::AuxiliaryProcessProxy *)a1);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
    }
    v16 = *(_QWORD *)(a1 + 512);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
        v18 = v17 - 16;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    v21 = (WTF::WallTime *)CFRetain(*(CFTypeRef *)(v18 + 8));
    if (!*(_BYTE *)(v18 + 336))
    {
      v21 = (WTF::WallTime *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 312) + 48))(*(_QWORD *)(v18 + 312), v18);
      *(_BYTE *)(v18 + 336) = 1;
    }
    if (!*(_BYTE *)(v18 + 440))
    {
LABEL_70:
      v48 = *(_QWORD *)(v18 + 48);
      if (*(_BYTE *)(v48 + 72))
      {
        WebKit::AuxiliaryProcessProxy::protectedConnection(a1, (unsigned __int8 ***)buf);
        v49 = *(unsigned __int8 ***)buf;
        *(_BYTE *)(*(_QWORD *)buf + 96) = 1;
        *(_QWORD *)buf = 0;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v49);
        v48 = *(_QWORD *)(v18 + 48);
      }
      if (*(_BYTE *)(v48 + 73))
      {
        WebKit::AuxiliaryProcessProxy::protectedConnection(a1, (unsigned __int8 ***)buf);
        v50 = *(unsigned __int8 ***)buf;
        *(_BYTE *)(*(_QWORD *)buf + 97) = 1;
        *(_QWORD *)buf = 0;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v50);
      }
      WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)&v67);
      if (v68)
      {
        v52 = v67;
        v53 = 8 * v68;
        do
        {
          v54 = (WebKit::WebPageProxy *)*v52;
          v55 = *((_QWORD *)*v52 + 4);
          if (*(_BYTE *)(v55 + 2560))
          {
            v56 = qword_1ECE71618;
            if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT))
            {
              WebKit::MediaCapability::environmentIdentifier((id *)(v55 + 2480), (uint64_t *)&v66);
              WTF::String::utf8();
              if (v69)
                v57 = (char *)v69 + 16;
              else
                v57 = 0;
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v18;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v57;
              _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::processDidFinishLaunching[envID=%{public}s]: updating media capability", buf, 0x16u);
              v59 = v69;
              v69 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 1)
                  WTF::fastFree(v59, v58);
                else
                  --*(_DWORD *)v59;
              }
              v60 = v66;
              v66 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v54 = (WebKit::WebPageProxy *)*v52;
            }
            WebKit::WebPageProxy::updateMediaCapability(v54);
          }
          ++v52;
          v53 -= 8;
        }
        while (v53);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v51);
        if (!v18)
          goto LABEL_96;
      }
      else
      {
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v51);
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_96:
      WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
      shouldTakeNearSuspendedAssertion = WebKit::WebProcessProxy::shouldTakeNearSuspendedAssertion((WebKit::WebProcessProxy *)a1);
      WebKit::ProcessThrottler::setShouldTakeNearSuspendedAssertion((unsigned int *)(a1 + 200), shouldTakeNearSuspendedAssertion);
      shouldDropNearSuspendedAssertionAfterDelay = WebKit::WebProcessProxy::shouldDropNearSuspendedAssertionAfterDelay((WebKit::WebProcessProxy *)a1);
      WebKit::ProcessThrottler::setShouldDropNearSuspendedAssertionAfterDelay(a1 + 200, shouldDropNearSuspendedAssertionAfterDelay);
      WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded(a1);
      WebKit::WebProcessProxy::enableRemoteInspectorIfNeeded((WebKit::WebProcessProxy *)a1);
      WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks(a1);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(a1 + 16));
    }
    v67 = 0;
    WTF::WallTime::now(v21);
    if (v22 >= 1.84467441e19)
    {
      v23 = -1;
    }
    else if (v22 > 0.0)
    {
      v23 = (unint64_t)v22;
    }
    else
    {
      v23 = 0;
    }
    v24 = *(_QWORD *)(a1 + 136);
    if (v24)
      v25 = *(_DWORD *)(v24 + 108);
    else
      v25 = 0;
    v26 = 0;
    v27 = v23;
    do
    {
      ++v26;
      v28 = v27 > 9;
      v27 /= 0xAuLL;
    }
    while (v28);
    if ((v25 & 0x80000000) != 0)
    {
      v31 = -v25;
      v29 = 1;
      do
      {
        ++v29;
        v32 = v31 >= 0xA;
        v31 /= 0xAu;
      }
      while (v32);
    }
    else
    {
      v29 = 0;
      v30 = v25;
      do
      {
        ++v29;
        v28 = v30 > 9;
        v30 /= 0xAu;
      }
      while (v28);
    }
    if ((v29 & 0x80000000) == 0)
    {
      v33 = __OFADD__(v29, 3);
      v34 = v29 + 3;
      v35 = v33;
      if ((v26 & 0x80000000) == 0 && !v35)
      {
        v33 = __OFADD__(v26, v34);
        v36 = v26 + v34;
        if (!v33)
        {
          v37 = (v36 + 10);
          if (!__OFADD__(v36, 10))
          {
            if (v36 == -10)
            {
              v38 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
LABEL_61:
              v69 = (WTF::StringImpl *)v38;
              WebKit::SandboxExtension::createHandleForTemporaryFile(*(const char ***)(v38 + 8), (const char **)(*(unsigned int *)(v38 + 4) | ((unint64_t)((*(_DWORD *)(v38 + 16) >> 2) & 1) << 32)), 1, (uint64_t)buf);
              if (buf[16])
              {
                v44 = *(WTF::StringImpl **)&buf[8];
                v67 = *(const char ***)buf;
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
                v69 = v44;
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v38, v43);
                else
                  *(_DWORD *)v38 -= 2;
              }
              std::__optional_destruct_base<std::pair<WebKit::SandboxExtensionHandle,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::SandboxExtensionHandle *)buf, v43);
              v45 = *(_QWORD *)(v18 + 448);
              *(_QWORD *)buf = &v67;
              *(_QWORD *)&buf[8] = &v69;
              *(_QWORD *)&buf[16] = v45;
              WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::StartMemorySampler>(a1, (uint64_t)buf);
              v47 = v69;
              v69 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v46);
                else
                  *(_DWORD *)v47 -= 2;
              }
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v67);
              goto LABEL_70;
            }
            if ((v37 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v37 + 20));
              v38 = *(_QWORD *)buf;
              if (*(_QWORD *)buf)
              {
                v39 = 0;
                **(_DWORD **)buf = 2;
                *(_DWORD *)(v38 + 4) = v37;
                *(_QWORD *)(v38 + 20) = *(_QWORD *)"WebProcess";
                *(_QWORD *)(v38 + 8) = v38 + 20;
                *(_DWORD *)(v38 + 16) = 4;
                *(_WORD *)(v38 + 28) = 29555;
                v40 = v23;
                do
                {
                  buf[v39-- + 24] = (v40 % 0xA) | 0x30;
                  v28 = v40 > 9;
                  v40 /= 0xAuLL;
                }
                while (v28);
                if (v39 + 26 <= 25)
                  memcpy((void *)(v38 + 30), &buf[v39 + 25], -v39);
                v41 = 0;
                do
                {
                  ++v41;
                  v28 = v23 > 9;
                  v23 /= 0xAuLL;
                }
                while (v28);
                v42 = v38 + 30 + v41;
                *(_BYTE *)(v42 + 2) = 100;
                *(_WORD *)v42 = 26992;
                *(_DWORD *)buf = v25;
                WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>((unsigned int *)buf, (void *)(v42 + 3));
                goto LABEL_61;
              }
            }
          }
        }
      }
    }
    __break(0xC471u);
LABEL_105:
    JUMPOUT(0x196C3DFDCLL);
  }
  v19 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v63 = *(_QWORD *)(a1 + 136);
    if (v63)
      LODWORD(v63) = *(_DWORD *)(v63 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v63;
    _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "%p - [PID=%i] WebProcessProxy::didFinishLaunching: Invalid connection identifier (web process failed to launch)", buf, 0x12u);
    WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(a1, 5);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(a1 + 16));
  }
  result = WebKit::WebProcessProxy::processDidTerminateOrFailedToLaunch(a1, 5);
  if (a1)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(a1 + 16));
  return result;
}

uint64_t WebKit::ResponsivenessTimer::start(uint64_t this)
{
  uint64_t v1;
  WTF::MonotonicTime *isActive;
  double v3;

  if (!*(_BYTE *)(this + 49))
  {
    v1 = this;
    *(_WORD *)(this + 49) = 1;
    isActive = (WTF::MonotonicTime *)WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 8));
    if ((_DWORD)isActive)
    {
      this = WTF::MonotonicTime::now(isActive);
      *(double *)(v1 + 40) = *(double *)(v1 + 56) + v3;
    }
    else
    {
      *(_QWORD *)(v1 + 40) = 0;
      return WTF::RunLoop::TimerBase::start();
    }
  }
  return this;
}

uint64_t WebKit::NetworkProcessProxy::XPCEventHandler::handleXPCEvent(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::AuxiliaryProcessProxy **v11;
  WebKit::AuxiliaryProcessProxy **v12;
  WebKit::AuxiliaryProcessProxy *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WebKit::NetworkProcessProxy *v17;
  WebKit::AuxiliaryProcessProxy *v18;
  uint64_t v19;
  WebKit::NetworkProcessProxy *v20;
  uint64_t v21;
  unsigned int v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  result = 0;
  if (!a2 || !*(_QWORD *)(v2 + 8))
    return result;
  if (object_getClass(a2) == (Class)MEMORY[0x1E0C81310])
    return 0;
  result = (uint64_t)xpc_dictionary_get_string(a2, "message-name");
  if (!result)
    return result;
  if (!*(_BYTE *)result)
    return 0;
  if (strcmp("xpc-endpoint-launch-services-database-message", (const char *)result))
    return 1;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>::operator=((void **)(v6 + 528), a2);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v21);
  if (v22)
  {
    v8 = v21;
    v9 = v21 + 8 * v22;
    do
    {
      v10 = *(unsigned int *)(*(_QWORD *)v8 + 84);
      if ((_DWORD)v10)
      {
        v11 = *(WebKit::AuxiliaryProcessProxy ***)(*(_QWORD *)v8 + 72);
        v12 = &v11[v10];
        do
        {
          v13 = *v11;
          v14 = (unsigned int *)((char *)*v11 + 16);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
          v16 = *(_QWORD *)(a1 + 16);
          if (v16)
            v17 = *(WebKit::NetworkProcessProxy **)(v16 + 8);
          else
            v17 = 0;
          WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v17, v13);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
          ++v11;
        }
        while (v11 != v12);
      }
      v8 += 8;
    }
    while (v8 != v9);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  {
    if (WebKit::singleton(void)::singleton)
    {
      v18 = *(WebKit::AuxiliaryProcessProxy **)(WebKit::singleton(void)::singleton + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(a1 + 16);
        if (v19)
          v20 = *(WebKit::NetworkProcessProxy **)(v19 + 8);
        else
          v20 = 0;
        WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v20, v18);
      }
    }
    return 1;
  }
  WebKit::singleton(void)::singleton = 0;
  result = 1;
  return result;
}

void sub_196C3E21C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  uint64_t v10;

  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(WebKit::NetworkProcessProxy *this, WebKit::AuxiliaryProcessProxy *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  _xpc_connection_s *v14;
  int v16;
  WebKit::NetworkProcessProxy *v17;
  __int16 v18;
  WebKit::AuxiliaryProcessProxy *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)a2 + 17);
    if (v5 && *(_BYTE *)(v5 + 104))
    {
      v6 = 0;
      v7 = *((_QWORD *)a2 + 18);
    }
    else
    {
      v7 = *((_QWORD *)a2 + 18);
      if (v7)
        v6 = 1;
      else
        v6 = 2;
    }
    v8 = *((_QWORD *)this + 66);
    v16 = 134219008;
    v17 = this;
    v18 = 2048;
    v19 = a2;
    v20 = 1024;
    v21 = v6;
    v22 = 1024;
    v23 = v7 != 0;
    v24 = 2048;
    v25 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::sendXPCEndpointToProcess(%p) state = %d has connection = %d XPC endpoint message = %p", (uint8_t *)&v16, 0x2Cu);
  }
  v9 = *((_QWORD *)a2 + 17);
  if (v9)
  {
    v10 = *(unsigned __int8 *)(v9 + 104);
    v11 = *((_QWORD *)a2 + 18);
    if (v10)
      v12 = 1;
    else
      v12 = v11 == 0;
    if (v12)
      return 0;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 18);
    if (!v11)
      return 0;
  }
  v13 = (void *)*((_QWORD *)this + 66);
  if (!v13)
    return 0;
  v14 = *(_xpc_connection_s **)(v11 + 352);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x196C3E3A4);
  }
  xpc_connection_send_message(v14, v13);
  return 1;
}

void WebKit::NetworkProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  int v8;
  void *object;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v11 = a1;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::didFinishLaunching", buf, 0xCu);
  }
  v8 = *(_DWORD *)a3;
  v7 = *(void **)(a3 + 8);
  object = v7;
  if (v7)
    os_retain(v7);
  WebKit::AuxiliaryProcessProxy::didFinishLaunching(a1, a2, &v8);
  if (object)
    os_release(object);
  if ((*(_DWORD *)a3 - 1) >= 0xFFFFFFFE)
    WebKit::NetworkProcessProxy::networkProcessDidTerminate(a1, (void *)5);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebKit::LaunchGrant::~LaunchGrant((WebKit::LaunchGrant *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

void WebKit::LaunchGrant::~LaunchGrant(WebKit::LaunchGrant *this)
{
  WebKit::ExtensionCapabilityGrant *v1;

  v1 = (WebKit::LaunchGrant *)((char *)this + 8);
  WebKit::ExtensionCapabilityGrant::invalidate((WebKit::LaunchGrant *)((char *)this + 8));
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v1);
}

void sub_196C3E514(_Unwind_Exception *a1)
{
  WebKit::ExtensionCapabilityGrant *v1;

  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::ProcessThrottler::didConnectToProcess(WebKit::ProcessThrottler *this, WebKit::AuxiliaryProcessProxy *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  int v7;
  WebKit::ProcessThrottler *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v7 = 134218240;
    v8 = this;
    v9 = 1024;
    v10 = v4;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::didConnectToProcess", (uint8_t *)&v7, 0x12u);
  }
  if (*((_QWORD *)this + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x196C3E638);
  }
  *((_BYTE *)this + 189) = 1;
  v5 = WebKit::ProcessThrottler::expectedThrottleState(this);
  result = WebKit::ProcessThrottler::setThrottleState((unsigned int *)this, v5);
  if (!*((_QWORD *)this + 3) && (*((_BYTE *)this + 184) || *((_BYTE *)this + 187)))
  {
    __break(0xC471u);
    JUMPOUT(0x196C3E658);
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::unblockAccessibilityServerIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  const char ***v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  __int128 v16[2];
  char v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 681))
    return this;
  v1 = this;
  this = _AXSApplicationAccessibilityEnabled();
  if (!(_DWORD)this)
    return this;
  v2 = *(_QWORD *)(v1 + 136);
  if (!v2 || !*(_DWORD *)(v2 + 108))
    return this;
  if (*(_BYTE *)(v2 + 104))
  {
    v3 = *(_QWORD *)(v1 + 144);
    v14 = 0;
    v15 = 0;
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 144);
    if (!v3)
      return this;
    v14 = 0;
    v15 = 0;
  }
  if (*(_QWORD *)(v3 + 352))
  {
    xpc_connection_get_audit_token();
    v4 = v16[0];
    v18[0] = *(__int128 *)((char *)v16 + 1);
    *(_OWORD *)((char *)v18 + 15) = v16[1];
    LOBYTE(v3) = 1;
    goto LABEL_13;
  }
  LOBYTE(v3) = 0;
LABEL_8:
  v4 = 0;
LABEL_13:
  LOBYTE(v16[0]) = v4;
  *(__int128 *)((char *)v16 + 1) = v18[0];
  v16[1] = *(_OWORD *)((char *)v18 + 15);
  v17 = v3;
  WebKit::SandboxExtension::createHandlesForMachLookup(0, 0, v16, 1, (uint64_t)&v12);
  if (HIDWORD(v15))
  {
    v6 = (const char ***)v14;
    v7 = 8 * HIDWORD(v15);
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v6);
      v6 = (const char ***)(v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = v14;
  if (v14)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    WTF::fastFree(v9, v5);
  }
  v14 = v12;
  v10 = v13;
  v12 = 0;
  v13 = 0;
  v15 = v10;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
  *(_QWORD *)&v16[0] = &v14;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::UnblockServicesRequiredByAccessibility>(v1, (uint64_t *)v16, 0, 0);
  *(_BYTE *)(v1 + 681) = 1;
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v11);
}

void sub_196C3E7E0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebProcessProxy::enableRemoteInspectorIfNeeded(WebKit::WebProcessProxy *this)
{
  IPC::Encoder *result;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  char v9;
  IPC::Encoder *v10;

  result = (IPC::Encoder *)CFPreferencesGetAppIntegerValue(CFSTR("RemoteInspectorEnabled"), CFSTR("com.apple.webinspectord"), 0);
  if (result)
  {
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 2585;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v10 = (IPC::Encoder *)v3;
    LOBYTE(v8) = 0;
    v9 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v10, 0, (uint64_t)&v8, 1);
    if (v9)
    {
      v5 = v8;
      v8 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    result = v10;
    v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      return (IPC::Encoder *)WTF::fastFree(v6, v7);
    }
  }
  return result;
}

void sub_196C3E8D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GPUProcessProxy::didFinishLaunching(WebKit::AuxiliaryProcessProxy *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  WebKit::NetworkProcessProxy *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  WebKit::WebProcessPool **v14;
  uint64_t v15;
  WebKit::WebProcessPool *v16;
  WebKit::WebProcessPool **v17;
  unsigned int v18;
  int v19;
  void *object;

  v19 = *(_DWORD *)a3;
  v6 = *(void **)(a3 + 8);
  object = v6;
  if (v6)
    os_retain(v6);
  WebKit::AuxiliaryProcessProxy::didFinishLaunching((uint64_t)a1, a2, &v19);
  if (object)
    os_release(object);
  if ((*(_DWORD *)a3 - 1) >= 0xFFFFFFFE)
  {
    WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)a1, 5u);
  }
  else
  {
    {
      v8 = WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
      if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
      {
        do
          v9 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v9 + 1, (unsigned int *)v8));
        v10 = *(WebKit::NetworkProcessProxy **)(v8 + 8);
        if (v10)
          WebKit::NetworkProcessProxy::sendXPCEndpointToProcess(v10, a1);
        do
        {
          v11 = __ldaxr((unsigned int *)v8);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v8));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((WTF *)v8, v7);
        }
      }
    }
    else
    {
      WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
    }
    WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks((uint64_t)a1);
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v17);
    if (v18)
    {
      v14 = v17;
      v15 = 8 * v18;
      do
      {
        v16 = *v14++;
        WebKit::WebProcessPool::gpuProcessDidFinishLaunching(v16);
        v15 -= 8;
      }
      while (v15);
    }
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v13);
    WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(a1);
  }
}

uint64_t WebKit::WebProcessPool::gpuProcessDidFinishLaunching(WebKit::WebProcessPool *this)
{
  void *v1;
  WebKit::WebProcessProxy **v2;
  WebKit::WebProcessProxy **v3;
  WebKit::WebProcessProxy *v4;
  unsigned int *v5;
  unsigned int v6;
  WebKit::WebProcessProxy **v8;
  int v9;

  WTF::Vector<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v8, (uint64_t)this + 72);
  if (v9)
  {
    v2 = v8;
    v3 = &v8[v9];
    do
    {
      v4 = *v2;
      v5 = (unsigned int *)((char *)*v2 + 16);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      WebKit::WebProcessProxy::gpuProcessDidFinishLaunching(v4);
      if (v4)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
      ++v2;
    }
    while (v2 != v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
}

uint64_t WebKit::WebProcessProxy::gpuProcessDidFinishLaunching(WebKit::WebProcessProxy *this)
{
  void *v1;
  CFTypeRef **v2;
  uint64_t v3;
  CFTypeRef *v4;
  CFTypeRef **v6;
  unsigned int v7;

  WebKit::WebProcessProxy::pages(this, (uint64_t)&v6);
  if (v7)
  {
    v2 = v6;
    v3 = 8 * v7;
    do
    {
      v4 = *v2++;
      CFRetain(v4[1]);
      WebKit::WebPageProxy::gpuProcessDidFinishLaunching((WebKit::WebPageProxy *)v4);
      CFRelease(v4[1]);
      v3 -= 8;
    }
    while (v3);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v1);
}

void WebKit::WebPageProxy::gpuProcessDidFinishLaunching(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint8_t buf[4];
  WebKit::WebPageProxy *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 592))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  v4 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v4 + 2560))
  {
    v5 = qword_1ECE71618;
    if (os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (id *)(v4 + 2480);
      v7 = *(_QWORD *)(v4 + 744);
      v8 = *(_QWORD *)(v4 + 1896);
      v9 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
      if (v9)
        v10 = *(_DWORD *)(v9 + 108);
      else
        v10 = 0;
      WebKit::MediaCapability::environmentIdentifier(v6, (uint64_t *)&v15);
      WTF::String::utf8();
      if (v16)
        v11 = (char *)v16 + 16;
      else
        v11 = 0;
      *(_DWORD *)buf = 134219010;
      v18 = this;
      v19 = 2048;
      v20 = v7;
      v21 = 2048;
      v22 = v8;
      v23 = 1024;
      v24 = v10;
      v25 = 2082;
      v26 = v11;
      _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::gpuProcessDidFinishLaunching[envID=%{public}s]: updating media capability", buf, 0x30u);
      v13 = v16;
      v16 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v12);
        else
          --*(_DWORD *)v13;
      }
      v14 = v15;
      v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    WebKit::WebPageProxy::updateMediaCapability(this);
  }
}

uint64_t WebKit::PageClientImplCocoa::gpuProcessDidFinishLaunching(id *this)
{
  id *v1;

  v1 = this + 2;
  objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_gpuProcessIdentifier"));
  return objc_msgSend(objc_loadWeak(v1), "didChangeValueForKey:", CFSTR("_gpuProcessIdentifier"));
}

void WebKit::AuxiliaryProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, int *a3)
{
  double v6;
  double v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  WTF::RunLoop *v34;
  IPC::Connection *v35;
  uint64_t v36;
  unsigned __int8 **v37;
  unsigned int *v38;
  unsigned int v39;
  void *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned __int8 **v51;
  uint64_t v52;
  uint64_t v53[2];
  _QWORD v54[2];
  int v55;
  void *v56;
  unsigned __int8 **v57;
  _BYTE buf[12];
  _BYTE v59[10];
  __int16 v60;
  double v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v7 = v6 - *(double *)(a1 + 192);
  if (v7 > 1.0)
  {
    v8 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_FAULT))
    {
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v52;
      *(_WORD *)v59 = 2048;
      *(_QWORD *)&v59[2] = a1;
      v60 = 2048;
      v61 = v7;
      _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, "%s process (%p) took %f seconds to launch", buf, 0x20u);
    }
  }
  if ((*a3 - 1) <= 0xFFFFFFFD)
  {
    v55 = *a3;
    v9 = (void *)*((_QWORD *)a3 + 1);
    v56 = v9;
    if (v9)
    {
      os_retain(v9);
      IPC::Connection::createServerConnection((uint64_t)&v55, (mach_port_context_t *)buf);
      v57 = *(unsigned __int8 ***)buf;
      *(_QWORD *)buf = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
      os_release(v9);
    }
    else
    {
      IPC::Connection::createServerConnection((uint64_t)&v55, (mach_port_context_t *)buf);
      v57 = *(unsigned __int8 ***)buf;
      *(_QWORD *)buf = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
    }
    WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::copyRef(&v57, (unsigned __int8 ***)buf);
    v10 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v11 = *(unsigned __int8 ***)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v10;
    if (v11)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v11);
      v12 = *(unsigned __int8 ***)buf;
      *(_QWORD *)buf = 0;
      if (v12)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v12);
    }
    {
      v13 = WebKit::connectionToProcessMap(void)::map;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
      if (WebKit::connectionToProcessMap(void)::map)
        goto LABEL_14;
    }
    else
    {
      WebKit::connectionToProcessMap(void)::map = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand();
    v13 = WebKit::connectionToProcessMap(void)::map;
    if (!WebKit::connectionToProcessMap(void)::map)
    {
      v15 = 0;
LABEL_15:
      v16 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = (_QWORD *)(v13 + 16 * v19);
      v21 = *v20;
      if (*v20)
      {
        v22 = 0;
        v23 = 1;
        while (v21 != v14)
        {
          if (v21 == -1)
            v22 = v20;
          v19 = (v19 + v23) & v15;
          v20 = (_QWORD *)(v13 + 16 * v19);
          v21 = *v20;
          ++v23;
          if (!*v20)
          {
            if (v22)
            {
              *v22 = 0;
              v22[1] = 0;
              --*(_DWORD *)(v13 - 16);
              v20 = v22;
            }
            goto LABEL_23;
          }
        }
        goto LABEL_38;
      }
LABEL_23:
      *v20 = v14;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      v25 = *(unsigned int **)(a1 + 8);
      if (v25)
      {
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
      }
      v27 = (unsigned int *)v20[1];
      v20[1] = v25;
      if (v27)
      {
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v24);
        }
      }
      if (WebKit::connectionToProcessMap(void)::map)
        v30 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) = v30;
      if (WebKit::connectionToProcessMap(void)::map)
        v31 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 16) + v31);
      v33 = *(unsigned int *)(WebKit::connectionToProcessMap(void)::map - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_38;
      }
      else if (3 * v33 > 4 * v32)
      {
LABEL_38:
        v34 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)a1 + 184))(a1, v57);
        v35 = (IPC::Connection *)v57;
        v36 = WTF::RunLoop::current(v34);
        IPC::Connection::open(v35, a1 + 32, v36);
        v37 = v57;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
        v38 = *(unsigned int **)(a1 + 8);
        if (v38)
        {
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
        v41 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v41 = &off_1E34CF990;
        *((_QWORD *)v41 + 1) = v38;
        v42 = v37[6];
        v37[6] = v41;
        if (v42)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v42 + 8))(v42);
        v43 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)buf = v43;
        v44 = *(unsigned int *)(a1 + 132);
        *(_DWORD *)&buf[8] = *(_DWORD *)(a1 + 128);
        *(_DWORD *)v59 = v44;
        v54[0] = 0;
        *(_QWORD *)(a1 + 120) = 0;
        v54[1] = 0;
        *(_QWORD *)(a1 + 128) = 0;
        WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v40);
        if ((_DWORD)v44)
        {
          v46 = 40 * v44;
          do
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v43))
            {
              if (*(_BYTE *)(v43 + 32))
              {
                v47 = (os_unfair_lock_s *)v57;
                v48 = *(_QWORD *)(v43 + 16);
                *(_QWORD *)(v43 + 16) = 0;
                v53[0] = v48;
                v53[1] = *(_QWORD *)(v43 + 24);
                IPC::Connection::sendMessageWithAsyncReply(v47, (IPC::Encoder **)v43, v53, *(_BYTE *)(v43 + 8), 0);
                v49 = v53[0];
                v53[0] = 0;
                if (v49)
                  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
              }
              else
              {
                IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)v43, *(_BYTE *)(v43 + 8), 0);
              }
            }
            v43 += 40;
            v46 -= 40;
          }
          while (v46);
        }
        WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v45);
        WebKit::ProcessThrottler::didConnectToProcess((WebKit::ProcessThrottler *)(a1 + 200), (WebKit::AuxiliaryProcessProxy *)a1);
        if (a2)
        {
          v50 = *(unsigned int **)(a2 + 32);
          *(_QWORD *)(a2 + 32) = 0;
          if (v50)
            WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v50);
        }
        v51 = v57;
        v57 = 0;
        if (v51)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v51);
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand();
      goto LABEL_38;
    }
LABEL_14:
    v15 = *(_DWORD *)(v13 - 8);
    goto LABEL_15;
  }
}

uint64_t IPC::Connection::sendMessageWithAsyncReply(os_unfair_lock_s *a1, IPC::Encoder **a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::RunLoop *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a3[1];
  v21 = v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(*a2, &v21);
  IPC::Connection::addAsyncReplyHandler((uint64_t)a1, a3);
  v11 = IPC::Connection::sendMessageImpl((uint64_t)a1, (uint64_t *)a2, a4, a5);
  if ((_DWORD)v11)
  {
    IPC::Connection::takeAsyncReplyHandler(a1, v10, &v20);
    if (v20)
    {
      v14 = (unsigned int *)(WTF::RunLoop::main(v13) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v16 = v20;
      v20 = 0;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = &off_1E351EE20;
      v17[1] = v16;
      v19 = v17;
      WTF::RunLoop::dispatch();
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v14);
      v18 = v20;
      v20 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  return v11;
}

void IPC::Connection::addAsyncReplyHandler(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  _BYTE v5[24];

  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(IPC::Decoder *)>>((uint64_t *)(a1 + 296), a2 + 1, a2, (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::shouldSendPendingMessage()
{
  return 1;
}

uint64_t WebKit::WebProcessProxy::shouldSendPendingMessage(WebKit::WebProcessProxy *a1, unsigned __int16 **a2)
{
  uint64_t v3;
  int v4;
  const void *v5;
  WTF *v6;
  void *v7;
  WebKit::WebBackForwardListItem *v8;
  char v9;
  char v10;
  IPC::Decoder *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int i;
  int v18;
  BOOL v19;
  int v20;
  CFTypeRef *v21;
  WTF::StringImpl *v22;
  const void *v23;
  WTF *v24;
  void *v25;
  unint64_t v26;
  char v27;
  CFTypeRef *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  IPC::Decoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  IPC::Decoder *v41;
  uint64_t v42;
  uint64_t v43;
  IPC::Decoder *v44;
  WebKit::WebBackForwardListItem *v45;
  char v46;
  uint64_t *v47;
  CFTypeRef *v48;
  WTF::StringImpl *v49[5];
  char v50;
  IPC::Decoder *v51;
  uint64_t v52;
  _QWORD v53[4];
  uint64_t v54;
  const char **v55;
  char v56;
  const char **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t)*a2;
  v4 = **a2;
  if (v4 == 2244)
  {
    v23 = *(const void **)(v3 + 528);
    v24 = *(WTF **)(v3 + 544);
    v52 = 0;
    v53[0] = 0;
    IPC::Decoder::create(v24, v23, &v52, &v51);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v25);
    if (v51)
    {
      IPC::Decoder::decode<WebKit::GoToBackForwardItemParameters>((uint64_t *)v51, (uint64_t)&v52);
      if (v56)
      {
        v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v51);
        if (v27)
        {
          v8 = (WebKit::WebBackForwardListItem *)WebKit::WebProcessProxy::webPage(v26, (uint64_t *)&v48);
          v28 = v48;
          if (v48)
          {
            v10 = v56;
            if (!v56)
              goto LABEL_53;
            v29 = WebKit::WebBackForwardListItem::allItems(v8);
            v30 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v29, v53);
            if (v30)
            {
              v31 = v30;
              CFRetain(*(CFTypeRef *)(v30 + 8));
              v8 = (WebKit::WebBackForwardListItem *)WTF::URL::URL((uint64_t)v49, (WTF::StringImpl **)(v31 + 56));
              v10 = v56;
              if (!v56)
                goto LABEL_53;
              WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle((WebKit::WebPageProxy *)v28, a1, (const WTF::URL *)v49, (const WTF::URL *)(v31 + 344), &v55, 1);
              v33 = v49[0];
              v49[0] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v32);
                else
                  *(_DWORD *)v33 -= 2;
              }
              CFRelease(*(CFTypeRef *)(v31 + 8));
            }
            CFRelease(v28[1]);
          }
          v10 = v56;
          if (!v56)
            goto LABEL_53;
          v49[0] = (WTF::StringImpl *)&v52;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GoToBackForwardItem>((uint64_t)a1, (uint64_t **)v49, *((_QWORD *)v51 + 8), 0);
        }
      }
      std::__optional_destruct_base<WebKit::GoToBackForwardItemParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
LABEL_49:
      v35 = v51;
      v51 = 0;
      if (v35)
      {
        IPC::Decoder::~Decoder(v35);
        WTF::fastFree(v36, v37);
      }
    }
  }
  else
  {
    if (v4 != 2273)
      return 1;
    v5 = *(const void **)(v3 + 528);
    v6 = *(WTF **)(v3 + 544);
    v52 = 0;
    v53[0] = 0;
    IPC::Decoder::create(v6, v5, &v52, &v51);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v7);
    if (v51)
    {
      IPC::Decoder::decode<WebKit::LoadParameters>((uint64_t *)v51, &v52);
      IPC::Decoder::decode<WTF::URL>((uint64_t *)v51, v49);
      v8 = (WebKit::WebBackForwardListItem *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v51);
      v10 = v9;
      v11 = v51;
      v12 = *((_QWORD *)v51 + 1);
      v13 = *(WTF::StringImpl **)v51;
      v14 = *((_QWORD *)v51 + 2) - *(_QWORD *)v51;
      if (v12 <= v14)
        goto LABEL_54;
      v15 = (unsigned __int8 *)v13 + v14;
      *((_QWORD *)v51 + 2) = v15 + 1;
      if (!v13)
      {
        v45 = v8;
        v46 = v10;
        v38 = v12;
        v39 = 0;
        goto LABEL_55;
      }
      v16 = *v15;
      if (v16 >= 2)
      {
        v41 = v11;
        v45 = v8;
        v46 = v10;
        goto LABEL_57;
      }
      for (i = 1; ; i = 0)
      {
        v18 = v16 ? i : 0;
        if (!v58)
          break;
        v19 = !v10 || v50 == 0;
        v20 = v19 ? 0 : i;
        if (v20 != 1)
          break;
        v8 = (WebKit::WebBackForwardListItem *)WebKit::WebProcessProxy::webPage((uint64_t)v8, (uint64_t *)&v48);
        v21 = v48;
        if (!v48)
          break;
        v10 = v58;
        if (v58)
        {
          v8 = (WebKit::WebBackForwardListItem *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v54);
          v10 = v50;
          if (v50)
          {
            v10 = v58;
            if (v58)
            {
              WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle((WebKit::WebPageProxy *)v21, a1, v8, (const WTF::URL *)v49, &v57, v18);
              v10 = v58;
              if (v58)
              {
                v47 = &v52;
                WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>((uint64_t)a1, (uint64_t *)&v47, *((_QWORD *)v51 + 8), 0);
                CFRelease(v21[1]);
                break;
              }
            }
          }
        }
LABEL_53:
        __break(1u);
LABEL_54:
        v45 = v8;
        v46 = v10;
        v38 = 0;
        v39 = 0;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        v40 = *((_QWORD *)v11 + 3);
        if (v40)
        {
          v44 = v11;
          if (v12)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
            v11 = v44;
            v39 = *(_QWORD *)v44;
            v38 = *((_QWORD *)v44 + 1);
          }
          else
          {
            v38 = 0;
            v39 = 0;
          }
        }
LABEL_55:
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        v41 = v11;
        v42 = *((_QWORD *)v11 + 3);
        if (v42 && v38)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v39, v38);
          v16 = 0;
          v13 = *(WTF::StringImpl **)v41;
          v12 = *((_QWORD *)v41 + 1);
        }
        else
        {
          v12 = 0;
          v13 = 0;
          v16 = 0;
        }
LABEL_57:
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v41 + 1) = 0;
        v43 = *((_QWORD *)v41 + 3);
        if (v43 && v12)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v43 + 16))(v43, v13);
        v8 = v45;
        v10 = v46;
      }
      if (v50)
      {
        v22 = v49[0];
        v49[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v13);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      if (v58)
        WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v52, v13);
      goto LABEL_49;
    }
  }
  return 0;
}

uint64_t WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 40 * v3;
    do
    {
      if (*((_BYTE *)v4 + 32))
      {
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)v4, 0);
      v4 = (WTF *)((char *)v4 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned __int8 ***WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::copyRef@<X0>(unsigned __int8 ***result@<X0>, unsigned __int8 ***a2@<X8>)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v6;

  v3 = *result;
  if (!*result)
    goto LABEL_11;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 ***)MEMORY[0x19AEABB3C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, v4))
    goto LABEL_5;
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 ***)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return result;
}

void WebKit::NetworkProcessProxy::connectionWillOpen(WebKit::NetworkProcessProxy *this, IPC::Connection *a2)
{
  if (WebKit::SecItemShimProxy::singleton(void)::once != -1)
    dispatch_once(&WebKit::SecItemShimProxy::singleton(void)::once, &__block_literal_global_32);
  IPC::Connection::addMessageReceiver((uint64_t)a2, *(_QWORD *)(WebKit::SecItemShimProxy::singleton(void)::proxy + 16) + 32, WebKit::SecItemShimProxy::singleton(void)::proxy, 0x86u, 0);
}

void WebKit::WebProcessProxy::connectionWillOpen(WebKit::WebProcessProxy *this, Connection *a2)
{
  if (!*((_BYTE *)a2 + 100))
    *(_WORD *)((char *)a2 + 99) = 256;
  *((_BYTE *)a2 + 34) = 1;
}

void WebKit::WebChromeClient::didLayout(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 == 1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)v3);
    if (v2)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

uint64_t WebCore::InspectorClient::allowRemoteInspectionToPageDirectly(WebCore::InspectorClient *this)
{
  return 0;
}

uint64_t WebKit::WebProcess::webLoaderStrategy(WebKit::WebProcess *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::postTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t *WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deprecationReportingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deprecationReportingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::secureContextChecksEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::secureContextChecksEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::trackConfigurationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::trackConfigurationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::compositingBordersVisibleKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAuthenticationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visualTranslationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visualTranslationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::userActivationAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::speechRecognitionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::spatialNavigationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::notificationEventEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::notificationEventEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::invokerAttributesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::invokerAttributesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::downloadAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::compressionStreamEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectShowPickerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectShowPickerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::removeBackgroundEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::popoverAttributeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::defaultTextEncodingNameKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssColorContrastEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssColorContrastEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::broadcastChannelEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::viewTransitionsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textInteractionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::showModalDialogEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domAudioSessionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::directoryUploadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::developerExtrasEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dataListElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::windowFocusRestrictedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::visualViewportEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAutosizingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::textAreasAreResizableKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::systemLayoutDirectionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::storageBlockingPolicyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::remotePlaybackEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::permissionsAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::peerConnectionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::customStateSetEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usesEncodingDetectorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::usesBackForwardCacheKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::systemPreviewEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::switchControlEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::siteIsolationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::screenCaptureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sKAttributionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pictographFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passwordEchoDurationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::notificationsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::navigationAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::navigationAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaRecorderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::loadDeferringEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkSanitizerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkSanitizerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inputTypeDateEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::genericCueAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fetchPriorityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::editableLinkBehaviorKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::defaultFixedFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssMotionPathEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::caretBrowsingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::canvasFiltersEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::canvasFiltersEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::appHighlightsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webTransportEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sharedWorkerEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::sansSerifFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::passwordEchoEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::modelElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::minimumZoomFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSessionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaDevicesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::localStorageEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPrefetchEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPrefetchEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::layoutFallbackWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::itpDebugModeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::imageCaptureEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::imageCaptureEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::highlightAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enterKeyHintEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enterKeyHintEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::embedElementEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::allowWebGLInWorkersKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::accessHandleEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webSecurityEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webLocksAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::standardFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaStreamEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaSourceEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreloadEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::declarativeWebPushKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::colorFilterEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::clientBadgeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::clientBadgeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::accentColorEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::vp9DecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::unifiedPDFEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::storageAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::javaScriptEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fullScreenEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fantasyFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::dataDetectorTypesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cursiveFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cssNestingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::coreMathMLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::coreMathMLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webSocketEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::reportingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::reportingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::maxParseDurationKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::maxParseDurationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::maxParseDurationKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::httpEquivEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::beaconAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webShareEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webShareEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLUsingMetalKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLUsingMetalKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webAudioEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serifFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::minimumFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::gamepadsEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fixedFontFamilyKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::domPasteAllowedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::defaultFontSizeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cacheAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::applePayEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::applePayEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::appBadgeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::shapeDetectionKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::shapeDetectionKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pushAPIEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::masonryEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::masonryEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::linkPreconnectKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::linkPreconnectKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGPUEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGiantTilesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGiantTilesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mathMLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cookieEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cookieEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webGLEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webGLEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceHeightKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceHeightKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::deviceWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::deviceWidthKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::standaloneKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::standaloneKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::ftpEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::ftpEnabledKey(void)::key;
}

uint64_t WTF::SuperFastHash::hash(WTF::SuperFastHash *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD *)this;
  if (*((_BYTE *)this + 6))
    v1 = ((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11))
       + (((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11)) >> 17);
  v2 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v3 = (v2 ^ (4 * v2)) + ((v2 ^ (4 * v2)) >> 15);
  v4 = v3 ^ (v3 << 10);
  if (v4)
    return v4;
  else
    return 0x800000;
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::repositionRelatedLayers(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  void *v2;
  uint64_t result;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 51);
  WebCore::FloatPoint::operator CGPoint();
  result = objc_msgSend(v2, "setPosition:");
  v4 = (void *)*((_QWORD *)this + 52);
  if (v4)
  {
    WebCore::FloatPoint::operator CGPoint();
    result = objc_msgSend(v4, "setPosition:");
  }
  v5 = (void *)*((_QWORD *)this + 53);
  if (v5)
  {
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v5, "setPosition:");
  }
  return result;
}

void sub_196C47154(_Unwind_Exception *exception_object, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x196C47144);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = (const void **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        CFRelease(v6);
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSObject  {objcproto14NSSecureCoding}>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  id v5;
  void *v6;
  WKSecureCodingArchivingDelegate *v7;
  uint64_t v8;
  uint64_t (**v9)(void);
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef cf;
  char v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 7;
  v3 = a1[7];
  if (!v3 || !*(_DWORD *)(v3 - 12))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(a1, (uint64_t)&cf);
  if (!v23)
  {
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_36;
  }
  v5 = objc_alloc(MEMORY[0x1E0CB3710]);
  if (!v23)
  {
    __break(1u);
LABEL_47:
    JUMPOUT(0x196C47598);
  }
  v6 = (void *)objc_msgSend(v5, "initForReadingFromData:error:", cf, 0);
  objc_msgSend(v6, "setDecodingFailurePolicy:", 0);
  v7 = objc_alloc_init(WKSecureCodingArchivingDelegate);
  objc_msgSend(v6, "setDelegate:", v7);
  v24[0] = objc_opt_class();
  if (WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, v24)|| (v21 = objc_opt_class(), WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, &v21)))
  {
    v21 = objc_opt_class();
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
    v21 = objc_opt_class();
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
    v21 = objc_opt_class();
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
    v21 = objc_opt_class();
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
    v21 = objc_opt_class();
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
  }
  v24[0] = objc_opt_class();
  if (WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, v24))
  {
    v21 = objc_opt_class();
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
  }
  v8 = PAL::ContactsLibrary((PAL *)1);
  v9 = (uint64_t (**)(void))MEMORY[0x1E0DCE088];
  if (v8)
  {
    v24[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDF40])();
    if (WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, v24)|| (v21 = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFF0])(), WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, &v21))|| (v20 = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFC0])(), WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, &v20)))
    {
      v21 = (*v9)();
      WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
    }
  }
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    if ((*v9)())
    {
      v24[0] = (*v9)();
      if (WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(v4, v24))
      {
        v21 = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFA0])();
        WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v24, v4, &v21);
      }
    }
  }
  v10 = objc_alloc(MEMORY[0x1E0C99E20]);
  v11 = *v4;
  if (*v4)
    LODWORD(v11) = *(_DWORD *)(v11 - 12);
  v12 = (void *)objc_msgSend(v10, "initWithCapacity:", v11);
  v13 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v4);
  v14 = v13;
  v16 = v15;
  if (*v4)
    v17 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
  else
    v17 = 0;
  if ((_QWORD *)v17 != v13)
  {
    do
    {
      objc_msgSend(v12, "addObject:", *v14);
      while (++v14 != v16)
      {
        if ((unint64_t)(*v14 + 1) > 1)
          goto LABEL_27;
      }
      v14 = v16;
LABEL_27:
      ;
    }
    while (v14 != (_QWORD *)v17);
  }
  objc_msgSend(v6, "_enableStrictSecureDecodingMode");
  v18 = (const void *)objc_msgSend(v6, "decodeObjectOfClasses:forKey:", v12, *MEMORY[0x1E0CB2CD0]);
  *(_QWORD *)a2 = v18;
  if (v18)
    CFRetain(v18);
  a2[8] = 1;
  objc_msgSend(v6, "finishDecoding");
  objc_msgSend(v6, "setDelegate:", 0);
  if (v12)
    CFRelease(v12);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
LABEL_36:
  if (v23)
  {
    v19 = cf;
    cf = 0;
    if (v19)
      CFRelease(v19);
  }
}

void sub_196C47644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  const void *v12;
  const void *v13;

  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (a12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

BOOL WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 == *a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 8 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

_QWORD *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_11;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (_QWORD *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_10;
LABEL_22:
    result = WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::expand(a2, v14);
    v14 = result;
    v18 = *a2;
    if (*a2)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_10;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_22;
LABEL_10:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_11:
  *v5 = v14;
  v5[1] = v22;
  *((_BYTE *)v5 + 16) = v23;
  return result;
}

void IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<__CFData const*>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CFData const*>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;
  char v8;

  IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, &cf);
  v4 = *a1;
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    v5 = cf;
    if (cf)
      CFRetain(cf);
    *(_QWORD *)a2 = v5;
    LOBYTE(v4) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v4;
  if (v8)
  {
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
}

void sub_196C47AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCData,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (void *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void *IPC::ArgumentCoder<WebKit::CoreIPCData,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *result;
  uint64_t v5;
  const UInt8 *v6[2];
  char v7;

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v6);
  v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    result = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6[0], (CFIndex)v6[1]);
    *(_QWORD *)a2 = result;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[8] = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  *a1 = 0;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(a1, a2++, (uint64_t)v7);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_196C47C34(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;

  if (*v2)
    WTF::fastFree((WTF *)(*v2 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::expand(v4, v14);
    v14 = result;
    v18 = *v4;
    if (*v4)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_16;
LABEL_11:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_12:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::lookupForReinsert(a1, v12);
        *v13 = *v12;
        if (v12 == a3)
          v11 = v13;
      }
      ++v12;
      --v7;
    }
    while (v7);
    goto LABEL_9;
  }
  result = 0;
  if (v6)
  {
LABEL_9:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v9;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  if (*(_QWORD *)(v2 + 8 * v7))
  {
    v9 = 1;
    do
      v7 = ((_DWORD)v7 + v9++) & v3;
    while (*(_QWORD *)(v2 + 8 * v7));
  }
  return v2 + 8 * v7;
}

_QWORD *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::rehash(a1, v5, a2);
}

uint64_t WebKit::RemoteLayerTreeHost::layerContentsType(WebKit::RemoteLayerTreeHost *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (*(_QWORD *)(v2 + 168)
      || ((v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8)) != 0 ? (v4 = v3 - 16) : (v4 = 0),
          *(_BYTE *)(*(_QWORD *)(v4 + 32) + 1904) == 2))
    {
      LOBYTE(v1) = 0;
    }
    else if (PAL::canLoad_QuartzCore_CAIOSurfaceCreate(this))
    {
      LOBYTE(v1) = 2;
    }
    else
    {
      LOBYTE(v1) = 1;
    }
  }
  return v1;
}

void WebKit::RemoteLayerTreeNode::~RemoteLayerTreeNode(WebKit::RemoteLayerTreeNode *this)
{
  void *v2;
  _DWORD *v3;
  void *v4;
  WTF *v5;
  void *v6;
  void *v7;
  const void *v8;
  const void *v9;

  objc_msgSend(*((id *)this + 5), "setValue:forKey:", 0, CFSTR("WKRemoteLayerTreeNode"));
  v3 = (_DWORD *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 52, v2);
  v5 = (WTF *)*((_QWORD *)this + 24);
  if (v5)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v5, v4);
  }
  if (*((_BYTE *)this + 168))
    WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 144));
  WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 120));
  WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 96));
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v6);
  WebCore::Region::~Region((WebKit::RemoteLayerTreeNode *)((char *)this + 56));
  v8 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    CFRelease(v9);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v7);
}

void sub_196C480D0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  _DWORD *v4;
  void *v5;
  WTF *v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;

  v4 = *(_DWORD **)(v2 + 240);
  *(_QWORD *)(v2 + 240) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 208), a2);
  v6 = *(WTF **)(v2 + 192);
  if (v6)
  {
    *(_QWORD *)(v2 + 192) = 0;
    *(_DWORD *)(v2 + 200) = 0;
    WTF::fastFree(v6, v5);
  }
  if (*(_BYTE *)(v2 + 168))
    WebCore::Region::~Region((WebCore::Region *)(v2 + 144));
  WebCore::Region::~Region((WebCore::Region *)(v2 + 120));
  WebCore::Region::~Region((WebCore::Region *)(v2 + 96));
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 80, v7);
  WebCore::Region::~Region((WebCore::Region *)(v2 + 56));
  v9 = *(const void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v10)
    CFRelease(v10);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v2, v8);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreeHost::threadedAnimationResolutionEnabled(WebKit::RemoteLayerTreeHost *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 40) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 224);
  {
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(void)::key, a3);
}

void WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::moveOverlapping(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  const void *v7;

  v3 = a2;
  if (a1 <= a3)
  {
    if (a2 != a1)
    {
      v5 = (_QWORD *)(a3 + 24 * ((uint64_t)(a2 - a1) / 24) - 8);
      do
      {
        *((_OWORD *)v5 - 1) = *(_OWORD *)(v3 - 24);
        v6 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        *v5 = v6;
        v7 = *(const void **)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v7)
          CFRelease(v7);
        v3 -= 24;
        v5 -= 3;
      }
      while (v3 != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::move(a1, a2, a3);
  }
}

void WebKit::NetworkLoadChecker::~NetworkLoadChecker(WebKit::NetworkLoadChecker *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl ***v6;
  WTF::StringImpl *v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v8;
  WTF::StringImpl *v9;
  const void *v10;
  const void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  v3 = (unsigned int *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl ***)*((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v6)
    WTF::RefCounted<WebKit::NetworkSchemeRegistry>::deref(v6, (WTF::StringImpl *)a2);
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1120, a2);
  v8 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v8)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (const void *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkLoadChecker *)((char *)this + 736), v7);
  v11 = (const void *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoadChecker *)((char *)this + 536));
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v15)
    WebCore::ContentSecurityPolicy::operator delete(v15, 0xF0uLL);
  std::unique_ptr<WebKit::NetworkCORSPreflightChecker>::reset[abi:sn180100]((WebKit::NetworkCORSPreflightChecker **)this + 55, 0);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_BYTE *)this + 288))
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v16);
  v23 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v23)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v23, v16);
  v24 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v24)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v24, v16);
  v25 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, v16);
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v16);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v16);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 144));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 128));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 112));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebKit::NetworkLoadChecker *)((char *)this + 96));
  v29 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v29)
  {
    v30 = v29 + 30;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v29 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    }
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v28);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v34 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v34)
    {
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v28);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (unint64_t *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      v22 = v4;
      v23 = 0;
      goto LABEL_35;
    }
    v9 = *v8;
    v43 = 0;
    v44 = 0;
    if (v9 < 0x10000)
    {
      if (!v9)
      {
        v10 = 0;
        v11 = 0;
        goto LABEL_10;
      }
      LODWORD(v44) = v9;
      v43 = WTF::fastMalloc((WTF *)(16 * v9));
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v39, a2);
        if (!(_BYTE)v41)
          break;
        if (HIDWORD(v44) == (_DWORD)v44)
        {
          WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v43, (unint64_t)&v39);
        }
        else
        {
          v32 = HIDWORD(v44) + 1;
          v33 = v43 + 16 * HIDWORD(v44);
          v34 = v39;
          v39 = 0;
          *(_QWORD *)v33 = v34;
          *(_BYTE *)(v33 + 8) = v40;
          HIDWORD(v44) = v32;
        }
        std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v31);
        if (!--v9)
        {
          v10 = v43;
          v11 = v44;
LABEL_10:
          v43 = 0;
          v44 = 0;
          v36 = v10;
          v37 = v11;
LABEL_11:
          v38 = 1;
          WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
          goto LABEL_12;
        }
      }
      LOBYTE(v36) = 0;
      v38 = 0;
      std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v31);
LABEL_32:
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v17);
      goto LABEL_37;
    }
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v39, a2);
      if (!(_BYTE)v41)
      {
        LOBYTE(v36) = 0;
        v38 = 0;
        goto LABEL_32;
      }
      if (HIDWORD(v44) != (_DWORD)v44)
        break;
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v43, (unint64_t)&v39);
      if ((_BYTE)v41)
        goto LABEL_24;
LABEL_27:
      if (!--v9)
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v43, HIDWORD(v44));
        v36 = v43;
        v35 = v44;
        v43 = 0;
        v44 = 0;
        v37 = v35;
        goto LABEL_11;
      }
    }
    v18 = HIDWORD(v44) + 1;
    v19 = v43 + 16 * HIDWORD(v44);
    v20 = v39;
    v39 = 0;
    *(_QWORD *)v19 = v20;
    *(_BYTE *)(v19 + 8) = v40;
    HIDWORD(v44) = v18;
LABEL_24:
    v21 = v39;
    v39 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    goto LABEL_27;
  }
  while (1)
  {
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v5, v4);
        v23 = *a2;
        v22 = a2[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
LABEL_35:
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25 && v22)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
    LOBYTE(v36) = 0;
    v38 = 0;
LABEL_37:
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28 && v27)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
LABEL_12:
    result = IPC::Decoder::decode<unsigned int>(a2);
    v14 = *a2;
    if (!*a2)
      break;
    v5 = v38;
    if (v38 && (result & 0xFF00000000) != 0)
    {
      v15 = v36;
      v36 = 0;
      v41 = result;
      v42 = 0;
      v39 = 0;
      *(_QWORD *)a1 = v15;
      v40 = 0;
      v16 = v37;
      v37 = 0;
      *(_QWORD *)(a1 + 8) = v16;
      *(_DWORD *)(a1 + 16) = result;
      *(_BYTE *)(a1 + 20) = 0;
      *(_BYTE *)(a1 + 24) = 1;
      result = WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v13);
      goto LABEL_16;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_16:
  if (v38)
    result = WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v13);
  if (!v14)
  {
    v29 = *a2;
    v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v30)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v29);
    }
  }
  return result;
}

void sub_196C48944(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v6);
  _Unwind_Resume(a1);
}

_QWORD *IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;

  result = IPC::Decoder::decode<WTF::String>(a2, &v21);
  if (v22)
  {
    v5 = a2[1];
    v6 = (WTF::StringImpl *)*a2;
    v7 = a2[2] - *a2;
    if (v5 <= v7)
    {
      v10 = 0;
      v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          v11 = *a2;
          v10 = a2[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
      }
    }
    else
    {
      v8 = (unsigned __int8 *)v6 + v7;
      a2[2] = (uint64_t)(v8 + 1);
      if (v6)
      {
        v9 = *v8;
        if (v9 < 2)
        {
          *(_QWORD *)a1 = v21;
          *(_BYTE *)(a1 + 8) = v9 != 0;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_10;
      }
      v10 = v5;
      v11 = 0;
    }
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v6 = (WTF::StringImpl *)*a2;
        v5 = a2[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14, v6);
        v19 = a2[3];
        v6 = (WTF::StringImpl *)*a2;
        v20 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        if (v19)
        {
          if (v20)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v19 + 16))(v19, v6);
        }
      }
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    if (v22)
    {
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v6);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_16;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
LABEL_16:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v16);
  return result;
}

void sub_196C48B3C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;

  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationOptions,false>::~__optional_destruct_base[abi:sn180100](v10, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _BYTE *v4;
  _BYTE *v5;
  WTF *v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  char v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  char v58;
  char v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  char v71;
  unsigned __int8 *v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  char v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  char v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  unint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned int v107;
  char v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  char v112;
  __int128 *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  unsigned __int8 *v118;
  unsigned int v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  int v129;
  unsigned __int8 *v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 *v138;
  unsigned int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  char v150;
  char v151;
  unint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  char v157;
  char v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  char v162;
  char v163;
  WTF *v164;
  WTF *v165;
  const void *v166;
  __int128 v167;
  __int128 v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  CFTypeRef v175;
  CFTypeRef v176;
  WTF *v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::RefCountedBase *v189;
  uint64_t result;
  WTF::StringImpl *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  WTF *v196;
  WTF *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  int v205;
  WTF *v206;
  WTF *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  WTF *v390;
  WTF *v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  char v398;
  unsigned int v399;
  unsigned int v400;
  char v401;
  unsigned int v402;
  char v403;
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  char v409;
  char v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  char v416;
  char v417;
  char v418;
  char v419;
  char v420;
  char v421;
  char v422;
  char v423;
  uint64_t v424;
  unint64_t v425;
  _BYTE *v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  char v438;
  char v439;
  char v440;
  char v441;
  BOOL v442;
  char v443;
  char v444;
  char v445;
  BOOL v446;
  BOOL v447;
  BOOL v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  unsigned int v461;
  int v462;
  int v463;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  unsigned __int16 v465;
  __int128 v466;
  uint64_t v467;
  __int16 v468;
  __int128 v469;
  __int16 v470;
  __int128 v471;
  _BYTE v472[32];
  WTF::StringImpl *v473[5];
  char v474;
  WTF::StringImpl *v475[5];
  char v476;
  __int128 v477;
  uint64_t v478;
  char v479;
  uint64_t v480;
  uint64_t v481;
  char v482;
  uint64_t v483[4];
  char v484;
  __int16 v485;
  __int128 v486;
  char v487;
  __int16 v488;
  __int128 v489;
  char v490;
  WTF::StringImpl *v491[5];
  char v492;
  WTF::StringImpl *v493[5];
  char v494;
  uint64_t v495[2];
  int v496;
  char v497;
  char v498;
  char v499;
  const char **v500;
  char v501;
  char v502;
  _BYTE v503[24];
  char v504;
  WTF::RefCountedBase *v505;
  char v506;
  _BYTE v507[192];
  const void *v508;
  char v509;
  WTF *v510;
  char v511;
  WTF *v512;
  char v513;
  __int128 v514;
  char v515;
  uint64_t v516;
  char v517;
  char v518;
  __int128 v519;
  char v520;
  char v521;
  WTF::StringImpl *v522;
  uint64_t v523;
  int v524;
  char v525;
  __int16 v526;
  __int128 v527;
  __int16 v528;
  __int128 v529;
  char v530;
  char v531;
  WTF *v532;
  unsigned __int8 v533;
  WTF *v534;
  char v535;
  WTF::StringImpl *v536;
  __int128 v537;
  __int128 v538;
  char v539;
  WTF *v540;
  _BYTE v541[32];
  WTF *v542;
  WTF *v543;
  WTF::StringImpl *v544;
  uint64_t v545;
  int v546;
  char v547;
  __int16 v548;
  char v549;
  __int128 v550;
  __int16 v551;
  __int128 v552;
  char v553;
  __int128 v554;
  char v555;
  uint64_t v556;
  char v557;
  __int128 v558;
  uint64_t v559;
  int v560;
  CFTypeRef v561;
  BOOL v562;
  BOOL v563;
  char v564;
  BOOL v565;
  char v566;
  char v567;
  char v568;
  _BYTE v569[2560];
  char v570;
  BOOL v571;
  __int128 v572;
  BOOL v573;
  char v574;
  CFTypeRef cf;
  char v576;
  __int16 v577;
  char v578;
  char v579;
  __int16 v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  char v584;
  char v585;
  char v586;
  char v587;
  _BYTE v588[240];
  char v589;
  uint64_t v590;
  WTF::StringImpl *v591;
  char v592;
  _BYTE v593[2560];
  char v594;
  char v595;
  __int128 v596;
  uint64_t v597;
  char v598;
  uint64_t v599;

  v3 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2, a3);
  v5 = v4;
  v599 = *MEMORY[0x1E0C80C00];
  v6 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
  LOBYTE(v460) = v7;
  v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
  v458 = v9;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v3, (uint64_t)&v514);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v512, v3);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v510, v3);
  v459 = IPC::Decoder::decode<unsigned int>(v3);
  IPC::Decoder::decode<WebCore::ResourceRequest>(v3, (uint64_t)v507);
  v10 = v3[1];
  v11 = *v3;
  v12 = v3[2] - *v3;
  if (v10 <= v12)
  {
    v208 = 0;
    v209 = 0;
    *v3 = 0;
    v3[1] = 0;
    v210 = v3[3];
    if (v210)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v210 + 16))(v210);
        v209 = *v3;
        v208 = v3[1];
      }
      else
      {
        v208 = 0;
        v209 = 0;
      }
    }
    goto LABEL_343;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  v3[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v208 = v10;
    v209 = 0;
LABEL_343:
    v10 = 0;
    v11 = 0;
    *v3 = 0;
    v3[1] = 0;
    v211 = v3[3];
    if (v211)
    {
      if (v208)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v211 + 16))(v211, v209, v208);
        v11 = *v3;
        v10 = v3[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_344;
  }
  v14 = *v13;
  if (v14 < 2)
  {
    v457 = 0;
    v448 = v14 != 0;
    goto LABEL_5;
  }
LABEL_344:
  v212 = 0;
  *v3 = 0;
  v3[1] = 0;
  v213 = v3[3];
  if (v213)
  {
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v213 + 16))(v213, v11);
      v212 = v3[1];
    }
    else
    {
      v212 = 0;
    }
  }
  v214 = *v3;
  *v3 = 0;
  v3[1] = 0;
  v215 = v3[3];
  if (!v215 || !v212)
  {
    v10 = 0;
    v448 = 0;
    v15 = *v3;
    v457 = 1;
LABEL_347:
    *v3 = 0;
    v3[1] = 0;
    v216 = v3[3];
    if (v216)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(v216, v15);
        v217 = *v3;
        v10 = v3[1];
      }
      else
      {
        v217 = 0;
      }
    }
    else
    {
      v217 = 0;
      v10 = 0;
    }
    goto LABEL_349;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v215 + 16))(v215, v214, v212);
  v448 = 0;
  v10 = v3[1];
  v457 = 1;
LABEL_5:
  v15 = *v3;
  v16 = v3[2] - *v3;
  if (v10 <= v16)
    goto LABEL_347;
  v17 = (unsigned __int8 *)(v15 + v16);
  v3[2] = (uint64_t)(v17 + 1);
  if (!v15)
  {
    v217 = 0;
LABEL_349:
    *v3 = 0;
    v3[1] = 0;
    v218 = v3[3];
    if (v218)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v217);
        v15 = *v3;
        v10 = v3[1];
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      v15 = 0;
      v10 = 0;
    }
    goto LABEL_351;
  }
  v18 = *v17;
  if (v18 < 2)
  {
    v456 = 0;
    v447 = v18 != 0;
    goto LABEL_9;
  }
LABEL_351:
  *v3 = 0;
  v3[1] = 0;
  v219 = v3[3];
  if (v219 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v219 + 16))(v219, v15);
  v220 = *v3;
  v221 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v222 = v3[3];
  if (v222 && v221)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 16))(v222, v220);
  v447 = 0;
  v456 = 1;
LABEL_9:
  v465 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(v3);
  v19 = v593;
  v20 = (uint64_t)&v581;
  v21 = v3[1];
  v22 = *v3;
  v23 = v3[2] - *v3;
  if (v21 <= v23)
  {
    v223 = 0;
    v224 = 0;
    *v3 = 0;
    v3[1] = 0;
    v225 = v3[3];
    if (v225)
    {
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v225 + 16))(v225);
        v224 = *v3;
        v223 = v3[1];
      }
      else
      {
        v223 = 0;
        v224 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_355;
  }
  v24 = (unsigned __int8 *)(v22 + v23);
  v3[2] = (uint64_t)(v24 + 1);
  if (!v22)
  {
    v223 = v21;
    v224 = 0;
LABEL_355:
    v21 = 0;
    v22 = 0;
    *v3 = 0;
    v3[1] = 0;
    v226 = v3[3];
    if (v226)
    {
      if (v223)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v226 + 16))(v226, v224, v223);
        v22 = *v3;
        v21 = v3[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_356;
  }
  v25 = *v24;
  if (v25 < 2)
  {
    v455 = 0;
    v446 = v25 != 0;
    goto LABEL_13;
  }
LABEL_356:
  v227 = 0;
  *v3 = 0;
  v3[1] = 0;
  v228 = v3[3];
  if (v228)
  {
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v228 + 16))(v228, v22);
      v227 = v3[1];
    }
    else
    {
      v227 = 0;
    }
    v19 = v593;
    v20 = (uint64_t)&v581;
  }
  v229 = *v3;
  *v3 = 0;
  v3[1] = 0;
  v230 = v3[3];
  if (!v230 || !v227)
  {
    v21 = 0;
    v446 = 0;
    v26 = *v3;
    v455 = 1;
LABEL_359:
    *v3 = 0;
    v3[1] = 0;
    v231 = v3[3];
    if (v231)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v231 + 16))(v231, v26);
        v232 = *v3;
        v21 = v3[1];
      }
      else
      {
        v232 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v232 = 0;
      v21 = 0;
    }
    goto LABEL_361;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v230 + 16))(v230, v229, v227);
  v446 = 0;
  v21 = v3[1];
  v455 = 1;
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_13:
  v26 = *v3;
  v27 = v3[2] - *v3;
  if (v21 <= v27)
    goto LABEL_359;
  v28 = (unsigned __int8 *)(v26 + v27);
  v29 = v26 + v27 + 1;
  v3[2] = v29;
  if (!v26)
  {
    v232 = 0;
LABEL_361:
    *v3 = 0;
    v3[1] = 0;
    v233 = v3[3];
    if (v233)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v233 + 16))(v233, v232);
        v30 = 0;
        v26 = *v3;
        v21 = v3[1];
      }
      else
      {
        v26 = 0;
        v30 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v21 = 0;
      v26 = 0;
      v30 = 0;
    }
    goto LABEL_363;
  }
  v30 = *v28;
  if (v30 < 2)
  {
    v454 = 0;
    v31 = 1;
    goto LABEL_17;
  }
LABEL_363:
  *v3 = 0;
  v3[1] = 0;
  v234 = v3[3];
  if (!v234)
  {
    v445 = 0;
    v235 = 0;
    v26 = 0;
    v454 = 1;
    goto LABEL_365;
  }
  if (!v21)
  {
    v445 = 0;
    v235 = 0;
    v26 = 0;
    v454 = 1;
LABEL_717:
    v19 = v593;
    v20 = (uint64_t)&v581;
    goto LABEL_365;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v234 + 16))(v234, v26);
  v31 = 0;
  v26 = *v3;
  v21 = v3[1];
  v454 = 1;
  v29 = v3[2];
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_17:
  if (!v30)
    v31 = 0;
  v445 = v31;
  v32 = v29 - v26;
  if (v21 <= v32)
  {
    v235 = 0;
    v378 = v3[3];
    *v3 = 0;
    v3[1] = 0;
    if (v378 && v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v378 + 16))(v378);
      v26 = *v3;
      v235 = v3[1];
    }
    else
    {
      v26 = 0;
    }
    goto LABEL_717;
  }
  v33 = (unsigned __int8 *)(v26 + v32);
  v34 = v26 + v32 + 1;
  v3[2] = v34;
  if (!v26)
  {
    v235 = v21;
LABEL_365:
    *v3 = 0;
    v3[1] = 0;
    v236 = v3[3];
    if (v236)
    {
      if (v235)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, v26, v235);
        v35 = 0;
        v26 = *v3;
        v21 = v3[1];
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v35 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v21 = 0;
      v26 = 0;
      v35 = 0;
    }
    goto LABEL_367;
  }
  v35 = *v33;
  if (v35 < 2)
  {
    v453 = 0;
    v36 = 1;
    goto LABEL_23;
  }
LABEL_367:
  *v3 = 0;
  v3[1] = 0;
  v237 = v3[3];
  if (!v237)
  {
    v444 = 0;
    v238 = 0;
    v26 = 0;
    v453 = 1;
    goto LABEL_369;
  }
  if (!v21)
  {
    v444 = 0;
    v238 = 0;
    v26 = 0;
    v453 = 1;
LABEL_713:
    v19 = v593;
    v20 = (uint64_t)&v581;
    goto LABEL_369;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v237 + 16))(v237, v26);
  v36 = 0;
  v26 = *v3;
  v21 = v3[1];
  v453 = 1;
  v34 = v3[2];
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_23:
  if (!v35)
    v36 = 0;
  v444 = v36;
  v37 = v34 - v26;
  if (v21 <= v37)
  {
    v238 = 0;
    v377 = v3[3];
    *v3 = 0;
    v3[1] = 0;
    if (v377 && v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v377 + 16))(v377);
      v26 = *v3;
      v238 = v3[1];
    }
    else
    {
      v26 = 0;
    }
    goto LABEL_713;
  }
  v38 = (unsigned __int8 *)(v26 + v37);
  v3[2] = (uint64_t)(v38 + 1);
  if (!v26)
  {
    v238 = v21;
LABEL_369:
    *v3 = 0;
    v3[1] = 0;
    v239 = v3[3];
    if (v239)
    {
      if (v238)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v239 + 16))(v239, v26, v238);
        v39 = 0;
        v26 = *v3;
        v21 = v3[1];
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v39 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v21 = 0;
      v26 = 0;
      v39 = 0;
    }
    goto LABEL_371;
  }
  v39 = *v38;
  if (v39 < 2)
  {
    v452 = 0;
    v40 = 1;
    goto LABEL_29;
  }
LABEL_371:
  *v3 = 0;
  v3[1] = 0;
  v240 = v3[3];
  if (!v240 || !v21)
  {
    v26 = 0;
    v443 = 0;
    v21 = 0;
    v452 = 1;
LABEL_373:
    *v3 = 0;
    v3[1] = 0;
    v241 = v3[3];
    if (v241)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v241 + 16))(v241, v26);
        v19 = v593;
        v20 = (uint64_t)&v581;
        v242 = *v3;
        v21 = v3[1];
      }
      else
      {
        v242 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    else
    {
      v242 = 0;
      v21 = 0;
    }
    goto LABEL_375;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v240 + 16))(v240, v26);
  v40 = 0;
  v26 = *v3;
  v21 = v3[1];
  v452 = 1;
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_29:
  if (!v39)
    v40 = 0;
  v443 = v40;
  if (v21 <= v3[2] - v26)
    goto LABEL_373;
  v41 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v41 + 1);
  if (!v26)
  {
    v242 = 0;
LABEL_375:
    *v3 = 0;
    v3[1] = 0;
    v243 = v3[3];
    if (v243)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v243 + 16))(v243, v242);
        v19 = v593;
        v20 = (uint64_t)&v581;
        v26 = *v3;
        v21 = v3[1];
      }
      else
      {
        v26 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    else
    {
      v26 = 0;
      v21 = 0;
    }
LABEL_377:
    *v3 = 0;
    v3[1] = 0;
    v244 = v3[3];
    if (v244 && v21)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v244 + 16))(v244, v26);
    goto LABEL_378;
  }
  v42 = *v41;
  if (v42 >= 2)
    goto LABEL_377;
  if (!v42)
  {
    LOBYTE(v581) = 0;
    v587 = 0;
    std::__optional_move_base<WebKit::NavigationActionData,false>::__optional_move_base[abi:sn180100](v593, (uint64_t)&v581);
    goto LABEL_36;
  }
  IPC::Decoder::decode<WebKit::NavigationActionData>(v3, (uint64_t)&v581);
  if (!v587)
  {
LABEL_378:
    v593[0] = 0;
    v595 = 0;
    goto LABEL_38;
  }
  WebKit::NavigationActionData::NavigationActionData((uint64_t)v593, (uint64_t)&v581);
  v594 = 1;
LABEL_36:
  v595 = 1;
  if (v587)
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v581);
LABEL_38:
  if (!v595)
  {
    v245 = *v3;
    v246 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v247 = v3[3];
    if (v247)
    {
      if (v246)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v247 + 16))(v247, v245);
    }
  }
  ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(v3);
  v43 = v3[1];
  v44 = *v3;
  v45 = v3[2] - *v3;
  if (v43 <= v45)
  {
    v248 = 0;
    v249 = 0;
    *v3 = 0;
    v3[1] = 0;
    v250 = v3[3];
    if (v250)
    {
      if (v43)
      {
        v19 = v593;
        (*(void (**)(uint64_t))(*(_QWORD *)v250 + 16))(v250);
        v20 = (uint64_t)&v581;
        v249 = *v3;
        v248 = v3[1];
      }
      else
      {
        v248 = 0;
        v249 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    goto LABEL_383;
  }
  v46 = (unsigned __int8 *)(v44 + v45);
  v3[2] = (uint64_t)(v46 + 1);
  if (!v44)
  {
    v248 = v43;
    v249 = 0;
LABEL_383:
    v43 = 0;
    v44 = 0;
    *v3 = 0;
    v3[1] = 0;
    v251 = v3[3];
    if (v251)
    {
      if (v248)
      {
        v19 = v593;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v251 + 16))(v251, v249, v248);
        v20 = (uint64_t)&v581;
        v44 = *v3;
        v43 = v3[1];
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    goto LABEL_384;
  }
  v47 = *v46;
  if (v47 < 2)
  {
    v451 = 0;
    v442 = v47 != 0;
    goto LABEL_43;
  }
LABEL_384:
  *v3 = 0;
  v3[1] = 0;
  v252 = v3[3];
  if (v252 && v43)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v252 + 16))(v252, v44);
  v253 = *v3;
  v254 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v255 = v3[3];
  if (!v255)
    goto LABEL_386;
  if (v254)
  {
    v19 = v593;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v255 + 16))(v255, v253);
    v20 = (uint64_t)&v581;
LABEL_386:
    v442 = 0;
    v451 = 1;
    goto LABEL_43;
  }
  v442 = 0;
  v451 = 1;
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_43:
  v463 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v3);
  v48 = v3[1];
  v49 = *v3;
  v50 = v3[2] - *v3;
  if (v48 <= v50)
  {
    v256 = 0;
    v257 = 0;
    *v3 = 0;
    v3[1] = 0;
    v258 = v3[3];
    if (v258)
    {
      if (v48)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v258 + 16))(v258);
        v257 = *v3;
        v256 = v3[1];
      }
      else
      {
        v256 = 0;
        v257 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_388;
  }
  v51 = (unsigned __int8 *)(v49 + v50);
  v52 = v49 + v50 + 1;
  v3[2] = v52;
  if (!v49)
  {
    v256 = v48;
    v257 = 0;
LABEL_388:
    *v3 = 0;
    v3[1] = 0;
    v259 = v3[3];
    if (v259)
    {
      if (v256)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v259 + 16))(v259, v257, v256);
        v53 = 0;
        v49 = *v3;
        v48 = v3[1];
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v53 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v53 = 0;
    }
    goto LABEL_390;
  }
  v53 = *v51;
  if (v53 < 2)
  {
    v450 = 0;
    v54 = 1;
    goto LABEL_47;
  }
LABEL_390:
  *v3 = 0;
  v3[1] = 0;
  v260 = v3[3];
  if (!v260)
  {
    v441 = 0;
    v261 = 0;
    v49 = 0;
    v450 = 1;
    goto LABEL_392;
  }
  if (!v48)
  {
    v441 = 0;
    v261 = 0;
    v49 = 0;
    v450 = 1;
LABEL_721:
    v19 = v593;
    v20 = (uint64_t)&v581;
    goto LABEL_392;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v260 + 16))(v260, v49);
  v54 = 0;
  v49 = *v3;
  v48 = v3[1];
  v450 = 1;
  v52 = v3[2];
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_47:
  if (!v53)
    v54 = 0;
  v441 = v54;
  v55 = v52 - v49;
  if (v48 <= v55)
  {
    v261 = 0;
    v379 = v3[3];
    *v3 = 0;
    v3[1] = 0;
    if (v379 && v48)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v379 + 16))(v379);
      v49 = *v3;
      v261 = v3[1];
    }
    else
    {
      v49 = 0;
    }
    goto LABEL_721;
  }
  v56 = (unsigned __int8 *)(v49 + v55);
  v3[2] = (uint64_t)(v56 + 1);
  if (!v49)
  {
    v261 = v48;
LABEL_392:
    *v3 = 0;
    v3[1] = 0;
    v262 = v3[3];
    if (v262)
    {
      if (v261)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v262 + 16))(v262, v49, v261);
        v57 = 0;
        v49 = *v3;
        v48 = v3[1];
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v57 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v57 = 0;
    }
    goto LABEL_394;
  }
  v57 = *v56;
  if (v57 < 2)
  {
    v449 = 0;
    v58 = 1;
    goto LABEL_53;
  }
LABEL_394:
  *v3 = 0;
  v3[1] = 0;
  v263 = v3[3];
  if (v263)
  {
    if (v48)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v263 + 16))(v263, v49);
    v58 = 0;
    v449 = 1;
    v19 = v593;
    v20 = (uint64_t)&v581;
  }
  else
  {
    v58 = 0;
    v449 = 1;
  }
LABEL_53:
  if (!v57)
    v58 = 0;
  v440 = v58;
  v462 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(v3);
  v425 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
  v439 = v59;
  IPC::Decoder::decode<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>(v3, &v505);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v3, (uint64_t)v503);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(v3, (uint64_t)&v500);
  v424 = IPC::Decoder::decode<WTF::MonotonicTime>(v3);
  v438 = v60;
  IPC::Decoder::decode<WebCore::FetchOptions>(v3, (uint64_t)&v590);
  v61 = v3[1];
  v62 = *v3;
  v63 = v3[2] - *v3;
  if (v61 <= v63)
  {
    v264 = 0;
    v265 = 0;
    *v3 = 0;
    v3[1] = 0;
    v266 = v3[3];
    if (v266)
    {
      if (v61)
      {
        v19 = v593;
        (*(void (**)(uint64_t))(*(_QWORD *)v266 + 16))(v266);
        v20 = (uint64_t)&v581;
        v265 = *v3;
        v264 = v3[1];
      }
      else
      {
        v264 = 0;
        v265 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    goto LABEL_397;
  }
  v64 = (unsigned __int8 *)(v62 + v63);
  v3[2] = (uint64_t)(v64 + 1);
  if (!v62)
  {
    v264 = v61;
    v265 = 0;
LABEL_397:
    v61 = 0;
    v62 = 0;
    *v3 = 0;
    v3[1] = 0;
    v267 = v3[3];
    if (v267)
    {
      if (v264)
      {
        v19 = v593;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v267 + 16))(v267, v265, v264);
        v20 = (uint64_t)&v581;
        v62 = *v3;
        v61 = v3[1];
      }
      else
      {
        v61 = 0;
        v62 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    goto LABEL_398;
  }
  v65 = *v64;
  if (v65 >= 2)
  {
LABEL_398:
    *v3 = 0;
    v3[1] = 0;
    v268 = v3[3];
    if (v268 && v61)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v268 + 16))(v268, v62);
    goto LABEL_399;
  }
  if (!v65)
  {
    LOBYTE(v495[0]) = 0;
    v498 = 0;
    v499 = 1;
    goto LABEL_60;
  }
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v581, v3);
  if (v585)
  {
    v193 = v581;
    v581 = 0;
    v495[0] = v193;
    v194 = v582;
    v582 = 0;
    v495[1] = v194;
    v496 = v583;
    v497 = v584;
    v498 = 1;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v581, v192);
    v499 = 1;
    goto LABEL_60;
  }
LABEL_399:
  LOBYTE(v495[0]) = 0;
  v499 = 0;
  v269 = *v3;
  v270 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v271 = v3[3];
  if (v271 && v270)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v271 + 16))(v271, v269);
LABEL_60:
  IPC::Decoder::decode<WTF::URL>(v3, v493);
  IPC::Decoder::decode<WTF::URL>(v3, v491);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v488, v3);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v485, v3);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)v483, v3);
  v66 = v3[1];
  v67 = *v3;
  v68 = v3[2] - *v3;
  if (v66 <= v68)
  {
    v272 = 0;
    v273 = 0;
    *v3 = 0;
    v3[1] = 0;
    v274 = v3[3];
    if (v274)
    {
      if (v66)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v274 + 16))(v274);
        v273 = *v3;
        v272 = v3[1];
      }
      else
      {
        v272 = 0;
        v273 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_403;
  }
  v69 = (unsigned __int8 *)(v67 + v68);
  v3[2] = (uint64_t)(v69 + 1);
  if (!v67)
  {
    v272 = v66;
    v273 = 0;
LABEL_403:
    *v3 = 0;
    v3[1] = 0;
    v275 = v3[3];
    if (v275)
    {
      if (v272)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v275 + 16))(v275, v273, v272);
        v70 = 0;
        v67 = *v3;
        v66 = v3[1];
      }
      else
      {
        v66 = 0;
        v67 = 0;
        v70 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v66 = 0;
      v67 = 0;
      v70 = 0;
    }
    goto LABEL_405;
  }
  v70 = *v69;
  if (v70 < 2)
  {
    v437 = 0;
    v71 = 1;
    goto LABEL_64;
  }
LABEL_405:
  *v3 = 0;
  v3[1] = 0;
  v276 = v3[3];
  if (!v276)
  {
    v67 = 0;
    v423 = 0;
    v66 = 0;
    v437 = 1;
    goto LABEL_407;
  }
  if (!v66)
  {
    v67 = 0;
    v423 = 0;
    v437 = 1;
    v19 = v593;
    v20 = (uint64_t)&v581;
LABEL_407:
    *v3 = 0;
    v3[1] = 0;
    v277 = v3[3];
    if (v277)
    {
      if (v66)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v277 + 16))(v277, v67);
        v278 = *v3;
        v66 = v3[1];
      }
      else
      {
        v278 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v278 = 0;
      v66 = 0;
    }
LABEL_409:
    *v3 = 0;
    v3[1] = 0;
    v279 = v3[3];
    if (v279)
    {
      if (v66)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v279 + 16))(v279, v278);
        v66 = v3[1];
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v66 = 0;
    }
    goto LABEL_411;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v276 + 16))(v276, v67);
  v71 = 0;
  v67 = *v3;
  v66 = v3[1];
  v437 = 1;
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_64:
  if (!v70)
    v71 = 0;
  v423 = v71;
  if (v66 <= v3[2] - v67)
    goto LABEL_407;
  v72 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v72 + 1);
  if (!v67)
  {
    v278 = 0;
    goto LABEL_409;
  }
  v73 = *v72;
  if (v73 < 3)
  {
    v422 = v73;
    v436 = 0;
    goto LABEL_70;
  }
LABEL_411:
  v280 = *v3;
  *v3 = 0;
  v3[1] = 0;
  v281 = v3[3];
  if (!v281 || !v66)
  {
    v66 = 0;
    v422 = 0;
    v74 = (WTF::StringImpl *)*v3;
    v436 = 1;
LABEL_413:
    *v3 = 0;
    v3[1] = 0;
    v282 = v3[3];
    if (v282)
    {
      if (v66)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v282 + 16))(v282, v74);
        v283 = *v3;
        v66 = v3[1];
      }
      else
      {
        v283 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v283 = 0;
      v66 = 0;
    }
    goto LABEL_415;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v281 + 16))(v281, v280);
  v422 = 0;
  v66 = v3[1];
  v436 = 1;
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_70:
  v74 = (WTF::StringImpl *)*v3;
  v75 = v3[2] - *v3;
  if (v66 <= v75)
    goto LABEL_413;
  v76 = (unsigned __int8 *)v74 + v75;
  v3[2] = (uint64_t)(v76 + 1);
  if (!v74)
  {
    v283 = 0;
LABEL_415:
    *v3 = 0;
    v3[1] = 0;
    v284 = v3[3];
    if (v284)
    {
      if (v66)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v284 + 16))(v284, v283);
        v77 = 0;
        v74 = (WTF::StringImpl *)*v3;
        v66 = v3[1];
      }
      else
      {
        v74 = 0;
        v77 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v66 = 0;
      v74 = 0;
      v77 = 0;
    }
    goto LABEL_417;
  }
  v77 = *v76;
  if (v77 < 2)
  {
    v435 = 0;
    v78 = 1;
    goto LABEL_74;
  }
LABEL_417:
  *v3 = 0;
  v3[1] = 0;
  v285 = v3[3];
  if (v285)
  {
    if (v66)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v285 + 16))(v285, v74);
      v78 = 0;
      v74 = (WTF::StringImpl *)*v3;
      v66 = v3[1];
    }
    else
    {
      v74 = 0;
      v78 = 0;
    }
    v435 = 1;
    v19 = v593;
    v20 = (uint64_t)&v581;
  }
  else
  {
    v66 = 0;
    v74 = 0;
    v78 = 0;
    v435 = 1;
  }
LABEL_74:
  if (!v77)
    v78 = 0;
  v421 = v78;
  v79 = ((v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v74;
  if (v66 < v79 || v66 - v79 <= 7)
  {
    v291 = 0;
    v292 = 0;
    *v3 = 0;
    v3[1] = 0;
    v293 = v3[3];
    if (v293)
    {
      if (v66)
      {
        v19 = v593;
        (*(void (**)(uint64_t))(*(_QWORD *)v293 + 16))(v293);
        v20 = (uint64_t)&v581;
        v292 = *v3;
        v291 = v3[1];
      }
      else
      {
        v291 = 0;
        v292 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
  }
  else
  {
    v80 = (unint64_t *)((v3[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    v3[2] = (uint64_t)(v80 + 1);
    if (v74)
    {
      v81 = *v80;
      v582 = 0;
      v581 = 0;
      if (v81 < 0x20000)
      {
        if (!v81)
        {
          v82 = 0;
          v83 = 0;
LABEL_82:
          v581 = 0;
          v480 = v82;
          v582 = 0;
          v481 = v83;
LABEL_83:
          v482 = 1;
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v581, v74);
          goto LABEL_84;
        }
        v204 = WTF::fastMalloc((WTF *)(8 * v81));
        LODWORD(v582) = v81;
        v581 = v204;
        while (1)
        {
          IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v540, v3);
          if (!v541[0])
            goto LABEL_846;
          v205 = HIDWORD(v582);
          if (HIDWORD(v582) != (_DWORD)v582)
            break;
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v581, (unint64_t)&v540);
          if (v541[0])
            goto LABEL_335;
LABEL_337:
          if (!--v81)
          {
            v82 = v581;
            v83 = v582;
            goto LABEL_82;
          }
        }
        v206 = v540;
        v540 = 0;
        *(_QWORD *)(v581 + 8 * HIDWORD(v582)) = v206;
        HIDWORD(v582) = v205 + 1;
LABEL_335:
        v207 = v540;
        v540 = 0;
        if (v207)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v207, v74);
        goto LABEL_337;
      }
      while (1)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v540, v3);
        if (!v541[0])
        {
LABEL_846:
          LOBYTE(v480) = 0;
          v482 = 0;
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v581, v74);
          goto LABEL_427;
        }
        v389 = HIDWORD(v582);
        if (HIDWORD(v582) != (_DWORD)v582)
          break;
        WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v581, (unint64_t)&v540);
        v19 = v593;
        v20 = (uint64_t)&v581;
        if (v541[0])
          goto LABEL_842;
LABEL_844:
        if (!--v81)
        {
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v581, (WTF::StringImpl *)HIDWORD(v582));
          v392 = v581;
          v581 = 0;
          v480 = v392;
          v393 = v582;
          v582 = 0;
          v481 = v393;
          goto LABEL_83;
        }
      }
      v390 = v540;
      v540 = 0;
      *(_QWORD *)(v581 + 8 * HIDWORD(v582)) = v390;
      HIDWORD(v582) = v389 + 1;
LABEL_842:
      v391 = v540;
      v540 = 0;
      if (v391)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v391, v74);
      goto LABEL_844;
    }
    v291 = v66;
    v292 = 0;
  }
  *v3 = 0;
  v3[1] = 0;
  v294 = v3[3];
  if (v294 && v291)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v294 + 16))(v294, v292, v291);
  LOBYTE(v480) = 0;
  v482 = 0;
LABEL_427:
  v295 = *v3;
  v296 = v3[1];
  *v3 = 0;
  v3[1] = 0;
  v297 = v3[3];
  if (v297 && v296)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v297 + 16))(v297, v295);
LABEL_84:
  v84 = v3[1];
  v85 = *v3;
  v86 = v3[2] - *v3;
  if (v84 <= v86)
  {
    v286 = 0;
    v287 = 0;
    *v3 = 0;
    v3[1] = 0;
    v288 = v3[3];
    if (v288)
    {
      if (v84)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v288 + 16))(v288);
        v287 = *v3;
        v286 = v3[1];
      }
      else
      {
        v286 = 0;
        v287 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_420;
  }
  v87 = (unsigned __int8 *)(v85 + v86);
  v3[2] = (uint64_t)(v87 + 1);
  if (!v85)
  {
    v286 = v84;
    v287 = 0;
LABEL_420:
    *v3 = 0;
    v3[1] = 0;
    v289 = v3[3];
    if (v289)
    {
      if (v286)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v289 + 16))(v289, v287, v286);
        v88 = 0;
        v85 = *v3;
        v84 = v3[1];
      }
      else
      {
        v84 = 0;
        v85 = 0;
        v88 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v84 = 0;
      v85 = 0;
      v88 = 0;
    }
    goto LABEL_422;
  }
  v88 = *v87;
  if (v88 < 2)
  {
    v434 = 0;
    v89 = 1;
    goto LABEL_88;
  }
LABEL_422:
  *v3 = 0;
  v3[1] = 0;
  v290 = v3[3];
  if (v290)
  {
    if (v84)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v290 + 16))(v290, v85);
    v89 = 0;
    v434 = 1;
    v19 = v593;
    v20 = (uint64_t)&v581;
  }
  else
  {
    v89 = 0;
    v434 = 1;
  }
LABEL_88:
  if (v88)
    v90 = v89;
  else
    v90 = 0;
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v3, (uint64_t)&v477);
  v91 = v3[1];
  v92 = *v3;
  v93 = v3[2] - *v3;
  v420 = v90;
  if (v91 <= v93)
  {
    v298 = 0;
    v299 = 0;
    *v3 = 0;
    v3[1] = 0;
    v300 = v3[3];
    if (v300)
    {
      if (v91)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v300 + 16))(v300);
        v299 = *v3;
        v298 = v3[1];
      }
      else
      {
        v298 = 0;
        v299 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_431;
  }
  v94 = (unsigned __int8 *)(v92 + v93);
  v3[2] = (uint64_t)(v94 + 1);
  if (!v92)
  {
    v298 = v91;
    v299 = 0;
LABEL_431:
    *v3 = 0;
    v3[1] = 0;
    v301 = v3[3];
    if (v301)
    {
      if (v298)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301 + 16))(v301, v299, v298);
        v95 = 0;
        v92 = *v3;
        v91 = v3[1];
      }
      else
      {
        v91 = 0;
        v92 = 0;
        v95 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v91 = 0;
      v92 = 0;
      v95 = 0;
    }
    goto LABEL_433;
  }
  v95 = *v94;
  if (v95 < 2)
  {
    v433 = 0;
    v96 = 1;
    goto LABEL_95;
  }
LABEL_433:
  *v3 = 0;
  v3[1] = 0;
  v302 = v3[3];
  if (v302)
  {
    if (v91)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v302 + 16))(v302, v92);
    v96 = 0;
    v433 = 1;
    v19 = v593;
    v20 = (uint64_t)&v581;
  }
  else
  {
    v96 = 0;
    v433 = 1;
  }
LABEL_95:
  if (!v95)
    v96 = 0;
  v419 = v96;
  IPC::Decoder::decode<WTF::URL>(v3, v475);
  v97 = v3[1];
  v98 = *v3;
  v99 = v3[2] - *v3;
  if (v97 <= v99)
  {
    v303 = 0;
    v304 = 0;
    *v3 = 0;
    v3[1] = 0;
    v305 = v3[3];
    if (v305)
    {
      if (v97)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v305 + 16))(v305);
        v304 = *v3;
        v303 = v3[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    goto LABEL_436;
  }
  v100 = (unsigned __int8 *)(v98 + v99);
  v101 = v98 + v99 + 1;
  v3[2] = v101;
  if (!v98)
  {
    v303 = v97;
    v304 = 0;
LABEL_436:
    *v3 = 0;
    v3[1] = 0;
    v306 = v3[3];
    if (v306)
    {
      if (v303)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v306 + 16))(v306, v304, v303);
        v102 = 0;
        v98 = *v3;
        v97 = v3[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v102 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v102 = 0;
    }
    goto LABEL_438;
  }
  v102 = *v100;
  if (v102 < 2)
  {
    v432 = 0;
    v103 = 1;
    goto LABEL_101;
  }
LABEL_438:
  *v3 = 0;
  v3[1] = 0;
  v307 = v3[3];
  if (!v307)
  {
    v418 = 0;
    v308 = 0;
    v98 = 0;
    v432 = 1;
    goto LABEL_440;
  }
  if (!v97)
  {
    v418 = 0;
    v308 = 0;
    v98 = 0;
    v432 = 1;
LABEL_729:
    v19 = v593;
    v20 = (uint64_t)&v581;
    goto LABEL_440;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v307 + 16))(v307, v98);
  v103 = 0;
  v98 = *v3;
  v97 = v3[1];
  v432 = 1;
  v101 = v3[2];
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_101:
  if (!v102)
    v103 = 0;
  v418 = v103;
  v104 = v101 - v98;
  if (v97 <= v104)
  {
    v308 = 0;
    v381 = v3[3];
    *v3 = 0;
    v3[1] = 0;
    if (v381 && v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v381 + 16))(v381);
      v98 = *v3;
      v308 = v3[1];
    }
    else
    {
      v98 = 0;
    }
    goto LABEL_729;
  }
  v105 = (unsigned __int8 *)(v98 + v104);
  v106 = v98 + v104 + 1;
  v3[2] = v106;
  if (!v98)
  {
    v308 = v97;
LABEL_440:
    *v3 = 0;
    v3[1] = 0;
    v309 = v3[3];
    if (v309)
    {
      if (v308)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v309 + 16))(v309, v98, v308);
        v107 = 0;
        v98 = *v3;
        v97 = v3[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v107 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v107 = 0;
    }
    goto LABEL_442;
  }
  v107 = *v105;
  if (v107 < 2)
  {
    v431 = 0;
    v108 = 1;
    goto LABEL_107;
  }
LABEL_442:
  *v3 = 0;
  v3[1] = 0;
  v310 = v3[3];
  if (!v310)
  {
    v417 = 0;
    v311 = 0;
    v98 = 0;
    v431 = 1;
    goto LABEL_444;
  }
  if (!v97)
  {
    v417 = 0;
    v311 = 0;
    v98 = 0;
    v431 = 1;
LABEL_725:
    v19 = v593;
    v20 = (uint64_t)&v581;
    goto LABEL_444;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v310 + 16))(v310, v98);
  v108 = 0;
  v98 = *v3;
  v97 = v3[1];
  v431 = 1;
  v106 = v3[2];
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_107:
  if (!v107)
    v108 = 0;
  v417 = v108;
  v109 = v106 - v98;
  if (v97 <= v109)
  {
    v311 = 0;
    v380 = v3[3];
    *v3 = 0;
    v3[1] = 0;
    if (v380 && v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v380 + 16))(v380);
      v98 = *v3;
      v311 = v3[1];
    }
    else
    {
      v98 = 0;
    }
    goto LABEL_725;
  }
  v110 = (unsigned __int8 *)(v98 + v109);
  v3[2] = (uint64_t)(v110 + 1);
  if (!v98)
  {
    v311 = v97;
LABEL_444:
    *v3 = 0;
    v3[1] = 0;
    v312 = v3[3];
    if (v312)
    {
      if (v311)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v312 + 16))(v312, v98, v311);
        v111 = 0;
        v98 = *v3;
        v97 = v3[1];
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v111 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
    else
    {
      v97 = 0;
      v98 = 0;
      v111 = 0;
    }
    goto LABEL_446;
  }
  v111 = *v110;
  if (v111 < 2)
  {
    v430 = 0;
    v112 = 1;
    goto LABEL_113;
  }
LABEL_446:
  *v3 = 0;
  v3[1] = 0;
  v313 = v3[3];
  if (v313)
  {
    if (v97)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v313 + 16))(v313, v98);
    v112 = 0;
    v430 = 1;
    v19 = v593;
    v20 = (uint64_t)&v581;
  }
  else
  {
    v112 = 0;
    v430 = 1;
  }
LABEL_113:
  if (!v111)
    v112 = 0;
  v416 = v112;
  v113 = (__int128 *)IPC::Decoder::decode<unsigned int>(v3);
  IPC::Decoder::decode<WTF::URL>(v3, v473);
  IPC::Decoder::decode<WebCore::CrossOriginOpenerPolicy>((uint64_t)v472, v3);
  v114 = v3[1];
  v115 = *v3;
  v116 = ((v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v3;
  if (v114 < v116 || v114 - v116 <= 7)
  {
    v314 = 0;
    v315 = 0;
    *v3 = 0;
    v3[1] = 0;
    v316 = v3[3];
    if (v316)
    {
      if (v114)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v316 + 16))(v316);
        v315 = *v3;
        v314 = v3[1];
      }
      else
      {
        v314 = 0;
        v315 = 0;
      }
      v19 = v593;
      v20 = (uint64_t)&v581;
    }
  }
  else
  {
    v117 = (uint64_t *)(v115 + v116);
    v3[2] = (uint64_t)(v117 + 1);
    if (v115)
    {
      v429 = 0;
      v415 = *v117;
      goto LABEL_119;
    }
    v314 = v114;
    v315 = 0;
  }
  *v3 = 0;
  v3[1] = 0;
  v317 = v3[3];
  if (!v317 || !v314)
  {
    v115 = 0;
    v415 = 0;
    v114 = 0;
    v429 = 1;
LABEL_451:
    *v3 = 0;
    v3[1] = 0;
    v318 = v3[3];
    if (v318)
    {
      if (v114)
      {
        v19 = v593;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v318 + 16))(v318, v115);
        v20 = (uint64_t)&v581;
        v319 = *v3;
        v114 = v3[1];
      }
      else
      {
        v319 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    else
    {
      v319 = 0;
      v114 = 0;
    }
    goto LABEL_453;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, v315, v314);
  v415 = 0;
  v115 = *v3;
  v114 = v3[1];
  v429 = 1;
  v19 = v593;
  v20 = (uint64_t)&v581;
LABEL_119:
  if (v114 <= v3[2] - v115)
    goto LABEL_451;
  v118 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v118 + 1);
  if (!v115)
  {
    v319 = 0;
LABEL_453:
    *v3 = 0;
    v3[1] = 0;
    v320 = v3[3];
    if (v320)
    {
      if (v114)
      {
        v19 = v593;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v320 + 16))(v320, v319);
        v20 = (uint64_t)&v581;
        v115 = *v3;
        v114 = v3[1];
      }
      else
      {
        v115 = 0;
        v19 = v593;
        v20 = (uint64_t)&v581;
      }
    }
    else
    {
      v115 = 0;
      v114 = 0;
    }
LABEL_455:
    *v3 = 0;
    v3[1] = 0;
    v321 = v3[3];
    if (v321 && v114)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v321 + 16))(v321, v115);
    goto LABEL_456;
  }
  v119 = *v118;
  if (v119 >= 2)
    goto LABEL_455;
  if (v119)
  {
    IPC::Decoder::decode<WTF::URL>(v3, &v536);
    IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v534, v3);
    IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v532, v3);
    IPC::Decoder::decode<WebCore::PolicyContainer>(v3, (uint64_t)&v522);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v3, (uint64_t)&v519);
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v516);
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t)&v596);
    v133 = IPC::Decoder::decode<unsigned int>(v3);
    if (*v3)
    {
      if (!v539)
        goto LABEL_339;
      v195 = v536;
      v536 = 0;
      v540 = v195;
      *(_OWORD *)v541 = v537;
      *(_OWORD *)&v541[16] = v538;
      LODWORD(v537) = v537 & 0xFFFFFFFE;
      if (!v535)
        goto LABEL_339;
      v196 = v534;
      v534 = 0;
      v542 = v196;
      if (!v533)
        goto LABEL_339;
      v197 = v532;
      v532 = 0;
      v543 = v197;
      if (!v531)
        goto LABEL_339;
      v198 = v522;
      v522 = 0;
      v544 = v198;
      v199 = v523;
      v523 = 0;
      v545 = v199;
      v546 = v524;
      v547 = v525;
      v548 = v526;
      v200 = v527;
      v527 = 0u;
      v550 = v200;
      v551 = v528;
      v201 = v529;
      v529 = 0u;
      v552 = v201;
      v553 = v530;
      if (!v521)
        goto LABEL_339;
      v554 = v519;
      v555 = v520;
      if (!v518)
        goto LABEL_339;
      v556 = v516;
      v557 = v517;
      if (!v598)
        goto LABEL_339;
      v558 = v596;
      v559 = v597;
      if ((v133 & 0xFF00000000) == 0)
        goto LABEL_339;
      v560 = v133;
      std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>((uint64_t)&v581, (uint64_t)&v540);
      WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)&v540, v202);
      std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v522, v203);
    }
    else
    {
      LOBYTE(v581) = 0;
      v586 = 0;
      v363 = v533;
      std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v522, v144);
      if (v363 && v532)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v532, v144);
    }
    if (v535 && v534)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v534, v144);
    if (!v539)
      goto LABEL_329;
    v133 = (uint64_t)v536;
    v536 = 0;
    if (!v133)
      goto LABEL_329;
    if (*(_DWORD *)v133 != 2)
    {
      *(_DWORD *)v133 -= 2;
      goto LABEL_329;
    }
    goto LABEL_340;
  }
  LOBYTE(v581) = 0;
  v586 = 0;
  std::__optional_move_base<WebCore::NavigationRequester,false>::__optional_move_base[abi:sn180100](v588, (uint64_t)&v581);
LABEL_124:
  *(_BYTE *)(v20 + 4016) = 1;
  if (*(_BYTE *)(v20 + 224))
    WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)&v581, v120);
  while (1)
  {
    v121 = v3[1];
    if (!*(_BYTE *)(v20 + 4016))
    {
      v322 = *v3;
      *v3 = 0;
      v3[1] = 0;
      v323 = v3[3];
      if (!v323 || !v121)
      {
        v121 = 0;
        v122 = *v3;
LABEL_459:
        v324 = 0;
        v325 = 0;
        *v3 = 0;
        v3[1] = 0;
        v326 = v3[3];
        if (v326)
        {
          if (v121)
          {
            v19 = v593;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v326 + 16))(v326, v122);
            v325 = *v3;
            v324 = v3[1];
          }
          else
          {
            v324 = 0;
            v325 = 0;
            v19 = v593;
          }
        }
LABEL_460:
        *v3 = 0;
        v3[1] = 0;
        v327 = v3[3];
        if (v327 && v324)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v327 + 16))(v327, v325, v324);
        goto LABEL_461;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v323 + 16))(v323, v322);
      v121 = v3[1];
      v19 = v593;
    }
    v122 = *v3;
    v123 = v3[2] - *v3;
    if (v121 <= v123)
      goto LABEL_459;
    v124 = (unsigned __int8 *)(v122 + v123);
    v3[2] = (uint64_t)(v124 + 1);
    if (!v122)
    {
      v324 = v121;
      v325 = 0;
      goto LABEL_460;
    }
    v414 = *v124;
    if (v414 < 3)
    {
      v428 = 0;
      goto LABEL_131;
    }
LABEL_461:
    v328 = *v3;
    v329 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v330 = v3[3];
    if (!v330)
      goto LABEL_462;
    if (v329)
    {
      v19 = v593;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v330 + 16))(v330, v328);
LABEL_462:
      LOBYTE(v414) = 0;
      v428 = 1;
      goto LABEL_131;
    }
    LOBYTE(v414) = 0;
    v428 = 1;
    v19 = v593;
LABEL_131:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v536);
    v125 = v3[1];
    v126 = *v3;
    v127 = v3[2] - *v3;
    if (v125 <= v127)
    {
      v331 = 0;
      v332 = 0;
      *v3 = 0;
      v3[1] = 0;
      v333 = v3[3];
      if (v333)
      {
        if (v125)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v333 + 16))(v333);
          v332 = *v3;
          v331 = v3[1];
        }
        else
        {
          v331 = 0;
          v332 = 0;
        }
        v19 = v593;
      }
      goto LABEL_464;
    }
    v128 = (char *)(v126 + v127);
    v3[2] = (uint64_t)(v128 + 1);
    if (!v126)
    {
      v331 = v125;
      v332 = 0;
LABEL_464:
      v125 = 0;
      v126 = 0;
      *v3 = 0;
      v3[1] = 0;
      v334 = v3[3];
      if (v334)
      {
        if (v331)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v334 + 16))(v334, v332, v331);
          v126 = *v3;
          v125 = v3[1];
        }
        else
        {
          v125 = 0;
          v126 = 0;
        }
        v19 = v593;
      }
      goto LABEL_465;
    }
    v129 = *v128;
    if ((v129 & 0x80000000) == 0)
    {
      v461 = v129 | 0x100;
      goto LABEL_135;
    }
LABEL_465:
    *v3 = 0;
    v3[1] = 0;
    v335 = v3[3];
    if (!v335)
    {
      v126 = 0;
      v461 = 0;
      v125 = 0;
      goto LABEL_467;
    }
    if (!v125)
    {
      v126 = 0;
      v461 = 0;
      v19 = v593;
LABEL_467:
      *v3 = 0;
      v3[1] = 0;
      v336 = v3[3];
      if (v336)
      {
        if (v125)
        {
          v19 = v593;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v336 + 16))(v336, v126);
          v337 = *v3;
          v125 = v3[1];
        }
        else
        {
          v337 = 0;
          v19 = v593;
        }
      }
      else
      {
        v337 = 0;
        v125 = 0;
      }
      goto LABEL_469;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v335 + 16))(v335, v126);
    v461 = 0;
    v126 = *v3;
    v125 = v3[1];
    v19 = v593;
LABEL_135:
    if (v125 <= v3[2] - v126)
      goto LABEL_467;
    v130 = (unsigned __int8 *)v3[2];
    v3[2] = (uint64_t)(v130 + 1);
    if (!v126)
    {
      v337 = 0;
LABEL_469:
      *v3 = 0;
      v3[1] = 0;
      v338 = v3[3];
      if (v338)
      {
        if (v125)
        {
          v19 = v593;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v338 + 16))(v338, v337);
          v126 = *v3;
          v125 = v3[1];
        }
        else
        {
          v126 = 0;
          v19 = v593;
        }
      }
      else
      {
        v126 = 0;
        v125 = 0;
      }
LABEL_471:
      *v3 = 0;
      v3[1] = 0;
      v339 = v3[3];
      if (v339)
      {
        v19 = v593;
        if (v125)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v339 + 16))(v339, v126);
      }
      goto LABEL_472;
    }
    v131 = *v130;
    if (v131 >= 2)
      goto LABEL_471;
    if (!v131)
    {
      v411 = 0;
      v132 = 0;
      v427 = 0;
      goto LABEL_140;
    }
    v361 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
    if (v362)
    {
      v132 = v361;
      v427 = 0;
      v411 = 1;
      goto LABEL_140;
    }
LABEL_472:
    v340 = *v3;
    v341 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v342 = v3[3];
    if (!v342)
      goto LABEL_473;
    if (v341)
    {
      v19 = v593;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v342 + 16))(v342, v340);
LABEL_473:
      v132 = 0;
      v427 = 1;
      goto LABEL_140;
    }
    v427 = 1;
    v19 = v593;
    v132 = 0;
LABEL_140:
    v133 = (uint64_t)IPC::Decoder::decode<WTF::URL>(v3, &v522);
    v135 = v3[1];
    v136 = *v3;
    v137 = v3[2] - *v3;
    v413 = v132;
    if (v135 <= v137)
    {
      v343 = 0;
      v344 = 0;
      *v3 = 0;
      v3[1] = 0;
      v345 = v3[3];
      if (v345)
      {
        if (v135)
        {
          v19 = v593;
          (*(void (**)(uint64_t))(*(_QWORD *)v345 + 16))(v345);
          v344 = *v3;
          v343 = v3[1];
        }
        else
        {
          v343 = 0;
          v344 = 0;
          v19 = v593;
        }
      }
      goto LABEL_475;
    }
    v138 = (unsigned __int8 *)(v136 + v137);
    v3[2] = (uint64_t)(v138 + 1);
    if (!v136)
    {
      v343 = v135;
      v344 = 0;
LABEL_475:
      v135 = 0;
      v136 = 0;
      *v3 = 0;
      v3[1] = 0;
      v346 = v3[3];
      if (v346)
      {
        if (v343)
        {
          v19 = v593;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v346 + 16))(v346, v344, v343);
          v136 = *v3;
          v135 = v3[1];
        }
        else
        {
          v135 = 0;
          v136 = 0;
          v19 = v593;
        }
      }
LABEL_476:
      *v3 = 0;
      v3[1] = 0;
      v347 = v3[3];
      if (v347 && v135)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v347 + 16))(v347, v136);
      goto LABEL_477;
    }
    v139 = *v138;
    if (v139 >= 2)
      goto LABEL_476;
    if (!v139)
    {
      v142 = 0;
      v134 = 0;
      v141 = 0;
      goto LABEL_146;
    }
    v133 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
    if (v140)
    {
      v141 = v133;
      v142 = 0;
      v134 = 1;
      goto LABEL_146;
    }
LABEL_477:
    v348 = *v3;
    v349 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v133 = v3[3];
    if (!v133)
      goto LABEL_478;
    if (v349)
    {
      v19 = v593;
      v133 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v348);
LABEL_478:
      v141 = 0;
      v142 = 1;
      goto LABEL_146;
    }
    v141 = 0;
    v142 = 1;
    v19 = v593;
LABEL_146:
    v143 = v3[1];
    v144 = (WTF::StringImpl *)*v3;
    v145 = v3[2] - *v3;
    v426 = v5;
    v412 = v134;
    if (v143 <= v145)
    {
      v350 = 0;
      v351 = 0;
      *v3 = 0;
      v3[1] = 0;
      v352 = v3[3];
      if (v352)
      {
        v402 = v142;
        v376 = v141;
        if (v143)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v352 + 16))(v352);
          v351 = *v3;
          v350 = v3[1];
        }
        else
        {
          v350 = 0;
          v351 = 0;
        }
        v19 = v593;
        v141 = v376;
        v142 = v402;
      }
      goto LABEL_480;
    }
    v146 = (unsigned __int8 *)v144 + v145;
    v147 = (uint64_t)v144 + v145 + 1;
    v3[2] = v147;
    if (!v144)
    {
      v350 = v143;
      v351 = 0;
LABEL_480:
      *v3 = 0;
      v3[1] = 0;
      v353 = v3[3];
      if (v353)
      {
        v399 = v142;
        v371 = v141;
        if (v350)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v353 + 16))(v353, v351, v350);
          v148 = 0;
          v144 = (WTF::StringImpl *)*v3;
          v143 = v3[1];
        }
        else
        {
          v143 = 0;
          v144 = 0;
          v148 = 0;
        }
        v19 = v593;
        v141 = v371;
        v142 = v399;
      }
      else
      {
        v143 = 0;
        v144 = 0;
        v148 = 0;
      }
      goto LABEL_482;
    }
    v148 = *v146;
    if (v148 < 2)
    {
      v149 = 0;
      v150 = 1;
      goto LABEL_150;
    }
LABEL_482:
    *v3 = 0;
    v3[1] = 0;
    v354 = v3[3];
    if (!v354)
    {
      v151 = 0;
      v355 = 0;
      v144 = 0;
      v149 = 1;
      goto LABEL_484;
    }
    v396 = v142;
    v367 = v141;
    if (!v143)
    {
      v151 = 0;
      v355 = 0;
      v144 = 0;
      v19 = v593;
      v149 = 1;
      v142 = v142;
LABEL_484:
      *v3 = 0;
      v3[1] = 0;
      v356 = v3[3];
      if (v356)
      {
        v400 = v142;
        v407 = v151;
        v394 = v149;
        v372 = v141;
        if (v355)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v356 + 16))(v356, v144, v355);
          v155 = 0;
          v144 = (WTF::StringImpl *)*v3;
          v143 = v3[1];
        }
        else
        {
          v143 = 0;
          v144 = 0;
          v155 = 0;
        }
        v19 = v593;
        v141 = v372;
        v149 = v394;
        v142 = v400;
        v151 = v407;
      }
      else
      {
        v143 = 0;
        v144 = 0;
        v155 = 0;
      }
      goto LABEL_486;
    }
    v133 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v354 + 16))(v354, v144);
    v150 = 0;
    v144 = (WTF::StringImpl *)*v3;
    v143 = v3[1];
    v147 = v3[2];
    v19 = v593;
    v141 = v367;
    v149 = 1;
    v142 = v396;
LABEL_150:
    if (v148)
      v151 = v150;
    else
      v151 = 0;
    v152 = v147 - (_QWORD)v144;
    if (v143 <= v152)
    {
      v410 = v151;
      v395 = v149;
      v386 = v142;
      v387 = v141;
      v355 = 0;
      v388 = v3[3];
      *v3 = 0;
      v3[1] = 0;
      if (v388 && v143)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v388 + 16))(v388);
        v144 = (WTF::StringImpl *)*v3;
        v355 = v3[1];
      }
      else
      {
        v144 = 0;
      }
      v19 = v593;
      v141 = v387;
      v142 = v386;
      v149 = v395;
      v151 = v410;
      goto LABEL_484;
    }
    v153 = (unsigned __int8 *)v144 + v152;
    v154 = (uint64_t)v144 + v152 + 1;
    v3[2] = v154;
    if (!v144)
    {
      v355 = v143;
      goto LABEL_484;
    }
    v155 = *v153;
    if (v155 < 2)
    {
      v156 = 0;
      v157 = 1;
      goto LABEL_157;
    }
LABEL_486:
    *v3 = 0;
    v3[1] = 0;
    v357 = v3[3];
    if (!v357)
    {
      v158 = 0;
      v358 = 0;
      v144 = 0;
      v156 = 1;
      goto LABEL_488;
    }
    v397 = v142;
    v405 = v151;
    v5 = (_BYTE *)v149;
    v368 = v141;
    if (!v143)
    {
      v158 = 0;
      v358 = 0;
      v144 = 0;
      v19 = v593;
      v156 = 1;
      v142 = v142;
LABEL_488:
      *v3 = 0;
      v3[1] = 0;
      v359 = v3[3];
      if (v359)
      {
        v401 = v158;
        v408 = v151;
        v373 = v149;
        v374 = v142;
        v375 = v141;
        if (v358)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v359 + 16))(v359, v144, v358);
          v144 = (WTF::StringImpl *)*v3;
          v143 = v3[1];
        }
        else
        {
          v143 = 0;
          v144 = 0;
        }
        v19 = v593;
        v141 = v375;
        v142 = v374;
        v149 = v373;
        v158 = v401;
        v151 = v408;
      }
      else
      {
        v143 = 0;
        v144 = 0;
      }
      goto LABEL_490;
    }
    v133 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v357 + 16))(v357, v144);
    v157 = 0;
    v144 = (WTF::StringImpl *)*v3;
    v143 = v3[1];
    v154 = v3[2];
    v19 = v593;
    v141 = v368;
    v156 = 1;
    v142 = v397;
    v151 = v405;
    v149 = (uint64_t)v5;
LABEL_157:
    if (v155)
      v158 = v157;
    else
      v158 = 0;
    v159 = v154 - (_QWORD)v144;
    if (v143 <= v159)
    {
      v403 = v158;
      v409 = v151;
      v382 = v149;
      v383 = v142;
      v384 = v141;
      v358 = 0;
      v385 = v3[3];
      *v3 = 0;
      v3[1] = 0;
      if (v385 && v143)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v385 + 16))(v385);
        v144 = (WTF::StringImpl *)*v3;
        v358 = v3[1];
      }
      else
      {
        v144 = 0;
      }
      v19 = v593;
      v141 = v384;
      v142 = v383;
      v149 = v382;
      v158 = v403;
      v151 = v409;
      goto LABEL_488;
    }
    v160 = (unsigned __int8 *)v144 + v159;
    v3[2] = (uint64_t)(v160 + 1);
    if (!v144)
    {
      v358 = v143;
      goto LABEL_488;
    }
    v161 = *v160;
    if (v161 <= 1)
    {
      v20 = 0;
      v162 = v161 != 0;
      goto LABEL_164;
    }
    v19 = v593;
LABEL_490:
    *v3 = 0;
    v3[1] = 0;
    v360 = v3[3];
    if (!v360)
      goto LABEL_491;
    if (!v143)
      goto LABEL_491;
    v398 = v158;
    v406 = v151;
    v5 = (_BYTE *)v149;
    v369 = v142;
    v370 = v141;
    v133 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v360 + 16))(v360, v144);
    v19 = v593;
    v158 = v398;
    v151 = v406;
    if (!*v3)
    {
LABEL_491:
      *v426 = 0;
      v426[3776] = 0;
      goto LABEL_247;
    }
    v141 = v370;
    v142 = v369;
    v149 = (uint64_t)v5;
    v162 = 0;
    v20 = 1;
LABEL_164:
    if ((_BYTE)v460
      && v458
      && v515
      && v513
      && v511
      && (v459 & 0xFF00000000) != 0
      && v509
      && !v457
      && !v456
      && v465 > 0xFFu
      && !v455
      && !v454
      && !v453
      && !v452
      && v595
      && ShouldRelaxThirdPartyCookie > 0xFFu
      && !v451
      && (v463 & 0xFF0000) != 0
      && !v450
      && !v449
      && (v462 & 0xFF0000) != 0)
    {
      v163 = v158;
      v404 = v151;
      v19 = (_BYTE *)v149;
      v5 = (_BYTE *)v142;
      v540 = v6;
      *(_QWORD *)v541 = v8;
      *(_OWORD *)&v541[8] = v514;
      v164 = v512;
      v512 = 0;
      v165 = v510;
      v510 = 0;
      *(_QWORD *)&v541[24] = v164;
      v542 = v165;
      LODWORD(v543) = v459;
      BYTE4(v543) = 0;
      v549 = 0;
      v459 = (uint64_t)&v550;
      v460 = v141;
      v133 = WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v550, (uint64_t)v507);
      v166 = v508;
      v508 = 0;
      v561 = v166;
      v562 = v448;
      v563 = v447;
      v564 = v465;
      v565 = v446;
      v566 = v445;
      v567 = v444;
      v568 = v443;
      v3 = (uint64_t *)v569;
      v569[0] = 0;
      v570 = 0;
      v6 = (WTF *)&v540;
      v8 = (unint64_t)v113;
      if (v594)
      {
        v133 = (uint64_t)WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v569, (const WebKit::NavigationActionData *)v593);
        v570 = 1;
      }
      v571 = ShouldRelaxThirdPartyCookie != 0;
      v113 = &v572;
      v572 = 0u;
      v573 = v442;
      v574 = 0;
      v576 = 0;
      v577 = v463;
      v578 = v441;
      v579 = v440;
      v580 = v462;
      if (v439)
      {
        if (v506)
        {
          if (v504)
          {
            if (v502)
            {
              if (v438)
              {
                if (v592)
                {
                  if (v499)
                  {
                    if (v494)
                    {
                      if (v492)
                      {
                        if (v490)
                        {
                          v470 = v488;
                          v167 = v489;
                          v489 = 0uLL;
                          v471 = v167;
                          if (v487)
                          {
                            v468 = v485;
                            v168 = v486;
                            v486 = 0uLL;
                            v469 = v168;
                            if (v484)
                            {
                              if (!v437 && !v436 && !v435)
                              {
                                if (v482)
                                {
                                  if (!v434)
                                  {
                                    if (v479)
                                    {
                                      v466 = v477;
                                      v467 = v478;
                                      if (!v433
                                        && v476
                                        && !v432
                                        && !v431
                                        && !v430
                                        && (v8 & 0xFF00000000) != 0
                                        && v474
                                        && v472[24]
                                        && !v429
                                        && v589
                                        && !v428
                                        && BYTE8(v537)
                                        && v461 > 0xFF
                                        && !v427
                                        && BYTE8(v527)
                                        && !(_DWORD)v5
                                        && !(_DWORD)v19
                                        && !v156
                                        && !(_DWORD)v20)
                                      {
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_339:
    __break(1u);
LABEL_340:
    WTF::StringImpl::destroy((WTF::StringImpl *)v133, v144);
LABEL_329:
    if (*(_BYTE *)(v20 + 224))
      goto LABEL_330;
    v364 = *v3;
    v365 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v366 = v3[3];
    if (v366)
    {
      if (v365)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v366 + 16))(v366, v364);
        v20 = (uint64_t)&v581;
        v19 = v593;
        if (v586)
        {
LABEL_330:
          std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>((uint64_t)v588, (uint64_t)&v581);
          goto LABEL_124;
        }
      }
    }
LABEL_456:
    *(_BYTE *)(v20 + 3776) = 0;
    *(_BYTE *)(v20 + 4016) = 0;
  }
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)&v581, (uint64_t)&v540, v425, &v505, (uint64_t)v503, (uint64_t)&v500, (uint64_t)&v590, v495, *(double *)&v424, (uint64_t *)v493, (uint64_t *)v491, (uint64_t)&v470, (uint64_t)&v468, v483, v423, v422, v421, &v480, v420,
    &v466,
    v419,
    (uint64_t *)v475,
    v418,
    v417,
    v416,
    v8,
    (uint64_t *)v473,
    (uint64_t)v472,
    v415,
    (uint64_t)v588,
    v414,
    (uint64_t)v536,
    v537,
    v461,
    v413,
    v411,
    (uint64_t *)&v522,
    v460,
    v412,
    v404,
    v163,
    v162);
  *(_BYTE *)(WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)v426, (uint64_t)&v581) + 3776) = 1;
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v581, v169);
  v171 = (WTF::StringImpl *)*((_QWORD *)&v469 + 1);
  *((_QWORD *)&v469 + 1) = 0;
  v19 = v593;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, v170);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = (WTF::StringImpl *)v469;
  *(_QWORD *)&v469 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, v170);
    else
      *(_DWORD *)v172 -= 2;
  }
  v173 = (WTF::StringImpl *)*((_QWORD *)&v471 + 1);
  *((_QWORD *)&v471 + 1) = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, v170);
    else
      *(_DWORD *)v173 -= 2;
  }
  v174 = (WTF::StringImpl *)v471;
  *(_QWORD *)&v471 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, v170);
    else
      *(_DWORD *)v174 -= 2;
  }
  if (v576)
  {
    v175 = cf;
    cf = 0;
    if (v175)
      CFRelease(v175);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v572, v170);
  if (v570)
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v569);
  v176 = v561;
  v561 = 0;
  if (v176)
    CFRelease(v176);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v550);
  v177 = v542;
  v542 = 0;
  if (v177)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v177, v144);
  v178 = *(_QWORD *)&v541[24];
  *(_QWORD *)&v541[24] = 0;
  if (v178)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v178, v144);
LABEL_247:
  if (BYTE8(v527))
  {
    v179 = v522;
    v522 = 0;
    if (v179)
    {
      if (*(_DWORD *)v179 == 2)
        WTF::StringImpl::destroy(v179, v144);
      else
        *(_DWORD *)v179 -= 2;
    }
  }
  if (v589 && v588[224])
    WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)v588, v144);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v472, v144);
  if (v474)
  {
    v181 = v473[0];
    v473[0] = 0;
    if (v181)
    {
      if (*(_DWORD *)v181 == 2)
        WTF::StringImpl::destroy(v181, v180);
      else
        *(_DWORD *)v181 -= 2;
    }
  }
  if (v476)
  {
    v182 = v475[0];
    v475[0] = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2)
        WTF::StringImpl::destroy(v182, v180);
      else
        *(_DWORD *)v182 -= 2;
    }
  }
  if (v482)
    WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v480, v180);
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](v483);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v485, v183);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v488, v184);
  if (v492)
  {
    v186 = v491[0];
    v491[0] = 0;
    if (v186)
    {
      if (*(_DWORD *)v186 == 2)
        WTF::StringImpl::destroy(v186, v185);
      else
        *(_DWORD *)v186 -= 2;
    }
  }
  if (v494)
  {
    v187 = v493[0];
    v493[0] = 0;
    if (v187)
    {
      if (*(_DWORD *)v187 == 2)
        WTF::StringImpl::destroy(v187, v185);
      else
        *(_DWORD *)v187 -= 2;
    }
  }
  if (v499 && v498)
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v495, v185);
  if (v592)
  {
    v188 = v591;
    v591 = 0;
    if (v188)
    {
      if (*(_DWORD *)v188 == 2)
        WTF::StringImpl::destroy(v188, v185);
      else
        *(_DWORD *)v188 -= 2;
    }
  }
  if (v502 && v501)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v500);
  if (v504 && v503[16])
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v503, v185);
  if (v506)
  {
    v189 = v505;
    v505 = 0;
    if (v189)
      WTF::RefCounted<WebCore::FormData>::deref(v189);
  }
  if (v19[2576] && v19[2560])
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v593);
  result = (uint64_t)std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v507);
  if (v511)
  {
    result = (uint64_t)v510;
    if (v510)
      result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v510, v191);
  }
  if (v513)
  {
    result = (uint64_t)v512;
    if (v512)
      return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v512, v191);
  }
  return result;
}

void WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters(WebKit::NetworkResourceLoadParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const char ***v16;
  void *v17;
  const void *v18;
  const void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 464);
  *((_QWORD *)this + 464) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 3648))
    WebCore::NavigationRequester::~NavigationRequester((WebKit::NetworkResourceLoadParameters *)((char *)this + 3424), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 3240, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkResourceLoadParameters *)((char *)this + 3216));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebKit::NetworkResourceLoadParameters *)((char *)this + 3200));
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_BYTE *)this + 3064))
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 3040, v8);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (const char ***)*((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v16)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v16);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2960, v8);
  if (*((_BYTE *)this + 2936))
  {
    v18 = (const void *)*((_QWORD *)this + 366);
    *((_QWORD *)this + 366) = 0;
    if (v18)
      CFRelease(v18);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2888, v17);
  if (*((_BYTE *)this + 2864))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NetworkResourceLoadParameters *)((char *)this + 304));
  v19 = (const void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkResourceLoadParameters *)((char *)this + 88));
  v21 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v21, v20);
  v22 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v22, v20);
}

uint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = result;
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 16 * v2));
    result = v4;
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v5 = result;
    WTF::fastFree(v3, a2);
    return v5;
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *(WTF::StringImpl **)(this + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(unsigned int *)(v2 + 32);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v8, v2 + 8);
    *(_DWORD *)(v2 + 32) = -1;
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_196C4C7BC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  const char ****v6;
  uint64_t v7;
  const char ***v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(const char *****)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        WTF::RefCounted<WebKit::SandboxExtension>::deref(v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

void IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C4C8FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 8))
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  const char **v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  const char **v17;
  char v18;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v16;
        v11 = *v16;
        v10 = v16[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_11;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_11:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v15 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v15;
        v4 = *v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v17);
      if (v18)
      {
        v8 = v17;
        v17 = 0;
        *(_QWORD *)a2 = v8;
        v9 = 1;
        *(_BYTE *)(a2 + 8) = 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v17);
      }
      else
      {
        v9 = 0;
        *(_BYTE *)a2 = 0;
      }
      *(_BYTE *)(a2 + 16) = v9;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    return;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  v14 = a1[3];
  if (v14 && v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
}

void IPC::Decoder::decode<WebCore::ResourceRequest>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 200))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;

  v4 = IPC::Decoder::decode<WebCore::LockHistory>(a2);
  v5 = IPC::Decoder::decode<WebCore::LockHistory>(a2);
  IPC::Decoder::decode<WTF::String>(a2, &v15);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v13);
  v8 = *a2;
  if (*a2)
  {
    if (v4 > 0xFFu && v5 > 0xFFu)
    {
      if (v16)
      {
        v9 = v15;
        v15 = 0;
        if (v14)
        {
          v10 = v13;
          *(_WORD *)a1 = v4 | (unsigned __int16)(v5 << 8);
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v10;
          *(_BYTE *)(a1 + 24) = 1;
          goto LABEL_7;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_7:
  if (v16)
  {
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v8)
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v12)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
    }
  }
  return result;
}

void sub_196C4CC38(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(uint64_t result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = (_BYTE *)result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    *v3 = 0;
    v3[8] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(_QWORD *)result = 0;
    goto LABEL_7;
  }
  result = IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(&v17, a2);
  *v3 = 0;
  v3[8] = 0;
  if (v18)
  {
    *(_QWORD *)v3 = v17;
LABEL_7:
    v3[8] = 1;
    return result;
  }
LABEL_13:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(uint64_t *a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  __int16 v10;

  v2 = IPC::Decoder::decode<unsigned short>(a1);
  v3 = (v2 & 0xFE00) != 0 || (v2 & 0xFF0000) == 0;
  if (v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v10 = v2;
      v9 = v3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v3 = v9;
      LOWORD(v2) = v10;
    }
  }
  if (v3)
    return 0;
  else
    return (unsigned __int16)v2 | 0x10000u;
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  int v7;
  int v8;
  int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        a1 = v17;
        v12 = *v17;
        v11 = v17[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_11;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = (uint64_t)(v4 + 1);
  if (!v2)
  {
    v11 = v1;
    v12 = 0;
LABEL_11:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        v2 = *v16;
        v1 = v16[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_12;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    if (v5)
    {
      ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a1);
      v7 = ShouldRelaxThirdPartyCookie;
      v8 = (ShouldRelaxThirdPartyCookie > 0xFFu) << 16;
      if ((ShouldRelaxThirdPartyCookie & 0xFF00) == 0)
        v7 = 0;
      v9 = 256;
    }
    else
    {
      v7 = 0;
      v9 = 0;
      v8 = 0x10000;
    }
    return v7 | v8 | v9;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  v15 = a1[3];
  if (v15 && v1)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v2);
  v8 = 0;
  v7 = 0;
  v9 = 0;
  return v7 | v8 | v9;
}

uint64_t *IPC::Decoder::decode<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::decode<IPC::Decoder,WebCore::FormData>(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196C4D060(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  WTF::RefCountedBase *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(WTF::RefCountedBase **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      WTF::RefCounted<WebCore::FormData>::deref(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_196C4D0D8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 24))
  {
    if (*(_BYTE *)(v2 + 16))
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CrossOriginOpenerPolicy>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;

  v4 = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>(a2);
  v5 = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>(a2);
  IPC::Decoder::decode<WTF::String>(a2, &v15);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v13);
  v8 = *a2;
  if (*a2)
  {
    if (v4 > 0xFFu && v5 > 0xFFu)
    {
      if (v16)
      {
        v9 = v15;
        v15 = 0;
        if (v14)
        {
          v10 = v13;
          *(_WORD *)a1 = v4 | (unsigned __int16)(v5 << 8);
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v10;
          *(_BYTE *)(a1 + 24) = 1;
          goto LABEL_7;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_7:
  if (v16)
  {
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v8)
  {
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v12)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
    }
  }
  return result;
}

void sub_196C4D244(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::ImageBufferPixelFormat,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v8 = v1;
    v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 >= 4)
  {
LABEL_8:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::FetchOptions>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::FetchOptions,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C4D394(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::FetchOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  char v24;
  char v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int i;
  unsigned __int16 Options;
  WTF::StringImpl *v54;
  unsigned __int8 v55;
  _QWORD v56[2];
  unsigned __int8 v57;
  _QWORD v58[2];
  unsigned __int8 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  Options = IPC::Decoder::decode<WebCore::FetchOptionsDestination>(a1);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_30;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v33 = v4;
    v34 = 0;
    goto LABEL_31;
  }
  v8 = *v7;
  if (v8 >= 4)
    goto LABEL_32;
  for (i = 0; ; i = 1)
  {
    v9 = IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(a1);
    v10 = IPC::Decoder::decode<WebCore::FetchOptionsCache>(a1);
    v11 = a1[1];
    v12 = *a1;
    v13 = a1[2] - *a1;
    if (v11 <= v13)
    {
      v40 = 0;
      v41 = 0;
      *a1 = 0;
      a1[1] = 0;
      v42 = a1[3];
      if (v42)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 16))(v42, v12, v11);
          v41 = *a1;
          v40 = a1[1];
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
      }
      goto LABEL_35;
    }
    v14 = (unsigned __int8 *)(v12 + v13);
    a1[2] = (uint64_t)(v14 + 1);
    if (!v12)
    {
      v40 = v11;
      v41 = 0;
LABEL_35:
      *a1 = 0;
      a1[1] = 0;
      v43 = a1[3];
      if (v43 && v40)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
      goto LABEL_36;
    }
    v15 = *v14;
    if (v15 < 3)
    {
      v16 = 0;
      goto LABEL_9;
    }
LABEL_36:
    v44 = *a1;
    v45 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46 && v45)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
    LOBYTE(v15) = 0;
    v16 = 1;
LABEL_9:
    v17 = IPC::Decoder::decode<WebCore::ReferrerPolicy>(a1);
    v18 = a1[1];
    v19 = *a1;
    v20 = a1[2] - *a1;
    if (v18 <= v20)
    {
      v47 = 0;
      v48 = 0;
      *a1 = 0;
      a1[1] = 0;
      v49 = a1[3];
      if (v49)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
          v48 = *a1;
          v47 = a1[1];
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
      }
      goto LABEL_39;
    }
    v21 = (unsigned __int8 *)(v19 + v20);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v19)
    {
      v47 = v18;
      v48 = 0;
LABEL_39:
      *a1 = 0;
      a1[1] = 0;
      v50 = a1[3];
      if (v50 && v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48, v47);
        v22 = 0;
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v22 = 0;
      }
      goto LABEL_41;
    }
    v22 = *v21;
    if (v22 < 2)
    {
      v23 = 0;
      v24 = 1;
      goto LABEL_13;
    }
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (v51 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v19);
    v24 = 0;
    v23 = 1;
LABEL_13:
    v25 = v22 ? v24 : 0;
    IPC::Decoder::decode<WTF::String>(a1, &v54);
    IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(v58, a1);
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(v56, a1);
    if (!*a1)
      break;
    v5 = Options;
    if (Options > 0xFFu)
    {
      v5 = i;
      if (!i)
      {
        v5 = v9;
        if (v9 > 0xFFu)
        {
          v5 = v10;
          if (v10 > 0xFFu && !v16)
          {
            v5 = v17;
            if (v17 > 0xFFu && !v23)
            {
              v5 = v55;
              if (v55)
              {
                v5 = v59;
                if (v59)
                {
                  v5 = v57;
                  if (v57)
                  {
                    v28 = v58[0];
                    v29 = v58[1];
                    v30 = v56[0];
                    v31 = v56[1];
                    v32 = v54;
                    *(_BYTE *)a2 = Options;
                    *(_BYTE *)(a2 + 1) = v8;
                    *(_BYTE *)(a2 + 2) = v9;
                    *(_BYTE *)(a2 + 3) = v10;
                    *(_BYTE *)(a2 + 4) = v15;
                    *(_BYTE *)(a2 + 5) = v17;
                    *(_BYTE *)(a2 + 6) = v25;
                    *(_QWORD *)(a2 + 8) = v32;
                    *(_QWORD *)(a2 + 16) = v28;
                    *(_QWORD *)(a2 + 32) = v30;
                    *(_QWORD *)(a2 + 40) = v31;
                    *(_QWORD *)(a2 + 24) = v29;
                    *(_BYTE *)(a2 + 48) = 1;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_30:
    v33 = 0;
    v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v5, v4);
        v34 = *a1;
        v33 = a1[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36 && v33)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34);
LABEL_32:
    v37 = *a1;
    v38 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v38)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
    }
    LOBYTE(v8) = 0;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (v55)
  {
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C4D7D8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_196C4D7F0()
{
  JUMPOUT(0x196C4D7E8);
}

_QWORD *IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v3 = result;
  v20 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_11;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_11:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_12;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
    goto LABEL_13;
  }
  if (v9)
  {
    *result = 0;
    result[1] = 0;
    goto LABEL_8;
  }
  result = IPC::Decoder::decode<WTF::UUID>(a2, (uint64_t)v18);
  if (v19)
  {
    v10 = v18[1];
    *v3 = v18[0];
    v3[1] = v10;
LABEL_8:
    *((_BYTE *)v3 + 16) = 1;
    return result;
  }
LABEL_13:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v17)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v16);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<WTF::UUID>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::UUID,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = result[1];
  v4 = (char *)*result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v11 = 0;
    v12 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v16 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        result = v16;
        v12 = *v16;
        v11 = v16[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_11;
  }
  v6 = &v4[v5];
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v11 = v3;
    v12 = 0;
LABEL_11:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v14 = result[3];
    if (v14)
    {
      v15 = result;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        result = v15;
        v4 = (char *)*v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v4, (uint64_t)&v17);
      if (v19)
      {
        *(_QWORD *)a2 = v17;
        v9 = v18;
        v17 = 0;
        v18 = 0;
        *(_QWORD *)(a2 + 8) = v9;
        v10 = 1;
        *(_BYTE *)(a2 + 16) = 1;
        result = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v8);
      }
      else
      {
        v10 = 0;
        *(_BYTE *)a2 = 0;
      }
      *(_BYTE *)(a2 + 24) = v10;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    return result;
  }
LABEL_12:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, char *))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::FetchOptionsCache,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v8 = v1;
    v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 >= 6)
  {
LABEL_8:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

_QWORD *IPC::ArgumentCoder<WTF::UUID,void>::decode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      v7 = 0;
      v8 = *v6;
      goto LABEL_8;
    }
    v8 = v2;
    v14 = 0;
  }
  else
  {
    v8 = 0;
    v14 = 0;
    *result = 0;
    result[1] = 0;
    v12 = (_QWORD *)result[3];
    if (v12)
      goto LABEL_29;
  }
  while (1)
  {
    *result = 0;
    result[1] = 0;
    v15 = result[3];
    if (!v15)
    {
      v2 = 0;
      v3 = 0;
      v8 = 0;
LABEL_20:
      v7 = 1;
      goto LABEL_8;
    }
    v21 = result;
    v24 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v14, v8);
      v8 = 0;
      result = v21;
      a2 = v24;
      v3 = *v21;
      v2 = v21[1];
      goto LABEL_20;
    }
    v2 = 0;
    v3 = 0;
    v7 = 1;
LABEL_8:
    v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
      break;
    v16 = 0;
    v17 = 0;
    *result = 0;
    result[1] = 0;
    v18 = result[3];
    if (v18)
    {
      v23 = result;
      v27 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        result = v23;
        a2 = v27;
        v17 = *v23;
        v16 = v23[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
LABEL_22:
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (!v19)
      goto LABEL_23;
    if (!v16)
      goto LABEL_23;
    v20 = result;
    v25 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(result[3], v17, v16);
    a2 = v25;
    if (!*v20)
      goto LABEL_23;
LABEL_28:
    __break(1u);
LABEL_29:
    v22 = result;
    v26 = a2;
    if (v2)
    {
      (*(void (**)(_QWORD *))(*v12 + 16))(v12);
      result = v22;
      a2 = v26;
      v14 = *v22;
      v8 = v22[1];
    }
    else
    {
      v8 = 0;
      v14 = 0;
    }
  }
  v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11 + 1;
  result[2] = v11 + 1;
  if (!v3)
  {
    v16 = v2;
    v17 = 0;
    goto LABEL_22;
  }
  if (v7)
    goto LABEL_28;
  v13 = *v11;
  if (v13 ^ 1 | v8)
  {
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
LABEL_23:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::NetworkTransactionInformation>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 592 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned __int8 *WebKit::WebLocalFrameLoaderClient::committedLoad(WebKit::WebLocalFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t (*v6)();
  uint64_t v7;
  unsigned __int8 *result;
  WTF::StringImpl *v9;
  _BYTE v10[80];

  if (*((_QWORD *)this + 5))
    v6 = WTF::RefPtr<WebKit::PluginView,WTF::RawPtrTraits<WebKit::PluginView>,WTF::DefaultRefDerefTraits<WebKit::PluginView>>::unspecifiedBoolTypeInstance;
  else
    v6 = 0;
  if (!v6)
    WebCore::DocumentLoader::commitData(a2, a3);
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 296);
  if (v7)
  {
    if ((*(_WORD *)(v7 + 3358) & 0x10) != 0)
    {
      WebKit::pluginWillHandleLoadError((WebCore::DocumentLoader *)((char *)a2 + 1272), (uint64_t)v10);
      WebCore::DocumentLoader::cancelMainResourceLoad();
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v10, v9);
    }
  }
  result = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (result)
  {
    if (!*((_BYTE *)this + 48))
    {
      WebKit::PluginView::manualLoadDidReceiveResponse((WebKit::PluginView *)result, (CFTypeRef *)a2 + 159);
      result = (unsigned __int8 *)*((_QWORD *)this + 5);
      if (!result)
        return result;
      *((_BYTE *)this + 48) = 1;
    }
    return WebKit::PluginView::manualLoadDidReceiveData((WebKit::PluginView *)result, a3);
  }
  return result;
}

uint64_t WebKit::toBackForwardListItemState@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[31];

  v5 = a2 + 24;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  WebKit::FrameState::FrameState((WebKit::FrameState *)(a2 + 24));
  *(_BYTE *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  *(_BYTE *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_OWORD *)a2 = *((_OWORD *)this + 22);
  v6 = (WTF::StringImpl **)WebCore::HistoryItem::title(this);
  WTF::String::left(v6, 0x3E8u, v18);
  v8 = v18[0];
  v18[0] = 0;
  v9 = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v8;
  if (v9)
  {
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2)
    {
LABEL_3:
      *(_DWORD *)v9 = v10;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v9, v7);
    v9 = v18[0];
    v18[0] = 0;
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
        goto LABEL_3;
      WTF::StringImpl::destroy(v9, v17);
    }
  }
LABEL_4:
  WebKit::toFrameState(this, (uint64_t)v18);
  WebKit::FrameState::operator=(v5, (uint64_t)v18);
  WebKit::FrameState::~FrameState(v18);
  result = WebCore::HistoryItem::shouldOpenExternalURLsPolicy(this);
  *(_BYTE *)(a2 + 272) = result;
  v12 = (unsigned int *)*((_QWORD *)this + 21);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *(unsigned int **)(a2 + 280);
  *(_QWORD *)(a2 + 280) = v12;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      v18[0] = (WTF::StringImpl *)v14;
      result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v18);
    }
  }
  *(_BYTE *)(a2 + 288) = *((_BYTE *)this + 147);
  *(_BYTE *)(a2 + 296) = *((_QWORD *)this + 25) != 0;
  return result;
}

uint64_t WebKit::FrameState::FrameState(WebKit::FrameState *this)
{
  WTF::RunLoop *v2;
  uint64_t result;

  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 72) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 104) = 1;
  *((_DWORD *)this + 27) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 136) = 0;
  *(_QWORD *)((char *)this + 204) = 0;
  *(_QWORD *)((char *)this + 196) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_BYTE *)this + 192) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) != 0)
    return (uint64_t)this;
  result = 68;
  __break(0xC471u);
  return result;
}

void sub_196C4E18C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, v8);
  std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100](v6, v9);
  if (*(_BYTE *)(v2 + 72))
  {
    v11 = *(WTF **)(v2 + 56);
    if (v11)
    {
      *(_QWORD *)(v2 + 56) = 0;
      *(_DWORD *)(v2 + 64) = 0;
      WTF::fastFree(v11, v10);
    }
  }
  WebCore::RegistrableDomain::~RegistrableDomain(v3, (WTF::StringImpl *)v10);
  v13 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkCache::traverseDirectory(WTF::FileSystemImpl *a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::String *v6;
  uint64_t v7;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;

  WTF::FileSystemImpl::listDirectory(a1, a2);
  if (v14)
  {
    v4 = v13;
    v5 = 8 * v14;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      v7 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v12, v6);
      v9 = (v7 & 0xFF00000000) == 0 || (_DWORD)v7 != 1;
      (*(void (**)(_QWORD, uint64_t, _BOOL8))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, v4, v9);
      v10 = v12;
      v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v3);
}

WTF::StringImpl *WTF::String::left@<X0>(WTF::StringImpl **this@<X0>, unsigned int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  result = *this;
  if (result)
  {
    if (*((_DWORD *)result + 1) > a2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::substring(result);
      *a3 = v5;
    }
    else
    {
      *(_DWORD *)result += 2;
      *a3 = result;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebKit::toFrameState@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  const WebCore::HistoryItem *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  void *v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[31];

  WebKit::FrameState::FrameState((WebKit::FrameState *)a2);
  v5 = (WTF::StringImpl *)WebCore::HistoryItem::urlString(this);
  WTF::String::operator=((WTF::StringImpl **)a2, v5);
  v6 = (WTF::StringImpl *)WebCore::HistoryItem::originalURLString(this);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 8), v6);
  v7 = (WTF::StringImpl *)WebCore::HistoryItem::referrer(this);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 16), v7);
  v8 = (WTF::StringImpl *)WebCore::HistoryItem::target(this);
  WTF::String::operator=((WTF::StringImpl **)(a2 + 24), v8);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 3);
  *(_BYTE *)(a2 + 48) = *((_BYTE *)this + 64);
  v9 = WebCore::HistoryItem::documentState(this);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a2 + 232), v9);
  v10 = (unsigned int *)*((_QWORD *)this + 21);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>(a2 + 56, (uint64_t)(v10 + 2));
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      v38[0] = (WTF::StringImpl *)v10;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v38);
    }
  }
  *(int8x16_t *)(a2 + 80) = vextq_s8(*(int8x16_t *)((char *)this + 152), *(int8x16_t *)((char *)this + 152), 8uLL);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)WebCore::HistoryItem::scrollPosition(this);
  *(_BYTE *)(a2 + 104) = WebCore::HistoryItem::shouldRestoreScrollPosition(this);
  WebCore::HistoryItem::pageScaleFactor(this);
  *(_DWORD *)(a2 + 108) = v14;
  v15 = WebCore::HistoryItem::formData(this);
  if (v15)
  {
    WebKit::toHTTPBody((WebKit *)v38, *(const WebCore::FormData **)(v15 + 8), *(_DWORD *)(v15 + 20));
    WebCore::HistoryItem::formContentType(this);
    v32 = v38[0];
    v38[0] = v37;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    std::optional<WebKit::HTTPBody>::operator=[abi:sn180100]<WebKit::HTTPBody,void>(a2 + 112, (WTF::StringImpl *)v38);
    WebKit::HTTPBody::~HTTPBody(v38, v33);
  }
  v16 = *(_OWORD *)((char *)this + 228);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)((char *)this + 212);
  *(_OWORD *)(a2 + 160) = v16;
  *(_QWORD *)(a2 + 176) = *(_QWORD *)((char *)this + 244);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)((char *)this + 252);
  *(_BYTE *)(a2 + 192) = *((_BYTE *)this + 280);
  *(_OWORD *)(a2 + 196) = *(_OWORD *)((char *)this + 260);
  v17 = WebCore::HistoryItem::children(this);
  v19 = *(unsigned int *)(v17 + 12);
  if ((_DWORD)v19)
  {
    if (v19 < 0x1084211)
    {
      v26 = v17;
      v27 = 248 * v19;
      v28 = WTF::fastMalloc((WTF *)(248 * v19));
      v21 = v28;
      v20 = v27 / 0xF8;
      v29 = *(unsigned int *)(v26 + 12);
      if (!(_DWORD)v29)
        goto LABEL_10;
      v22 = 0;
      v30 = v28;
      while (v22 < v29)
      {
        WebKit::toFrameState((uint64_t *)v38, *(WebKit **)(*(_QWORD *)v26 + 8 * v22), v18);
        WebKit::FrameState::FrameState(v30, (uint64_t *)v38);
        ++v22;
        WebKit::FrameState::~FrameState(v38);
        v29 = *(unsigned int *)(v26 + 12);
        v30 += 248;
        if (v22 >= v29)
          goto LABEL_11;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x196C4E6A4);
  }
  v20 = 0;
  v21 = 0;
LABEL_10:
  LODWORD(v22) = 0;
LABEL_11:
  v23 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v23)
  {
    v34 = *(WTF::StringImpl ***)(a2 + 216);
    v35 = 248 * v23;
    do
    {
      WebKit::FrameState::~FrameState(v34);
      v34 = (WTF::StringImpl **)(v36 + 248);
      v35 -= 248;
    }
    while (v35);
  }
  v24 = *(WTF **)(a2 + 216);
  if (v24)
  {
    *(_QWORD *)(a2 + 216) = 0;
    *(_DWORD *)(a2 + 224) = 0;
    WTF::fastFree(v24, v18);
  }
  v38[0] = 0;
  v38[1] = 0;
  *(_QWORD *)(a2 + 216) = v21;
  *(_DWORD *)(a2 + 224) = v20;
  *(_DWORD *)(a2 + 228) = v22;
  return WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v18);
}

unsigned int *WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    else if (v5 > a1[2])
    {
      WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      LODWORD(v4) = a1[3];
    }
    v6 = *(WTF::StringImpl **)a2;
    v7 = *(WTF::StringImpl ***)a1;
    if ((_DWORD)v4)
    {
      v8 = 8 * v4;
      do
      {
        WTF::String::operator=(v7, v6);
        v6 = (WTF::StringImpl *)((char *)v6 + 8);
        ++v7;
        v8 -= 8;
      }
      while (v8);
      v6 = *(WTF::StringImpl **)a2;
      v9 = a1[3];
      v7 = *(WTF::StringImpl ***)a1;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(unsigned int *)(a2 + 12);
    if (v9 != (_DWORD)v10)
    {
      v11 = &v7[v9];
      v12 = (WTF::StringImpl **)((char *)v6 + 8 * v9);
      v13 = 8 * v10 - 8 * v9;
      do
      {
        v14 = *v12;
        if (*v12)
          *(_DWORD *)v14 += 2;
        *v11++ = v14;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    a1[3] = v10;
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 ShouldOpenExternalURLs;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[56];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  _BYTE v83[40];
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  BOOL v103;
  unint64_t v104;
  BOOL v105;
  char v106;
  __int128 v107;
  char v108;
  unint64_t v109;
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  WTF::StringImpl *v133;
  char v134;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v107);
  IPC::Decoder::decode<WTF::String>(a1, &v133);
  IPC::Decoder::decode<WebKit::FrameState>(&v111, a1);
  ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(a1);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>>(a1, &v109);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
    goto LABEL_47;
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v48 = v5;
    v49 = 0;
    goto LABEL_48;
  }
  v9 = *v8;
  if (v9 <= 1)
  {
    v10 = 0;
    v11 = v9 != 0;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v52 = a1[3];
    if (!v52 || !v5 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v6), !*a1))
    {
      v83[0] = 0;
      v106 = 0;
      goto LABEL_22;
    }
    v11 = 0;
    v10 = 1;
LABEL_5:
    if (v134)
    {
      v12 = v133;
      v133 = 0;
      if (v132)
      {
        v13 = *((_QWORD *)&v111 + 1);
        v5 = v111;
        *(_OWORD *)&v60[8] = v111;
        v14 = v112;
        v111 = 0u;
        v112 = 0u;
        *(_OWORD *)&v60[24] = v14;
        *(_OWORD *)&v60[40] = v113;
        *(_QWORD *)&v61 = v114;
        BYTE8(v61) = 0;
        LOBYTE(v63) = 0;
        if (v117)
        {
          v15 = v115;
          v115 = 0;
          *((_QWORD *)&v61 + 1) = v15;
          v16 = v116;
          v116 = 0;
          v62 = v16;
          LOBYTE(v63) = 1;
        }
        v64 = v118;
        v65 = v119;
        LOBYTE(v66) = 0;
        BYTE8(v67) = 0;
        if (v122)
        {
          v17 = v120;
          v120 = 0uLL;
          v66 = v17;
          *(_QWORD *)&v17 = v121;
          v121 = 0;
          *(_QWORD *)&v67 = v17;
          BYTE8(v67) = 1;
        }
        v69 = v124;
        v70 = v125;
        v71 = v126;
        LODWORD(v72) = v127;
        v68 = v123;
        v18 = v128;
        v128 = 0;
        *((_QWORD *)&v72 + 1) = v18;
        v19 = v129;
        v20 = HIDWORD(v129);
        v129 = 0;
        v73 = __PAIR64__(v20, v19);
        v21 = v130;
        v130 = 0;
        v74 = v21;
        v22 = v131;
        v23 = HIDWORD(v131);
        v131 = 0;
        v75 = __PAIR64__(v23, v22);
        if (ShouldOpenExternalURLs > 0xFFu)
        {
          LOBYTE(v76) = ShouldOpenExternalURLs;
          if (v110)
          {
            v24 = v109;
            v109 = 0;
            v77 = v24;
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    v48 = 0;
    v49 = 0;
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
        v49 = *a1;
        v48 = a1[1];
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
    }
LABEL_48:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v51 = a1[3];
    if (v51)
    {
      if (v48)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
  }
  v78 = v11;
  *(_QWORD *)v83 = v12;
  *(_QWORD *)&v83[8] = v5;
  memset(v60, 0, 40);
  *(_QWORD *)&v83[16] = v13;
  *(_OWORD *)&v83[24] = v14;
  v84 = v113;
  v85 = v114;
  LOBYTE(v86) = 0;
  v88 = 0;
  if (v117)
  {
    v86 = *((_QWORD *)&v61 + 1);
    v25 = v62;
    *((_QWORD *)&v61 + 1) = 0;
    v62 = 0;
    v87 = v25;
    v88 = 1;
  }
  v89 = v118;
  v90 = v119;
  LOBYTE(v91) = 0;
  v93 = 0;
  if (v122)
  {
    v26 = v66;
    v66 = 0uLL;
    v91 = v26;
    *(_QWORD *)&v26 = v67;
    *(_QWORD *)&v67 = 0;
    v92 = v26;
    v93 = 1;
  }
  v95 = v124;
  v96 = v125;
  v97 = v126;
  v98 = v127;
  v94 = v123;
  *((_QWORD *)&v72 + 1) = 0;
  v99 = v18;
  v73 = 0;
  v100 = __PAIR64__(v20, v19);
  v74 = 0;
  v101 = v21;
  v75 = 0;
  v102 = __PAIR64__(v23, v22);
  v103 = ShouldOpenExternalURLs;
  v104 = v24;
  v105 = v11;
  v106 = 1;
  v77 = 0;
  WebKit::FrameState::~FrameState((WTF::StringImpl **)&v60[8]);
  if (*(_QWORD *)v60)
  {
    if (**(_DWORD **)v60 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v60, v27);
    else
      **(_DWORD **)v60 -= 2;
  }
LABEL_22:
  std::__optional_destruct_base<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v109);
  if (v132)
    WebKit::FrameState::~FrameState((WTF::StringImpl **)&v111);
  if (v134)
  {
    v29 = v133;
    v133 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v5 = a1[1];
  if (!v106)
  {
    v53 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v54 = a1[3];
    if (!v54 || !v5)
    {
      v5 = 0;
      v30 = *a1;
LABEL_53:
      v55 = 0;
      v56 = 0;
      *a1 = 0;
      a1[1] = 0;
      v57 = a1[3];
      if (v57)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v30);
          v56 = *a1;
          v55 = a1[1];
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
      }
      goto LABEL_54;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v53);
    v5 = a1[1];
  }
  v30 = *a1;
  v31 = a1[2] - *a1;
  if (v5 <= v31)
    goto LABEL_53;
  v32 = (unsigned __int8 *)(v30 + v31);
  a1[2] = (uint64_t)(v32 + 1);
  if (!v30)
  {
    v55 = v5;
    v56 = 0;
LABEL_54:
    v5 = 0;
    v30 = 0;
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (v58)
    {
      if (v55)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56, v55);
        v30 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v30 = 0;
      }
    }
    goto LABEL_55;
  }
  v33 = *v32;
  if (v33 <= 1)
  {
    v34 = 0;
    v35 = v33 != 0;
    goto LABEL_34;
  }
LABEL_55:
  *a1 = 0;
  a1[1] = 0;
  v59 = a1[3];
  if (!v59 || !v5 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v30), !*a1))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 312) = 0;
    return std::__optional_destruct_base<WebKit::PageState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v83);
  }
  v35 = 0;
  v34 = 1;
LABEL_34:
  if (!v108)
    goto LABEL_46;
  *(_QWORD *)&v60[8] = *((_QWORD *)&v107 + 1);
  if (!v106)
    goto LABEL_46;
  *(_QWORD *)&v60[48] = *(_QWORD *)&v83[32];
  v36 = *(_OWORD *)v83;
  v37 = *(_OWORD *)&v83[16];
  memset(v83, 0, sizeof(v83));
  *(_OWORD *)&v60[16] = v36;
  *(_OWORD *)&v60[32] = v37;
  v61 = v84;
  v62 = v85;
  LOBYTE(v63) = 0;
  BYTE8(v64) = 0;
  if (v88)
  {
    v63 = v86;
    v38 = v87;
    v86 = 0;
    v87 = 0;
    *(_QWORD *)&v64 = v38;
    BYTE8(v64) = 1;
  }
  v65 = v89;
  v66 = v90;
  LOBYTE(v67) = 0;
  BYTE8(v68) = 0;
  if (v93)
  {
    v39 = v91;
    v91 = 0uLL;
    v67 = v39;
    *(_QWORD *)&v39 = v92;
    v92 = 0;
    *(_QWORD *)&v68 = v39;
    BYTE8(v68) = 1;
  }
  v70 = v95;
  v71 = v96;
  v72 = v97;
  LODWORD(v73) = v98;
  v69 = v94;
  v40 = v99;
  v99 = 0;
  v74 = v40;
  v41 = v100;
  v100 = 0;
  v75 = v41;
  v42 = v101;
  v101 = 0;
  v76 = v42;
  v43 = v102;
  v102 = 0;
  v77 = v43;
  v78 = v103;
  v44 = v104;
  v104 = 0;
  v79 = v44;
  v80 = v105;
  if (v34)
    goto LABEL_46;
  v81 = v35;
  v82 = 0;
  *(_OWORD *)a2 = v107;
  *(_QWORD *)&v60[16] = 0;
  *(_QWORD *)(a2 + 16) = v36;
  WebKit::FrameState::FrameState(a2 + 24, (uint64_t *)&v60[24]);
  *(_BYTE *)(a2 + 272) = v78;
  *(_QWORD *)(a2 + 280) = v79;
  *(_BYTE *)(a2 + 288) = v80;
  *(_BYTE *)(a2 + 296) = v81;
  *(_QWORD *)(a2 + 304) = v82;
  *(_BYTE *)(a2 + 312) = 1;
  v82 = 0;
  v79 = 0;
  WebKit::FrameState::~FrameState((WTF::StringImpl **)&v60[24]);
  v46 = *(WTF::StringImpl **)&v60[16];
  *(_QWORD *)&v60[16] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  return std::__optional_destruct_base<WebKit::PageState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v83);
}

void sub_196C4EEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::__optional_destruct_base<WebKit::PageState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a49);
  _Unwind_Resume(a1);
}

__n128 WebKit::FrameState::FrameState(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *((_OWORD *)a2 + 2);
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v8 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *(_DWORD *)(a1 + 64) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *(_DWORD *)(a1 + 68) = v8;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v9 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    v10 = a2[14];
    a2[14] = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = v10;
    v11 = a2[15];
    a2[15] = 0;
    *(_QWORD *)(a1 + 120) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = 0;
    *(_DWORD *)(a1 + 128) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 33);
    *((_DWORD *)a2 + 33) = 0;
    *(_DWORD *)(a1 + 132) = v11;
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
  result = *((__n128 *)a2 + 10);
  v13 = *((_OWORD *)a2 + 11);
  v14 = *((_OWORD *)a2 + 12);
  *(_DWORD *)(a1 + 208) = *((_DWORD *)a2 + 52);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = v14;
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v15 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(a1 + 216) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 224) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(a1 + 228) = v15;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v16 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(a1 + 244) = v16;
  return result;
}

_BYTE *std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::BufferSource,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

void IPC::Decoder::decode<WebKit::FrameState>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v2;
  WTF::StringImpl **v3;
  unint64_t v6;
  char v7;
  WTF::StringImpl **v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t (**v18)();
  char v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl **v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  WTF *v38;
  unint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  void *v54;
  WTF *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  void *v70;
  WTF *v71;
  uint64_t (**v72)();
  WTF *v73;
  unint64_t v74;
  WTF *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  WTF::StringImpl **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char v134;
  char v135;
  WTF::StringImpl *v136[2];
  char v137;
  __int128 v138;
  char v139;
  _QWORD v140[2];
  int v141;
  int v142;
  char v143;
  char v144;
  WTF *v145;
  int v146;
  char v147;
  char v148;
  __int128 v149;
  char v150;
  char v151;
  WTF::StringImpl *v152;
  char v153;
  WTF::StringImpl *v154;
  char v155;
  WTF::StringImpl *v156;
  char v157;
  WTF::StringImpl *v158;
  char v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  __int128 v164;
  int v165;
  char v166[24];
  WTF::StringImpl **v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  int v171;
  _QWORD v172[6];
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  char v176;
  __int128 v177;
  WTF *v178;
  uint64_t (**v179)();
  WTF *v180;
  unint64_t v181;
  char v182;
  WTF *v183;
  uint64_t (**v184)();
  unint64_t v185;
  char v186;
  WTF *v187;
  unint64_t v188;
  char v189;
  _BYTE v190[17];

  IPC::Decoder::decode<WTF::String>(a2, &v158);
  IPC::Decoder::decode<WTF::String>(a2, &v156);
  IPC::Decoder::decode<WTF::String>(a2, &v154);
  IPC::Decoder::decode<WTF::AtomString>(a2, &v152);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v149);
  IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, (uint64_t)&v145);
  v6 = IPC::Decoder::decode<long long>(a2);
  v135 = v7;
  v8 = (WTF::StringImpl **)v6;
  v9 = IPC::Decoder::decode<long long>(a2);
  v134 = v10;
  v11 = v9;
  v12 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
  v133 = v13;
  if (!v13)
    goto LABEL_166;
  while (1)
  {
    v14 = a2[1];
    v15 = *a2;
    v16 = a2[2] - *a2;
    if (v14 <= v16)
    {
      v88 = 0;
      v89 = 0;
      *a2 = 0;
      a2[1] = 0;
      v90 = a2[3];
      if (v90)
      {
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v90 + 16))(v90);
          v89 = *a2;
          v88 = a2[1];
        }
        else
        {
          v88 = 0;
          v89 = 0;
        }
      }
      goto LABEL_170;
    }
    v17 = (unsigned __int8 *)(v15 + v16);
    a2[2] = (uint64_t)(v17 + 1);
    if (!v15)
    {
      v88 = v14;
      v89 = 0;
LABEL_170:
      *a2 = 0;
      a2[1] = 0;
      v91 = a2[3];
      if (v91 && v88)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v89, v88);
        v18 = 0;
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v18 = 0;
      }
      goto LABEL_172;
    }
    v18 = (uint64_t (**)())*v17;
    if (v18 < 2)
    {
      v132 = 0;
      v19 = 1;
      goto LABEL_6;
    }
LABEL_172:
    *a2 = 0;
    a2[1] = 0;
    v92 = a2[3];
    if (v92 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v92 + 16))(v92, v15);
    v19 = 0;
    v132 = 1;
LABEL_6:
    if (!(_DWORD)v18)
      v19 = 0;
    v130 = v19;
    v131 = IPC::Decoder::decode<float>(a2);
    v20 = a2[1];
    v21 = (WTF::StringImpl *)*a2;
    v22 = a2[2] - *a2;
    if (v20 <= v22)
    {
      v93 = 0;
      v94 = 0;
      *a2 = 0;
      a2[1] = 0;
      v95 = a2[3];
      if (v95)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
          v94 = *a2;
          v93 = a2[1];
        }
        else
        {
          v93 = 0;
          v94 = 0;
        }
      }
      goto LABEL_175;
    }
    v23 = (unsigned __int8 *)v21 + v22;
    a2[2] = (uint64_t)(v23 + 1);
    if (!v21)
    {
      v93 = v20;
      v94 = 0;
LABEL_175:
      v20 = 0;
      v21 = 0;
      *a2 = 0;
      a2[1] = 0;
      v96 = a2[3];
      if (v96)
      {
        if (v93)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v94, v93);
          v21 = (WTF::StringImpl *)*a2;
          v20 = a2[1];
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
      }
LABEL_176:
      *a2 = 0;
      a2[1] = 0;
      v97 = a2[3];
      if (v97 && v20)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v97 + 16))(v97, v21);
      LOBYTE(v140[0]) = 0;
      v144 = 0;
      goto LABEL_178;
    }
    v24 = *v23;
    if (v24 >= 2)
      goto LABEL_176;
    if (!v24)
    {
      LOBYTE(v160) = 0;
      LOBYTE(v163) = 0;
      LOBYTE(v140[0]) = 0;
      v143 = 0;
      v144 = 1;
      v30 = &v160;
      goto LABEL_46;
    }
    IPC::Decoder::decode<WTF::String>(a2, v136);
    v25 = IPC::Decoder::decode<unsigned long long>(a2);
    if (!(_BYTE)v26)
      goto LABEL_35;
    v2 = v25;
    v138 = 0uLL;
    if (v25 >= 0x4924)
    {
      v18 = off_1E34AD740;
      LODWORD(v3) = 56;
      while (1)
      {
        IPC::Decoder::decode<WebKit::HTTPBody::Element>(&v160, a2);
        if (!v166[0])
          break;
        if (HIDWORD(v138) == DWORD2(v138))
        {
          WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)&v138, (unint64_t)&v160);
        }
        else
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v138 + 56 * HIDWORD(v138), (uint64_t)&v160);
          ++HIDWORD(v138);
        }
        if (v166[0] && v165 != -1)
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34AD740[v165])(v190, &v160);
        if (!--v2)
        {
          WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v138, HIDWORD(v138));
          v18 = (uint64_t (**)())v138;
          v187 = (WTF *)v138;
          LODWORD(v2) = DWORD2(v138);
          LODWORD(v3) = HIDWORD(v138);
          v138 = 0uLL;
          goto LABEL_28;
        }
      }
      LOBYTE(v187) = 0;
      v189 = 0;
      goto LABEL_34;
    }
    if (v25)
    {
      v27 = 56 * v25;
      v28 = WTF::fastMalloc((WTF *)(56 * v25));
      DWORD2(v138) = v27 / 0x38;
      *(_QWORD *)&v138 = v28;
      v18 = off_1E34AD740;
      LODWORD(v3) = 56;
      while (1)
      {
        IPC::Decoder::decode<WebKit::HTTPBody::Element>(&v160, a2);
        if (!v166[0])
          break;
        if (HIDWORD(v138) == DWORD2(v138))
        {
          WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)&v138, (unint64_t)&v160);
        }
        else
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(v138 + 56 * HIDWORD(v138), (uint64_t)&v160);
          ++HIDWORD(v138);
        }
        if (v166[0] && v165 != -1)
          ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34AD740[v165])(v190, &v160);
        if (!--v2)
        {
          v18 = (uint64_t (**)())v138;
          LODWORD(v2) = DWORD2(v138);
          LODWORD(v3) = HIDWORD(v138);
          goto LABEL_27;
        }
      }
      LOBYTE(v187) = 0;
LABEL_34:
      WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v138, v29);
LABEL_35:
      v21 = (WTF::StringImpl *)*a2;
      v34 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v35 = a2[3];
      if (v35)
      {
        if (v34)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v35 + 16))(v35, v21);
          if (*a2)
          {
            if (LOBYTE(v136[1]))
              v136[0] = 0;
            goto LABEL_165;
          }
        }
      }
      v36 = 0;
      LOBYTE(v183) = 0;
      v186 = 0;
      goto LABEL_40;
    }
    LODWORD(v3) = 0;
    v18 = 0;
LABEL_27:
    v138 = 0uLL;
    v187 = (WTF *)v18;
LABEL_28:
    v188 = __PAIR64__(v3, v2);
    v189 = 1;
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v138, v26);
    if (*a2)
    {
      if (!LOBYTE(v136[1]))
        goto LABEL_165;
      v32 = v136[0];
      v136[0] = 0;
      v187 = 0;
      v188 = 0;
      v160 = 0;
      v161 = 0;
      v183 = v32;
      v184 = v18;
      v162 = 0;
      v185 = __PAIR64__(v3, v2);
      v186 = 1;
      WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v31);
      v33 = v160;
      v160 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v33 -= 2;
      }
      v36 = 1;
    }
    else
    {
      v36 = 0;
      LOBYTE(v183) = 0;
      v186 = 0;
    }
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v187, v31);
LABEL_40:
    if (LOBYTE(v136[1]))
    {
      v37 = v136[0];
      v136[0] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::destroy(v37, v21);
          if (v36)
            goto LABEL_45;
          goto LABEL_148;
        }
        *(_DWORD *)v37 -= 2;
      }
    }
    if (v36)
      goto LABEL_45;
LABEL_148:
    v21 = (WTF::StringImpl *)*a2;
    v80 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v81 = a2[3];
    if (v81)
    {
      if (v80)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v81 + 16))(v81, v21);
        if (v186)
        {
          v18 = v184;
          LODWORD(v2) = v185;
          LODWORD(v3) = HIDWORD(v185);
LABEL_45:
          v38 = v183;
          v183 = 0;
          v184 = 0;
          v140[0] = v38;
          v140[1] = v18;
          v185 = 0;
          v141 = v2;
          v142 = (int)v3;
          v143 = 1;
          v144 = 1;
          v30 = &v183;
LABEL_46:
          std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30, v21);
          goto LABEL_47;
        }
      }
    }
    LOBYTE(v140[0]) = 0;
    v144 = 0;
    std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v183, v21);
LABEL_178:
    v98 = *a2;
    v99 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v100 = a2[3];
    if (v100 && v99)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v98);
LABEL_47:
    v39 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    v2 = v40;
    if (!v40)
    {
      v101 = *a2;
      v102 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v103 = a2[3];
      if (v103)
      {
        if (v102)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v101);
      }
    }
    v129 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
    v3 = (WTF::StringImpl **)v41;
    if (!v41)
    {
      v104 = *a2;
      v105 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v106 = a2[3];
      if (v106)
      {
        if (v105)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104);
      }
    }
    v42 = *a2;
    if (*a2)
    {
      if (!v2 || !v3)
        goto LABEL_165;
      v43 = v39 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v39) = 0;
      v43 = 0;
      v107 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v108 = a2[3];
      if (v108)
      {
        if (v107)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 16))(v108, 0);
        LOBYTE(v39) = 0;
        v43 = 0;
      }
    }
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v138);
    v44 = v11;
    v3 = v8;
    v126 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
    v127 = v45;
    v124 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a2);
    v46 = a2[1];
    v128 = v43;
    v125 = v47;
    if (!v47)
    {
      v109 = *a2;
      *a2 = 0;
      a2[1] = 0;
      v110 = a2[3];
      if (!v110 || !v46)
        goto LABEL_192;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, v109);
      v46 = a2[1];
    }
    v48 = *a2;
    v49 = a2[2] - *a2;
    if (v46 <= v49)
    {
      v111 = 0;
      v112 = 0;
      v122 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v122)
      {
        if (v46)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v122 + 16))(v122);
          v112 = *a2;
          v111 = a2[1];
        }
        else
        {
LABEL_192:
          v111 = 0;
          v112 = 0;
        }
      }
LABEL_193:
      *a2 = 0;
      a2[1] = 0;
      v113 = a2[3];
      if (v113 && v111)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, v112, v111);
        v51 = 0;
        v48 = *a2;
        v46 = a2[1];
      }
      else
      {
        v46 = 0;
        v48 = 0;
        v51 = 0;
      }
      goto LABEL_195;
    }
    v50 = (unsigned __int8 *)(v48 + v49);
    a2[2] = (uint64_t)(v50 + 1);
    if (!v48)
    {
      v111 = v46;
      v112 = 0;
      goto LABEL_193;
    }
    v51 = *v50;
    if (v51 < 2)
    {
      v11 = 0;
      v52 = 1;
      goto LABEL_58;
    }
LABEL_195:
    *a2 = 0;
    a2[1] = 0;
    v114 = a2[3];
    if (v114 && v46)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v48);
    v52 = 0;
    v11 = 1;
LABEL_58:
    if (v51)
      LODWORD(v2) = v52;
    else
      LODWORD(v2) = 0;
    IPC::Decoder::decode<WebCore::RectEdges<float>>(a2, (uint64_t)v136);
    v53 = IPC::Decoder::decode<unsigned long long>(a2);
    if (!(_BYTE)v54)
    {
      LOBYTE(v183) = 0;
      LOBYTE(v185) = 0;
LABEL_68:
      v57 = *a2;
      v58 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v59 = a2[3];
      if (v59 && v58)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57);
      goto LABEL_69;
    }
    v8 = (WTF::StringImpl **)v53;
    v187 = 0;
    v188 = 0;
    if (v53 >> 2 >= 0x421)
    {
      v123 = a1;
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameState>(&v160, a2);
        if (!v182)
          goto LABEL_210;
        if (HIDWORD(v188) == (_DWORD)v188)
        {
          WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameState>((uint64_t)&v187, (unint64_t)&v160);
        }
        else
        {
          WebKit::FrameState::FrameState((uint64_t)v187 + 248 * HIDWORD(v188), (uint64_t *)&v160);
          ++HIDWORD(v188);
        }
        if (v182)
          WebKit::FrameState::~FrameState(&v160);
        v8 = (WTF::StringImpl **)((char *)v8 - 1);
        if (!v8)
        {
          WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v187, HIDWORD(v188));
          v183 = v187;
          v118 = v188;
          v187 = 0;
          v188 = 0;
          v184 = (uint64_t (**)())v118;
          goto LABEL_66;
        }
      }
    }
    if (v53)
    {
      v123 = a1;
      v82 = 248 * v53;
      v83 = WTF::fastMalloc((WTF *)(248 * v53));
      LODWORD(v188) = v82 / 0xF8;
      v187 = (WTF *)v83;
      while (1)
      {
        IPC::Decoder::decode<WebKit::FrameState>(&v160, a2);
        if (!v182)
          break;
        if (HIDWORD(v188) == (_DWORD)v188)
        {
          WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameState>((uint64_t)&v187, (unint64_t)&v160);
        }
        else
        {
          WebKit::FrameState::FrameState((uint64_t)v187 + 248 * HIDWORD(v188), (uint64_t *)&v160);
          ++HIDWORD(v188);
        }
        if (v182)
          WebKit::FrameState::~FrameState(&v160);
        v8 = (WTF::StringImpl **)((char *)v8 - 1);
        if (!v8)
        {
          v55 = v187;
          v56 = v188;
          a1 = v123;
          goto LABEL_65;
        }
      }
LABEL_210:
      LOBYTE(v183) = 0;
      LOBYTE(v185) = 0;
      WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v187, v84);
      a1 = v123;
      goto LABEL_68;
    }
    v55 = 0;
    v56 = 0;
LABEL_65:
    v187 = 0;
    v188 = 0;
    v183 = v55;
    v184 = (uint64_t (**)())v56;
LABEL_66:
    LOBYTE(v185) = 1;
    WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v187, v54);
LABEL_69:
    IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v187, a2);
    if (!*a2)
    {
      *a1 = 0;
      a1[248] = 0;
      goto LABEL_115;
    }
    if (v189)
    {
      WebKit::FrameState::FrameState((WebKit::FrameState *)&v160);
      if (v159)
      {
        v62 = v158;
        v158 = 0;
        v63 = v160;
        v160 = v62;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v61);
          else
            *(_DWORD *)v63 -= 2;
        }
        if (v157)
        {
          v64 = v156;
          v156 = 0;
          v65 = v161;
          v161 = v64;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v61);
            else
              *(_DWORD *)v65 -= 2;
          }
          if (v155)
          {
            v66 = v154;
            v154 = 0;
            v67 = v162;
            v162 = v66;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, v61);
              else
                *(_DWORD *)v67 -= 2;
            }
            if (v153)
            {
              v68 = v152;
              v152 = 0;
              v69 = v163;
              v163 = v68;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  WTF::StringImpl::destroy(v69, v61);
                else
                  *(_DWORD *)v69 -= 2;
              }
              if (v151)
              {
                v8 = &v160;
                v164 = v149;
                LOBYTE(v165) = v150;
                if (v148)
                {
                  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)v166, (uint64_t)&v145);
                  if (v135)
                  {
                    v167 = v3;
                    if (v134)
                    {
                      v168 = v44;
                      if (v133)
                      {
                        v169 = v12;
                        if (!v132)
                        {
                          v170 = v130;
                          if ((v131 & 0xFF00000000) != 0)
                          {
                            v171 = v131;
                            if (v144)
                            {
                              std::__optional_storage_base<WebKit::HTTPBody,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::HTTPBody,false>>((WTF::StringImpl *)v172, (WTF::StringImpl *)v140);
                              if (v42)
                              {
                                v172[4] = v128 | v39;
                                v172[5] = v129;
                                if (v139)
                                {
                                  v173 = v138;
                                  if (v127)
                                  {
                                    v174 = v126;
                                    if (v125)
                                    {
                                      v175 = v124;
                                      if (!(_DWORD)v11)
                                      {
                                        v176 = v2;
                                        if (v137)
                                        {
                                          v177 = *(_OWORD *)v136;
                                          if ((_BYTE)v185)
                                          {
                                            if (HIDWORD(v179))
                                            {
                                              v119 = (WTF::StringImpl **)v178;
                                              v120 = 248 * HIDWORD(v179);
                                              do
                                              {
                                                WebKit::FrameState::~FrameState(v119);
                                                v119 = (WTF::StringImpl **)(v121 + 248);
                                                v120 -= 248;
                                              }
                                              while (v120);
                                            }
                                            v71 = v178;
                                            if (v178)
                                            {
                                              v178 = 0;
                                              LODWORD(v179) = 0;
                                              WTF::fastFree(v71, v70);
                                            }
                                            v178 = v183;
                                            v72 = v184;
                                            v183 = 0;
                                            v184 = 0;
                                            v179 = v72;
                                            if (v189)
                                              break;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_165:
    __break(1u);
LABEL_166:
    v85 = *a2;
    v86 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v87 = a2[3];
    if (v87 && v86)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v85);
  }
  if (HIDWORD(v181))
    WTF::VectorDestructor<true,WTF::String>::destruct(v180, (WTF *)((char *)v180 + 8 * HIDWORD(v181)));
  v73 = v180;
  if (v180)
  {
    v180 = 0;
    LODWORD(v181) = 0;
    WTF::fastFree(v73, v70);
  }
  v180 = v187;
  v74 = v188;
  v187 = 0;
  v188 = 0;
  v181 = v74;
  WebKit::FrameState::FrameState((uint64_t)a1, (uint64_t *)&v160);
  a1[248] = 1;
  WebKit::FrameState::~FrameState(&v160);
LABEL_115:
  if (v189)
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v187, v60);
  if ((_BYTE)v185)
    WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v183, v60);
  if (v144)
    std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v140, v60);
  if (v148)
  {
    if (v147)
    {
      v75 = v145;
      if (v145)
      {
        v145 = 0;
        v146 = 0;
        WTF::fastFree(v75, v60);
      }
    }
  }
  if (v153)
  {
    v76 = v152;
    v152 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v60);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (v155)
  {
    v77 = v154;
    v154 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v60);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (v157)
  {
    v78 = v156;
    v156 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v60);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (v159)
  {
    v79 = v158;
    v158 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v60);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (!a1[248])
  {
    v115 = *a2;
    v116 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v117 = a2[3];
    if (v117)
    {
      if (v116)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v115);
    }
  }
}

void sub_196C4FFC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF *a33,uint64_t a34,char a35,int a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,char a43,WTF::StringImpl *a44,char a45,WTF::StringImpl *a46,char a47,WTF::StringImpl *a48,char a49)
{
  uint64_t v49;
  void *v51;

  std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100](v49 - 160, a2);
  if (a37 && a35 && a33)
    WTF::fastFree(a33, v51);
  if (a43 && a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, (WTF::StringImpl *)v51);
    else
      *(_DWORD *)a42 -= 2;
  }
  if (a45 && a44)
  {
    if (*(_DWORD *)a44 == 2)
      WTF::StringImpl::destroy(a44, (WTF::StringImpl *)v51);
    else
      *(_DWORD *)a44 -= 2;
  }
  if (a47 && a46)
  {
    if (*(_DWORD *)a46 == 2)
      WTF::StringImpl::destroy(a46, (WTF::StringImpl *)v51);
    else
      *(_DWORD *)a46 -= 2;
  }
  if (a49 && a48)
  {
    if (*(_DWORD *)a48 == 2)
      WTF::StringImpl::destroy(a48, (WTF::StringImpl *)v51);
    else
      *(_DWORD *)a48 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::FrameState::~FrameState(WTF::StringImpl **this)
{
  WTF::RunLoop *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) != 0)
  {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 29), v3);
    WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 27), v4);
    std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 14), v5);
    if (*((_BYTE *)this + 72))
    {
      v7 = this[7];
      if (v7)
      {
        this[7] = 0;
        *((_DWORD *)this + 16) = 0;
        WTF::fastFree(v7, v6);
      }
    }
    v8 = this[3];
    this[3] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = this[2];
    this[2] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = this[1];
    this[1] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *this;
    *this = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void sub_196C5032C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 232, a2);
  WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 216, v4);
  std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100](v2 + 112, v5);
  if (*(_BYTE *)(v2 + 72))
  {
    v7 = *(WTF **)(v2 + 56);
    if (v7)
    {
      *(_QWORD *)(v2 + 56) = 0;
      *(_DWORD *)(v2 + 64) = 0;
      WTF::fastFree(v7, v6);
    }
  }
  WebCore::RegistrableDomain::~RegistrableDomain((WTF::StringImpl **)(v2 + 24), (WTF::StringImpl *)v6);
  v9 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::FrameState *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WebKit::FrameState **)a1;
  if ((_DWORD)v3)
  {
    v6 = 248 * v3;
    do
    {
      WebKit::FrameState::~FrameState(v4);
      v4 = (WebKit::FrameState *)(v7 + 248);
      v6 -= 248;
    }
    while (v6);
    v4 = *(WebKit::FrameState **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 3)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

uint64_t IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C50600(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ApplePayDisbursementRequest,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  _QWORD v6[2];
  char v7;

  result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      result = IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6);
      v5 = v7;
      if (v7)
      {
        *(_QWORD *)a2 = v6[0];
        *(_QWORD *)(a2 + 8) = v6[1];
        v5 = 1;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v5 = 1;
    }
    *(_BYTE *)(a2 + 24) = v5;
  }
  return result;
}

uint64_t WebKit::FrameState::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  WTF::StringImpl ***v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl **v17;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 24));
  v4 = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v4;
  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(a1 + 56, a2 + 56);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  std::__optional_storage_base<WebKit::HTTPBody,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::HTTPBody,false>>((WTF::StringImpl *)(a1 + 112), (WTF::StringImpl *)(a2 + 112));
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  v9 = (WTF::StringImpl ***)(a1 + 216);
  v10 = (_DWORD *)(a2 + 216);
  v11 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v11)
  {
    v15 = *v9;
    v16 = 248 * v11;
    do
    {
      v17 = v15;
      WebKit::FrameState::~FrameState(v15);
      v9 = (WTF::StringImpl ***)(a1 + 216);
      v10 = (_DWORD *)(a2 + 216);
      v15 = v17 + 31;
      v16 -= 248;
    }
    while (v16);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v9, v10);
  v12 = (WTF::StringImpl **)(a1 + 232);
  v13 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v13)
  {
    WTF::VectorDestructor<true,WTF::String>::destruct(*v12, (WTF::StringImpl *)((char *)*v12 + 8 * v13));
    v12 = (WTF::StringImpl **)(a1 + 232);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v12, (_DWORD *)(a2 + 232));
  return a1;
}

{
  void *v4;
  __int128 v5;
  unsigned int *v6;
  WTF *v7;
  WTF *v8;
  void *v9;
  __int128 v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  WebKit::FrameState *v42;
  const WebKit::FrameState *v43;
  uint64_t v44;
  uint64_t v46;
  char v47;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 24));
  v5 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = (unsigned int *)(a1 + 56);
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v6, a2 + 56);
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(WTF **)v6;
    if (v7)
    {
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      WTF::fastFree(v7, v4);
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    v8 = (WTF *)*(unsigned int *)(a2 + 68);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 68) = (_DWORD)v8;
    if ((_DWORD)v8)
    {
      v9 = (void *)WTF::fastMalloc(v8);
      *(_DWORD *)(a1 + 64) = (_DWORD)v8;
      *(_QWORD *)(a1 + 56) = v9;
      memcpy(v9, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  v11 = (WTF::StringImpl **)(a1 + 112);
  v12 = (WTF::StringImpl *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      WTF::String::operator=(v11, v12);
      if (a2 != a1)
      {
        v13 = (uint64_t *)(a1 + 120);
        v14 = *(unsigned int *)(a2 + 132);
        if (*(_DWORD *)(a1 + 132) <= v14)
        {
          if (v14 > *(_DWORD *)(a1 + 128))
          {
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 120, 0);
            WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 120, *(unsigned int *)(a2 + 132));
          }
        }
        else
        {
          WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1 + 120, v14);
        }
        v16 = *(_QWORD *)(a2 + 120);
        v17 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v17)
        {
          v18 = *v13;
          v19 = 56 * v17;
          while (1)
          {
            v20 = *(unsigned int *)(v18 + 48);
            v21 = *(unsigned int *)(v16 + 48);
            if ((_DWORD)v20 == -1)
            {
              if ((_DWORD)v21 != -1)
              {
LABEL_29:
                v46 = v18;
                ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E34DA800[v21])(&v46, v18, v16);
              }
            }
            else
            {
              if ((_DWORD)v21 != -1)
                goto LABEL_29;
              ((void (*)(char *, uint64_t))off_1E34DA7E8[v20])(&v47, v18);
              *(_DWORD *)(v18 + 48) = -1;
            }
            v16 += 56;
            v18 += 56;
            v19 -= 56;
            if (!v19)
            {
              v16 = *(_QWORD *)(a2 + 120);
              LODWORD(v17) = *(_DWORD *)(a1 + 132);
              break;
            }
          }
        }
        v22 = *(_DWORD *)(a2 + 132);
        if ((_DWORD)v17 != v22)
        {
          v23 = *v13 + 56 * v17;
          v24 = v16 + 56 * v17;
          v25 = 56 * v22 - 56 * v17;
          do
          {
            *(_BYTE *)v23 = 0;
            *(_DWORD *)(v23 + 48) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1> const&>(v23, v24);
            v24 += 56;
            v23 += 56;
            v25 -= 56;
          }
          while (v25);
          LODWORD(v17) = *(_DWORD *)(a2 + 132);
        }
        *(_DWORD *)(a1 + 132) = v17;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 136))
  {
    std::__optional_destruct_base<WebKit::HTTPBody,false>::reset[abi:sn180100]((WTF::StringImpl *)v11, v12);
  }
  else
  {
    v15 = *(_DWORD **)v12;
    if (*(_QWORD *)v12)
      *v15 += 2;
    *(_QWORD *)(a1 + 112) = v15;
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 120, a2 + 120);
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v26 = *(_OWORD *)(a2 + 160);
  v27 = *(_OWORD *)(a2 + 176);
  v28 = *(_OWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v27;
  *(_OWORD *)(a1 + 192) = v28;
  *(_OWORD *)(a1 + 160) = v26;
  if (a2 != a1)
  {
    v29 = (uint64_t *)(a1 + 216);
    v30 = *(_DWORD *)(a1 + 228);
    v31 = *(unsigned int *)(a2 + 228);
    if (v30 <= v31)
    {
      v35 = v31 > *(_DWORD *)(a1 + 224);
      LODWORD(v31) = *(_DWORD *)(a1 + 228);
      if (v35)
      {
        WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 216, 0);
        WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 216, *(unsigned int *)(a2 + 228));
        LODWORD(v31) = *(_DWORD *)(a1 + 228);
      }
    }
    else
    {
      v32 = (WTF::StringImpl **)(*v29 + 248 * v31);
      v33 = 248 * v30 - 248 * v31;
      do
      {
        WebKit::FrameState::~FrameState(v32);
        v32 = (WTF::StringImpl **)(v34 + 248);
        v33 -= 248;
      }
      while (v33);
      *(_DWORD *)(a1 + 228) = v31;
    }
    v36 = *(_QWORD *)(a2 + 216);
    if ((_DWORD)v31)
    {
      v37 = *v29;
      v38 = 248 * v31;
      do
      {
        v39 = WebKit::FrameState::operator=(v37, v36);
        v36 += 248;
        v37 = v39 + 248;
        v38 -= 248;
      }
      while (v38);
      v36 = *(_QWORD *)(a2 + 216);
      v40 = *(_DWORD *)(a1 + 228);
    }
    else
    {
      v40 = 0;
    }
    v41 = *(_DWORD *)(a2 + 228);
    if (v40 != v41)
    {
      v42 = (WebKit::FrameState *)(*v29 + 248 * v40);
      v43 = (const WebKit::FrameState *)(v36 + 248 * v40);
      v44 = 248 * v41 - 248 * v40;
      do
      {
        v42 = (WebKit::FrameState *)((char *)WebKit::FrameState::FrameState(v42, v43) + 248);
        v43 = (const WebKit::FrameState *)((char *)v43 + 248);
        v44 -= 248;
      }
      while (v44);
      v40 = *(_DWORD *)(a2 + 228);
    }
    *(_DWORD *)(a1 + 228) = v40;
  }
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 232), a2 + 232);
  return a1;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_31:
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v28 = v27 == 0;
    else
      v28 = 1;
    if (!v28)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
    return result;
  }
  v6 = v4;
  v32 = 0;
  v33 = 0;
  if (v4 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::AtomString>(a2, &v30);
      if (!v31)
      {
LABEL_30:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
        goto LABEL_31;
      }
      v18 = HIDWORD(v33);
      if (HIDWORD(v33) != (_DWORD)v33)
        break;
      v19 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
      v20 = HIDWORD(v33);
      v21 = HIDWORD(v33) + 1;
      v22 = v32;
      v23 = *v19;
      *v19 = 0;
      *(_QWORD *)(v22 + 8 * v20) = v23;
      HIDWORD(v33) = v21;
      if (v31)
        goto LABEL_24;
LABEL_28:
      if (!--v6)
      {
        WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v32, HIDWORD(v33));
        *(_QWORD *)a1 = v32;
        v29 = v33;
        v32 = 0;
        v33 = 0;
        *(_QWORD *)(a1 + 8) = v29;
        goto LABEL_19;
      }
    }
    v24 = v30;
    v30 = 0;
    *(_QWORD *)(v32 + 8 * HIDWORD(v33)) = v24;
    HIDWORD(v33) = v18 + 1;
LABEL_24:
    v25 = v30;
    v30 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v25 -= 2;
    }
    goto LABEL_28;
  }
  if (v4)
  {
    LODWORD(v33) = v4;
    v32 = WTF::fastMalloc((WTF *)(8 * v4));
    while (1)
    {
      IPC::Decoder::decode<WTF::AtomString>(a2, &v30);
      if (!v31)
        goto LABEL_30;
      v7 = HIDWORD(v33);
      if (HIDWORD(v33) != (_DWORD)v33)
        break;
      v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
      v9 = HIDWORD(v33);
      v10 = HIDWORD(v33) + 1;
      v11 = v32;
      v12 = *v8;
      *v8 = 0;
      *(_QWORD *)(v11 + 8 * v9) = v12;
      HIDWORD(v33) = v10;
      if (v31)
        goto LABEL_10;
LABEL_14:
      if (!--v6)
      {
        v15 = v32;
        v16 = v33;
        goto LABEL_18;
      }
    }
    v13 = v30;
    v30 = 0;
    *(_QWORD *)(v32 + 8 * HIDWORD(v33)) = v13;
    HIDWORD(v33) = v7 + 1;
LABEL_10:
    v14 = v30;
    v30 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v14 -= 2;
    }
    goto LABEL_14;
  }
  v15 = 0;
  v16 = 0;
LABEL_18:
  v32 = 0;
  v33 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v16;
LABEL_19:
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
}

void sub_196C50A04(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::decode<IPC::Decoder,WebCore::SerializedScriptValue>(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C50AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::decode<IPC::Decoder,WebCore::SerializedScriptValue>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  JSC::ArrayBufferContents *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  JSC::ArrayBufferContents *v48;
  JSC::ArrayBufferContents *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  WTF *v56;
  unint64_t v57;
  void *v58;
  WTF *v59;
  WTF *v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  WTF *v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  WTF *v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  WTF *v97;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  WTF *v106;
  int v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  int v116;
  WTF *v117;
  uint64_t v118;
  JSC::ArrayBufferContents *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  WTF *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  WTF *v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[8];
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;
  WTF *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  WTF *v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  WTF *v191;
  uint64_t v192;
  char v193;
  JSC::ArrayBufferContents *v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  char v198;

  v6 = a1[1];
  v7 = *a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    v31 = 0;
    v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v32 = *a1;
        v31 = a1[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
    goto LABEL_29;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v31 = v6;
    v32 = 0;
LABEL_29:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
        v7 = *a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_30;
  }
  v10 = *v9;
  if (v10 >= 2)
  {
LABEL_30:
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v7);
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v10)
  {
    *(_QWORD *)a2 = 0;
    goto LABEL_167;
  }
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v191);
  v11 = a1[1];
  v12 = *a1;
  v13 = a1[2] - *a1;
  if (v11 <= v13)
  {
    v36 = 0;
    v37 = 0;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (v38)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        v37 = *a1;
        v36 = a1[1];
      }
      else
      {
        v36 = 0;
        v37 = 0;
      }
    }
    goto LABEL_33;
  }
  v14 = (unsigned __int8 *)(v12 + v13);
  a1[2] = (uint64_t)(v14 + 1);
  if (!v12)
  {
    v36 = v11;
    v37 = 0;
LABEL_33:
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
        v12 = *a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_34;
  }
  v15 = *v14;
  if (v15 >= 2)
  {
LABEL_34:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v12);
LABEL_56:
    v54 = (void *)*a1;
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = (WTF *)a1[3];
    if (v56)
      goto LABEL_177;
    goto LABEL_57;
  }
  if (!v15)
  {
    v27 = 0;
    v28 = 0;
    goto LABEL_58;
  }
  v16 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v17)
    goto LABEL_55;
  v18 = v16;
  v188 = 0;
  v189 = 0;
  if (v16 < 0x4924)
  {
    if (v16)
    {
      LODWORD(v189) = 56 * (int)v16 / 0x38u;
      v188 = WTF::fastMalloc((WTF *)(56 * v16));
      LODWORD(v2) = 56;
      do
      {
        IPC::Decoder::decode<JSC::ArrayBufferContents>(&v161, a1);
        if (!(_BYTE)v168)
          goto LABEL_54;
        v19 = HIDWORD(v189);
        if (HIDWORD(v189) == (_DWORD)v189)
        {
          WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBufferContents>((uint64_t)&v188, (unint64_t)&v161);
        }
        else
        {
          v20 = v188 + 56 * HIDWORD(v189);
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(_BYTE *)(v20 + 48) = 0;
          *(_OWORD *)v20 = 0u;
          *(_QWORD *)v20 = v161;
          v161 = 0;
          v21 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = v162;
          v162 = v21;
          v22 = *(_QWORD *)(v20 + 16);
          *(_QWORD *)(v20 + 16) = v163;
          v163 = v22;
          v23 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)(v20 + 24) = v164;
          v164 = v23;
          *(_QWORD *)(v20 + 32) = v165;
          v165 = 0;
          v24 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v166;
          v166 = v24;
          *(_BYTE *)(v20 + 48) = v167;
          LOBYTE(v167) = 0;
          HIDWORD(v189) = v19 + 1;
        }
        if ((_BYTE)v168)
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)&v161);
        --v18;
      }
      while (v18);
      v25 = v188;
      v26 = v189;
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v188 = 0;
    v189 = 0;
    v194 = (JSC::ArrayBufferContents *)v25;
    v195 = v26;
    goto LABEL_25;
  }
  LODWORD(v2) = 56;
  do
  {
    IPC::Decoder::decode<JSC::ArrayBufferContents>(&v161, a1);
    if (!(_BYTE)v168)
    {
LABEL_54:
      WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v188, v17);
LABEL_55:
      v51 = *a1;
      v52 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v53 = a1[3];
      if (v53 && v52)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
      goto LABEL_56;
    }
    v41 = HIDWORD(v189);
    if (HIDWORD(v189) == (_DWORD)v189)
    {
      WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBufferContents>((uint64_t)&v188, (unint64_t)&v161);
    }
    else
    {
      v42 = v188 + 56 * HIDWORD(v189);
      *(_OWORD *)(v42 + 16) = 0u;
      *(_OWORD *)(v42 + 32) = 0u;
      *(_BYTE *)(v42 + 48) = 0;
      *(_OWORD *)v42 = 0u;
      *(_QWORD *)v42 = v161;
      v161 = 0;
      v43 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = v162;
      v162 = v43;
      v44 = *(_QWORD *)(v42 + 16);
      *(_QWORD *)(v42 + 16) = v163;
      v163 = v44;
      v45 = *(_QWORD *)(v42 + 24);
      *(_QWORD *)(v42 + 24) = v164;
      v164 = v45;
      *(_QWORD *)(v42 + 32) = v165;
      v165 = 0;
      v46 = *(_QWORD *)(v42 + 40);
      *(_QWORD *)(v42 + 40) = v166;
      v166 = v46;
      *(_BYTE *)(v42 + 48) = v167;
      LOBYTE(v167) = 0;
      HIDWORD(v189) = v41 + 1;
    }
    if ((_BYTE)v168)
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)&v161);
    --v18;
  }
  while (v18);
  v47 = HIDWORD(v189);
  v48 = (JSC::ArrayBufferContents *)v188;
  if (v189 <= HIDWORD(v189))
    goto LABEL_206;
  v49 = (JSC::ArrayBufferContents *)v188;
  if (!HIDWORD(v189))
    goto LABEL_50;
  if (HIDWORD(v189) >= 0x4924925)
  {
    __break(0xC471u);
    return;
  }
  LODWORD(v2) = 56 * HIDWORD(v189);
  v50 = WTF::fastMalloc((WTF *)(56 * HIDWORD(v189)));
  LODWORD(v189) = 56 * v47 / 0x38;
  v188 = v50;
  v49 = v48;
  if ((JSC::ArrayBufferContents *)v50 != v48)
  {
    WTF::VectorMover<false,JSC::ArrayBufferContents>::move(v48, (JSC::ArrayBufferContents *)((char *)v48 + 56 * v47), v50);
    v49 = (JSC::ArrayBufferContents *)v188;
  }
LABEL_50:
  if (v48)
  {
    if (v49 == v48)
    {
      v188 = 0;
      LODWORD(v189) = 0;
    }
    WTF::fastFree(v48, v17);
    v48 = (JSC::ArrayBufferContents *)v188;
  }
  else
  {
    v48 = v49;
  }
LABEL_206:
  v194 = v48;
  v142 = v189;
  v188 = 0;
  v189 = 0;
  v195 = v142;
LABEL_25:
  v196 = 1;
  WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v188, v17);
  v28 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  v30 = v194;
  v194 = 0;
  *(_QWORD *)v28 = v30;
  LODWORD(v30) = v195;
  LODWORD(v195) = 0;
  *(_DWORD *)(v28 + 8) = (_DWORD)v30;
  LODWORD(v30) = HIDWORD(v195);
  HIDWORD(v195) = 0;
  *(_DWORD *)(v28 + 12) = (_DWORD)v30;
  if (v196)
    WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v194, v29);
  v27 = 0;
LABEL_58:
  while (2)
  {
    v57 = IPC::Decoder::decode<unsigned long long>(a1);
    if (!(_BYTE)v58)
    {
      LOBYTE(v194) = 0;
      v196 = 0;
LABEL_84:
      v77 = *a1;
      v78 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v79 = a1[3];
      if (v79 && v78)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v77);
      goto LABEL_85;
    }
    v2 = v57;
    v161 = 0;
    v162 = 0;
    if (v57 >= 0x20000)
    {
      while (1)
      {
        IPC::Decoder::decode<std::unique_ptr<WebCore::DetachedRTCDataChannel>>(&v188, a1);
        if (!(_BYTE)v189)
        {
LABEL_83:
          LOBYTE(v194) = 0;
          v196 = 0;
          WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v60);
          goto LABEL_84;
        }
        v70 = HIDWORD(v162);
        if (HIDWORD(v162) != (_DWORD)v162)
          break;
        v71 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v188);
        v72 = HIDWORD(v162);
        v73 = HIDWORD(v162) + 1;
        v74 = v161;
        v75 = *v71;
        *v71 = 0;
        *((_QWORD *)v74 + v72) = v75;
        HIDWORD(v162) = v73;
        if ((_BYTE)v189)
          goto LABEL_79;
LABEL_81:
        if (!--v2)
        {
          v137 = v161;
          if (v162 > HIDWORD(v162))
          {
            if (HIDWORD(v162))
            {
              LODWORD(v162) = HIDWORD(v162);
              v137 = (WTF *)WTF::fastRealloc(v161, (void *)(8 * HIDWORD(v162)));
            }
            else if (v161)
            {
              v161 = 0;
              LODWORD(v162) = 0;
              WTF::fastFree(v137, v58);
              v137 = v161;
            }
          }
          v194 = v137;
          v140 = v162;
          v161 = 0;
          v162 = 0;
          v195 = v140;
          goto LABEL_74;
        }
      }
      v76 = v188;
      v188 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v76;
      HIDWORD(v162) = v70 + 1;
LABEL_79:
      v58 = (void *)v188;
      v188 = 0;
      if (v58)
        std::default_delete<WebCore::DetachedRTCDataChannel>::operator()[abi:sn180100]((int)&v188, (WTF *)v58);
      goto LABEL_81;
    }
    if (v57)
    {
      v59 = (WTF *)WTF::fastMalloc((WTF *)(8 * v57));
      LODWORD(v162) = v2;
      v161 = v59;
      while (1)
      {
        IPC::Decoder::decode<std::unique_ptr<WebCore::DetachedRTCDataChannel>>(&v188, a1);
        if (!(_BYTE)v189)
          goto LABEL_83;
        v61 = HIDWORD(v162);
        if (HIDWORD(v162) != (_DWORD)v162)
          break;
        v62 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v188);
        v63 = HIDWORD(v162);
        v64 = HIDWORD(v162) + 1;
        v65 = v161;
        v66 = *v62;
        *v62 = 0;
        *((_QWORD *)v65 + v63) = v66;
        HIDWORD(v162) = v64;
        if ((_BYTE)v189)
          goto LABEL_67;
LABEL_69:
        if (!--v2)
        {
          v68 = v161;
          v69 = v162;
          goto LABEL_73;
        }
      }
      v67 = v188;
      v188 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v67;
      HIDWORD(v162) = v61 + 1;
LABEL_67:
      v58 = (void *)v188;
      v188 = 0;
      if (v58)
        std::default_delete<WebCore::DetachedRTCDataChannel>::operator()[abi:sn180100]((int)&v188, (WTF *)v58);
      goto LABEL_69;
    }
    v68 = 0;
    v69 = 0;
LABEL_73:
    v161 = 0;
    v162 = 0;
    v194 = v68;
    v195 = v69;
LABEL_74:
    v196 = 1;
    WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, (WTF *)v58);
LABEL_85:
    v80 = IPC::Decoder::decode<unsigned long long>(a1);
    if (!(_BYTE)v81)
    {
      LOBYTE(v188) = 0;
      v190 = 0;
LABEL_111:
      v101 = *a1;
      v102 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v103 = a1[3];
      if (v103 && v102)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v101);
      goto LABEL_112;
    }
    v2 = v80;
    v161 = 0;
    v162 = 0;
    if (v80 >= 0x20000)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>>((uint64_t)&v185, a1);
        if (!(_BYTE)v186)
        {
LABEL_110:
          LOBYTE(v188) = 0;
          v190 = 0;
          WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v81);
          goto LABEL_111;
        }
        v93 = HIDWORD(v162);
        if (HIDWORD(v162) != (_DWORD)v162)
          break;
        v94 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v185);
        v95 = HIDWORD(v162);
        v96 = HIDWORD(v162) + 1;
        v97 = v161;
        v98 = *v94;
        *v94 = 0;
        *((_QWORD *)v97 + v95) = v98;
        HIDWORD(v162) = v96;
        if ((_BYTE)v186)
          goto LABEL_106;
LABEL_108:
        if (!--v2)
        {
          v138 = v161;
          if (v162 > HIDWORD(v162))
          {
            if (HIDWORD(v162))
            {
              LODWORD(v162) = HIDWORD(v162);
              v138 = (WTF *)WTF::fastRealloc(v161, (void *)(8 * HIDWORD(v162)));
            }
            else if (v161)
            {
              v161 = 0;
              LODWORD(v162) = 0;
              WTF::fastFree(v138, v81);
              v138 = v161;
            }
          }
          v188 = (uint64_t)v138;
          v141 = v162;
          v161 = 0;
          v162 = 0;
          v189 = v141;
          goto LABEL_101;
        }
      }
      v99 = v185;
      v185 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v99;
      HIDWORD(v162) = v93 + 1;
LABEL_106:
      v100 = (uint64_t)v185;
      v185 = 0;
      if (v100)
        WTF::ThreadSafeRefCounted<WebCore::WebCodecsEncodedAudioChunkStorage,(WTF::DestructionThread)0>::deref(v100, v81);
      goto LABEL_108;
    }
    if (v80)
    {
      v82 = (WTF *)WTF::fastMalloc((WTF *)(8 * v80));
      LODWORD(v162) = v2;
      v161 = v82;
      while (1)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>>((uint64_t)&v185, a1);
        if (!(_BYTE)v186)
          goto LABEL_110;
        v83 = HIDWORD(v162);
        if (HIDWORD(v162) != (_DWORD)v162)
          break;
        v84 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v185);
        v85 = HIDWORD(v162);
        v86 = HIDWORD(v162) + 1;
        v87 = v161;
        v88 = *v84;
        *v84 = 0;
        *((_QWORD *)v87 + v85) = v88;
        HIDWORD(v162) = v86;
        if ((_BYTE)v186)
          goto LABEL_94;
LABEL_96:
        if (!--v2)
        {
          v91 = v161;
          v92 = v162;
          goto LABEL_100;
        }
      }
      v89 = v185;
      v185 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v89;
      HIDWORD(v162) = v83 + 1;
LABEL_94:
      v90 = (uint64_t)v185;
      v185 = 0;
      if (v90)
        WTF::ThreadSafeRefCounted<WebCore::WebCodecsEncodedAudioChunkStorage,(WTF::DestructionThread)0>::deref(v90, v81);
      goto LABEL_96;
    }
    v91 = 0;
    v92 = 0;
LABEL_100:
    v161 = 0;
    v162 = 0;
    v188 = (uint64_t)v91;
    v189 = v92;
LABEL_101:
    v190 = 1;
    WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v81);
LABEL_112:
    v104 = IPC::Decoder::decode<unsigned long long>(a1);
    if (!(_BYTE)v105)
    {
      LOBYTE(v185) = 0;
      v187 = 0;
LABEL_146:
      v54 = (void *)*a1;
      v55 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v56 = (WTF *)a1[3];
      if (v56)
      {
        if (v55)
        {
          v56 = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)v56 + 16))(v56, v54);
          if (*a1)
          {
            v116 = 1;
            goto LABEL_130;
          }
        }
      }
      LOBYTE(v143[0]) = 0;
      v160 = 0;
      LODWORD(v2) = 1;
      goto LABEL_148;
    }
    v2 = v104;
    v161 = 0;
    v162 = 0;
    if (v104 >= 0x20000)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>>((uint64_t)&v197, a1);
        if (!v198)
        {
LABEL_145:
          LOBYTE(v185) = 0;
          v187 = 0;
          WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v105);
          goto LABEL_146;
        }
        v124 = HIDWORD(v162);
        if (HIDWORD(v162) != (_DWORD)v162)
          break;
        v125 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v197);
        v126 = HIDWORD(v162);
        v127 = HIDWORD(v162) + 1;
        v128 = v161;
        v129 = *v125;
        *v125 = 0;
        *((_QWORD *)v128 + v126) = v129;
        HIDWORD(v162) = v127;
        if (v198)
          goto LABEL_141;
LABEL_143:
        if (!--v2)
        {
          v139 = v161;
          if (v162 > HIDWORD(v162))
          {
            if (HIDWORD(v162))
            {
              LODWORD(v162) = HIDWORD(v162);
              v139 = (WTF *)WTF::fastRealloc(v161, (void *)(8 * HIDWORD(v162)));
            }
            else if (v161)
            {
              v161 = 0;
              LODWORD(v162) = 0;
              WTF::fastFree(v139, v105);
              v139 = v161;
            }
          }
          v185 = v139;
          LODWORD(v2) = v162;
          v3 = HIDWORD(v162);
          v161 = 0;
          v162 = 0;
          goto LABEL_128;
        }
      }
      v130 = v197;
      v197 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v130;
      HIDWORD(v162) = v124 + 1;
LABEL_141:
      v131 = v197;
      v197 = 0;
      if (v131)
        WTF::ThreadSafeRefCounted<WebCore::WebCodecsEncodedAudioChunkStorage,(WTF::DestructionThread)0>::deref(v131, v105);
      goto LABEL_143;
    }
    if (v104)
    {
      v106 = (WTF *)WTF::fastMalloc((WTF *)(8 * v104));
      LODWORD(v162) = v2;
      v161 = v106;
      while (1)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>>((uint64_t)&v197, a1);
        if (!v198)
          goto LABEL_145;
        v107 = HIDWORD(v162);
        if (HIDWORD(v162) != (_DWORD)v162)
          break;
        v108 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v197);
        v109 = HIDWORD(v162);
        v110 = HIDWORD(v162) + 1;
        v111 = v161;
        v112 = *v108;
        *v108 = 0;
        *((_QWORD *)v111 + v109) = v112;
        HIDWORD(v162) = v110;
        if (v198)
          goto LABEL_121;
LABEL_123:
        if (!--v2)
        {
          v115 = v161;
          LODWORD(v2) = v162;
          v3 = HIDWORD(v162);
          goto LABEL_127;
        }
      }
      v113 = v197;
      v197 = 0;
      *((_QWORD *)v161 + HIDWORD(v162)) = v113;
      HIDWORD(v162) = v107 + 1;
LABEL_121:
      v114 = v197;
      v197 = 0;
      if (v114)
        WTF::ThreadSafeRefCounted<WebCore::WebCodecsEncodedAudioChunkStorage,(WTF::DestructionThread)0>::deref(v114, v105);
      goto LABEL_123;
    }
    v3 = 0;
    v115 = 0;
LABEL_127:
    v161 = 0;
    v162 = 0;
    v185 = v115;
LABEL_128:
    v186 = __PAIR64__(v3, v2);
    v187 = 1;
    v56 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v105);
    if (*a1)
    {
      v116 = 0;
LABEL_130:
      if (v193)
      {
        v117 = v191;
        v118 = v192;
        v191 = 0;
        v192 = 0;
        if (!v27)
        {
          if (v196)
          {
            v119 = v194;
            v120 = v195;
            v194 = 0;
            v195 = 0;
            if (v190)
            {
              v121 = v188;
              v122 = v189;
              v188 = 0;
              v189 = 0;
              if (!v116)
              {
                v123 = v185;
                v185 = 0;
                v186 = 0;
                v177 = 0u;
                v178 = 0u;
                v179 = 0u;
                v180 = 0u;
                v181 = 0u;
                v182 = 0u;
                v183 = 0u;
                v184 = 0;
                v161 = 0;
                v143[0] = v117;
                v162 = 0;
                v143[1] = v118;
                v163 = 0;
                v164 = 0;
                v143[2] = v28;
                v143[3] = v119;
                v165 = 0;
                v143[4] = v120;
                v166 = 0;
                v143[5] = v121;
                v167 = 0;
                v143[6] = v122;
                v168 = 0;
                v143[7] = v123;
                v169 = 0;
                v144 = v2;
                v145 = v3;
                v170 = 0;
                v146 = 0;
                v171 = 0;
                v147 = 0;
                v172 = 0;
                v148 = 0;
                v173 = 0;
                v149 = 0;
                v174 = 0;
                v150 = 0;
                v175 = 0;
                v151 = 0;
                v176 = 0;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v158 = 0u;
                v159 = 0u;
                v160 = 1;
                WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)&v161, v54);
                LODWORD(v2) = 0;
                v28 = 0;
                goto LABEL_136;
              }
            }
          }
        }
      }
LABEL_176:
      __break(1u);
LABEL_177:
      if (v55)
        (*(void (**)(WTF *, void *))(*(_QWORD *)v56 + 16))(v56, v54);
LABEL_57:
      v28 = 0;
      v27 = 1;
      continue;
    }
    break;
  }
  LOBYTE(v143[0]) = 0;
  v160 = 0;
  LODWORD(v2) = 1;
LABEL_136:
  v56 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v185, v54);
LABEL_148:
  if (v190)
    v56 = (WTF *)WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v188, v54);
  if (v196)
    v56 = (WTF *)WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v194, (WTF *)v54);
  if (v28)
    v132 = v27;
  else
    v132 = 1;
  if ((v132 & 1) == 0)
  {
    v133 = (WTF *)WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28, v54);
    v56 = (WTF *)WTF::fastFree(v133, v134);
  }
  if (v193)
  {
    v56 = v191;
    if (v191)
    {
      v191 = 0;
      LODWORD(v192) = 0;
      v56 = (WTF *)WTF::fastFree(v56, v54);
    }
  }
  if ((_DWORD)v2)
  {
    v54 = (void *)*a1;
    v55 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v56 = (WTF *)a1[3];
    if (v56)
    {
      if (v55)
        v56 = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)v56 + 16))(v56, v54);
    }
  }
  v135 = *a1;
  if (*a1)
  {
    if (!v160)
      goto LABEL_176;
    v136 = WTF::fastMalloc((WTF *)0x100);
    WebCore::SerializedScriptValue::SerializedScriptValue();
LABEL_164:
    WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)v143, v54);
  }
  else
  {
    v136 = 0;
    if (v160)
      goto LABEL_164;
  }
  *a2 = 0;
  a2[8] = 0;
  if (v135)
  {
    *(_QWORD *)a2 = v136;
LABEL_167:
    a2[8] = 1;
  }
}

void sub_196C518F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  void *v51;
  WTF *v52;

  if (a49)
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)&a42);
  WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v49 - 152, a2);
  if (*(_BYTE *)(v49 - 112))
  {
    v52 = *(WTF **)(v49 - 128);
    if (v52)
    {
      *(_QWORD *)(v49 - 128) = 0;
      *(_DWORD *)(v49 - 120) = 0;
      WTF::fastFree(v52, v51);
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::AtomString>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::AtomString,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::AtomString,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = (WTF::StringImpl *)a1;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v7);
  v6 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
  {
    *a2 = 0;
    goto LABEL_7;
  }
  if (v8)
  {
    v2 = v7;
    v7 = 0;
    if (!v2)
      goto LABEL_6;
    v9 = v2;
    if ((*((_BYTE *)v2 + 16) & 0x10) != 0)
      goto LABEL_6;
    WTF::AtomStringImpl::addSlowCase();
    result = v9;
    v2 = v10;
    v9 = 0;
    v10 = 0;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    __break(1u);
  }
  if (*(_DWORD *)result == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  else
    *(_DWORD *)result -= 2;
LABEL_6:
  *(_QWORD *)a2 = v2;
  LOBYTE(v6) = 1;
LABEL_7:
  a2[8] = v6;
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C51BB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::parseInteger<unsigned int>(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
    return WTF::parseInteger<unsigned int,unsigned char>(a1, a2);
  else
    return WTF::parseInteger<unsigned int,char16_t>(a1, a2);
}

WTF *WebKit::RemoteDisplayListRecorderProxy::recordDrawGlyphs(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  WebKit::RemoteImageBufferProxy *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  WTF *result;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  int v56;
  int v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  _BYTE *v61;
  char v62;
  WTF *v63;
  int v64;
  WTF *v65;
  int v66;
  char *v67;
  WebKit::RemoteImageBufferProxy *v68;
  IPC::StreamClientConnection *v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  _BYTE buf[24];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  WebCore::DisplayList::DrawGlyphs::DrawGlyphs();
  v67 = &v62;
  v3 = a1[481];
  if (!v3)
    goto LABEL_40;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v4)
    goto LABEL_40;
  WebKit::RemoteRenderingBackendProxy::connection(v4, (unsigned int **)&v69);
  if (!v69)
    goto LABEL_40;
  v5 = (WTF *)a1[479];
  if (v5)
    goto LABEL_97;
  v68 = 0;
  while (1)
  {
    v6 = v69;
    v7 = a1[478];
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
      if (!buf[16])
      {
        v43 = 15;
LABEL_100:
        v57 = v43;
        goto LABEL_89;
      }
      v35 = *(_QWORD *)buf;
      v36 = *(_QWORD *)&buf[8];
      v37 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - *(_QWORD *)buf;
      if (v37 < *(_QWORD *)buf)
      {
        v40 = 0;
        v39 = *(_QWORD *)&buf[8];
      }
      else
      {
        v39 = 0;
        if (v38 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v38 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v38) = 2822;
            v39 = v36;
            v40 = v38 + 2;
          }
        }
      }
      v41 = (v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v41 >= v35 + v40)
      {
        v42 = v41 - v35;
        v43 = 17;
        if (v42 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_100;
        v40 = v42 + 8;
        if (v42 + 8 > v39)
          goto LABEL_100;
        *(_QWORD *)(v35 + v42) = v7;
      }
      if (!v39)
      {
        v43 = 17;
        goto LABEL_100;
      }
      v44 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = *((_QWORD *)v6 + 7);
      if (v44 + 16 >= v45)
        v44 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v46 = v44 + v40;
      if (v45 <= v46)
        v47 = 0;
      else
        v47 = v46;
      *((_QWORD *)v6 + 9) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *((_DWORD *)v6 + 27);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v52 = v50 + 1;
        *((_DWORD *)v6 + 27) = v52;
        if (v52 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v70, v9);
    if (!v72)
    {
      v57 = 15;
      goto LABEL_89;
    }
    *(_QWORD *)buf = v70;
    *(_QWORD *)&buf[8] = v71;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v70;
    v12 = v10 - v70;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v71)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v70 + v12) = 816;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode((uint64_t *)buf, v67);
    if (*(_QWORD *)&buf[8])
    {
      v14 = *(_QWORD *)&buf[16];
      v15 = *((_QWORD *)v6 + 8);
      v16 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = *((_QWORD *)v6 + 7);
      if (v16 + 16 >= v17)
        v16 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v14 = 16;
      v18 = v16 + v14;
      if (v17 <= v18)
        v19 = 0;
      else
        v19 = v18;
      *((_QWORD *)v6 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      if (v21 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_27;
    }
    if (v72)
      break;
    __break(1u);
LABEL_97:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, a1[480], &v68);
    v5 = v68;
    if (v68)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v68);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v70, v71);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v56 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawGlyphs>(*(uint64_t *)buf, (uint64_t **)&v67, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  v57 = v56;
  if (!v56)
    goto LABEL_27;
LABEL_89:
  v58 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v59 = IPC::errorAsString(v57);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawGlyphs";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v59;
    _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v60 = a1[481];
  if (v60)
  {
    v61 = *(_BYTE **)(v60 + 8);
    if (v61)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
  }
LABEL_27:
  v22 = v68;
  v68 = 0;
  if (v22)
  {
    v23 = *((_QWORD *)v22 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
LABEL_31:
      v25 = *(_QWORD *)(v23 + 8);
      v26 = v25 - 1;
      *(_QWORD *)(v23 + 8) = v25 - 1;
      if (v25 == 1)
      {
        v55 = *(_QWORD *)(v23 + 16);
        v27 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)(v23 + 24) = 0;
        v28 = v55 != 0;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      v29 = __ldxr((unsigned __int8 *)v23);
      if (v29 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_35:
      if (!v26)
      {
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v2);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v23);
    goto LABEL_31;
  }
LABEL_36:
  v30 = (unsigned int *)v69;
  v69 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v30);
      WTF::fastFree(v53, v54);
    }
  }
LABEL_40:
  v33 = v65;
  if (v65)
  {
    v65 = 0;
    v66 = 0;
    WTF::fastFree(v33, v2);
  }
  result = v63;
  if (v63)
  {
    v63 = 0;
    v64 = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v11;
  WTF *v12;
  WTF *result;
  WTF *v14;
  int v15;
  WTF *v16;
  int v17;

  v3 = a1[2];
  v4 = *a1 + v3;
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v8 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v8) = *a2;
      a1[2] = v9;
    }
  }
  WebCore::PositionedGlyphs::PositionedGlyphs((WebCore::PositionedGlyphs *)&v14, (const WebCore::PositionedGlyphs *)(a2 + 1));
  IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, (uint64_t)&v14);
  v12 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree(v12, v11);
  }
  result = v14;
  if (v14)
  {
    v14 = 0;
    v15 = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

WebCore::PositionedGlyphs *WebCore::PositionedGlyphs::PositionedGlyphs(WebCore::PositionedGlyphs *this, const WebCore::PositionedGlyphs *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this, (uint64_t)a2);
  WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4 + 16, (uint64_t)a2 + 16);
  v5 = *((_QWORD *)a2 + 4);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_QWORD *)this + 4) = v5;
  return this;
}

void sub_196C52210(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    memcpy(v5, *(const void **)a2, 16 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v3 = result;
  v4 = *(const void **)a2;
  v5 = *(unsigned int *)(a2 + 12);
  v6 = *result;
  v7 = result[2];
  v8 = *result + v7;
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v9 >= v8;
  v10 = v9 - v8;
  if (v15)
  {
    v11 = v10 + v7;
    v12 = v10 + v7 + 8;
    if (v11 > 0xFFFFFFFFFFFFFFF7 || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(v6 + v11) = v5;
      result[2] = v12;
      v6 = *result;
      v7 = v12;
    }
  }
  v14 = (char *)((v6 + v7 + 1) & 0xFFFFFFFFFFFFFFFELL);
  if ((_DWORD)v5)
    v15 = (unint64_t)v14 >= v6 + v7;
  else
    v15 = 0;
  if (v15)
  {
    v16 = (unint64_t)&v14[2 * v5 - v6];
    if (__CFADD__(&v14[-v6], 2 * v5) || v16 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      result = (uint64_t *)memcpy(v14, v4, 2 * v5);
      v3[2] = v16;
      v6 = *v3;
      v7 = v16;
    }
  }
  v17 = *(unsigned int *)(a2 + 28);
  v18 = (v6 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 - (v6 + v7);
  if (v18 >= v6 + v7)
  {
    v20 = v18 - v6;
    v21 = v19 + v7 + 8;
    if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v3[1])
    {
      v3[1] = 0;
    }
    else
    {
      *(_QWORD *)(v6 + v20) = v17;
      v3[2] = v21;
      v17 = *(unsigned int *)(a2 + 28);
      v7 = v21;
    }
  }
  if ((_DWORD)v17)
  {
    v23 = *(_QWORD **)(a2 + 16);
    v24 = &v23[2 * v17];
    do
    {
      v25 = *v3;
      v26 = *v3 + v7;
      v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
      v15 = v27 >= v26;
      v28 = v27 - v26;
      if (v15)
      {
        v29 = v28 + v7;
        v30 = v28 + v7 + 8;
        if (v29 > 0xFFFFFFFFFFFFFFF7 || v30 > v3[1])
        {
          v3[1] = 0;
        }
        else
        {
          *(_QWORD *)(v25 + v29) = *v23;
          v3[2] = v30;
          v25 = *v3;
          v7 = v30;
        }
      }
      v32 = (v25 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      v33 = v32 - (v25 + v7);
      if (v32 >= v25 + v7)
      {
        v34 = v32 - v25;
        v35 = v33 + v7 + 8;
        if (v34 > 0xFFFFFFFFFFFFFFF7 || v35 > v3[1])
        {
          v3[1] = 0;
        }
        else
        {
          *(_QWORD *)(v25 + v34) = v23[1];
          v3[2] = v35;
          v7 = v35;
        }
      }
      v23 += 2;
    }
    while (v23 != v24);
  }
  v37 = *v3;
  v38 = *v3 + v7;
  v39 = (v38 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v39 >= v38;
  v40 = v39 - v38;
  if (v15)
  {
    v41 = v40 + v7;
    v42 = v40 + v7 + 4;
    if (v41 > 0xFFFFFFFFFFFFFFFBLL || v42 > v3[1])
    {
      v3[1] = 0;
    }
    else
    {
      *(_DWORD *)(v37 + v41) = *(_DWORD *)(a2 + 32);
      v3[2] = v42;
      v37 = *v3;
      v7 = v42;
    }
  }
  v44 = (v37 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v45 = v44 - (v37 + v7);
  if (v44 >= v37 + v7)
  {
    v46 = v44 - v37;
    v47 = v45 + v7 + 4;
    if (v46 > 0xFFFFFFFFFFFFFFFBLL || v47 > v3[1])
    {
      v3[1] = 0;
    }
    else
    {
      *(_DWORD *)(v37 + v46) = *(_DWORD *)(a2 + 36);
      v3[2] = v47;
      v7 = v47;
    }
  }
  if (v7 >= v3[1])
  {
    v3[1] = 0;
  }
  else
  {
    *(_BYTE *)(*v3 + v7) = *(_BYTE *)(a2 + 40);
    v3[2] = v7 + 1;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::createCompatibleLayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;

  v5 = *(_QWORD *)(a1 + 832);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    result = WebKit::PlatformCALayerRemote::create(&v8, a2, a3, v6);
    *a4 = v8;
  }
  else
  {
    result = 1106;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN6WebKit11XPCEndpointC2Ev_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
}

void sub_196C52670(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::GraphicsLayerCARemote *WebKit::RemoteLayerTreeContext::createGraphicsLayer@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebKit::GraphicsLayerCARemote **a4@<X8>)
{
  WebKit::GraphicsLayerCARemote *v8;
  WebKit::GraphicsLayerCARemote *result;

  v8 = (WebKit::GraphicsLayerCARemote *)WTF::fastMalloc((WTF *)0x390);
  result = WebKit::GraphicsLayerCARemote::GraphicsLayerCARemote(v8, a2, a3, a1);
  *a4 = v8;
  return result;
}

void sub_196C526EC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::GraphicsLayerCARemote *WebKit::GraphicsLayerCARemote::GraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = (_QWORD *)WebCore::GraphicsLayerCA::GraphicsLayerCA();
  v6[112] = 0;
  *v6 = &off_1E34D60C0;
  v6[76] = &unk_1E34D65C8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a4 + 4, (uint64_t)a4);
  v7 = (unsigned int *)*((_QWORD *)a4 + 2);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)a1 + 113) = v7;
  WebKit::RemoteLayerTreeContext::graphicsLayerDidEnterContext((WebKit::RemoteLayerTreeContext *)a4, a1);
  return a1;
}

void sub_196C52780(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v4 = v2[113];
  v2[113] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2 + 112, a2);
  WebCore::GraphicsLayerCA::~GraphicsLayerCA((WebCore::GraphicsLayerCA *)v2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::RemoteLayerTreeContext::graphicsLayerDidEnterContext(WebKit::RemoteLayerTreeContext *this, WebKit::GraphicsLayerCARemote *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;

  v3 = (uint64_t *)((char *)this + 80);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 224, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 112);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v11 = (WTF *)v4;
  WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::add(v3, (uint64_t **)&v11, (uint64_t)&v10);
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void sub_196C52858(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int v13;
  unsigned int v14;

  if (a12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)a12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)a12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::add@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t **v30;
  uint64_t v31;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = (*a2)[1];
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (uint64_t **)(v6 + 8 * v17);
    v19 = *v18;
    if (!*v18)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *a2;
        v18 = v9;
      }
      *a2 = 0;
      result = *v18;
      *v18 = v10;
      if (result)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)result);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)result));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)result);
          v30 = v18;
          result = (uint64_t *)WTF::fastFree((WTF *)result, v18);
          v18 = v30;
        }
      }
      v20 = *v4;
      if (*v4)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v4;
      if (*v4)
        v23 = *(_DWORD *)(v22 - 12);
      else
        v23 = 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24)
          goto LABEL_17;
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_17:
        v26 = v22 + 8 * v25;
        v27 = 1;
        goto LABEL_18;
      }
      result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::expand(v4, (unsigned int **)v18);
      v18 = (uint64_t **)result;
      v22 = *v4;
      if (*v4)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_17;
    }
    if (v19 != (uint64_t *)-1)
      break;
    v9 = (uint64_t **)(v6 + 8 * v17);
LABEL_7:
    v15 = i + v17;
  }
  if (v19[1] != v11)
    goto LABEL_7;
  if ((v7 & 1) != 0)
    v31 = 0;
  else
    v31 = *(unsigned int *)(v6 - 4);
  v27 = 0;
  v26 = v6 + 8 * v31;
LABEL_18:
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (unsigned int *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
    goto LABEL_20;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v5, a2);
}

unint64_t WebKit::PlatformCALayerRemote::setBorderColor(int8x16_t *this, const WebCore::Color *a2, const Color *a3)
{
  unint64_t result;
  unint64_t v5;

  result = *(_QWORD *)a2;
  v5 = this[40].u64[0];
  if (((result | v5) & 0x8000000000000) != 0)
  {
    result = WebCore::outOfLineComponentsEqual(result, v5, a3);
    if ((result & 1) != 0)
      return result;
  }
  else if (result == v5)
  {
    return result;
  }
  result = WebCore::Color::operator=();
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x400000uLL));
  return result;
}

uint64_t WebKit::RemoteImageDecoderAVF::supportsMediaType(WebCore::AVAssetMIMETypeCache *a1)
{
  WebCore::AVAssetMIMETypeCache *v1;

  if ((_DWORD)a1 != 1)
    return 0;
  v1 = (WebCore::AVAssetMIMETypeCache *)WebCore::AVAssetMIMETypeCache::singleton(a1);
  return WebCore::AVAssetMIMETypeCache::isAvailable(v1);
}

uint64_t WebCore::CubicBezierTimingFunction::type(WebCore::CubicBezierTimingFunction *this)
{
  return 1;
}

uint64_t WebKit::WebLocalFrameLoaderClient::representationExistsForURLScheme()
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setOpaque(WebCore::TileController **this)
{
  return WebCore::TileController::setTilesOpaque(this[105]);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setContentsScale(WebKit::PlatformCALayerRemoteTiledBacking *this, float a2)
{
  if (*((_BYTE *)this + 12) != 3)
  {
    *((float *)this + 153) = a2;
    *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x20000uLL));
    WebKit::PlatformCALayerRemote::updateBackingStore(this);
  }
  return WebCore::TileController::setContentsScale(*((WebCore::TileController **)this + 105), a2);
}

void WebKit::PlatformCALayerRemote::setNeedsDisplayInRect(WebKit::RemoteLayerBackingStore **this, const WebCore::FloatRect *a2)
{
  WebKit::RemoteLayerBackingStore *v4;
  const FloatRect *v5;
  uint64_t v6;
  IntSize v7;
  IntSize v8;
  IntPoint v9;
  IntSize v10;

  if (*((_BYTE *)this + 656))
  {
    WebKit::PlatformCALayerRemote::ensureBackingStore((WebKit::PlatformCALayerRemote *)this, a2);
    v4 = this[59];
    v6 = WebCore::enclosingIntRect(a2, v5);
    v8 = v7;
    v9 = (IntPoint)v6;
    v10 = v8;
    WebKit::RemoteLayerBackingStore::setNeedsDisplay(v4, v9, v10);
  }
}

void WebKit::PlatformCALayerRemote::setNeedsDisplay(WebKit::RemoteLayerBackingStore **this, WebKit::PlatformCALayerRemote *a2)
{
  if (*((_BYTE *)this + 656))
  {
    WebKit::PlatformCALayerRemote::ensureBackingStore((WebKit::PlatformCALayerRemote *)this, a2);
    WebKit::RemoteLayerBackingStore::setNeedsDisplay(this[59]);
  }
}

void WebKit::PlatformCALayerRemote::ensureBackingStore(WebKit::PlatformCALayerRemote *this, WebKit::PlatformCALayerRemote *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebKit::PlatformCALayerRemote *v6;
  uint64_t v7;
  WebKit::RemoteLayerWithRemoteRenderingBackingStore *v8;

  v3 = *((_QWORD *)this + 104);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v4 = *((_QWORD *)this + 59);
      if (!v4
        || (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4),
            v5 != WebKit::RemoteLayerBackingStore::processModelForLayer(this, v6)))
      {
        WebKit::RemoteLayerBackingStore::createForLayer(this, a2, &v8);
        v7 = *((_QWORD *)this + 59);
        *((_QWORD *)this + 59) = v8;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

uint64_t WebKit::GraphicsLayerCARemote::createPlatformCALayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebCore::PlatformCALayer **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::PlatformCALayer *v7;
  uint64_t result;
  WebCore::Widget *v9;
  uint64_t v10;
  WebCore::PlatformCALayer *v11;

  v5 = *(_QWORD *)(a1 + 904);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    WebKit::PlatformCALayerRemote::create((unsigned int **)&v11, a2, a3, v6);
    v7 = v11;
    result = WebCore::PlatformCALayer::canHaveBackingStore(v11);
    if ((_DWORD)result)
    {
      v10 = WebCore::screenSupportsExtendedColor(0, v9);
      result = (*(uint64_t (**)(WebCore::PlatformCALayer *, uint64_t))(*(_QWORD *)v7 + 472))(v7, v10);
    }
    *a4 = v7;
  }
  else
  {
    result = 66;
    __break(0xC471u);
  }
  return result;
}

void sub_196C52F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PlatformCALayerRemote::updateBackingStore(WebKit::PlatformCALayerRemote *this)
{
  CFTypeRef *v2;
  CFTypeRef v3;
  int v4;
  const void *v5;
  const void *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;
  _BYTE v10[4];
  uint64_t v11;
  CFTypeRef v12;
  int v13;
  __int16 v14;

  if (!*((_QWORD *)this + 59))
    return;
  v2 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(this);
  v3 = *v2;
  if (*v2)
    v2 = (CFTypeRef *)CFRetain(*v2);
  v13 = 1065353216;
  v14 = 0;
  v10[0] = *((_BYTE *)this + 824) ^ 1;
  v11 = *((_QWORD *)this + 56);
  v4 = *((unsigned __int8 *)this + 825);
  if (*((_BYTE *)this + 825))
  {
    v5 = (const void *)WebCore::extendedSRGBColorSpaceRef((WebCore *)v2);
    v8 = v5;
    if (v5)
      CFRetain(v5);
    WebCore::DestinationColorSpace::DestinationColorSpace();
    v6 = cf;
    if (!cf)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v2);
  cf = v6;
  if (v6)
  {
    CFRetain(v6);
LABEL_11:
    CFRetain(v6);
  }
LABEL_12:
  v12 = v6;
  if (v3)
    CFRelease(v3);
  if (cf)
    CFRelease(cf);
  if (v4 && v8)
    CFRelease(v8);
  v13 = *((_DWORD *)this + 153);
  LOBYTE(v14) = *((_BYTE *)this + 825);
  HIBYTE(v14) = *((_BYTE *)this + 660);
  (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 59) + 40))(*((_QWORD *)this + 59), v10);
  v7 = v12;
  v12 = 0;
  if (v7)
    CFRelease(v7);
}

void sub_196C53048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerWithRemoteRenderingBackingStore::ensureBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, const Parameters *a2)
{
  unsigned __int8 *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  const void *v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  CFTypeRef v20;
  char v21;

  v4 = (unsigned __int8 *)this + 24;
  if ((*((_BYTE *)this + 24) == 0) == (*(_BYTE *)a2 != 0)
    || (*((float *)this + 7) == *((float *)a2 + 1) ? (v5 = *((float *)this + 8) == *((float *)a2 + 2)) : (v5 = 0),
        !v5
     || !WebCore::operator==()
     || *((float *)this + 12) != *((float *)a2 + 6)
     || *((unsigned __int8 *)this + 52) != *((unsigned __int8 *)a2 + 28)
     || *((unsigned __int8 *)this + 53) != *((unsigned __int8 *)a2 + 29)))
  {
    v6 = *(_QWORD *)a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v4 = v6;
    v7 = *((_QWORD *)a2 + 2);
    if (v7)
      CFRetain(*((CFTypeRef *)a2 + 2));
    v8 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v7;
    if (v8)
      CFRelease(v8);
    v9 = *((_DWORD *)a2 + 6);
    *((_WORD *)this + 26) = *((_WORD *)a2 + 14);
    *((_DWORD *)this + 12) = v9;
    if (*((_BYTE *)this + 176))
    {
      v10 = *((unsigned int *)this + 42);
      if ((_DWORD)v10 != -1)
        off_1E34B91A0[v10]((int)&v21, (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)((char *)this + 104));
      *((_DWORD *)this + 42) = -1;
      *((_BYTE *)this + 176) = 0;
    }
    *((_BYTE *)this + 456) = 1;
    v11 = *((_QWORD *)this + 40);
    if (v11)
    {
      v12 = *((float *)this + 7);
      v13 = *((float *)this + 8);
      v14 = *((float *)this + 12);
      v15 = (const void *)*((_QWORD *)this + 5);
      v20 = v15;
      if (v15)
        CFRetain(v15);
      v16 = *v4;
      if (v16 || !*((_BYTE *)this + 52))
      {
        v17 = *((_BYTE *)this + 53) ^ 1;
      }
      else if (*((_BYTE *)this + 53))
      {
        v17 = 2;
      }
      else
      {
        v17 = 3;
      }
      v18 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
      if (v18)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 224))(v18))
          v19 = 4;
        else
          v19 = 3;
      }
      else
      {
        v19 = 3;
      }
      WebKit::RemoteImageBufferSetProxy::setConfiguration(v11, &v20, v17, v16 == 0, v19, v12, v13, v14);
      if (v15)
        CFRelease(v15);
    }
  }
}

void sub_196C53298(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PlatformCALayerRemote::setWantsDeepColorBackingStore(WebKit::PlatformCALayerRemote *this, char a2)
{
  *((_BYTE *)this + 825) = a2;
  WebKit::PlatformCALayerRemote::updateBackingStore(this);
}

WebKit::RemoteLayerWithRemoteRenderingBackingStore *WebKit::RemoteLayerWithRemoteRenderingBackingStore::RemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, WebKit::PlatformCALayerRemote *a2)
{
  WebKit::RemoteLayerBackingStore *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::RemoteRenderingBackendProxy *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = WebKit::RemoteLayerBackingStore::RemoteLayerBackingStore(this, a2);
  *(_QWORD *)v3 = off_1E34B90C0;
  *((_QWORD *)v3 + 40) = 0;
  *((_BYTE *)v3 + 328) = 0;
  *((_BYTE *)v3 + 336) = 0;
  *((_BYTE *)v3 + 344) = 0;
  *((_BYTE *)v3 + 352) = 0;
  *((_BYTE *)v3 + 360) = 0;
  *((_BYTE *)v3 + 368) = 0;
  *((_BYTE *)v3 + 376) = 0;
  *((_BYTE *)v3 + 448) = 0;
  *((_BYTE *)v3 + 456) = 1;
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 832);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 88);
      if (v6)
      {
        v7 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(*(WebKit::WebPage **)(*(_QWORD *)(v6 + 16) + 24));
        WebKit::RemoteRenderingBackendProxy::createRemoteImageBufferSet(v7, &v14);
        v9 = v14;
        v14 = 0;
        v10 = *((_QWORD *)this + 40);
        *((_QWORD *)this + 40) = v9;
        if (v10)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v8);
          v12 = v14;
          v14 = 0;
          if (v12)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v11);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::ensureRemoteRenderingBackendProxy(WebKit::WebPage *this)
{
  uint64_t result;
  WTF::RunLoop *v3;
  uint64_t v4;
  WTF::RunLoop *v5;
  WTF::RunLoop *v6;

  result = *((_QWORD *)this + 299);
  if (!result)
  {
    WebKit::RemoteRenderingBackendProxy::create(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = *((_QWORD *)this + 299);
    *((_QWORD *)this + 299) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v6;
      v6 = 0;
      if (v5)
        (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v5 + 8))(v5);
    }
    return *((_QWORD *)this + 299);
  }
  return result;
}

uint64_t *WebKit::RemoteRenderingBackendProxy::createRemoteImageBufferSet@<X0>(WebKit::RemoteRenderingBackendProxy *this@<X0>, uint64_t *a2@<X8>)
{
  WebKit::RemoteImageBufferSetProxy *v4;
  WebKit::RemoteImageBufferSetProxy *v5;
  uint64_t v6;
  uint64_t *v8[3];
  uint64_t v9;
  uint64_t v10;

  v4 = (WebKit::RemoteImageBufferSetProxy *)WTF::fastMalloc((WTF *)0x80);
  v5 = WebKit::RemoteImageBufferSetProxy::RemoteImageBufferSetProxy(v4, this);
  *a2 = (uint64_t)v5;
  v6 = *((_QWORD *)v5 + 3);
  v9 = *((_QWORD *)v5 + 5);
  v10 = v6;
  v8[0] = &v10;
  v8[1] = &v9;
  WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(this, v8, *((_QWORD *)this + 7));
  v10 = *((_QWORD *)v4 + 3);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>> &>((uint64_t *)this + 27, &v10, a2, (uint64_t)v8);
}

WebKit::RemoteImageBufferSetProxy *WebKit::RemoteImageBufferSetProxy::RemoteImageBufferSetProxy(WebKit::RemoteImageBufferSetProxy *this, WebKit::RemoteRenderingBackendProxy *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::DestinationColorSpace *v7;
  const void *v8;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = this;
  *((_QWORD *)this + 2) = v4;
  *(_QWORD *)this = off_1E34B02C0;
  *((_QWORD *)this + 3) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = off_1E34E2EC0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 4) = v5;
  v7 = (WebCore::DestinationColorSpace *)WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = v7;
  *((_WORD *)this + 32) = 0;
  *((_DWORD *)this + 19) = 1065353216;
  v8 = *(const void **)WebCore::DestinationColorSpace::SRGB(v7);
  *((_QWORD *)this + 10) = v8;
  if (v8)
    CFRetain(v8);
  *(_WORD *)((char *)this + 89) = 0;
  *((_DWORD *)this + 23) = 0;
  *((_WORD *)this + 48) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_WORD *)this + 60) = 0;
  return this;
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::RemoteLayerBackingStore(WebKit::RemoteLayerBackingStore *this, WebKit::PlatformCALayerRemote *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34B8980;
  *((_QWORD *)this + 2) = a2;
  *((_BYTE *)this + 24) = 1;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  v3 = *(const void **)WebCore::DestinationColorSpace::SRGB(this);
  *((_QWORD *)this + 5) = v3;
  if (v3)
    CFRetain(v3);
  *((_DWORD *)this + 12) = 1065353216;
  *((_WORD *)this + 26) = 0;
  WebCore::Region::Region((WebKit::RemoteLayerBackingStore *)((char *)this + 56));
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = (char *)this + 232;
  *((_QWORD *)this + 28) = 5;
  *((_QWORD *)this + 39) = 0xFFF0000000000000;
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 832);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 88);
        if (v7)
          (*(void (**)(uint64_t, WebKit::RemoteLayerBackingStore *))(*(_QWORD *)v7 + 16))(v7, this);
      }
    }
  }
  return this;
}

void sub_196C53654(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned int **v13;
  uint64_t v14;
  WebCore::Region *v15;
  WTF::MachSendRight *v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v21;
  uint64_t v22;
  void *v23;
  const void *v24;

  v19 = v17;
  v21 = *(WTF **)(v14 + 216);
  if (v19 != v21 && v21)
  {
    *(_QWORD *)(v14 + 216) = 0;
    *(_DWORD *)(v14 + 224) = 0;
    WTF::fastFree(v21, a2);
  }
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, a2);
  if (*(_BYTE *)(v14 + 176))
  {
    v22 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v22 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v22]((int)&a13, v16);
    *(_DWORD *)(v14 + 168) = -1;
  }
  WebCore::Region::~Region(v15);
  v24 = *(const void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = 0;
  if (v24)
    CFRelease(v24);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v13, v23);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::RemoteLayerBackingStoreCollection::backingStoreWasCreated(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 24, (unsigned int *)a2, (uint64_t)v3);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContainsBitmapOnly(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 - 584) + 224))(*(_QWORD *)(a1 - 584), a1 - 608);
}

unsigned int *WebKit::WebProcessProxy::addExistingWebPage(uint64_t a1, WebKit::WebPageProxy *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef *v15;
  int shouldTakeNearSuspendedAssertion;
  int shouldDropNearSuspendedAssertionAfterDelay;
  unsigned int *result;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  WebKit::WebPageProxy *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    v8 = *((_QWORD *)a2 + 4);
    v9 = *(_QWORD *)(v8 + 744);
    v10 = *(_QWORD *)(v8 + 1896);
    *(_DWORD *)buf = 134219008;
    v21 = a1;
    v22 = 1024;
    v23 = v7;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v9;
    v28 = 2048;
    v29 = v10;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addExistingWebPage: webPage=%p, pageProxyID=%llu, webPageID=%llu", buf, 0x30u);
  }
  if (*(_BYTE *)(a1 + 712))
  {
    __break(0xC471u);
    JUMPOUT(0x196C5398CLL);
  }
  if (*(_BYTE *)(a1 + 872))
  {
    v11 = *(_QWORD *)(a1 + 552);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 12) == 0;
      if (!a3)
        goto LABEL_16;
    }
    else
    {
      v12 = 1;
      if (!a3)
        goto LABEL_16;
    }
  }
  else
  {
    v12 = 0;
    if (!a3)
      goto LABEL_16;
  }
  v13 = *(_QWORD *)(a1 + 512);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196C539ACLL);
  }
  CFRetain(*(CFTypeRef *)(v14 - 8));
  v15 = (CFTypeRef *)*((_QWORD *)a2 + 33);
  CFRetain(v15[1]);
  WebKit::WebProcessPool::pageBeginUsingWebsiteDataStore((WebKit::WebProcessPool *)(v14 - 16), a2, (WebKit::WebsiteDataStore *)v15);
  CFRelease(v15[1]);
  CFRelease(*(CFTypeRef *)(v14 - 8));
LABEL_16:
  WebKit::WebProcessProxy::initializePreferencesForGPUAndNetworkProcesses(a1, (WebKit::WebPreferences ***)a2);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, a1);
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageProxy&>((uint64_t)buf, (uint64_t *)(a1 + 552), &v19, (uint64_t)a2);
  {
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::WebPageProxy&>((uint64_t)buf, &WebKit::WebProcessProxy::globalPageMap(void)::pageMap, &v19, (uint64_t)a2);
  shouldTakeNearSuspendedAssertion = WebKit::WebProcessProxy::shouldTakeNearSuspendedAssertion((WebKit::WebProcessProxy *)a1);
  WebKit::ProcessThrottler::setShouldTakeNearSuspendedAssertion((unsigned int *)(a1 + 200), shouldTakeNearSuspendedAssertion);
  shouldDropNearSuspendedAssertionAfterDelay = WebKit::WebProcessProxy::shouldDropNearSuspendedAssertionAfterDelay((WebKit::WebProcessProxy *)a1);
  WebKit::ProcessThrottler::setShouldDropNearSuspendedAssertionAfterDelay(a1 + 200, shouldDropNearSuspendedAssertionAfterDelay);
  WebKit::WebProcessProxy::updateRegistrationWithDataStore((WebKit::WebProcessProxy *)a1);
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  result = WebKit::WebsiteDataStore::updateBlobRegistryPartitioningState(*(WebKit::WebsiteDataStore **)(a1 + 752));
  if (v12)
    return (unsigned int *)WebKit::WebProcessProxy::didChangeThrottleState(a1, *(unsigned __int8 *)(a1 + 384));
  return result;
}

uint64_t WebKit::BackgroundProcessResponsivenessTimer::updateState(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t result;

  v2 = (WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16);
  if (WTF::RunLoop::TimerBase::isActive((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16)))
  {
    *((_QWORD *)this + 1) = 0x4034000000000000;
    WTF::RunLoop::TimerBase::stop(v2);
  }
  result = WTF::RunLoop::TimerBase::stop((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48));
  *((_BYTE *)this + 80) = 1;
  return result;
}

BOOL WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  _BOOL8 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;

  v4 = *(_DWORD *)(a1 + 28);
  v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > v4)
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v6 = *(unsigned int **)(a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 + 1, v6));
  v17 = (WTF *)v6;
  v10 = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::moveToLastIfPresent((uint64_t *)a1, &v17);
  v11 = (unsigned int *)v17;
  v17 = 0;
  if (v11)
  {
    do
    {
      v15 = __ldaxr(v11);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v11));
    if (!v16)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v9);
    }
  }
  if (v6)
  {
    do
    {
      v12 = __ldaxr(v6);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v6));
    if (!v13)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v9);
    }
  }
  return v10;
}

uint64_t WebKit::WebProcessProxy::shouldDropNearSuspendedAssertionAfterDelay(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  const WTF::StringImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 69);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v2 = (_QWORD *)((char *)this + 552);
    v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 69);
    v5 = v3;
    v7 = v6;
    if (*v2)
      v8 = *v2 + 16 * *(unsigned int *)(*v2 - 4);
    else
      v8 = 0;
    if ((_QWORD *)v8 == v3)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v5[1] + 8);
        v11 = v10 ? v10 - 16 : 0;
        {
          WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
        }
        result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(_QWORD *)(v11 + 224) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, v4);
        if ((result & 1) != 0)
          return 1;
        while (1)
        {
          v5 += 2;
          if (v5 == v7)
            break;
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_19;
        }
        v5 = v7;
LABEL_19:
        if (v5 == (_QWORD *)v8)
          return result;
      }
    }
  }
  {
    return WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK != 0;
  }
  else
  {
    result = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK = result;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::shouldTakeNearSuspendedAssertion(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  const WTF::StringImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  int BoolValueForKey;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_QWORD *)this + 69);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v2 = (_QWORD *)((char *)this + 552);
    v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 69);
    v5 = v3;
    v7 = v6;
    if (*v2)
      v8 = *v2 + 16 * *(unsigned int *)(*v2 - 4);
    else
      v8 = 0;
    if ((_QWORD *)v8 == v3)
    {
      return 0;
    }
    else
    {
      do
      {
        v11 = *(_QWORD *)(v5[1] + 8);
        if (v11)
          v12 = v11 - 16;
        else
          v12 = 0;
        {
          WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(_QWORD *)(v12 + 224) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, v4);
        v15 = *(_QWORD *)(v5[1] + 8);
        if (v15)
          v16 = v15 - 16;
        else
          v16 = 0;
        {
          WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
        }
        result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(_QWORD *)(v16 + 224) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, v13) | BoolValueForKey ^ 1;
        if ((result & 1) != 0)
          break;
        while (1)
        {
          v5 += 2;
          if (v5 == v7)
            break;
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_26;
        }
        v5 = v7;
LABEL_26:
        ;
      }
      while (v5 != (_QWORD *)v8);
    }
  }
  else
  {
    {
      v9 = WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK;
    }
    else
    {
      v9 = WTF::linkedOnOrAfterSDKWithBehavior();
      WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK = v9;
    }
    return v9 == 0;
  }
  return result;
}

_QWORD *WebKit::WebProcessProxy::pages@<X0>(WebKit::WebProcessProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  WebKit::WebProcessProxy::mainPages(this, a2);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 70, &v18);
  v4 = *((_QWORD *)this + 70);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = v4 + 8 * v5;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v13 = (char *)this + 560;
  v14 = v6;
  v15 = v6;
  v16 = v6;
  v17 = v4 + 8 * v5;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  while (v19 != v14)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 8) + 32);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = v9 - 16;
        v11 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
        {
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPageProxy&>(a2, v9 - 16);
        }
        else
        {
          v12 = *(_QWORD *)a2;
          CFRetain(*(CFTypeRef *)(v9 - 8));
          *(_QWORD *)(v12 + 8 * v11) = v10;
          ++*(_DWORD *)(a2 + 12);
        }
      }
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  return result;
}

uint64_t WebKit::ProcessThrottler::setShouldDropNearSuspendedAssertionAfterDelay(uint64_t this, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(this + 185) != a2)
  {
    *(_BYTE *)(this + 185) = a2;
    if (a2)
    {
      v2 = *(_QWORD *)(this + 24);
      if (v2)
      {
        if (!*(_BYTE *)(v2 + 16))
          return WTF::RunLoop::TimerBase::start();
      }
    }
    else
    {
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 72));
    }
  }
  return this;
}

unsigned int *WebKit::ProcessThrottler::setShouldTakeNearSuspendedAssertion(unsigned int *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v2 = (uint64_t)this;
  v12 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 187) = a2;
  v3 = *((_QWORD *)this + 3);
  if (a2)
  {
    if (!v3 && *((_BYTE *)this + 189))
    {
      v4 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 136);
        if (v5)
          LODWORD(v5) = *(_DWORD *)(v5 + 108);
        v8 = 134218240;
        v9 = v2;
        v10 = 1024;
        v11 = v5;
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setShouldTakeNearSuspendedAssertion: Taking near-suspended assertion", (uint8_t *)&v8, 0x12u);
      }
      return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v2, 0);
    }
  }
  else if (v3 && !*(_BYTE *)(v3 + 16))
  {
    v6 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 136);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 108);
      v8 = 134218240;
      v9 = v2;
      v10 = 1024;
      v11 = v7;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setShouldTakeNearSuspendedAssertion: Releasing near-suspended assertion", (uint8_t *)&v8, 0x12u);
    }
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v2 + 72));
    return WebKit::ProcessThrottler::clearAssertion((unsigned int *)v2);
  }
  return this;
}

void WebKit::WebProcessProxy::updateRegistrationWithDataStore(WebKit::WebProcessProxy *this)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = *((_QWORD *)this + 94);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(v1 + 8));
    v4 = *((_QWORD *)this + 69);
    if (v4 && *(_DWORD *)(v4 - 12)
      || WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 576, v3))
    {
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v1 + 312, (unsigned int *)this, (uint64_t)v5);
    }
    else
    {
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v1 + 312, this);
    }
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

unsigned int *WebKit::WebsiteDataStore::updateBlobRegistryPartitioningState(WebKit::WebsiteDataStore *this)
{
  unsigned int *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;

  result = (unsigned int *)WebKit::WebsiteDataStore::isBlobRegistryPartitioningEnabled(this);
  if (*((unsigned __int8 *)this + 457) != (_DWORD)result)
  {
    v3 = *((_QWORD *)this + 51);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      *((_BYTE *)this + 457) = (_BYTE)result;
      v6 = *((_QWORD *)this + 3);
      v7 = &v6;
      v8 = (char)result;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetBlobRegistryTopOriginPartitioningEnabled>(v3, (uint64_t)&v7, 0, 0);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    }
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::WebProcessProxy(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  char v49;
  _BYTE buf[12];
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy(a1, *(_BYTE *)(a2 + 521), *(_BYTE *)(a2 + 520), 3.0);
  *v12 = off_1E34D7000;
  v12[3] = &unk_1E34D7128;
  v12[4] = &unk_1E34D7180;
  WebKit::BackgroundProcessResponsivenessTimer::BackgroundProcessResponsivenessTimer((WebKit::BackgroundProcessResponsivenessTimer *)(v12 + 52), (WebKit::WebProcessProxy *)a1);
  *(_BYTE *)(a1 + 504) = a4;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v13 = *(unsigned int **)(a2 + 24);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 512) = v13;
  *(_QWORD *)(a1 + 520) = 0;
  WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference(a1 + 504);
  *(_BYTE *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 644) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_WORD *)(a1 + 680) = 1;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 716) = 1;
  *(_OWORD *)(a1 + 720) = 0u;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = off_1E34D7B78;
  v15[1] = a1;
  *(_QWORD *)(a1 + 736) = v15;
  v16 = operator new();
  *(_QWORD *)v16 = a1 + 736;
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)(a1 + 744) = v16;
  if (a3)
    CFRetain(*(CFTypeRef *)(a3 + 8));
  *(_QWORD *)(a1 + 752) = a3;
  *(_BYTE *)(a1 + 760) = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E34D7BA0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v18 = *(unsigned int **)(a1 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v17[1] = v18;
  v20 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)buf = v17;
  *(_QWORD *)(a1 + 768) = WebKit::UserMediaCaptureManagerProxy::UserMediaCaptureManagerProxy(v20, (uint64_t *)buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  *(_WORD *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 778) = a4;
  *(_BYTE *)(a1 + 779) = a6;
  *(_BYTE *)(a1 + 780) = a5;
  *(_WORD *)(a1 + 781) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v21 = off_1E34D7C18;
  v21[1] = a1;
  *(_QWORD *)(a1 + 1008) = v21;
  v22 = operator new();
  *(_QWORD *)v22 = a1 + 1008;
  *(_QWORD *)(v22 + 8) = 0;
  *(_BYTE *)(v22 + 16) = 0;
  *(_QWORD *)(a1 + 1016) = v22;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  if (a3)
  {
    a3 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)a3 = off_1E34D3B00;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = a1;
    *(_BYTE *)(a3 + 24) = 0;
    v49 = -80;
    WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(a1 + 152), &v49, a3, (unsigned int **)buf);
  }
  *(_QWORD *)(a1 + 1048) = a3;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v23 = off_1E34D6EF0;
  v23[1] = 0;
  v23[2] = a1;
  v49 = -71;
  v24 = WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(a1 + 152), &v49, (uint64_t)v23, (unsigned int **)buf);
  *(_QWORD *)(a1 + 1056) = v23;
  *(_BYTE *)(a1 + 1064) = 1;
  *(_WORD *)(a1 + 1094) = 0;
  *(_WORD *)(a1 + 1097) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  if ((WebKit::isMainThreadOrCheckDisabled((WebKit *)v24) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196C54744);
  }
  v25 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(_QWORD *)(a1 + 136);
    if (v26)
      LODWORD(v26) = *(_DWORD *)(v26 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    v51 = 1024;
    v52 = v26;
    _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::constructor:", buf, 0x12u);
  }
  {
    v27 = WebKit::WebProcessProxy::allProcessMap(void)::map;
    v28 = *(_QWORD *)(a1 + 176);
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
    {
LABEL_19:
      v29 = *(_DWORD *)(v27 - 8);
      goto LABEL_20;
    }
  }
  else
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    v28 = *(_QWORD *)(a1 + 176);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
  v27 = WebKit::WebProcessProxy::allProcessMap(void)::map;
  if (WebKit::WebProcessProxy::allProcessMap(void)::map)
    goto LABEL_19;
  v29 = 0;
LABEL_20:
  v30 = (v28 + ~(v28 << 32)) ^ ((unint64_t)(v28 + ~(v28 << 32)) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = v29 & ((v32 >> 31) ^ v32);
  v34 = (_QWORD *)(v27 + 16 * v33);
  v35 = *v34;
  if (!*v34)
  {
LABEL_28:
    *v34 = v28;
    v38 = (unsigned int *)(a1 + 48);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    v40 = v34[1];
    v34[1] = a1;
    if (v40)
    {
      v41 = (unsigned int *)(v40 + 48);
      if (!atomic_load(v41))
      {
        __break(0xC471u);
        JUMPOUT(0x196C54764);
      }
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
    }
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
      v44 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) + 1;
    else
      v44 = 1;
    *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) = v44;
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
      v45 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12);
    else
      v45 = 0;
    v46 = (*(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 16) + v45);
    v47 = *(unsigned int *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
    if (v47 > 0x400)
    {
      if (v47 > 2 * v46)
        goto LABEL_42;
    }
    else if (3 * v47 > 4 * v46)
    {
      goto LABEL_42;
    }
    v34 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
    goto LABEL_42;
  }
  v36 = 0;
  v37 = 1;
  while (v35 != v28)
  {
    if (v35 == -1)
      v36 = v34;
    v33 = (v33 + v37) & v29;
    v34 = (_QWORD *)(v27 + 16 * v33);
    v35 = *v34;
    ++v37;
    if (!*v34)
    {
      if (v36)
      {
        *v36 = 0;
        v36[1] = 0;
        --*(_DWORD *)(v27 - 16);
        v34 = v36;
      }
      goto LABEL_28;
    }
  }
LABEL_42:
  WebKit::WebPasteboardProxy::singleton((WebKit::WebPasteboardProxy *)v34);
  v49 = -75;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(a1 + 152), &v49, (uint64_t)&WebKit::WebPasteboardProxy::singleton(void)::proxy, (unsigned int **)buf);
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)&qword_1ECE737F8, (unsigned int *)a1, (uint64_t)buf);
  WebKit::WebProcessProxy::platformInitialize((WebKit::WebProcessProxy *)a1);
  return a1;
}

unsigned int *WebKit::AuxiliaryProcess::addMessageReceiver(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int *v4;
  char v5;

  v5 = a2;
  return WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(a1 + 40), &v5, a3, &v4);
}

unsigned int *WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, unsigned int **a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (unsigned int *)(v8 + 16 * v14);
  v16 = *(unsigned __int8 *)v15;
  if (v16 == 255)
  {
LABEL_4:
    *(_BYTE *)v15 = v11;
    result = WTF::GenericHashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::StorageAreaMap&>((unsigned int **)v15 + 1, a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_10;
    }
    else if (3 * v23 > 4 * v22)
    {
LABEL_10:
      *a4 = v15;
      a4[1] = (unsigned int *)(v20 + 16 * v23);
      *((_BYTE *)a4 + 16) = 1;
      return result;
    }
    result = (unsigned int *)WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::expand(a1, (unsigned __int8 *)v15);
    v15 = result;
    v20 = *a1;
    if (*a1)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_10;
  }
  v24 = 0;
  v25 = 1;
  while (v16 != v11)
  {
    if (v16 == 254)
      v24 = v15;
    v14 = (v14 + v25) & v10;
    v15 = (unsigned int *)(v8 + 16 * v14);
    v16 = *(unsigned __int8 *)v15;
    ++v25;
    if (v16 == 255)
    {
      if (v24)
      {
        *(_BYTE *)v24 = -1;
        *((_QWORD *)v24 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        LOBYTE(v11) = *a2;
        v15 = v24;
      }
      goto LABEL_4;
    }
  }
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  *a4 = v15;
  a4[1] = (unsigned int *)(v8 + 16 * v26);
  *((_BYTE *)a4 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v28 = *(unsigned int **)(a3 + 8);
  if (v28)
  {
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    v15 = *a4;
  }
  result = (unsigned int *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v28;
  if (result)
  {
    do
    {
      v30 = __ldaxr(result);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, result));
    if (!v31)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  return result;
}

unsigned int *WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned int **a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int *result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::PairHash<IPC::ReceiverName,unsigned long long>::hash(a2) & v9;
  v11 = (unsigned int *)(v8 + 24 * v10);
  v12 = *(unsigned __int8 *)v11;
  v13 = *((_QWORD *)v11 + 1);
  v14 = *a2;
  if (v12 == 255 && v13 == 0)
  {
LABEL_8:
    *(_BYTE *)v11 = v14;
    *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
    result = WTF::GenericHashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::StorageAreaMap&>((unsigned int **)v11 + 2, a3);
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
        goto LABEL_14;
    }
    else if (3 * v22 > 4 * v21)
    {
LABEL_14:
      *a4 = v11;
      a4[1] = (unsigned int *)(v19 + 24 * v22);
      *((_BYTE *)a4 + 16) = 1;
      return result;
    }
    result = (unsigned int *)WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::expand(a1, (unsigned __int8 *)v11);
    v11 = result;
    v19 = *a1;
    if (*a1)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_14;
  }
  v23 = 0;
  v24 = 1;
  while (v12 != v14 || v13 != *((_QWORD *)a2 + 1))
  {
    if (v12 == 254)
      v23 = v11;
    v10 = (v10 + v24) & v9;
    v11 = (unsigned int *)(v8 + 24 * v10);
    v12 = *(unsigned __int8 *)v11;
    v13 = *((_QWORD *)v11 + 1);
    ++v24;
    if (v12 == 255 && v13 == 0)
    {
      if (v23)
      {
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        *(_QWORD *)v23 = 255;
        --*(_DWORD *)(*a1 - 16);
        LOBYTE(v14) = *a2;
        v11 = v23;
      }
      goto LABEL_8;
    }
  }
  v26 = *a1;
  if (*a1)
    v27 = *(_DWORD *)(v26 - 4);
  else
    v27 = 0;
  *a4 = v11;
  a4[1] = (unsigned int *)(v26 + 24 * v27);
  *((_BYTE *)a4 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v29 = *(unsigned int **)(a3 + 8);
  if (v29)
  {
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
    v11 = *a4;
  }
  result = (unsigned int *)*((_QWORD *)v11 + 2);
  *((_QWORD *)v11 + 2) = v29;
  if (result)
  {
    do
    {
      v31 = __ldaxr(result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, result));
    if (!v32)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v28);
    }
  }
  return result;
}

unsigned int *WTF::GenericHashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::StorageAreaMap&>(unsigned int **a1, uint64_t a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v5 = *(unsigned int **)(a2 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = *a1;
  *a1 = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *((_BYTE *)v12 - 8) = -1;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v15 = 0;
    v13 = 0;
    do
    {
      v16 = (unsigned __int8 *)(v6 + 16 * v15);
      v17 = *v16;
      if (v17 != 254)
      {
        if (v17 == 255)
        {
          v18 = v6 + 16 * v15;
          v19 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v10);
            }
          }
        }
        else
        {
          v22 = WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::reinsert(*a1, (_BYTE *)(v6 + 16 * v15));
          v23 = v6 + 16 * v15;
          v24 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              v27 = v22;
              WTF::fastFree((WTF *)v24, v10);
              v22 = v27;
            }
          }
          if (v16 == a3)
            v13 = v22;
        }
      }
      ++v15;
    }
    while (v15 != v7);
    goto LABEL_24;
  }
  v13 = 0;
  result = 0;
  if (v6)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::rehash(a1, v5, a2);
}

uint64_t WebKit::isMainThreadOrCheckDisabled(WebKit *this)
{
  WTF::RunLoop *v1;

  v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v1) & 1) != 0)
    return 1;
  else
    return WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::UserMediaCaptureManagerProxy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v5;
  const char *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34DC2F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  v5 = 0u;
  v6 = "UserMediaCaptureManagerProxy";
  v7 = 0;
  WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v5, (uint64_t *)(a1 + 64));
  *(_QWORD *)(a1 + 72) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 145, a1);
  return a1;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(uint64_t a1, WTF::NativePromiseBase *a2)
{
  WTF::Lock *v4;
  WTF::Lock *result;
  int v7;
  __int16 v8;
  WTF::Lock *v9;
  char v10;

  v4 = (WTF::Lock *)(a1 + 48);
  v9 = v4;
  v10 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C]();
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_3;
LABEL_4:
  WTF::NativePromiseBase::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(a2, " resolving ", a1);
  v8 = 0;
  result = (WTF::Lock *)WTF::NativePromise<void,void,0u>::settleImpl<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(a1, &v8, (unsigned __int8 **)&v9);
  if (v10)
  {
    result = v9;
    v7 = __ldxr((unsigned __int8 *)v9);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromiseBase::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(WTF::NativePromiseBase *a1, const char *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  BOOL v7;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a1, a2, a3);
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34DC8D0;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  WTF::NativePromiseBase::log<char [10],WTF::NativePromise<void,void,0u>>((WTF::NativePromiseBase *)"creating ", a1);
  return a1;
}

WTF::StringImpl *WTF::NativePromiseBase::log<char [10],WTF::NativePromise<void,void,0u>>(WTF::NativePromiseBase *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  BOOL v5;

  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v5 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v5 = 0;
  if (v5)
    return WTF::Logger::log<char [10],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, (char *)a1, a2);
  return result;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)a1;
    v7 = 40 * v3;
    do
    {
      v6 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v6) + 5;
      v7 -= 40;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v6 = *(uint64_t **)a1;
    v7 = 40 * v4;
    do
    {
      v6 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v6) + 5;
      v7 -= 40;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t *WebKit::WebPasteboardProxy::singleton(WebKit::WebPasteboardProxy *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::WebPasteboardProxy::singleton(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::WebPasteboardProxy::singleton(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebPasteboardProxy::singleton(void)::$_0 &&>>);
  }
  return &WebKit::WebPasteboardProxy::singleton(void)::proxy;
}

void WebKit::WebProcessProxy::WeakOrStrongPtr<WebKit::WebProcessPool>::updateStrongReference(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)a1 && (v4 = *(_QWORD *)(a1 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v2 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
  }
  else
  {
    v2 = 0;
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

WebKit::BackgroundProcessResponsivenessTimer *WebKit::BackgroundProcessResponsivenessTimer::BackgroundProcessResponsivenessTimer(WebKit::BackgroundProcessResponsivenessTimer *this, WebKit::WebProcessProxy *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::RunLoop *v7;
  _QWORD *v8;
  WTF::RunLoop *v9;
  WTF::RunLoop *v10;
  _QWORD *v11;

  v4 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = 0x4034000000000000;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34CFA80;
  v8[1] = WebKit::BackgroundProcessResponsivenessTimer::responsivenessCheckTimerFired;
  v8[2] = 0;
  v8[3] = this;
  v9 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16), v7);
  *((_QWORD *)this + 2) = off_1E34ABE00;
  *((_QWORD *)this + 5) = v8;
  v10 = (WTF::RunLoop *)WTF::RunLoop::main(v9);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E34CFA80;
  v11[1] = WebKit::BackgroundProcessResponsivenessTimer::timeoutTimerFired;
  v11[2] = 0;
  v11[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48), v10);
  *((_QWORD *)this + 6) = off_1E34ABE00;
  *((_QWORD *)this + 9) = v11;
  *((_BYTE *)this + 80) = 1;
  return this;
}

unsigned int *WebKit::UIProxyForCapture::addMessageReceiver(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  unsigned int *v5;
  char v6;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 152);
  v6 = a2;
  return WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>(v3, &v6, a3, &v5);
}

uint64_t API::PageConfiguration::preferencesForGPUProcess(WebKit::WebPreferences **this)
{
  WebKit::WebPreferences *v2;
  const WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  unsigned int BoolValueForKey;
  const WTF::StringImpl *v6;
  int v7;
  const WTF::StringImpl *v8;
  int v9;
  const WTF::StringImpl *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(this + 5);
  CFRetain(*((CFTypeRef *)v2 + 1));
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, v3))
  {
    {
      WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v4);
  }
  else
  {
    BoolValueForKey = 0;
  }
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v7 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, v4);
  {
    WebKit::WebPreferencesKey::webXREnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webXREnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXREnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v9 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXREnabledKey(void)::key, v6);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v11 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v8);
  v12 = *((unsigned __int8 *)this + 200);
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v13 = v12 != 0;
  v14 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, v10);
  CFRelease(*((CFTypeRef *)v2 + 1));
  v15 = 0x10000000000;
  if (!v14)
    v15 = 0;
  v16 = 0x1000000;
  if (!v11)
    v16 = 0;
  v17 = 0x10000;
  if (!v9)
    v17 = 0;
  v18 = 256;
  if (!v7)
    v18 = 0;
  return v18 | BoolValueForKey | v17 | v16 | (v13 << 32) | v15;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setWantsDeepColorBackingStore(WebCore::TileController **this)
{
  return WebCore::TileController::setWantsDeepColorBackingStore(this[105]);
}

void WebKit::RemoteRenderingBackendProxy::create(WebKit::RemoteRenderingBackendProxy *this@<X0>, WTF::RunLoop **a2@<X8>)
{
  WTF::RunLoop *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (WTF::RunLoop *)operator new();
  v6 = WTF::RunLoop::main(v5);
  WebKit::RemoteRenderingBackendProxy::RemoteRenderingBackendProxy((uint64_t)v5, v6);
  *a2 = v5;
  v7 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *((_QWORD *)v5 + 7);
    v9 = *((_QWORD *)this + 265);
    v10 = *((_QWORD *)this + 5);
    v11 = 134218496;
    v12 = v8;
    v13 = 2048;
    v14 = v9;
    v15 = 2048;
    v16 = v10;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] Created rendering backend for pageProxyID=%llu, webPageID=%llu", (uint8_t *)&v11, 0x20u);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetBlobRegistryTopOriginPartitioningEnabled>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 442;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t *WebKit::WebLoaderStrategy::remove(uint64_t *this, WebCore::ResourceLoader *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WebKit::WebResourceLoader *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  WebKit::WebProcess *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  int v34;
  uint64_t v35;
  void *v36;
  WebKit::WebURLSchemeTaskProxy *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  WebKit::WebProcess *v41;
  IPC::Encoder *v42;

  v2 = *((_QWORD *)a2 + 93);
  if (v2)
  {
    v4 = this;
    v5 = this + 7;
    v42 = (IPC::Encoder *)*((_QWORD *)a2 + 93);
    v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(this + 7, &v42);
    v7 = (_QWORD *)v4[7];
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
    if (v7 != v6)
    {
      v35 = v6[1];
      if (v35)
      {
        v6[1] = 0;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::remove(v5, v6);
        v37 = *(WebKit::WebURLSchemeTaskProxy **)(v35 + 8);
        if (v37)
          ++*(_DWORD *)v37;
        do
        {
          v38 = __ldaxr((unsigned int *)v35);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, (unsigned int *)v35));
        if (!v39)
        {
          atomic_store(1u, (unsigned int *)v35);
          WTF::fastFree((WTF *)v35, v36);
        }
        if (v37)
        {
          WebKit::WebURLSchemeTaskProxy::stopLoading(v37);
          return (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v37, v40);
        }
      }
      else
      {
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::remove(v5, v6);
      }
    }
    this = (uint64_t *)v4[1];
    if (this
      && (this = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WebCore::ResourceLoader const*>((uint64_t)this, (uint64_t)a2)) != 0)
    {
      return WTF::HashSet<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>(v4 + 1, (uint64_t)a2);
    }
    else
    {
      v10 = v4[6];
      v9 = v4 + 6;
      v8 = v10;
      if (v10)
      {
        v11 = *(_DWORD *)(v8 - 8);
        v12 = (v2 + ~(v2 << 32)) ^ ((unint64_t)(v2 + ~(v2 << 32)) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = *(_QWORD *)(v8 + 16 * v15);
        if (v16 != v2)
        {
          v34 = 1;
          while (v16)
          {
            v15 = ((_DWORD)v15 + v34) & v11;
            v16 = *(_QWORD *)(v8 + 16 * v15);
            ++v34;
            if (v16 == v2)
              goto LABEL_8;
          }
          v15 = *(unsigned int *)(v8 - 4);
        }
LABEL_8:
        if (v15 != *(_DWORD *)(v8 - 4))
        {
          v17 = (_QWORD *)(v8 + 16 * v15);
          v18 = (WebKit::WebResourceLoader *)v17[1];
          v17[1] = 0;
          v19 = *v9;
          if (!*v9 || (v19 += 16 * *(unsigned int *)(v19 - 4), (_QWORD *)v19 != v17))
          {
            if ((_QWORD *)v19 != v17)
            {
              *v17 = -1;
              v17[1] = 0;
              ++*(_DWORD *)(*v9 - 16);
              v20 = *v9;
              v21 = *v9 ? *(_DWORD *)(v20 - 12) - 1 : -1;
              *(_DWORD *)(v20 - 12) = v21;
              v22 = *v9;
              if (*v9)
              {
                v23 = 6 * *(_DWORD *)(v22 - 12);
                v24 = *(_DWORD *)(v22 - 4);
                if (v23 < v24 && v24 >= 9)
                  this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v9, v24 >> 1, 0);
              }
            }
          }
          if (v18)
          {
            {
              v26 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
            }
            else
            {
              v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              v26 = WebKit::WebProcess::WebProcess(v41);
              WebKit::WebProcess::singleton(void)::process = (uint64_t)v26;
            }
            v27 = *((_QWORD *)v26 + 37);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 24);
              v29 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v29 = 257;
              *(_QWORD *)(v29 + 8) = 0;
              *(_QWORD *)(v29 + 528) = v29 + 16;
              *(_QWORD *)(v29 + 536) = v29 + 16;
              *(_OWORD *)(v29 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v29 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v29);
              v42 = (IPC::Encoder *)v29;
              *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v29, 8uLL, 8) = v2;
              IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v42, 0, 0);
              v31 = v42;
              v42 = 0;
              if (v31)
              {
                IPC::Encoder::~Encoder(v31, v30);
                WTF::fastFree(v32, v33);
              }
            }
            this = (uint64_t *)WebKit::WebResourceLoader::detachFromCoreLoader(v18);
            if (*((_DWORD *)v18 + 2) == 1)
              return (uint64_t *)(*(uint64_t (**)(WebKit::WebResourceLoader *))(*(_QWORD *)v18 + 8))(v18);
            else
              --*((_DWORD *)v18 + 2);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebResourceLoader::detachFromCoreLoader(WebKit::WebResourceLoader *this)
{
  WTF::RunLoop *v2;
  uint64_t result;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) != 0)
  {
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 16);
    }
  }
  else
  {
    result = 97;
    __break(0xC471u);
  }
  return result;
}

void WebKit::WebResourceLoader::~WebResourceLoader(WebKit::WebResourceLoader *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebResourceLoader::~WebResourceLoader(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = off_1E34EB260;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
}

void WebKit::DrawingArea::didCompleteRenderingFrame(WebKit::DrawingArea *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (!*(_BYTE *)(v2 + 186))
    WebCore::Page::didCompleteRenderingFrame(*(WebCore::Page **)(v2 + 48));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayNominalFramesPerSecond(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  return -[WKDisplayLinkHandler nominalFramesPerSecond](WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this), "nominalFramesPerSecond") | 0x100000000;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::setPreferredFramesPerSecond(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this, unsigned int a2)
{
  return -[WKDisplayLinkHandler setPreferredFramesPerSecond:](WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this), "setPreferredFramesPerSecond:", a2);
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::MachSendRight *v5;
  uint64_t v6;
  const WTF::MachSendRight *v7;
  uint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 30))
  {
    v5 = (WTF::MachSendRight *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(const WTF::MachSendRight **)a2;
      v8 = 4 * v6;
      do
      {
        v5 = (WTF::MachSendRight *)(WTF::MachSendRight::MachSendRight(v5, v7) + 4);
        v7 = (const WTF::MachSendRight *)((char *)v7 + 4);
        v8 -= 4;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196C561BC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(uint64_t this, IPC::Connection *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *i;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 **v40;
  unsigned __int8 **v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(_BYTE *)(v3 + 729) || !*(_BYTE *)(v3 + 728))
    return this;
  v5 = this;
  if (a2)
  {
    v6 = (_DWORD *)WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)this, a2);
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay((IPC::Encoder *)v5, v6, (uint64_t)a2);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(this + 48);
  if (*(_QWORD *)(v9 + 144))
  {
    WebKit::AuxiliaryProcessProxy::protectedConnection(v9, &v41);
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay((IPC::Encoder *)v5, (_DWORD *)(v5 + 88), (uint64_t)v41);
    v10 = v41;
    v41 = 0;
    if (v10)
    {
      v11 = *v10;
      if (__ldaxr(*v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, v11))
      {
        goto LABEL_20;
      }
      MEMORY[0x19AEABB3C](v11);
LABEL_20:
      v13 = *((_QWORD *)v11 + 1);
      v14 = v13 - 1;
      *((_QWORD *)v11 + 1) = v13 - 1;
      if (v13 == 1)
      {
        v39 = *((_QWORD *)v11 + 2);
        v15 = *((_QWORD *)v11 + 3);
        *((_QWORD *)v11 + 3) = 0;
        v16 = v39 == 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      v17 = __ldxr(v11);
      if (v17 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_27;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_27:
      if (!v14)
      {
        v18 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v18 = off_1E34ACA48;
        *(_QWORD *)(v18 + 8) = v11;
        *(_QWORD *)(v18 + 16) = v15;
        *(_BYTE *)(v18 + 24) = v16;
        v43 = v18;
        WTF::ensureOnMainRunLoop();
        v19 = v43;
        v43 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
    }
  }
  v20 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((_QWORD **)(v5 + 128));
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)&v43, (uint64_t *)(v5 + 128), (uint64_t)v20, v21);
  v22 = *(_QWORD *)(v5 + 128);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 - 4);
    v24 = v22 + 48 * v23;
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)&v41, (uint64_t *)(v5 + 128), v24, v22 + 48 * v23);
  for (i = v44; v44 != v42; i = v44)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)i + 8) + 48);
    if (!*(_QWORD *)(v26 + 144))
      goto LABEL_50;
    v27 = i + 2;
    WebKit::AuxiliaryProcessProxy::protectedConnection(v26, &v40);
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay((IPC::Encoder *)v5, v27, (uint64_t)v40);
    v28 = v40;
    v40 = 0;
    if (!v28)
      goto LABEL_50;
    v29 = *v28;
    if (__ldaxr(*v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, v29))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEABB3C](v29);
LABEL_40:
    v31 = *((_QWORD *)v29 + 1);
    v32 = v31 - 1;
    *((_QWORD *)v29 + 1) = v31 - 1;
    if (v31 == 1)
    {
      v38 = *((_QWORD *)v29 + 2);
      v33 = *((_QWORD *)v29 + 3);
      *((_QWORD *)v29 + 3) = 0;
      v34 = v38 == 0;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    v35 = __ldxr(v29);
    if (v35 == 1)
    {
      if (!__stlxr(0, v29))
      {
        if (!v32)
          goto LABEL_48;
        goto LABEL_50;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    if (!v32)
    {
LABEL_48:
      v36 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v36 = off_1E34ACA48;
      *(_QWORD *)(v36 + 8) = v29;
      *(_QWORD *)(v36 + 16) = v33;
      *(_BYTE *)(v36 + 24) = v34;
      v45 = v36;
      WTF::ensureOnMainRunLoop();
      v37 = v45;
      v45 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
LABEL_50:
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance((uint64_t)&v43);
  }
LABEL_9:
  this = WebKit::RemoteLayerTreeDrawingAreaProxy::maybePauseDisplayRefreshCallbacks((WebKit::RemoteLayerTreeDrawingAreaProxy *)v5);
  if ((this & 1) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    *(_BYTE *)(v8 + 891) = 0;
  }
  return this;
}

void sub_196C564F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection(WebKit::RemoteLayerTreeDrawingAreaProxy *this, IPC::Connection *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  IPC::Connection *v10;
  _QWORD v13[6];
  _BYTE v14[8];
  uint64_t v15;

  v4 = (uint64_t *)((char *)this + 128);
  v5 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((_QWORD **)this + 16);
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v14, v4, (uint64_t)v5, v6);
  v7 = *((_QWORD *)this + 16);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 4);
    v9 = v7 + 48 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v13, v4, v9, v7 + 48 * v8);
  while (1)
  {
    if (v15 == v13[1])
      return (uint64_t)this + 88;
    v10 = *(IPC::Connection **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 8) + 48) + 144);
    if (v10 && v10 == a2)
      break;
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance((uint64_t)v14);
  }
  return v15 + 8;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::maybePauseDisplayRefreshCallbacks(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v9[6];
  _BYTE v10[8];
  uint64_t v11;

  if (*((_DWORD *)this + 22) < 2u)
    return 0;
  v3 = (uint64_t *)((char *)this + 128);
  v4 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((_QWORD **)this + 16);
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v10, v3, (uint64_t)v4, v5);
  v6 = *((_QWORD *)this + 16);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = v6 + 48 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v9, v3, v8, v6 + 48 * v7);
  while (v11 != v9[1])
  {
    if (*(_DWORD *)(v11 + 8) < 2u)
      return 0;
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance((uint64_t)v10);
  }
  (*(void (**)(WebKit::RemoteLayerTreeDrawingAreaProxy *))(*(_QWORD *)this + 384))(this);
  return 1;
}

IPC::Encoder *WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(IPC::Encoder *result, _DWORD *a2, uint64_t a3)
{
  IPC::Encoder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  if (*a2 == 1)
  {
    v4 = result;
    *a2 = 0;
    if (*(_QWORD *)(*((_QWORD *)result + 6) + 144) == a3)
    {
      v5 = *(_QWORD *)(*((_QWORD *)result + 5) + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
      WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll(*(WebKit::RemoteScrollingCoordinatorProxy **)(v6 + 200));
    }
    v7 = *((_QWORD *)v4 + 3);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 25;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v12 = (IPC::Encoder *)v8;
    IPC::Connection::sendMessageImpl(a3, (uint64_t *)&v12, 0, 0);
    result = v12;
    v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  else if (!*a2)
  {
    *a2 = 2;
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::applyScrollingTreeLayerPositionsAfterCommit(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  WebCore::ScrollingTree *v1;

  v1 = (WebCore::ScrollingTree *)*((_QWORD *)this + 3);
  *((_BYTE *)v1 + 342) = 1;
  return WebCore::ScrollingTree::applyLayerPositionsAfterCommit(v1);
}

BOOL WebKit::RemoteLayerTreeTransaction::hasAnyLayerChanges(WebKit::RemoteLayerTreeTransaction *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && *(_DWORD *)(v1 - 12))
    return 1;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12))
      return 1;
  }
  return *((_DWORD *)this + 13) || *((_DWORD *)this + 17) || *((_DWORD *)this + 25) != 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::scheduleDisplayRefreshCallbacks(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  *((_BYTE *)this + 232) = 1;
  return -[WKDisplayLinkHandler schedule](WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this), "schedule");
}

WKDisplayLinkHandler *WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  WKDisplayLinkHandler *result;
  const void *v3;

  result = (WKDisplayLinkHandler *)*((_QWORD *)this + 28);
  if (!result)
  {
    result = -[WKDisplayLinkHandler initWithDrawingAreaProxy:]([WKDisplayLinkHandler alloc], "initWithDrawingAreaProxy:", this);
    v3 = (const void *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = result;
    if (v3)
    {
      CFRelease(v3);
      return (WKDisplayLinkHandler *)*((_QWORD *)this + 28);
    }
  }
  return result;
}

WebCore::ScrollingTree *WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  unint64_t v1;
  WebCore::ScrollingTree *result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  char *v8;
  char v9;
  uint64_t v10;
  _BYTE v11[24];
  WTF *v12;
  int v13;
  unsigned int v14;

  result = (WebCore::ScrollingTree *)*((_QWORD *)this + 3);
  if (result)
  {
    WebCore::ScrollingTree::takePendingScrollUpdates(result);
    v5 = v14;
    if (v14)
    {
      v6 = 0;
      for (i = 0; i < v14; ++i)
      {
        v8 = (char *)v12 + v6;
        v9 = i == v5 - 1;
        v10 = *((_QWORD *)this + 2);
        WebCore::ScrollingTree::frameIDForScrollingNodeID();
        v1 = v1 & 0xFFFFFFFF00000000 | *((unsigned int *)v8 + 8);
        WebKit::WebPageProxy::sendScrollPositionChangedForNode(v10, (uint64_t)v11, *(_QWORD *)v8, *((_QWORD *)v8 + 1), (uint64_t *)v8 + 2, *((_QWORD *)v8 + 3), v1, v8[37] == 2, v9);
        *((_BYTE *)this + 128) = 1;
        v5 = v14;
        v6 += 40;
      }
    }
    result = v12;
    if (v12)
    {
      v12 = 0;
      v13 = 0;
      return (WebCore::ScrollingTree *)WTF::fastFree(result, v4);
    }
  }
  else
  {
    *((_BYTE *)this + 128) = 0;
  }
  return result;
}

void WebKit::RemoteScrollingCoordinatorProxyIOS::establishLayerTreeScrollingRelations(WebKit::RemoteScrollingCoordinatorProxyIOS *this, const WebKit::RemoteLayerTreeHost *a2)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  NSObject *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v52;
  NSObject *v53;
  __int128 v54;
  WTF *v55[2];
  uint8_t buf[24];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)((char *)this + 136);
  v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::begin((uint64_t *)this + 17);
  v7 = v5;
  v8 = v6;
  v9 = *((_QWORD *)this + 17);
  if (v9)
    v10 = v9 + 16 * *(unsigned int *)(v9 - 4);
  else
    v10 = 0;
  if (v10 != v5)
  {
    v11 = (uint64_t *)((char *)a2 + 16);
    do
    {
      *(_OWORD *)buf = *(_OWORD *)v7;
      if (*(_QWORD *)buf)
      {
        v12 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v11, buf);
        if (v12)
        {
          v14 = (_QWORD *)(v12 + 192);
          v13 = *(WTF **)(v12 + 192);
          *(_QWORD *)(v12 + 176) = 0;
          *(_QWORD *)(v12 + 184) = 0;
          if (v13)
          {
            *(_QWORD *)(v12 + 192) = 0;
            *(_DWORD *)(v12 + 200) = 0;
            WTF::fastFree(v13, v6);
          }
          *v14 = 0;
          v14[1] = 0;
        }
      }
      while (1)
      {
        v7 += 16;
        if ((void *)v7 == v8)
          break;
        if (*(_OWORD *)v7 != 0 && *(_QWORD *)(v7 + 8) != -1)
          goto LABEL_18;
      }
      v7 = (uint64_t)v8;
LABEL_18:
      ;
    }
    while (v7 != v10);
    v9 = *v4;
  }
  if (v9)
  {
    *v4 = 0;
    WTF::fastFree((WTF *)(v9 - 16), v6);
  }
  v16 = *((_QWORD *)this + 3);
  v17 = *(_QWORD *)(v16 + 160);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    v19 = v17 + 8 * v18;
    if (*(_DWORD *)(v17 - 12))
    {
      v20 = *(_QWORD *)(v16 + 160);
      if ((_DWORD)v18)
      {
        v21 = 8 * v18;
        v20 = *(_QWORD *)(v16 + 160);
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 8;
          v21 -= 8;
          if (!v21)
          {
            v20 = v19;
            goto LABEL_29;
          }
        }
      }
      goto LABEL_29;
    }
    v20 = v17 + 8 * v18;
  }
  else
  {
    v20 = 0;
    v18 = 0;
  }
  v19 = v17 + 8 * v18;
  if (v17)
  {
LABEL_29:
    v22 = v17 + 8 * *(unsigned int *)(v17 - 4);
    goto LABEL_34;
  }
  v22 = 0;
LABEL_34:
  if (v22 != v20)
  {
    do
    {
      v55[0] = 0;
      v55[1] = 0;
      v23 = *(_QWORD **)v20;
      v24 = *(unsigned int *)(*(_QWORD *)v20 + 108);
      if ((_DWORD)v24)
      {
        v25 = v23[12];
        v26 = v25 + 16 * v24;
        while (1)
        {
          v27 = WebCore::ScrollingTree::nodeForID();
          if (!v27 || *(_BYTE *)(v27 + 40) != 5)
            break;
          v29 = objc_msgSend((id)objc_msgSend((id)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(v27 + 272), v28), "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
          if (v29)
            v30 = *(_OWORD *)(v29 + 8);
          else
            v30 = 0uLL;
          *(_OWORD *)buf = v30;
          if (HIDWORD(v55[1]) == LODWORD(v55[1]))
          {
            WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v55, (unint64_t)buf);
          }
          else
          {
            *((_OWORD *)v55[0] + HIDWORD(v55[1])) = *(_OWORD *)buf;
            ++HIDWORD(v55[1]);
          }
          v25 += 16;
          if (v25 == v26)
          {
            v23 = *(_QWORD **)v20;
            goto LABEL_47;
          }
        }
        v39 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "virtual void WebKit::RemoteScrollingCoordinatorProxyIOS::establishLayerTreeScrollingRelat"
                               "ions(const RemoteLayerTreeHost &)";
          _os_log_fault_impl(&dword_196BCC000, v39, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/RemoteLayerTree/ios/RemoteScrollingCoordinatorProxyIOS.mm 259: Invalid message dispatched %s", buf, 0xCu);
        }
        v36 = 0;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 144) + 98) = 1;
      }
      else
      {
LABEL_47:
        v31 = objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(_QWORD *))(*v23 + 72))(v23), "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
        v33 = v31;
        if (v31)
        {
          v34 = *(WTF **)(v31 + 192);
          if (v34)
          {
            *(_QWORD *)(v33 + 192) = 0;
            *(_DWORD *)(v33 + 200) = 0;
            WTF::fastFree(v34, v32);
          }
          *(WTF **)(v33 + 192) = v55[0];
          v35 = v55[1];
          v55[0] = 0;
          v55[1] = 0;
          *(_QWORD *)(v33 + 200) = v35;
          v54 = *(_OWORD *)(v33 + 8);
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v4, &v54, (uint64_t)buf);
        }
        v36 = 1;
      }
      v37 = v55[0];
      if (v55[0])
      {
        v55[0] = 0;
        LODWORD(v55[1]) = 0;
        WTF::fastFree(v37, v32);
        if (!v36)
          return;
      }
      else if (!v36)
      {
        return;
      }
      v38 = v20 + 8;
      v20 = v19;
      if (v38 != v19)
      {
        v20 = v38;
        while ((unint64_t)(*(_QWORD *)v20 + 1) <= 1)
        {
          v20 += 8;
          if (v20 == v19)
          {
            v20 = v19;
            break;
          }
        }
      }
    }
    while (v20 != v22);
    v16 = *((_QWORD *)this + 3);
  }
  v40 = *(_QWORD **)(v16 + 152);
  if (v40)
  {
    v41 = *((unsigned int *)v40 - 1);
    v42 = &v40[v41];
    if (*((_DWORD *)v40 - 3))
    {
      v43 = v40;
      if ((_DWORD)v41)
      {
        v44 = 8 * v41;
        v43 = v40;
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          ++v43;
          v44 -= 8;
          if (!v44)
          {
            v43 = v42;
            goto LABEL_73;
          }
        }
      }
      goto LABEL_73;
    }
    v43 = &v40[v41];
  }
  else
  {
    v43 = 0;
    v41 = 0;
  }
  v42 = &v40[v41];
  if (v40)
  {
LABEL_73:
    v45 = &v40[*((unsigned int *)v40 - 1)];
    goto LABEL_78;
  }
  v45 = 0;
LABEL_78:
  if (v45 != v43)
  {
    while (1)
    {
      v46 = WebCore::ScrollingTree::nodeForID();
      v47 = v46;
      if (!v46 || *(_BYTE *)(v46 + 40) != 5)
        break;
      v49 = objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v43 + 72))(*v43), "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
      if (v49)
      {
        v50 = objc_msgSend((id)objc_msgSend((id)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(v47 + 272), v48), "valueForKey:", CFSTR("WKRemoteLayerTreeNode")), "pointerValue");
        if (v50)
          v51 = *(_OWORD *)(v50 + 8);
        else
          v51 = 0uLL;
        *(_OWORD *)(v49 + 176) = v51;
        *(_OWORD *)v55 = *(_OWORD *)(v49 + 8);
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v4, v55, (uint64_t)buf);
      }
      v52 = v43 + 1;
      v43 = v42;
      if (v52 != v42)
      {
        v43 = v52;
        while ((unint64_t)(*v43 + 1) <= 1)
        {
          if (++v43 == v42)
          {
            v43 = v42;
            break;
          }
        }
      }
      if (v43 == v45)
        return;
    }
    v53 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "virtual void WebKit::RemoteScrollingCoordinatorProxyIOS::establishLayerTreeScrollingRelations"
                           "(const RemoteLayerTreeHost &)";
      _os_log_fault_impl(&dword_196BCC000, v53, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/RemoteLayerTree/ios/RemoteScrollingCoordinatorProxyIOS.mm 272: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 144) + 98) = 1;
  }
}

void sub_196C57034(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13)
    WTF::fastFree(a13, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::layerTreeCommitComplete(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_layerTreeCommitComplete");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C570AC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::didCommitLayerTree(WebKit::WebPageProxy *this, const Color *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  WebCore::Color::Color((WebCore::Color *)&v20, a2 + 21);
  WebKit::WebPageProxy::themeColorChanged((uint64_t)this, (const WebCore::Color *)&v20);
  if ((v20 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v4);
    }
  }
  WebCore::Color::Color((WebCore::Color *)&v20, a2 + 22);
  WebKit::WebPageProxy::pageExtendedBackgroundColorDidChange(this, (const WebCore::Color *)&v20);
  if ((v20 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v5);
    }
  }
  WebCore::Color::Color((WebCore::Color *)&v20, a2 + 23);
  WebKit::WebPageProxy::sampledPageTopColorChanged((uint64_t)this, (const WebCore::Color *)&v20);
  if ((v20 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v6);
    }
  }
  if (!*((_BYTE *)this + 733) && a2[30].m_colorAndFlags >= *(_QWORD *)(*((_QWORD *)this + 4) + 1992))
  {
    *((_BYTE *)this + 733) = 1;
    WebKit::WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary((uint64_t)this);
    v7 = *((_QWORD *)this + 4);
    *(_OWORD *)(v7 + 2400) = 0u;
    *(_OWORD *)(v7 + 2384) = 0u;
    *(_OWORD *)(v7 + 2368) = 0u;
    *(_OWORD *)(v7 + 2352) = 0u;
    *(_OWORD *)(v7 + 2336) = 0u;
    *(_OWORD *)(v7 + 2320) = 0u;
    *(_OWORD *)(v7 + 2304) = 0u;
    *(_OWORD *)(v7 + 2288) = 0u;
    *(_OWORD *)(v7 + 2272) = 0u;
    *(_OWORD *)(v7 + 2256) = 0u;
    *(_QWORD *)(v7 + 2416) = 0xBFF0000000000000;
    *(_DWORD *)(v7 + 2424) = 0;
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
  (*(void (**)(uint64_t, const Color *))(*(_QWORD *)v9 + 832))(v9, a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  if ((*(_WORD *)(*((_QWORD *)this + 4) + 904) & 0x40) != 0
    && !*((_BYTE *)this + 880)
    && (double)*((unint64_t *)this + 109) * 0.5 < (double)a2[29].m_colorAndFlags)
  {
    *((_BYTE *)this + 880) = 1;
    return WebKit::WebPageProxy::didReachLayoutMilestone((uint64_t)this, 0x40u);
  }
  return result;
}

void sub_196C572C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didCommitLayerTree(id *this, const WebKit::RemoteLayerTreeTransaction *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "_didCommitLayerTree:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C573A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::pageExtendedBackgroundColorDidChange(WebKit::WebPageProxy *this, const WebCore::Color *a2)
{
  WebKit::WebPageProxy *v2;
  unint64_t v3;
  unint64_t v4;
  void *v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  __int128 v11;
  BOOL v13;
  char v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;

  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 912);
  v4 = *(_QWORD *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      v31 = 0;
      v32 = 0;
      v33 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v37 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      v38 = v33;
      do
      {
        if (*((float *)&v38 + v32) != *((float *)&v37 + v32))
          break;
        v31 = v32++ > 2;
      }
      while (v32 != 4);
      if (v31 && HIBYTE(v3) == HIBYTE(v4) && BYTE6(v3) == BYTE6(v4))
        return this;
    }
  }
  else if (v3 == v4 && (v4 & 0x8000000000000) == 0)
  {
    return this;
  }
  WebKit::WebPageProxy::underPageBackgroundColor(this, (uint64_t *)&v36);
  WebCore::Color::Color();
  WebCore::Color::operator=();
  WebKit::WebPageProxy::underPageBackgroundColor(v2, (uint64_t *)&v34);
  if ((v36 & 0x8000000000000) != 0)
  {
    if ((v34 & 0x8000000000000) == 0)
    {
      WebCore::Color::operator=();
      goto LABEL_32;
    }
    v9 = 0;
    v10 = 0;
    v11 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
    v37 = *(_OWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 4);
    v38 = v11;
    do
    {
      if (*((float *)&v38 + v10) != *((float *)&v37 + v10))
        break;
      v9 = v10++ > 2;
    }
    while (v10 != 4);
    v13 = ((v34 ^ v36) & 0xFE000000000000) == 0 && HIBYTE(v36) == HIBYTE(v34);
    v7 = v9 && v13;
  }
  else
  {
    v7 = 0;
    if ((v34 & 0x8000000000000) == 0 && (_DWORD)v36 == (_DWORD)v34)
    {
      v8 = (v34 ^ v36) & 0xFE000000000000;
      WebCore::Color::operator=();
      if (!v8)
        goto LABEL_27;
LABEL_32:
      v18 = *((_QWORD *)v2 + 5);
      if (v18)
        v19 = *(_QWORD *)(v18 + 8);
      else
        v19 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 1584))(v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 1328))(v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 1592))(v19);
      v14 = 0;
      goto LABEL_36;
    }
  }
  if ((v34 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      v14 = 1;
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v6);
      WebCore::Color::operator=();
      if (v7)
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  WebCore::Color::operator=();
  if (!v7)
    goto LABEL_32;
LABEL_27:
  v14 = 1;
LABEL_36:
  v20 = *((_QWORD *)v2 + 5);
  if (v20)
    v21 = *(_QWORD *)(v20 + 8);
  else
    v21 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1584))(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1344))(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 1592))(v21);
  WebCore::Color::operator=();
  if ((v14 & 1) == 0)
  {
    v22 = *((_QWORD *)v2 + 5);
    if (v22)
      v23 = *(_QWORD *)(v22 + 8);
    else
      v23 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1584))(v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1336))(v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 1592))(v23);
  }
  v24 = *((_QWORD *)v2 + 5);
  if (v24)
    v25 = *(_QWORD *)(v24 + 8);
  else
    v25 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 1584))(v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 1352))(v25);
  this = (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 1592))(v25);
  if ((v35 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v35 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr((unsigned int *)this);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)this));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (WebKit::WebPageProxy *)WTF::fastFree(this, v26);
    }
  }
  if ((v36 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v36 & 0xFFFFFFFFFFFFLL);
    do
    {
      v29 = __ldaxr((unsigned int *)this);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)this));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)this);
      return (WebKit::WebPageProxy *)WTF::fastFree(this, v26);
    }
  }
  return this;
}

uint64_t WebKit::WebPageProxy::sampledPageTopColorChanged(uint64_t this, const WebCore::Color *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 32) + 1720);
  v4 = *(_QWORD *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_6;
    v10 = 0;
    v11 = 0;
    v12 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v13 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v14 = v12;
    do
    {
      if (*((float *)&v14 + v11) != *((float *)&v13 + v11))
        break;
      v10 = v11++ > 2;
    }
    while (v11 != 4);
    if (!v10 || HIBYTE(v3) != HIBYTE(v4) || BYTE6(v3) != BYTE6(v4))
      goto LABEL_6;
  }
  else if (v3 != v4 || (v4 & 0x8000000000000) != 0)
  {
LABEL_6:
    v6 = *(_QWORD *)(this + 40);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1360))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
    WebCore::Color::operator=();
    v8 = *(_QWORD *)(v2 + 40);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1368))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::themeColorChanged(uint64_t this, const WebCore::Color *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 32) + 1744);
  v4 = *(_QWORD *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_6;
    v10 = 0;
    v11 = 0;
    v12 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v13 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    v14 = v12;
    do
    {
      if (*((float *)&v14 + v11) != *((float *)&v13 + v11))
        break;
      v10 = v11++ > 2;
    }
    while (v11 != 4);
    if (!v10 || HIBYTE(v3) != HIBYTE(v4) || BYTE6(v3) != BYTE6(v4))
      goto LABEL_6;
  }
  else if (v3 != v4 || (v4 & 0x8000000000000) != 0)
  {
LABEL_6:
    v6 = *(_QWORD *)(this + 40);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1312))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
    WebCore::Color::operator=();
    v8 = *(_QWORD *)(v2 + 40);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1320))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  }
  return this;
}

float WebKit::WebPageProxy::computeLayoutViewportRect(_QWORD *a1, __int128 *a2, FloatRect *a3, const FloatRect *a4, int a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  WebKit *v20;
  float v21;
  float v22;
  float32x2_t v23;
  double v24;
  float32x2_t v25;
  __int128 v26;
  float32x2_t v27;
  uint64_t v28;
  double v29;
  int v30;
  int v31;
  double v32;
  int v33;
  double v34;
  int v35;
  double v36;
  int v37;
  float32x2_t v39;
  _BYTE v40[16];
  int v41;
  int v42;
  _BYTE v43[16];
  _DWORD v44[4];
  uint64_t v45;
  FloatRect v46;
  FloatRect v47;
  __int128 v48;

  v48 = *a2;
  v12 = a1[5];
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1584))(v13);
  v47.m_location.m_x = (*(float (**)(uint64_t))(*(_QWORD *)v13 + 1016))(v13);
  v47.m_location.m_y = v14;
  v47.m_size.m_width = v15;
  v47.m_size.m_height = v16;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1592))(v13);
  if (a5)
    WebCore::FloatRect::intersect((WebCore::FloatRect *)&v48, (const WebCore::FloatRect *)&v47);
  v17 = a1[5];
  if (v17)
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 1584))(v18);
  v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 1008))(v18);
  v20 = (WebKit *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1592))(v18);
  if (v19 <= a6 || (v21 = a6, v22 = v19, WebKit::scalesAreEssentiallyEqual(v20, v21, v22)))
  {
    v23 = *(float32x2_t *)((char *)a2 + 8);
  }
  else
  {
    v24 = (v19 - a6) * -12.0 + 1.0;
    if (v24 < 0.0)
      v24 = 0.0;
    *(float *)&v24 = v24;
    v25 = vadd_f32((float32x2_t)v47.m_location, (float32x2_t)v47.m_size);
    *(int8x8_t *)&v26 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v47.m_location, *(float32x2_t *)&v48), (int8x8_t)vmls_lane_f32((float32x2_t)v47.m_location, vsub_f32((float32x2_t)v47.m_location, *(float32x2_t *)&v48), *(float32x2_t *)&v24, 0), *(int8x8_t *)&v48);
    v27 = vadd_f32(*(float32x2_t *)&v26, *(float32x2_t *)((char *)&v48 + 8));
    v23 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v27, v25), (int8x8_t)vmla_n_f32(v25, vsub_f32(v27, v25), *(float *)&v24), (int8x8_t)v27), *(float32x2_t *)&v26);
    *((float32x2_t *)&v26 + 1) = v23;
    v48 = v26;
    a3 = (FloatRect *)&v48;
  }
  v46 = *a3;
  v39 = v23;
  if (*(_BYTE *)(a1[4] + 2592))
  {
    v28 = a1[28];
    {
      WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<double>(v28 + 40, v28 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key);
  }
  v29 = v47.m_size.m_width * 64.0;
  if (v29 > -2147483650.0)
    v30 = (int)v29;
  else
    v30 = 0x80000000;
  if (v29 < 2147483650.0)
    v31 = v30;
  else
    v31 = 0x7FFFFFFF;
  v44[0] = v31;
  v32 = v47.m_size.m_height * 64.0;
  if (v32 >= 2147483650.0)
  {
    v33 = 0x7FFFFFFF;
  }
  else if (v32 <= -2147483650.0)
  {
    v33 = 0x80000000;
  }
  else
  {
    v33 = (int)v32;
  }
  v44[1] = v33;
  v45 = WebCore::LocalFrameView::expandedLayoutViewportSize();
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v44, a4);
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v43, &v47);
  v34 = v39.f32[0] * 64.0;
  if (v34 >= 2147483650.0)
  {
    v35 = 0x7FFFFFFF;
  }
  else if (v34 <= -2147483650.0)
  {
    v35 = 0x80000000;
  }
  else
  {
    v35 = (int)v34;
  }
  v36 = v39.f32[1] * 64.0;
  if (v36 > -2147483650.0)
    v37 = (int)v36;
  else
    v37 = 0x80000000;
  if (v36 >= 2147483650.0)
    v37 = 0x7FFFFFFF;
  v41 = v35;
  v42 = v37;
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v40, &v46);
  return (float)(int)WebCore::LocalFrameView::computeUpdatedLayoutViewportRect() * 0.015625;
}

void sub_196C58430(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

double WebKit::PageClientImpl::minimumZoomScale(id *this)
{
  id WeakRetained;
  void *v2;
  double result;

  WeakRetained = objc_loadWeakRetained(this + 2);
  v2 = (void *)objc_msgSend(WeakRetained, "scrollView");
  if (WeakRetained)
    CFRelease(WeakRetained);
  if (!v2)
    return 1.0;
  objc_msgSend(v2, "minimumZoomScale");
  return result;
}

void sub_196C584A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::documentRect(id *this)
{
  id WeakRetained;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGRect v7;
  float v8;

  WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "bounds");
  v7.origin.x = v2;
  v7.origin.y = v3;
  v7.size.width = v4;
  v7.size.height = v5;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v8, &v7);
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v8;
}

void sub_196C58520(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::updateDebugIndicator(uint64_t this)
{
  void *v1;

  v1 = *(void **)(this + 176);
  if (v1)
  {
    WebKit::RemoteLayerTreeDrawingAreaProxy::indicatorLocation(*(WebKit::RemoteLayerTreeDrawingAreaProxy **)(*(_QWORD *)(this + 40) + 8));
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v1, "setPosition:");
  }
  return this;
}

uint64_t WebKit::WebPageProxy::updateVisibleContentRects(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t result;
  BOOL v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  result = WebKit::operator==((uint64_t)a2, *(_QWORD *)(a1 + 32) + 2256);
  if ((_DWORD)result)
    v7 = a3 == 0;
  else
    v7 = 0;
  if (!v7)
  {
    v8 = *(_OWORD **)(a1 + 32);
    v9 = *a2;
    v10 = a2[1];
    v8[143] = a2[2];
    v8[142] = v10;
    v8[141] = v9;
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[5];
    v8[147] = a2[6];
    v8[146] = v13;
    v8[145] = v12;
    v8[144] = v11;
    v14 = *(__int128 *)((char *)a2 + 156);
    v15 = a2[7];
    v16 = a2[8];
    v8[150] = a2[9];
    v8[149] = v16;
    v8[148] = v15;
    *(_OWORD *)((char *)v8 + 2412) = v14;
    if (!*(_BYTE *)(a1 + 729))
    {
      if (*(_BYTE *)(a1 + 728))
      {
        v17 = *(_QWORD *)(a1 + 208);
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
        v19[0] = &v18;
        v19[1] = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::ViewUpdateDispatcher::VisibleContentRectUpdate>(v17, (uint64_t)v19, 0, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v7;
  float v8;
  float v9;
  BOOL v10;
  uint64_t v14;
  float v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  float v19;
  float v20;
  BOOL v21;

  if (*(double *)(a1 + 160) != *(double *)(a2 + 160))
    return 0;
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8) || *(float *)(a1 + 12) != *(float *)(a2 + 12))
    return 0;
  if (*(float *)(a1 + 16) != *(float *)(a2 + 16) || *(float *)(a1 + 20) != *(float *)(a2 + 20))
    return 0;
  v4 = 0;
  if (*(float *)(a1 + 24) == *(float *)(a2 + 24) && *(float *)(a1 + 28) == *(float *)(a2 + 28))
  {
    v7 = 0;
    do
    {
      v8 = *(float *)(a1 + 32 + v7);
      v9 = *(float *)(a2 + 32 + v7);
      v10 = v8 != v9 || v7 == 12;
      v7 += 4;
    }
    while (!v10);
    if (v8 != v9)
      return 0;
    if (*(float *)(a1 + 48) != *(float *)(a2 + 48) || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
    if (*(float *)(a1 + 56) != *(float *)(a2 + 56) || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
    if (*(float *)(a1 + 80) != *(float *)(a2 + 80) || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
    v4 = 0;
    if (*(float *)(a1 + 88) == *(float *)(a2 + 88) && *(float *)(a1 + 92) == *(float *)(a2 + 92))
    {
      v14 = 0;
      do
      {
        v15 = *(float *)(a1 + 96 + v14);
        v16 = *(float *)(a2 + 96 + v14);
        v17 = v15 != v16 || v14 == 12;
        v14 += 4;
      }
      while (!v17);
      if (v15 == v16)
      {
        v18 = 0;
        do
        {
          v19 = *(float *)(a1 + 112 + v18);
          v20 = *(float *)(a2 + 112 + v18);
          v21 = v19 != v20 || v18 == 12;
          v18 += 4;
        }
        while (!v21);
        if (v19 == v20
          && *(float *)(a1 + 128) == *(float *)(a2 + 128)
          && *(float *)(a1 + 132) == *(float *)(a2 + 132)
          && *(float *)(a1 + 136) == *(float *)(a2 + 136)
          && *(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 168)
          && (*(_BYTE *)(a1 + 169) != 0) == (*(_BYTE *)(a2 + 169) != 0)
          && (*(_BYTE *)(a1 + 170) != 0) == (*(_BYTE *)(a2 + 170) != 0))
        {
          return (*(_BYTE *)(a1 + 171) == 0) ^ (*(_BYTE *)(a2 + 171) != 0);
        }
      }
      return 0;
    }
  }
  return v4;
}

uint64_t WebKit::AuxiliaryProcessProxy::protectedConnection@<X0>(uint64_t this@<X0>, unsigned __int8 ***a2@<X8>)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v6;

  v3 = *(unsigned __int8 ***)(this + 144);
  if (!v3)
    goto LABEL_11;
  v4 = *v3;
  if (__ldaxr(*v3))
  {
    __clrex();
LABEL_5:
    this = MEMORY[0x19AEABB3C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, v4))
    goto LABEL_5;
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::ViewUpdateDispatcher::VisibleContentRectUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1517;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::encode((IPC::Encoder *)v8, *(_QWORD *)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_196C589E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_196C58B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::setFullscreenClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = &off_1E34D4108;
  }
  result = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::setUseFixedLayout(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 705) != a2)
  {
    *(_BYTE *)(this + 705) = a2;
    if ((a2 & 1) == 0)
      *(_QWORD *)(*(_QWORD *)(this + 32) + 704) = 0;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseFixedLayout>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebPageProxy::initializeWebPage(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v7;
  Inspector::RemoteInspector *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WebKit::WebPageProxy *v36;
  void *v37;
  BOOL v38;
  WTF::StringImpl *v39[2];
  char v40;
  uint64_t v41;
  IPC::Encoder *v42[25];
  char v43;
  uint64_t *v44[2];
  _QWORD *v45;
  _QWORD v46[2];

  if (!*((_BYTE *)this + 729))
  {
    v1 = (uint64_t)this;
    if (*((_BYTE *)this + 728))
    {
      v2 = *((_QWORD *)this + 5);
      if (v2)
        v3 = *(_QWORD *)(v2 + 8);
      else
        v3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
      v4 = *(_QWORD *)(v1 + 208);
      v5 = (unsigned int *)(v4 + 16);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v44, v3, v4);
      WebKit::WebPageProxy::setDrawingArea(v1, (WebKit::DrawingAreaProxy **)v44);
      v7 = v44[0];
      v44[0] = 0;
      if (v7)
        (*(void (**)(uint64_t *))(*v7 + 8))(v7);
      if (v4)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
      v8 = (Inspector::RemoteInspector *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
      Inspector::RemoteInspector::singleton(v8);
      v9 = *(WTF::StringImpl **)(*(_QWORD *)(v1 + 48) + 480);
      if (v9)
      {
        *(_DWORD *)v9 += 2;
        v39[0] = v9;
        v10 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v1 + 264));
        v11 = (unsigned int *)(v10 + 16);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = *(_QWORD *)(*(_QWORD *)(v1 + 264) + 24);
        v14 = *(_QWORD *)(v1 + 32);
        v15 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v15 = 353;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 528) = v15 + 16;
        *(_QWORD *)(v15 + 536) = v15 + 16;
        *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v15 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
        v42[0] = (IPC::Encoder *)v15;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v15, 8uLL, 8) = v13;
        v16 = *(_QWORD *)(v14 + 744);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v15, 8uLL, 8) = v16;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, (uint64_t *)v39);
        LOBYTE(v44[0]) = 0;
        LOBYTE(v45) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, v42, 0, (uint64_t)v44, 1);
        if ((_BYTE)v45)
        {
          v18 = v44[0];
          v44[0] = 0;
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 8))(v18);
        }
        v19 = v42[0];
        v42[0] = 0;
        if (v19)
        {
          IPC::Encoder::~Encoder(v19, v17);
          WTF::fastFree(v20, v21);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
        v23 = v39[0];
        v39[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v22);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v1 + 264) + 408);
      if (v24)
      {
        v25 = (unsigned int *)(v24 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
        v27 = *(_QWORD *)(v1 + 1336);
        if (v27)
        {
          v42[0] = *(IPC::Encoder **)(*(_QWORD *)(v1 + 264) + 24);
          v39[0] = *(WTF::StringImpl **)(*(_QWORD *)(v27 + 32) + 744);
          v46[0] = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 744);
          v44[0] = (uint64_t *)v42;
          v44[1] = (uint64_t *)v39;
          v45 = v46;
          WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::CloneSessionStorageForWebPage>(v24, v44);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v25);
      }
      v28 = *(_QWORD *)(v1 + 1336);
      *(_QWORD *)(v1 + 1336) = 0;
      if (v28)
        CFRelease(*(CFTypeRef *)(v28 + 8));
      v29 = *(unsigned int **)(v1 + 208);
      v30 = v29 + 4;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      v32 = *(_QWORD *)(v1 + 208);
      v33 = *(_QWORD *)(v1 + 32) + 1896;
      v34 = *(_QWORD *)(v1 + 184);
      LOBYTE(v42[0]) = 0;
      v43 = 0;
      v41 = 0;
      LOBYTE(v39[0]) = 0;
      v40 = 0;
      WebKit::WebPageProxy::creationParameters(v1, (WebKit::WebProcessProxy *)v29, v34, (uint64_t)v42, 0, (uint64_t)&v41, (uint64_t)v39, (uint64_t)v44);
      v46[0] = v33;
      v46[1] = v44;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>(v32, (uint64_t)v46, 0, 0);
      WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v44);
      std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v35);
      WebKit::WebProcessProxy::addVisitedLinkStoreUser((uint64_t *)v29, *(unsigned int **)(v1 + 256), *(_QWORD *)(*(_QWORD *)(v1 + 32) + 744));
      {
        v38 = dword_1ECE7350C == 0;
      }
      else
      {
        qword_1ECE73518 = 0;
        WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
        unk_1ECE73508 = 0u;
        v38 = 1;
      }
      *(_BYTE *)(v1 + 1304) = v38;
      WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v36, v37);
      *(_BYTE *)(v1 + 1305) = dword_1ECE72D8C == 0;
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v29 + 4);
    }
  }
  return this;
}

WebKit::RemoteLayerTreeDrawingAreaProxyIOS *WebKit::RemoteLayerTreeDrawingAreaProxyIOS::pauseDisplayRefreshCallbacks(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  *((_BYTE *)this + 232) = 0;
  if (!*((_BYTE *)this + 233))
    return (WebKit::RemoteLayerTreeDrawingAreaProxyIOS *)-[WKDisplayLinkHandler pause](WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this), "pause");
  return this;
}

uint64_t WebKit::PageClientImplCocoa::pageExtendedBackgroundColorWillChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "willChangeValueForKey:", CFSTR("_pageExtendedBackgroundColor"));
}

uint64_t WebKit::PageClientImplCocoa::pageExtendedBackgroundColorDidChange(id *this)
{
  return objc_msgSend(objc_loadWeak(this + 2), "didChangeValueForKey:", CFSTR("_pageExtendedBackgroundColor"));
}

int8x16_t WebKit::PlatformCALayerRemote::setAntialiasesEdges(int8x16_t *this, int a2)
{
  int8x16_t result;

  if (this[40].u8[14] != a2)
  {
    this[40].i8[14] = a2;
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20000000uLL));
    this[4] = result;
  }
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setMasksToBounds(int8x16_t *this, int a2)
{
  int8x16_t result;

  if (this[41].u8[3] != a2)
  {
    this[41].i8[3] = a2;
    result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x400000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::Font *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  WebKit::RemoteResourceCacheProxy::recordFontUse((WebKit::RemoteResourceCacheProxy *)(v3 + 64), a2);
  return 1;
}

void WebKit::RemoteResourceCacheProxy::recordFontUse(WebKit::RemoteResourceCacheProxy *this, WebCore::Font *a2)
{
  const WebCore::FontCustomPlatformData *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t v13[2];
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  _QWORD v20[2];

  v4 = (const WebCore::FontCustomPlatformData *)*((_QWORD *)a2 + 13);
  if (v4)
    WebKit::RemoteResourceCacheProxy::recordFontCustomPlatformDataUse((uint64_t *)this, v4);
  v13[0] = WebCore::Font::renderingResourceIdentifier(a2);
  v5 = (_QWORD *)((char *)this + 64);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>((uint64_t *)this + 4, v13, (_QWORD *)this + 8, (uint64_t)&v17);
  if (v18)
  {
    v6 = *((_QWORD *)a2 + 13);
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = (uint64_t *)*((_QWORD *)this + 7);
    WebCore::FontPlatformData::attributes((WebCore::Font *)((char *)a2 + 88));
    v20[0] = v8;
    v20[1] = v7;
    v19[0] = (char *)a2 + 240;
    v19[1] = v13;
    v19[2] = v20;
    WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheFont,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v9, (uint64_t)v19, v9[7]);
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    v11 = v15;
    v15 = 0;
    if (v11)
      CFRelease(v11);
    v12 = v14;
    v14 = 0;
    if (v12)
      CFRelease(v12);
  }
  else
  {
    if (*(_QWORD *)(v17 + 8) == *v5)
      return;
    *(_QWORD *)(v17 + 8) = *v5;
  }
  ++*((_DWORD *)this + 12);
}

uint64_t *WebKit::RemoteResourceCacheProxy::recordFontCustomPlatformDataUse(uint64_t *this, const WebCore::FontCustomPlatformData *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  WebKit::RemoteRenderingBackendProxy *v23;
  uint64_t v24;
  WTF::ApproximateTime *v25;
  WTF::StringImpl *v26;
  unsigned int *v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  int v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned int v60;
  NSObject *v62;
  uint64_t v63;
  const char *v64;
  unsigned int v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF *v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  int v73;
  WTF::StringImpl *v74;
  unsigned int *v75;
  uint64_t *v76;
  IPC::Encoder *v77;
  _BYTE buf[22];
  __int16 v79;
  const char *v80;
  uint64_t v81;

  v3 = this;
  v81 = *MEMORY[0x1E0C80C00];
  v5 = this + 5;
  v4 = this[5];
  if (v4
    || (this = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(this + 5, 0), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 4);
  v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v6 & ((v10 >> 31) ^ v10);
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = v7;
    v12[1] = v3[8];
    v16 = v3[5];
    if (v16)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v19 = *v5;
    if (*v5)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
      {
LABEL_23:
        v23 = (WebKit::RemoteRenderingBackendProxy *)v3[7];
        ++*(_DWORD *)a2;
        WebCore::FontCustomPlatformData::serializedData(a2);
        v24 = *((_QWORD *)v23 + 7);
        v25 = WebKit::RemoteRenderingBackendProxy::connection(v23, &v75);
        v27 = v75;
        if (!v75)
        {
LABEL_79:
          v67 = v74;
          v74 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v26);
            else
              *(_DWORD *)v67 -= 2;
          }
          v68 = v72;
          if (v72)
          {
            v72 = 0;
            v73 = 0;
            WTF::fastFree(v68, v26);
          }
          this = (uint64_t *)WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(a2);
          goto LABEL_86;
        }
        WTF::ApproximateTime::now(v25);
        v29 = v28 + 15.0;
        if (*((_QWORD *)v27 + 6) != v24)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v27 + 14), buf, v28 + 15.0);
          if (!buf[16])
          {
LABEL_71:
            v42 = 15;
LABEL_72:
            v62 = qword_1ECE716E0;
            if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
            {
              v63 = *((_QWORD *)v23 + 7);
              v64 = IPC::errorAsString(v42);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v63;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CacheFontCustomPlatformData";
              v79 = 2082;
              v80 = v64;
              _os_log_impl(&dword_196BCC000, v62, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
            }
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v23);
LABEL_75:
            v75 = 0;
            do
            {
              v65 = __ldaxr(v27);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v27));
            if (!v66)
            {
              atomic_store(1u, v27);
              IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v27);
              WTF::fastFree(v70, v71);
            }
            goto LABEL_79;
          }
          v46 = *(_QWORD *)buf;
          v47 = *(_QWORD *)&buf[8];
          v48 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v49 = v48 - *(_QWORD *)buf;
          if (v48 < *(_QWORD *)buf)
          {
            v51 = 0;
            v50 = *(_QWORD *)&buf[8];
          }
          else
          {
            v50 = 0;
            if (v49 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v51 = 0;
            }
            else
            {
              v51 = 0;
              if (v49 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v49) = 2822;
                v50 = v47;
                v51 = v49 + 2;
              }
            }
          }
          v52 = (_QWORD *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v52 >= v46 + v51)
          {
            v53 = (char *)v52 - v46;
            v42 = 17;
            if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7)
              goto LABEL_72;
            v51 = (unint64_t)(v53 + 8);
            if ((unint64_t)(v53 + 8) > v50)
              goto LABEL_72;
            *v52 = v24;
          }
          if (!v50)
          {
            v42 = 17;
            goto LABEL_72;
          }
          v54 = (*((_QWORD *)v27 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v55 = *((_QWORD *)v27 + 7);
          if (v54 + 16 >= v55)
            v54 = 0;
          if (v51 <= 0x10)
            v51 = 16;
          v56 = v54 + v51;
          if (v55 <= v56)
            v57 = 0;
          else
            v57 = v56;
          *((_QWORD *)v27 + 9) = v57;
          v58 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v27 + 8) + 16) + 128);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v57, v58));
          v60 = v27[27];
          if (v59 == 0x80000000 || v60 != 0)
          {
            v69 = v60 + 1;
            v27[27] = v69;
            if (v69 >= v27[26])
            {
              if (*((_BYTE *)v27 + 96))
                MEMORY[0x19AEBA1A0](v27[21]);
              v27[27] = 0;
            }
          }
          *((_QWORD *)v27 + 6) = v24;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v27 + 14), buf, v29);
        if (buf[16])
        {
          v30 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v31 = v30 - *(_QWORD *)buf;
          if (v30 < *(_QWORD *)buf
            || ((v32 = v31 + 2, v31 <= 0xFFFFFFFFFFFFFFFDLL) ? (v33 = v32 > *(_QWORD *)&buf[8]) : (v33 = 1), v33))
          {
            v32 = 0;
          }
          else
          {
            *(_WORD *)(*(_QWORD *)buf + v31) = 2821;
          }
          v34 = *((_QWORD *)v27 + 8);
          v35 = (*((_QWORD *)v27 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v36 = *((_QWORD *)v27 + 7);
          if (v35 + 16 >= v36)
            v35 = 0;
          if (v32 <= 0x10)
            v32 = 16;
          v37 = v35 + v32;
          if (v36 <= v37)
            v37 = 0;
          *((_QWORD *)v27 + 9) = v37;
          v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
          do
            __ldaxr(v38);
          while (__stlxr(v37, v38));
          v27[27] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v27 + 1);
          v39 = v76;
          v40 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v40 = 1300;
          *(_QWORD *)(v40 + 8) = v24;
          *(_QWORD *)(v40 + 528) = v40 + 16;
          *(_QWORD *)(v40 + 536) = v40 + 16;
          *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v40 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
          v77 = (IPC::Encoder *)v40;
          IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::encode((IPC::Encoder *)v40, (uint64_t)&v72);
          v42 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v77, 1, 0);
          v43 = v77;
          v77 = 0;
          if (v43)
          {
            IPC::Encoder::~Encoder(v43, v41);
            WTF::fastFree(v44, v45);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
          if (!v42)
            goto LABEL_75;
          goto LABEL_72;
        }
        goto LABEL_71;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v12);
    goto LABEL_23;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != v7)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v6;
    v12 = (_QWORD *)(v4 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v7 = *((_QWORD *)a2 + 4);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  v18 = v3[8];
  if (v12[1] == v18)
    return this;
  v12[1] = v18;
LABEL_86:
  ++*((_DWORD *)v3 + 13);
  return this;
}

char *IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  int v5;
  int v6;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
  v4 = v2[2] & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = (*((unsigned __int8 *)v2 + 16) >> 1) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = (*((unsigned __int8 *)v2 + 16) >> 2) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LODWORD(v2) = (*((unsigned __int8 *)v2 + 16) >> 3) & 1;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

unint64_t WebKit::CoreIPCNumber::numberHolderForNumber(WebKit::CoreIPCNumber *this, const __CFNumber *a2)
{
  CFNumberType Type;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  unint64_t v12;

  Type = CFNumberGetType(this);
  v4 = -[WebKit::CoreIPCNumber compare:](this, "compare:", &unk_1E356FEC8);
  switch(Type)
  {
    case kCFNumberSInt8Type:
      goto LABEL_11;
    case kCFNumberSInt16Type:
      goto LABEL_14;
    case kCFNumberSInt32Type:
      goto LABEL_17;
    case kCFNumberSInt64Type:
      if (v4 != -1)
        goto LABEL_3;
      goto LABEL_22;
    case kCFNumberFloat32Type:
    case kCFNumberFloatType:
      -[WebKit::CoreIPCNumber floatValue](this, "floatValue");
      v6 = 0;
      LOBYTE(v5) = v10;
      LOBYTE(v7) = BYTE1(v10);
      v8 = v10 & 0xFFFF0000;
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberFloat64Type:
    case kCFNumberDoubleType:
      -[WebKit::CoreIPCNumber doubleValue](this, "doubleValue");
      v5 = v11;
      LOBYTE(v7) = BYTE1(v11);
      goto LABEL_7;
    case kCFNumberCharType:
      if (v4 == -1)
      {
LABEL_11:
        LOBYTE(v5) = -[WebKit::CoreIPCNumber charValue](this, "charValue");
        v6 = 0;
        v8 = 0;
        LOBYTE(v7) = 0;
      }
      else
      {
        LOBYTE(v5) = -[WebKit::CoreIPCNumber unsignedCharValue](this, "unsignedCharValue");
        v6 = 0;
        v8 = 0;
        LOBYTE(v7) = 0;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberShortType:
      if (v4 == -1)
      {
LABEL_14:
        LOWORD(v5) = -[WebKit::CoreIPCNumber shortValue](this, "shortValue");
        v6 = 0;
        v8 = 0;
        LOBYTE(v7) = BYTE1(v5);
      }
      else
      {
        LODWORD(v5) = -[WebKit::CoreIPCNumber unsignedShortValue](this, "unsignedShortValue");
        v6 = 0;
        v8 = 0;
        LODWORD(v7) = v5 >> 8;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberIntType:
      if (v4 == -1)
      {
LABEL_17:
        LODWORD(v5) = -[WebKit::CoreIPCNumber intValue](this, "intValue");
        v6 = 0;
        LOBYTE(v7) = BYTE1(v5);
        v8 = v5 & 0xFFFF0000;
      }
      else
      {
        LODWORD(v5) = -[WebKit::CoreIPCNumber unsignedIntValue](this, "unsignedIntValue");
        v6 = 0;
        LOBYTE(v7) = BYTE1(v5);
        v8 = v5 & 0xFFFF0000;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberLongType:
      if (v4 == -1)
        goto LABEL_20;
      v5 = -[WebKit::CoreIPCNumber unsignedLongValue](this, "unsignedLongValue");
      v6 = v5 & 0xFFFFFFFF00000000;
      LOBYTE(v7) = BYTE1(v5);
      v8 = v5 & 0xFFFF0000;
      break;
    case kCFNumberLongLongType:
      if (v4 == -1)
      {
LABEL_22:
        v5 = -[WebKit::CoreIPCNumber longLongValue](this, "longLongValue");
        v6 = v5 & 0xFFFFFFFF00000000;
        LOBYTE(v7) = BYTE1(v5);
        v8 = v5 & 0xFFFF0000;
      }
      else
      {
LABEL_3:
        v5 = -[WebKit::CoreIPCNumber unsignedLongLongValue](this, "unsignedLongLongValue");
        v6 = v5 & 0xFFFFFFFF00000000;
        LOBYTE(v7) = BYTE1(v5);
        v8 = v5 & 0xFFFF0000;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberCFIndexType:
    case kCFNumberNSIntegerType:
LABEL_20:
      v5 = -[WebKit::CoreIPCNumber longValue](this, "longValue");
      v6 = v5 & 0xFFFFFFFF00000000;
      LOBYTE(v7) = BYTE1(v5);
      v8 = v5 & 0xFFFF0000;
      break;
    case kCFNumberCGFloatType:
      -[WebKit::CoreIPCNumber doubleValue](this, "doubleValue");
      v5 = v12;
      v7 = v12 >> 8;
LABEL_7:
      v8 = v5 & 0xFFFF0000;
      v6 = v5 & 0xFFFFFFFF00000000;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x196C59A08);
  }
  return v6 | v8 | v5 | (v7 << 8);
}

void IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
  IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, (int *)v4, v3);
}

void IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  if (a3 == 4)
  {
    if (a2[2] == 4)
    {
      v3 = *a2;
      *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v3;
    }
    else
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(v4);
    }
  }
  else
  {
    IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul,3ul,4ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  __int16 v3;
  uint64_t v4;

  if (a3 == 3)
  {
    if (a2[2] == 3)
    {
      v3 = *(_WORD *)a2;
      *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v3;
    }
    else
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(v4);
    }
  }
  else
  {
    IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul,3ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  __int16 v3;
  uint64_t v4;

  if (a3 == 2)
  {
    if (a2[2] == 2)
    {
      v3 = *(_WORD *)a2;
      *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v3;
    }
    else
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(v4);
    }
  }
  else
  {
    IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  char v3;
  uint64_t v4;

  if (a3 == 1)
  {
    if (a2[2] == 1)
    {
      v3 = *(_BYTE *)a2;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
    }
    else
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(v4);
    }
  }
  else
  {
    IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  char v3;
  IPC::Encoder *v4;
  int *v5;
  uint64_t v6;

  if (a3)
  {
    IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(a1, a2, a3);
  }
  else if (a2[2])
  {
    v4 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul,3ul,4ul>(v4, v5, v6);
  }
  else
  {
    v3 = *(_BYTE *)a2;
    *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
  }
}

void IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *this, int *a2, uint64_t a3)
{
  size_t v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;

  switch(a3)
  {
    case 5:
      if (a2[2] != 5)
        goto LABEL_32;
      v27 = *a2;
      *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v27;
      return;
    case 6:
      if (a2[2] != 6)
        goto LABEL_32;
      goto LABEL_3;
    case 7:
      if (a2[2] != 7)
        goto LABEL_32;
      goto LABEL_3;
    case 8:
      if (a2[2] != 8)
        goto LABEL_32;
      goto LABEL_3;
    case 9:
      if (a2[2] != 9)
        goto LABEL_32;
LABEL_3:
      v9 = *(_QWORD *)a2;
      *(_QWORD *)IPC::Encoder::grow(this, 8uLL, 8) = v9;
      return;
    case 10:
      if (a2[2] != 10)
        goto LABEL_32;
      v10 = *a2;
      v11 = *((_QWORD *)this + 68);
      v12 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v13 = v12 + 4;
      v14 = *((_QWORD *)this + 69);
      if (v14 >= v12 + 4)
      {
        v15 = (char *)*((_QWORD *)this + 66);
LABEL_8:
        bzero(&v15[v11], v12 - v11);
        *((_QWORD *)this + 68) = v13;
        v16 = (_DWORD *)(*((_QWORD *)this + 66) + v12);
        *((_QWORD *)this + 67) = v16 + 1;
        *v16 = v10;
        return;
      }
      v20 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v21 = v20;
        v20 *= 2;
      }
      while (v21 < v13);
      v22 = (char *)mmap(0, v21, 3, 4098, -1, 0);
      if (v22 != (char *)-1)
      {
        v15 = v22;
        memcpy(v22, *((const void **)this + 66), *((_QWORD *)this + 68));
        v23 = (char *)*((_QWORD *)this + 66);
        if (v23 != (char *)this + 16)
          munmap(v23, *((_QWORD *)this + 69));
        *((_QWORD *)this + 66) = v15;
        *((_QWORD *)this + 69) = v21;
        v11 = *((_QWORD *)this + 68);
        goto LABEL_8;
      }
      goto LABEL_34;
    default:
      if (a3 != 11)
        return;
      if (a2[2] != 11)
      {
LABEL_32:
        v26 = (char *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_33:
        munmap(v26, *((_QWORD *)this + 69));
        goto LABEL_24;
      }
      v7 = *(_QWORD *)a2;
      v17 = *((_QWORD *)this + 68);
      v5 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
      v6 = v5 + 8;
      v18 = *((_QWORD *)this + 69);
      if (v18 >= v5 + 8)
      {
        v4 = (char *)*((_QWORD *)this + 66);
        goto LABEL_13;
      }
      v24 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v3 = v24;
        v24 *= 2;
      }
      while (v3 < v6);
      v25 = (char *)mmap(0, v3, 3, 4098, -1, 0);
      if (v25 == (char *)-1)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x196C59FBCLL);
      }
      v4 = v25;
      memcpy(v25, *((const void **)this + 66), *((_QWORD *)this + 68));
      v26 = (char *)*((_QWORD *)this + 66);
      if (v26 != (char *)this + 16)
        goto LABEL_33;
LABEL_24:
      *((_QWORD *)this + 66) = v4;
      *((_QWORD *)this + 69) = v3;
      v17 = *((_QWORD *)this + 68);
LABEL_13:
      bzero(&v4[v17], v5 - v17);
      *((_QWORD *)this + 68) = v6;
      v19 = (_QWORD *)(*((_QWORD *)this + 66) + v5);
      *((_QWORD *)this + 67) = v19 + 1;
      *v19 = v7;
      return;
  }
}

uint64_t WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<void const*>,WTF::DefaultHash<void const*>>,void const*>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v8;
  int v10;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 8 * v6);
  if (v7 == a2)
    return 1;
  v10 = 1;
  do
  {
    v8 = v7 != 0;
    if (!v7)
      break;
    v6 = (v6 + v10) & v2;
    v7 = *(_QWORD *)(a1 + 8 * v6);
    ++v10;
  }
  while (v7 != a2);
  return v8;
}

WTF::StringImpl *IPC::ArgumentCoder<__CFString const*,void>::encode(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  MEMORY[0x19AEABCC8](&v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)&v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebNavigationDataStore>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::decode(a1, a2);
  if (!a2[472])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BYTE v24[192];
  CFTypeRef v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[19];
  CFTypeRef cf;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[19];
  const void *v66;
  char v67;
  char v68;
  _BYTE v69[192];
  const void *v70;
  char v71;
  WTF::StringImpl *v72;
  char v73;
  WTF::StringImpl *v74;
  char v75;

  IPC::Decoder::decode<WTF::String>(a1, &v74);
  IPC::Decoder::decode<WTF::String>(a1, &v72);
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v69);
  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, &v47);
  if (!*a1)
    goto LABEL_32;
  if (!v75)
    goto LABEL_31;
  v5 = v74;
  v74 = 0;
  v22 = v5;
  if (!v73
    || (v6 = v72, v72 = 0, v23 = v6, !v71)
    || (WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v24, (uint64_t)v69),
        v7 = v70,
        v70 = 0,
        v25 = v7,
        !v68))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    *a2 = 0;
    a2[472] = 0;
    goto LABEL_20;
  }
  v27 = v48;
  v28 = v49;
  v8 = v52;
  v52 = 0u;
  v9 = v53;
  v53 = 0u;
  v10 = v50;
  v26 = v47;
  v47 = 0;
  LODWORD(v48) = v48 & 0xFFFFFFFE;
  v50 = 0;
  v29 = v10;
  v30 = v51;
  v31 = v8;
  v32 = v9;
  *(_QWORD *)&v8 = v54;
  v54 = 0;
  v33 = v8;
  v11 = v55;
  v55 = 0;
  v34 = v11;
  *(_QWORD *)&v8 = v56;
  v56 = 0;
  v35 = v8;
  v12 = v57;
  v57 = 0;
  v36 = v12;
  LOBYTE(v37) = 0;
  v38 = 0;
  if (v59)
  {
    v13 = v58;
    v58 = 0;
    v37 = v13;
    v38 = 1;
  }
  *(_DWORD *)&v44[15] = *(_DWORD *)&v65[15];
  v43 = v64;
  *(_OWORD *)v44 = *(_OWORD *)v65;
  v39 = v60;
  v40 = v61;
  v41 = v62;
  v42 = v63;
  v14 = v66;
  v66 = 0;
  cf = v14;
  v46 = v67;
  WebKit::WebNavigationDataStore::WebNavigationDataStore((uint64_t)a2, (uint64_t *)&v22);
  a2[472] = 1;
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v26, v15);
  v17 = v25;
  v25 = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v24);
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v4);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v22;
  v22 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v4);
    else
      *(_DWORD *)v19 -= 2;
  }
LABEL_20:
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v47, v4);
  result = std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v69);
  if (v73)
  {
    result = v72;
    v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v75)
  {
    result = v74;
    v74 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C5A3D4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef cf;
  char a68;
  WebCore::ResourceRequestBase *v68;
  WebCore::ResourceResponseBase *v69;
  uint64_t v70;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;

  if (cf)
    CFRelease(cf);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v69, a2);
  if (a35)
    CFRelease(a35);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v68);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v72);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v72);
    else
      *(_DWORD *)a9 -= 2;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&a68, v72);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&STACK[0x2E0]);
  if (*(_BYTE *)(v70 - 56))
  {
    v74 = *(WTF::StringImpl **)(v70 - 64);
    *(_QWORD *)(v70 - 64) = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (*(_BYTE *)(v70 - 40))
  {
    v75 = *(WTF::StringImpl **)(v70 - 48);
    *(_QWORD *)(v70 - 48) = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v73);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebNavigationDataStore::WebNavigationDataStore(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 16, (uint64_t)(a2 + 2));
  v6 = a2[26];
  a2[26] = 0;
  *(_QWORD *)(a1 + 208) = v6;
  WTF::URL::URL(a1 + 216, a2 + 27);
  v7 = a2[32];
  v8 = a2[33];
  a2[32] = 0;
  *(_QWORD *)(a1 + 256) = v7;
  *(_QWORD *)(a1 + 264) = v8;
  v9 = a2[34];
  a2[34] = 0;
  *(_QWORD *)(a1 + 272) = v9;
  v10 = a2[35];
  a2[35] = 0;
  *(_QWORD *)(a1 + 280) = v10;
  v11 = a2[36];
  a2[36] = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = v11;
  v12 = a2[37];
  a2[37] = 0;
  *(_QWORD *)(a1 + 296) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = 0;
  *(_DWORD *)(a1 + 304) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = 0;
  *(_DWORD *)(a1 + 308) = v12;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  v13 = a2[39];
  a2[39] = 0;
  *(_QWORD *)(a1 + 312) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 80);
  *((_DWORD *)a2 + 80) = 0;
  *(_DWORD *)(a1 + 320) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 81);
  *((_DWORD *)a2 + 81) = 0;
  *(_DWORD *)(a1 + 324) = v13;
  v14 = a2[41];
  a2[41] = 0;
  *(_QWORD *)(a1 + 328) = v14;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (*((_BYTE *)a2 + 344))
  {
    v15 = a2[42];
    a2[42] = 0;
    *(_QWORD *)(a1 + 336) = v15;
    *(_BYTE *)(a1 + 344) = 1;
  }
  v16 = *((_OWORD *)a2 + 22);
  v17 = *((_OWORD *)a2 + 24);
  *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 384) = v17;
  *(_OWORD *)(a1 + 352) = v16;
  v18 = *((_OWORD *)a2 + 25);
  v19 = *((_OWORD *)a2 + 26);
  v20 = *((_OWORD *)a2 + 27);
  *(_DWORD *)(a1 + 447) = *(_DWORD *)((char *)a2 + 447);
  *(_OWORD *)(a1 + 416) = v19;
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 400) = v18;
  v21 = a2[57];
  a2[57] = 0;
  *(_QWORD *)(a1 + 456) = v21;
  *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
  return a1;
}

void sub_196C5A648(_Unwind_Exception *a1)
{
  uint64_t v1;
  WebCore::ResourceRequestBase *v2;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = *(const void **)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v6 = *(WTF::StringImpl **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)v1;
  *(_QWORD *)v1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v22 = 0;
  v23 = 0;
  if (result >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>(a1, (uint64_t)&v19);
      if (!v21)
        break;
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>((uint64_t)&v22, (unint64_t)&v19);
      }
      else
      {
        v14 = HIDWORD(v23) + 1;
        v15 = (_QWORD *)(v22 + 16 * HIDWORD(v23));
        v16 = v19;
        v19 = 0;
        *v15 = v16;
        v17 = v20;
        v20 = 0;
        v15[1] = v17;
        HIDWORD(v23) = v14;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      if (!--v6)
      {
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v22, HIDWORD(v23));
        *(_QWORD *)a2 = v22;
        v18 = v23;
        v22 = 0;
        v23 = 0;
        *(_QWORD *)(a2 + 8) = v18;
        goto LABEL_14;
      }
    }
  }
  else
  {
    if (!result)
    {
      v12 = 0;
      v13 = 0;
LABEL_13:
      v22 = 0;
      v23 = 0;
      *(_QWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v13;
LABEL_14:
      *(_BYTE *)(a2 + 16) = 1;
      return WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
    }
    LODWORD(v23) = result;
    v22 = WTF::fastMalloc((WTF *)(16 * result));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>(a1, (uint64_t)&v19);
      if (!v21)
        break;
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>((uint64_t)&v22, (unint64_t)&v19);
      }
      else
      {
        v8 = HIDWORD(v23) + 1;
        v9 = (_QWORD *)(v22 + 16 * HIDWORD(v23));
        v10 = v19;
        v19 = 0;
        *v9 = v10;
        v11 = v20;
        v20 = 0;
        v9[1] = v11;
        HIDWORD(v23) = v8;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      if (!--v6)
      {
        v12 = v22;
        v13 = v23;
        goto LABEL_13;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  return WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
}

void sub_196C5A864(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::pair<WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::pair<WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v9);
  if (v10)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v7);
    if (v8)
    {
      if (v10)
      {
        v6 = v7;
        *(_QWORD *)a2 = v9;
        *(_QWORD *)(a2 + 8) = v6;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      if (v10)
      {
        result = v9;
        v9 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

WTF::RunLoop *WebKit::NetworkCache::Storage::finishReadOperation(WTF::RunLoop *result, uint64_t a2)
{
  WTF::RunLoop *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::RunLoop *v7;
  WTF::RunLoop *v8;

  v3 = result;
  v4 = (unsigned int *)(a2 + 192);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    WTF::RunLoop::main(result);
    v7 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = off_1E34C4D28;
    *((_QWORD *)v7 + 1) = v3;
    *((_QWORD *)v7 + 2) = a2;
    v8 = v7;
    WTF::RunLoop::dispatch();
    result = v8;
    if (v8)
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

void WebKit::NetworkCache::Storage::Record::~Record(WebKit::NetworkCache::Storage::Record *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
    os_release(v3);
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
    os_release(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t WebKit::NetworkCache::Key::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  BOOL v4;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;

  v4 = *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    && *(_DWORD *)(a1 + 48) == (unint64_t)*(unsigned int *)(a2 + 48);
  if (v4
    && WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3)
    && WTF::equal(*(WTF **)(a1 + 8), *(const WTF::StringImpl **)(a2 + 8), v8)
    && WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), v9))
  {
    return WTF::equal(*(WTF **)(a1 + 24), *(const WTF::StringImpl **)(a2 + 24), v10);
  }
  else
  {
    return 0;
  }
}

BOOL WebKit::NetworkCache::decodeRecordHeader(dispatch_data_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *v9;
  _BOOL8 result;
  dispatch_data_t subrange;
  size_t size;
  char v15;
  void *object;
  __int128 v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34C4838;
  v8[1] = a2;
  v8[2] = &v15;
  object = v8;
  WebKit::NetworkCache::Data::apply((uint64_t)a1, (uint64_t)&object);
  v9 = object;
  object = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  result = 0;
  if (v15 && *(_DWORD *)a2 == 17)
  {
    subrange = dispatch_data_create_subrange(*a1, *(_QWORD *)(a2 + 160), *(_QWORD *)(a2 + 112));
    size = 0;
    object = subrange;
    *(_QWORD *)&v17 = 0;
    if (subrange)
      size = dispatch_data_get_size(subrange);
    *((_QWORD *)&v17 + 1) = size;
    v18 = 0;
    WTF::OSObjectPtr<dispatch_data_s *>::operator=((void **)a3, &object);
    *(_OWORD *)(a3 + 8) = v17;
    *(_BYTE *)(a3 + 24) = v18;
    if (object)
      os_release(object);
    WebKit::NetworkCache::computeSHA1(a3, a4);
    return *(void **)(a2 + 88) == object
        && *(_QWORD *)(a2 + 96) == (_QWORD)v17
        && *(_DWORD *)(a2 + 104) == (unint64_t)DWORD2(v17);
  }
  return result;
}

void **WTF::OSObjectPtr<dispatch_data_s *>::operator=(void **a1, void **a2)
{
  void *v3;
  void *v4;

  v3 = *a2;
  if (*a2)
    os_retain(*a2);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    os_release(v4);
  return a1;
}

uint64_t WebKit::NetworkCache::computeSHA1(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _BYTE v8[96];

  WTF::SHA1::SHA1((WTF::SHA1 *)v8);
  MEMORY[0x19AEABB6C](v8, a2, 8);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34C4450;
  v4[1] = v8;
  v7 = v4;
  WebKit::NetworkCache::Data::apply(a1, (uint64_t)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return WTF::SHA1::computeHash();
}

BOOL WebKit::NetworkCache::Data::apply(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD applier[5];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = *(NSObject **)a1;
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3321888768;
  applier[2] = ___ZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEE_block_invoke;
  applier[3] = &__block_descriptor_40_e8_32c108_ZTSKZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEEE3__0_e47_B40__0__NSObject_OS_dispatch_data__8Q16r_v24Q32l;
  applier[4] = a2;
  return dispatch_data_apply(v2, applier);
}

uint64_t ___ZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), a4, a5);
}

uint64_t WebKit::NetworkCache::Key::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 24));
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = v4;
  return a1;
}

{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  WTF::StringImpl *v15;

  WTF::String::isolatedCopy();
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v15;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::String::isolatedCopy();
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::String::isolatedCopy();
  v9 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::String::isolatedCopy();
  v11 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v12;
  v13 = *(_OWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v13;
  return a1;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::retrieve(WebKit::NetworkCache::Cache *a1, const WebCore::ResourceRequest *a2, const WebCore::ResourceRequest *a3, __int16 a4, char a5, __int16 a6, WTF::MonotonicTime *a7)
{
  WTF::MonotonicTime *v14;
  int v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  WebKit::NetworkCache::Cache *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  __int128 v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WebKit::NetworkCache::Entry *v59;
  __int128 v60;
  _BYTE v61[89];
  WebKit::NetworkCache::Cache *v62;
  WebKit::NetworkCache::Cache *v63;
  CFTypeRef v64[25];
  _BYTE v65[120];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[46];
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  WebKit::NetworkCache::Cache::makeCacheKey(a1, a2, (WTF::SHA1 *)&v73);
  v14 = (WTF::MonotonicTime *)WebCore::ResourceRequestBase::priority(a2);
  v15 = (int)v14;
  memset(&v61[8], 0, 75);
  v61[88] = 0;
  WTF::MonotonicTime::now(v14);
  v60 = v16;
  *(_DWORD *)v61 = v15;
  if (!*((_QWORD *)a1 + 4)
    || (WebCore::ResourceRequestBase::isConditional(a2) & 1) != 0
    || (*((_BYTE *)a2 + 147) & 0xFE) == 2
    || (v47 = WebCore::ResourceRequestBase::cachePolicy(a2), v47 != 5) && v47)
  {
    v17 = 0;
  }
  else
  {
    WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(*((_QWORD *)a1 + 4), a3, a2, (_DWORD **)&v73, a4, a5, a6);
    v17 = 1;
  }
  v18 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod(a2);
  if (MEMORY[0x19AEABBCC](*v18, "GET", 3)
    && (WebCore::ResourceRequestBase::cachePolicy(a2) != 1
     || (WebCore::ResourceRequestBase::isConditional(a2) & 1) != 0))
  {
    if (v17
      && WebKit::NetworkCache::SpeculativeLoadManager::canRetrieve(*((_QWORD *)a1 + 4), (uint64_t)&v73, a2, (uint64_t *)a3))
    {
      v48 = *((_QWORD *)a1 + 4);
      v49 = *((_QWORD *)a1 + 2);
      v50 = (unsigned int *)(v49 + 120);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
      v62 = (WebKit::NetworkCache::Cache *)v49;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v63, a2);
      v52 = *(_OWORD *)&v61[16];
      *(_OWORD *)&v65[48] = *(_OWORD *)&v61[32];
      *(_OWORD *)&v65[64] = *(_OWORD *)&v61[48];
      *(_OWORD *)&v65[80] = *(_OWORD *)&v61[64];
      *(_OWORD *)&v65[89] = *(_OWORD *)&v61[73];
      *(_OWORD *)v65 = v60;
      *(_OWORD *)&v65[16] = *(_OWORD *)v61;
      v53 = *(const void **)a7;
      *(_QWORD *)a7 = 0;
      *(_OWORD *)&v65[32] = v52;
      v54 = *((_QWORD *)a1 + 8);
      v64[24] = v53;
      *(_QWORD *)&v65[112] = v54;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::Function<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void>(&v58, (uint64_t *)&v62);
      WebKit::NetworkCache::SpeculativeLoadManager::retrieve(v48, (uint64_t)&v73, (const WTF::StringImpl *)&v58);
      v55 = v58;
      v58 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0::~$_0((uint64_t)&v62);
    }
    else
    {
      v19 = *((_QWORD *)a1 + 1);
      ++*(_DWORD *)a1;
      v62 = a1;
      v63 = a1;
      WebCore::ResourceRequest::ResourceRequest(v64, a2);
      v20 = *(const void **)a7;
      *(_QWORD *)a7 = 0;
      *(_QWORD *)v65 = v20;
      *(_OWORD *)&v65[97] = *(_OWORD *)&v61[73];
      *(_OWORD *)&v65[72] = *(_OWORD *)&v61[48];
      *(_OWORD *)&v65[88] = *(_OWORD *)&v61[64];
      *(_OWORD *)&v65[8] = v60;
      *(_OWORD *)&v65[24] = *(_OWORD *)v61;
      *(_OWORD *)&v65[56] = *(_OWORD *)&v61[32];
      *(_OWORD *)&v65[40] = *(_OWORD *)&v61[16];
      WebKit::NetworkCache::Key::Key((uint64_t)&v66, (uint64_t)&v73);
      v21 = *((_QWORD *)a1 + 2);
      v22 = (unsigned int *)(v21 + 120);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v24 = *((_QWORD *)a1 + 8);
      v71 = v21;
      *(_QWORD *)v72 = v24;
      v25 = *((_OWORD *)a3 + 1);
      *(_OWORD *)&v72[8] = *(_OWORD *)a3;
      *(_OWORD *)&v72[24] = v25;
      *(_WORD *)&v72[40] = a4;
      v72[42] = a5;
      *(_WORD *)&v72[44] = a6;
      v26 = WTF::fastMalloc((WTF *)0x1D8);
      *(_QWORD *)v26 = off_1E34C4248;
      *(_QWORD *)(v26 + 8) = v62;
      v27 = v63;
      v63 = 0;
      *(_QWORD *)(v26 + 16) = v27;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v26 + 24), (const WebCore::ResourceRequest *)v64);
      v28 = *(_QWORD *)v65;
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v26 + 224) = v28;
      v30 = *(_OWORD *)&v65[24];
      v29 = *(_OWORD *)&v65[40];
      *(_OWORD *)(v26 + 232) = *(_OWORD *)&v65[8];
      *(_OWORD *)(v26 + 248) = v30;
      *(_OWORD *)(v26 + 264) = v29;
      v31 = *(_OWORD *)&v65[104];
      v33 = *(_OWORD *)&v65[56];
      v32 = *(_OWORD *)&v65[72];
      *(_OWORD *)(v26 + 312) = *(_OWORD *)&v65[88];
      *(_OWORD *)(v26 + 328) = v31;
      *(_OWORD *)(v26 + 280) = v33;
      *(_OWORD *)(v26 + 296) = v32;
      *(_OWORD *)(v26 + 344) = v66;
      *(_QWORD *)(v26 + 360) = v67;
      v34 = *((_QWORD *)&v67 + 1);
      v66 = 0u;
      v67 = 0u;
      *(_QWORD *)(v26 + 368) = v34;
      v35 = v68;
      v36 = v69;
      *(_QWORD *)(v26 + 408) = v70;
      *(_OWORD *)(v26 + 376) = v35;
      *(_OWORD *)(v26 + 392) = v36;
      v37 = v71;
      v71 = 0;
      *(_QWORD *)(v26 + 416) = v37;
      v38 = *(_OWORD *)v72;
      v39 = *(_OWORD *)&v72[16];
      *(_OWORD *)(v26 + 454) = *(_OWORD *)&v72[30];
      *(_OWORD *)(v26 + 424) = v38;
      *(_OWORD *)(v26 + 440) = v39;
      v58 = v26;
      WebKit::NetworkCache::Storage::retrieve(v19, (uint64_t)&v73, v15, &v58);
      v41 = v58;
      v58 = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1(&v62, v40);
    }
  }
  else
  {
    v59 = 0;
    WebKit::NetworkCache::Cache::completeRetrieve(a7, &v59, (uint64_t)&v60);
    if (v59)
    {
      WebKit::NetworkCache::Entry::~Entry(v59, v42);
      WTF::fastFree(v56, v57);
    }
  }
  v43 = v76;
  v76 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v75;
  v75 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v74;
  v74 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v42);
    else
      *(_DWORD *)v45 -= 2;
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::makeCacheKey@<X0>(WebKit::NetworkCache::Cache *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, WTF::SHA1 *a3@<X8>)
{
  WTF::URL *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[2];

  WebCore::ResourceRequestBase::httpHeaderField();
  {
    v11[0] = (WTF::StringImpl *)"Resource";
    v11[1] = (WTF::StringImpl *)9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v11);
  }
  v6 = (WTF::URL *)WebCore::ResourceRequestBase::url(a2);
  WTF::URL::stringWithoutFragmentIdentifier(v6);
  WebKit::NetworkCache::Key::Key(a3, (_DWORD **)a2 + 20, &WebKit::NetworkCache::resourceType(void)::resource, (_DWORD **)&v10, (_DWORD **)v11, *((_QWORD *)this + 1) + 28);
  v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::SHA1 *WebKit::NetworkCache::Key::Key(WTF::SHA1 *a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, uint64_t a6)
{
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  v8 = *a2;
  if (*a2)
    *v8 += 2;
  *(_QWORD *)a1 = v8;
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  *((_QWORD *)a1 + 1) = v9;
  v10 = *a5;
  if (*a5)
    *v10 += 2;
  *((_QWORD *)a1 + 2) = v10;
  v11 = *a4;
  if (*a4)
    *v11 += 2;
  *((_QWORD *)a1 + 3) = v11;
  WebKit::NetworkCache::Key::computeHash((uint64_t)a1, a6);
  WebKit::NetworkCache::Key::partitionToPartitionHash(a1, a6);
  return a1;
}

uint64_t WebKit::NetworkCache::Key::partitionToPartitionHash(WTF::SHA1 *a1, uint64_t a2)
{
  const WTF::String *v4;
  _BYTE v6[96];

  WTF::SHA1::SHA1((WTF::SHA1 *)v6);
  MEMORY[0x19AEABB6C](v6, a2, 8);
  WebKit::NetworkCache::hashString((WebKit::NetworkCache *)v6, a1, v4);
  return WTF::SHA1::computeHash();
}

uint64_t WebKit::NetworkCache::Key::computeHash(uint64_t a1, uint64_t a2)
{
  const WTF::String *v4;
  const WTF::String *v5;
  const WTF::String *v6;
  const WTF::String *v7;
  _BYTE v9[96];

  WTF::SHA1::SHA1((WTF::SHA1 *)v9);
  MEMORY[0x19AEABB6C](v9, a2, 8);
  WebKit::NetworkCache::hashString((WebKit::NetworkCache *)v9, (WTF::SHA1 *)a1, v4);
  WebKit::NetworkCache::hashString((WebKit::NetworkCache *)v9, (WTF::SHA1 *)(a1 + 8), v5);
  WebKit::NetworkCache::hashString((WebKit::NetworkCache *)v9, (WTF::SHA1 *)(a1 + 16), v6);
  WebKit::NetworkCache::hashString((WebKit::NetworkCache *)v9, (WTF::SHA1 *)(a1 + 24), v7);
  return WTF::SHA1::computeHash();
}

uint64_t WebKit::NetworkCache::hashString(WebKit::NetworkCache *this, WTF::SHA1 *a2, const WTF::String *a3)
{
  uint64_t result;

  if (*(_QWORD *)a2)
    return WTF::SHA1::addUTF8Bytes();
  return result;
}

BOOL WTF::String::containsOnlyASCII(WTF::String *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 1;
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 4);
  v5 = (v2 & 7) == 0 || v3 == 0;
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
  {
    v9 = v2 + v3;
    if (v5)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v18 = v3 - 1;
      v19 = v2 + 1;
      do
      {
        v20 = *(unsigned __int8 *)v2++;
        v10 |= v20;
        if ((v19 & 7) == 0)
          break;
        v21 = v18--;
        ++v19;
      }
      while (v21);
    }
    while (v2 < (v9 & 0xFFFFFFFFFFFFFFF8))
    {
      v22 = *(_QWORD *)v2;
      v2 += 8;
      v10 |= v22;
    }
    while (v2 != v9)
    {
      v23 = *(unsigned __int8 *)v2++;
      v10 |= v23;
    }
    v17 = v10 & 0x8080808080808080;
  }
  else
  {
    v6 = v2 + 2 * v3;
    if (v5)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v11 = 2 * v3 - 2;
      v12 = v2 + 2;
      do
      {
        v13 = *(unsigned __int16 *)v2;
        v2 += 2;
        v7 |= v13;
        if ((v12 & 7) == 0)
          break;
        v14 = v11;
        v11 -= 2;
        v12 += 2;
      }
      while (v14);
    }
    while (v2 < (v6 & 0xFFFFFFFFFFFFFFF8))
    {
      v15 = *(_QWORD *)v2;
      v2 += 8;
      v7 |= v15;
    }
    while (v2 != v6)
    {
      v16 = *(unsigned __int16 *)v2;
      v2 += 2;
      v7 |= v16;
    }
    v17 = v7 & 0xFF80FF80FF80FF80;
  }
  return v17 == 0;
}

uint64_t WebKit::NetworkCache::Storage::retrieve(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  WTF::MonotonicTime *v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::NetworkCache::Storage::ReadOperation *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  void *v20;
  WebKit::NetworkCache::Storage::ReadOperation *v21;
  WebKit::NetworkCache::Storage::Record *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[27];
  WebKit::NetworkCache::Storage::Record *v27;

  if (!*(_QWORD *)(a1 + 40))
  {
    v27 = 0;
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    v23 = 0u;
    v24 = 0u;
    WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(a4, &v27);
    result = (uint64_t)v27;
    v27 = 0;
    if (!result)
      return result;
    goto LABEL_12;
  }
  if ((WebKit::NetworkCache::Storage::mayContain(a1, a2) & 1) == 0)
  {
    v22 = 0;
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    v23 = 0u;
    v24 = 0u;
    WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(a4, &v22);
    result = (uint64_t)v22;
    v22 = 0;
    if (!result)
      return result;
LABEL_12:
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)result, v18);
    return WTF::fastFree(v19, v20);
  }
  result = WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>((unint64_t *)(a1 + 208), a2, (const WTF::StringImpl *)a4);
  if ((result & 1) == 0)
  {
    result = WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>((uint64_t *)(a1 + 240), a2, (const WTF::StringImpl *)a4);
    if ((result & 1) == 0)
    {
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x118);
      v10 = v9;
      do
        v11 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v11 + 1, (unsigned int *)a1));
      *v9 = a1;
      v12 = (WTF::MonotonicTime *)WebKit::NetworkCache::Key::Key((uint64_t)(v9 + 1), a2);
      v10[10] = ++WebKit::NetworkCache::nextReadOperationOrdinal(void)::ordinal;
      *((_DWORD *)v10 + 22) = a3;
      v13 = *a4;
      *a4 = 0;
      v10[12] = v13;
      v10[13] = 0;
      v10[18] = 0;
      v10[19] = 0;
      v10[17] = 0;
      *((_BYTE *)v10 + 160) = 0;
      *((_DWORD *)v10 + 48) = 0;
      *((_BYTE *)v10 + 196) = 0;
      *(_OWORD *)(v10 + 27) = 0u;
      *(_OWORD *)(v10 + 29) = 0u;
      *(_OWORD *)(v10 + 31) = 0u;
      *(_OWORD *)(v10 + 25) = 0u;
      *(_OWORD *)((char *)v10 + 259) = 0u;
      WTF::MonotonicTime::now(v12);
      v10[25] = v14;
      v10[32] = *(_QWORD *)(a1 + 88);
      v21 = (WebKit::NetworkCache::Storage::ReadOperation *)v10;
      WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::enqueue(a1 + 128, (uint64_t *)&v21);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(v15);
        WTF::fastFree(v16, v17);
      }
      return (uint64_t)WebKit::NetworkCache::Storage::dispatchPendingReadOperations((uint64_t *)a1);
    }
  }
  return result;
}

uint64_t *WebKit::NetworkCache::Storage::dispatchPendingReadOperations(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  WebKit::NetworkCache::Storage::ReadOperation *v6;

  if (*((_DWORD *)this + 35))
  {
    v1 = (uint64_t)this;
    v2 = this + 16;
    do
    {
      v3 = *(_QWORD *)(v1 + 144);
      if (v3 && *(_DWORD *)(v3 - 12) > 5u)
        break;
      WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::dequeue(v2, &v6);
      WebKit::NetworkCache::Storage::dispatchReadOperation((uint64_t *)v1, &v6);
      this = (uint64_t *)v6;
      v6 = 0;
      if (this)
      {
        WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation((WebKit::NetworkCache::Storage::ReadOperation *)this);
        this = (uint64_t *)WTF::fastFree(v4, v5);
      }
    }
    while (*(_DWORD *)(v1 + 140));
  }
  return this;
}

uint64_t WebKit::NetworkCache::Storage::mayContain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (((*(_DWORD *)(v2 + 4 * ((v3 >> 5) & 0x1FFF)) >> v3) & 1) != 0)
    return (*(_DWORD *)(v2 + 4 * ((v3 >> 37) & 0x1FFF)) >> SBYTE4(v3)) & 1;
  else
    return 0;
}

uint64_t WebKit::NetworkCache::Storage::dispatchReadOperation(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  WebKit::NetworkCache::Storage::ReadOperation *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  WebKit::NetworkCache::Storage::ReadOperation *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  WebKit::NetworkCache::Storage::ReadOperation **v13;
  WebKit::NetworkCache::Storage::ReadOperation *v14;
  WebKit::NetworkCache::Storage::ReadOperation **v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t result;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;

  v3 = a1;
  v4 = (WebKit::NetworkCache::Storage::ReadOperation *)*a2;
  v6 = a1 + 18;
  v5 = a1[18];
  if (v5
    || (a1 = (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::expand(a1 + 18),
        (v5 = *v6) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (WebKit::NetworkCache::Storage::ReadOperation *)*a2;
  v9 = ~(*a2 << 32) + *a2;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v7 & ((v11 >> 31) ^ v11);
  v13 = (WebKit::NetworkCache::Storage::ReadOperation **)(v5 + 8 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != v8)
    {
      if (v14 == (WebKit::NetworkCache::Storage::ReadOperation *)-1)
        v15 = v13;
      v12 = (v12 + v16) & v7;
      v13 = (WebKit::NetworkCache::Storage::ReadOperation **)(v5 + 8 * v12);
      v14 = *v13;
      ++v16;
      if (!*v13)
      {
        if (v15)
        {
          *v15 = 0;
          --*(_DWORD *)(*v6 - 16);
          v8 = (WebKit::NetworkCache::Storage::ReadOperation *)*a2;
          v13 = v15;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    *a2 = 0;
    a1 = (uint64_t *)std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v13, v8);
    v17 = *v6;
    if (*v6)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v6;
    if (*v6)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
        goto LABEL_17;
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_17;
    }
    a1 = (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::expand(v6);
  }
LABEL_17:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *((_QWORD *)v4 + 26) = v23;
  *((_WORD *)v4 + 136) = *((_WORD *)v3 + 40);
  v24 = v3[11];
  *((_QWORD *)v4 + 33) = v24;
  v3[11] = v24 + 1;
  if (*((_DWORD *)v3 + 6) != 1)
    WebCore::TimerBase::start();
  v25 = v3[9];
  if (v25)
  {
    v26 = *((_QWORD *)v4 + 5);
    if (((*(_DWORD *)(v25 + 4 * ((v26 >> 5) & 0x1FFF)) >> v26) & 1) != 0)
      v27 = (*(_DWORD *)(v25 + 4 * ((v26 >> 37) & 0x1FFF)) >> SBYTE4(v26)) & 1;
    else
      LOBYTE(v27) = 0;
  }
  else
  {
    LOBYTE(v27) = 1;
  }
  v28 = (unsigned int *)v3[39];
  v29 = v28 + 2;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v31 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v31 = off_1E34C4CD8;
  *(_QWORD *)(v31 + 8) = v3;
  *(_QWORD *)(v31 + 16) = v4;
  *(_BYTE *)(v31 + 24) = v27;
  v35 = v31;
  WTF::ConcurrentWorkQueue::dispatch();
  result = v35;
  if (v35)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (v28)
  {
    do
    {
      v33 = __ldaxr(v29);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v29));
    if (!v34)
    {
      atomic_store(1u, v28 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  return result;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftDown(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v2 = *((unsigned int *)result + 3);
  v3 = (2 * a2) | 1;
  if (v3 < v2)
  {
    v4 = 2 * a2;
    while (1)
    {
      v5 = v4 + 2;
      if (v5 >= v2)
      {
        v11 = v3;
        goto LABEL_7;
      }
      v6 = *(_QWORD *)(*result + 8 * v3);
      v7 = *(_DWORD *)(v6 + 88);
      v8 = *(_QWORD *)(*result + 8 * v5);
      v9 = *(_DWORD *)(v8 + 88);
      if (v7 != v9)
        break;
      v10 = *(_QWORD *)(v6 + 80);
      v11 = v3;
      if (v10 >= *(_QWORD *)(v8 + 80))
        goto LABEL_13;
LABEL_7:
      if (a2 >= v2 || v11 >= v2)
      {
        __break(0xC471u);
        JUMPOUT(0x196C5BD10);
      }
      v12 = *result;
      v13 = *(_QWORD *)(*result + 8 * a2);
      v14 = *(_DWORD *)(v13 + 88);
      v15 = *(_QWORD *)(*result + 8 * v11);
      v16 = *(_DWORD *)(v15 + 88);
      if (v14 == v16)
      {
        if (*(_QWORD *)(v13 + 80) < *(_QWORD *)(v15 + 80))
          return result;
      }
      else if (v14 > v16)
      {
        return result;
      }
      *(_QWORD *)(v12 + 8 * a2) = v15;
      *(_QWORD *)(v12 + 8 * v11) = v13;
      v4 = 2 * v11;
      v3 = (2 * v11) | 1;
      a2 = v11;
      if (v3 >= v2)
        return result;
    }
    v11 = v3;
    if (v7 > v9)
      goto LABEL_7;
LABEL_13:
    v11 = v5;
    goto LABEL_7;
  }
  return result;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::dequeue@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *result + 8 * v2;
    v5 = *(_QWORD *)*result;
    *(_QWORD *)*result = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = v5;
    WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((WebKit::NetworkCache::Storage::ReadOperation *)result, a2);
    return WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftDown(v3, 0);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WebKit::NetworkCache::Storage::ReadOperation *WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast@<X0>(WebKit::NetworkCache::Storage::ReadOperation *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  WebKit::NetworkCache::Storage::ReadOperation *v3;
  int v4;
  uint64_t v5;

  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = v2 - 1;
    v5 = *(_QWORD *)(*(_QWORD *)result + 8 * (v2 - 1));
    *(_QWORD *)(*(_QWORD *)result + 8 * (v2 - 1)) = 0;
    *a2 = v5;
    result = std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::ReadOperation **)(*(_QWORD *)result + 8 * (v2 - 1)), 0);
    *((_DWORD *)v3 + 3) = v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  WTF::RunLoop *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[21];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  if (!*a1)
  {
    v8 = 0;
    v6 = 0;
LABEL_23:
    v7 = v5 + 8 * v6;
    goto LABEL_8;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = v5 + 8 * v6;
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = v5 + 8 * v6;
    goto LABEL_23;
  }
  v8 = *a1;
  if ((_DWORD)v6)
  {
    v9 = 8 * v6;
    v8 = *a1;
    while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
    {
      v8 += 8;
      v9 -= 8;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v5)
    v10 = v5 + 8 * *(unsigned int *)(v5 - 4);
  else
    v10 = 0;
  if (v10 == v8)
    return 0;
  while (1)
  {
    v12 = (WTF::RunLoop *)WebKit::NetworkCache::Key::operator==(*(_QWORD *)v8 + 8, a2, a3);
    if ((_DWORD)v12)
      break;
    v13 = v8 + 8;
    v8 = v7;
    if (v13 != v7)
    {
      v8 = v13;
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 8;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
    result = 0;
    if (v8 == v10)
      return result;
  }
  WTF::RunLoop::main(v12);
  WebKit::NetworkCache::Storage::Record::Record((WebKit::NetworkCache::Storage::Record *)v19, (const WebKit::NetworkCache::Storage::Record *)(*(_QWORD *)v8 + 8));
  v14 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v20 = v14;
  v15 = WTF::fastMalloc((WTF *)0xB8);
  v18 = WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::CallableWrapper(v15, v19);
  WTF::RunLoop::dispatch();
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v17 = v20;
  v20 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v19, v16);
  return 1;
}

uint64_t WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(unint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  WTF::RunLoop *v9;
  unint64_t v10;
  uint64_t v12;
  void *v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *object;
  __int128 v38;
  char v39;
  void *v40;
  __int128 v41;
  char v42;
  _BYTE v43[21];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    return 0;
  while (1)
  {
    v8 = a1[2];
    v9 = (WTF::RunLoop *)WebKit::NetworkCache::Key::operator==(*(_QWORD *)(v8 + 8 * v3) + 8, a2, a3);
    if ((_DWORD)v9)
      break;
    v10 = *((unsigned int *)a1 + 6);
    v3 += v10 + 1;
    do
      v3 -= v10;
    while (v3 >= v10);
    if (v4 == v3)
      return 0;
  }
  WTF::RunLoop::main(v9);
  v12 = *(_QWORD *)(v8 + 8 * v3);
  WebKit::NetworkCache::Key::Key((uint64_t)&v31, v12 + 8);
  v13 = *(void **)(v12 + 88);
  v36 = *(_QWORD *)(v12 + 80);
  object = v13;
  if (v13)
    os_retain(v13);
  v14 = *(_OWORD *)(v12 + 96);
  v39 = *(_BYTE *)(v12 + 112);
  v38 = v14;
  v15 = *(void **)(v12 + 120);
  v40 = v15;
  if (v15)
    os_retain(v15);
  v16 = *(_OWORD *)(v12 + 128);
  v42 = *(_BYTE *)(v12 + 144);
  v41 = v16;
  v17 = *(_QWORD *)(v12 + 165);
  *(_OWORD *)v43 = *(_OWORD *)(v12 + 152);
  *(_QWORD *)&v43[13] = v17;
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v44 = v18;
  v19 = WTF::fastMalloc((WTF *)0xB8);
  *(_QWORD *)v19 = off_1E34C4DA0;
  *(_OWORD *)(v19 + 8) = v31;
  *(_QWORD *)(v19 + 24) = v32;
  v20 = *((_QWORD *)&v32 + 1);
  v31 = 0u;
  v32 = 0u;
  *(_QWORD *)(v19 + 32) = v20;
  v21 = v33;
  v22 = v34;
  *(_QWORD *)(v19 + 72) = v35;
  *(_OWORD *)(v19 + 56) = v22;
  *(_OWORD *)(v19 + 40) = v21;
  *(_QWORD *)(v19 + 80) = v36;
  v23 = object;
  *(_QWORD *)(v19 + 88) = object;
  if (v23)
    os_retain(v23);
  v24 = v38;
  *(_BYTE *)(v19 + 112) = v39;
  *(_OWORD *)(v19 + 96) = v24;
  v25 = v40;
  *(_QWORD *)(v19 + 120) = v40;
  if (v25)
    os_retain(v25);
  v26 = v41;
  *(_BYTE *)(v19 + 144) = v42;
  *(_OWORD *)(v19 + 128) = v26;
  v27 = *(_OWORD *)v43;
  *(_QWORD *)(v19 + 165) = *(_QWORD *)&v43[13];
  *(_OWORD *)(v19 + 152) = v27;
  v28 = v44;
  v44 = 0;
  *(_QWORD *)(v19 + 176) = v28;
  WTF::RunLoop::dispatch();
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v30 = v44;
  v44 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)&v31, v29);
  return 1;
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::enqueue(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>(a1, (unint64_t)a2);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)(v4 + 8 * v3) = v5;
    *(_DWORD *)(a1 + 12) = v3 + 1;
  }
  return WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftUp((uint64_t *)a1, v3);
}

uint64_t *WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::siftUp(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  if (a2)
  {
    v2 = *((unsigned int *)result + 3);
    do
    {
      v3 = a2 - 1;
      v4 = (a2 - 1) >> 1;
      if (v4 >= v2 || a2 >= v2)
      {
        __break(0xC471u);
        JUMPOUT(0x196C5C294);
      }
      v5 = *result;
      v6 = *(_QWORD *)(*result + 8 * v4);
      v7 = *(_DWORD *)(v6 + 88);
      v8 = *(_QWORD *)(*result + 8 * a2);
      v9 = *(_DWORD *)(v8 + 88);
      if (v7 == v9)
      {
        if (*(_QWORD *)(v6 + 80) < *(_QWORD *)(v8 + 80))
          return result;
      }
      else if (v7 > v9)
      {
        return result;
      }
      *(_QWORD *)(v5 + 8 * v4) = v8;
      *(_QWORD *)(v5 + 8 * a2) = v6;
      a2 = (a2 - 1) >> 1;
    }
    while (v3 > 1);
  }
  return result;
}

void WebKit::NetworkCache::Entry::decodeStorageRecord(WebKit::NetworkCache::Entry *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[19];
  uint64_t v47;
  char v48;
  char v49;
  _BYTE v50[120];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[19];
  uint64_t v70;
  char v71;
  char v72;

  v5 = WTF::fastMalloc((WTF *)0x300);
  v6 = WebKit::NetworkCache::Key::Key(v5, (uint64_t)this);
  *(_QWORD *)(v6 + 72) = *((_QWORD *)this + 9);
  v7 = v6 + 80;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v6 + 80));
  *(_QWORD *)(v5 + 320) = 0;
  *(_BYTE *)(v5 + 328) = 0;
  *(_BYTE *)(v5 + 218) = *(_BYTE *)(v5 + 218) & 0xF1 | 4;
  *(_BYTE *)(v5 + 552) = 0;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_BYTE *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 560) = 0u;
  WebKit::NetworkCache::Key::Key(v5 + 576, (uint64_t)this);
  *(_QWORD *)(v5 + 648) = *((_QWORD *)this + 9);
  v8 = (void *)*((_QWORD *)this + 10);
  *(_QWORD *)(v5 + 656) = v8;
  if (v8)
    os_retain(v8);
  v9 = *(_OWORD *)((char *)this + 88);
  *(_BYTE *)(v5 + 680) = *((_BYTE *)this + 104);
  *(_OWORD *)(v5 + 664) = v9;
  v10 = (void *)*((_QWORD *)this + 14);
  *(_QWORD *)(v5 + 688) = v10;
  if (v10)
    os_retain(v10);
  v11 = *(_OWORD *)((char *)this + 120);
  *(_BYTE *)(v5 + 712) = *((_BYTE *)this + 136);
  *(_OWORD *)(v5 + 696) = v11;
  v12 = *((_OWORD *)this + 9);
  *(_QWORD *)(v5 + 733) = *(_QWORD *)((char *)this + 157);
  *(_OWORD *)(v5 + 720) = v12;
  *(_BYTE *)(v5 + 744) = 0;
  *(_BYTE *)(v5 + 752) = 0;
  *(_BYTE *)(v5 + 760) = 0;
  WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Entry *)((char *)this + 80));
  WTF::Persistence::Decoder::Decoder();
  LOBYTE(v28) = 0;
  v49 = 0;
  WTF::Persistence::Coder<WebCore::ResourceResponse>::decodeForPersistence();
  if (v72)
  {
    v20 = v51;
    v51 = 0;
    v28 = v20;
    v29 = v52;
    v30 = v53;
    LODWORD(v52) = v52 & 0xFFFFFFFE;
    v21 = v54;
    v54 = 0;
    v31 = v21;
    v32 = v55;
    v22 = v56;
    v56 = 0u;
    v33 = v22;
    v23 = v57;
    v57 = 0u;
    v34 = v23;
    *(_QWORD *)&v23 = v58;
    v58 = 0;
    v35 = v23;
    v24 = v59;
    v59 = 0;
    v36 = v24;
    *(_QWORD *)&v23 = v60;
    v60 = 0;
    v37 = v23;
    v25 = v61;
    v61 = 0;
    v38 = v25;
    LOBYTE(v39) = 0;
    v40 = 0;
    if (v63)
    {
      v26 = v62;
      v62 = 0;
      v39 = v26;
      v40 = 1;
    }
    v44 = v67;
    v45 = v68;
    *(_OWORD *)v46 = *(_OWORD *)v69;
    *(_DWORD *)&v46[15] = *(_DWORD *)&v69[15];
    v41 = v64;
    v42 = v65;
    v43 = v66;
    v27 = v70;
    v70 = 0;
    v47 = v27;
    v48 = v71;
    v49 = 1;
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v51, v13);
  if (v49)
  {
    WebCore::ResourceResponseBase::operator=(v7, (uint64_t)&v28);
    v15 = v47;
    v47 = 0;
    v16 = *(const void **)(v5 + 320);
    *(_QWORD *)(v5 + 320) = v15;
    if (v16)
      CFRelease(v16);
    *(_BYTE *)(v5 + 328) = v48;
    *(_WORD *)(v5 + 312) = *(_WORD *)(v5 + 312) & 0xC3FF | 0x800;
    WTF::Persistence::Decoder::operator>>();
  }
  *a2 = 0;
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v28, v14);
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v50);
  if (v5)
  {
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v5, v17);
    WTF::fastFree(v18, v19);
  }
}

uint64_t WebKit::NetworkCache::Key::Key(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 52) = v5;
  return a1;
}

uint64_t WTF::Persistence::Decoder::operator>><WebKit::NetworkCache::Key,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  _BYTE v6[80];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WTF::Persistence::Coder<WebKit::NetworkCache::Key>::decodeForPersistence(a1, (uint64_t)v6);
  std::__optional_storage_base<WebKit::NetworkCache::Key,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::NetworkCache::Key,false>>(a2, (uint64_t)v6);
  std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
  return a1;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::NetworkCache::Storage::ReadOperation **v11;
  WebKit::NetworkCache::Storage::ReadOperation *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  WebKit::NetworkCache::Storage::ReadOperation **v22;
  WebKit::NetworkCache::Storage::ReadOperation *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = (WebKit::NetworkCache::Storage::ReadOperation **)(v4 + 8 * v9);
      v12 = *v11;
      if (*v11)
      {
        if (v12 != (WebKit::NetworkCache::Storage::ReadOperation *)-1)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 8 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (WebKit::NetworkCache::Storage::ReadOperation **)(v13 + 8 * v20);
          std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v22, 0);
          v23 = *v11;
          *v11 = 0;
          *v22 = v23;
          std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::ReadOperation **)(v4 + 8 * v9), 0);
        }
      }
      else
      {
        std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::ReadOperation **)(v4 + 8 * v9), 0);
      }
      ++v9;
    }
    while (v9 != v10);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::rehash(a1, v3);
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(uint64_t result, _DWORD *a2)
{
  WTF *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v4 = a2;
    v5 = result;
    WTF::fastFree(v2, a2);
    a2 = v4;
    result = v5;
  }
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)result = v3;
  LODWORD(v3) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(result + 8) = v3;
  LODWORD(v3) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(void *)0>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  LOBYTE(v6) = 0;
  v7 = 0;
  WTF::Persistence::Decoder::operator>>();
  LOBYTE(v8) = 0;
  v9 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, v4);
    *(_BYTE *)(a2 + 16) = 0;
  }
  return a1;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  WTF *v5;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 16 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 16 * v4));
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v5, (void *)(16 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)memcpy(result, v5, 16 * v4);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 16 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebKit::WebPreferencesStore::defaults(WebKit::WebPreferencesStore *this)
{
  uint64_t *v2;
  WebKit::WebPreferencesKey *v3;
  uint64_t *v4;
  WebKit::WebPreferencesKey *v5;
  uint64_t *v6;
  WebKit::WebPreferencesKey *v7;
  uint64_t *v8;
  WebKit::WebPreferencesKey *v9;
  uint64_t *matched;
  WebKit::WebPreferencesKey *v11;
  uint64_t *v12;
  WebKit::WebPreferencesKey *v13;
  uint64_t *v14;
  WebKit::WebPreferencesKey *v15;
  uint64_t *v16;
  WebKit::WebPreferencesKey *v17;
  uint64_t *v18;
  WebKit::WebPreferencesKey *v19;
  uint64_t *v20;
  WebKit::WebPreferencesKey *v21;
  uint64_t *v22;
  WebKit::WebPreferencesKey *v23;
  uint64_t *v24;
  WebKit::WebPreferencesKey *v25;
  uint64_t *v26;
  WebKit::WebPreferencesKey *v27;
  uint64_t *v28;
  WebKit::WebPreferencesKey *v29;
  uint64_t *v30;
  WebKit::WebPreferencesKey *v31;
  uint64_t *v32;
  WebKit::WebPreferencesKey *v33;
  uint64_t *v34;
  WebKit::WebPreferencesKey *v35;
  uint64_t *v36;
  WebKit::WebPreferencesKey *v37;
  uint64_t *v38;
  WebKit::WebPreferencesKey *v39;
  uint64_t *v40;
  WebKit::WebPreferencesKey *v41;
  uint64_t *v42;
  WebKit::WebPreferencesKey *v43;
  uint64_t *v44;
  WebKit::WebPreferencesKey *v45;
  uint64_t *v46;
  WebKit::WebPreferencesKey *v47;
  uint64_t *v48;
  WebKit::WebPreferencesKey *v49;
  uint64_t *v50;
  WebKit::WebPreferencesKey *v51;
  uint64_t *v52;
  WebKit::WebPreferencesKey *v53;
  uint64_t *v54;
  WebKit::WebPreferencesKey *v55;
  uint64_t *v56;
  WebKit::WebPreferencesKey *v57;
  uint64_t *v58;
  WebKit::WebPreferencesKey *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  WebKit::WebPreferencesKey *v63;
  uint64_t *v64;
  WebKit::WebPreferencesKey *v65;
  uint64_t *v66;
  WebKit::WebPreferencesKey *v67;
  uint64_t *v68;
  WebKit::WebPreferencesKey *v69;
  uint64_t *v70;
  WebKit::WebPreferencesKey *v71;
  uint64_t *v72;
  WebKit::WebPreferencesKey *v73;
  uint64_t *v74;
  WebKit::WebPreferencesKey *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  WebKit::WebPreferencesKey *v79;
  uint64_t *v80;
  WebKit::WebPreferencesKey *v81;
  uint64_t *v82;
  WebKit::WebPreferencesKey *v83;
  uint64_t *v84;
  WebKit::WebPreferencesKey *v85;
  uint64_t *v86;
  WebKit::WebPreferencesKey *v87;
  uint64_t *v88;
  WebKit::WebPreferencesKey *v89;
  uint64_t *v90;
  WebKit::WebPreferencesKey *v91;
  uint64_t *v92;
  WebKit::WebPreferencesKey *v93;
  uint64_t *v94;
  WebKit::WebPreferencesKey *v95;
  uint64_t *v96;
  WebKit::WebPreferencesKey *v97;
  uint64_t *v98;
  WebKit::WebPreferencesKey *v99;
  uint64_t *v100;
  WebKit::WebPreferencesKey *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t *v104;
  WebKit::WebPreferencesKey *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t *v108;
  WebKit::WebPreferencesKey *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t *v112;
  WebKit::WebPreferencesKey *v113;
  uint64_t *v114;
  WebKit::WebPreferencesKey *v115;
  uint64_t *v116;
  WebKit::WebPreferencesKey *v117;
  uint64_t *v118;
  WebKit::WebPreferencesKey *v119;
  uint64_t *v120;
  WebKit::WebPreferencesKey *v121;
  uint64_t *v122;
  WebKit::WebPreferencesKey *v123;
  uint64_t *v124;
  WebKit::WebPreferencesKey *v125;
  uint64_t *v126;
  WebKit::WebPreferencesKey *v127;
  uint64_t *v128;
  WebKit::WebPreferencesKey *v129;
  uint64_t *v130;
  WebKit::WebPreferencesKey *v131;
  uint64_t *v132;
  WebKit::WebPreferencesKey *v133;
  uint64_t *v134;
  WebKit::WebPreferencesKey *v135;
  uint64_t *v136;
  WebKit::WebPreferencesKey *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t *v140;
  WebKit::WebPreferencesKey *v141;
  uint64_t *v142;
  WebKit::WebPreferencesKey *v143;
  uint64_t *v144;
  WebKit::WebPreferencesKey *v145;
  uint64_t *v146;
  WebKit::WebPreferencesKey *v147;
  uint64_t *v148;
  WebKit::WebPreferencesKey *v149;
  uint64_t *v150;
  WebKit::WebPreferencesKey *v151;
  uint64_t *v152;
  WebKit::WebPreferencesKey *v153;
  uint64_t *v154;
  WebKit::WebPreferencesKey *v155;
  uint64_t *v156;
  WebKit::WebPreferencesKey *v157;
  uint64_t *v158;
  WebKit::WebPreferencesKey *v159;
  uint64_t *v160;
  WebKit::WebPreferencesKey *v161;
  uint64_t *v162;
  WebKit::WebPreferencesKey *v163;
  uint64_t *v164;
  WebKit::WebPreferencesKey *v165;
  uint64_t *v166;
  WebKit::WebPreferencesKey *v167;
  uint64_t *DeferringEnabledKey;
  WebKit::WebPreferencesKey *v169;
  uint64_t *v170;
  WebKit::WebPreferencesKey *v171;
  uint64_t *v172;
  WebKit::WebPreferencesKey *v173;
  uint64_t *v174;
  WebKit::WebPreferencesKey *v175;
  uint64_t *v176;
  WebKit::WebPreferencesKey *v177;
  uint64_t *v178;
  WebKit::WebPreferencesKey *v179;
  uint64_t *v180;
  WebKit::WebPreferencesKey *v181;
  uint64_t *v182;
  WebKit::WebPreferencesKey *v183;
  uint64_t *v184;
  WebKit::WebPreferencesKey *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  uint64_t *v188;
  WebKit::WebPreferencesKey *v189;
  uint64_t *v190;
  WebKit::WebPreferencesKey *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  uint64_t *v194;
  WebKit::WebPreferencesKey *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  uint64_t *v198;
  WebKit::WebPreferencesKey *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  uint64_t *v202;
  WebKit::WebPreferencesKey *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  uint64_t *v206;
  WebKit::WebPreferencesKey *v207;
  uint64_t *v208;
  WebKit::WebPreferencesKey *v209;
  uint64_t *v210;
  WebKit::WebPreferencesKey *v211;
  uint64_t *v212;
  WebKit::WebPreferencesKey *v213;
  uint64_t *v214;
  WebKit::WebPreferencesKey *v215;
  uint64_t *v216;
  WebKit::WebPreferencesKey *v217;
  uint64_t *v218;
  WebKit::WebPreferencesKey *v219;
  uint64_t *v220;
  WebKit::WebPreferencesKey *v221;
  uint64_t *v222;
  WebKit::WebPreferencesKey *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  uint64_t *v226;
  WebKit::WebPreferencesKey *v227;
  uint64_t *v228;
  WebKit::WebPreferencesKey *v229;
  uint64_t *v230;
  WebKit::WebPreferencesKey *v231;
  uint64_t *v232;
  WebKit::WebPreferencesKey *v233;
  uint64_t *v234;
  WebKit::WebPreferencesKey *v235;
  uint64_t *v236;
  WebKit::WebPreferencesKey *v237;
  uint64_t *v238;
  WebKit::WebPreferencesKey *v239;
  uint64_t *v240;
  WebKit::WebPreferencesKey *v241;
  uint64_t *v242;
  WebKit::WebPreferencesKey *v243;
  uint64_t *v244;
  WebKit::WebPreferencesKey *v245;
  uint64_t *v246;
  WebKit::WebPreferencesKey *v247;
  uint64_t *v248;
  WebKit::WebPreferencesKey *v249;
  uint64_t *v250;
  WebKit::WebPreferencesKey *v251;
  uint64_t *v252;
  WebKit::WebPreferencesKey *v253;
  uint64_t *v254;
  WebKit::WebPreferencesKey *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  uint64_t *v258;
  WebKit::WebPreferencesKey *v259;
  uint64_t *v260;
  WebKit::WebPreferencesKey *v261;
  uint64_t *v262;
  WebKit::WebPreferencesKey *v263;
  uint64_t *v264;
  WebKit::WebPreferencesKey *v265;
  uint64_t *v266;
  WebKit::WebPreferencesKey *v267;
  uint64_t *v268;
  WebKit::WebPreferencesKey *v269;
  uint64_t *v270;
  WebKit::WebPreferencesKey *v271;
  uint64_t *VideoKey;
  WebKit::WebPreferencesKey *v273;
  uint64_t *v274;
  WebKit::WebPreferencesKey *v275;
  uint64_t *v276;
  WebKit::WebPreferencesKey *v277;
  uint64_t *v278;
  WebKit::WebPreferencesKey *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  uint64_t *v282;
  WebKit::WebPreferencesKey *v283;
  uint64_t *v284;
  WebKit::WebPreferencesKey *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  uint64_t *v288;
  WebKit::WebPreferencesKey *v289;
  uint64_t *v290;
  WebKit::WebPreferencesKey *v291;
  uint64_t *v292;
  WebKit::WebPreferencesKey *v293;
  uint64_t *v294;
  WebKit::WebPreferencesKey *v295;
  uint64_t *v296;
  WebKit::WebPreferencesKey *v297;
  uint64_t *v298;
  WebKit::WebPreferencesKey *v299;
  uint64_t *v300;
  WebKit::WebPreferencesKey *v301;
  uint64_t *v302;
  WebKit::WebPreferencesKey *v303;
  uint64_t *v304;
  WebKit::WebPreferencesKey *v305;
  uint64_t *v306;
  WebKit::WebPreferencesKey *v307;
  uint64_t *v308;
  WebKit::WebPreferencesKey *v309;
  uint64_t *v310;
  WebKit::WebPreferencesKey *v311;
  uint64_t *v312;
  WebKit::WebPreferencesKey *v313;
  uint64_t *v314;
  WebKit::WebPreferencesKey *v315;
  uint64_t *v316;
  WebKit::WebPreferencesKey *v317;
  uint64_t *v318;
  WebKit::WebPreferencesKey *v319;
  uint64_t *v320;
  WebKit::WebPreferencesKey *v321;
  uint64_t *v322;
  WebKit::WebPreferencesKey *v323;
  uint64_t *v324;
  WebKit::WebPreferencesKey *v325;
  uint64_t *v326;
  WebKit::WebPreferencesKey *v327;
  uint64_t *v328;
  WebKit::WebPreferencesKey *v329;
  uint64_t *v330;
  WebKit::WebPreferencesKey *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  uint64_t *v334;
  WebKit::WebPreferencesKey *v335;
  uint64_t *v336;
  WebKit::WebPreferencesKey *v337;
  uint64_t *v338;
  WebKit::WebPreferencesKey *v339;
  uint64_t *v340;
  WebKit::WebPreferencesKey *v341;
  uint64_t *v342;
  WebKit::WebPreferencesKey *v343;
  uint64_t *v344;
  WebKit::WebPreferencesKey *v345;
  uint64_t *v346;
  WebKit::WebPreferencesKey *v347;
  uint64_t *v348;
  WebKit::WebPreferencesKey *v349;
  uint64_t *v350;
  WebKit::WebPreferencesKey *v351;
  uint64_t *v352;
  WebKit::WebPreferencesKey *v353;
  uint64_t *v354;
  WebKit::WebPreferencesKey *v355;
  uint64_t *v356;
  WebKit::WebPreferencesKey *v357;
  uint64_t *v358;
  WebKit::WebPreferencesKey *v359;
  uint64_t *v360;
  WebKit::WebPreferencesKey *v361;
  uint64_t *v362;
  WebKit::WebPreferencesKey *v363;
  uint64_t *v364;
  WebKit::WebPreferencesKey *v365;
  uint64_t *v366;
  WebKit::WebPreferencesKey *v367;
  uint64_t *v368;
  WebKit::WebPreferencesKey *v369;
  uint64_t *v370;
  WebKit::WebPreferencesKey *v371;
  uint64_t *v372;
  WebKit::WebPreferencesKey *v373;
  uint64_t *v374;
  WebKit::WebPreferencesKey *v375;
  uint64_t *v376;
  WebKit::WebPreferencesKey *v377;
  uint64_t *v378;
  WebKit::WebPreferencesKey *v379;
  uint64_t *v380;
  WebKit::WebPreferencesKey *v381;
  uint64_t *v382;
  WebKit::WebPreferencesKey *v383;
  uint64_t *v384;
  WebKit::WebPreferencesKey *v385;
  uint64_t *v386;
  WebKit::WebPreferencesKey *v387;
  uint64_t *v388;
  WebKit::WebPreferencesKey *v389;
  uint64_t *v390;
  WebKit::WebPreferencesKey *v391;
  uint64_t *v392;
  WebKit::WebPreferencesKey *v393;
  uint64_t *v394;
  WebKit::WebPreferencesKey *v395;
  uint64_t *v396;
  WebKit::WebPreferencesKey *v397;
  uint64_t *v398;
  WebKit::WebPreferencesKey *v399;
  uint64_t *v400;
  WebKit::WebPreferencesKey *v401;
  uint64_t *v402;
  WebKit::WebPreferencesKey *v403;
  uint64_t *v404;
  WebKit::WebPreferencesKey *v405;
  uint64_t *v406;
  WebKit::WebPreferencesKey *v407;
  uint64_t *v408;
  WebKit::WebPreferencesKey *v409;
  uint64_t *v410;
  WebKit::WebPreferencesKey *v411;
  uint64_t *v412;
  WebKit::WebPreferencesKey *v413;
  uint64_t *v414;
  WebKit::WebPreferencesKey *v415;
  uint64_t *v416;
  WebKit::WebPreferencesKey *v417;
  uint64_t *v418;
  WebKit::WebPreferencesKey *v419;
  uint64_t *v420;
  WebKit::WebPreferencesKey *v421;
  uint64_t *v422;
  WebKit::WebPreferencesKey *v423;
  uint64_t *v424;
  WebKit::WebPreferencesKey *v425;
  uint64_t *v426;
  WebKit::WebPreferencesKey *v427;
  uint64_t *v428;
  WebKit::WebPreferencesKey *v429;
  uint64_t *v430;
  WebKit::WebPreferencesKey *v431;
  uint64_t *v432;
  WebKit::WebPreferencesKey *v433;
  uint64_t *v434;
  WebKit::WebPreferencesKey *v435;
  uint64_t *v436;
  WebKit::WebPreferencesKey *v437;
  uint64_t *v438;
  WebKit::WebPreferencesKey *v439;
  uint64_t *v440;
  WebKit::WebPreferencesKey *v441;
  uint64_t *v442;
  WebKit::WebPreferencesKey *v443;
  uint64_t *v444;
  WebKit::WebPreferencesKey *v445;
  uint64_t *v446;
  WebKit::WebPreferencesKey *v447;
  uint64_t *v448;
  WebKit::WebPreferencesKey *v449;
  uint64_t *v450;
  WebKit::WebPreferencesKey *v451;
  uint64_t *v452;
  WebKit::WebPreferencesKey *v453;
  uint64_t *v454;
  WebKit::WebPreferencesKey *v455;
  uint64_t *v456;
  WebKit::WebPreferencesKey *v457;
  uint64_t *v458;
  WebKit::WebPreferencesKey *v459;
  uint64_t *v460;
  WebKit::WebPreferencesKey *v461;
  uint64_t *v462;
  WebKit::WebPreferencesKey *v463;
  uint64_t *v464;
  WebKit::WebPreferencesKey *v465;
  uint64_t *v466;
  WebKit::WebPreferencesKey *v467;
  uint64_t *v468;
  WebKit::WebPreferencesKey *v469;
  uint64_t *v470;
  WebKit::WebPreferencesKey *v471;
  uint64_t *v472;
  WebKit::WebPreferencesKey *v473;
  uint64_t *v474;
  WebKit::WebPreferencesKey *v475;
  uint64_t *v476;
  WebKit::WebPreferencesKey *v477;
  uint64_t *v478;
  WebKit::WebPreferencesKey *v479;
  uint64_t *v480;
  WebKit::WebPreferencesKey *v481;
  uint64_t *v482;
  WebKit::WebPreferencesKey *v483;
  uint64_t *v484;
  WebKit::WebPreferencesKey *v485;
  uint64_t *v486;
  WebKit::WebPreferencesKey *v487;
  uint64_t *v488;
  WebKit::WebPreferencesKey *v489;
  uint64_t *v490;
  WebKit::WebPreferencesKey *v491;
  uint64_t *v492;
  WebKit::WebPreferencesKey *v493;
  uint64_t *v494;
  WebKit::WebPreferencesKey *v495;
  uint64_t *v496;
  WebKit::WebPreferencesKey *v497;
  uint64_t *v498;
  WebKit::WebPreferencesKey *v499;
  uint64_t *v500;
  WebKit::WebPreferencesKey *v501;
  uint64_t *v502;
  WebKit::WebPreferencesKey *v503;
  uint64_t *v504;
  WebKit::WebPreferencesKey *v505;
  uint64_t *v506;
  WebKit::WebPreferencesKey *v507;
  uint64_t *v508;
  WebKit::WebPreferencesKey *v509;
  uint64_t *v510;
  WebKit::WebPreferencesKey *v511;
  uint64_t *v512;
  WebKit::WebPreferencesKey *v513;
  uint64_t *v514;
  WebKit::WebPreferencesKey *v515;
  uint64_t *v516;
  WebKit::WebPreferencesKey *v517;
  uint64_t *v518;
  WebKit::WebPreferencesKey *v519;
  uint64_t *v520;
  WebKit::WebPreferencesKey *v521;
  uint64_t *v522;
  WebKit::WebPreferencesKey *v523;
  uint64_t *v524;
  WebKit::WebPreferencesKey *v525;
  uint64_t *v526;
  WebKit::WebPreferencesKey *v527;
  uint64_t *v528;
  WebKit::WebPreferencesKey *v529;
  uint64_t *v530;
  WebKit::WebPreferencesKey *v531;
  uint64_t *v532;
  WebKit::WebPreferencesKey *v533;
  uint64_t *v534;
  WebKit::WebPreferencesKey *v535;
  uint64_t *v536;
  WebKit::WebPreferencesKey *v537;
  uint64_t *v538;
  WebKit::WebPreferencesKey *v539;
  uint64_t *v540;
  WebKit::WebPreferencesKey *v541;
  uint64_t *v542;
  WebKit::WebPreferencesKey *v543;
  uint64_t *v544;
  WebKit::WebPreferencesKey *v545;
  uint64_t *v546;
  WebKit::WebPreferencesKey *v547;
  uint64_t *v548;
  WebKit::WebPreferencesKey *v549;
  uint64_t *v550;
  WebKit::WebPreferencesKey *v551;
  uint64_t *v552;
  WebKit::WebPreferencesKey *v553;
  uint64_t *v554;
  WebKit::WebPreferencesKey *v555;
  uint64_t *v556;
  WebKit::WebPreferencesKey *v557;
  uint64_t *v558;
  WebKit::WebPreferencesKey *v559;
  uint64_t *v560;
  WebKit::WebPreferencesKey *v561;
  uint64_t *v562;
  WebKit::WebPreferencesKey *v563;
  uint64_t *v564;
  WebKit::WebPreferencesKey *v565;
  uint64_t *v566;
  WebKit::WebPreferencesKey *v567;
  uint64_t *v568;
  WebKit::WebPreferencesKey *v569;
  uint64_t *v570;
  WebKit::WebPreferencesKey *v571;
  uint64_t *v572;
  WebKit::WebPreferencesKey *v573;
  uint64_t *v574;
  WebKit::WebPreferencesKey *v575;
  uint64_t *v576;
  WebKit::WebPreferencesKey *v577;
  uint64_t *v578;
  WebKit::WebPreferencesKey *v579;
  uint64_t *v580;
  WebKit::WebPreferencesKey *v581;
  uint64_t *v582;
  WebKit::WebPreferencesKey *v583;
  uint64_t *v584;
  WebKit::WebPreferencesKey *v585;
  uint64_t *v586;
  WebKit::WebPreferencesKey *v587;
  uint64_t *v588;
  WebKit::WebPreferencesKey *v589;
  uint64_t *v590;
  WebKit::WebPreferencesKey *v591;
  uint64_t *v592;
  WebKit::WebPreferencesKey *v593;
  uint64_t *v594;
  WebKit::WebPreferencesKey *v595;
  uint64_t *v596;
  WebKit::WebPreferencesKey *v597;
  uint64_t *v598;
  WebKit::WebPreferencesKey *v599;
  uint64_t *v600;
  WebKit::WebPreferencesKey *v601;
  uint64_t *v602;
  WebKit::WebPreferencesKey *v603;
  uint64_t *v604;
  WebKit::WebPreferencesKey *v605;
  uint64_t *v606;
  WebKit::WebPreferencesKey *v607;
  uint64_t *v608;
  WebKit::WebPreferencesKey *v609;
  uint64_t *v610;
  WebKit::WebPreferencesKey *v611;
  uint64_t *v612;
  WebKit::WebPreferencesKey *v613;
  uint64_t *v614;
  WebKit::WebPreferencesKey *v615;
  uint64_t *PaintKey;
  WebKit::WebPreferencesKey *v617;
  uint64_t *v618;
  WebKit::WebPreferencesKey *v619;
  uint64_t *v620;
  WebKit::WebPreferencesKey *v621;
  uint64_t *v622;
  WebKit::WebPreferencesKey *v623;
  uint64_t *v624;
  WebKit::WebPreferencesKey *v625;
  uint64_t *v626;
  WebKit::WebPreferencesKey *v627;
  uint64_t *v628;
  WebKit::WebPreferencesKey *v629;
  uint64_t *v630;
  WebKit::WebPreferencesKey *v631;
  uint64_t *v632;
  WebKit::WebPreferencesKey *v633;
  uint64_t *PartyWebsiteDataRemovalDisabledKey;
  WebKit::WebPreferencesKey *v635;
  uint64_t *v636;
  WebKit::WebPreferencesKey *v637;
  uint64_t *v638;
  WebKit::WebPreferencesKey *v639;
  uint64_t *v640;
  WebKit::WebPreferencesKey *v641;
  uint64_t *v642;
  WebKit::WebPreferencesKey *v643;
  uint64_t *v644;
  WebKit::WebPreferencesKey *v645;
  uint64_t *v646;
  WebKit::WebPreferencesKey *v647;
  uint64_t *v648;
  WebKit::WebPreferencesKey *v649;
  uint64_t *v650;
  WebKit::WebPreferencesKey *v651;
  uint64_t *v652;
  WebKit::WebPreferencesKey *v653;
  uint64_t *v654;
  WebKit::WebPreferencesKey *v655;
  uint64_t *v656;
  WebKit::WebPreferencesKey *v657;
  uint64_t *v658;
  WebKit::WebPreferencesKey *v659;
  uint64_t *APIEnabledKey;
  WebKit::WebPreferencesKey *v661;
  uint64_t *v662;
  WebKit::WebPreferencesKey *v663;
  uint64_t *v664;
  WebKit::WebPreferencesKey *v665;
  uint64_t *v666;
  WebKit::WebPreferencesKey *v667;
  uint64_t *v668;
  WebKit::WebPreferencesKey *v669;
  uint64_t *v670;
  WebKit::WebPreferencesKey *v671;
  uint64_t *v672;
  WebKit::WebPreferencesKey *v673;
  uint64_t *v674;
  WebKit::WebPreferencesKey *v675;
  uint64_t *v676;
  WebKit::WebPreferencesKey *v677;
  uint64_t *PriorityEnabledKey;
  WebKit::WebPreferencesKey *v679;
  uint64_t *v680;
  WebKit::WebPreferencesKey *v681;
  uint64_t *v682;
  WebKit::WebPreferencesKey *v683;
  uint64_t *v684;
  WebKit::WebPreferencesKey *v685;
  uint64_t *v686;
  WebKit::WebPreferencesKey *v687;
  uint64_t *v688;
  WebKit::WebPreferencesKey *v689;
  uint64_t *v690;
  WebKit::WebPreferencesKey *v691;
  uint64_t *v692;
  WebKit::WebPreferencesKey *v693;
  uint64_t *v694;
  WebKit::WebPreferencesKey *v695;
  uint64_t *v696;
  WebKit::WebPreferencesKey *v697;
  uint64_t *v698;
  WebKit::WebPreferencesKey *v699;
  uint64_t *v700;
  WebKit::WebPreferencesKey *v701;
  uint64_t *v702;
  WebKit::WebPreferencesKey *v703;
  uint64_t *v704;
  WebKit::WebPreferencesKey *v705;
  uint64_t *v706;
  WebKit::WebPreferencesKey *v707;
  uint64_t *v708;
  WebKit::WebPreferencesKey *v709;
  uint64_t *v710;
  WebKit::WebPreferencesKey *v711;
  uint64_t *v712;
  WebKit::WebPreferencesKey *v713;
  uint64_t *v714;
  WebKit::WebPreferencesKey *v715;
  uint64_t *v716;
  WebKit::WebPreferencesKey *v717;
  uint64_t *v718;
  WebKit::WebPreferencesKey *v719;
  uint64_t *v720;
  WebKit::WebPreferencesKey *v721;
  uint64_t *v722;
  WebKit::WebPreferencesKey *v723;
  uint64_t *v724;
  WebKit::WebPreferencesKey *v725;
  uint64_t *v726;
  WebKit::WebPreferencesKey *v727;
  uint64_t *v728;
  WebKit::WebPreferencesKey *v729;
  uint64_t *v730;
  WebKit::WebPreferencesKey *v731;
  uint64_t *v732;
  WebKit::WebPreferencesKey *v733;
  uint64_t *v734;
  WebKit::WebPreferencesKey *v735;
  uint64_t *v736;
  WebKit::WebPreferencesKey *v737;
  uint64_t *v738;
  WebKit::WebPreferencesKey *v739;
  uint64_t *v740;
  WebKit::WebPreferencesKey *v741;
  uint64_t *v742;
  WebKit::WebPreferencesKey *v743;
  uint64_t *v744;
  WebKit::WebPreferencesKey *v745;
  uint64_t *v746;
  WebKit::WebPreferencesKey *v747;
  uint64_t *v748;
  WebKit::WebPreferencesKey *v749;
  uint64_t *v750;
  WebKit::WebPreferencesKey *v751;
  uint64_t *v752;
  WebKit::WebPreferencesKey *v753;
  uint64_t *v754;
  WebKit::WebPreferencesKey *v755;
  uint64_t *v756;
  WebKit::WebPreferencesKey *v757;
  uint64_t *v758;
  WebKit::WebPreferencesKey *v759;
  uint64_t *v760;
  WebKit::WebPreferencesKey *v761;
  uint64_t *v762;
  WebKit::WebPreferencesKey *v763;
  uint64_t *v764;
  WebKit::WebPreferencesKey *v765;
  uint64_t *v766;
  WebKit::WebPreferencesKey *v767;
  uint64_t *v768;
  WebKit::WebPreferencesKey *v769;
  uint64_t *v770;
  WebKit::WebPreferencesKey *v771;
  uint64_t *v772;
  WebKit::WebPreferencesKey *v773;
  uint64_t *v774;
  WebKit::WebPreferencesKey *v775;
  uint64_t *v776;
  WebKit::WebPreferencesKey *v777;
  uint64_t *v778;
  WebKit::WebPreferencesKey *v779;
  uint64_t *v780;
  WebKit::WebPreferencesKey *v781;
  uint64_t *v782;
  WebKit::WebPreferencesKey *v783;
  uint64_t *v784;
  WebKit::WebPreferencesKey *v785;
  uint64_t *v786;
  WebKit::WebPreferencesKey *v787;
  uint64_t *v788;
  WebKit::WebPreferencesKey *v789;
  uint64_t *WebArchiveWithEphemeralStorageEnabledKey;
  WebKit::WebPreferencesKey *v791;
  uint64_t *v792;
  WebKit::WebPreferencesKey *v793;
  uint64_t *v794;
  WebKit::WebPreferencesKey *v795;
  uint64_t *v796;
  WebKit::WebPreferencesKey *v797;
  uint64_t *v798;
  WebKit::WebPreferencesKey *v799;
  uint64_t *v800;
  WebKit::WebPreferencesKey *v801;
  uint64_t *v802;
  WebKit::WebPreferencesKey *v803;
  uint64_t *v804;
  WebKit::WebPreferencesKey *v805;
  uint64_t *v806;
  WebKit::WebPreferencesKey *v807;
  uint64_t *v808;
  WebKit::WebPreferencesKey *v809;
  uint64_t *v810;
  WebKit::WebPreferencesKey *v811;
  uint64_t *v812;
  WebKit::WebPreferencesKey *v813;
  uint64_t *v814;
  WebKit::WebPreferencesKey *v815;
  uint64_t *v816;
  WebKit::WebPreferencesKey *v817;
  uint64_t *v818;
  WebKit::WebPreferencesKey *v819;
  uint64_t *v820;
  WebKit::WebPreferencesKey *v821;
  uint64_t *v822;
  WebKit::WebPreferencesKey *v823;
  uint64_t *v824;
  WebKit::WebPreferencesKey *v825;
  uint64_t *v826;
  WebKit::WebPreferencesKey *v827;
  uint64_t *v828;
  WebKit::WebPreferencesKey *v829;
  uint64_t *v830;
  WebKit::WebPreferencesKey *v831;
  uint64_t *v832;
  WebKit::WebPreferencesKey *v833;
  uint64_t *v834;
  WebKit::WebPreferencesKey *v835;
  uint64_t *v836;
  WebKit::WebPreferencesKey *v837;
  uint64_t *v838;
  WebKit::WebPreferencesKey *v839;
  uint64_t *v840;
  WebKit::WebPreferencesKey *v841;
  uint64_t *v842;
  WebKit::WebPreferencesKey *v843;
  uint64_t *v844;
  WebKit::WebPreferencesKey *v845;
  uint64_t *v846;
  WebKit::WebPreferencesKey *v847;
  uint64_t *v848;
  WebKit::WebPreferencesKey *v849;
  uint64_t *v850;
  WebKit::WebPreferencesKey *v851;
  uint64_t *v852;
  WebKit::WebPreferencesKey *v853;
  uint64_t *v854;
  WebKit::WebPreferencesKey *v855;
  uint64_t *v856;
  WebKit::WebPreferencesKey *v857;
  uint64_t *v858;
  WebKit::WebPreferencesKey *v859;
  uint64_t *v860;
  WebKit::WebPreferencesKey *v861;
  uint64_t *v862;
  WebKit::WebPreferencesKey *v863;
  uint64_t *v864;
  WebKit::WebPreferencesKey *v865;
  uint64_t *v866;
  WebKit::WebPreferencesKey *v867;
  uint64_t *v868;
  WebKit::WebPreferencesKey *v869;
  uint64_t *v870;
  WebKit::WebPreferencesKey *v871;
  uint64_t *v872;
  WebKit::WebPreferencesKey *v873;
  uint64_t *v874;
  WebKit::WebPreferencesKey *v875;
  uint64_t *v876;
  WebKit::WebPreferencesKey *v877;
  uint64_t *v878;
  WebKit::WebPreferencesKey *v879;
  uint64_t *v880;
  WebKit::WebPreferencesKey *v881;
  uint64_t *v882;
  WebKit::WebPreferencesKey *v883;
  uint64_t *v884;
  WebKit::WebPreferencesKey *v885;
  uint64_t *v886;
  WebKit::WebPreferencesKey *v887;
  uint64_t *v888;
  WebKit::WebPreferencesKey *v889;
  uint64_t *v890;
  WebKit::WebPreferencesKey *v891;
  uint64_t *v892;
  WebKit::WebPreferencesKey *v893;
  uint64_t *v894;
  WebKit::WebPreferencesKey *v895;
  uint64_t *v896;
  WebKit::WebPreferencesKey *v897;
  uint64_t *v898;
  WebKit::WebPreferencesKey *v899;
  uint64_t *v900;
  WebKit::WebPreferencesKey *v901;
  uint64_t *UserMediaRequiresFocusKey;
  WebKit::WebPreferencesKey *v903;
  uint64_t *SchedulingEnabledKey;
  WebKit::WebPreferencesKey *v905;
  uint64_t *v906;
  WebKit::WebPreferencesKey *v907;
  uint64_t *v908;
  WebKit::WebPreferencesKey *v909;
  uint64_t *v910;
  WebKit::WebPreferencesKey *v911;
  uint64_t *v912;
  WebKit::WebPreferencesKey *v913;
  uint64_t *v914;
  WebKit::WebPreferencesKey *v915;
  uint64_t *v916;
  WebKit::WebPreferencesKey *v917;
  uint64_t *v918;
  WebKit::WebPreferencesKey *v919;
  uint64_t *v920;
  WebKit::WebPreferencesKey *v921;
  uint64_t *v922;
  WebKit::WebPreferencesKey *v923;
  uint64_t *v924;
  WebKit::WebPreferencesKey *v925;
  uint64_t *v926;
  WebKit::WebPreferencesKey *v927;
  uint64_t *v928;
  WebKit::WebPreferencesKey *v929;
  uint64_t *v930;
  WebKit::WebPreferencesKey *v931;
  uint64_t *v932;
  WebKit::WebPreferencesKey *v933;
  uint64_t *v934;
  WebKit::WebPreferencesKey *v935;
  uint64_t *v936;
  WebKit::WebPreferencesKey *v937;
  uint64_t *v938;
  WebKit::WebPreferencesKey *v939;
  uint64_t *v940;
  WebKit::WebPreferencesKey *v941;
  uint64_t *v942;
  WebKit::WebPreferencesKey *v943;
  uint64_t *v944;
  WebKit::WebPreferencesKey *v945;
  uint64_t *v946;
  WebKit::WebPreferencesKey *v947;
  uint64_t *v948;
  WebKit::WebPreferencesKey *v949;
  uint64_t *v950;
  WebKit::WebPreferencesKey *v951;
  uint64_t *v952;
  WebKit::WebPreferencesKey *v953;
  uint64_t *v954;
  WebKit::WebPreferencesKey *v955;
  uint64_t *v956;
  WebKit::WebPreferencesKey *v957;
  uint64_t *v958;
  WebKit::WebPreferencesKey *v959;
  uint64_t *v960;
  WebKit::WebPreferencesKey *v961;
  uint64_t *v962;
  WebKit::WebPreferencesKey *v963;
  uint64_t *v964;
  WebKit::WebPreferencesKey *v965;
  uint64_t *v966;
  WebKit::WebPreferencesKey *v967;
  uint64_t *v968;
  WebKit::WebPreferencesKey *v969;
  uint64_t *v970;
  WebKit::WebPreferencesKey *v971;
  uint64_t *v972;
  WebKit::WebPreferencesKey *v973;
  uint64_t *v974;
  WebKit::WebPreferencesKey *v975;
  uint64_t *v976;
  WebKit::WebPreferencesKey *v977;
  uint64_t *v978;
  WebKit::WebPreferencesKey *v979;
  uint64_t *v980;
  WebKit::WebPreferencesKey *v981;
  uint64_t *v982;
  WebKit::WebPreferencesKey *v983;
  uint64_t *v984;
  WebKit::WebPreferencesKey *v985;
  uint64_t *v986;
  WebKit::WebPreferencesKey *v987;
  uint64_t *v988;
  WebKit::WebPreferencesKey *v989;
  uint64_t *v990;
  WebKit::WebPreferencesKey *v991;
  uint64_t *v992;
  WebKit::WebPreferencesKey *v993;
  uint64_t *v994;
  WebKit::WebPreferencesKey *v995;
  uint64_t *v996;
  WebKit::WebPreferencesKey *v997;
  uint64_t *v998;
  WebKit::WebPreferencesKey *v999;
  uint64_t *v1000;
  WebKit::WebPreferencesKey *v1001;
  uint64_t *v1002;
  WebKit::WebPreferencesKey *v1003;
  uint64_t *v1004;
  WebKit::WebPreferencesKey *v1005;
  uint64_t *v1006;
  WebKit::WebPreferencesKey *v1007;
  uint64_t *v1008;
  WebKit::WebPreferencesKey *v1009;
  uint64_t *v1010;
  WebKit::WebPreferencesKey *v1011;
  uint64_t *v1012;
  WebKit::WebPreferencesKey *v1013;
  uint64_t *v1014;
  WebKit::WebPreferencesKey *v1015;
  uint64_t *v1016;
  WebKit::WebPreferencesKey *v1017;
  uint64_t *v1018;
  WebKit::WebPreferencesKey *v1019;
  uint64_t *v1020;
  WebKit::WebPreferencesKey *v1021;
  uint64_t *v1022;
  WebKit::WebPreferencesKey *v1023;
  uint64_t *v1024;
  WebKit::WebPreferencesKey *v1025;
  uint64_t *v1026;
  WebKit::WebPreferencesKey *v1027;
  uint64_t *v1028;
  WebKit::WebPreferencesKey *v1029;
  uint64_t *v1030;
  WebKit::WebPreferencesKey *v1031;
  uint64_t *v1032;
  WebKit::WebPreferencesKey *v1033;
  uint64_t *v1034;
  WebKit::WebPreferencesKey *v1035;
  uint64_t *v1036;
  WebKit::WebPreferencesKey *v1037;
  uint64_t *v1038;
  WebKit::WebPreferencesKey *v1039;
  uint64_t *v1040;
  WebKit::WebPreferencesKey *v1041;
  uint64_t *v1042;
  WebKit::WebPreferencesKey *v1043;
  uint64_t *v1044;
  WebKit::WebPreferencesKey *v1045;
  uint64_t *v1046;
  WebKit::WebPreferencesKey *v1047;
  uint64_t *v1048;
  WebKit::WebPreferencesKey *v1049;
  uint64_t *v1050;
  WebKit::WebPreferencesKey *v1051;
  uint64_t *v1052;
  WebKit::WebPreferencesKey *v1053;
  uint64_t *v1054;
  WebKit::WebPreferencesKey *v1055;
  uint64_t *v1056;
  WebKit::WebPreferencesKey *v1057;
  uint64_t *v1058;
  WebKit::WebPreferencesKey *v1059;
  uint64_t *v1060;
  WebKit::WebPreferencesKey *v1061;
  uint64_t *v1062;
  WebKit::WebPreferencesKey *v1063;
  uint64_t *v1064;
  WebKit::WebPreferencesKey *v1065;
  uint64_t *v1066;
  WebKit::WebPreferencesKey *v1067;
  uint64_t *v1068;
  WebKit::WebPreferencesKey *v1069;
  uint64_t *v1070;
  WebKit::WebPreferencesKey *v1071;
  uint64_t *v1072;
  WebKit::WebPreferencesKey *v1073;
  uint64_t *v1074;
  WebKit::WebPreferencesKey *v1075;
  uint64_t *v1076;
  WebKit::WebPreferencesKey *v1077;
  uint64_t *v1078;
  WebKit::WebPreferencesKey *v1079;
  uint64_t *v1080;
  WebKit::WebPreferencesKey *v1081;
  uint64_t *v1082;
  WebKit::WebPreferencesKey *v1083;
  uint64_t *v1084;
  WebKit::WebPreferencesKey *v1085;
  uint64_t *v1086;
  WebKit::WebPreferencesKey *v1087;
  uint64_t *v1088;
  WebKit::WebPreferencesKey *v1089;
  uint64_t *v1090;
  WebKit::WebPreferencesKey *v1091;
  uint64_t *v1092;
  WebKit::WebPreferencesKey *v1093;
  uint64_t *v1094;
  WebKit::WebPreferencesKey *v1095;
  uint64_t *v1096;
  WebKit::WebPreferencesKey *v1097;
  uint64_t *v1098;
  WebKit::WebPreferencesKey *v1099;
  uint64_t *v1100;
  WebKit::WebPreferencesKey *v1101;
  uint64_t *v1102;
  WebKit::WebPreferencesKey *v1103;
  uint64_t *v1104;
  WebKit::WebPreferencesKey *v1105;
  uint64_t *v1106;
  WebKit::WebPreferencesKey *v1107;
  uint64_t *v1108;
  WebKit::WebPreferencesKey *v1109;
  uint64_t *v1110;
  WebKit::WebPreferencesKey *v1111;
  uint64_t *v1112;
  WebKit::WebPreferencesKey *v1113;
  uint64_t *v1114;
  WebKit::WebPreferencesKey *v1115;
  uint64_t *v1116;
  WebKit::WebPreferencesKey *v1117;
  uint64_t *PartyWebsiteDataRemovalLiveOnTestingEnabledKey;
  WebKit::WebPreferencesKey *v1119;
  uint64_t *PartyWebsiteDataRemovalReproTestingEnabledKey;
  WebKit::WebPreferencesKey *v1121;
  uint64_t *v1122;
  WebKit::WebPreferencesKey *v1123;
  uint64_t *v1124;
  WebKit::WebPreferencesKey *v1125;
  uint64_t *v1126;
  WebKit::WebPreferencesKey *v1127;
  uint64_t *v1128;
  WebKit::WebPreferencesKey *v1129;
  uint64_t *v1130;
  WebKit::WebPreferencesKey *v1131;
  uint64_t *v1132;
  WebKit::WebPreferencesKey *v1133;
  uint64_t *v1134;
  WebKit::WebPreferencesKey *v1135;
  _BYTE v1136[24];
  unint64_t v1137;
  int v1138;

  if ((_MergedGlobals_128 & 1) != 0)
  {
    if (dword_1ECE733FC)
      return &qword_1ECE733F0;
  }
  else
  {
    qword_1ECE733F0 = 0;
    unk_1ECE733F8 = 0;
    qword_1ECE73400 = 0;
    _MergedGlobals_128 = 1;
  }
  v2 = WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(this);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v3 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v2, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v3 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v4 = WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(v3);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v5 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v4, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v5 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v6 = WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(v5);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v7 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v6, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v7 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v8 = WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(v7);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v9 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v8, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v9 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  matched = WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(v9);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v11 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)matched, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v11 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v12 = WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(v11);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v13 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v12, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v13 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v14 = WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(v13);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v15 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v14, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v15 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v16 = WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(v15);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v17 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v16, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v17 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v18 = WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(v17);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v19 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v18, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v19 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v20 = WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(v19);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v21 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v20, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v21 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v22 = WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(v21);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v23 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v22, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v23 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v24 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(v23);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v25 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v24, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v25 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v26 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(v25);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v27 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v26, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v27 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v28 = WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(v27);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v29 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v28, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v29 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v30 = WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(v29);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v31 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v30, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v31 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v32 = WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(v31);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v33 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v32, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v33 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v34 = WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(v33);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v35 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v34, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v35 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v36 = WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(v35);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v37 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v36, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v37 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v38 = WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(v37);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v39 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v38, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v39 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v40 = WebKit::WebPreferencesKey::applePayEnabledKey(v39);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v41 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v40, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v41 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v42 = WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(v41);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v43 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v42, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v43 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v44 = WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(v43);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v45 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v44, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v45 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v46 = WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(v45);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v47 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v46, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v47 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v48 = WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(v47);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v49 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v48, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v49 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v50 = WebKit::WebPreferencesKey::caretBrowsingEnabledKey(v49);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v51 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v50, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v51 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v52 = WebKit::WebPreferencesKey::colorFilterEnabledKey(v51);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v53 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v52, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v53 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v54 = WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(v53);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v55 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v54, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v55 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v56 = WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(v55);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v57 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v56, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v57 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v58 = WebKit::WebPreferencesKey::cursiveFontFamilyKey(v57);
  WTF::StringLiterals::operator"" _str("Snell Roundhand", &v1135);
  v59 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v59;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v58, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v61 = v1135;
  v1135 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      v61 = (WTF::StringImpl *)WTF::StringImpl::destroy(v61, v60);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(v61);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v63 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v62, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v63 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v64 = WebKit::WebPreferencesKey::domPasteAllowedKey(v63);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v65 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v64, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v65 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v66 = WebKit::WebPreferencesKey::dataDetectorTypesKey(v65);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v67 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v66, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v67 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v68 = WebKit::WebPreferencesKey::databasesEnabledKey(v67);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v69 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v68, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v69 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v70 = WebKit::WebPreferencesKey::defaultFixedFontSizeKey(v69);
  v1137 = 0x402A000000000000;
  v1138 = 3;
  v71 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v70, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v71 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v72 = WebKit::WebPreferencesKey::defaultFontSizeKey(v71);
  v1137 = 0x4030000000000000;
  v1138 = 3;
  v73 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v72, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v73 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v74 = WebKit::WebPreferencesKey::defaultTextEncodingNameKey(v73);
  PAL::defaultTextEncodingNameForSystemLanguage((PAL *)v74);
  v75 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v75;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v74, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v77 = v1135;
  v1135 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      v77 = (WTF::StringImpl *)WTF::StringImpl::destroy(v77, v76);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = WebKit::WebPreferencesKey::developerExtrasEnabledKey(v77);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v79 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v78, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v79 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v80 = WebKit::WebPreferencesKey::deviceHeightKey(v79);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v81 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v80, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v81 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v82 = WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(v81);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v83 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v82, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v83 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v84 = WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(v83);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v85 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v84, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v85 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v86 = WebKit::WebPreferencesKey::deviceWidthKey(v85);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v87 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v86, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v87 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v88 = WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(v87);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v89 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v88, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v89 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v90 = WebKit::WebPreferencesKey::downloadAttributeEnabledKey(v89);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v91 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v90, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v91 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v92 = WebKit::WebPreferencesKey::editableLinkBehaviorKey(v91);
  LODWORD(v1137) = 4;
  v1138 = 2;
  v93 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v92, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v93 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v94 = WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(v93);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v95 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v94, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v95 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v96 = WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(v95);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v97 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v96, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v97 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v98 = WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(v97);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v99 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v98, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v99 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v100 = WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(v99);
  WTF::StringLiterals::operator"" _str("", &v1135);
  v101 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v101;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v100, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v103 = v1135;
  v1135 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      v103 = (WTF::StringImpl *)WTF::StringImpl::destroy(v103, v102);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = WebKit::WebPreferencesKey::fantasyFontFamilyKey(v103);
  WTF::StringLiterals::operator"" _str("Papyrus", &v1135);
  v105 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v105;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v104, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v107 = v1135;
  v1135 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      v107 = (WTF::StringImpl *)WTF::StringImpl::destroy(v107, v106);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = WebKit::WebPreferencesKey::fixedFontFamilyKey(v107);
  WTF::StringLiterals::operator"" _str("Courier", &v1135);
  v109 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v109;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v108, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v111 = v1135;
  v1135 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      v111 = (WTF::StringImpl *)WTF::StringImpl::destroy(v111, v110);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = WebKit::WebPreferencesKey::forceCompositingModeKey(v111);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v113 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v112, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v113 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v114 = WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(v113);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v115 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v114, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v115 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v116 = WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(v115);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v117 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v116, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v117 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v118 = WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(v117);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v119 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v118, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v119 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v120 = WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(v119);
  v1137 = 0x3FF0000000000000;
  v1138 = 3;
  v121 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v120, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v121 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v122 = WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(v121);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v123 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v122, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v123 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v124 = WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(v123);
  v1137 = 0x4014000000000000;
  v1138 = 3;
  v125 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v124, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v125 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v126 = WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(v125);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v127 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v126, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v127 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v128 = WebKit::WebPreferencesKey::inspectorAttachedHeightKey(v127);
  LODWORD(v1137) = 500;
  v1138 = 2;
  v129 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v128, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v129 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v130 = WebKit::WebPreferencesKey::inspectorAttachedWidthKey(v129);
  LODWORD(v1137) = 750;
  v1138 = 2;
  v131 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v130, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v131 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v132 = WebKit::WebPreferencesKey::inspectorAttachmentSideKey(v131);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v133 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v132, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v133 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v134 = WebKit::WebPreferencesKey::inspectorStartsAttachedKey(v133);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v135 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v134, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v135 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v136 = WebKit::WebPreferencesKey::inspectorWindowFrameKey(v135);
  WTF::StringLiterals::operator"" _str("", &v1135);
  v137 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v137;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v136, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v139 = v1135;
  v1135 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      v139 = (WTF::StringImpl *)WTF::StringImpl::destroy(v139, v138);
    else
      *(_DWORD *)v139 -= 2;
  }
  v140 = WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(v139);
  v1137 = 0x4010000000000000;
  v1138 = 3;
  v141 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v140, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v141 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v142 = WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(v141);
  v1137 = 0x4020000000000000;
  v1138 = 3;
  v143 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v142, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v143 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v144 = WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(v143);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v145 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v144, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v145 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v146 = WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(v145);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v147 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v146, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v147 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v148 = WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(v147);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v149 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v148, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v149 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v150 = WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(v149);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v151 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v150, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v151 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v152 = WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(v151);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v153 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v152, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v153 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v154 = WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(v153);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v155 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v154, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v155 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v156 = WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(v155);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v157 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v156, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v157 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v158 = WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(v157);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v159 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v158, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v159 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v160 = WebKit::WebPreferencesKey::layoutFallbackWidthKey(v159);
  LODWORD(v1137) = 980;
  v1138 = 2;
  v161 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v160, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v161 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v162 = WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(v161);
  v1137 = 0;
  v1138 = 3;
  v163 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v162, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v163 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v164 = WebKit::WebPreferencesKey::linkPreconnectKey(v163);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v165 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v164, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v165 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v166 = WebKit::WebPreferencesKey::linkPreloadEnabledKey(v165);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v167 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v166, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v167 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  DeferringEnabledKey = WebKit::WebPreferencesKey::loadDeferringEnabledKey(v167);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v169 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)DeferringEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v169 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v170 = WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(v169);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v171 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v170, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v171 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v172 = WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(v171);
  v1137 = 0x4038000000000000;
  v1138 = 3;
  v173 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v172, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v173 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v174 = WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(v173);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v175 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v174, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v175 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v176 = WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(v175);
  v1137 = 0x403E000000000000;
  v1138 = 3;
  v177 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v176, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v177 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v178 = WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(v177);
  v1137 = 0x4024000000000000;
  v1138 = 3;
  v179 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v178, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v179 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v180 = WebKit::WebPreferencesKey::mathMLEnabledKey(v179);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v181 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v180, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v181 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v182 = WebKit::WebPreferencesKey::maxParseDurationKey(v181);
  v1137 = 0xBFF0000000000000;
  v1138 = 3;
  v183 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v182, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v183 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v184 = WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(v183);
  WTF::StringLiterals::operator"" _str("aac ,zaac,qaac,caac,.mp3,mp4a", &v1135);
  v185 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v185;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v184, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v187 = v1135;
  v1135 = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      v187 = (WTF::StringImpl *)WTF::StringImpl::destroy(v187, v186);
    else
      *(_DWORD *)v187 -= 2;
  }
  v188 = WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(v187);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v189 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v188, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v189 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v190 = WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(v189);
  WTF::StringLiterals::operator"" _str("c608,wvtt", &v1135);
  v191 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v191;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v190, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v193 = v1135;
  v1135 = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
      v193 = (WTF::StringImpl *)WTF::StringImpl::destroy(v193, v192);
    else
      *(_DWORD *)v193 -= 2;
  }
  v194 = WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(v193);
  WTF::StringLiterals::operator"" _str("mp4a.40,avc1", &v1135);
  v195 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v195;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v194, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v197 = v1135;
  v1135 = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
      v197 = (WTF::StringImpl *)WTF::StringImpl::destroy(v197, v196);
    else
      *(_DWORD *)v197 -= 2;
  }
  v198 = WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(v197);
  WTF::StringLiterals::operator"" _str("video/mp4,audio/mp4,video/x-m4v,audio/x-m4a,audio/mp3,application/x-mpegURL,application/vnd.apple.mpegURL,video/mp2t,video/iso.segment,audio/aac,audio/mpeg,audio/ac3,audio/eac3,video/mpeg2,text/vtt", &v1135);
  v199 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v199;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v198, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v201 = v1135;
  v1135 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
      v201 = (WTF::StringImpl *)WTF::StringImpl::destroy(v201, v200);
    else
      *(_DWORD *)v201 -= 2;
  }
  v202 = WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(v201);
  WTF::StringLiterals::operator"" _str("", &v1135);
  v203 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v203;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v202, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v205 = v1135;
  v1135 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
      v205 = (WTF::StringImpl *)WTF::StringImpl::destroy(v205, v204);
    else
      *(_DWORD *)v205 -= 2;
  }
  v206 = WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(v205);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v207 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v206, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v207 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v208 = WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(v207);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v209 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v208, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v209 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v210 = WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(v209);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v211 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v210, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v211 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v212 = WebKit::WebPreferencesKey::mediaEnabledKey(v211);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v213 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v212, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v213 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v214 = WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(v213);
  v1137 = 0x408E000000000000;
  v1138 = 3;
  v215 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v214, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v215 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v216 = WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(v215);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v217 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v216, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v217 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v218 = WebKit::WebPreferencesKey::mediaStreamEnabledKey(v217);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v219 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v218, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v219 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v220 = WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(v219);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v221 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v220, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v221 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v222 = WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(v221);
  WTF::StringLiterals::operator"" _str("avc1,zavc,qavc,cavc", &v1135);
  v223 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v223;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v222, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v225 = v1135;
  v1135 = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
      v225 = (WTF::StringImpl *)WTF::StringImpl::destroy(v225, v224);
    else
      *(_DWORD *)v225 -= 2;
  }
  v226 = WebKit::WebPreferencesKey::minimumFontSizeKey(v225);
  v1137 = 0;
  v1138 = 3;
  v227 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v226, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v227 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v228 = WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(v227);
  v1137 = 0x4022000000000000;
  v1138 = 3;
  v229 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v228, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v229 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v230 = WebKit::WebPreferencesKey::minimumZoomFontSizeKey(v229);
  v1137 = 0x402E000000000000;
  v1138 = 3;
  v231 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v230, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v231 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v232 = WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(v231);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v233 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v232, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v233 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v234 = WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(v233);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v235 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v234, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v235 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v236 = WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(v235);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v237 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v236, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v237 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v238 = WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(v237);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v239 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v238, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v239 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v240 = WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(v239);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v241 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v240, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v241 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v242 = WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(v241);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v243 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v242, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v243 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v244 = WebKit::WebPreferencesKey::pdfPluginEnabledKey(v243);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v245 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v244, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v245 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v246 = WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(v245);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v247 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v246, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v247 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v248 = WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(v247);
  LOBYTE(v1137) = WebKit::defaultPassiveTouchListenersAsDefaultOnDocument((WebKit *)v248);
  v1138 = 1;
  v249 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v248, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v249 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v250 = WebKit::WebPreferencesKey::passwordEchoDurationKey(v249);
  v1137 = 0x4000000000000000;
  v1138 = 3;
  v251 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v250, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v251 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v252 = WebKit::WebPreferencesKey::passwordEchoEnabledKey(v251);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v253 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v252, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v253 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v254 = WebKit::WebPreferencesKey::pictographFontFamilyKey(v253);
  WTF::StringLiterals::operator"" _str("AppleColorEmoji", &v1135);
  v255 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v255;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v254, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v257 = v1135;
  v1135 = 0;
  if (v257)
  {
    if (*(_DWORD *)v257 == 2)
      v257 = (WTF::StringImpl *)WTF::StringImpl::destroy(v257, v256);
    else
      *(_DWORD *)v257 -= 2;
  }
  v258 = WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(v257);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v259 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v258, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v259 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v260 = WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(v259);
  LODWORD(v1137) = 2;
  v1138 = 2;
  v261 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v260, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v261 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v262 = WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(v261);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v263 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v262, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v263 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v264 = WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(v263);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v265 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v264, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v265 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v266 = WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(v265);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v267 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v266, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v267 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v268 = WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(v267);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v269 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v268, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v269 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v270 = WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(v269);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v271 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v270, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v271 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  VideoKey = WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(v271);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v273 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)VideoKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v273 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v274 = WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(v273);
  v1137 = 0;
  v1138 = 3;
  v275 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v274, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v275 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v276 = WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(v275);
  v1137 = 0;
  v1138 = 3;
  v277 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v276, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v277 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v278 = WebKit::WebPreferencesKey::sansSerifFontFamilyKey(v277);
  WTF::StringLiterals::operator"" _str("Helvetica", &v1135);
  v279 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v279;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v278, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v281 = v1135;
  v1135 = 0;
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
      v281 = (WTF::StringImpl *)WTF::StringImpl::destroy(v281, v280);
    else
      *(_DWORD *)v281 -= 2;
  }
  v282 = WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(v281);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v283 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v282, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v283 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v284 = WebKit::WebPreferencesKey::serifFontFamilyKey(v283);
  WTF::StringLiterals::operator"" _str("Times", &v1135);
  v285 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v285;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v284, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v287 = v1135;
  v1135 = 0;
  if (v287)
  {
    if (*(_DWORD *)v287 == 2)
      v287 = (WTF::StringImpl *)WTF::StringImpl::destroy(v287, v286);
    else
      *(_DWORD *)v287 -= 2;
  }
  v288 = WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(v287);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v289 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v288, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v289 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v290 = WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(v289);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v291 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v290, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v291 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v292 = WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(v291);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v293 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v292, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v293 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v294 = WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(v293);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v295 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v294, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v295 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v296 = WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(v295);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v297 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v296, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v297 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v298 = WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(v297);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v299 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v298, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v299 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v300 = WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(v299);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v301 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v300, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v301 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v302 = WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(v301);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v303 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v302, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v303 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v304 = WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(v303);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v305 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v304, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v305 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v306 = WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(v305);
  LOBYTE(v1137) = WebKit::defaultShouldPrintBackgrounds((WebKit *)v306);
  v1138 = 1;
  v307 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v306, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v307 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v308 = WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(v307);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v309 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v308, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v309 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v310 = WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(v309);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v311 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v310, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v311 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v312 = WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(v311);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v313 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v312, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v313 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v314 = WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(v313);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v315 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v314, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v315 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v316 = WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(v315);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v317 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v316, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v317 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v318 = WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(v317);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v319 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v318, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v319 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v320 = WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(v319);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v321 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v320, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v321 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v322 = WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(v321);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v323 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v322, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v323 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v324 = WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(v323);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v325 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v324, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v325 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v326 = WebKit::WebPreferencesKey::spatialNavigationEnabledKey(v325);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v327 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v326, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v327 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v328 = WebKit::WebPreferencesKey::standaloneKey(v327);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v329 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v328, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v329 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v330 = WebKit::WebPreferencesKey::standardFontFamilyKey(v329);
  WTF::StringLiterals::operator"" _str("Times", &v1135);
  v331 = v1135;
  v1135 = 0;
  v1137 = (unint64_t)v331;
  v1138 = 0;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v330, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1138 = -1;
  v333 = v1135;
  v1135 = 0;
  if (v333)
  {
    if (*(_DWORD *)v333 == 2)
      v333 = (WTF::StringImpl *)WTF::StringImpl::destroy(v333, v332);
    else
      *(_DWORD *)v333 -= 2;
  }
  v334 = WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(v333);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v335 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v334, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v335 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v336 = WebKit::WebPreferencesKey::systemLayoutDirectionKey(v335);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v337 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v336, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v337 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v338 = WebKit::WebPreferencesKey::systemPreviewEnabledKey(v337);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v339 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v338, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v339 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v340 = WebKit::WebPreferencesKey::tabsToLinksKey(v339);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v341 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v340, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v341 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v342 = WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(v341);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v343 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v342, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v343 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v344 = WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(v343);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v345 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v344, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v345 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v346 = WebKit::WebPreferencesKey::textAreasAreResizableKey(v345);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v347 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v346, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v347 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v348 = WebKit::WebPreferencesKey::textAutosizingEnabledKey(v347);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v349 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v348, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v349 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v350 = WebKit::WebPreferencesKey::textExtractionEnabledKey(v349);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v351 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v350, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v351 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v352 = WebKit::WebPreferencesKey::textInteractionEnabledKey(v351);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v353 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v352, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v353 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v354 = WebKit::WebPreferencesKey::threadedScrollingEnabledKey(v353);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v355 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v354, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v355 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v356 = WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(v355);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v357 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v356, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v357 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v358 = WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(v357);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v359 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v358, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v359 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v360 = WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(v359);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v361 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v360, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v361 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v362 = WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(v361);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v363 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v362, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v363 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v364 = WebKit::WebPreferencesKey::usesBackForwardCacheKey(v363);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v365 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v364, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v365 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v366 = WebKit::WebPreferencesKey::usesEncodingDetectorKey(v365);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v367 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v366, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v367 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v368 = WebKit::WebPreferencesKey::vp8DecoderEnabledKey(v367);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v369 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v368, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v369 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v370 = WebKit::WebPreferencesKey::vp9DecoderEnabledKey(v369);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v371 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v370, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v371 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v372 = WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(v371);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v373 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v372, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v373 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v374 = WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(v373);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v375 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v374, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v375 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v376 = WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(v375);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v377 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v376, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v377 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v378 = WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(v377);
  LODWORD(v1137) = 0;
  v1138 = 2;
  v379 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v378, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v379 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v380 = WebKit::WebPreferencesKey::visualViewportEnabledKey(v379);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v381 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v380, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v381 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v382 = WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(v381);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v383 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v382, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v383 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v384 = WebKit::WebPreferencesKey::webAudioEnabledKey(v383);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v385 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v384, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v385 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v386 = WebKit::WebPreferencesKey::webMParserEnabledKey(v385);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v387 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v386, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v387 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v388 = WebKit::WebPreferencesKey::webSecurityEnabledKey(v387);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v389 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v388, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v389 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v390 = WebKit::WebPreferencesKey::webSocketEnabledKey(v389);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v391 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v390, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v391 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v392 = WebKit::WebPreferencesKey::windowFocusRestrictedKey(v391);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v393 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v392, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v393 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v394 = WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(v393);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v395 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v394, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v395 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v396 = WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(v395);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v397 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v396, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v397 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v398 = WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(v397);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v399 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v398, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v399 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v400 = WebKit::WebPreferencesKey::selectShowPickerEnabledKey(v399);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v401 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v400, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v401 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v402 = WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(v401);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v403 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v402, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v403 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v404 = WebKit::WebPreferencesKey::isAVFoundationEnabledKey(v403);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v405 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v404, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v405 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v406 = WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(v405);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v407 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v406, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v407 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v408 = WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(v407);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v409 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v408, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v409 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v410 = WebKit::WebPreferencesKey::accessHandleEnabledKey(v409);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v411 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v410, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v411 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v412 = WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(v411);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v413 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v412, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v413 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v414 = WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(v413);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v415 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v414, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v415 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v416 = WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(v415);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v417 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v416, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v417 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v418 = WebKit::WebPreferencesKey::allowWebGLInWorkersKey(v417);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v419 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v418, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v419 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v420 = WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(v419);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v421 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v420, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v421 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v422 = WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(v421);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v423 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v422, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v423 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v424 = WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(v423);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v425 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v424, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v425 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v426 = WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(v425);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v427 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v426, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v427 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v428 = WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(v427);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v429 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v428, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v429 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v430 = WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(v429);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v431 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v430, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v431 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v432 = WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(v431);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v433 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v432, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v433 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v434 = WebKit::WebPreferencesKey::appBadgeEnabledKey(v433);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v435 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v434, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v435 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v436 = WebKit::WebPreferencesKey::appHighlightsEnabledKey(v435);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v437 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v436, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v437 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v438 = WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(v437);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v439 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v438, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v439 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v440 = WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(v439);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v441 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v440, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v441 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v442 = WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(v441);
  LOBYTE(v1137) = WebKit::defaultUseAsyncUIKitInteractions((WebKit *)v442);
  v1138 = 1;
  v443 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v442, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v443 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v444 = WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(v443);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v445 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v444, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v445 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v446 = WebKit::WebPreferencesKey::attachmentElementEnabledKey(v445);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v447 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v446, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v447 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v448 = WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(v447);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v449 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v448, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v449 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v450 = WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(v449);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v451 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v450, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v451 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v452 = WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(v451);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v453 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v452, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v453 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v454 = WebKit::WebPreferencesKey::domAudioSessionEnabledKey(v453);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v455 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v454, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v455 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v456 = WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(v455);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v457 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v456, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v457 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v458 = WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(v457);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v459 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v458, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v459 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v460 = WebKit::WebPreferencesKey::beaconAPIEnabledKey(v459);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v461 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v460, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v461 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v462 = WebKit::WebPreferencesKey::broadcastChannelEnabledKey(v461);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v463 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v462, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v463 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v464 = WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(v463);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v465 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v464, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v465 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v466 = WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(v465);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v467 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v466, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v467 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v468 = WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(v467);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v469 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v468, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v469 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v470 = WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(v469);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v471 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v470, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v471 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v472 = WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(v471);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v473 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v472, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v473 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v474 = WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(v473);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v475 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v474, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v475 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v476 = WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(v475);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v477 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v476, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v477 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v478 = WebKit::WebPreferencesKey::accentColorEnabledKey(v477);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v479 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v478, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v479 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v480 = WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(v479);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v481 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v480, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v481 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v482 = WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(v481);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v483 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v482, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v483 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v484 = WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(v483);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v485 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v484, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v485 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v486 = WebKit::WebPreferencesKey::masonryEnabledKey(v485);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v487 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v486, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v487 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v488 = WebKit::WebPreferencesKey::cssMotionPathEnabledKey(v487);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v489 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v488, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v489 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v490 = WebKit::WebPreferencesKey::cssNestingEnabledKey(v489);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v491 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v490, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v491 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v492 = WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(v491);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v493 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v492, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v493 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v494 = WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(v493);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v495 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v494, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v495 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v496 = WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(v495);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v497 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v496, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v497 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v498 = WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(v497);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v499 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v498, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v499 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v500 = WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(v499);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v501 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v500, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v501 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v502 = WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(v501);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v503 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v502, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v503 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v504 = WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(v503);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v505 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v504, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v505 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v506 = WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(v505);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v507 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v506, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v507 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v508 = WebKit::WebPreferencesKey::cssColorContrastEnabledKey(v507);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v509 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v508, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v509 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v510 = WebKit::WebPreferencesKey::cssDPropertyEnabledKey(v509);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v511 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v510, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v511 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v512 = WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(v511);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v513 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v512, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v513 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v514 = WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(v513);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v515 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v514, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v515 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v516 = WebKit::WebPreferencesKey::cssLightDarkEnabledKey(v515);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v517 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v516, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v517 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v518 = WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(v517);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v519 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v518, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v519 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v520 = WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(v519);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v521 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v520, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v521 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v522 = WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(v521);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v523 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v522, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v523 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v524 = WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(v523);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v525 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v524, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v525 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v526 = WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(v525);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v527 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v526, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v527 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v528 = WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(v527);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v529 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v528, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v529 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v530 = WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(v529);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v531 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v530, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v531 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v532 = WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(v531);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v533 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v532, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v533 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v534 = WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(v533);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v535 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v534, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v535 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v536 = WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(v535);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v537 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v536, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v537 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v538 = WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(v537);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v539 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v538, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v539 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v540 = WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(v539);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v541 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v540, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v541 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v542 = WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(v541);
  LOBYTE(v1137) = WebKit::defaultCSSOMViewScrollingAPIEnabled((WebKit *)v542);
  v1138 = 1;
  v543 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v542, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v543 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v544 = WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(v543);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v545 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v544, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v545 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v546 = WebKit::WebPreferencesKey::cacheAPIEnabledKey(v545);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v547 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v546, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v547 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v548 = WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(v547);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v549 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v548, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v549 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v550 = WebKit::WebPreferencesKey::canvasFiltersEnabledKey(v549);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v551 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v550, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v551 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v552 = WebKit::WebPreferencesKey::canvasLayersEnabledKey(v551);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v553 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v552, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v553 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v554 = WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(v553);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v555 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v554, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v555 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v556 = WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(v555);
  LOBYTE(v1137) = WebKit::defaultCaptureAudioInUIProcessEnabled((WebKit *)v556);
  v1138 = 1;
  v557 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v556, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v557 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v558 = WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(v557);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v559 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v558, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v559 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v560 = WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(v559);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v561 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v560, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v561 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v562 = WebKit::WebPreferencesKey::clientBadgeEnabledKey(v561);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v563 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v562, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v563 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v564 = WebKit::WebPreferencesKey::inputTypeColorEnabledKey(v563);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v565 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v564, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v565 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v566 = WebKit::WebPreferencesKey::compositingBordersVisibleKey(v565);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v567 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v566, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v567 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v568 = WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(v567);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v569 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v568, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v569 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v570 = WebKit::WebPreferencesKey::compressionStreamEnabledKey(v569);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v571 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v570, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v571 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v572 = WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(v571);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v573 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v572, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v573 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v574 = WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(v573);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v575 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v574, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v575 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v576 = WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(v575);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v577 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v576, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v577 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v578 = WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(v577);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v579 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v578, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v579 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v580 = WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(v579);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v581 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v580, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v581 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v582 = WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(v581);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v583 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v582, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v583 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v584 = WebKit::WebPreferencesKey::cookieEnabledKey(v583);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v585 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v584, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v585 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v586 = WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(v585);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v587 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v586, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v587 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v588 = WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(v587);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v589 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v588, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v589 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v590 = WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(v589);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v591 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v590, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v591 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v592 = WebKit::WebPreferencesKey::customStateSetEnabledKey(v591);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v593 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v592, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v593 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v594 = WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(v593);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v595 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v594, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v595 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v596 = WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(v595);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v597 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v596, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v597 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v598 = WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(v597);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v599 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v598, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v599 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v600 = WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(v599);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v601 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v600, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v601 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v602 = WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(v601);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v603 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v602, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v603 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v604 = WebKit::WebPreferencesKey::dataListElementEnabledKey(v603);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v605 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v604, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v605 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v606 = WebKit::WebPreferencesKey::inputTypeDateEnabledKey(v605);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v607 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v606, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v607 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v608 = WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(v607);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v609 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v608, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v609 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v610 = WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(v609);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v611 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v610, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v611 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v612 = WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(v611);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v613 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v612, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v613 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v614 = WebKit::WebPreferencesKey::declarativeWebPushKey(v613);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v615 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v614, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v615 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  PaintKey = WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(v615);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v617 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)PaintKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v617 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v618 = WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(v617);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v619 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v618, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v619 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v620 = WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(v619);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v621 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v620, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v621 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v622 = WebKit::WebPreferencesKey::deprecationReportingEnabledKey(v621);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v623 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v622, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v623 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v624 = WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(v623);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v625 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v624, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v625 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v626 = WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(v625);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v627 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v626, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v627 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v628 = WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(v627);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v629 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v628, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v629 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v630 = WebKit::WebPreferencesKey::directoryUploadEnabledKey(v629);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v631 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v630, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v631 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v632 = WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(v631);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v633 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v632, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v633 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  PartyWebsiteDataRemovalDisabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(v633);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v635 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)PartyWebsiteDataRemovalDisabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v635 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v636 = WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(v635);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v637 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v636, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v637 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v638 = WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(v637);
  LOBYTE(v1137) = WebKit::defaultDisallowSyncXHRDuringPageDismissalEnabled((WebKit *)v638);
  v1138 = 1;
  v639 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v638, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v639 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v640 = WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(v639);
  LOBYTE(v1137) = WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay((WebKit *)v640);
  v1138 = 1;
  v641 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v640, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v641 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v642 = WebKit::WebPreferencesKey::embedElementEnabledKey(v641);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v643 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v642, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v643 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v644 = WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(v643);
  LOBYTE(v1137) = WebKit::defaultAutomaticLiveResizeEnabled((WebKit *)v644);
  v1138 = 1;
  v645 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v644, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v645 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v646 = WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(v645);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v647 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v646, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v647 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v648 = WebKit::WebPreferencesKey::cryptoKitEnabledKey(v647);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v649 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v648, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v649 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v650 = WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(v649);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v651 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v650, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v651 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v652 = WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(v651);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v653 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v652, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v653 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v654 = WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(v653);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v655 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v654, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v655 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v656 = WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(v655);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v657 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v656, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v657 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v658 = WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(v657);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v659 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v658, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v659 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  APIEnabledKey = WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(v659);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v661 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)APIEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v661 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v662 = WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(v661);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v663 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v662, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v663 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v664 = WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(v663);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v665 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v664, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v665 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v666 = WebKit::WebPreferencesKey::enterKeyHintEnabledKey(v665);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v667 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v666, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v667 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v668 = WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(v667);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v669 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v668, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v669 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v670 = WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(v669);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v671 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v670, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v671 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v672 = WebKit::WebPreferencesKey::ftpEnabledKey(v671);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v673 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v672, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v673 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v674 = WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(v673);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v675 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v674, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v675 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v676 = WebKit::WebPreferencesKey::fasterClicksEnabledKey(v675);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v677 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v676, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v677 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  PriorityEnabledKey = WebKit::WebPreferencesKey::fetchPriorityEnabledKey(v677);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v679 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)PriorityEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v679 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v680 = WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(v679);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v681 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v680, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v681 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v682 = WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(v681);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v683 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v682, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v683 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v684 = WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(v683);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v685 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v684, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v685 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v686 = WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(v685);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v687 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v686, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v687 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v688 = WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(v687);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v689 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v688, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v689 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v690 = WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(v689);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v691 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v690, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v691 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v692 = WebKit::WebPreferencesKey::fullScreenEnabledKey(v691);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v693 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v692, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v693 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v694 = WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(v693);
  LOBYTE(v1137) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v694);
  v1138 = 1;
  v695 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v694, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v695 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v696 = WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(v695);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v697 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v696, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v697 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v698 = WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(v697);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v699 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v698, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v699 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v700 = WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(v699);
  LOBYTE(v1137) = WebKit::defaultManageCaptureStatusBarInGPUProcessEnabled((WebKit *)v700);
  v1138 = 1;
  v701 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v700, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v701 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v702 = WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(v701);
  LOBYTE(v1137) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v702);
  v1138 = 1;
  v703 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v702, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v703 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v704 = WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(v703);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v705 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v704, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v705 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v706 = WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(v705);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v707 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v706, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v707 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v708 = WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(v707);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v709 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v708, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v709 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v710 = WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(v709);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v711 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v710, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v711 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v712 = WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(v711);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v713 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v712, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v713 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v714 = WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(v713);
  LOBYTE(v1137) = WebKit::defaultCaptureAudioInUIProcessEnabled((WebKit *)v714);
  v1138 = 1;
  v715 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v714, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v715 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v716 = WebKit::WebPreferencesKey::gamepadsEnabledKey(v715);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v717 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v716, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v717 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v718 = WebKit::WebPreferencesKey::genericCueAPIEnabledKey(v717);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v719 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v718, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v719 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v720 = WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(v719);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v721 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v720, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v721 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v722 = WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(v721);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v723 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v722, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v723 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v724 = WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(v723);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v725 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v724, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v725 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v726 = WebKit::WebPreferencesKey::modelElementEnabledKey(v725);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v727 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v726, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v727 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v728 = WebKit::WebPreferencesKey::modelDocumentEnabledKey(v727);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v729 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v728, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v729 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v730 = WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(v729);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v731 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v730, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v731 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v732 = WebKit::WebPreferencesKey::invokerAttributesEnabledKey(v731);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v733 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v732, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v733 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v734 = WebKit::WebPreferencesKey::popoverAttributeEnabledKey(v733);
  LOBYTE(v1137) = WebKit::defaultPopoverAttributeEnabled((WebKit *)v734);
  v1138 = 1;
  v735 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v734, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v735 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v736 = WebKit::WebPreferencesKey::switchControlEnabledKey(v735);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v737 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v736, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v737 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v738 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(v737);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v739 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v738, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v739 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v740 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(v739);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v741 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v740, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v741 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v742 = WebKit::WebPreferencesKey::highlightAPIEnabledKey(v741);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v743 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v742, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v743 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v744 = WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(v743);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v745 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v744, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v745 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v746 = WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(v745);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v747 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v746, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v747 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v748 = WebKit::WebPreferencesKey::itpDebugModeEnabledKey(v747);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v749 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v748, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v749 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v750 = WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(v749);
  LOBYTE(v1137) = WebKit::defaultTextAutosizingUsesIdempotentMode((WebKit *)v750);
  v1138 = 1;
  v751 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v750, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v751 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v752 = WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(v751);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v753 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v752, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v753 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v754 = WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(v753);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v755 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v754, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v755 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v756 = WebKit::WebPreferencesKey::imageCaptureEnabledKey(v755);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v757 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v756, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v757 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v758 = WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(v757);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v759 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v758, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v759 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v760 = WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(v759);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v761 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v760, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v761 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v762 = WebKit::WebPreferencesKey::javaScriptEnabledKey(v761);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v763 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v762, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v763 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v764 = WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(v763);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v765 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v764, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v765 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v766 = WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(v765);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v767 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v766, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v767 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v768 = WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(v767);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v769 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v768, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v769 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v770 = WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(v769);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v771 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v770, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v771 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v772 = WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(v771);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v773 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v772, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v773 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v774 = WebKit::WebPreferencesKey::showModalDialogEnabledKey(v773);
  LOBYTE(v1137) = WebKit::defaultShowModalDialogEnabled((WebKit *)v774);
  v1138 = 1;
  v775 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v774, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v775 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v776 = WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(v775);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v777 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v776, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v777 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v778 = WebKit::WebPreferencesKey::linkSanitizerEnabledKey(v777);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v779 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v778, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v779 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v780 = WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(v779);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v781 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v780, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v781 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v782 = WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(v781);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v783 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v782, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v783 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v784 = WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(v783);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v785 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v784, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v785 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v786 = WebKit::WebPreferencesKey::linkPrefetchEnabledKey(v785);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v787 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v786, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v787 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v788 = WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(v787);
  LOBYTE(v1137) = WebKit::defaultLiveRangeSelectionEnabled((WebKit *)v788);
  v1138 = 1;
  v789 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v788, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v789 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  WebArchiveWithEphemeralStorageEnabledKey = WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(v789);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v791 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)WebArchiveWithEphemeralStorageEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v791 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v792 = WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(v791);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v793 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v792, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v793 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v794 = WebKit::WebPreferencesKey::localStorageEnabledKey(v793);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v795 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v794, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v795 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v796 = WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(v795);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v797 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v796, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v797 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v798 = WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(v797);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v799 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v798, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v799 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v800 = WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(v799);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v801 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v800, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v801 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v802 = WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(v801);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v803 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v802, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v803 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v804 = WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(v803);
  LOBYTE(v1137) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v804);
  v1138 = 1;
  v805 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v804, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v805 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v806 = WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(v805);
  LOBYTE(v1137) = WebKit::defaultCaptureAudioInGPUProcessEnabled((WebKit *)v806);
  v1138 = 1;
  v807 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v806, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v807 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v808 = WebKit::WebPreferencesKey::coreMathMLEnabledKey(v807);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v809 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v808, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v809 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v810 = WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(v809);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v811 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v810, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v811 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v812 = WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(v811);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v813 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v812, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v813 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v814 = WebKit::WebPreferencesKey::mediaSessionEnabledKey(v813);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v815 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v814, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v815 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v816 = WebKit::WebPreferencesKey::mediaSourceEnabledKey(v815);
  LOBYTE(v1137) = WebKit::defaultMediaSourceEnabled((WebKit *)v816);
  v1138 = 1;
  v817 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v816, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v817 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v818 = WebKit::WebPreferencesKey::mediaDevicesEnabledKey(v817);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v819 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v818, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v819 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v820 = WebKit::WebPreferencesKey::mediaRecorderEnabledKey(v819);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v821 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v820, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v821 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v822 = WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(v821);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v823 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v822, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v823 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v824 = WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(v823);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v825 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v824, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v825 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v826 = WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(v825);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v827 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v826, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v827 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v828 = WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(v827);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v829 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v828, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v829 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v830 = WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(v829);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v831 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v830, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v831 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v832 = WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(v831);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v833 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v832, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v833 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v834 = WebKit::WebPreferencesKey::navigationAPIEnabledKey(v833);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v835 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v834, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v835 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v836 = WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(v835);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v837 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v836, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v837 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v838 = WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(v837);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v839 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v838, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v839 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v840 = WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(v839);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v841 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v840, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v841 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v842 = WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(v841);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v843 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v842, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v843 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v844 = WebKit::WebPreferencesKey::notificationEventEnabledKey(v843);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v845 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v844, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v845 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v846 = WebKit::WebPreferencesKey::notificationsEnabledKey(v845);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v847 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v846, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v847 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v848 = WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(v847);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v849 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v848, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v849 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v850 = WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(v849);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v851 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v850, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v851 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v852 = WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(v851);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v853 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v852, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v853 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v854 = WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(v853);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v855 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v854, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v855 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v856 = WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(v855);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v857 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v856, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v857 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v858 = WebKit::WebPreferencesKey::opusDecoderEnabledKey(v857);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v859 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v858, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v859 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v860 = WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(v859);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v861 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v860, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v861 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v862 = WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(v861);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v863 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v862, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v863 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v864 = WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(v863);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v865 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v864, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v865 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v866 = WebKit::WebPreferencesKey::permissionsAPIEnabledKey(v865);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v867 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v866, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v867 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v868 = WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(v867);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v869 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v868, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v869 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v870 = WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(v869);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v871 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v870, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v871 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v872 = WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(v871);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v873 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v872, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v873 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v874 = WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(v873);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v875 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v874, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v875 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v876 = WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(v875);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v877 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v876, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v877 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v878 = WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(v877);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v879 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v878, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v879 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v880 = WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(v879);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v881 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v880, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v881 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v882 = WebKit::WebPreferencesKey::pushAPIEnabledKey(v881);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v883 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v882, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v883 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v884 = WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(v883);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v885 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v884, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v885 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v886 = WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(v885);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v887 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v886, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v887 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v888 = WebKit::WebPreferencesKey::readableByteStreamAPIEnabledKey(v887);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v889 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v888, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v889 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v890 = WebKit::WebPreferencesKey::remotePlaybackEnabledKey(v889);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v891 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v890, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v891 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v892 = WebKit::WebPreferencesKey::removeBackgroundEnabledKey(v891);
  LOBYTE(v1137) = WebKit::defaultRemoveBackgroundEnabled((WebKit *)v892);
  v1138 = 1;
  v893 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v892, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v893 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v894 = WebKit::WebPreferencesKey::reportingEnabledKey(v893);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v895 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v894, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v895 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v896 = WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(v895);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v897 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v896, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v897 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v898 = WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(v897);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v899 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v898, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v899 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v900 = WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(v899);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v901 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v900, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v901 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  UserMediaRequiresFocusKey = WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(v901);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v903 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)UserMediaRequiresFocusKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v903 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  SchedulingEnabledKey = WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(v903);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v905 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)SchedulingEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v905 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v906 = WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(v905);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v907 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v906, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v907 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v908 = WebKit::WebPreferencesKey::sKAttributionEnabledKey(v907);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v909 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v908, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v909 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v910 = WebKit::WebPreferencesKey::safeBrowsingEnabledKey(v909);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v911 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v910, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v911 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v912 = WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(v911);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v913 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v912, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v913 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v914 = WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(v913);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v915 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v914, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v915 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v916 = WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(v915);
  LOBYTE(v1137) = WebKit::defaultShouldEnableScreenOrientationAPI((WebKit *)v916);
  v1138 = 1;
  v917 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v916, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v917 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v918 = WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(v917);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v919 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v918, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v919 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v920 = WebKit::WebPreferencesKey::screenCaptureEnabledKey(v919);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v921 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v920, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v921 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v922 = WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(v921);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v923 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v922, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v923 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v924 = WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(v923);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v925 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v924, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v925 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v926 = WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(v925);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v927 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v926, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v927 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v928 = WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(v927);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v929 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v928, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v929 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v930 = WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(v929);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v931 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v930, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v931 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v932 = WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(v931);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v933 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v932, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v933 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v934 = WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(v933);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v935 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v934, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v935 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v936 = WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(v935);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v937 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v936, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v937 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v938 = WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(v937);
  LOBYTE(v1137) = WebKit::defaultSearchInputIncrementalAttributeAndSearchEventEnabled((WebKit *)v938);
  v1138 = 1;
  v939 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v938, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v939 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v940 = WebKit::WebPreferencesKey::secureContextChecksEnabledKey(v939);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v941 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v940, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v941 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v942 = WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(v941);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v943 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v942, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v943 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v944 = WebKit::WebPreferencesKey::selectionFlippingEnabledKey(v943);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v945 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v944, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v945 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v946 = WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(v945);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v947 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v946, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v947 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v948 = WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(v947);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v949 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v948, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v949 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v950 = WebKit::WebPreferencesKey::serviceWorkersEnabledKey(v949);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v951 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v950, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v951 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v952 = WebKit::WebPreferencesKey::shapeDetectionKey(v951);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v953 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v952, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v953 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v954 = WebKit::WebPreferencesKey::sharedWorkerEnabledKey(v953);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v955 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v954, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v955 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v956 = WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(v955);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v957 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v956, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v957 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v958 = WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(v957);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v959 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v958, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v959 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v960 = WebKit::WebPreferencesKey::siteIsolationEnabledKey(v959);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v961 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v960, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v961 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v962 = WebKit::WebPreferencesKey::speechRecognitionEnabledKey(v961);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v963 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v962, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v963 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v964 = WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(v963);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v965 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v964, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v965 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v966 = WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(v965);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v967 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v966, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v967 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v968 = WebKit::WebPreferencesKey::storageAPIEnabledKey(v967);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v969 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v968, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v969 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v970 = WebKit::WebPreferencesKey::storageBlockingPolicyKey(v969);
  LODWORD(v1137) = 1;
  v1138 = 2;
  v971 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v970, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v971 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v972 = WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(v971);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v973 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v972, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v973 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v974 = WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(v973);
  LOBYTE(v1137) = WebKit::defaultShouldTakeNearSuspendedAssertion((WebKit *)v974);
  v1138 = 1;
  v975 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v974, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v975 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v976 = WebKit::WebPreferencesKey::textAnimationsEnabledKey(v975);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v977 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v976, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v977 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v978 = WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(v977);
  LOBYTE(v1137) = WebKit::defaultTextRecognitionInVideosEnabled((WebKit *)v978);
  v1138 = 1;
  v979 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v978, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v979 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v980 = WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(v979);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v981 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v980, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v981 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v982 = WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(v981);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v983 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v982, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v983 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v984 = WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(v983);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v985 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v984, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v985 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v986 = WebKit::WebPreferencesKey::trackConfigurationEnabledKey(v985);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v987 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v986, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v987 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v988 = WebKit::WebPreferencesKey::trustedTypesEnabledKey(v987);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v989 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v988, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v989 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v990 = WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(v989);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v991 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v990, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v991 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v992 = WebKit::WebPreferencesKey::unifiedPDFEnabledKey(v991);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v993 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v992, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v993 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v994 = WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(v993);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v995 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v994, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v995 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v996 = WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(v995);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v997 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v996, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v997 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v998 = WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(v997);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v999 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v998, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v999 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1000 = WebKit::WebPreferencesKey::useARKitForModelKey(v999);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1001 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1000, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1001 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1002 = WebKit::WebPreferencesKey::useGiantTilesKey(v1001);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1003 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1002, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1003 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1004 = WebKit::WebPreferencesKey::userActivationAPIEnabledKey(v1003);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1005 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1004, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1005 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1006 = WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(v1005);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1007 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1006, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1007 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1008 = WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(v1007);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1009 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1008, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1009 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1010 = WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(v1009);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1011 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1010, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1011 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1012 = WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(v1011);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1013 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1012, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1013 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1014 = WebKit::WebPreferencesKey::viewTransitionsEnabledKey(v1013);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1015 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1014, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1015 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1016 = WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(v1015);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1017 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1016, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1017 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1018 = WebKit::WebPreferencesKey::visualTranslationEnabledKey(v1017);
  LOBYTE(v1137) = WebKit::defaultVisualTranslationEnabled((WebKit *)v1018);
  v1138 = 1;
  v1019 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1018, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1019 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1020 = WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(v1019);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1021 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1020, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1021 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1022 = WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(v1021);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1023 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1022, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1023 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1024 = WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(v1023);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1025 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1024, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1025 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1026 = WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(v1025);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1027 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1026, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1027 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1028 = WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(v1027);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1029 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1028, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1029 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1030 = WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(v1029);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1031 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1030, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1031 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1032 = WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(v1031);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1033 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1032, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1033 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1034 = WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(v1033);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1035 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1034, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1035 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1036 = WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(v1035);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1037 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1036, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1037 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1038 = WebKit::WebPreferencesKey::webAuthenticationEnabledKey(v1037);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1039 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1038, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1039 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1040 = WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(v1039);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1041 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1040, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1041 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1042 = WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(v1041);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1043 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1042, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1043 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1044 = WebKit::WebPreferencesKey::webLocksAPIEnabledKey(v1043);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1045 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1044, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1045 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1046 = WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(v1045);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1047 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1046, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1047 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1048 = WebKit::WebPreferencesKey::webShareEnabledKey(v1047);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1049 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1048, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1049 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1050 = WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(v1049);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1051 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1050, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1051 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1052 = WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(v1051);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1053 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1052, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1053 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1054 = WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(v1053);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1055 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1054, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1055 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1056 = WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(v1055);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1057 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1056, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1057 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1058 = WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(v1057);
  LOBYTE(v1137) = WebKit::defaultPeerConnectionEnabledAvailable((WebKit *)v1058);
  v1138 = 1;
  v1059 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1058, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1059 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1060 = WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(v1059);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1061 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1060, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1061 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1062 = WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(v1061);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1063 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1062, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1063 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1064 = WebKit::WebPreferencesKey::webGLUsingMetalKey(v1063);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1065 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1064, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1065 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1066 = WebKit::WebPreferencesKey::webGLEnabledKey(v1065);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1067 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1066, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1067 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1068 = WebKit::WebPreferencesKey::webGPUEnabledKey(v1067);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1069 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1068, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1069 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1070 = WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(v1069);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1071 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1070, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1071 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1072 = WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(v1071);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1073 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1072, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1073 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1074 = WebKit::WebPreferencesKey::webRTCAudioLatencyAdaptationEnabledKey(v1073);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1075 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1074, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1075 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1076 = WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(v1075);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1077 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1076, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1077 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1078 = WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(v1077);
  LOBYTE(v1137) = WebKit::defaultPeerConnectionEnabledAvailable((WebKit *)v1078);
  v1138 = 1;
  v1079 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1078, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1079 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1080 = WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(v1079);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1081 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1080, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1081 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1082 = WebKit::WebPreferencesKey::webRTCH264LowLatencyEncoderEnabledKey(v1081);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1083 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1082, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1083 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1084 = WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(v1083);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1085 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1084, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1085 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1086 = WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(v1085);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1087 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1086, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1087 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1088 = WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(v1087);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1089 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1088, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1089 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1090 = WebKit::WebPreferencesKey::peerConnectionEnabledKey(v1089);
  LOBYTE(v1137) = WebKit::defaultPeerConnectionEnabledAvailable((WebKit *)v1090);
  v1138 = 1;
  v1091 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1090, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1091 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1092 = WebKit::WebPreferencesKey::webRTCPlatformTCPSocketsEnabledKey(v1091);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1093 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1092, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1093 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1094 = WebKit::WebPreferencesKey::webRTCPlatformUDPSocketsEnabledKey(v1093);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1095 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1094, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1095 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1096 = WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(v1095);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1097 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1096, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1097 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1098 = WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(v1097);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1099 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1098, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1099 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1100 = WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(v1099);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1101 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1100, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1101 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1102 = WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(v1101);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1103 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1102, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1103 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1104 = WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(v1103);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1105 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1104, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1105 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1106 = WebKit::WebPreferencesKey::webTransportEnabledKey(v1105);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1107 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1106, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1107 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1108 = WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(v1107);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1109 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1108, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1109 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1110 = WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(v1109);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1111 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1110, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1111 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1112 = WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(v1111);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1113 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1112, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1113 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1114 = WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(v1113);
  LOBYTE(v1137) = WebKit::defaultWriteRichTextDataWhenCopyingOrDragging((WebKit *)v1114);
  v1138 = 1;
  v1115 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1114, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1115 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1116 = WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(v1115);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1117 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1116, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1117 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  PartyWebsiteDataRemovalLiveOnTestingEnabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(v1117);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1119 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)PartyWebsiteDataRemovalLiveOnTestingEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1119 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  PartyWebsiteDataRemovalReproTestingEnabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(v1119);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1121 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)PartyWebsiteDataRemovalReproTestingEnabledKey, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1121 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1122 = WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(v1121);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1123 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1122, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1123 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1124 = WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(v1123);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1125 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1124, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1125 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1126 = WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(v1125);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1127 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1126, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1127 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1128 = WebKit::WebPreferencesKey::httpEquivEnabledKey(v1127);
  LOBYTE(v1137) = 1;
  v1138 = 1;
  v1129 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1128, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1129 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1130 = WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(v1129);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1131 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1130, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1131 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1132 = WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(v1131);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  v1133 = WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1132, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    v1133 = (WebKit::WebPreferencesKey *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  v1134 = WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(v1133);
  LOBYTE(v1137) = 0;
  v1138 = 1;
  WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)&qword_1ECE733F0, (WTF::StringImpl **)v1134, (const WTF::StringImpl *)&v1137, (uint64_t)v1136);
  if (v1138 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E3504E10[v1138])(v1136, &v1137);
  return &qword_1ECE733F0;
}

uint64_t *WebKit::WebPreferencesKey::inspectorAttachedWidthKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key;
}

BOOL WebKit::defaultSearchInputIncrementalAttributeAndSearchEventEnabled(WebKit *this)
{
  int v1;

  {
    v1 = WebKit::defaultSearchInputIncrementalAttributeAndSearchEventEnabled(void)::newSDK;
  }
  else
  {
    v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultSearchInputIncrementalAttributeAndSearchEventEnabled(void)::newSDK = v1;
  }
  return v1 == 0;
}

uint64_t WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(WebKit *this)
{
  uint64_t result;

    return WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK != 0;
  result = WTF::linkedOnOrAfterSDKWithBehavior();
  WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK = result;
  return result;
}

uint64_t WebKit::defaultManageCaptureStatusBarInGPUProcessEnabled(WebKit *this)
{
  uint64_t isMobileSafari;

  isMobileSafari = WebCore::IOSApplication::isMobileSafari(this);
  if ((isMobileSafari & 1) != 0)
    return 0;
  else
    return WebCore::IOSApplication::isSafariViewService((WebCore::IOSApplication *)isMobileSafari) ^ 1;
}

uint64_t WebKit::defaultPassiveTouchListenersAsDefaultOnDocument(WebKit *this)
{
  uint64_t result;

    return WebKit::defaultPassiveTouchListenersAsDefaultOnDocument(void)::result != 0;
  result = WTF::linkedOnOrAfterSDKWithBehavior();
  WebKit::defaultPassiveTouchListenersAsDefaultOnDocument(void)::result = result;
  return result;
}

uint64_t WebKit::defaultCaptureAudioInGPUProcessEnabled(WebKit *this)
{
  return 1;
}

uint64_t WebKit::defaultTextAutosizingUsesIdempotentMode(WebKit *this)
{
  return PAL::currentUserInterfaceIdiomIsSmallScreen(this) ^ 1;
}

BOOL WebKit::defaultShouldTakeNearSuspendedAssertion(WebKit *this)
{
  int v1;

  {
    v1 = WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK;
  }
  else
  {
    v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK = v1;
  }
  return v1 == 0;
}

uint64_t WebKit::defaultCaptureAudioInUIProcessEnabled(WebKit *this)
{
  return 0;
}

uint64_t WebKit::defaultUseAsyncUIKitInteractions(WebKit *this)
{
  uint64_t isIBooks;

  isIBooks = WebCore::CocoaApplication::isIBooks(this);
  if ((isIBooks & 1) != 0)
    return 0;
  else
    return WebKit::isAsyncTextInputFeatureFlagEnabled((WebKit *)isIBooks);
}

uint64_t WebKit::defaultPopoverAttributeEnabled(WebKit *this)
{
  uint64_t result;

    return WebKit::defaultPopoverAttributeEnabled(void)::newSDK != 0;
  result = WTF::linkedOnOrAfterSDKWithBehavior();
  WebKit::defaultPopoverAttributeEnabled(void)::newSDK = result;
  return result;
}

BOOL WebKit::defaultShowModalDialogEnabled(WebKit *this)
{
  int v1;

  {
    v1 = WebKit::defaultShowModalDialogEnabled(void)::newSDK;
  }
  else
  {
    v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShowModalDialogEnabled(void)::newSDK = v1;
  }
  return v1 == 0;
}

uint64_t WebKit::defaultShouldPrintBackgrounds(WebKit *this)
{
  uint64_t result;

    return WebKit::defaultShouldPrintBackgrounds(void)::result != 0;
  result = WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
  WebKit::defaultShouldPrintBackgrounds(void)::result = result;
  return result;
}

uint64_t WebKit::defaultMediaSourceEnabled(WebKit *this)
{
  return PAL::deviceClassIsSmallScreen(this) ^ 1;
}

uint64_t *WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enumeratingVisibleNetworkInterfacesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::webRTCH264HardwareEncoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::cFNetworkNetworkLoaderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::blockIOKitInWebContentSandboxKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::experimentalSandboxEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::automaticLiveResizeEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::threadedScrollingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::selectionFlippingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorStartsAttachedKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorAttachmentSideKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorAttachedHeightKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::inspectorWindowFrameKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::forceCompositingModeKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::safeBrowsingEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::fasterClicksEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::vp8DecoderEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::useARKitForModelKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useARKitForModelKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useARKitForModelKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::useARKitForModelKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::pdfPluginEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::databasesEnabledKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::databasesEnabledKey(void)::key;
}

uint64_t *WebKit::WebPreferencesKey::tabsToLinksKey(WebKit::WebPreferencesKey *this)
{
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  return &WebKit::WebPreferencesKey::tabsToLinksKey(void)::key;
}

unsigned int *WebKit::WebPage::updateEditorStateAfterLayoutIfEditabilityChanged(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::FocusController *v5;

  if (this[507] != 2)
  {
    v1 = (uint64_t)this;
    if (!*((_BYTE *)this + 940))
    {
      WebCore::Page::checkedFocusController(*((WebCore::Page **)this + 6));
      this = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v5);
      v2 = (uint64_t)this;
      if (this)
      {
        v3 = this + 2;
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
      }
      if (v5)
      {
        if (!*(_DWORD *)v5)
        {
          __break(0xC471u);
          JUMPOUT(0x196C671C0);
        }
        --*(_DWORD *)v5;
      }
      if (this)
      {
        if (*(_DWORD *)(v1 + 2028) != WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(*(_QWORD *)(*((_QWORD *)this + 37) + 3064) + 56)))
          WebKit::WebPage::scheduleFullEditorStateUpdate((_BYTE *)v1);
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
      }
    }
  }
  return this;
}

void sub_196C673AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebURLSchemeHandlerCocoa::create@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebURLSchemeHandlerCocoa::WebURLSchemeHandlerCocoa(v4, a1);
  *a2 = v4;
  return result;
}

void sub_196C6743C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebURLSchemeHandlerCocoa::WebURLSchemeHandlerCocoa(uint64_t a1, const void *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E34CAF68;
  *(_QWORD *)(a1 + 48) = a2;
  if (a2)
    CFRetain(a2);
  return a1;
}

void sub_196C674A4(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebURLSchemeHandler *v2;

  WebKit::WebURLSchemeHandler::~WebURLSchemeHandler(v2, a2);
  _Unwind_Resume(a1);
}

void sub_196C67518(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196C67944(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PageClientImpl::userInterfaceLayoutDirection(id *this)
{
  id WeakRetained;
  const void *v2;
  _BOOL8 v3;

  WeakRetained = objc_loadWeakRetained(this + 2);
  if (!WeakRetained)
    return 0;
  v2 = WeakRetained;
  v3 = objc_msgSend(MEMORY[0x1E0CEABB0], "userInterfaceLayoutDirectionForSemanticContentAttribute:", objc_msgSend(WeakRetained, "semanticContentAttribute")) != 0;
  CFRelease(v2);
  return v3;
}

void sub_196C679D0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_196C68604(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196C6878C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::supportedRichTextPasteboardTypesForPasteConfiguration(WebKit *this)
{
  id result;
  id v2;

  if (byte_1EE341A53 == 1)
    return (id)qword_1EE341A60;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v2, "addObject:", objc_msgSend((id)*MEMORY[0x1E0CEC658], "identifier"));
  objc_msgSend(v2, "addObjectsFromArray:", WebKit::supportedPlainTextPasteboardTypes((WebKit *)objc_msgSend(v2, "addObjectsFromArray:", *MEMORY[0x1E0CEBA00])));
  result = v2;
  qword_1EE341A60 = (uint64_t)v2;
  byte_1EE341A53 = 1;
  return result;
}

void sub_196C68BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WebKit::SmartMagnificationController *WebKit::SmartMagnificationController::SmartMagnificationController(WebKit::SmartMagnificationController *this, WKContentView *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v8;
  _QWORD v9[2];

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34CD958;
  v4 = -[WKContentView page](a2, "page");
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = a2;
  v5 = *(_QWORD *)(v4[4] + 1896);
  v6 = (uint64_t *)(v4[26] + 160);
  v9[0] = 137;
  v9[1] = v5;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v6, (unsigned __int8 *)v9, (uint64_t)this, &v8);
  return this;
}

void sub_196C68C68(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;

  *v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

WebKit *WebKit::WebProcessProxy::updateTextCheckerState(WebKit *this)
{
  uint64_t v1;
  uint64_t v2;
  __int16 *v3;

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 17);
  if (v2 && *(_BYTE *)(v2 + 104) || *((_QWORD *)this + 18))
  {
    v3 = WebKit::mutableState(this);
    return (WebKit *)WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetTextCheckerState>(v1, (_BYTE **)&v3, 0, 0);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetTextCheckerState>(uint64_t a1, _BYTE **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2647;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = *a2;
  LOBYTE(a2) = **a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = (char)a2;
  LOBYTE(v9) = v9[1];
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = (char)v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::LegacyCustomProtocolManager::registerProtocolClass(WebKit::LegacyCustomProtocolManager *this, NSURLSessionConfiguration *a2)
{
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = objc_opt_class();
  return -[NSURLSessionConfiguration setProtocolClasses:](a2, "setProtocolClasses:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1));
}

id WebKit::supportedPlainTextPasteboardTypes(WebKit *this)
{
  id result;
  id v2;

  if (byte_1EE341A55 == 1)
    return (id)qword_1EE341A98;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", WebCore::PasteboardCustomData::cocoaType((WebCore::PasteboardCustomData *)v2)));
  objc_msgSend(v2, "addObject:", objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier"));
  objc_msgSend(v2, "addObjectsFromArray:", *MEMORY[0x1E0CEBA08]);
  result = v2;
  qword_1EE341A98 = (uint64_t)v2;
  byte_1EE341A55 = 1;
  return result;
}

void sub_196C6A614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_196C6A874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,objc_class  {objcproto24WKWebViewContentProvider}*>,WTF::KeyValuePairKeyExtractor<objc_class  {objcproto24WKWebViewContentProvider}*>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,objc_class  {objcproto24WKWebViewContentProvider},WTF::KeyValuePairKeyExtractor<objc_class  {objcproto24WKWebViewContentProvider}*>,WTF::HashTraits<WTF::String>,WTF::HashMap<objc_class  {objcproto24WKWebViewContentProvider}>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  const WTF::StringImpl *v7;
  uint64_t i;
  WTF::ASCIICaseInsensitiveHash **v9;
  WTF::ASCIICaseInsensitiveHash *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  WTF::StringImpl *v18;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (WTF::ASCIICaseInsensitiveHash **)(v2 + 16 * i);
      v10 = *v9;
      if (*v9 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = WTF::ASCIICaseInsensitiveHash::hash(v10, v7);
          v14 = 0;
          do
          {
            v15 = v13 & v12;
            v13 = ++v14 + v15;
          }
          while (*(_QWORD *)(v11 + 16 * v15));
          v16 = (_QWORD *)(v11 + 16 * v15);
          *v16 = 0;
          v17 = *(_OWORD *)v9;
          *v9 = 0;
          *(_OWORD *)v16 = v17;
          v18 = *v9;
          *v9 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v7);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

uint64_t WebCore::ResourceRequestBase::RequestData::operator=(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, (WTF::StringImpl *)a2);
  WTF::URL::operator=(a1 + 40, (WTF::StringImpl *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 88), (WTF::StringImpl *)(a2 + 88));
  WebCore::HTTPHeaderMap::operator=(a1 + 96, (uint64_t *)(a2 + 96));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 128), (_DWORD *)(a2 + 128));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  return a1;
}

void WebKit::NetworkResourceLoader::didRetrieveCacheEntry(uint64_t a1, WTF::StringImpl **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  const void *v13;
  uint64_t v14;
  WebKit::NetworkLoadChecker *v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WebKit::NetworkCache::Entry *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  CFTypeRef v38;
  CFTypeRef v39;
  NSObject *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  _QWORD *v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  void *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  int v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  int v71;
  _BOOL4 v72;
  WebKit::NetworkCache::Entry *v73;
  uint8_t v74[4];
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  _BOOL4 v85;
  __int16 v86;
  int v87;
  __int16 v88;
  _BOOL4 v89;
  _BYTE v90[22];
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  _BYTE v96[14];
  __int16 v97;
  int v98;
  CFTypeRef v99;
  int v100;
  char v101;
  CFTypeRef v102;
  char v103;
  uint8_t buf[4];
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  _BOOL4 v115;
  __int16 v116;
  int v117;
  __int16 v118;
  _BOOL4 v119;
  CFTypeRef cf;
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(_QWORD *)(a1 + 3032);
    v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    v10 = *(unsigned __int8 *)(a1 + 3072);
    v11 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    v105 = a1;
    v106 = 2048;
    v107 = v5;
    v108 = 2048;
    v109 = v6;
    v110 = 2048;
    v111 = v7;
    v112 = 2048;
    v113 = v8;
    v114 = 1024;
    v115 = v9;
    v116 = 1024;
    v117 = v10;
    v118 = 1024;
    v119 = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry:", buf, 0x46u);
  }
  v12 = *a2;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf, (WTF::StringImpl *)((char *)*a2 + 80));
  v13 = (const void *)*((_QWORD *)v12 + 40);
  cf = v13;
  if (v13)
    CFRetain(v13);
  v121 = *((_BYTE *)v12 + 328);
  v14 = *(_QWORD *)(a1 + 4792);
  if (!v14 || *(_BYTE *)(v14 + 185) || WebCore::ContentFilter::continueAfterResponseReceived())
  {
    if (*(_BYTE *)(a1 + 315) == 1)
      WebKit::NetworkResourceLoader::didReceiveMainResourceResponse((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf);
    WebKit::NetworkResourceLoader::initializeReportingEndpoints((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf);
    if (*(_BYTE *)(a1 + 315) == 1
      && WebKit::NetworkResourceLoader::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions((const WebCore::SecurityOrigin ***)a1, (const WebCore::ResourceResponse *)buf))
    {
      v40 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
      {
LABEL_45:
        WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)v90, a1, (uint64_t)buf);
        WebCore::ResourceResponse::operator=((uint64_t)buf, (uint64_t)v90);
        WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v90, v41);
        *(_QWORD *)v90 = buf;
        IPC::MessageSender::send<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied>(a1 + 16, (WebCore::ResourceResponseBase **)v90);
        goto LABEL_32;
      }
    }
    else
    {
      v15 = *(WebKit::NetworkLoadChecker **)(a1 + 4304);
      if (v15)
      {
        WebKit::NetworkLoadChecker::validateResponse(v15, (const WebCore::ResourceRequest *)(a1 + 168), (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)buf, (uint64_t)v90);
        if ((_BYTE)v98)
        {
          v42 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
          {
            v52 = *(_QWORD *)(a1 + 80);
            v53 = *(_QWORD *)(a1 + 88);
            v54 = *(_QWORD *)(a1 + 96);
            v55 = *(_QWORD *)(a1 + 3032);
            v56 = *(unsigned __int8 *)(a1 + 315) == 1;
            v57 = *(unsigned __int8 *)(a1 + 3072);
            v58 = *(_QWORD *)(a1 + 4152) != 0;
            *(_DWORD *)v74 = 134219776;
            v75 = a1;
            v76 = 2048;
            v77 = v52;
            v78 = 2048;
            v79 = v53;
            v80 = 2048;
            v81 = v54;
            v82 = 2048;
            v83 = v55;
            v84 = 1024;
            v85 = v56;
            v86 = 1024;
            v87 = v57;
            v88 = 1024;
            v89 = v58;
            _os_log_error_impl(&dword_196BCC000, v42, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Failing load due to NetworkLoadChecker::validateResponse", v74, 0x46u);
          }
          WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v90);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v90, v43);
          goto LABEL_32;
        }
        v17 = v99;
        v99 = 0;
        if (v17)
          CFRelease(v17);
        v18 = *(WTF::StringImpl **)&v96[4];
        *(_QWORD *)&v96[4] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = *(WTF::StringImpl **)&v90[8];
        *(_QWORD *)&v90[8] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v16);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *(WTF::StringImpl **)v90;
        *(_QWORD *)v90 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v16);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceResponse *)buf, v90);
      if (!v101)
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v90, v21);
        WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)v90, a1, (uint64_t)buf);
        WebCore::ResourceResponseBase::operator=((uint64_t)buf, (uint64_t)v90);
        v23 = v102;
        v102 = 0;
        v24 = cf;
        cf = v23;
        if (v24)
        {
          CFRelease(v24);
          v39 = v102;
          v121 = v103;
          v102 = 0;
          if (v39)
            CFRelease(v39);
        }
        else
        {
          v121 = v103;
          v102 = 0;
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v90, v22);
        v25 = *(_QWORD *)(a1 + 4152);
        if (v25)
        {
          WebCore::ResourceResponse::operator=(v25 + 208, (uint64_t)buf);
          v45 = *(_QWORD **)(a1 + 4152);
          v46 = (unsigned int **)*a2;
          v47 = (unsigned int *)*((_QWORD *)*a2 + 70);
          if (v47 || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord(v46), (v47 = v46[70]) != 0))
          {
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
          }
          WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v90);
          WebKit::sendReplyToSynchronousRequest(v45, (WebCore::FragmentedSharedBuffer *)v47, (__int128 *)v90);
          WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v90, v49);
          if (v47)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v50);
        }
        else
        {
          v26 = *(unsigned __int8 *)(a1 + 315);
          v27 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v28 = *(_QWORD *)(a1 + 80);
            v29 = *(_QWORD *)(a1 + 88);
            v30 = *(_QWORD *)(a1 + 96);
            v31 = *(_QWORD *)(a1 + 3032);
            v32 = *(unsigned __int8 *)(a1 + 3072);
            *(_DWORD *)v90 = 134220032;
            *(_QWORD *)&v90[4] = a1;
            *(_WORD *)&v90[12] = 2048;
            *(_QWORD *)&v90[14] = v28;
            v91 = 2048;
            v92 = v29;
            v93 = 2048;
            v94 = v30;
            v95 = 2048;
            *(_QWORD *)v96 = v31;
            *(_WORD *)&v96[8] = 1024;
            *(_DWORD *)&v96[10] = v26 == 1;
            v97 = 1024;
            v98 = v32;
            LOWORD(v99) = 1024;
            *(_DWORD *)((char *)&v99 + 2) = 0;
            HIWORD(v99) = 1024;
            v100 = *(_DWORD *)&v96[10];
            _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Sending WebResourceLoader::DidReceiveResponse IPC (needsContinueDidReceiveResponseMessage=%d)", v90, 0x4Cu);
          }
          WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup((WebCore::ResourceResponse *)a1, (WebCore::ResourceResponseBase *)buf, *((_BYTE *)*a2 + 760), v26 == 1);
          if (v26 == 1)
          {
            WebCore::ResourceResponse::operator=(a1 + 3872, (uint64_t)buf);
            v51 = *a2;
            *(_BYTE *)(a1 + 4904) = *((_BYTE *)*a2 + 760);
            *a2 = 0;
            std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 4296), v51);
            goto LABEL_32;
          }
          v33 = *a2;
          *a2 = 0;
          v73 = v33;
          WebKit::NetworkResourceLoader::sendResultForCacheEntry(a1, &v73);
          if (v33)
          {
            WebKit::NetworkCache::Entry::~Entry(v33, v34);
            WTF::fastFree(v35, v36);
          }
        }
        WebKit::NetworkResourceLoader::cleanup(a1, 1);
        goto LABEL_32;
      }
      v40 = off_1ECE713E8;
      if (!os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      v59 = *(_QWORD *)(a1 + 80);
      v60 = *(_QWORD *)(a1 + 88);
      v61 = *(_QWORD *)(a1 + 96);
      v62 = *(_QWORD *)(a1 + 3032);
      v63 = *(unsigned __int8 *)(a1 + 315) == 1;
      v64 = *(unsigned __int8 *)(a1 + 3072);
      v65 = *(_QWORD *)(a1 + 4152) != 0;
      *(_DWORD *)v74 = 134219776;
      v75 = a1;
      v76 = 2048;
      v77 = v59;
      v78 = 2048;
      v79 = v60;
      v80 = 2048;
      v81 = v61;
      v82 = 2048;
      v83 = v62;
      v84 = 1024;
      v85 = v63;
      v86 = 1024;
      v87 = v64;
      v88 = 1024;
      v89 = v65;
      _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Interrupting load due to Cross-Origin-Opener-Policy", v74, 0x46u);
      if (v101)
      {
LABEL_50:
        WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)a1, (const WebCore::ResourceError *)v90);
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v90, v44);
        goto LABEL_32;
      }
      __break(1u);
    }
    v66 = *(_QWORD *)(a1 + 80);
    v67 = *(_QWORD *)(a1 + 88);
    v68 = *(_QWORD *)(a1 + 96);
    v69 = *(_QWORD *)(a1 + 3032);
    v70 = *(unsigned __int8 *)(a1 + 315) == 1;
    v71 = *(unsigned __int8 *)(a1 + 3072);
    v72 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)v90 = 134219776;
    *(_QWORD *)&v90[4] = a1;
    *(_WORD *)&v90[12] = 2048;
    *(_QWORD *)&v90[14] = v66;
    v91 = 2048;
    v92 = v67;
    v93 = 2048;
    v94 = v68;
    v95 = 2048;
    *(_QWORD *)v96 = v69;
    *(_WORD *)&v96[8] = 1024;
    *(_DWORD *)&v96[10] = v70;
    v97 = 1024;
    v98 = v71;
    LOWORD(v99) = 1024;
    *(_DWORD *)((char *)&v99 + 2) = v72;
    _os_log_error_impl(&dword_196BCC000, v40, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didRetrieveCacheEntry: Stopping load due to CSP Frame-Ancestors or X-Frame-Options", v90, 0x46u);
    goto LABEL_45;
  }
LABEL_32:
  v38 = cf;
  cf = 0;
  if (v38)
    CFRelease(v38);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v37);
}

uint64_t WebCore::ResourceResponseBase::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  WTF::URL::operator=(a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(a2 + 40));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 64));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 72));
  v4 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(*(WebCore::ExceptionData **)(a1 + 80), (WebCore::ExceptionData *)(*(_QWORD *)(a1 + 80) + 16 * v4));
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 80, (uint64_t *)(a2 + 80));
  v5 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v5)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WebCore::HTTPHeaderMap::UncommonHeader **)(a1 + 96), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(_QWORD *)(a1 + 96) + 16 * v5));
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 96, (uint64_t *)(a2 + 96));
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v8 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v7;
  if (v8)
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v8, v6);
  std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CertificateInfo,false>>(a1 + 120, (uint64_t *)(a2 + 120));
  v9 = *(_OWORD *)(a2 + 136);
  v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  v13 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  return a1;
}

{
  __int128 v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __int16 v12;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(a2 + 40));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 64));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 72));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(a1 + 80, a2 + 80);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 96, a2 + 96);
  v6 = *(unsigned int **)(a2 + 112);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v8)
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v8, v5);
  std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::CertificateInfo,false> const&>(a1 + 120, a2 + 120);
  v9 = *(_WORD *)(a2 + 136);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_WORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  *(_OWORD *)(a1 + 200) = v11;
  v12 = *(_WORD *)(a2 + 232);
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
  *(_WORD *)(a1 + 232) = v12;
  return a1;
}

uint64_t WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(uint64_t a1, uint64_t *a2)
{
  WTF::FastMalloc *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  v3 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(a1, v3);
  v7 = 0;
  *(_QWORD *)a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v8);
  v6 = 0;
  *(_DWORD *)(a1 + 8) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v8 + 2, &v6);
  v5 = 0;
  result = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v8 + 3, &v5);
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

WTF::StringImpl *WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse *a1, WebCore::ResourceResponseBase *a2, char a3, int a4)
{
  uint64_t v8;
  double v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  const WTF::URL *v25;
  uint64_t v26;
  IPC::Encoder *v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  NSObject *v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  int v47;
  _BOOL4 v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  _BYTE *v55;
  IPC::Encoder *v56;
  _BYTE buf[22];
  __int16 v58;
  WTF::StringImpl **v59;
  _BYTE v60[10];
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  _BOOL4 v64;
  __int16 v65;
  int v66;
  __int16 v67;
  _BOOL4 v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a1 + 482);
  if (!*(_BYTE *)(v8 + 313) && *((_BYTE *)a1 + 4784) && *((_BYTE *)a1 + 4777))
  {
    if (*((_BYTE *)a1 + 4752) == 2)
      v19 = 2;
    else
      v19 = 1;
    WebKit::NetworkConnectionToWebProcess::takeNetworkResourceLoader(v8, *((_QWORD *)a1 + 379), &v52);
    if (v52)
    {
      v20 = *(_QWORD *)(v52 + 4400);
      v51 = v20;
      v21 = *((_QWORD *)a1 + 482);
      v22 = *(_QWORD *)(v21 + 72);
      *(_QWORD *)buf = *(_QWORD *)(v21 + 80);
      v23 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v22 + 208), buf);
      if (v23)
      {
        *(_QWORD *)buf = v52;
        v52 = 0;
        WebKit::NetworkSession::addLoaderAwaitingWebProcessTransfer(v23, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(*(_QWORD *)buf + 8), v24);
      }
      v25 = (const WTF::URL *)WebCore::ResourceResponseBase::url(a2);
      WebCore::RegistrableDomain::RegistrableDomain(&v50, v25);
      v26 = *((_QWORD *)a1 + 482);
      v28 = *(_QWORD *)(v26 + 72);
      v27 = *(IPC::Encoder **)(v26 + 80);
      v29 = *(os_unfair_lock_s **)(v28 + 32);
      v30 = *((_QWORD *)a1 + 436);
      *(_QWORD *)buf = (char *)a1 + 80;
      *(_QWORD *)&buf[8] = v30;
      buf[16] = v19;
      v59 = &v50;
      *(_QWORD *)v60 = &v51;
      v53 = v20;
      v56 = v27;
      v31 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v28 + 208), &v56);
      if (v31)
      {
        v32 = v31;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v31 + 8), v31);
        v33 = *(unsigned int **)(v32 + 8);
        if (v33)
        {
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
        }
      }
      else
      {
        v33 = 0;
      }
      v54 = (WTF *)v33;
      IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::TriggerBrowsingContextGroupSwitchForNavigation,WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup(WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL)::$_0>(v29, (uint64_t **)buf, &v53);
      v38 = (unsigned int *)v54;
      v54 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((WTF *)v38, v37);
        }
      }
      result = v50;
      v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v37);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v35 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_FAULT))
      {
        v42 = *((_QWORD *)a1 + 10);
        v43 = (WTF::StringImpl **)*((_QWORD *)a1 + 11);
        v44 = *((_QWORD *)a1 + 12);
        v45 = *((_QWORD *)a1 + 379);
        v46 = *((unsigned __int8 *)a1 + 315) == 1;
        v47 = *((unsigned __int8 *)a1 + 3072);
        v48 = *((_QWORD *)a1 + 519) != 0;
        v49 = *((unsigned __int8 *)a1 + 4329);
        *(_DWORD *)buf = 134220544;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v42;
        v58 = 2048;
        v59 = v43;
        *(_WORD *)v60 = 2048;
        *(_QWORD *)&v60[2] = v44;
        v61 = 2048;
        v62 = v45;
        v63 = 1024;
        v64 = v46;
        v65 = 1024;
        v66 = v47;
        v67 = 1024;
        v68 = v48;
        v69 = 2048;
        v70 = v45;
        v71 = 1024;
        v72 = v49;
        v73 = 1024;
        v74 = a4;
        _os_log_fault_impl(&dword_196BCC000, v35, OS_LOG_TYPE_FAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup: Failed to find loader with identifier %llu, m_isKeptAlive=%d, needsContinueDidReceiveResponseMessage=%d", buf, 0x5Cu);
      }
      WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)buf, a1, (uint64_t)a2);
      v53 = (uint64_t)a2;
      LOBYTE(v54) = a3;
      BYTE1(v54) = a4;
      v55 = buf;
      IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResponse>((uint64_t)a1 + 16, (uint64_t)&v53);
      result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v36);
    }
    v41 = v52;
    v52 = 0;
    if (v41)
      return (WTF::StringImpl *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v41 + 8), (WTF::StringImpl *)v37);
  }
  else
  {
    v9 = WebKit::NetworkResourceLoader::computeResponseMetrics((WebKit::NetworkResourceLoader *)buf, a1, (uint64_t)a2);
    v53 = (uint64_t)a2;
    LOBYTE(v54) = a3;
    BYTE1(v54) = a4;
    v55 = buf;
    v11 = *((_QWORD *)a1 + 2);
    v10 = (char *)a1 + 16;
    v12 = (*(uint64_t (**)(char *, double))(v11 + 56))(v10, v9);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 2669;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v56 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v13, (uint64_t)&v53);
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v56, 0);
    v15 = v56;
    v56 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v16, v17);
    }
    return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, (WTF::StringImpl *)v14);
  }
  return result;
}

double WebKit::NetworkResourceLoader::computeResponseMetrics(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  double result;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v28;

  if (*((_BYTE *)a2 + 3073))
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 128) = 0;
  }
  else
  {
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v19);
    v6 = *(_QWORD *)(a3 + 112);
    if (v6)
    {
      v7 = *(_OWORD *)(v6 + 40);
      v8 = *(_OWORD *)(v6 + 56);
      v9 = *(_OWORD *)(v6 + 72);
      v24 = *(_QWORD *)(v6 + 88);
      v10 = *(_OWORD *)(v6 + 24);
      v19 = *(_OWORD *)(v6 + 8);
      v20 = v10;
      v22 = v8;
      v23 = v9;
      v21 = v7;
      WTF::String::operator=(&v25, (WTF::StringImpl *)(v6 + 96));
      v11 = *(_OWORD *)(v6 + 104);
      v12 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(v6 + 128);
      v27 = *(_QWORD *)(v6 + 120);
      v26 = v11;
      if (v12)
        ++*(_DWORD *)v12;
      v13 = v28;
      v28 = v12;
      if (v13)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
    }
    LOWORD(v26) = *((_DWORD *)a2 + 1036);
    v14 = v22;
    *((_OWORD *)this + 2) = v21;
    *((_OWORD *)this + 3) = v14;
    *((_OWORD *)this + 4) = v23;
    v15 = v20;
    *(_OWORD *)this = v19;
    *((_OWORD *)this + 1) = v15;
    v16 = v25;
    *((_QWORD *)this + 10) = v24;
    *((_QWORD *)this + 11) = v16;
    result = *(double *)&v26;
    *((_OWORD *)this + 6) = v26;
    v18 = v28;
    *((_QWORD *)this + 14) = v27;
    *((_QWORD *)this + 15) = v18;
    *((_BYTE *)this + 128) = 1;
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceResponse const&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, *(WebCore::ResourceResponseBase **)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  return IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::NetworkLoadMetrics> const&>(a1, *(_QWORD *)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(IPC::Encoder *a1, WebCore::ResourceResponseBase *this)
{
  WTF::StringImpl *v3;
  _BYTE v4[288];

  WebCore::ResourceResponseBase::getResponseData(this);
  IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceResponseData>>(a1, (uint64_t)v4);
  if (v4[280])
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v4, v3);
}

void sub_196C6BB30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a44)
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&a9, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceResponseData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  IPC::Encoder *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 280);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 280))
    {
      IPC::ArgumentCoder<WebCore::ResourceResponseData,void>::encode(a1, a2);
    }
    else
    {
      v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebCore::CertificateInfo>,void>::encode<IPC::Encoder,std::optional<WebCore::CertificateInfo> const&>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebCore::CertificateInfo>,void>::encode<IPC::Encoder,std::optional<WebCore::CertificateInfo> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  WebKit::NetworkResourceLoader *v6;
  const WebCore::ResourceResponse *v7;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      IPC::ArgumentCoder<__SecTrust *,void>::encode((uint64_t)a1);
    }
    else
    {
      v6 = (WebKit::NetworkResourceLoader *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::NetworkResourceLoader::initializeReportingEndpoints(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

WTF::StringImpl *WebKit::NetworkResourceLoader::initializeReportingEndpoints(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  const WTF::String *v6;
  const WTF::URL *v7;
  WTF *v8;
  unsigned int v9;
  WTF::StringImpl *v10;

  WebCore::ResourceResponseBase::httpHeaderField();
  result = v10;
  if (v10)
  {
    if (!*((_DWORD *)v10 + 1))
    {
      v10 = 0;
LABEL_4:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      *(_DWORD *)result -= 2;
      return result;
    }
    v6 = (const WTF::String *)WebCore::ResourceResponseBase::url(a2);
    WebCore::ReportingScope::parseReportingEndpointsFromHeader((WebCore::ReportingScope *)&v10, v6, v7);
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::operator=((uint64_t)this + 4912, (uint64_t *)&v8);
    if (v8)
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v8, (WTF::StringImpl *)v9);
    result = v10;
    v10 = 0;
    if (result)
      goto LABEL_4;
  }
  return result;
}

double WebKit::NetworkResourceLoader::sanitizeResponseIfPossible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  const WTF::URL *v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)(a2 + 3312))
  {
    v6 = *(unsigned int **)(*(_QWORD *)(a2 + 3856) + 72);
    v7 = v6 + 30;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *(void **)(a2 + 88);
    v10 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 168));
    if (*(_BYTE *)(a2 + 3072))
      v11 = 0;
    else
      v11 = *(_BYTE *)(a2 + 3073) == 2;
    if (v11)
      v12 = WebKit::NetworkProcess::shouldDisableCORSForRequestTo((uint64_t)v6, v9, v10) ^ 1;
    else
      v12 = 1;
    if (v6)
    {
      do
      {
        v13 = __ldaxr(v7);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v7));
      if (!v14)
      {
        atomic_store(1u, v6 + 30);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    if (v12)
      WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields();
    WTF::URL::URL(a1, (uint64_t *)a3);
    v15 = *(_QWORD *)(a3 + 40);
    v16 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v16;
    v17 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a1 + 56) = v17;
    v18 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a1 + 72) = v18;
    *(_QWORD *)&v18 = *(_QWORD *)(a3 + 88);
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a1 + 88) = v18;
    v19 = *(_QWORD *)(a3 + 96);
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a1 + 96) = v19;
    *(_QWORD *)&v18 = *(_QWORD *)(a3 + 104);
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a1 + 104) = v18;
    v20 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a1 + 112) = v20;
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    if (*(_BYTE *)(a3 + 128))
    {
      v21 = *(_QWORD *)(a3 + 120);
      *(_QWORD *)(a3 + 120) = 0;
      *(_QWORD *)(a1 + 120) = v21;
      *(_BYTE *)(a1 + 128) = 1;
    }
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a1 + 231) = *(_DWORD *)(a3 + 231);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 152);
    v22 = *(_OWORD *)(a3 + 168);
    *(_OWORD *)(a1 + 168) = v22;
    v23 = *(_QWORD *)(a3 + 240);
    *(_QWORD *)(a3 + 240) = 0;
    *(_QWORD *)(a1 + 240) = v23;
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a3 + 248);
  }
  else
  {
    *(_QWORD *)&v22 = std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1, a3).n128_u64[0];
  }
  return *(double *)&v22;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector **WebKit::NetworkLoadChecker::validateResponse@<X0>(WebKit::NetworkLoadChecker *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, WebCore::AdditionalNetworkLoadMetricsForWebInspector ***a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::EmptyOriginAccessPatterns *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int16 v18;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **result;
  WTF::StringImpl *v20;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore *v29;
  const WTF::URL *v30;
  WebCore::EmptyOriginAccessPatterns *hasHTTPHeaderField;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  _BOOL4 v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v56;
  unint64_t v57;
  __int16 v58;
  char v59;
  char v60;
  WTF::StringImpl *v61;
  _QWORD v62[2];
  const char *v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v67;

  v8 = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceResponseBase::containsInvalidHTTPHeaders((WebCore::ResourceResponseBase *)a3);
  if ((_DWORD)v8)
  {
    v29 = (WebCore *)WebCore::ResourceRequestBase::url(a2);
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WebCore::badResponseHeadersError(v29, v30);
  }
  if (*((_QWORD *)this + 58))
    *((_WORD *)a3 + 116) |= 0x40u;
  if ((*((_BYTE *)a3 + 234) & 7) == 5)
  {
    v18 = *((_WORD *)a3 + 116) | 0x300;
    goto LABEL_17;
  }
  if (*((_BYTE *)this + 17) && !*((_BYTE *)this + 448))
  {
    hasHTTPHeaderField = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceRequestBase::hasHTTPHeaderField();
    if ((_DWORD)hasHTTPHeaderField)
      *((_WORD *)a3 + 116) |= 0x80u;
    if (*((_BYTE *)this + 17) == 2)
    {
      v32 = (unsigned int *)*((_QWORD *)this + 30);
      if (v32)
      {
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
      }
      v34 = *((_QWORD *)this + 144);
      if (v34 && (v35 = *(_QWORD *)(v34 + 8)) != 0)
      {
        v37 = *(_DWORD *)(v35 - 40);
        v36 = (_DWORD *)(v35 - 40);
        *v36 = v37 + 1;
        WebKit::performCORPCheck(&v56, (_BYTE *)this + 320, (uint64_t)v32, (uint64_t)this + 160, (uint64_t)a3, 0, (WebKit::NetworkResourceLoader *)(v36 - 2));
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v36, v38);
      }
      else
      {
        WebCore::EmptyOriginAccessPatterns::singleton(hasHTTPHeaderField);
        WebKit::performCORPCheck(&v56, (_BYTE *)this + 320, (uint64_t)v32, (uint64_t)this + 160, (uint64_t)a3, 0, 0);
      }
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v32, v39);
      if (!v60)
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v40);
        v18 = (_WORD)a3[29] & 0xFCFF | 0x200;
        goto LABEL_17;
      }
      WebCore::ResourceError::ResourceError(a4, (uint64_t *)&v56);
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v41);
    }
    else
    {
      if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a3) == 304)
      {
        v18 = (_WORD)a3[29] & 0xFCFF | 0x100;
        goto LABEL_17;
      }
      v51 = (unsigned int *)*((_QWORD *)this + 30);
      if (v51)
      {
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
      }
      WebCore::passesAccessControlCheck();
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v51, v53);
      if ((_BYTE)v57)
      {
        v63 = 0;
        WebCore::ResourceErrorBase::ResourceErrorBase(a4, (_DWORD **)&v63, 0, (uint64_t)this + 160, (_DWORD **)&v56, 2, 0);
        *(_QWORD *)(a4 + 64) = 0;
        *(_BYTE *)(a4 + 72) = 1;
        v55 = (WTF::StringImpl *)v63;
        v63 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v54);
          else
            *(_DWORD *)v55 -= 2;
        }
      }
      else
      {
        *((_WORD *)a3 + 116) = (_WORD)a3[29] & 0xFCFF | 0x100;
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        WTF::URL::invalidate((WTF::URL *)(a4 + 8));
        *(_QWORD *)(a4 + 64) = 0;
        *(_QWORD *)(a4 + 48) = 0;
        *(_QWORD *)(a4 + 54) = 0;
        *(_BYTE *)(a4 + 72) = 1;
      }
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v54);
    }
  }
  else
  {
    v10 = (unsigned int *)*((_QWORD *)this + 32);
    if (!v10)
    {
LABEL_16:
      v18 = (_WORD)a3[29] & 0xFCFF;
LABEL_17:
      *((_WORD *)a3 + 116) = v18;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::URL::invalidate((WTF::URL *)(a4 + 8));
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 54) = 0;
      *(_BYTE *)(a4 + 72) = 1;
      goto LABEL_18;
    }
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    if (*((_BYTE *)this + 17))
    {
LABEL_15:
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v9);
      goto LABEL_16;
    }
    v12 = *((_QWORD *)this + 144);
    if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
    {
      v15 = *(_DWORD *)(v13 - 40);
      v14 = (_DWORD *)(v13 - 40);
      *v14 = v15 + 1;
      WebKit::performCORPCheck(&v56, (_BYTE *)this + 296, (uint64_t)v10, (uint64_t)this + 160, (uint64_t)a3, 1, (WebKit::NetworkResourceLoader *)(v14 - 2));
      WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v14, v16);
    }
    else
    {
      WebCore::EmptyOriginAccessPatterns::singleton(v8);
      WebKit::performCORPCheck(&v56, (_BYTE *)this + 296, (uint64_t)v10, (uint64_t)this + 160, (uint64_t)a3, 1, 0);
    }
    if (!v60)
    {
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v17);
      goto LABEL_15;
    }
    WebCore::ResourceError::ResourceError(a4, (uint64_t *)&v56);
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v27);
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v28);
  }
LABEL_18:
  if (*((_BYTE *)this + 1160))
  {
LABEL_31:
    v26 = a3[14];
    a3[14] = 0;
    if (v26)
    {
      *((_BYTE *)v26 + 106) |= 0x40u;
      result = a3[14];
      a3[14] = v26;
      if (result)
        return WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(result, v20);
    }
    return result;
  }
  if (!*((_QWORD *)this + 30))
    goto LABEL_82;
  WebCore::ResourceResponseBase::httpHeaderField();
  if (v67)
  {
    v21 = v67[1];
    v22 = *((unsigned int *)v67 + 1) | ((unint64_t)((*((_DWORD *)v67 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v21 = 0;
    v22 = 0x100000000;
  }
  v56 = v21;
  v57 = v22;
  v58 = 44;
  v59 = 0;
  v63 = (const char *)&v56;
  v64 = 0;
  v66 = (_DWORD)v22 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v63);
  v23 = v57;
  v20 = (WTF::StringImpl *)v64;
  if (v64 != (_DWORD)v57)
    goto LABEL_83;
  if (v66)
  {
    v24 = 1;
  }
  else
  {
LABEL_83:
    while (1)
    {
      v62[0] = WTF::StringView::substring(v63, v20, v65);
      v62[1] = v42;
      v43 = (unsigned __int8 *)WTF::StringView::trim<BOOL ()(char16_t)>((uint64_t)v62, (uint64_t (*)(_QWORD))WTF::isASCIIWhitespaceWithoutFF<char16_t>);
      v45 = v44;
      if (WTF::operator==(v43, v44, "*", 2))
        break;
      WebCore::SecurityOrigin::toString(*((WebCore::SecurityOrigin **)this + 30));
      v46 = (unint64_t)v61;
      if (v61)
      {
        v47 = (unsigned __int8 *)*((_QWORD *)v61 + 1);
        v46 = *((unsigned int *)v61 + 1);
        v48 = ((unint64_t)*((unsigned int *)v61 + 4) >> 2) & 1;
      }
      else
      {
        v47 = 0;
        v48 = 1;
      }
      v49 = WTF::operator==(v43, v45, v47, v46 | (v48 << 32));
      v50 = v61;
      v61 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v20);
        else
          *(_DWORD *)v50 -= 2;
      }
      if (!v49)
      {
        WTF::StringView::SplitResult::Iterator::operator++();
        v20 = (WTF::StringImpl *)v64;
        if (v64 != v23 || !v66)
          continue;
      }
      v24 = !v49;
      goto LABEL_25;
    }
    v24 = 0;
  }
LABEL_25:
  result = v67;
  v67 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  if (v24)
  {
LABEL_82:
    if (*((_BYTE *)this + 17) || *((_BYTE *)this + 448))
    {
      v25 = (_WORD)a3[29] & 0x300;
      *((_BYTE *)this + 1160) = ((_WORD)a3[29] & 0x300) != 0;
      if (!v25)
        return result;
    }
    else
    {
      *((_BYTE *)this + 1160) = 1;
    }
    goto LABEL_31;
  }
  return result;
}

void WebKit::NetworkCache::Entry::~Entry(WebKit::NetworkCache::Entry *this, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  void *v6;
  WTF::StringImpl *v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Entry *)((char *)this + 576), a2);
  v4 = (unsigned int *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v3);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebKit::NetworkCache::Entry *)((char *)this + 352));
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 336, v6);
  v8 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkCache::Entry *)((char *)this + 80), v7);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::NetworkSession::ensureSWServer(WebKit::NetworkSession *this)
{
  WTF::StringImpl *v3;
  char v4;
  WebKit::WebSWOriginStore *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WebKit::WebSWOriginStore *v8;
  uint64_t v9;

  if (!*((_QWORD *)this + 96))
  {
    if (*((_BYTE *)this + 760))
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)this + 93);
      if (v3)
      {
        v4 = 0;
        *(_DWORD *)v3 += 4;
      }
      else
      {
        v4 = 1;
      }
    }
    else
    {
      v3 = 0;
      v4 = 1;
    }
    v5 = (WebKit::WebSWOriginStore *)WTF::fastMalloc((WTF *)0x88);
    v8 = WebKit::WebSWOriginStore::WebSWOriginStore(v5);
    WebKit::NetworkProcess::parentProcessHasServiceWorkerEntitlement(*((WebKit::NetworkProcess **)this + 4));
    WebCore::SWServer::create();
    v7 = (_DWORD *)*((_QWORD *)this + 96);
    *((_QWORD *)this + 96) = v9;
    if (v7)
      WTF::RefCounted<WebCore::SWServer>::deref(v7);
    if (v8)
      (*(void (**)(WebKit::WebSWOriginStore *))(*(_QWORD *)v8 + 8))(v8);
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v6);
      else
        *(_DWORD *)v3 -= 2;
    }
    if ((v4 & 1) == 0)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v6);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return *((_QWORD *)this + 96);
}

uint64_t WebKit::NetworkResourceLoader::NetworkResourceLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _BYTE *v7;
  _BYTE *v8;
  uint64_t *v9;
  _QWORD *v10;
  WebKit::NetworkCache::Cache **v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit::NetworkCache::Cache *v15;
  WebKit::NetworkCache::Cache *v16;
  BOOL v17;
  char v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  __int128 v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  char v35;
  WebKit::NetworkLoadChecker *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v56;
  void *v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  WTF::StringImpl *v66;
  __int128 v67;
  __int128 v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72[2];
  _BYTE v73[16];
  WTF::StringImpl *v74;
  _BYTE v75[40];

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)a1 = off_1E34BFC90;
  *(_QWORD *)(a1 + 16) = &unk_1E34BFD88;
  *(_QWORD *)(a1 + 24) = &unk_1E34BFDD8;
  v7 = (_BYTE *)(a1 + 4704);
  v8 = (_BYTE *)(a1 + 4120);
  *(_QWORD *)(a1 + 32) = &unk_1E34BFE08;
  *(_QWORD *)(a1 + 48) = &unk_1E34BFE30;
  *(_QWORD *)(a1 + 56) = 0;
  v9 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = &unk_1E34BFE80;
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(a1 + 80, a2);
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 3856) = a3;
  *(_QWORD *)(a1 + 3864) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3872));
  *(_QWORD *)(a1 + 4112) = 0;
  *v8 = 0;
  *(_BYTE *)(a1 + 4010) = *(_BYTE *)(a1 + 4010) & 0xF1 | 4;
  *(_QWORD *)(a1 + 4152) = 0;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_DWORD *)(a1 + 4144) = 0;
  WebKit::NetworkConnectionToWebProcess::resolveBlobReferences((_QWORD *)a3, v9, a1 + 4160);
  *(_WORD *)(a1 + 4176) = 0;
  v8[58] = *(_BYTE *)(a1 + 371);
  *(_QWORD *)(a1 + 4184) = 0;
  *(_DWORD *)(a1 + 4192) = 0;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)(a1 + 4200));
  *(_QWORD *)(a1 + 4200) = off_1E34B3740;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34C01A0;
  v10[1] = WebKit::NetworkResourceLoader::bufferingTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  *(_QWORD *)(a1 + 4248) = v10;
  v11 = (WebKit::NetworkCache::Cache **)(a1 + 4256);
  *(_QWORD *)(a1 + 4320) = 0;
  *(_BYTE *)(a1 + 4288) = 0;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_OWORD *)(a1 + 4256) = 0u;
  *(_BYTE *)(a1 + 4312) = 0;
  *(_OWORD *)(a1 + 4296) = 0u;
  *((_WORD *)v8 + 104) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 3856) + 200);
  *(_QWORD *)(a1 + 4336) = 0;
  v8[224] = 0;
  v8[248] = 0;
  *(_QWORD *)(a1 + 4376) = 0;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_QWORD *)(a1 + 4400) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 4408));
  *(_QWORD *)(a1 + 4648) = 0;
  v8[536] = 0;
  v8[426] = v8[426] & 0xF1 | 4;
  *(_QWORD *)(a1 + 4664) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 4664));
  *v7 = 0;
  v7[80] = 0;
  *(_QWORD *)(a1 + 4792) = 0;
  *(_OWORD *)(a1 + 4800) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 4808));
  *(_QWORD *)(a1 + 4880) = 0;
  *(_QWORD *)(a1 + 4872) = 0;
  *(_BYTE *)(a1 + 4888) = 0;
  *(_QWORD *)(a1 + 4896) = 0;
  v7[200] = 0;
  *(_OWORD *)(a1 + 4912) = 0u;
  *(_QWORD *)(a1 + 4925) = 0;
  *(_QWORD *)(a1 + 4936) = 0;
  v12 = *(_QWORD *)(a3 + 72);
  v74 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 3856) + 80);
  v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 208), &v74);
  if (v13)
  {
    v15 = *(WebKit::NetworkCache::Cache **)(v13 + 608);
    if (v15)
      ++*(_DWORD *)v15;
    v16 = *v11;
    *v11 = v15;
    if (v16)
      WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v16, v14);
  }
  if (*a4 || *(_BYTE *)(a1 + 3312) || *(_BYTE *)(a1 + 3078))
  {
    v61 = a4;
    v17 = *(_BYTE *)(a1 + 315) == 1 && *(_DWORD *)(a1 + 3332) == 0;
    v18 = !v17;
    v19 = *(unsigned int **)(a3 + 72);
    v20 = v19 + 30;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = *(_DWORD **)(a3 + 280);
    LODWORD(v74) = *(_DWORD *)(a1 + 3072);
    *(_DWORD *)((char *)&v74 + 3) = *(_DWORD *)(a1 + 3075);
    v23 = *(_DWORD **)(a1 + 3080);
    if (v23)
      *v23 += 2;
    *(_QWORD *)v75 = v23;
    v24 = *(_OWORD *)(a1 + 3104);
    *(_OWORD *)&v75[8] = *(_OWORD *)(a1 + 3088);
    *(_OWORD *)&v75[24] = v24;
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 3856) + 80);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v72, (WTF::ASCIILiteral *)(a1 + 3280));
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v73, (WTF::ASCIILiteral *)(a1 + 3296));
    v26 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
    v27 = *(WTF::StringImpl **)v26;
    if (*(_QWORD *)v26)
      *(_DWORD *)v27 += 2;
    v69 = v27;
    v28 = *(_OWORD *)(v26 + 24);
    v70 = *(_OWORD *)(v26 + 8);
    v71 = v28;
    v29 = *(WTF::StringImpl **)(a1 + 3376);
    if (v29)
      *(_DWORD *)v29 += 2;
    v66 = v29;
    v67 = *(_OWORD *)(a1 + 3384);
    v68 = *(_OWORD *)(a1 + 3400);
    v30 = *(unsigned int **)(a1 + 120);
    if (v30)
    {
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
    v65 = (WTF *)v30;
    v32 = *(unsigned int **)(a1 + 112);
    if (v32)
    {
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v64 = (WTF *)v32;
    if (*(_DWORD *)(a1 + 3332))
    {
      v34 = **(unsigned int ***)(a1 + 3320);
      do
        v58 = __ldaxr(v34);
      while (__stlxr(v58 + 1, v34));
    }
    else
    {
      v34 = 0;
    }
    v63 = (WTF *)v34;
    WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)(a1 + 168));
    v35 = v8[208];
    v36 = (WebKit::NetworkLoadChecker *)WTF::fastMalloc((WTF *)0x490);
    WebKit::NetworkLoadChecker::NetworkLoadChecker((uint64_t)v36, (uint64_t)v19, a1, v22, (int *)&v74, v25, *(_QWORD *)(a1 + 80), v72, (uint64_t *)&v69, (uint64_t *)&v66, (uint64_t *)&v65, (uint64_t *)&v64, (uint64_t *)&v63, *(_BYTE *)(a1 + 3313), (uint64_t *)&v62, *(_BYTE *)(a1 + 3027), v60, *(_WORD *)(a1 + 3028), 0,
      v35,
      v18);
    std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)(a1 + 4304), v36);
    v38 = v62;
    v62 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (v63)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v63, v37);
    if (v64)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v64, v37);
    if (v65)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v65, v37);
    v39 = v66;
    v66 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v37);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v69;
    v69 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v37);
      else
        *(_DWORD *)v40 -= 2;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v73);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v72);
    if (*(_QWORD *)v75)
    {
      if (**(_DWORD **)v75 == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)v75, v41);
      else
        **(_DWORD **)v75 -= 2;
    }
    do
    {
      v42 = __ldaxr(v20);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v20));
    if (!v43)
    {
      atomic_store(1u, v19 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
    if (*(_BYTE *)(a1 + 3144))
    {
      v56 = *(_QWORD *)(a1 + 4304);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v74, (uint64_t *)(a1 + 3120));
      *(_DWORD *)&v75[8] = *(_DWORD *)(a1 + 3136);
      v75[12] = *(_BYTE *)(a1 + 3140);
      std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>(v56 + 264, (uint64_t *)&v74);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v57);
    }
    v44 = *(_QWORD *)(a1 + 4304);
    *(_WORD *)(v44 + 296) = *(_WORD *)(a1 + 3232);
    WTF::String::operator=((WTF::StringImpl **)(v44 + 304), (WTF::StringImpl *)(a1 + 3240));
    WTF::String::operator=((WTF::StringImpl **)(v44 + 312), (WTF::StringImpl *)(a1 + 3248));
    v45 = *(_QWORD *)(a1 + 4304);
    *(_WORD *)(v45 + 320) = *(_WORD *)(a1 + 3256);
    WTF::String::operator=((WTF::StringImpl **)(v45 + 328), (WTF::StringImpl *)(a1 + 3264));
    WTF::String::operator=((WTF::StringImpl **)(v45 + 336), (WTF::StringImpl *)(a1 + 3272));
    v46 = *(_QWORD *)(a1 + 4304);
    v47 = *(WTF::StringImpl **)(a1 + 3792);
    if (v47)
      *(_DWORD *)v47 += 2;
    v74 = v47;
    *(_OWORD *)v75 = *(_OWORD *)(a1 + 3800);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a1 + 3816);
    v48 = *(WTF::StringImpl **)(a1 + 3192);
    if (v48)
      *(_DWORD *)v48 += 2;
    v69 = v48;
    v49 = *(_OWORD *)(a1 + 3216);
    v70 = *(_OWORD *)(a1 + 3200);
    v71 = v49;
    v50 = *(_QWORD *)(a1 + 3832);
    v51 = *(_QWORD *)(a1 + 3840);
    WTF::URL::operator=(v46 + 344, (WTF::StringImpl *)&v74);
    WTF::URL::operator=(v46 + 384, (WTF::StringImpl *)&v69);
    *(_QWORD *)(v46 + 424) = v50;
    *(_BYTE *)(v46 + 432) = v51;
    v53 = v69;
    v69 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v52);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = v74;
    v74 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v52);
      else
        *(_DWORD *)v54 -= 2;
    }
    if (*v61)
    {
      v59 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x220);
      WebKit::NetworkResourceLoader::SynchronousLoadData::SynchronousLoadData((uint64_t)v59, v61);
      std::unique_ptr<WebKit::NetworkResourceLoader::SynchronousLoadData>::reset[abi:sn180100]((WTF::StringImpl **)(a1 + 4152), v59);
    }
  }
  return a1;
}

uint64_t WTF::URL::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::String::operator=((WTF::StringImpl **)a1, a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | *((_DWORD *)a2 + 2) & 1;
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) & 2) != 0));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) & 4) != 0));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0x3F | (*((_DWORD *)a2 + 2) >> 6 << 6);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  return a1;
}

uint64_t WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(uint64_t a1, uint64_t a2)
{
  uint64_t Parameters;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  Parameters = WebKit::NetworkLoadParameters::NetworkLoadParameters(a1, a2);
  *(_QWORD *)(Parameters + 2952) = *(_QWORD *)(a2 + 2952);
  *(_OWORD *)(Parameters + 2960) = 0u;
  v5 = *(_QWORD *)(a2 + 2960);
  *(_QWORD *)(a2 + 2960) = 0;
  *(_QWORD *)(Parameters + 2960) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 2968);
  *(_DWORD *)(a2 + 2968) = 0;
  *(_DWORD *)(Parameters + 2968) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 2972);
  *(_DWORD *)(a2 + 2972) = 0;
  *(_DWORD *)(Parameters + 2972) = v5;
  v6 = *(_QWORD *)(a2 + 2976);
  *(_QWORD *)(a2 + 2976) = 0;
  *(_QWORD *)(Parameters + 2976) = v6;
  *(_QWORD *)(Parameters + 2984) = *(_QWORD *)(a2 + 2984);
  v7 = *(_DWORD *)(a2 + 2992);
  *(_DWORD *)(Parameters + 2995) = *(_DWORD *)(a2 + 2995);
  *(_DWORD *)(Parameters + 2992) = v7;
  v8 = *(_QWORD *)(a2 + 3000);
  *(_QWORD *)(a2 + 3000) = 0;
  *(_QWORD *)(Parameters + 3000) = v8;
  v9 = *(_OWORD *)(a2 + 3008);
  *(_OWORD *)(Parameters + 3024) = *(_OWORD *)(a2 + 3024);
  *(_OWORD *)(Parameters + 3008) = v9;
  *(_BYTE *)(Parameters + 3040) = 0;
  *(_BYTE *)(Parameters + 3064) = 0;
  if (*(_BYTE *)(a2 + 3064))
  {
    *(_QWORD *)(Parameters + 3040) = 0;
    *(_QWORD *)(Parameters + 3048) = 0;
    v10 = *(_QWORD *)(a2 + 3040);
    *(_QWORD *)(a2 + 3040) = 0;
    *(_QWORD *)(a1 + 3040) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 3048);
    *(_DWORD *)(a2 + 3048) = 0;
    *(_DWORD *)(a1 + 3048) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 3052);
    *(_DWORD *)(a2 + 3052) = 0;
    *(_DWORD *)(a1 + 3052) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 3056);
    *(_BYTE *)(a1 + 3060) = *(_BYTE *)(a2 + 3060);
    *(_DWORD *)(a1 + 3056) = v10;
    *(_BYTE *)(a1 + 3064) = 1;
  }
  WTF::URL::URL(a1 + 3072, (uint64_t *)(a2 + 3072));
  WTF::URL::URL(a1 + 3112, (uint64_t *)(a2 + 3112));
  *(_WORD *)(a1 + 3152) = *(_WORD *)(a2 + 3152);
  v11 = *(_QWORD *)(a2 + 3160);
  *(_QWORD *)(a2 + 3160) = 0;
  *(_QWORD *)(a1 + 3160) = v11;
  v12 = *(_QWORD *)(a2 + 3168);
  *(_QWORD *)(a2 + 3168) = 0;
  *(_QWORD *)(a1 + 3168) = v12;
  *(_WORD *)(a1 + 3176) = *(_WORD *)(a2 + 3176);
  v13 = *(_QWORD *)(a2 + 3184);
  *(_QWORD *)(a2 + 3184) = 0;
  *(_QWORD *)(a1 + 3184) = v13;
  v14 = *(_QWORD *)(a2 + 3192);
  *(_QWORD *)(a2 + 3192) = 0;
  *(_QWORD *)(a1 + 3192) = v14;
  *(_OWORD *)(a1 + 3200) = 0u;
  v15 = *(_QWORD *)(a2 + 3200);
  *(_QWORD *)(a2 + 3200) = 0;
  *(_QWORD *)(a1 + 3200) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 3208);
  *(_DWORD *)(a2 + 3208) = 0;
  *(_DWORD *)(a1 + 3208) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 3212);
  *(_DWORD *)(a2 + 3212) = 0;
  *(_DWORD *)(a1 + 3212) = v15;
  *(_OWORD *)(a1 + 3216) = 0u;
  v16 = *(_QWORD *)(a2 + 3216);
  *(_QWORD *)(a2 + 3216) = 0;
  *(_QWORD *)(a1 + 3216) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 3224);
  *(_DWORD *)(a2 + 3224) = 0;
  *(_DWORD *)(a1 + 3224) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 3228);
  *(_DWORD *)(a2 + 3228) = 0;
  *(_DWORD *)(a1 + 3228) = v16;
  LOWORD(v16) = *(_WORD *)(a2 + 3232);
  *(_BYTE *)(a1 + 3234) = *(_BYTE *)(a2 + 3234);
  *(_WORD *)(a1 + 3232) = v16;
  *(_OWORD *)(a1 + 3240) = 0u;
  v17 = *(_QWORD *)(a2 + 3240);
  *(_QWORD *)(a2 + 3240) = 0;
  *(_QWORD *)(a1 + 3240) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 3248);
  *(_DWORD *)(a2 + 3248) = 0;
  *(_DWORD *)(a1 + 3248) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 3252);
  *(_DWORD *)(a2 + 3252) = 0;
  *(_DWORD *)(a1 + 3252) = v17;
  v18 = *(_OWORD *)(a2 + 3256);
  v19 = *(_OWORD *)(a2 + 3272);
  *(_BYTE *)(a1 + 3288) = *(_BYTE *)(a2 + 3288);
  *(_OWORD *)(a1 + 3256) = v18;
  *(_OWORD *)(a1 + 3272) = v19;
  WTF::URL::URL(a1 + 3296, (uint64_t *)(a2 + 3296));
  *(_QWORD *)(a1 + 3336) = *(_QWORD *)(a2 + 3336);
  WTF::URL::URL(a1 + 3344, (uint64_t *)(a2 + 3344));
  *(_WORD *)(a1 + 3384) = *(_WORD *)(a2 + 3384);
  v20 = *(_QWORD *)(a2 + 3392);
  *(_QWORD *)(a2 + 3392) = 0;
  *(_QWORD *)(a1 + 3392) = v20;
  v21 = *(_QWORD *)(a2 + 3400);
  *(_QWORD *)(a2 + 3400) = 0;
  *(_QWORD *)(a1 + 3400) = v21;
  *(_QWORD *)(a1 + 3408) = *(_QWORD *)(a2 + 3408);
  std::__optional_move_base<WebCore::NavigationRequester,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 3424), a2 + 3424);
  v22 = *(_OWORD *)(a2 + 3664);
  v23 = *(_OWORD *)(a2 + 3680);
  *(_OWORD *)(a1 + 3689) = *(_OWORD *)(a2 + 3689);
  *(_OWORD *)(a1 + 3680) = v23;
  *(_OWORD *)(a1 + 3664) = v22;
  WTF::URL::URL(a1 + 3712, (uint64_t *)(a2 + 3712));
  v24 = *(_OWORD *)(a2 + 3752);
  *(_DWORD *)(a1 + 3767) = *(_DWORD *)(a2 + 3767);
  *(_OWORD *)(a1 + 3752) = v24;
  return a1;
}

void sub_196C6D268(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WebCore::NavigationRequester *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const char ***v23;
  void *v24;
  const void *v25;
  const void *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(v2 + 3648))
    WebCore::NavigationRequester::~NavigationRequester(v9, a2);
  v11 = *(WTF::StringImpl **)(v2 + 3400);
  *(_QWORD *)(v2 + 3400) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(v2 + 3392);
  *(_QWORD *)(v2 + 3392) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v8;
  *v8 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *v7;
  *v7 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v2 + 3216));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v2 + 3200));
  v16 = *(WTF::StringImpl **)(v2 + 3192);
  *(_QWORD *)(v2 + 3192) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v2 + 3184);
  *(_QWORD *)(v2 + 3184) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)(v2 + 3168);
  *(_QWORD *)(v2 + 3168) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(WTF::StringImpl **)(v2 + 3160);
  *(_QWORD *)(v2 + 3160) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *v5;
  *v5 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *v4;
  *v4 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*(_BYTE *)(v2 + 3064))
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v15);
  v22 = *(WTF::StringImpl **)(v2 + 3000);
  *(_QWORD *)(v2 + 3000) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v15);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(const char ****)(v2 + 2976);
  *(_QWORD *)(v2 + 2976) = 0;
  if (v23)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v23);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 2960, v15);
  if (*(_BYTE *)(v2 + 2936))
  {
    v25 = *(const void **)(v2 + 2928);
    *(_QWORD *)(v2 + 2928) = 0;
    if (v25)
      CFRelease(v25);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 2888, v24);
  if (*(_BYTE *)(v2 + 2864))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)(v2 + 304));
  v26 = *(const void **)(v2 + 280);
  *(_QWORD *)(v2 + 280) = 0;
  if (v26)
    CFRelease(v26);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v2 + 88));
  v28 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v28)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v28, v27);
  v29 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v29)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v29, v27);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkLoadParameters::NetworkLoadParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  int v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 88, a2 + 88);
  v9 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 280) = v9;
  v10 = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 291) = *(_DWORD *)(a2 + 291);
  *(_DWORD *)(a1 + 288) = v10;
  std::__optional_move_base<WebKit::NavigationActionData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 304), a2 + 304);
  *(_BYTE *)(a1 + 2880) = *(_BYTE *)(a2 + 2880);
  *(_OWORD *)(a1 + 2888) = 0u;
  v11 = *(_QWORD *)(a2 + 2888);
  *(_QWORD *)(a2 + 2888) = 0;
  *(_QWORD *)(a1 + 2888) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 2896);
  *(_DWORD *)(a2 + 2896) = 0;
  *(_DWORD *)(a1 + 2896) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 2900);
  *(_DWORD *)(a2 + 2900) = 0;
  *(_DWORD *)(a1 + 2900) = v11;
  *(_BYTE *)(a1 + 2904) = *(_BYTE *)(a2 + 2904);
  *(_BYTE *)(a1 + 2912) = 0;
  *(_BYTE *)(a1 + 2936) = 0;
  if (*(_BYTE *)(a2 + 2936))
  {
    v12 = *(_QWORD *)(a2 + 2912);
    *(_BYTE *)(a1 + 2920) = *(_BYTE *)(a2 + 2920);
    *(_QWORD *)(a1 + 2912) = v12;
    v13 = *(const void **)(a2 + 2928);
    *(_QWORD *)(a1 + 2928) = v13;
    if (v13)
      CFRetain(v13);
    *(_BYTE *)(a1 + 2936) = 1;
  }
  v14 = *(_DWORD *)(a2 + 2944);
  *(_WORD *)(a1 + 2948) = *(_WORD *)(a2 + 2948);
  *(_DWORD *)(a1 + 2944) = v14;
  return a1;
}

void sub_196C6D628(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WebCore::ResourceRequestBase *v3;
  WebKit::NavigationActionData *v4;
  uint64_t v5;
  const void *v7;
  const void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v2 + 2936))
  {
    v7 = *(const void **)(v2 + 2928);
    *(_QWORD *)(v2 + 2928) = 0;
    if (v7)
      CFRelease(v7);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  if (*(_BYTE *)(v2 + 2864))
    WebKit::NavigationActionData::~NavigationActionData(v4);
  v8 = *(const void **)(v2 + 280);
  *(_QWORD *)(v2 + 280) = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v3);
  v10 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v10, v9);
  v11 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v11, v9);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = *a2 + 16 * v6;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          *v9 += 2;
        *(_QWORD *)v5 = v9;
        *(_BYTE *)(v5 + 8) = *(_BYTE *)(v7 + 8);
        v7 += 16;
        v5 += 16;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WebCore::FormData *WebKit::NetworkConnectionToWebProcess::resolveBlobReferences@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::FormData *result;
  WebCore::FormData *v15;
  WebCore::BlobRegistryImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF::RefCountedBase *v22;
  WTF::RefCountedBase *v23;
  _QWORD v24[2];
  WebCore::FormData *v25;
  char v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[32];
    v8 = *((_DWORD *)a2 + 12);
    v9 = *a2;
    v10 = a2[1];
    v11 = a2[2];
    v12 = a2[369];
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = a1;
    v28 = 2048;
    v29 = v7;
    v30 = 1024;
    v31 = v8;
    v32 = 2048;
    v33 = v9;
    v34 = 2048;
    v35 = v10;
    v36 = 2048;
    v37 = v11;
    v38 = 2048;
    v39 = v12;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::resolveBlobReferences: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", buf, 0x44u);
  }
  v13 = a1[9];
  *(_QWORD *)buf = a1[10];
  result = (WebCore::FormData *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 208), buf);
  if (result)
  {
    v15 = result;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequestBase *)(a2 + 11));
    result = v25;
    if (v25)
    {
      v16 = (WebCore::FormData *)((char *)v15 + 624);
      v17 = *((unsigned int *)v25 + 5);
      if ((_DWORD)v17)
      {
        v18 = *((_QWORD *)v25 + 1);
        v19 = 48 * v17;
        do
        {
          if (v18)
          {
            if (*(_DWORD *)(v18 + 40) == 2)
            {
              buf[0] = 0;
              BYTE2(v33) = 0;
              WebCore::BlobRegistryImpl::filesInBlob();
              WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)a3, (uint64_t)v24);
              WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v20);
              if (BYTE2(v33))
              {
                if (v31 != -1)
                  ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v31])(&v26, buf);
              }
            }
          }
          v18 += 48;
          v19 -= 48;
        }
        while (v19);
        result = v25;
      }
      WebCore::FormData::resolveBlobReferences(result, v16);
      v21 = v24[0];
      v24[0] = 0;
      *(_QWORD *)buf = v21;
      WebCore::ResourceRequestBase::setHTTPBody();
      v22 = *(WTF::RefCountedBase **)buf;
      *(_QWORD *)buf = 0;
      if (v22)
        WTF::RefCounted<WebCore::FormData>::deref(v22);
      v23 = (WTF::RefCountedBase *)v24[0];
      v24[0] = 0;
      if (v23)
        WTF::RefCounted<WebCore::FormData>::deref(v23);
      result = v25;
      v25 = 0;
      if (result)
        return (WebCore::FormData *)WTF::RefCounted<WebCore::FormData>::deref(result);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse(WebKit::NetworkResourceLoader *this@<X0>, const WebCore::ResourceResponse *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _BYTE *v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _BYTE v34[40];
  WTF::StringImpl *v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  WebKit::NetworkResourceLoader *v40;
  WTF::StringImpl *v41;
  _BYTE v42[224];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 315) == 1 && !*((_DWORD *)this + 833) && *((_BYTE *)this + 3416))
  {
    WebCore::ResourceResponseBase::httpHeaderField();
    v7 = v33;
    v33 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
      v8 = WebCore::ResourceResponseBase::url(a2);
      v9 = *(WTF::StringImpl **)v8;
      if (*(_QWORD *)v8)
        *(_DWORD *)v9 += 2;
      v33 = v9;
      v10 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)v34 = *(_OWORD *)(v8 + 8);
      *(_OWORD *)&v34[16] = v10;
      v40 = this;
      std::make_unique[abi:sn180100]<WebCore::ContentSecurityPolicy,WTF::URL,decltype(nullptr),WebKit::NetworkResourceLoader *>((uint64_t *)&v41, (uint64_t)&v33, &v40);
      v12 = v41;
      v13 = v33;
      v33 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      MEMORY[0x19AEB40D4](&v33, a2);
      WebCore::ResourceRequestBase::httpReferrer((WebKit::NetworkResourceLoader *)((char *)this + 168));
      WebCore::ContentSecurityPolicy::didReceiveHeaders();
      v15 = v41;
      v41 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
      v7 = (WTF::StringImpl *)WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v14);
    }
    else
    {
      v12 = 0;
    }
    v16 = (char *)this + 4784;
    if (!*((_BYTE *)this + 4784))
    {
      v17 = (unsigned int *)*((_QWORD *)this + 15);
      if (v17)
      {
        do
          v24 = __ldaxr(v17);
        while (__stlxr(v24 + 1, v17));
        v41 = (WTF::StringImpl *)v17;
      }
      else
      {
        WebCore::SecurityOrigin::createOpaque(v7);
      }
      v42[0] = 0;
      v43 = 0;
      if (*((_BYTE *)this + 3728))
      {
        std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>((uint64_t)v42, (uint64_t)this + 3504);
        v43 = 1;
      }
      WebCore::CrossOriginOpenerPolicyEnforcementResult::from();
      std::optional<WebCore::CrossOriginOpenerPolicyEnforcementResult>::operator=[abi:sn180100]<WebCore::CrossOriginOpenerPolicyEnforcementResult,void>((uint64_t)this + 4704, (uint64_t)&v33);
      WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult((WebCore::CrossOriginOpenerPolicyEnforcementResult *)&v33, v18);
      if (v43)
        WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)v42, v19);
      v20 = v41;
      v41 = 0;
      if (v20)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v19);
    }
    WebCore::ResourceRequestBase::httpReferrer((WebKit::NetworkResourceLoader *)((char *)this + 168));
    if (*v16)
    {
      WebCore::doCrossOriginOpenerHandlingOfResponse();
      std::__optional_storage_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>>((uint64_t)this + 4704, (uint64_t)&v33);
      std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v21);
      v23 = v41;
      v41 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (*v16)
      {
        *a3 = 0;
        a3[80] = 0;
      }
      else
      {
        WTF::String::String((uint64_t *)&v41, *MEMORY[0x1E0DD3A00], *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8));
        v25 = WebCore::ResourceResponseBase::url(a2);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v26 = v33;
        v27 = v41;
        if (v41)
          *(_DWORD *)v41 += 2;
        v33 = v27;
        v28 = *(_DWORD **)v25;
        if (*(_QWORD *)v25)
          *v28 += 2;
        *(_QWORD *)v34 = v28;
        v29 = *(_OWORD *)(v25 + 8);
        *(_OWORD *)&v34[24] = *(_OWORD *)(v25 + 24);
        *(_OWORD *)&v34[8] = v29;
        if (v26)
          *(_DWORD *)v26 += 2;
        v35 = v26;
        v36 = 0;
        v37 = 2;
        v38 = 0;
        v39 = 1;
        std::optional<WebCore::ResourceError>::optional[abi:sn180100]<WebCore::ResourceError,0>((uint64_t)a3, (uint64_t *)&v33);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v33, v30);
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v31);
          else
            *(_DWORD *)v26 -= 2;
        }
        v32 = v41;
        v41 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
      }
      if (v12)
        WebCore::ContentSecurityPolicy::operator delete((uint64_t)v12, 0xF0uLL);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a3 = 0;
    a3[80] = 0;
  }
}

uint64_t WebCore::HTTPHeaderMap::operator=(uint64_t a1, uint64_t *a2)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)a1, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 16), a2 + 2);
  return a1;
}

WTF::StringImpl *WebKit::performCORPCheck(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WebKit::NetworkResourceLoader *a7)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[10];
  char v19;

  result = (WTF::StringImpl *)WebCore::validateCrossOriginResourcePolicy();
  if (a1[80])
    return result;
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1, v11);
  if (a2[1])
    v12 = a7 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    WebCore::validateCrossOriginResourcePolicy();
    if (v19)
    {
      WebKit::contextURLforCORPViolation((WebKit *)&v17, a7);
      WebCore::sendCOEPCORPViolation();
      v16 = v17;
      v17 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v15);
  }
  if (!*a2)
  {
LABEL_9:
    *a1 = 0;
    a1[80] = 0;
    return result;
  }
  result = (WTF::StringImpl *)WebCore::validateCrossOriginResourcePolicy();
  if (!a1[80])
  {
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1, v13);
    goto LABEL_9;
  }
  if (a7)
  {
    WebKit::contextURLforCORPViolation((WebKit *)v18, a7);
    WebCore::sendCOEPCORPViolation();
    result = v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebKit::WebSWOriginStore *WebKit::WebSWOriginStore::WebSWOriginStore(WebKit::WebSWOriginStore *this)
{
  *(_QWORD *)this = off_1E3505C60;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E3505CA8;
  WebKit::SharedStringHashStore::SharedStringHashStore((uint64_t)this + 24, (uint64_t)this + 16);
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  return this;
}

uint64_t WebKit::NetworkProcess::parentProcessHasServiceWorkerEntitlement(WebKit::NetworkProcess *this)
{
  uint64_t result;
  char hasEntitlement;

  if ((WebKit::disableServiceWorkerEntitlementTestingOverride & 1) != 0)
    return 0;
  if (byte_1ECE72161 == 1)
    return _MergedGlobals_55 != 0;
  hasEntitlement = WTF::hasEntitlement();
  result = 1;
  if ((hasEntitlement & 1) == 0)
    result = WTF::hasEntitlement();
  _MergedGlobals_55 = result;
  byte_1ECE72161 = 1;
  return result;
}

void WebCore::CrossOriginOpenerPolicyEnforcementResult::~CrossOriginOpenerPolicyEnforcementResult(WebCore::CrossOriginOpenerPolicyEnforcementResult *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetMediaAccessibilityPreferences>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2642;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v13 = (IPC::Encoder *)v4;
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, *(_QWORD *)(a2 + 8));
  LOBYTE(v11) = 0;
  v12 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v13, 0, (uint64_t)&v11, 1);
  if (v12)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_196C6E2E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  int v21;
  int v22;
  char v23;
  char v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  __int16 v30;
  int v31;
  char *v32;
  __int16 v33;
  int v34;
  char *v35;
  uint64_t v36;
  WebCore::ResourceRequest *v37;
  _Unwind_Exception *v39;
  WTF::RefCountedBase *v40;
  WTF::RefCountedBase *v41;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 2);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 3);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(unsigned __int8 *)(a2 + 24);
  v9 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_24;
    v10 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  }
  else
  {
    *v9 = 0;
  }
  IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(a1, a2 + 32);
  v12 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = *(_BYTE *)(a2 + 65);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 72));
  v14 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v15 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(a2 + 88));
  v16 = *(_BYTE *)(a2 + 344);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  v17 = *(_BYTE *)(a2 + 345);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v18 = *(_BYTE *)(a2 + 346);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  v19 = *(_BYTE *)(a2 + 347);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v20 = *(_BYTE *)(a2 + 348);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v21 = *(_DWORD *)(a2 + 376);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 352, v21);
  v22 = *(_DWORD *)(a2 + 408);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 384, v22);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 416);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 440);
  v23 = *(_BYTE *)(a2 + 464);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  v24 = *(_BYTE *)(a2 + 465);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 472));
  v25 = *(_DWORD *)(a2 + 480);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v25;
  v26 = *(unsigned __int8 *)(a2 + 536);
  v27 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v26)
  {
    *v27 = 1;
    if (!*(_BYTE *)(a2 + 536))
      goto LABEL_24;
    IPC::ArgumentCoder<WebCore::OwnerPermissionsPolicyData,void>::encode(a1, a2 + 488);
  }
  else
  {
    *v27 = 0;
  }
  v28 = *(unsigned __int8 *)(a2 + 856);
  v29 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v28)
  {
    *v29 = 1;
    if (!*(_BYTE *)(a2 + 856))
      goto LABEL_24;
    IPC::ArgumentCoder<WebCore::PrivateClickMeasurement,void>::encode(a1, a2 + 544);
  }
  else
  {
    *v29 = 0;
  }
  v30 = *(_WORD *)(a2 + 864);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v30;
  v31 = *(unsigned __int8 *)(a2 + 868);
  v32 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v31)
  {
    *v32 = 1;
    if (!*(_BYTE *)(a2 + 868))
      goto LABEL_24;
    v33 = *(_WORD *)(a2 + 866);
    *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v33;
  }
  else
  {
    *v32 = 0;
  }
  v34 = *(unsigned __int8 *)(a2 + 1536);
  v35 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v34)
  {
    *v35 = 0;
    goto LABEL_14;
  }
  *v35 = 1;
  if (!*(_BYTE *)(a2 + 1536))
  {
LABEL_24:
    v39 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    if (a2)
      WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)a2);
    if (v40)
      WTF::RefCounted<WebCore::FormData>::deref(v40);
    _Unwind_Resume(v39);
  }
  IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode(a1, a2 + 872);
LABEL_14:
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 1544));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t *)(a2 + 1840));
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 1856));
  v36 = *(_QWORD *)(a2 + 2152);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v36;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 2160));
  v37 = (WebCore::ResourceRequest *)(a2 + 2360);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, v37);
  WebCore::ResourceRequestBase::httpBody(v37);
  v41 = v40;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(a1, (_DWORD **)&v41);
  if (v40)
    WTF::RefCounted<WebCore::FormData>::deref(v40);
  return 0;
}

char *IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 16));
  IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::encode(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 640);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 656);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 672);
  return IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 688);
}

char *IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v4;
  const char **v5;
  uint64_t i;
  char v7;
  char v8;
  char v9;
  char *result;

  v4 = a2 + 4;
  v5 = (const char **)*a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 3);
  for (i = 0; i != 8; ++i)
  {
    v7 = *((_BYTE *)v4 + i);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 5);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 6);
  v8 = *((_BYTE *)a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 8);
  IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, a2 + 9);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 10);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 11);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)(a2 + 12));
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)(a2 + 14));
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)(a2 + 16));
  v9 = *((_BYTE *)a2 + 144);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v9;
  return result;
}

char *IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(v2 + 8));
  v6 = *((_DWORD *)v2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t)(v2 + 208), v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v2 + 30);
  v7 = *((_QWORD *)v2 + 31);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *((_QWORD *)v2 + 32);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)v2 + 33);
  LODWORD(v8) = *((_DWORD *)v2 + 72);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v8;
  LOBYTE(v8) = v2[292];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = v2[293];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebCore::ResourceResponseData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  LOWORD(v4) = *(_WORD *)(a2 + 64);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 80));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 88);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 104);
  IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::NetworkLoadMetrics> const&>(a1, a2 + 120);
  LOBYTE(v4) = *(_BYTE *)(a2 + 256);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 257);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 258);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 259);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 260);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 261);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 262);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::CertificateInfo>,void>::encode<IPC::Encoder,std::optional<WebCore::CertificateInfo> const&>(a1, a2 + 264);
}

char *IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::NetworkLoadMetrics> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 128);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 128))
    {
      return IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int16 v21;
  uint64_t v22;
  WTF::RefCountedBase *v23;
  void *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  char *v40;
  char v41;
  char v42;
  int v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char *result;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _Unwind_Exception *v57;
  const char **v58;
  char v59;
  char v60;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,void>::encode<IPC::Encoder,WebCore::SecurityOrigin>(a1, a2 + 4);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,void>::encode<IPC::Encoder,WebCore::SecurityOrigin>(a1, a2 + 5);
  LODWORD(v7) = *((_DWORD *)a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 11));
  v8 = *((_BYTE *)a2 + 288);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *((_BYTE *)a2 + 289);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_BYTE *)a2 + 290);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *((_BYTE *)a2 + 291);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = *((_BYTE *)a2 + 292);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = *((_BYTE *)a2 + 293);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = *((_BYTE *)a2 + 294);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = *((unsigned __int8 *)a2 + 2864);
  v16 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v15)
  {
    *v16 = 1;
    if (!*((_BYTE *)a2 + 2864))
      goto LABEL_32;
    IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(a1, (uint64_t)(a2 + 38));
  }
  else
  {
    *v16 = 0;
  }
  v17 = *((_BYTE *)a2 + 2880);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v18 = *((_BYTE *)a2 + 2904);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)a2 + 2944);
  v19 = *((_BYTE *)a2 + 2946);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v20 = *((_BYTE *)a2 + 2947);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v21 = *((_WORD *)a2 + 1474);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v21;
  v22 = a2[369];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v22;
  WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequestBase *)(a2 + 11));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::encode<IPC::Encoder,WebCore::FormData>(a1, (uint64_t *)&v58);
  v23 = (WTF::RefCountedBase *)v58;
  v58 = 0;
  if (v23)
    WTF::RefCounted<WebCore::FormData>::deref(v23);
  WebKit::NetworkResourceLoadParameters::sandboxExtensionsIfHttpBody((WebKit::NetworkResourceLoadParameters *)a2, (uint64_t)&v58);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v58);
  if (v60)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v24);
  WebKit::NetworkResourceLoadParameters::sandboxExtensionIflocalFile((WebKit::NetworkResourceLoadParameters *)a2, (uint64_t)&v58);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v58);
  if (v59)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v58);
  v25 = a2[373];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v25;
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, (uint64_t)(a2 + 374));
  v26 = *((unsigned __int8 *)a2 + 3064);
  v27 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v26)
  {
    *v27 = 1;
    if (!*((_BYTE *)a2 + 3064))
      goto LABEL_32;
    IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 380));
    v52 = *((_DWORD *)a2 + 764);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v52;
  }
  else
  {
    *v27 = 0;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 384);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 389);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, (uint64_t)(a2 + 394));
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, (uint64_t)(a2 + 397));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 400));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 402));
  v28 = *((_BYTE *)a2 + 3232);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v28;
  v29 = *((_BYTE *)a2 + 3233);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v29;
  v30 = *((_BYTE *)a2 + 3234);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v30;
  v31 = *((unsigned int *)a2 + 813);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v31;
  v32 = *((unsigned int *)a2 + 813);
  if ((_DWORD)v32)
  {
    v54 = (uint64_t *)a2[405];
    v55 = 8 * v32;
    do
    {
      v56 = *v54++;
      IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, v56);
      v55 -= 8;
    }
    while (v55);
  }
  v33 = *((_BYTE *)a2 + 3256);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v33;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 408);
  v34 = *((_BYTE *)a2 + 3288);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v34;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 412);
  v35 = *((_BYTE *)a2 + 3336);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v35;
  v36 = *((_BYTE *)a2 + 3337);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v36;
  v37 = *((_BYTE *)a2 + 3338);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v37;
  v38 = *((_DWORD *)a2 + 835);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v38;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 418);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, (uint64_t)(a2 + 423));
  v39 = a2[426];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v39;
  LODWORD(v39) = *((unsigned __int8 *)a2 + 3648);
  v40 = IPC::Encoder::grow(a1, 1uLL, 1);
  if ((_DWORD)v39)
  {
    *v40 = 1;
    if (!*((_BYTE *)a2 + 3648))
      goto LABEL_32;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 428);
    IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, a2[433]);
    IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, a2[434]);
    IPC::ArgumentCoder<WebCore::PolicyContainer,void>::encode(a1, (uint64_t)(a2 + 435));
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 445);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2 + 448);
    IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2 + 450);
    v53 = a2[452];
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v53;
    LODWORD(v53) = *((_DWORD *)a2 + 908);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v53;
  }
  else
  {
    *v40 = 0;
  }
  v41 = *((_BYTE *)a2 + 3664);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v41;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(a1, (uint64_t)(a2 + 459));
  v42 = *((_BYTE *)a2 + 3688);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v42;
  v43 = *((unsigned __int8 *)a2 + 3704);
  v44 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v43)
  {
    *v44 = 1;
    if (!*((_BYTE *)a2 + 3704))
      goto LABEL_32;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, a2 + 462);
  }
  else
  {
    *v44 = 0;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 464);
  v45 = *((unsigned __int8 *)a2 + 3760);
  v46 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v45)
  {
    *v46 = 0;
    goto LABEL_19;
  }
  *v46 = 1;
  if (!*((_BYTE *)a2 + 3760))
  {
LABEL_32:
    v57 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
    if (v59)
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v58);
    _Unwind_Resume(v57);
  }
  v47 = a2[469];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v47;
LABEL_19:
  v48 = *((_BYTE *)a2 + 3768);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v48;
  v49 = *((_BYTE *)a2 + 3769);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v49;
  v50 = *((_BYTE *)a2 + 3770);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v50;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return (char *)IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  char *result;

  v2 = a2;
  v4 = a2 + 8;
  v5 = *(_DWORD *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, v4, v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v2 + 48));
  LOBYTE(v4) = *(_BYTE *)(v2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(v2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(v2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(v2 + 59);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(v2 + 60);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(v2 + 61));
  LOBYTE(v2) = *(_BYTE *)(v2 + 63);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

char *IPC::ArgumentCoder<std::optional<unsigned short>,void>::encode<IPC::Encoder,std::optional<unsigned short> const&>(IPC::Encoder *a1, __int16 *a2)
{
  int v4;
  char *result;
  __int16 v6;
  id v7;

  v4 = *((unsigned __int8 *)a2 + 2);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*((_BYTE *)a2 + 2))
    {
      v6 = *a2;
      result = IPC::Encoder::grow(a1, 2uLL, 2);
      *(_WORD *)result = v6;
    }
    else
    {
      v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebCore::SecurityOriginData::Tuple,void>::encode(v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::SecurityOriginData::Tuple,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<std::optional<unsigned short>,void>::encode<IPC::Encoder,std::optional<unsigned short> const&>(a1, (__int16 *)(a2 + 16));
}

void IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
}

char *IPC::ArgumentCoder<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,void>::encode<IPC::Encoder,WebCore::SecurityOrigin>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    return IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, *a2);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(IPC::Encoder *a1, WebCore::ResourceRequest *this)
{
  uint64_t v4;
  int v5;
  char *result;
  char v7;
  _BYTE v8[152];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceRequest::getRequestDataToSerialize(this);
  v4 = v9;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  IPC::ArgumentCoder<std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>,void>::encode<IPC::Encoder,std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>>((char *)a1, (uint64_t)v8, v4);
  if (v9 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS6_27ResourceRequestPlatformDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v7, v8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)this + 20);
  v5 = (*((unsigned __int8 *)this + 184) >> 4) & 1;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v5;
  return result;
}

void sub_196C6F740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 152);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19ResourceRequestBase11RequestDataENS6_27ResourceRequestPlatformDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v15])(&a12, &a13);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>,void>::encode<IPC::Encoder,std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>>(char *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return IPC::ArgumentCoder<std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>,void>::encode<IPC::Encoder,std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>,0ul>(a1, a2, a3);
  if (*(_DWORD *)(a2 + 152))
    a1 = (char *)std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::ArgumentCoder<WebCore::ResourceRequestBase::RequestData,void>::encode((IPC::Encoder *)a1, (uint64_t *)a2);
}

char *IPC::ArgumentCoder<WebCore::ResourceRequestBase::RequestData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 5);
  v4 = v2[10];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 11);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 12));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 14));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 16));
  v5 = *((_BYTE *)v2 + 144);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *((_BYTE *)v2 + 145);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *((_BYTE *)v2 + 146);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *((_BYTE *)v2 + 147);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = (*((unsigned __int8 *)v2 + 148) >> 1) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  LOBYTE(v9) = *((_BYTE *)v2 + 148) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = (*((unsigned __int8 *)v2 + 148) >> 2) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = (*((unsigned __int8 *)v2 + 148) >> 3) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = (*((unsigned __int8 *)v2 + 148) >> 4) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = (*((unsigned __int8 *)v2 + 148) >> 5) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  LODWORD(v2) = (*((unsigned __int8 *)v2 + 148) >> 6) & 1;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v6);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v6 + 1);
      v6 += 2;
    }
    while (v6 != v7);
  }
}

void IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;
  __int16 v9;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_WORD **)a2;
    v7 = *(_QWORD *)a2 + 16 * v5;
    v8 = v6;
    do
    {
      v9 = *v8;
      v8 += 8;
      *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v9;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v6 + 1);
      v6 = v8;
    }
    while (v8 != (_WORD *)v7);
  }
}

void IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::encode<IPC::Encoder,WebCore::FormData>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    IPC::ArgumentCoder<WebCore::FormData,void>::encode(a1, *a2);
  }
  else
  {
    *v5 = 0;
  }
}

WTF::RefCountedBase *WebKit::NetworkResourceLoadParameters::sandboxExtensionsIfHttpBody@<X0>(WebKit::NetworkResourceLoadParameters *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::ResourceRequestBase *v3;
  WTF::RefCountedBase *result;
  void *v5;
  const char **v6;
  uint64_t v7;
  WTF::RefCountedBase *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char **v13;
  uint64_t *v14;
  uint64_t v15;
  WTF::RefCountedBase *v16;
  uint64_t v17;
  const char **v18;
  char v19;
  WTF::RefCountedBase *v20;
  uint64_t v21;

  v3 = (WebKit::NetworkResourceLoadParameters *)((char *)this + 88);
  WebCore::ResourceRequestBase::httpBody((WebKit::NetworkResourceLoadParameters *)((char *)this + 88));
  result = v20;
  v20 = 0;
  if (!result)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  WTF::RefCounted<WebCore::FormData>::deref(result);
  v20 = 0;
  v21 = 0;
  WebCore::ResourceRequestBase::httpBody(v3);
  v6 = v18;
  v18 = 0;
  if (v6)
    WTF::RefCounted<WebCore::FormData>::deref((WTF::RefCountedBase *)v6);
  v7 = *((unsigned int *)v6 + 5);
  if (!(_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_15;
  }
  v10 = v6[1];
  v11 = 48 * v7;
  do
  {
    if (v10)
    {
      if (*((_DWORD *)v10 + 10) == 1)
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)&v18);
        if (v19)
        {
          v12 = HIDWORD(v21);
          if (HIDWORD(v21) != (_DWORD)v21)
          {
            v13 = v18;
            v18 = 0;
            *((_QWORD *)v20 + HIDWORD(v21)) = v13;
            HIDWORD(v21) = v12 + 1;
LABEL_12:
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
            goto LABEL_13;
          }
          v14 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v20, HIDWORD(v21) + 1, (unint64_t)&v18);
          v15 = HIDWORD(v21);
          v16 = v20;
          v17 = *v14;
          *v14 = 0;
          *((_QWORD *)v16 + v15) = v17;
          HIDWORD(v21) = v15 + 1;
          if (v19)
            goto LABEL_12;
        }
      }
    }
LABEL_13:
    v10 += 48;
    v11 -= 48;
  }
  while (v11);
  v8 = v20;
  v9 = v21;
LABEL_15:
  v20 = 0;
  v21 = 0;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = 1;
  return (WTF::RefCountedBase *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v5);
}

void WebKit::NetworkResourceLoadParameters::sandboxExtensionIflocalFile(WebKit::NetworkResourceLoadParameters *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::ResourceRequestBase *v4;
  WTF::URL *v5;
  unint64_t v6;
  WebKit::SandboxExtensionImpl *v7;
  unint64_t v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const char **v12;
  WTF::URL *v13;
  _OWORD v14[2];
  WTF::StringImpl *v15;
  const char **v16;
  char v17;
  const char **v18;

  v4 = (WebKit::NetworkResourceLoadParameters *)((char *)this + 88);
  WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoadParameters *)((char *)this + 88));
  if ((WTF::URL::protocolIs() & 1) != 0)
  {
    WebKit::SandboxExtensionHandle::SandboxExtensionHandle(&v18);
    if (*((_BYTE *)this + 84))
    {
      v5 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
      WTF::URL::fileSystemPath(v5);
      v6 = (unint64_t)v15;
      if (v15)
      {
        v7 = (WebKit::SandboxExtensionImpl *)*((_QWORD *)v15 + 1);
        v6 = *((unsigned int *)v15 + 1);
        v8 = (unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32;
      }
      else
      {
        v7 = 0;
        v8 = 0x100000000;
      }
      if (!*((_BYTE *)this + 84))
      {
        __break(1u);
        return;
      }
      v9 = *(_OWORD *)((char *)this + 68);
      v14[0] = *(_OWORD *)((char *)this + 52);
      v14[1] = v9;
      WebKit::SandboxExtension::createHandleForReadByAuditToken(v7, (WebKit::SandboxExtensionImpl *)(v8 | v6), v14, (uint64_t)&v16);
    }
    else
    {
      v13 = (WTF::URL *)WebCore::ResourceRequestBase::url(v4);
      WTF::URL::fileSystemPath(v13);
      WebKit::SandboxExtension::createHandle(0, (uint64_t)&v16);
    }
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (v17)
    {
      WebKit::SandboxExtensionHandle::operator=(&v18, &v16);
      if (v17)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
    }
    v12 = v18;
    v18 = 0;
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = 1;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

char *IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return (char *)IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 2);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 3);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 5);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 6);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 16));
  return IPC::ArgumentCoder<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 32));
}

_QWORD *IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 16 * v6;
    do
    {
      result = IPC::Encoder::operator<<<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType> const&>(a1, v7);
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  LOBYTE(v2) = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v2;
  return a1;
}

char *IPC::ArgumentCoder<WTF::UUID,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *a2;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

char *IPC::ArgumentCoder<std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>,void>::encode<IPC::Encoder,std::variant<WebCore::ResourceRequestBase::RequestData,WebCore::ResourceRequestPlatformData>,0ul>(char *result, uint64_t a2, uint64_t a3)
{
  WebKit::NetworkCache::Entry *v3;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 152) == 1)
    {
      return IPC::ArgumentCoder<WebCore::ResourceRequestPlatformData,void>::encode((IPC::Encoder *)result, (void **)a2);
    }
    else
    {
      v3 = (WebKit::NetworkCache::Entry *)std::__throw_bad_variant_access[abi:sn180100]();
      return (char *)WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord(v3);
    }
  }
  return result;
}

void WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord(unsigned int **this)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  void *v12;
  unsigned int *v13;
  unsigned int *v14;
  _QWORD v15[3];
  char v16;

  WebKit::NetworkCache::Entry::shareableResourceHandle((WebKit::NetworkCache::Entry *)this, v15);
  if (!v16)
    goto LABEL_2;
  WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
  v10 = (uint64_t)v14;
  v14 = 0;
  v11 = this[70];
  this[70] = (unsigned int *)v10;
  if (v11)
  {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
    v13 = v14;
    v14 = 0;
    if (v13)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v12);
    v10 = (uint64_t)this[70];
  }
  if (v10)
    v2 = 0;
  else
LABEL_2:
    v2 = 1;
  if (v16)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v15);
  if (v2)
  {
    v15[0] = WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)(this + 86));
    v15[1] = v3;
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v14);
    v5 = (uint64_t)v14;
    v14 = 0;
    v6 = this[70];
    this[70] = (unsigned int *)v5;
    if (v6)
    {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v4);
      v8 = v14;
      v14 = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
    }
  }
}

void WebKit::NetworkResourceLoader::sendResultForCacheEntry(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::NetworkCache::Entry *v14;
  uint64_t v15;
  unsigned int v16;
  WebCore::ContentFilter *v17;
  void *v18;
  WebCore::ContentFilter *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const WTF::URL *v23;
  WebCore::FragmentedSharedBuffer *v24;
  void *v25;
  char v26;
  unsigned int *v27;
  WebCore::ContentFilter *v28;
  const WTF::URL *v29;
  const WebCore::SharedBuffer *v30;
  _BYTE buf[12];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(_QWORD *)(a1 + 3032);
    v9 = *(unsigned __int8 *)(a1 + 315) == 1;
    v10 = *(unsigned __int8 *)(a1 + 3072);
    v11 = *(_QWORD *)(a1 + 4152) != 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = a1;
    v32 = 2048;
    v33 = v5;
    v34 = 2048;
    v35 = v6;
    v36 = 2048;
    v37 = v7;
    v38 = 2048;
    v39 = v8;
    v40 = 1024;
    v41 = v9;
    v42 = 1024;
    v43 = v10;
    v44 = 1024;
    v45 = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::sendResultForCacheEntry:", buf, 0x46u);
  }
  WebKit::NetworkCache::Entry::shareableResourceHandle(*a2, buf);
  if (!(_BYTE)v35)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3856) + 72);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1 + 3856) + 80);
    v13 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 208), buf);
    if (v13 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13))
      WebKit::NetworkResourceLoader::logCookieInformation((WebKit::NetworkResourceLoader *)a1);
    v14 = *a2;
    v15 = *((_QWORD *)*a2 + 70);
    if (v15
      || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)v14),
          (v15 = *((_QWORD *)v14 + 70)) != 0))
    {
      do
        v16 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v16 + 1, (unsigned int *)v15));
    }
    WebKit::NetworkResourceLoader::sendBuffer((WebKit::NetworkResourceLoader *)a1, (WebCore::SharedBuffer **)v15, *(_QWORD *)(v15 + 48));
    v17 = *(WebCore::ContentFilter **)(a1 + 4792);
    if (v17)
    {
      v23 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
      WebCore::ContentFilter::continueAfterNotifyFinished(v17, v23);
      WebCore::ContentFilter::stopFilteringMainResource(*(WebCore::ContentFilter **)(a1 + 4792));
    }
    WebKit::NetworkResourceLoader::sendResultForCacheEntry(std::unique_ptr<WebKit::NetworkCache::Entry>)::$_0::operator()(a1);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v15, v18);
    return;
  }
  v19 = *(WebCore::ContentFilter **)(a1 + 4792);
  if (!v19)
    goto LABEL_15;
  v24 = (WebCore::FragmentedSharedBuffer *)WebKit::NetworkCache::Entry::buffer(*a2);
  WebCore::FragmentedSharedBuffer::makeContiguous(v24);
  WebKit::NetworkCache::Entry::buffer(*a2);
  v26 = WebCore::ContentFilter::continueAfterDataReceived(v19, v30);
  v27 = (unsigned int *)v30;
  v30 = 0;
  if (v27)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v25);
  if ((v26 & 1) != 0)
  {
    if ((_BYTE)v35)
    {
LABEL_15:
      v30 = (const WebCore::SharedBuffer *)buf;
      v21 = *(_QWORD *)(a1 + 16);
      v20 = a1 + 16;
      v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
      IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResource>(v20, (unint64_t *)&v30, v22);
      goto LABEL_16;
    }
    __break(1u);
  }
  v28 = *(WebCore::ContentFilter **)(a1 + 4792);
  v29 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 168));
  WebCore::ContentFilter::continueAfterNotifyFinished(v28, v29);
  WebCore::ContentFilter::stopFilteringMainResource(*(WebCore::ContentFilter **)(a1 + 4792));
  WebKit::NetworkResourceLoader::sendResultForCacheEntry(std::unique_ptr<WebKit::NetworkCache::Entry>)::$_0::operator()(a1);
LABEL_16:
  if ((_BYTE)v35)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
}

unsigned int *WebKit::NetworkCache::Entry::shareableResourceHandle@<X0>(WebKit::NetworkCache::Entry *this@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ShareableResource *v4;
  unsigned int *result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;

  v4 = (WebCore::ShareableResource *)*((_QWORD *)this + 71);
  if (v4)
    return (unsigned int *)WebCore::ShareableResource::createHandle(v4);
  WebKit::NetworkCache::Data::tryCreateSharedMemory((WebKit::NetworkCache::Entry *)((char *)this + 688), &v10);
  if (!v10)
    goto LABEL_3;
  v8 = v10;
  v10 = 0;
  WebCore::ShareableResource::create();
  v6 = v9;
  v7 = (unsigned int *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = v9;
  if (v7)
  {
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v7);
    v6 = *((_QWORD *)this + 71);
  }
  WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
  if (v6)
  {
    WebCore::ShareableResource::createHandle(*((WebCore::ShareableResource **)this + 71));
  }
  else
  {
LABEL_3:
    *a2 = 0;
    a2[24] = 0;
  }
  result = v10;
  v10 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

WebKit::NetworkCache::Data *WebKit::NetworkCache::Data::tryCreateSharedMemory@<X0>(WebKit::NetworkCache::Data *this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)this && *((_BYTE *)this + 24))
  {
    WebKit::NetworkCache::Data::span(this);
    return (WebKit::NetworkCache::Data *)WebCore::SharedMemory::wrapMap();
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::DidReceiveResource>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2668;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode((IPC::Encoder *)v6, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::shouldLogCookieInformation(WebKit::NetworkSessionCocoa *this)
{
  return *((unsigned __int8 *)this + 946);
}

char *IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = a2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = a2[6];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = a2[7];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  v12 = a2[8];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v12;
  v13 = a2[9];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v13;
  v14 = a2[10];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v14;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 11);
  v15 = *((_WORD *)a2 + 48);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v15;
  v16 = *((_BYTE *)a2 + 98) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  v17 = (*((unsigned __int8 *)a2 + 98) >> 1) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v18 = (*((unsigned __int8 *)a2 + 98) >> 2) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  v19 = (*((unsigned __int8 *)a2 + 98) >> 3) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v20 = (*((unsigned __int8 *)a2 + 98) >> 4) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v21 = (*((unsigned __int8 *)a2 + 98) >> 5) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  v22 = (*((unsigned __int8 *)a2 + 98) >> 6) & 1;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
  v23 = *((unsigned __int8 *)a2 + 98) >> 7;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  LOBYTE(v23) = *((_BYTE *)a2 + 99);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  v24 = a2[13];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v24;
  v25 = a2[14];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v25;
  v26 = a2[15];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v26)
  {
    *result = 1;
    return IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::encode(a1, a2[15]);
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FormData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;

  IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)(a2 + 40), *(unsigned int *)(a2 + 52));
}

void IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 48 * v5;
    do
    {
      IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(a1, v6);
      v6 += 48;
      v7 -= 48;
    }
    while (v7);
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&,0ul>(a1, a2, a3);
  }
  else if (*(_DWORD *)(a2 + 40))
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(v3);
  }
  else
  {
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
}

void IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData>,void>::encode<IPC::Encoder,std::variant<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::FormDataElement::EncodedFileData,WebCore::FormDataElement::EncodedBlobData> const&>(a1, a2, v4);
}

void IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  IPC::Encoder *v29;
  uint64_t *v30;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[2] | a2[3];
  v6 = *((_OWORD *)a2 + 1) == 0;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  if (v5)
    IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 4);
  v7 = *((_BYTE *)a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, (const __CFDictionary *)a2[6]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 8);
  v8 = *((_BYTE *)a2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 15);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 20);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 21);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 22);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 23);
  v9 = *((_BYTE *)a2 + 192);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *((_BYTE *)a2 + 193);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode(a1, (uint64_t)(a2 + 26));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 36);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 37);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 38);
  v11 = *((_BYTE *)a2 + 312);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = *((_BYTE *)a2 + 313);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = *((_BYTE *)a2 + 314);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = *((_BYTE *)a2 + 315);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = *((_DWORD *)a2 + 79);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 320);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 321);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 322);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 323);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)a2 + 81);
  LOBYTE(v15) = *((_BYTE *)a2 + 332);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)a2 + 333);
  LOBYTE(v15) = *((_BYTE *)a2 + 335);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 42);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 43);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 44);
  LOBYTE(v15) = *((_BYTE *)a2 + 360);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 361);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 362);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  LOBYTE(v15) = *((_BYTE *)a2 + 363);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v16 = a2[46];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v16;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 47);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 49);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 51);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 53);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 55);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 56);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 57);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 58);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 59);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 60);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 61);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 62);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 63);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 64);
  LOBYTE(v16) = *((_BYTE *)a2 + 520);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  LOBYTE(v16) = *((_BYTE *)a2 + 521);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  LOBYTE(v16) = *((_BYTE *)a2 + 522);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  LOBYTE(v16) = *((_BYTE *)a2 + 523);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  LODWORD(v16) = *((unsigned __int8 *)a2 + 544);
  v17 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!(_DWORD)v16)
  {
    *v17 = 0;
LABEL_10:
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 69);
    IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)a2 + 70);
    v22 = *((_BYTE *)a2 + 568);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
    v23 = *((_BYTE *)a2 + 569);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
    v24 = *((_BYTE *)a2 + 570);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
    v25 = *((_BYTE *)a2 + 571);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v25;
    v26 = *((_BYTE *)a2 + 572);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v26;
    v27 = *((_BYTE *)a2 + 573);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v27;
    v28 = *((_BYTE *)a2 + 574);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v28;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 72);
    IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 73);
    IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, a2 + 74);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 75);
    return;
  }
  *v17 = 1;
  if (*((_BYTE *)a2 + 544))
  {
    v18 = *((unsigned int *)a2 + 135);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v18;
    v19 = *((unsigned int *)a2 + 135);
    if ((_DWORD)v19)
    {
      v20 = a2[66];
      v21 = v20 + 32 * v19;
      do
      {
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)v20, *(unsigned int *)(v20 + 12));
        IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(v20 + 16));
        v20 += 32;
      }
      while (v20 != v21);
    }
    goto LABEL_10;
  }
  v29 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v29, v30);
}

uint64_t *IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(IPC::Encoder *this, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  _QWORD v13[2];

  if (*a2)
    v4 = *(_DWORD *)(*a2 - 12);
  else
    v4 = 0;
  *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v4;
  result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v5, v6);
  v8 = result;
  v13[0] = result;
  v13[1] = v9;
  if (*a2)
    v10 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  else
    v10 = 0;
  if ((uint64_t *)v10 != result)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v8);
      v13[0] += 8;
      result = (uint64_t *)WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v13, v11, v12);
      v8 = (uint64_t *)v13[0];
    }
    while (v13[0] != v10);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (*(_DWORD *)(v3 - 12))
    return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, v3, a3);
  return v3 + 8 * *(unsigned int *)(v3 - 4);
}

char *IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4;
  char *result;
  uint64_t v6;
  id v7;

  v4 = *((unsigned __int8 *)a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*((_BYTE *)a2 + 8))
    {
      v6 = *a2;
      result = IPC::Encoder::grow(a1, 8uLL, 8);
      *(_QWORD *)result = v6;
    }
    else
    {
      v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = a2 + 48;
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  return IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(a1, v4);
}

char *IPC::ArgumentCoder<WebCore::PolicyContainer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  char *result;

  v2 = a2;
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  v4 = *(_DWORD *)(v2 + 16);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, v2 + 24);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 72);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebProcessProxy::CreateGPUProcessConnection>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2545;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GPUProcessConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::ConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::ConnectionHandle &&,0ul,1ul>((IPC::Encoder *)v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 1, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4;

  IPC::Encoder::addAttachment((uint64_t)a1, (unint64_t)a2);
  IPC::ArgumentCoder<WebKit::GPUProcessPreferencesForWebProcess,void>::encode(a1, a2 + 4);
  v4 = a2[10];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(a1, (uint64_t)(a2 + 12));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 48);
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 50);
}

char *IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(IPC::Encoder *a1, char *a2)
{
  int v4;
  char *result;
  char v6;
  id v7;

  v4 = a2[1];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (a2[1])
    {
      v6 = *a2;
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v6;
    }
    else
    {
      v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  uint64_t i;
  int v7;
  id v8;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      for (i = 0; i != 32; i += 4)
      {
        v7 = *(_DWORD *)(a2 + i);
        result = IPC::Encoder::grow(a1, 4uLL, 4);
        *(_DWORD *)result = v7;
      }
    }
    else
    {
      v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<WebKit::GPUProcessPreferencesForWebProcess,void>::encode(v8);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::GPUProcessPreferencesForWebProcess,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v2) = v2[5];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setBorderWidth(WebCore::TileController **this, float a2)
{
  return WebCore::TileController::setTileDebugBorderWidth(this[105], a2 * 0.5);
}

uint64_t IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 4)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  void *v21;
  int v22;
  CFTypeRef v23;
  char v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  char v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CFTypeRef cf[2];
  _DWORD v72[2];
  uint64_t v73;
  __int128 v74;
  WTF::StringImpl *v75;
  char v76;
  char v77;
  WTF::StringImpl *v78;
  char v79;
  char v80;
  _QWORD *v81;
  char v82;
  char v83;
  __int128 v84;
  _DWORD v85[2];
  uint64_t v86;
  char v87;
  uint64_t v88[2];

  v88[1] = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WTF::String>(a1, &v78);
  v4 = IPC::Decoder::decode<unsigned int>(a1);
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v51 = 0;
    v52 = 0;
    *a1 = 0;
    a1[1] = 0;
    v53 = a1[3];
    if (v53)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
        v52 = *a1;
        v51 = a1[1];
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
    }
    goto LABEL_73;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v51 = v5;
    v52 = 0;
LABEL_73:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v54 = a1[3];
    if (v54)
    {
      if (v51)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
        v6 = *a1;
        v5 = a1[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_74;
  }
  v9 = *v8;
  if ((v9 - 1) < 8)
  {
    v10 = v9 | 0x100;
    goto LABEL_5;
  }
LABEL_74:
  *a1 = 0;
  a1[1] = 0;
  v55 = a1[3];
  if (v55 && v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v6);
  v10 = 0;
LABEL_5:
  IPC::Decoder::decode<WTF::String>(a1, &v75);
  v11 = a1[1];
  v12 = *a1;
  v13 = a1[2] - *a1;
  if (v11 <= v13)
  {
    v56 = 0;
    v57 = 0;
    *a1 = 0;
    a1[1] = 0;
    v58 = a1[3];
    if (v58)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
        v57 = *a1;
        v56 = a1[1];
      }
      else
      {
        v56 = 0;
        v57 = 0;
      }
    }
  }
  else
  {
    v14 = (unsigned __int8 *)(v12 + v13);
    v15 = v12 + v13 + 1;
    a1[2] = v15;
    if (v12)
    {
      v16 = 0;
      v17 = *v14;
      if ((v17 - 1) < 9 || (_DWORD)v17 == 100)
        goto LABEL_8;
      goto LABEL_65;
    }
    v56 = v11;
    v57 = 0;
  }
  v12 = 0;
  v11 = 0;
  *a1 = 0;
  a1[1] = 0;
  v59 = a1[3];
  if (v59)
  {
    if (v56)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57, v56);
      v12 = *a1;
      v11 = a1[1];
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
  }
LABEL_65:
  *a1 = 0;
  a1[1] = 0;
  v45 = a1[3];
  if (!v45 || !v11)
  {
    v17 = 0;
    v46 = 0;
    v12 = 0;
    v16 = 1;
    goto LABEL_67;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v12);
  v17 = 0;
  v12 = *a1;
  v11 = a1[1];
  v16 = 1;
  v15 = a1[2];
LABEL_8:
  v18 = v15 - v12;
  if (v11 <= v18)
  {
    v46 = 0;
    v70 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v11 && v70)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
      v12 = *a1;
      v46 = a1[1];
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v19 = (unsigned __int8 *)(v12 + v18);
    a1[2] = (uint64_t)(v19 + 1);
    if (v12)
    {
      v20 = *v19;
      if (v20 < 2)
      {
        if (!v20)
        {
          v23 = 0;
          v24 = 1;
          goto LABEL_21;
        }
        v88[0] = objc_opt_class();
        WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v81, v88, 1);
        WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v81);
        IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLProtectionSpace>(a1, (uint64_t)cf);
        v22 = LOBYTE(cf[1]);
        if (LOBYTE(cf[1]))
        {
          v23 = cf[0];
          if (cf[0])
          {
            CFRetain(cf[0]);
            CFRelease(v23);
          }
        }
        else
        {
          v23 = 0;
        }
        if (v81)
        {
          WTF::fastFree((WTF *)(v81 - 2), v21);
          if (v22)
            goto LABEL_19;
        }
        else if (v22)
        {
LABEL_19:
          if (!*a1)
          {
            if (v23)
            {
              CFRelease(v23);
              v64 = *a1;
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          v24 = 0;
          v20 = 0;
          goto LABEL_21;
        }
        v64 = 0;
        v66 = *a1;
        v65 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v67 = a1[3];
        if (!v67)
          goto LABEL_101;
        if (!v65)
          goto LABEL_100;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 16))(v67, v66);
        v64 = *a1;
        if (!*a1)
          goto LABEL_101;
        goto LABEL_99;
      }
      goto LABEL_69;
    }
    v46 = v11;
  }
LABEL_67:
  *a1 = 0;
  a1[1] = 0;
  v47 = a1[3];
  if (v47 && v46)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v12, v46);
    v12 = *a1;
    v11 = a1[1];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
LABEL_69:
  *a1 = 0;
  a1[1] = 0;
  v48 = a1[3];
  if (v48 && v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v12);
  while (1)
  {
    v25 = (WTF::StringImpl *)*a1;
    v49 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50 && v49 && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v50 + 16))(v50, v25), *a1))
    {
      v23 = 0;
      v24 = 1;
      v20 = 1;
LABEL_21:
      if (!v79 || (v4 & 0xFF00000000) == 0 || v10 <= 0xFF || !v76 || v16 || v20)
        goto LABEL_99;
      LOBYTE(v81) = 0;
      v82 = 0;
      if ((v24 & 1) == 0)
      {
        v81 = v23;
        v82 = 1;
        v23 = 0;
      }
      MEMORY[0x19AEAEBF0](cf, &v78, v4, v10, &v75, v17, &v81);
      v84 = *(_OWORD *)cf;
      v85[0] = v72[0];
      *(_DWORD *)((char *)v85 + 3) = *(_DWORD *)((char *)v72 + 3);
      v86 = v73;
      v87 = 1;
      v73 = 0;
      cf[0] = 0;
      cf[1] = 0;
      if (v82)
      {
        v26 = v81;
        v81 = 0;
        if (v26)
          CFRelease(v26);
      }
      if (v23)
        v27 = v24;
      else
        v27 = 1;
      if ((v27 & 1) == 0)
        CFRelease(v23);
      v28 = 0;
    }
    else
    {
      LOBYTE(v84) = 0;
      v87 = 0;
      v28 = 1;
    }
    if (v76)
    {
      v29 = v75;
      v75 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v25);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    if (!v79)
      goto LABEL_47;
    v30 = v78;
    v78 = 0;
    if (!v30)
      goto LABEL_47;
    if (*(_DWORD *)v30 != 2)
    {
      *(_DWORD *)v30 -= 2;
LABEL_47:
      if (!v28)
        goto LABEL_48;
      goto LABEL_61;
    }
    WTF::StringImpl::destroy(v30, v25);
    if (!v28)
      goto LABEL_48;
LABEL_61:
    v42 = *a1;
    v43 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
LABEL_48:
    IPC::Decoder::decode<WebCore::Credential>(a1, (uint64_t)&v81);
    v31 = *a1;
    v32 = a1[1];
    v33 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v32 < v33 || v32 - v33 <= 3)
    {
      v60 = 0;
      v61 = 0;
      *a1 = 0;
      a1[1] = 0;
      v62 = a1[3];
      if (v62)
      {
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
          v61 = *a1;
          v60 = a1[1];
        }
        else
        {
          v60 = 0;
          v61 = 0;
        }
      }
    }
    else
    {
      v34 = (_DWORD *)(v31 + v33);
      a1[2] = (uint64_t)(v34 + 1);
      if (v31)
      {
        v35 = 0;
        v4 = *v34 & 0xFFFFFF00;
        v17 = *v34;
        goto LABEL_52;
      }
      v60 = v32;
      v61 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    v63 = a1[3];
    if (v63 && v60)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v61);
    v4 = 0;
    v17 = 0;
    v35 = 1;
LABEL_52:
    IPC::Decoder::decode<WebCore::ResourceResponse>(a1, &v78);
    IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v75);
    if (!*a1)
      break;
    if (v87 && v83 && !v35 && v80 && v77)
    {
      WebCore::AuthenticationChallenge::AuthenticationChallenge((WebCore::AuthenticationChallenge *)cf, (const WebCore::ProtectionSpace *)&v84, (const WebCore::Credential *)&v81, v17 | v4, (const WebCore::ResourceResponse *)&v78, (const WebCore::ResourceError *)&v75);
      WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(a2, (uint64_t)cf);
      *(_OWORD *)(a2 + 416) = v74;
      *(_BYTE *)(a2 + 432) = 1;
      v74 = 0uLL;
      WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)cf, v37);
      goto LABEL_59;
    }
LABEL_99:
    __break(1u);
LABEL_100:
    v64 = 0;
LABEL_101:
    v68 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69 && v68)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v64);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 432) = 0;
LABEL_59:
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v36);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v78, v38);
  std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v81, v39);
  return std::__optional_destruct_base<WebCore::ProtectionSpace,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v84, v40);
}

void sub_196C71DA0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::ProtectionSpace,false>::~__optional_destruct_base[abi:sn180100](v2 - 144, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::ResourceResponse>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::decode(a1, a2);
  if (!a2[256])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ResourceResponseData>(_BYTE *a1, uint64_t *a2)
{
  int v2;
  char v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  WTF::StringImpl *v57;
  CFTypeRef v58;
  WTF::StringImpl *result;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  unint64_t v103;
  _BYTE *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  char v109;
  int v110;
  CFTypeRef cf;
  char v112;
  WTF::StringImpl *v113;
  __int128 v114;
  __int128 v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  WTF::StringImpl *v118;
  __int16 v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  BOOL v141;
  BOOL v142;
  char v143;
  char v144[16];
  _OWORD v145[5];
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  WTF::StringImpl *v158;
  char v159;
  WTF::StringImpl *v160;
  char v161;
  WTF::StringImpl *v162;
  char v163;
  WTF::StringImpl *v164;
  char v165;
  WTF::StringImpl *v166;
  __int128 v167;
  __int128 v168;
  char v169;

  IPC::Decoder::decode<WTF::URL>(a2, &v166);
  IPC::Decoder::decode<WTF::String>(a2, &v164);
  v103 = IPC::Decoder::decode<long long>(a2);
  v109 = v5;
  IPC::Decoder::decode<WTF::String>(a2, &v162);
  v110 = IPC::Decoder::decode<short>(a2);
  IPC::Decoder::decode<WTF::String>(a2, &v160);
  IPC::Decoder::decode<WTF::String>(a2, &v158);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)&v153, a2);
  IPC::Decoder::decode<std::optional<WebCore::NetworkLoadMetrics>>(a2, (uint64_t)v145);
  v6 = a2[1];
  v7 = (WTF::StringImpl *)*a2;
  v8 = a2[2] - *a2;
  v104 = a1;
  if (v6 <= v8)
    goto LABEL_99;
  v9 = (unsigned __int8 *)v7 + v8;
  v10 = (uint64_t)v7 + v8 + 1;
  a2[2] = v10;
  if (!v7)
  {
    v61 = v6;
    v62 = 0;
    goto LABEL_100;
  }
  v101 = *v9;
  if (v101 >= 0xA)
    goto LABEL_101;
  v108 = 0;
LABEL_5:
  v11 = v10 - (_QWORD)v7;
  if (v6 <= v11)
  {
    i = 0;
    v94 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v94 && v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
      v7 = (WTF::StringImpl *)*a2;
      i = a2[1];
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_103;
  }
  v12 = (unsigned __int8 *)v7 + v11;
  v13 = (uint64_t)v7 + v11 + 1;
  a2[2] = v13;
  if (v7)
  {
    v100 = *v12;
    if (v100 >= 6)
      goto LABEL_105;
    v107 = 0;
    goto LABEL_9;
  }
  for (i = v6; ; i = 0)
  {
LABEL_103:
    *a2 = 0;
    a2[1] = 0;
    v67 = a2[3];
    if (v67)
    {
      if (i)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v67 + 16))(v67, v7, i);
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
LABEL_105:
    *a2 = 0;
    a2[1] = 0;
    v68 = a2[3];
    if (v68 && v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v68 + 16))(v68, v7);
      LOBYTE(v100) = 0;
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
      v107 = 1;
      v13 = a2[2];
LABEL_9:
      v14 = v13 - (_QWORD)v7;
      if (v6 <= v14)
      {
        v69 = 0;
        v95 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v95 && v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
          v7 = (WTF::StringImpl *)*a2;
          v69 = a2[1];
        }
        else
        {
          v7 = 0;
        }
        goto LABEL_107;
      }
      v15 = (unsigned __int8 *)v7 + v14;
      v16 = (uint64_t)v7 + v14 + 1;
      a2[2] = v16;
      if (!v7)
      {
        v69 = v6;
        goto LABEL_107;
      }
      v17 = *v15;
      if (v17 >= 4)
        goto LABEL_109;
      v106 = 0;
LABEL_13:
      v18 = v16 - (_QWORD)v7;
      if (v6 <= v18)
      {
        v72 = 0;
        v96 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v96 && v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
          v7 = (WTF::StringImpl *)*a2;
          v72 = a2[1];
        }
        else
        {
          v7 = 0;
        }
        goto LABEL_111;
      }
      v19 = (unsigned __int8 *)v7 + v18;
      v20 = (uint64_t)v7 + v18 + 1;
      a2[2] = v20;
      if (!v7)
      {
        v72 = v6;
        goto LABEL_111;
      }
      v21 = *v19;
      if (v21 >= 2)
        goto LABEL_113;
      v105 = 0;
      v22 = 1;
LABEL_17:
      if (!v21)
        v22 = 0;
      v99 = v22;
      v23 = v20 - (_QWORD)v7;
      if (v6 <= v23)
      {
        v75 = 0;
        v97 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v97 && v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97);
          v7 = (WTF::StringImpl *)*a2;
          v75 = a2[1];
        }
        else
        {
          v7 = 0;
        }
        goto LABEL_115;
      }
      v24 = (unsigned __int8 *)v7 + v23;
      v25 = (uint64_t)v7 + v23 + 1;
      a2[2] = v25;
      if (!v7)
      {
        v75 = v6;
        goto LABEL_115;
      }
      v26 = *v24;
      if (v26 >= 2)
        goto LABEL_117;
      v27 = 0;
      v102 = v26 != 0;
      goto LABEL_23;
    }
    LOBYTE(v100) = 0;
    v69 = 0;
    v7 = 0;
    v107 = 1;
LABEL_107:
    *a2 = 0;
    a2[1] = 0;
    v70 = a2[3];
    if (v70)
    {
      if (v69)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v70 + 16))(v70, v7, v69);
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
LABEL_109:
    *a2 = 0;
    a2[1] = 0;
    v71 = a2[3];
    if (v71 && v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v71 + 16))(v71, v7);
      LOBYTE(v17) = 0;
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
      v106 = 1;
      v16 = a2[2];
      goto LABEL_13;
    }
    LOBYTE(v17) = 0;
    v72 = 0;
    v7 = 0;
    v106 = 1;
LABEL_111:
    *a2 = 0;
    a2[1] = 0;
    v73 = a2[3];
    if (v73 && v72)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v73 + 16))(v73, v7, v72);
      v21 = 0;
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v21 = 0;
    }
LABEL_113:
    *a2 = 0;
    a2[1] = 0;
    v74 = a2[3];
    if (v74 && v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v74 + 16))(v74, v7);
      v22 = 0;
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
      v105 = 1;
      v20 = a2[2];
      goto LABEL_17;
    }
    v99 = 0;
    v75 = 0;
    v7 = 0;
    v105 = 1;
LABEL_115:
    *a2 = 0;
    a2[1] = 0;
    v76 = a2[3];
    if (v76 && v75)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v76 + 16))(v76, v7, v75);
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
LABEL_117:
    *a2 = 0;
    a2[1] = 0;
    v77 = a2[3];
    if (v77)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v77 + 16))(v77, v7);
        v102 = 0;
        v91 = a2[3];
        v93 = *a2;
        v92 = a2[1];
        v27 = 1;
        *a2 = 0;
        a2[1] = 0;
        if (!v91 || !v92)
        {
          v6 = 0;
          goto LABEL_190;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v93);
        v102 = 0;
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
        v25 = a2[2];
LABEL_23:
        v28 = v25 - (_QWORD)v7;
        if (v6 > v28)
        {
          v29 = (unsigned __int8 *)v7 + v28;
          v30 = (uint64_t)v7 + v28 + 1;
          a2[2] = v30;
          if (!v7)
            goto LABEL_120;
          v31 = *v29;
          if (v31 >= 2)
            goto LABEL_123;
          v32 = 0;
          v33 = v31 != 0;
          goto LABEL_27;
        }
        v91 = a2[3];
LABEL_190:
        *a2 = 0;
        a2[1] = 0;
        if (v91)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
            v7 = (WTF::StringImpl *)*a2;
            v6 = a2[1];
            goto LABEL_120;
          }
        }
        else
        {
          v6 = 0;
        }
        v7 = 0;
        goto LABEL_120;
      }
      v102 = 0;
    }
    else
    {
      v102 = 0;
      v6 = 0;
    }
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v27 = 1;
LABEL_120:
    *a2 = 0;
    a2[1] = 0;
    v78 = a2[3];
    if (!v78)
    {
      v6 = 0;
LABEL_122:
      v7 = 0;
      goto LABEL_123;
    }
    if (!v6)
      goto LABEL_122;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v78 + 16))(v78, v7);
    v7 = (WTF::StringImpl *)*a2;
    v6 = a2[1];
LABEL_123:
    *a2 = 0;
    a2[1] = 0;
    v79 = a2[3];
    if (v79)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v79 + 16))(v79, v7);
        v33 = 0;
        v88 = a2[3];
        v90 = *a2;
        v89 = a2[1];
        v32 = 1;
        *a2 = 0;
        a2[1] = 0;
        if (!v88 || !v89)
        {
          v6 = 0;
          goto LABEL_194;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v90);
        v33 = 0;
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
        v30 = a2[2];
LABEL_27:
        v34 = v30 - (_QWORD)v7;
        if (v6 > v34)
        {
          v35 = (unsigned __int8 *)v7 + v34;
          v36 = (uint64_t)v7 + v34 + 1;
          a2[2] = v36;
          if (!v7)
            goto LABEL_126;
          v37 = *v35;
          if (v37 >= 2)
            goto LABEL_129;
          v38 = 0;
          v39 = 1;
LABEL_31:
          if (v37)
            v40 = v39;
          else
            v40 = 0;
          v41 = v36 - (_QWORD)v7;
          if (v6 <= v41)
          {
            v82 = 0;
            v98 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v98 && v6)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
              v7 = (WTF::StringImpl *)*a2;
              v82 = a2[1];
            }
            else
            {
              v7 = 0;
            }
          }
          else
          {
            v42 = (unsigned __int8 *)v7 + v41;
            a2[2] = (uint64_t)(v42 + 1);
            if (v7)
            {
              v43 = *v42;
              if (v43 < 2)
              {
                if (!v43)
                {
                  v44 = 0;
                  v45 = 0;
                  v2 = 1;
                  goto LABEL_39;
                }
                IPC::Decoder::decode<WebCore::CertificateInfo>(a2, (uint64_t)&v113);
                if ((_BYTE)v114)
                {
                  v44 = 0;
                  v2 = 0;
                  v45 = v113;
                  goto LABEL_39;
                }
                goto LABEL_134;
              }
              goto LABEL_133;
            }
            v82 = v6;
          }
          goto LABEL_131;
        }
        v88 = a2[3];
LABEL_194:
        *a2 = 0;
        a2[1] = 0;
        if (v88)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
            v7 = (WTF::StringImpl *)*a2;
            v6 = a2[1];
            goto LABEL_126;
          }
        }
        else
        {
          v6 = 0;
        }
        v7 = 0;
        goto LABEL_126;
      }
      v33 = 0;
    }
    else
    {
      v33 = 0;
      v6 = 0;
    }
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = 1;
LABEL_126:
    *a2 = 0;
    a2[1] = 0;
    v80 = a2[3];
    if (v80)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v80 + 16))(v80, v7);
        v37 = 0;
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
        goto LABEL_129;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = 0;
    v37 = 0;
LABEL_129:
    *a2 = 0;
    a2[1] = 0;
    v81 = a2[3];
    if (v81 && v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v81 + 16))(v81, v7);
      v39 = 0;
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
      v38 = 1;
      v36 = a2[2];
      goto LABEL_31;
    }
    v40 = 0;
    v82 = 0;
    v7 = 0;
    v38 = 1;
LABEL_131:
    *a2 = 0;
    a2[1] = 0;
    v83 = a2[3];
    if (v83 && v82)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v83 + 16))(v83, v7, v82);
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
LABEL_133:
    *a2 = 0;
    a2[1] = 0;
    v84 = a2[3];
    if (v84 && v6)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v84 + 16))(v84, v7);
LABEL_134:
    v7 = (WTF::StringImpl *)*a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v85 = a2[3];
    if (v85 && v6)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v85 + 16))(v85, v7);
    v45 = 0;
    v44 = 1;
LABEL_39:
    if (!*a2)
    {
      v56 = v104;
      *v104 = 0;
      v104[280] = 0;
      goto LABEL_64;
    }
    if (v169
      && v165
      && v109
      && v163
      && (v110 & 0xFF0000) != 0
      && v161
      && v159
      && v157
      && v152
      && !v108
      && !v107
      && !v106
      && !v105
      && !v27
      && !v32
      && !v38
      && !v44)
    {
      break;
    }
    __break(1u);
LABEL_99:
    v61 = 0;
    v62 = 0;
    *a2 = 0;
    a2[1] = 0;
    v63 = a2[3];
    if (v63)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
        v62 = *a2;
        v61 = a2[1];
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
    }
LABEL_100:
    v7 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v64 = a2[3];
    if (v64)
    {
      if (v61)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
        v7 = (WTF::StringImpl *)*a2;
        v6 = a2[1];
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
    }
LABEL_101:
    *a2 = 0;
    a2[1] = 0;
    v65 = a2[3];
    if (v65 && v6)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v65 + 16))(v65, v7);
      LOBYTE(v101) = 0;
      v7 = (WTF::StringImpl *)*a2;
      v6 = a2[1];
      v108 = 1;
      v10 = a2[2];
      goto LABEL_5;
    }
    LOBYTE(v101) = 0;
    v7 = 0;
    v108 = 1;
  }
  LOBYTE(cf) = 0;
  v112 = 0;
  if ((v2 & 1) == 0)
  {
    cf = v45;
    v112 = 1;
    v45 = 0;
  }
  v46 = v166;
  v166 = 0;
  v113 = v46;
  v114 = v167;
  v115 = v168;
  LODWORD(v167) = v167 & 0xFFFFFFFE;
  v47 = v164;
  v164 = 0;
  v116 = v47;
  v117 = v103;
  v48 = v162;
  v162 = 0;
  v118 = v48;
  v119 = v110;
  v49 = v160;
  v160 = 0;
  v50 = v158;
  v158 = 0;
  v120 = v49;
  v121 = v50;
  v51 = v153;
  v153 = 0;
  v122 = v51;
  v52 = v154;
  v154 = 0;
  v123 = v52;
  v53 = v155;
  v155 = 0;
  v124 = v53;
  v54 = v156;
  v156 = 0;
  v125 = v54;
  LOBYTE(v126) = 0;
  v136 = 0;
  if (v151)
  {
    v131 = v146;
    v128 = v145[2];
    v129 = v145[3];
    v130 = v145[4];
    v126 = v145[0];
    v127 = v145[1];
    v132 = v147;
    v133 = v148;
    v55 = v150;
    v147 = 0;
    v150 = 0;
    v134 = v149;
    v135 = v55;
    v136 = 1;
  }
  v137 = v101;
  v138 = v100;
  v139 = v17;
  v140 = v99;
  v141 = v102;
  v142 = v33;
  v143 = v40;
  std::__optional_copy_base<WebCore::CertificateInfo,false>::__optional_copy_base[abi:sn180100](v144, (uint64_t)&cf);
  v56 = v104;
  WebCore::ResourceResponseData::ResourceResponseData((uint64_t)v104, (uint64_t)&v113);
  v104[280] = 1;
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v113, v57);
  if (v112)
  {
    v58 = cf;
    cf = 0;
    if (v58)
      CFRelease(v58);
  }
LABEL_64:
  if (((v44 | v2) & 1) == 0 && v45)
    CFRelease(v45);
  if (v152)
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v145, v7);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&v153);
  if (v159)
  {
    result = v158;
    v158 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v60);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v161)
  {
    result = v160;
    v160 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v60);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v163)
  {
    result = v162;
    v162 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v60);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v165)
  {
    result = v164;
    v164 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v60);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v169)
  {
    result = v166;
    v166 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v60);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v56[280])
  {
    v86 = *a2;
    v87 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v87)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v86);
    }
  }
  return result;
}

void sub_196C72B58(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::ResourceResponseData *a13)
{
  uint64_t v13;

  if (*(_BYTE *)(v13 + 280))
    WebCore::ResourceResponseData::~ResourceResponseData(a13, a2);
  _Unwind_Resume(a1);
}

void sub_196C72C24(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,WTF::StringImpl *a30)
{
  WTF::ASCIILiteral *v30;
  WTF::ASCIILiteral *v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](v32, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(v31);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v30);
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, v33);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a29)
  {
    if (*(_DWORD *)a29 == 2)
      WTF::StringImpl::destroy(a29, v33);
    else
      *(_DWORD *)a29 -= 2;
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, v33);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, v33);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v33);
    else
      *(_DWORD *)a20 -= 2;
  }
  JUMPOUT(0x196C72BA4);
}

void sub_196C72CF8()
{
  JUMPOUT(0x196C72BD8);
}

void sub_196C72D00()
{
  JUMPOUT(0x196C72BE0);
}

void sub_196C72D08()
{
  JUMPOUT(0x196C72BE8);
}

void sub_196C72D10()
{
  JUMPOUT(0x196C72BF0);
}

void sub_196C72D1C()
{
  JUMPOUT(0x196C72BF8);
}

void sub_196C72D28()
{
  JUMPOUT(0x196C72C00);
}

void WebCore::ResourceResponseData::ResourceResponseData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v3 + 56) = v6;
  *(_WORD *)(v3 + 64) = *(_WORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v3 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(v3 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(v3 + 96) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_DWORD *)(v3 + 100) = v9;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(v3 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(v3 + 112) = v10;
  LODWORD(v5) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 116) = v5;
  *(_BYTE *)(v3 + 248) = 0;
  if (*(_BYTE *)(a2 + 248))
  {
    v11 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v3 + 136) = v11;
    v12 = *(_OWORD *)(a2 + 152);
    v13 = *(_OWORD *)(a2 + 168);
    v14 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(v3 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(v3 + 168) = v13;
    *(_OWORD *)(v3 + 184) = v14;
    *(_OWORD *)(v3 + 152) = v12;
    v15 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(v3 + 208) = v15;
    v16 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(v3 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(v3 + 216) = v16;
    v17 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(v3 + 240) = v17;
    *(_BYTE *)(v3 + 248) = 1;
  }
  v18 = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(v3 + 259) = *(_DWORD *)(a2 + 259);
  *(_DWORD *)(v3 + 256) = v18;
  *(_BYTE *)(v3 + 264) = 0;
  *(_BYTE *)(v3 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    v19 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(v3 + 264) = v19;
    *(_BYTE *)(v3 + 272) = 1;
  }
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::NetworkLoadMetrics>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 136))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C72ED4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 136))
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _OWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v3 = a1[1];
  v4 = (WTF::StringImpl *)*a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v19 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        a1 = v19;
        v15 = *v19;
        v14 = v19[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_11;
  }
  v6 = (unsigned __int8 *)v4 + v5;
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v14 = v3;
    v15 = 0;
LABEL_11:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v18 = a1;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        v4 = (WTF::StringImpl *)*v18;
        v3 = v18[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::NetworkLoadMetrics>(a1, (uint64_t)v20);
      v8 = v26;
      if (v26)
      {
        v10 = v20[3];
        *(_OWORD *)(a2 + 32) = v20[2];
        *(_OWORD *)(a2 + 48) = v10;
        *(_OWORD *)(a2 + 64) = v20[4];
        v11 = v20[1];
        *(_OWORD *)a2 = v20[0];
        *(_OWORD *)(a2 + 16) = v11;
        v12 = v22;
        *(_QWORD *)(a2 + 80) = v21;
        *(_QWORD *)(a2 + 88) = v12;
        *(_OWORD *)(a2 + 96) = v23;
        v13 = v25;
        v22 = 0;
        v25 = 0;
        *(_QWORD *)(a2 + 112) = v24;
        *(_QWORD *)(a2 + 120) = v13;
        v8 = 1;
        *(_BYTE *)(a2 + 128) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v20[0]) = 0;
      v26 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 128) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 136) = v8;
    return std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v4);
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v3)
    result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 136) = 0;
  return result;
}

unint64_t IPC::Decoder::decode<long long>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<long long,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<long long,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (uint64_t *)(v2 + v3);
    a1[2] = (uint64_t)(v5 + 1);
    if (!v2)
    {
LABEL_12:
      v8 = 0;
      v7 = 0;
      return v7 | v8;
    }
    v6 = *v5;
    v7 = v6 & 0xFFFFFFFFFFFFFF00;
    v8 = v6;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      if (v1)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      goto LABEL_12;
    }
  }
  return v7 | v8;
}

WebCore::ResourceResponseBase *WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this, const WebCore::ResourceResponseBase *a2)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 5) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 7) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 8);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 8) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 9) = v9;
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WebCore::ResourceResponseBase *)((char *)this + 80), (const WebCore::ResourceResponseBase *)((char *)a2 + 80));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WebCore::ResourceResponseBase *)((char *)this + 96), (const WebCore::ResourceResponseBase *)((char *)a2 + 96));
  v10 = (unsigned int *)*((_QWORD *)a2 + 14);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *((_QWORD *)this + 14) = v10;
  std::__optional_copy_base<WebCore::CertificateInfo,false>::__optional_copy_base[abi:sn180100]((_BYTE *)this + 120, (uint64_t)a2 + 120);
  v12 = *(_OWORD *)((char *)a2 + 136);
  v13 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)this + 152) = v13;
  *(_OWORD *)((char *)this + 136) = v12;
  v14 = *(_OWORD *)((char *)a2 + 184);
  v15 = *(_OWORD *)((char *)a2 + 200);
  v16 = *(_OWORD *)((char *)a2 + 216);
  *(_DWORD *)((char *)this + 231) = *(_DWORD *)((char *)a2 + 231);
  *(_OWORD *)((char *)this + 216) = v16;
  *(_OWORD *)((char *)this + 200) = v15;
  *(_OWORD *)((char *)this + 184) = v14;
  return this;
}

void sub_196C732D4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::ASCIILiteral *v3;
  WTF::ASCIILiteral *v4;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v6 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v6, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(v4);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v3);
  v8 = *(WTF::StringImpl **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::ResourceResponse,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  BOOL v8;
  _BYTE v9[288];
  _BYTE v10[240];
  _BYTE v11[240];
  CFTypeRef cf;
  _BYTE v13[288];
  char v14;

  IPC::Decoder::decode<std::optional<WebCore::ResourceResponseData>>(a1, v13);
  if (*a1)
  {
    if (!v14)
    {
      __break(1u);
      return;
    }
    std::__optional_move_base<WebCore::ResourceResponseData,false>::__optional_move_base[abi:sn180100](v9, (uint64_t)v13);
    MEMORY[0x19AEB0B94](v10, v9);
    WebCore::ResourceResponse::ResourceResponse((uint64_t)v11, (uint64_t)v10);
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::__optional_destruct_base[abi:sn180100]<WebCore::ResourceResponse>((uint64_t)a2, (uint64_t)v11);
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v11, v5);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v7);
    if (v9[280])
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v9, v4);
  }
  else
  {
    *a2 = 0;
    a2[256] = 0;
  }
  if (v14)
    v8 = v13[280] == 0;
  else
    v8 = 1;
  if (!v8)
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v13, v4);
}

void sub_196C7349C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,char a47)
{
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;

  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)&STACK[0x218], a2);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a47, v48);
  if (a45)
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&a10, v49);
  if (LOBYTE(STACK[0x438]))
  {
    if (LOBYTE(STACK[0x430]))
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&STACK[0x318], v49);
  }
  _Unwind_Resume(a1);
}

void sub_196C734E8()
{
  JUMPOUT(0x196C734B8);
}

void sub_196C734F0()
{
  JUMPOUT(0x196C734C8);
}

void WebCore::ResourceResponseData::~ResourceResponseData(WebCore::ResourceResponseData *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (*((_BYTE *)this + 272))
  {
    v3 = (const void *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (v3)
      CFRelease(v3);
  }
  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 120, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::ResourceResponseData *)((char *)this + 104));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebCore::ResourceResponseData *)((char *)this + 88));
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void IPC::Decoder::decode<std::optional<WebCore::ResourceResponseData>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[288])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C73658(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseData *v2;

  if (*((_BYTE *)v2 + 288))
  {
    if (*((_BYTE *)v2 + 280))
      WebCore::ResourceResponseData::~ResourceResponseData(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _BYTE v17[280];
  char v18;

  v2 = a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v16 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v2 = v16;
        v11 = *v16;
        v10 = v16[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v10 = v4;
    v11 = 0;
LABEL_12:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v13 = v2[3];
    if (v13)
    {
      v15 = v2;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v2 = v15;
        v5 = *v15;
        v4 = v15[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_13:
    *v2 = 0;
    v2[1] = 0;
    v14 = v2[3];
    if (v14 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    goto LABEL_14;
  }
  if (v8)
  {
    IPC::Decoder::decode<WebCore::ResourceResponseData>(v17, a1);
    if (v18)
    {
      WebCore::ResourceResponseData::ResourceResponseData((uint64_t)a2, (uint64_t)v17);
      a2[280] = 1;
      goto LABEL_7;
    }
LABEL_14:
    *a2 = 0;
    a2[288] = 0;
    return;
  }
  v17[0] = 0;
  v18 = 0;
  std::__optional_move_base<WebCore::ResourceResponseData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v17);
LABEL_7:
  a2[288] = 1;
  if (v18)
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v17, v9);
}

void sub_196C737F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a46)
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&a11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<short>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<short,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<short,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int16 *v5;
  __int16 v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 < v3 || v1 - v3 <= 1)
  {
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11 && v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    goto LABEL_10;
  }
  v5 = (__int16 *)(v2 + v3);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v2)
  {
LABEL_10:
    v9 = 0;
    v8 = 0;
    v7 = 0;
    return v8 | v9 | v7;
  }
  v6 = *v5;
  v7 = v6 & 0xFF00;
  v8 = v6;
  v9 = 0x10000;
  return v8 | v9 | v7;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[5];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  IPC::Decoder::decode<WebCore::NetworkLoadMetrics>(a1, (uint64_t)v10);
  v4 = v16;
  if (v16)
  {
    v5 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v10[4];
    v6 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v6;
    v7 = v12;
    *(_QWORD *)(a2 + 80) = v11;
    *(_QWORD *)(a2 + 88) = v7;
    *(_OWORD *)(a2 + 96) = v13;
    v8 = v15;
    *(_QWORD *)(a2 + 112) = v14;
    *(_QWORD *)(a2 + 120) = v8;
    v4 = 1;
    v12 = 0;
    v15 = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 128) = v4;
  return std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v3);
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::Decoder::decode<WebCore::NetworkLoadMetrics>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 128))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(WebCore::AdditionalNetworkLoadMetricsForWebInspector *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C739DC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::Credential>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::Credential,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<WebCore::CertificateInfo>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::CertificateInfo,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebCore::CertificateInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v4;
  CFTypeRef cf;
  char v6;

  IPC::Decoder::decode<WTF::RetainPtr<__SecTrust *>>(a1, (uint64_t)&cf);
  if (*a1)
  {
    if (v6)
    {
      *(_QWORD *)a2 = cf;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    if (v6)
    {
      v4 = cf;
      cf = 0;
      if (v4)
        CFRelease(v4);
    }
  }
}

void IPC::Decoder::decode<WTF::RetainPtr<__SecTrust *>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WTF::RetainPtr<__SecTrust *>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<WebCore::ResourceError>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ResourceError,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void WebCore::ResourceError::~ResourceError(WebCore::ResourceError *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

uint64_t IPC::Decoder::decode<WebCore::ResourceErrorBaseType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::ResourceErrorBaseType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ResourceErrorBaseType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  __int16 v3;

  v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 5u || HIBYTE(v3) == 0)
    return 0;
  else
    return v3 | 0x100u;
}

void WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(WebKit::AuxiliaryProcessProxy *this)
{
  WebKit::ProcessThrottler *v2;
  void *v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned __int8 **v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  int v37;

  *(_QWORD *)this = off_1E34CF5D0;
  *((_QWORD *)this + 3) = &unk_1E34CF6B0;
  *((_QWORD *)this + 4) = &unk_1E34CF708;
  v2 = (WebKit::AuxiliaryProcessProxy *)((char *)this + 200);
  WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
  v4 = (unsigned __int8 **)*((_QWORD *)this + 18);
  if (v4)
  {
    v5 = *v4;
    if (__ldaxr(*v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C](v5);
LABEL_6:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
    IPC::Connection::invalidate((uint64_t)v4);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v4);
  }
  v8 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
  {
    *(_QWORD *)(v8 + 16) = 0;
    WebKit::ProcessLauncher::platformInvalidate((WebKit::ProcessLauncher *)v8);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 8), v9);
  }
  v10 = *((_QWORD *)this + 15);
  v35 = v10;
  v11 = *((unsigned int *)this + 33);
  v36 = *((_DWORD *)this + 32);
  v37 = v11;
  v34[0] = 0;
  *((_QWORD *)this + 15) = 0;
  v34[1] = 0;
  *((_QWORD *)this + 16) = 0;
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v3);
  if ((_DWORD)v11)
  {
    v13 = 40 * v11;
    v14 = (uint64_t *)(v10 + 16);
    do
    {
      if (*((_BYTE *)v14 + 16))
      {
        v15 = *v14;
        *v14 = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      v14 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v12);
  v17 = *((_QWORD *)this + 18);
  if (v17)
  {
    {
      v18 = WebKit::connectionToProcessMap(void)::map;
      v19 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(v17 + 24));
      if (v18)
      {
        v20 = (_QWORD *)(v18 + 16 * *(unsigned int *)(v18 - 4));
        if (v20 == v19)
          goto LABEL_29;
        goto LABEL_27;
      }
    }
    else
    {
      WebKit::connectionToProcessMap(void)::map = 0;
      v19 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(v17 + 24));
    }
    if (!v19)
      goto LABEL_29;
    v20 = 0;
LABEL_27:
    if (v20 != v19)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v19, v16);
  }
LABEL_29:
  v21 = *((_QWORD *)this + 51);
  if (v21)
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v21, (WTF::StringImpl *)v16);
  v22 = *((_QWORD *)this + 50);
  if (v22)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, (WTF::StringImpl *)v16);
  v23 = *((_QWORD *)this + 49);
  if (v23)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v23, (WTF::StringImpl *)v16);
  WebKit::ProcessThrottler::~ProcessThrottler(v2);
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::AuxiliaryProcessProxy *)((char *)this + 152), v24);
  v26 = (unsigned __int8 **)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v26)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v26);
  v27 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v27)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 8), v25);
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v25);
  WebKit::ResponsivenessTimer::~ResponsivenessTimer((WebKit::AuxiliaryProcessProxy *)((char *)this + 56));
  *((_QWORD *)this + 4) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v28);
  v30 = *((_QWORD *)this + 1);
  if (v30)
  {
    *(_QWORD *)(v30 + 8) = 0;
    v31 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v29);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_1,void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t API::SerializedScriptValue::createFromWireBytes@<X0>(char *a1@<X0>, WTF *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  WTF *v8;
  char v9;
  WebKit *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;

  result = API::Object::newObject(0x18uLL, 20);
  v7 = (_QWORD *)result;
  v12 = 0;
  if (a2)
  {
    if ((unint64_t)a2 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc(a2);
    v12 = v8;
    do
    {
      v9 = *a1++;
      *(_BYTE *)v8 = v9;
      v8 = (WTF *)((char *)v8 + 1);
      a2 = (WTF *)((char *)a2 - 1);
    }
    while (a2);
  }
  v10 = (WebKit *)WebCore::SerializedScriptValue::createFromWireBytes(&v13);
  *v7 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v10);
  *v7 = &off_1E34AD2F8;
  v7[2] = v13;
  *a3 = v7;
  v13 = 0;
  result = (uint64_t)v12;
  if (v12)
    return WTF::fastFree(v12, v11);
  return result;
}

void sub_196C74128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t WebCore::SerializedScriptValue::createFromWireBytes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t result;
  WTF *v12;
  void *v13;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;

  v2 = WTF::fastMalloc((WTF *)0x100);
  v20[1] = 0;
  v21 = 0;
  v19[1] = 0;
  v20[0] = 0;
  v19[0] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = 0;
  v14[1] = 0;
  WebCore::SerializedScriptValue::SerializedScriptValue();
  *a1 = v2;
  WTF::Vector<std::unique_ptr<WebCore::MediaStreamTrackDataHolder>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v3);
  WTF::Vector<WebCore::WebCodecsAudioInternalData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v4);
  WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v5);
  WTF::Vector<WebCore::WebCodecsVideoFrameData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v6);
  WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v7);
  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v8);
  WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v9);
  result = v21;
  v21 = 0;
  if (result)
  {
    v12 = (WTF *)WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, v10);
    return WTF::fastFree(v12, v13);
  }
  return result;
}

void sub_196C74230(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  WTF *v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  uint64_t v21;
  va_list va1;
  uint64_t v23;
  uint64_t v24;
  va_list va2;
  uint64_t v26;
  uint64_t v27;
  va_list va3;
  uint64_t v29;
  va_list va4;

  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v21 = va_arg(va2, _QWORD);
  v23 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v24 = va_arg(va3, _QWORD);
  v26 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v27 = va_arg(va4, _QWORD);
  v29 = va_arg(va4, _QWORD);
  WTF::Vector<std::unique_ptr<WebCore::MediaStreamTrackDataHolder>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WebCore::WebCodecsAudioInternalData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v8);
  WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va2, v9);
  WTF::Vector<WebCore::WebCodecsVideoFrameData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va3, v10);
  WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va4, v11);
  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 - 72, v12);
  WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 - 56, v13);
  v15 = *(_QWORD *)(v6 - 40);
  *(_QWORD *)(v6 - 40) = 0;
  if (v15)
  {
    v16 = (WTF *)WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v14);
    WTF::fastFree(v16, v17);
  }
  WTF::fastFree(v5, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::DetachedRTCDataChannel>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a1;
    v5 = 8 * v3;
    do
    {
      a2 = *v4;
      *v4 = 0;
      if (a2)
        std::default_delete<WebCore::DetachedRTCDataChannel>::operator()[abi:sn180100]((int)v4, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedVideoChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::WebCodecsEncodedAudioChunkStorage,(WTF::DestructionThread)0>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::WebCodecsAudioInternalData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::WebCodecsVideoFrameData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 104 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      v4 += 13;
    }
    while (v4 != (unsigned int **)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void ScriptMessageHandlerDelegate::didPostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, API::SerializedScriptValue *a5)
{
  void *v10;
  id WeakRetained;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const OpaqueJSValue **v17;
  id v18;
  uint64_t v19;

  v10 = (void *)MEMORY[0x19AEB9C30]();
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a2 + 32) + 1984));
  if (WeakRetained)
  {
    v12 = WeakRetained;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v19 = a2;
    v13 = API::Object::newObject(0x140uLL, 60);
    v14 = API::FrameInfo::FrameInfo(v13, a3, &v19);
    v15 = *(const void **)(v14 + 8);
    if (v15)
    {
      CFRetain(*(CFTypeRef *)(v14 + 8));
      v16 = *(const void **)(v13 + 8);
    }
    else
    {
      v16 = 0;
    }
    CFRelease(v16);
    if (v19)
      CFRelease(*(CFTypeRef *)(v19 + 8));
    v18 = -[WKScriptMessage _initWithBody:webView:frameInfo:name:world:]([WKScriptMessage alloc], "_initWithBody:webView:frameInfo:name:world:", API::SerializedScriptValue::deserialize(a5, 0, v17), v12, v15, *(_QWORD *)(a1 + 24), *(_QWORD *)(a4 + 8));
    objc_msgSend(*(id *)(a1 + 16), "userContentController:didReceiveScriptMessage:", *(_QWORD *)(a1 + 8), v18);
    if (v18)
      CFRelease(v18);
    if (v15)
      CFRelease(v15);
    CFRelease(v12);
  }
  objc_autoreleasePoolPop(v10);
}

void sub_196C745C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v11;

  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t API::SerializedScriptValue::deserialize(API::SerializedScriptValue *this, const OpaqueJSValue **a2, const OpaqueJSValue **a3)
{
  id v5;
  OpaqueJSContext *v6;
  const OpaqueJSContext *v7;
  uint64_t v8;
  uint64_t v9;
  id v11;

  {
    API::SharedJSContext::SharedJSContext(this);
  }
  API::SharedJSContext::ensureContext((API::SharedJSContext *)&v11);
  v5 = v11;
  v6 = (OpaqueJSContext *)objc_msgSend(v11, "JSGlobalContextRef");
  v7 = v6;
  if (v6)
    JSGlobalContextRetain(v6);
  v8 = WebCore::SerializedScriptValue::deserialize(this, v7, a2);
  if (v8)
  {
    v9 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithJSValueRef:inContext:", v8, v5), "toObject");
    if (!v7)
      goto LABEL_8;
    goto LABEL_7;
  }
  v9 = 0;
  if (v7)
LABEL_7:
    JSGlobalContextRelease(v7);
LABEL_8:
  if (v5)
    CFRelease(v5);
  return v9;
}

void sub_196C74958(_Unwind_Exception *exception_object)
{
  const void *v1;
  OpaqueJSContext *v2;

  if (v2)
    JSGlobalContextRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef API::SharedJSContext::ensureContext(API::SharedJSContext *this)
{
  uint64_t v2;
  CFTypeRef result;
  id v4;
  const void *v5;

  WTF::MonotonicTime::now(this);
  qword_1ECE72820 = v2;
  result = (CFTypeRef)API::sharedContext(void)::sharedContext;
  if (API::sharedContext(void)::sharedContext)
  {
    *(_QWORD *)this = API::sharedContext(void)::sharedContext;
    return CFRetain(result);
  }
  JSRemoteInspectorGetInspectionFollowsInternalPolicies();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  JSRemoteInspectorGetInspectionEnabledByDefault();
  JSRemoteInspectorSetInspectionEnabledByDefault();
  v4 = objc_alloc_init(MEMORY[0x1E0CBE0F0]);
  v5 = (const void *)API::sharedContext(void)::sharedContext;
  API::sharedContext(void)::sharedContext = (uint64_t)v4;
  if (v5)
    CFRelease(v5);
  JSRemoteInspectorSetInspectionEnabledByDefault();
  JSRemoteInspectorSetInspectionFollowsInternalPolicies();
  WTF::RunLoop::TimerBase::start();
  result = (CFTypeRef)API::sharedContext(void)::sharedContext;
  *(_QWORD *)this = API::sharedContext(void)::sharedContext;
  if (result)
    return CFRetain(result);
  return result;
}

void API::FrameInfo::~FrameInfo(API::FrameInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const void *v6;
  char v7;

  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 62);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_10[v5])(&v7, (char *)this + 224);
  *((_DWORD *)this + 62) = -1;
  v6 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::FrameInfo *)((char *)this + 24));
}

{
  API::FrameInfo::~FrameInfo(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::FrameInfo::FrameInfo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9CC0;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  WTF::URL::URL(a1 + 24, (uint64_t *)(a2 + 8));
  WTF::URL::URL(a1 + 64, (uint64_t *)(a2 + 48));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 128) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 132) = v7;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 144) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a1 + 148) = v8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a1 + 164) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 168) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 176) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 184) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 192) = v12;
  v13 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v13;
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 216) = v14;
  *(_BYTE *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 248) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 224, a2 + 208);
  v15 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 256) = v15;
  v16 = *(_OWORD *)(a2 + 248);
  v17 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 294) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 264) = v16;
  v18 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 312) = v18;
  return a1;
}

id WebKit::WebPageProxy::cocoaView@<X0>(WebKit::WebPageProxy *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_loadWeakRetained((id *)(*((_QWORD *)this + 4) + 1984));
  *a2 = result;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks(uint64_t this)
{
  unsigned int v1;

  *(_BYTE *)(this + 169) = 1;
  if (*(_BYTE *)(this + 185))
  {
    v1 = *(unsigned __int16 *)(this + 184);
    if (v1 <= 0xFF)
    {
      __break(1u);
    }
    else
    {
      *(_BYTE *)(this + 185) = 0;
      return WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(this, v1 != 0);
    }
  }
  return this;
}

_BYTE *WebKit::ResponsivenessTimer::stop(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = this;
  if (!this[48])
  {
    v2 = *(_QWORD *)(*(_QWORD *)this + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v1[48] = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  }
  v1[49] = 0;
  if (!v1[50])
    return (_BYTE *)WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 8));
  v1[50] = 0;
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvONS7_28NetworkProcessConnectionInfoEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E3505220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvONS7_28NetworkProcessConnectionInfoEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

char *IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  char v4;

  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  v4 = *(_BYTE *)(a2 + 4);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(a1, a2 + 8);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebProcessProxy::GetNetworkProcessConnection>(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[44];
  char v12;
  IPC::Decoder *v13;
  int v14;
  IPC::Encoder *v15;
  uint64_t v16;

  v16 = 0;
  IPC::Connection::createSyncMessageEncoder(3731, 0, &v16, (uint64_t *)&v15);
  IPC::Connection::sendSyncMessage(a2, v16, (uint64_t *)&v15, 4, (uint64_t)&v13, INFINITY);
  if (!v14)
  {
    v11[0] = 0;
    v12 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::NetworkProcessConnectionInfo>>(v13, (WTF::MachSendRight *)v11);
    if (!v12)
    {
      *(_BYTE *)a1 = 13;
      *(_DWORD *)(a1 + 56) = 1;
      goto LABEL_6;
    }
    if (!v14)
    {
      IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::ConnectionSendSyncResult(a1, &v13, (uint64_t)v11);
      if (v12)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
LABEL_6:
      v5 = v14;
      if (v14 == -1)
        goto LABEL_8;
      goto LABEL_7;
    }
LABEL_14:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::Connection::PendingSyncReply>(v9, v10);
  }
  if (v14 != 1)
    goto LABEL_14;
  *(_BYTE *)a1 = (_BYTE)v13;
  v5 = 1;
  *(_DWORD *)(a1 + 56) = 1;
LABEL_7:
  ((void (*)(_BYTE *, IPC::Decoder **))off_1E34E0610[v5])(v11, &v13);
LABEL_8:
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::Connection::PendingSyncReply>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 32 * v5);
        v9 = v4;
        do
        {
          *(_QWORD *)v7 = *(_QWORD *)v9;
          v11 = *((_QWORD *)v9 + 1);
          v10 = (_QWORD *)((char *)v9 + 8);
          *v10 = 0;
          *(_QWORD *)(v7 + 8) = v11;
          *(_OWORD *)(v7 + 16) = *(_OWORD *)(v10 + 1);
          result = (uint64_t)std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)v10, 0);
          v9 = (WTF *)(v10 + 3);
          v7 += 32;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WebKit::NetworkProcessConnectionInfo>>(IPC::Decoder *a1, WTF::MachSendRight *a2)
{
  _BYTE v5[48];

  IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessConnectionInfo>>((uint64_t)v5, a1);
  std::__optional_storage_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::NetworkProcessConnectionInfo>,false>>(a2, (uint64_t)v5);
  if (v5[44])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessConnectionInfo>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessConnectionInfo>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 44))
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessConnectionInfo>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  int v3;
  _BYTE v4[20];
  _BYTE v5[21];
  unsigned __int8 v6;

  IPC::Decoder::decode<WebKit::NetworkProcessConnectionInfo>((uint64_t)v4, a2);
  if (v6)
  {
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a1 + 4) = *(_OWORD *)&v4[4];
    *(_OWORD *)(a1 + 20) = *(_OWORD *)v5;
    *(_QWORD *)(a1 + 33) = *(_QWORD *)&v5[13];
    v3 = v6;
    *(_BYTE *)(a1 + 44) = 1;
    if (v3)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 44) = 0;
  }
}

void IPC::Decoder::decode<WebKit::NetworkProcessConnectionInfo>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 44))
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  __int128 v5;
  _BYTE v6[4];
  _BYTE v7[37];
  _OWORD v8[2];
  char v9;
  char v10;
  _BYTE v11[4];
  char v12;

  IPC::Decoder::decode<IPC::ConnectionHandle>(a1, v11);
  v4 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a1);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(v8, (uint64_t *)a1);
  if (*(_QWORD *)a1)
  {
    if (v12)
    {
      WTF::MachSendRight::MachSendRight();
      if (v4 > 0xFFu)
      {
        v7[0] = v4;
        if (v10)
        {
          *(_OWORD *)&v7[4] = v8[0];
          *(_OWORD *)&v7[20] = v8[1];
          v7[36] = v9;
          WTF::MachSendRight::MachSendRight();
          v5 = *(_OWORD *)&v7[16];
          *(_OWORD *)(a2 + 4) = *(_OWORD *)v7;
          *(_OWORD *)(a2 + 20) = v5;
          *(_QWORD *)(a2 + 33) = *(_QWORD *)&v7[29];
          *(_BYTE *)(a2 + 44) = 1;
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 44) = 0;
LABEL_6:
  if (v12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
}

void sub_196C7550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  uint64_t v10;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (*(_BYTE *)(v10 - 36))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v10 - 40));
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(uint64_t *a1)
{
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  __int16 v13;

  v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  v2 = v13;
  if (HIBYTE(v13))
    v3 = v13 > 3u;
  else
    v3 = 1;
  v4 = v3;
  if (v4 == 1)
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9 && v8 != 0)
    {
      v12 = v2;
      v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      v4 = v11;
      v2 = v12;
    }
  }
  v5 = v2 | 0x100;
  if (v4)
    return 0;
  else
    return v5;
}

void IPC::Decoder::decode<WebKit::GPUProcessConnectionParameters>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 52))
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  _BYTE v10[4];
  _BYTE v11[48];
  _OWORD v12[2];
  char v13;
  char v14;
  _BYTE v15[4];
  char v16;

  IPC::Decoder::decode<WebCore::ProcessIdentity>(a1, (WTF::MachSendRight *)v15);
  v4 = IPC::Decoder::decode<WebKit::GPUProcessPreferencesForWebProcess>((uint64_t *)a1);
  v5 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(v12, (uint64_t *)a1);
  v6 = IPC::Decoder::decode<std::optional<BOOL>>((uint64_t *)a1);
  v7 = IPC::Decoder::decode<std::optional<BOOL>>((uint64_t *)a1);
  if (*(_QWORD *)a1)
  {
    if (v16)
    {
      v8 = v7;
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v10, (const WTF::MachSendRight *)v15);
      if (BYTE6(v4))
      {
        *(_DWORD *)v11 = v4;
        *(_WORD *)&v11[4] = WORD2(v4);
        if (v5 > 0xFFu)
        {
          v11[6] = v5;
          if (v14)
          {
            *(_OWORD *)&v11[8] = v12[0];
            *(_OWORD *)&v11[24] = v12[1];
            v11[40] = v13;
            if ((v6 & 0xFF0000) != 0)
            {
              *(_WORD *)&v11[44] = v6;
              if ((v8 & 0xFF0000) != 0)
              {
                *(_WORD *)&v11[46] = v8;
                WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)a2, (const WTF::MachSendRight *)v10);
                v9 = *(_OWORD *)&v11[16];
                *(_OWORD *)(a2 + 4) = *(_OWORD *)v11;
                *(_OWORD *)(a2 + 20) = v9;
                *(_OWORD *)(a2 + 36) = *(_OWORD *)&v11[32];
                *(_BYTE *)(a2 + 52) = 1;
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v10);
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 52) = 0;
LABEL_9:
  if (v16)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v15);
}

void sub_196C75778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  uint64_t v11;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  if (*(_BYTE *)(v11 - 52))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v11 - 56));
  _Unwind_Resume(a1);
}

_BYTE *IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(_BYTE *result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  char v19;

  v3 = result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_11;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v6;
    v12 = 0;
LABEL_11:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_12;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
    goto LABEL_13;
  }
  if (!v9)
  {
    *result = 0;
    result[32] = 0;
    goto LABEL_7;
  }
  result = (_BYTE *)IPC::Decoder::decode<WebKit::CoreIPCAuditToken>((uint64_t)v18, a2);
  if (v19)
  {
    v10 = v18[1];
    *(_OWORD *)v3 = v18[0];
    *((_OWORD *)v3 + 1) = v10;
    v3[32] = 1;
LABEL_7:
    v3[36] = 1;
    return result;
  }
LABEL_13:
  *v3 = 0;
  v3[36] = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v17)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCAuditToken>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v4 & 0xFF00000000) == 0)
    goto LABEL_12;
  v5 = v4;
  v6 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v6 & 0xFF00000000) == 0)
    goto LABEL_12;
  v7 = v6;
  v8 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v8 & 0xFF00000000) == 0)
    goto LABEL_12;
  v9 = v8;
  v10 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v10 & 0xFF00000000) == 0)
    goto LABEL_12;
  v11 = v10;
  v12 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v12 & 0xFF00000000) == 0)
    goto LABEL_12;
  v13 = v12;
  v14 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v14 & 0xFF00000000) != 0
    && (v15 = v14, v16 = IPC::Decoder::decode<unsigned int>(a2), (v16 & 0xFF00000000) != 0)
    && (v17 = v16, result = IPC::Decoder::decode<unsigned int>(a2), (result & 0xFF00000000) != 0))
  {
    if (*a2)
    {
      *(_DWORD *)a1 = v5;
      *(_DWORD *)(a1 + 4) = v7;
      *(_DWORD *)(a1 + 8) = v9;
      *(_DWORD *)(a1 + 12) = v11;
      *(_DWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 20) = v15;
      *(_DWORD *)(a1 + 24) = v17;
      *(_DWORD *)(a1 + 28) = result;
      *(_BYTE *)(a1 + 32) = 1;
      return result;
    }
  }
  else
  {
LABEL_12:
    v20 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20);
        if (*a2)
          __break(1u);
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void IPC::Decoder::decode<WebCore::ProcessIdentity>(IPC::Decoder *a1@<X0>, WTF::MachSendRight *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::ProcessIdentity,void>::decode(a1, a2);
  if (!*((_BYTE *)a2 + 4))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C75AF8(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 4))
    WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebKit::GPUProcessPreferencesForWebProcess>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  result = IPC::ArgumentCoder<WebKit::GPUProcessPreferencesForWebProcess,void>::decode(a1);
  if (!BYTE6(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::ProcessIdentity,void>::decode(IPC::Decoder *a1@<X0>, WTF::MachSendRight *a2@<X8>)
{
  _BYTE v4[4];
  _BYTE v5[4];
  char v6;

  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(_QWORD *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight(a2, (const WTF::MachSendRight *)v4);
    *((_BYTE *)a2 + 4) = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 4) = 0;
  }
  if (v6)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void sub_196C75BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12, __int16 a13, char a14)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (a14)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebKit::GPUProcessPreferencesForWebProcess,void>::decode(uint64_t *a1)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;

  v2 = IPC::Decoder::decode<BOOL>(a1);
  v3 = IPC::Decoder::decode<BOOL>(a1);
  v4 = IPC::Decoder::decode<BOOL>(a1);
  v5 = IPC::Decoder::decode<BOOL>(a1);
  v6 = IPC::Decoder::decode<BOOL>(a1);
  v7 = IPC::Decoder::decode<BOOL>(a1);
  v8 = *a1;
  if (!*a1)
    goto LABEL_11;
  v8 = v2;
  if (v2 <= 0xFFu
    || (v8 = v3, v3 <= 0xFFu)
    || (v8 = v4, v4 <= 0xFFu)
    || (v8 = v5, v5 <= 0xFFu)
    || (v8 = v6, v6 <= 0xFFu)
    || (v8 = v7, v7 <= 0xFFu))
  {
    __break(1u);
LABEL_11:
    LOBYTE(v2) = 0;
    return ((unint64_t)v7 << 40) | (v8 << 48) | ((unint64_t)v6 << 32) | ((unint64_t)v5 << 24) | ((unint64_t)v4 << 16) | ((unint64_t)v3 << 8) | v2;
  }
  v8 = 1;
  return ((unint64_t)v7 << 40) | (v8 << 48) | ((unint64_t)v6 << 32) | ((unint64_t)v5 << 24) | ((unint64_t)v4 << 16) | ((unint64_t)v3 << 8) | v2;
}

void IPC::MessageReceiverMap::~MessageReceiverMap(IPC::MessageReceiverMap *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::deallocateTable(v3, a2);
  if (*(_QWORD *)this)
    WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::deallocateTable(*(_QWORD *)this, a2);
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(unsigned __int8 *)(a1 + 16 * i) != 254)
      {
        v5 = a1 + 16 * i;
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::ResponsivenessTimer::~ResponsivenessTimer(WebKit::ResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *((_QWORD *)this + 1) = off_1E34ABE00;
  v2 = (WebKit::ResponsivenessTimer *)((char *)this + 8);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  v5 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
}

uint64_t WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(unsigned __int8 *)(a1 + 24 * i) != 254)
      {
        v5 = a1 + 24 * i;
        v6 = *(unsigned int **)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ExceptionDetails,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int i;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  char v24;

  IPC::Decoder::decode<WTF::String>(a1, &v23);
  v4 = IPC::Decoder::decode<unsigned int>(a1);
  v5 = IPC::Decoder::decode<unsigned int>(a1);
  v6 = a1[1];
  v7 = *a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
    goto LABEL_19;
  v9 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v16 = v6;
    v17 = 0;
    goto LABEL_20;
  }
  v10 = *v9;
  if (v10 >= 3)
    goto LABEL_21;
  for (i = v10 | 0x100; ; i = 0)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v21);
    if (!*a1)
      break;
    if (v24)
    {
      v14 = v23;
      v23 = 0;
      if ((v4 & 0xFF00000000) != 0 && (v5 & 0xFF00000000) != 0 && i > 0xFF && v22)
      {
        v15 = v21;
        *(_QWORD *)a2 = v14;
        *(_DWORD *)(a2 + 8) = v4;
        *(_DWORD *)(a2 + 12) = v5;
        *(_BYTE *)(a2 + 16) = i;
        *(_QWORD *)(a2 + 24) = v15;
        *(_BYTE *)(a2 + 32) = 1;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_19:
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
LABEL_20:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v7 = *a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v7);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_12:
  if (v24)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C760F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::SharedJSContext::SharedJSContext(API::SharedJSContext *this)
{
  WTF::RunLoop *v1;
  _QWORD *v2;
  uint64_t result;

  API::sharedContext(void)::sharedContext = 0;
  v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v2 = off_1E34BAEC0;
  v2[1] = API::SharedJSContext::releaseContextIfNecessary;
  v2[2] = 0;
  v2[3] = &API::sharedContext(void)::sharedContext;
  result = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)qword_1ECE72800, v1);
  qword_1ECE72800[0] = (uint64_t)off_1E34ABE00;
  qword_1ECE72818 = (uint64_t)v2;
  qword_1ECE72820 = 0;
  return result;
}

void sub_196C761B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v4 = *(const void **)(v2 + 2040);
  *(_QWORD *)(v2 + 2040) = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(a1);
}

const __CFString *localizedDescriptionForErrorCode(WKErrorCode a1, const __CFString *a2)
{
  const __CFString *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;

  switch(a1)
  {
    case WKErrorUnknown:
      WebCore::localizedString((WebCore *)CFSTR("An unknown error occurred"), a2);
      if (!v5)
        goto LABEL_39;
      goto LABEL_35;
    case WKErrorWebContentProcessTerminated:
      WebCore::localizedString((WebCore *)CFSTR("The Web Content process was terminated"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorWebViewInvalidated:
      WebCore::localizedString((WebCore *)CFSTR("The WKWebView was invalidated"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorJavaScriptExceptionOccurred:
      WebCore::localizedString((WebCore *)CFSTR("A JavaScript exception occurred"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorJavaScriptResultTypeIsUnsupported:
      WebCore::localizedString((WebCore *)CFSTR("JavaScript execution returned a result of an unsupported type"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorContentRuleListStoreCompileFailed:
      WebCore::localizedString((WebCore *)CFSTR("Compiling a WKContentRuleList failed"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorContentRuleListStoreLookUpFailed:
      WebCore::localizedString((WebCore *)CFSTR("Looking up a WKContentRuleList failed"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorContentRuleListStoreRemoveFailed:
      WebCore::localizedString((WebCore *)CFSTR("Removing a WKContentRuleList failed"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorContentRuleListStoreVersionMismatch:
      WebCore::localizedString((WebCore *)CFSTR("Looking up a WKContentRuleList found a binary that is incompatible"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorAttributedStringContentFailedToLoad:
      WebCore::localizedString((WebCore *)CFSTR("Attributed string content failed to load"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorAttributedStringContentLoadTimedOut:
      WebCore::localizedString((WebCore *)CFSTR("Timed out while loading attributed string content"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorJavaScriptInvalidFrameTarget:
      WebCore::localizedString((WebCore *)CFSTR("JavaScript execution targeted an invalid frame"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorNavigationAppBoundDomain:
      WebCore::localizedString((WebCore *)CFSTR("Attempted to navigate away from an app-bound domain or navigate after using restricted APIs"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorJavaScriptAppBoundDomain:
      WebCore::localizedString((WebCore *)CFSTR("JavaScript execution targeted a frame that is not in an app-bound domain"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorDuplicateCredential:
      WebCore::localizedString((WebCore *)CFSTR("This credential is already present"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorMalformedCredential:
      WebCore::localizedString((WebCore *)CFSTR("This credential is malformed"), a2);
      if (v5)
        goto LABEL_35;
      goto LABEL_39;
    case WKErrorCredentialNotFound:
      WebCore::localizedString((WebCore *)CFSTR("Credential could not be found"), a2);
      if (v5)
      {
LABEL_35:
        v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v3);
        else
          *(_DWORD *)v5 -= 2;
      }
      else
      {
LABEL_39:
        v2 = &stru_1E351F1B8;
      }
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_196C76484(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidChangeMainDocument(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  uint64_t v10[3];
  IPC::Encoder *v11;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    *(_OWORD *)v10 = *((_OWORD *)this[2] + 5);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 32) + 56))(v3 + 32);
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 1865;
    *(_QWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v11 = (IPC::Encoder *)v5;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v5, v10);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 32) + 32))(v3 + 32, &v11, 0);
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

WTF::StringImpl *WebKit::WebHistoryItemClient::historyItemChanged(WTF::StringImpl *this, const WebCore::HistoryItem *a2)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  WebKit::ViewSnapshot *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  const WebCore::HistoryItem *v14;
  WebKit::WebProcess *v15;
  WTF::StringImpl *v16[2];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  WebKit::ViewSnapshot *v20;
  WebCore::SerializedScriptValue *v21;

  if (!*((_BYTE *)this + 12))
  {
    {
      v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v14 = a2;
      v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v2 = WebKit::WebProcess::WebProcess(v15);
      a2 = v14;
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
    }
    v3 = *((_QWORD *)v2 + 4);
    WebKit::toBackForwardListItemState(a2, (uint64_t)v16);
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 2567;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (WebCore::SerializedScriptValue *)v4;
    IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode((IPC::Encoder *)v4, v16);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
      WTF::RefCounted<WebKit::ViewSnapshot>::deref(v9);
    v10 = v19;
    v19 = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v21 = (WebCore::SerializedScriptValue *)v10;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v21);
      }
    }
    WebKit::FrameState::~FrameState(&v18);
    this = v17;
    v17 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v13);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

char *IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(IPC::Encoder *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *result;

  v2 = a2;
  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = v2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebKit::PageState,void>::encode(a1, v2 + 2);
  LOBYTE(v2) = *((_BYTE *)v2 + 296);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebKit::PageState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WebKit::FrameState,void>::encode(a1, (uint64_t)(v2 + 1));
  v4 = *((_BYTE *)v2 + 256);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v2 + 33);
  LOBYTE(v2) = *((_BYTE *)v2 + 272);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

void IPC::ArgumentCoder<WebKit::FrameState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 56);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_BYTE *)(a2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(unsigned __int8 *)(a2 + 136);
  v9 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    if (!*(_BYTE *)(a2 + 136))
    {
      v18 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v18, v19);
      return;
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 112));
    IPC::VectorArgumentCoder<false,WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 120));
  }
  else
  {
    *v9 = 0;
  }
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 144));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)(a2 + 160));
  v10 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v10;
  v11 = *(_DWORD *)(a2 + 180);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *(_DWORD *)(a2 + 184);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v13 = *(_DWORD *)(a2 + 188);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  LOBYTE(v13) = *(_BYTE *)(a2 + 192);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (int *)(a2 + 196));
  v14 = *(unsigned int *)(a2 + 228);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v14;
  v15 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a2 + 216);
    v17 = 248 * v15;
    do
    {
      IPC::ArgumentCoder<WebKit::FrameState,void>::encode(a1, v16);
      v16 += 248;
      v17 -= 248;
    }
    while (v17);
  }
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 232);
}

void IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(v6);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    IPC::ArgumentCoder<WebCore::SerializedScriptValue::Internals,void>::encode(a1, *a2 + 8);
  }
  else
  {
    *v5 = 0;
  }
}

unsigned int *WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WebCore::Region *v7;
  uint64_t v8;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = 40 * v3;
    v7 = (WebCore::Region *)(*(_QWORD *)a1 + 8);
    do
    {
      WebCore::Region::~Region(v7);
      v7 = (WebCore::Region *)(v8 + 40);
      v6 -= 40;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::Decoder::decode<WebKit::ImageBufferSetPrepareBufferForDisplayInputData>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 40))
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  _BYTE *v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  char v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char v21;
  char v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _BYTE v41[24];
  __int16 v42;
  char v43;
  _BYTE v44[24];
  char v45;

  v2 = (unint64_t *)a1;
  v4 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  IPC::Decoder::decode<WebCore::Region>(v44, v2);
  v7 = v2[1];
  v8 = *v2;
  v9 = v2[2] - *v2;
  if (v7 <= v9)
    goto LABEL_29;
  v10 = (unsigned __int8 *)(v8 + v9);
  v11 = v8 + v9 + 1;
  v2[2] = v11;
  if (!v8)
  {
    v27 = v7;
    v28 = 0;
    goto LABEL_30;
  }
  v12 = *v10;
  if (v12 < 2)
  {
    v13 = 0;
    v14 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *v2 = 0;
    v2[1] = 0;
    v31 = v2[3];
    if (!v31 || !v7)
    {
      v15 = 0;
      v32 = 0;
      v8 = 0;
      v13 = 1;
LABEL_34:
      *v2 = 0;
      v2[1] = 0;
      v33 = v2[3];
      if (v33 && v32)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v8, v32);
        v19 = 0;
        v8 = *v2;
        v7 = v2[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v19 = 0;
      }
      goto LABEL_36;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v8);
    v14 = 0;
    v8 = *v2;
    v7 = v2[1];
    v13 = 1;
    v11 = v2[2];
LABEL_5:
    if (v12)
      v15 = v14;
    else
      v15 = 0;
    v16 = v11 - v8;
    if (v7 <= v16)
    {
      v32 = 0;
      v39 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v39 && v7)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v39 + 16))(v39);
        v8 = *v2;
        v32 = v2[1];
      }
      else
      {
        v8 = 0;
      }
      goto LABEL_34;
    }
    v17 = (unsigned __int8 *)(v8 + v16);
    v18 = v8 + v16 + 1;
    v2[2] = v18;
    if (!v8)
    {
      v32 = v7;
      goto LABEL_34;
    }
    v19 = *v17;
    if (v19 < 2)
    {
      v20 = 0;
      v21 = 1;
      goto LABEL_12;
    }
LABEL_36:
    *v2 = 0;
    v2[1] = 0;
    v34 = v2[3];
    if (!v34 || !v7)
    {
      v22 = 0;
      v35 = 0;
      v8 = 0;
      v20 = 1;
      goto LABEL_38;
    }
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v34 + 16))(v34, v8);
    v21 = 0;
    v8 = *v2;
    v7 = v2[1];
    v20 = 1;
    v18 = v2[2];
LABEL_12:
    v22 = v19 ? v21 : 0;
    v23 = v18 - v8;
    if (v7 <= v23)
      break;
    v24 = (unsigned __int8 *)(v8 + v23);
    v2[2] = (unint64_t)(v24 + 1);
    if (!v8)
    {
      v35 = v7;
      goto LABEL_38;
    }
    v25 = *v24;
    if (v25 > 1)
      goto LABEL_40;
    v26 = 0;
    v2 = (unint64_t *)(v25 != 0);
LABEL_19:
    if (v6)
    {
      v40 = v4;
      if (v45)
      {
        v4 = v41;
        WebCore::Region::Region();
        if (!v13)
        {
          LOBYTE(v42) = v15;
          if (!v20)
          {
            HIBYTE(v42) = v22;
            if (!v26)
            {
              v43 = (char)v2;
              *(_QWORD *)a2 = v40;
              WebCore::Region::Region();
              *(_WORD *)(a2 + 32) = v42;
              *(_BYTE *)(a2 + 34) = v43;
              *(_BYTE *)(a2 + 40) = 1;
              WebCore::Region::~Region((WebCore::Region *)v41);
              goto LABEL_25;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_29:
    v27 = 0;
    v28 = 0;
    *v2 = 0;
    v2[1] = 0;
    v29 = v2[3];
    if (v29)
    {
      if (v7)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v29 + 16))(v29);
        v28 = *v2;
        v27 = v2[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
LABEL_30:
    *v2 = 0;
    v2[1] = 0;
    v30 = v2[3];
    if (v30 && v27)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
      v12 = 0;
      v8 = *v2;
      v7 = v2[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v12 = 0;
    }
  }
  v35 = 0;
  v38 = v2[3];
  *v2 = 0;
  v2[1] = 0;
  if (v38 && v7)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v38 + 16))(v38);
    v8 = *v2;
    v35 = v2[1];
  }
  else
  {
    v8 = 0;
  }
LABEL_38:
  *v2 = 0;
  v2[1] = 0;
  v36 = v2[3];
  if (v36 && v35)
  {
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v36 + 16))(v36, v8, v35);
    v8 = *v2;
    v7 = v2[1];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
LABEL_40:
  *v2 = 0;
  v2[1] = 0;
  v37 = v2[3];
  if (v37)
  {
    if (v7)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v8);
      if (*v2)
      {
        v2 = 0;
        v26 = 1;
        goto LABEL_19;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
LABEL_25:
  if (v45)
    WebCore::Region::~Region((WebCore::Region *)v44);
}

void sub_196C77018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
    WebCore::Region::~Region((WebCore::Region *)&a15);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::RemoteImageBufferSetProxy::didReceiveMessage(unsigned __int8 **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned __int8 **v5;
  unsigned __int8 *result;
  void *v7;
  unint64_t updated;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16[16];
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned int v25[16];
  int v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;

  v5 = this + 2;
  result = (unsigned __int8 *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  if (*((_WORD *)a3 + 25) != 1094)
    goto LABEL_22;
  IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::decode((uint64_t *)a3, (uint64_t)v25);
  if (!v32)
  {
    v12 = *(_QWORD *)a3;
    v13 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v14 = *((_QWORD *)a3 + 3);
    if (!v14 || !v13 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12), !v32))
    {
      LOBYTE(v16[0]) = 0;
      v24 = 0;
      goto LABEL_27;
    }
  }
  updated = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>((uint64_t *)a3);
  if (!v9)
    goto LABEL_32;
  if (!v32)
  {
    __break(1u);
LABEL_32:
    v11 = 0;
    LOBYTE(v16[0]) = 0;
    goto LABEL_8;
  }
  v10 = updated;
  LOBYTE(v16[0]) = 0;
  v18 = 0;
  if (v27)
  {
    v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v16, (uint64_t)v25);
    v18 = 1;
  }
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v10;
  v11 = 1;
LABEL_8:
  v24 = v11;
  if (v32 && v27 && v26 != -1)
  {
    off_1E34B7378[v26]((int)&v33, (WTF::MachSendRight *)v25);
    v11 = v24;
  }
  if (!v11)
  {
LABEL_27:
    v7 = *(void **)a3;
    v15 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    result = (unsigned __int8 *)*((_QWORD *)a3 + 3);
    if (!result)
      goto LABEL_22;
    if (!v15)
      goto LABEL_22;
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, void *))(*(_QWORD *)result + 16))(result, v7);
    if (!v24)
      goto LABEL_22;
  }
  LOBYTE(v25[0]) = 0;
  v27 = 0;
  if (v18)
  {
    v26 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v25, (uint64_t)v16);
    v27 = 1;
  }
  v28 = v19;
  v29 = v20;
  v30 = v21;
  v31 = v22;
  result = (unsigned __int8 *)WebKit::RemoteImageBufferSetProxy::didPrepareForDisplay((uint64_t)this, (uint64_t)v25, v23);
  if (v27 && v26 != -1)
    result = (unsigned __int8 *)off_1E34B7378[v26]((int)&v33, (WTF::MachSendRight *)v25);
  if (v24 && v18 && v17 != -1)
    result = (unsigned __int8 *)off_1E34B7378[v17]((int)v25, (WTF::MachSendRight *)v16);
LABEL_22:
  if (this)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v5, v7);
  return result;
}

WTF *WebKit::RemoteRenderingBackendProxy::didReceiveMessage(WebKit::RemoteRenderingBackendProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  WTF *result;
  char v6;
  WTF *v7;
  void *v8;
  unint64_t v9[3];
  unsigned __int8 v10;
  char v11;
  WTF *v12;
  unint64_t v13;

  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1294:
      result = (WTF *)IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>((uint64_t *)a3);
      if (v6)
      {
        v7 = (WTF *)*((_QWORD *)this + 29);
        if (v7 >= result)
          v7 = result;
        *((_QWORD *)this + 30) = v7;
      }
      break;
    case 1296:
      result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((uint64_t)v9, (uint64_t *)a3);
      if (v11)
      {
        v12 = (WTF *)v9[1];
        v13 = v9[2];
        WebKit::RemoteRenderingBackendProxy::didMarkLayersAsVolatile((uint64_t)this, v9[0], (uint64_t *)&v12, v10);
        result = v12;
        if (v12)
        {
          v12 = 0;
          LODWORD(v13) = 0;
          return (WTF *)WTF::fastFree(result, v8);
        }
      }
      break;
    case 1295:
      return (WTF *)IPC::handleMessage<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy,void ()(IPC::Semaphore &&,IPC::Semaphore &)>(a3, (uint64_t)this);
    default:
      return (WTF *)WebKit::RemoteRenderingBackendProxy::dispatchMessage(this, a2, a3);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>>(uint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::RenderingUpdateIDType>,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferSetProxy::didPrepareForDisplay(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17[16];
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;

  v5 = result;
  v6 = (unsigned __int8 *)(result + 97);
  if (__ldaxr((unsigned __int8 *)(result + 97)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_4;
  }
  result = MEMORY[0x19AEABB3C](result + 97);
LABEL_4:
  v8 = *(_QWORD *)(v5 + 104);
  if (v8 && *(_QWORD *)(v8 + 168) == a3)
  {
    LOBYTE(v17[0]) = 0;
    v19 = 0;
    LOBYTE(v20) = 0;
    v22 = 0;
    LOBYTE(v23) = 0;
    v25 = 0;
    LOBYTE(v26) = 0;
    v28 = 0;
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v17, a2);
    if (*(_BYTE *)(a2 + 96))
    {
      v10 = *(_QWORD *)(a2 + 88);
      v9 = *(_DWORD *)(v5 + 92);
      v11 = 1;
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    v20 = v10;
    v21 = v9;
    v22 = v11;
    if (*(_BYTE *)(a2 + 112))
    {
      v12 = *(_QWORD *)(a2 + 104);
      v9 = *(_DWORD *)(v5 + 92);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v23 = v12;
    v24 = v9;
    v25 = v13;
    if (*(_BYTE *)(a2 + 128))
    {
      v14 = *(_QWORD *)(a2 + 120);
      v9 = *(_DWORD *)(v5 + 92);
      v15 = 1;
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v26 = v14;
    v27 = v9;
    v28 = v15;
    result = WebKit::RemoteImageBufferSetProxyFlushFence::setHandles(*(_QWORD *)(v5 + 104), (uint64_t)v17);
    *(_BYTE *)(v5 + 120) = 0;
    if (*(_BYTE *)(v5 + 121))
    {
      result = *(_QWORD *)(v5 + 112);
      if (result)
      {
        IPC::StreamClientConnection::removeWorkQueueMessageReceiver(result, 0x56u, *(_QWORD *)(v5 + 24));
        result = (uint64_t)WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=((unsigned int **)(v5 + 112));
      }
    }
    if (v19)
    {
      if (v18 != -1)
        result = off_1E34E3470[v18]((int)&v29, (WTF::MachSendRight *)v17);
    }
  }
  v16 = __ldxr(v6);
  if (v16 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

uint64_t WebKit::RemoteImageBufferSetProxyFlushFence::setHandles(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned int *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = (unsigned __int8 *)(a1 + 4);
  if (__ldaxr((unsigned __int8 *)(a1 + 4)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 4);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = (unsigned int *)(a1 + 8);
  if (*(_BYTE *)(a1 + 160))
  {
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v6, a2);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 96);
    v8 = *(_OWORD *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 144);
    *(_OWORD *)(a1 + 136) = v9;
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    if (*(_BYTE *)(a2 + 72))
    {
      *(_DWORD *)(a1 + 72) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v6, a2);
      *(_BYTE *)(a1 + 80) = 1;
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 112);
    v14 = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 144);
    *(_OWORD *)(a1 + 136) = v14;
    *(_OWORD *)(a1 + 120) = v13;
    *(_OWORD *)(a1 + 104) = v12;
    *(_BYTE *)(a1 + 160) = 1;
  }
  result = WTF::Condition::notifyOne((WTF::Condition *)(a1 + 5));
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

BOOL WTF::Condition::notifyOne(WTF::Condition *this)
{
  unsigned __int8 v1;
  _QWORD v3[2];
  char v4;
  _QWORD v5[3];

  v1 = atomic_load((unsigned __int8 *)this);
  if ((v1 & 1) == 0)
    return 0;
  v4 = 0;
  v3[0] = this;
  v3[1] = &v4;
  v5[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
  v5[1] = v5;
  v5[2] = v3;
  WTF::ParkingLot::unparkOneImpl();
  return v4 != 0;
}

char *IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, (unint64_t)a2);
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a1, a2 + 10);
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a1, a2 + 13);
  return IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a1, a2 + 16);
}

char *WebKit::RemoteLayerWithRemoteRenderingBackingStore::encodeBufferAndBackendInfos(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, IPC::Encoder *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  char v10;

  if (*((_BYTE *)this + 336))
  {
    v4 = *(_DWORD *)(*((_QWORD *)this + 40) + 92);
    v8 = *((_QWORD *)this + 41);
    v9 = v4;
    v10 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    v10 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, &v8);
  if (*((_BYTE *)this + 352))
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 40) + 92);
    v8 = *((_QWORD *)this + 43);
    v9 = v5;
    v10 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    v10 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, &v8);
  if (*((_BYTE *)this + 368))
  {
    v6 = *(_DWORD *)(*((_QWORD *)this + 40) + 92);
    v8 = *((_QWORD *)this + 45);
    v9 = v6;
    v10 = 1;
  }
  else
  {
    LOBYTE(v8) = 0;
    v10 = 0;
  }
  return IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, &v8);
}

char *IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(IPC::Encoder *a1, uint64_t *a2)
{
  int v4;
  char *result;
  uint64_t v6;
  int v7;
  IPC::Encoder *v8;
  unint64_t v9;

  v4 = *((unsigned __int8 *)a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*((_BYTE *)a2 + 16))
    {
      v6 = *a2;
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
      v7 = *((_DWORD *)a2 + 2);
      result = IPC::Encoder::grow(a1, 4uLL, 4);
      *(_DWORD *)result = v7;
    }
    else
    {
      v8 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::encode(v8, v9);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, a2);
  v4 = *(_BYTE *)(a2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<WebKit::BufferIdentifierSet,void>::encode(a1, (uint64_t *)(a2 + 88));
}

void IPC::ArgumentCoder<WebKit::ChangedLayers,void>::encode(uint64_t a1, _QWORD **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  void *v20;
  __int128 v21;

  if (*a2)
    v4 = *((_DWORD *)*a2 - 3);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 4)
  {
    v17 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v7);
    v19 = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (v19 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v9 = v19;
    memcpy(v19, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v20 = *(void **)(a1 + 528);
    if (v20 != (void *)(a1 + 16))
      munmap(v20, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v18;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v12 = v11;
  v14 = v13;
  if (*a2)
    v15 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v15 = 0;
  if ((uint64_t *)v15 != v11)
  {
    do
    {
      v21 = *(_OWORD *)(*v12 + 16);
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)a1, (uint64_t *)&v21);
      v16 = *v12++;
      IPC::ArgumentCoder<WebKit::LayerProperties,void>::encode((IPC::Encoder *)a1, (uint64_t *)(v16 + 64));
      while (v12 != v14)
      {
        if ((unint64_t)(*v12 + 1) > 1)
          goto LABEL_13;
        ++v12;
      }
      v12 = v14;
LABEL_13:
      ;
    }
    while (v12 != (uint64_t *)v15);
  }
}

void IPC::ArgumentCoder<WebKit::LayerProperties,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  IPC::Encoder *v39;
  int *v40;

  v4 = (uint64_t *)*a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 1) != 0)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
    v5 = (uint64_t *)*a2;
    if ((*a2 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(a1, (uint64_t **)a2 + 3);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(a1, (uint64_t **)a2 + 4);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_50;
  }
LABEL_46:
  v6 = a2[5];
  v7 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (int *)a2[5]);
  }
  else
  {
    *v7 = 0;
  }
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_51;
  }
LABEL_50:
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 6));
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_52;
  }
LABEL_51:
  IPC::ArgumentCoder<WebKit::LayerProperties::AnimationChanges,void>::encode(a1, (uint64_t)(a2 + 8));
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_53;
  }
LABEL_52:
  IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(a1, (int *)a2 + 88);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x80) == 0)
  {
LABEL_9:
    if (((unsigned __int16)v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_54;
  }
LABEL_53:
  IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(a1, (int *)a2 + 91);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x100) == 0)
  {
LABEL_10:
    if (((unsigned __int16)v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_54:
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2 + 94);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x200) == 0)
  {
LABEL_11:
    if (((unsigned __int16)v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_56;
  }
LABEL_55:
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2 + 98);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x400) == 0)
  {
LABEL_12:
    if (((unsigned __int16)v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_57;
  }
LABEL_56:
  IPC::ArgumentCoder<WebKit::RemoteLayerBackingStoreOrProperties,void>::encode((uint64_t)a1, (WebKit::RemoteLayerBackingStore **)a2 + 51);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x800) == 0)
  {
LABEL_13:
    if (((unsigned __int16)v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_57:
  v8 = a2[53];
  v9 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2[53]);
  }
  else
  {
    *v9 = 0;
  }
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x1000) == 0)
  {
LABEL_14:
    if (((unsigned __int16)v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, (WebCore::Path *)(a2 + 54));
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x2000) == 0)
  {
LABEL_15:
    if (((unsigned __int16)v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits> const&>(a1, a2 + 63);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x4000) == 0)
  {
LABEL_16:
    if (((unsigned __int16)v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  IPC::ArgumentCoder<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::MarkableTraits> const&>(a1, a2 + 65);
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  v10 = a2[67];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  v11 = *((_DWORD *)a2 + 136);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  v12 = *((_DWORD *)a2 + 137);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  v13 = *((_DWORD *)a2 + 138);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  v14 = *((_DWORD *)a2 + 139);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  v15 = *((_DWORD *)a2 + 140);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 71));
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 72));
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  v16 = *((_BYTE *)a2 + 584);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  v17 = *((_BYTE *)a2 + 585);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  v18 = *((_BYTE *)a2 + 586);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v18;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  v19 = *((_BYTE *)a2 + 587);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v19;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  v20 = *((_BYTE *)a2 + 588);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  v21 = *((_BYTE *)a2 + 589);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  v22 = *((_BYTE *)a2 + 590);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  v23 = *((_BYTE *)a2 + 591);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x80000000) == 0)
  {
LABEL_33:
    if (((unint64_t)v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  v24 = *((_BYTE *)a2 + 592);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x100000000) == 0)
  {
LABEL_34:
    if (((unint64_t)v5 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  v25 = *((_BYTE *)a2 + 593);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v25;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x200000000) == 0)
  {
LABEL_35:
    if (((unint64_t)v5 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  v26 = *((_BYTE *)a2 + 594);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v26;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x400000000) == 0)
  {
LABEL_36:
    if (((unint64_t)v5 & 0x800000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  v27 = *((_BYTE *)a2 + 595);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v27;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x800000000) == 0)
  {
LABEL_37:
    if (((unint64_t)v5 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  v28 = *((_BYTE *)a2 + 596);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v28;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x1000000000) == 0)
  {
LABEL_38:
    if (((unint64_t)v5 & 0x2000000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  v29 = *((_BYTE *)a2 + 597);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v29;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x2000000000) == 0)
  {
LABEL_39:
    if (((unint64_t)v5 & 0x4000000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  v30 = *((_BYTE *)a2 + 598);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v30;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x4000000000) == 0)
  {
LABEL_40:
    if (((unint64_t)v5 & 0x8000000000) == 0)
      goto LABEL_41;
LABEL_87:
    v32 = *((_BYTE *)a2 + 600);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v32;
    if ((*a2 & 0x10000000000) == 0)
      return;
    goto LABEL_88;
  }
LABEL_86:
  v31 = *((_BYTE *)a2 + 599);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v31;
  v5 = (uint64_t *)*a2;
  if ((*a2 & 0x8000000000) != 0)
    goto LABEL_87;
LABEL_41:
  if (((unint64_t)v5 & 0x10000000000) == 0)
    return;
LABEL_88:
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 76));
  v33 = *((unsigned int *)a2 + 161);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v33;
  v34 = *((unsigned int *)a2 + 161);
  if ((_DWORD)v34)
  {
    v35 = a2[79];
    v36 = 24 * v34;
    do
    {
      IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, v35);
      v35 += 24;
      v36 -= 24;
    }
    while (v36);
  }
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 81));
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 84));
  v37 = *((unsigned __int8 *)a2 + 720);
  v38 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v37)
  {
    *v38 = 1;
    if (*((_BYTE *)a2 + 720))
    {
      IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(a2 + 87));
    }
    else
    {
      v39 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v39, v40);
    }
  }
  else
  {
    *v38 = 0;
  }
}

char *IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v6;
  return result;
}

void IPC::ArgumentCoder<WebCore::Region,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  WTF *v5;
  WTF *v6[2];

  *(_OWORD *)v6 = *(_OWORD *)a2;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (uint64_t *)v6);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>(v4, (uint64_t *)v6);
  else
    v6[0] = 0;
  IPC::ArgumentCoder<std::unique_ptr<WebCore::Region::Shape>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::Region::Shape>>(a1, (uint64_t *)v6);
  v5 = v6[0];
  v6[0] = 0;
  if (v5)
    std::default_delete<WebCore::Region::Shape>::operator()[abi:sn180100]((int)v6, v5);
}

void sub_196C78210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  WTF *v10;

  v10 = a9;
  a9 = 0;
  if (v10)
    std::default_delete<WebCore::Region::Shape>::operator()[abi:sn180100]((int)&a9, v10);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::IntRect,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *a2;
  v5 = HIDWORD(*a2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = HIDWORD(v6);
  return result;
}

void IPC::ArgumentCoder<WebKit::RemoteLayerBackingStoreOrProperties,void>::encode(uint64_t a1, WebKit::RemoteLayerBackingStore **a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  void *v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  void *v24;

  if (!*a2)
  {
    v11 = *(_QWORD *)(a1 + 544);
    v12 = v11 + 1;
    v13 = *(_QWORD *)(a1 + 552);
    if (v13 < v11 + 1)
    {
      v21 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v22 = v21;
        v21 *= 2;
      }
      while (v22 < v12);
      v23 = (char *)mmap(0, v22, 3, 4098, -1, 0);
      if (v23 == (char *)-1)
        goto LABEL_22;
      v14 = v23;
      memcpy(v23, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v24 = *(void **)(a1 + 528);
      if (v24 != (void *)(a1 + 16))
        munmap(v24, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v14;
      *(_QWORD *)(a1 + 552) = v22;
      v15 = *(_QWORD *)(a1 + 544);
    }
    else
    {
      v14 = *(char **)(a1 + 528);
      v15 = *(_QWORD *)(a1 + 544);
    }
    bzero(&v14[v15], v11 - v15);
    *(_QWORD *)(a1 + 544) = v12;
    v16 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v11);
    *(_QWORD *)(a1 + 536) = v16 + 1;
    *v16 = 0;
    return;
  }
  v4 = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)*a2 + 72))(*a2);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v17 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v6);
    v19 = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (v19 != (char *)-1)
    {
      v8 = v19;
      memcpy(v19, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v20 = *(void **)(a1 + 528);
      if (v20 != (void *)(a1 + 16))
        munmap(v20, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v8;
      *(_QWORD *)(a1 + 552) = v18;
      v9 = *(_QWORD *)(a1 + 544);
      goto LABEL_4;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x196C784A4);
  }
  v8 = *(char **)(a1 + 528);
  v9 = *(_QWORD *)(a1 + 544);
LABEL_4:
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  if (v4)
    WebKit::RemoteLayerBackingStore::encode(*a2, (IPC::Encoder *)a1);
}

void WebKit::RemoteLayerBackingStore::encode(WebKit::RemoteLayerBackingStore *this, IPC::Encoder *a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  uint64_t v50[8];
  int v51;
  char v52;
  unsigned int v53[16];
  int v54;
  char v55;
  char v56;

  v4 = *((_BYTE *)this + 53);
  v5 = *((_QWORD *)a2 + 68);
  v6 = v5 + 1;
  v7 = *((_QWORD *)a2 + 69);
  if (v7 < v5 + 1)
  {
    v34 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v35 = v34;
      v34 *= 2;
    }
    while (v35 < v6);
    v36 = (char *)mmap(0, v35, 3, 4098, -1, 0);
    if (v36 == (char *)-1)
      goto LABEL_53;
    v8 = v36;
    memcpy(v36, *((const void **)a2 + 66), *((_QWORD *)a2 + 68));
    v37 = (char *)*((_QWORD *)a2 + 66);
    if (v37 != (char *)a2 + 16)
      munmap(v37, *((_QWORD *)a2 + 69));
    *((_QWORD *)a2 + 66) = v8;
    *((_QWORD *)a2 + 69) = v35;
    v9 = *((_QWORD *)a2 + 68);
  }
  else
  {
    v8 = (char *)*((_QWORD *)a2 + 66);
    v9 = *((_QWORD *)a2 + 68);
  }
  bzero(&v8[v9], v5 - v9);
  *((_QWORD *)a2 + 68) = v6;
  v10 = (_BYTE *)(*((_QWORD *)a2 + 66) + v5);
  *((_QWORD *)a2 + 67) = v10 + 1;
  *v10 = v4;
  v11 = *((_BYTE *)this + 24);
  v12 = *((_QWORD *)a2 + 68);
  v13 = v12 + 1;
  v14 = *((_QWORD *)a2 + 69);
  if (v14 < v12 + 1)
  {
    v38 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v39 = v38;
      v38 *= 2;
    }
    while (v39 < v13);
    v40 = (char *)mmap(0, v39, 3, 4098, -1, 0);
    if (v40 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x196C7892CLL);
    }
    v15 = v40;
    memcpy(v40, *((const void **)a2 + 66), *((_QWORD *)a2 + 68));
    v41 = (char *)*((_QWORD *)a2 + 66);
    if (v41 != (char *)a2 + 16)
      munmap(v41, *((_QWORD *)a2 + 69));
    *((_QWORD *)a2 + 66) = v15;
    *((_QWORD *)a2 + 69) = v39;
    v16 = *((_QWORD *)a2 + 68);
  }
  else
  {
    v15 = (char *)*((_QWORD *)a2 + 66);
    v16 = *((_QWORD *)a2 + 68);
  }
  bzero(&v15[v16], v12 - v16);
  *((_QWORD *)a2 + 68) = v13;
  v17 = (_BYTE *)(*((_QWORD *)a2 + 66) + v12);
  *((_QWORD *)a2 + 67) = v17 + 1;
  *v17 = v11;
  LOBYTE(v53[0]) = 0;
  v55 = 0;
  if (*((_BYTE *)this + 176))
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v50, (unsigned int *)this + 26);
    std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>((uint64_t)v53, (uint64_t)v50);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, WebKit::RemoteLayerBackingStore *))(*(_QWORD *)this + 104))(v50, this);
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v53, (uint64_t)v50);
    if (!v52)
      goto LABEL_9;
  }
  if (v51 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v51]((int)&v56, (WTF::MachSendRight *)v50);
LABEL_9:
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a2, (unint64_t)v53);
  v18 = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)this + 112))(this);
  v20 = v19;
  v50[0] = v18;
  v50[1] = v19;
  v21 = *((_QWORD *)a2 + 68);
  v22 = v21 + 1;
  v23 = *((_QWORD *)a2 + 69);
  if (v23 < v21 + 1)
  {
    v42 = (2 * v23 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v43 = v42;
      v42 *= 2;
    }
    while (v43 < v22);
    v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
    if (v44 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x196C78934);
    }
    v24 = v44;
    memcpy(v44, *((const void **)a2 + 66), *((_QWORD *)a2 + 68));
    v45 = (char *)*((_QWORD *)a2 + 66);
    if (v45 != (char *)a2 + 16)
      munmap(v45, *((_QWORD *)a2 + 69));
    *((_QWORD *)a2 + 66) = v24;
    *((_QWORD *)a2 + 69) = v43;
    v25 = *((_QWORD *)a2 + 68);
  }
  else
  {
    v24 = (char *)*((_QWORD *)a2 + 66);
    v25 = *((_QWORD *)a2 + 68);
  }
  bzero(&v24[v25], v21 - v25);
  *((_QWORD *)a2 + 68) = v22;
  v26 = (_BYTE *)(*((_QWORD *)a2 + 66) + v21);
  *((_QWORD *)a2 + 67) = v26 + 1;
  if (v20)
  {
    *v26 = 1;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a2, v50);
  }
  else
  {
    *v26 = 0;
  }
  (*(void (**)(WebKit::RemoteLayerBackingStore *, IPC::Encoder *))(*(_QWORD *)this + 88))(this, a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t *)this + 23);
  v27 = *((unsigned __int8 *)this + 96);
  v28 = *((_QWORD *)a2 + 68);
  v29 = v28 + 1;
  v30 = *((_QWORD *)a2 + 69);
  if (v30 < v28 + 1)
  {
    v46 = (2 * v30 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v47 = v46;
      v46 *= 2;
    }
    while (v47 < v29);
    v48 = (char *)mmap(0, v47, 3, 4098, -1, 0);
    if (v48 == (char *)-1)
      goto LABEL_53;
    v31 = v48;
    memcpy(v48, *((const void **)a2 + 66), *((_QWORD *)a2 + 68));
    v49 = (char *)*((_QWORD *)a2 + 66);
    if (v49 != (char *)a2 + 16)
      munmap(v49, *((_QWORD *)a2 + 69));
    *((_QWORD *)a2 + 66) = v31;
    *((_QWORD *)a2 + 69) = v47;
    v32 = *((_QWORD *)a2 + 68);
  }
  else
  {
    v31 = (char *)*((_QWORD *)a2 + 66);
    v32 = *((_QWORD *)a2 + 68);
  }
  bzero(&v31[v32], v28 - v32);
  *((_QWORD *)a2 + 68) = v29;
  v33 = (_BYTE *)(*((_QWORD *)a2 + 66) + v28);
  *((_QWORD *)a2 + 67) = v33 + 1;
  if (v27)
  {
    *v33 = 1;
    if (*((_BYTE *)this + 96))
    {
      IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a2, (uint64_t *)this + 10);
      goto LABEL_18;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x196C78924);
  }
  *v33 = 0;
LABEL_18:
  if (v55)
  {
    if (v54 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v54]((int)v50, (WTF::MachSendRight *)v53);
  }
}

void sub_196C78940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,char a34)
{
  uint64_t v34;

  if (a18 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[a18](v34 - 65, (WTF::MachSendRight *)&a10);
  if (a34)
  {
    if (a32 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[a32]((int)&a10, (WTF::MachSendRight *)&a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::bufferSetIdentifier(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 40);
  if (v1)
    return *(_QWORD *)(v1 + 24);
  else
    return 0;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::frontBufferHandle@<X0>(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)this + 376);
  if (*((_BYTE *)this + 448))
  {
    v4 = *((unsigned int *)this + 110);
    if ((_DWORD)v4 != -1)
      result = off_1E34B91A0[v4]((int)&v5, (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)((char *)this + 376));
    *((_DWORD *)this + 110) = -1;
    *((_BYTE *)this + 448) = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  char *v38;
  uint64_t v39;
  char *result;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  id v50;

  v4 = (_QWORD *)*a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WebKit::ChangedLayers,void>::encode((uint64_t)a1, (_QWORD **)a2 + 2);
  v6 = a2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6 == 0;
  if (v6)
  {
    v47 = a2[4];
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v47;
  }
  v7 = *((unsigned int *)a2 + 13);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v8)
  {
    v41 = 80 * v8;
    v42 = (unsigned __int8 *)(a2[5] + 48);
    do
    {
      v43 = *((_QWORD *)v42 - 6);
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v43;
      v44 = *((_QWORD *)v42 - 5);
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v44;
      LOBYTE(v44) = *(v42 - 32);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v44;
      LODWORD(v44) = *v42;
      v45 = IPC::Encoder::grow(a1, 1uLL, 1);
      if ((_DWORD)v44)
      {
        *v45 = 1;
        if (!*v42)
          goto LABEL_24;
        IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::VideoElementData,void>::encode(a1, (int *)v42 - 6);
      }
      else
      {
        *v45 = 0;
      }
      v46 = *((_DWORD *)v42 + 6);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v46;
      if ((_BYTE)v46)
      {
        IPC::ArgumentCoder<std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::variant<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,0ul>(a1, (unsigned int *)v42 + 2, v46);
      }
      else if (*((_DWORD *)v42 + 6))
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
        v50 = std::__throw_bad_optional_access[abi:sn180100]();
        return (char *)IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::decode(v50);
      }
      v42 += 80;
      v41 -= 80;
    }
    while (v41);
  }
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 7));
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 9));
  IPC::VectorArgumentCoder<false,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 11));
  v9 = *((unsigned int *)a2 + 29);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = *((unsigned int *)a2 + 29);
  if ((_DWORD)v10)
  {
    v48 = (uint64_t *)a2[13];
    v49 = 8 * v10;
    do
    {
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, v48++);
      v49 -= 8;
    }
    while (v49);
  }
  v11 = *((_DWORD *)a2 + 30);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *((_DWORD *)a2 + 31);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v13 = *((_DWORD *)a2 + 32);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v14 = *((_DWORD *)a2 + 33);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v15 = *((_DWORD *)a2 + 34);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v15;
  v16 = *((_DWORD *)a2 + 35);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v16;
  v17 = *((_DWORD *)a2 + 36);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v17;
  v18 = *((_DWORD *)a2 + 37);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v18;
  v19 = *((_DWORD *)a2 + 38);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v19;
  v20 = *((_DWORD *)a2 + 39);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v20;
  v21 = *((_DWORD *)a2 + 40);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v21;
  v22 = *((_DWORD *)a2 + 41);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v22;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 21));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 22));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 23));
  v23 = a2[24];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v23;
  v24 = a2[25];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v24;
  v25 = a2[26];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v25;
  v26 = a2[27];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v26;
  v27 = a2[28];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v27;
  v28 = a2[29];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v28;
  v29 = a2[30];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v29;
  v30 = a2[31];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v30;
  LOWORD(v30) = *((_WORD *)a2 + 128);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v30;
  v31 = *((_BYTE *)a2 + 258);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v31;
  v32 = *((_BYTE *)a2 + 259);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v32;
  v33 = *((_BYTE *)a2 + 260);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v33;
  v34 = *((_BYTE *)a2 + 261);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v34;
  v35 = *((_BYTE *)a2 + 262);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v35;
  v36 = *((_BYTE *)a2 + 263);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v36;
  v37 = *((unsigned __int8 *)a2 + 752);
  v38 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v37)
  {
    *v38 = 1;
    if (!*((_BYTE *)a2 + 752))
      goto LABEL_24;
    IPC::ArgumentCoder<WebKit::EditorState,void>::encode(a1, a2 + 34);
  }
  else
  {
    *v38 = 0;
  }
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2 + 96);
  v39 = a2[98];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v39;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;
  _BYTE v15[56];
  _BYTE v16[64];
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v3 = a1;
  v30 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, (uint64_t)v16);
  v5 = IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(v3);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v10);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v23);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v20);
  v6 = *v3;
  if (!*v3)
    goto LABEL_18;
  if (!v12)
    goto LABEL_17;
  if (!v25)
    goto LABEL_17;
  v3 = (uint64_t *)v10;
  v2 = v11;
  *(_QWORD *)((char *)&v29 + 7) = v23;
  HIBYTE(v29) = v24;
  if (!v22)
    goto LABEL_17;
  *(_QWORD *)((char *)&v28 + 7) = v20;
  HIBYTE(v28) = v21;
  v26 = v28;
  v27 = v29;
  while (1)
  {
    if (v19)
    {
      std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)&v10, (uint64_t)v16);
      if (v5 > 0xFFu)
      {
        v15[0] = v5;
        if (v6)
          break;
      }
    }
LABEL_17:
    __break(1u);
LABEL_18:
    v9 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    result = v3[3];
    if (!result
      || !v9
      || (result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0), !*v3))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 136) = 0;
      goto LABEL_12;
    }
    v3 = 0;
  }
  v15[8] = (_BYTE)v3;
  *(_QWORD *)&v15[9] = v2;
  *(_OWORD *)&v15[17] = v27;
  *(_OWORD *)&v15[33] = v26;
  result = std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)&v10);
  v8 = *(_OWORD *)&v15[16];
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v15;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v15[32];
  *(_QWORD *)(a2 + 128) = *(_QWORD *)&v15[48];
  *(_BYTE *)(a2 + 136) = 1;
  if (v14 && v13 != -1)
    result = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13]((int)&v23, (WTF::MachSendRight *)&v10);
LABEL_12:
  if (v19 && v18 && v17 != -1)
    return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17]((int)&v10, (WTF::MachSendRight *)v16);
  return result;
}

void sub_196C79188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (a19)
  {
    if (a17 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[a17](v27 - 168, (WTF::MachSendRight *)&a9);
  }
  std::optional<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>::~optional((uint64_t)&a27);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<WebKit::VisibleContentRectUpdateInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char *result;

  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (int *)(a2 + 32));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 64));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 80));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (int *)(a2 + 96));
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (int *)(a2 + 112));
  v4 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_BYTE *)(a2 + 168);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 169);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 170);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 171);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WebCore::VelocityData,void>::encode(a1, (int *)(a2 + 128));
  v9 = *(_QWORD *)(a2 + 152);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v9;
  return result;
}

char *IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char *result;

  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v7;
  return result;
}

char *IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = a2[3];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v7;
  return result;
}

char *IPC::ArgumentCoder<WebCore::VelocityData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = a2[2];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *((_QWORD *)a2 + 2);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::SwapBuffersDisplayRequirement,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  BOOL v1;
  int v2;
  int v3;
  __int16 v5;

  v5 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v5);
  if (HIBYTE(v5))
    v1 = v5 >= 3u;
  else
    v1 = 1;
  if (v1)
    v2 = 0;
  else
    v2 = v5;
  v3 = !v1;
  return v2 | (v3 << 8);
}

char *IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = a2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = a2[6];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = a2[7];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v11;
  v12 = a2[8];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v12;
  v13 = a2[9];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v13;
  v14 = a2[10];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v14;
  v15 = a2[11];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v15;
  v16 = a2[12];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v16;
  v17 = a2[13];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v17;
  v18 = a2[14];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v18;
  v19 = a2[15];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v19;
  return result;
}

char *IPC::ArgumentCoder<std::unique_ptr<WebCore::TransformationMatrix>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::TransformationMatrix> const&>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t *v4;
  char *result;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    return IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(a1, *a2);
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setBeginTime(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  if (a2 != 0.0)
    *(_BYTE *)(this + 84) = 1;
  return this;
}

unsigned int *WebKit::WebProcessPool::prewarmProcess(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  _BOOL8 v5;
  char v6;
  __int16 isLockdownModeEnabledBySystemIgnoringCaching;
  unsigned int *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v1 = (uint64_t)this;
  v11 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  if (!v2 || !*(_QWORD *)(v2 + 8))
  {
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      unk_1ECE73890 = 0u;
    }
    this = (unsigned int *)WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
    v3 = WebKit::liveProcessesLRU(void)::processes;
    if ((_QWORD)WebKit::liveProcessesLRU(void)::processes)
      v3 = *(_DWORD *)(WebKit::liveProcessesLRU(void)::processes - 12);
    if (v3 < WebKit::s_maxProcessCount)
    {
      v4 = qword_1ECE71578;
      v5 = os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        *(_DWORD *)buf = 134217984;
        v10 = v1;
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::prewarmProcess: Prewarming a WebProcess for performance", buf, 0xCu);
      }
      if (HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
      {
        v6 = (_BYTE)WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally != 0;
      }
      else
      {
        isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)v5);
        v6 = isLockdownModeEnabledBySystemIgnoringCaching;
        WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = isLockdownModeEnabledBySystemIgnoringCaching | 0x100;
      }
      this = WebKit::WebProcessPool::createNewWebProcess(v1, 0, v6, 1, 0, &v8);
      if (v8)
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8 + 4);
    }
  }
  return this;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  void *v4;
  _BYTE v5[16];
  char v6;

  result = IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, v5);
  if (v6)
  {
    result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder,std::optional<WebCore::Color>>((uint64_t)v5, a2);
    if (v6)
      return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder,std::optional<WebCore::Color>>@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (uint64_t)a2;
  if (*(_BYTE *)(a1 + 16))
  {
    *a2 = 0;
    a2[8] = 0;
    if (*(_BYTE *)(a1 + 8))
    {
      result = WebCore::Color::Color();
      *(_BYTE *)(result + 8) = 1;
    }
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::WebPage::setBackgroundColor(uint64_t *a1, uint64_t *a2)
{
  WebCore::Color *v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;

  v4 = (WebCore::Color *)(a1 + 225);
  result = std::operator==[abi:sn180100]<WebCore::Color,WebCore::Color>(a1 + 225, a2);
  if ((result & 1) == 0)
  {
    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>(v4, (uint64_t)a2);
    v6 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
    if (v6)
    {
      v7 = (_DWORD *)v6;
      ++*(_DWORD *)(v6 + 8);
      WebCore::LocalFrameView::updateBackgroundRecursively();
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 40))(a1[9]);
  }
  return result;
}

void sub_196C79C18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  va_list va;

  va_start(va, a4);
  if ((a4 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WebCore::Color *WebKit::WebPageProxy::setBackgroundColor(uint64_t a1, uint64_t *a2)
{
  WebCore::Color *result;
  unsigned __int8 *v5;

  result = (WebCore::Color *)std::operator==[abi:sn180100]<WebCore::Color,WebCore::Color>((uint64_t *)(*(_QWORD *)(a1 + 32) + 88), a2);
  if ((result & 1) == 0)
  {
    result = std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>((WebCore::Color *)(*(_QWORD *)(a1 + 32) + 88), (uint64_t)a2);
    if (!*(_BYTE *)(a1 + 729))
    {
      if (*(_BYTE *)(a1 + 728))
      {
        v5 = (unsigned __int8 *)a2;
        return (WebCore::Color *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundColor>(*(_QWORD *)(a1 + 208), &v5, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
      }
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4;
  char *v5;
  WKWebView *v6;
  SEL v7;
  id v8;

  v4 = a2[8];
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (a2[8])
    {
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
    }
    else
    {
      v6 = (WKWebView *)std::__throw_bad_optional_access[abi:sn180100]();
      -[WKWebView setBackgroundColor:](v6, v7, v8);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void sub_196C79E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebProcessPool::createNewWebProcess@<X0>(uint64_t a1@<X0>, WebKit::WebsiteDataStore *a2@<X1>, char a3@<W2>, int a4@<W3>, char a5@<W4>, unsigned int **a6@<X8>)
{
  unsigned int *v10;
  unsigned int *result;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;

  WebKit::WebProcessProxy::create(a1, (uint64_t)a2, a3, a4, a5, 1, a6);
  v10 = *a6;
  WebKit::WebProcessPool::initializeNewWebProcess(a1, (uint64_t)v10, a2, a4);
  result = (unsigned int *)(a1 + 72);
  v12 = v10 + 4;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v19 = v10;
  v14 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 80))
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v14 + 1, (unint64_t)&v19);
    v15 = *(unsigned int *)(a1 + 84);
    v16 = *(_QWORD *)(a1 + 72);
    v17 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(v16 + 8 * v15) = v17;
    v18 = v19;
    *(_DWORD *)(a1 + 84) = v15 + 1;
    v19 = 0;
    if (v18)
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v18 + 4);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v14) = v10;
    *(_DWORD *)(a1 + 84) = v14 + 1;
  }
  return result;
}

BOOL WebKit::doesAppHaveTrackingPreventionEnabled(WebKit *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v6;

  {
    v1 = WebKit::itpQueue(void)::itpQueue;
    if (WebKit::itpQueue(void)::itpQueue)
    {
      v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v2 = off_1E34B7AA8;
      v6 = v2;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v1 + 24))(v1, &v6);
      v3 = v6;
      v6 = 0;
      if (v3)
        (*(void (**)(_QWORD *))(*v3 + 8))(v3);
    }
  }
  else
  {
    WebKit::itpQueue(void)::itpQueue = 0;
  }
  v4 = atomic_load(WebKit::currentTrackingPreventionState);
  return v4 == 1;
}

void sub_196C79FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebKit::WebProcessProxy::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, int a6@<W5>, unsigned int **a7@<X8>)
{
  uint64_t v14;
  WTF::StringImpl **result;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  _QWORD **v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  WTF *v40;

  v14 = WTF::fastMalloc((WTF *)0x478);
  result = (WTF::StringImpl **)WebKit::WebProcessProxy::WebProcessProxy(v14, a1, a2, a4, a5, a3);
  *a7 = (unsigned int *)result;
  if (!a6)
    return result;
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
  v16 = WebKit::liveProcessesLRU(void)::processes;
  if ((_QWORD)WebKit::liveProcessesLRU(void)::processes)
    v16 = *(_DWORD *)(WebKit::liveProcessesLRU(void)::processes - 12);
  if (v16 >= WebKit::s_maxProcessCount)
  {
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v38);
    if (v39)
    {
      v18 = v38;
      v19 = 8 * v39;
      do
      {
        v20 = *(_DWORD **)(*(_QWORD *)v18 + 768);
        ++*v20;
        WebKit::WebProcessCache::clear((uint64_t)v20);
        if (!*v20)
        {
          __break(0xC471u);
          JUMPOUT(0x196C7A244);
        }
        --*v20;
        v18 += 8;
        v19 -= 8;
      }
      while (v19);
    }
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v17);
    {
      WebKit::liveProcessesLRU(void)::processes = 0u;
      unk_1ECE73890 = 0u;
    }
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
    v21 = WebKit::liveProcessesLRU(void)::processes;
    if ((_QWORD)WebKit::liveProcessesLRU(void)::processes)
      v21 = *(_DWORD *)(WebKit::liveProcessesLRU(void)::processes - 12);
    if (v21 >= WebKit::s_maxProcessCount)
    {
      {
        WebKit::liveProcessesLRU(void)::processes = 0u;
        unk_1ECE73890 = 0u;
      }
      v22 = (_QWORD **)&WebKit::liveProcessesLRU(void)::processes + 1;
      do
      {
        v23 = *v22;
        v24 = *v23;
        v22 = (_QWORD **)(v23 + 2);
        v25 = *(unsigned int **)(v24 + 8);
      }
      while (!v25);
      v26 = v25 + 4;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      WebKit::WebProcessProxy::requestTermination(v25, 6);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v26);
    }
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
    v28 = *a7;
    dword_1ECE73898 = 1;
    goto LABEL_25;
  }
  v28 = *a7;
  if (++dword_1ECE73898 > *(_DWORD *)algn_1ECE7389C)
LABEL_25:
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v28 + 2, (uint64_t)v28);
  v29 = (unsigned int *)*((_QWORD *)v28 + 1);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 + 1, v29));
  v40 = (WTF *)v29;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)&WebKit::liveProcessesLRU(void)::processes, (uint64_t *)&v40, (uint64_t)&v38);
  v33 = (unsigned int *)v40;
  v40 = 0;
  if (v33)
  {
    do
    {
      v36 = __ldaxr(v33);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v33));
    if (!v37)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v32);
    }
  }
  if (v29)
  {
    do
    {
      v34 = __ldaxr(v29);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v29));
    if (!v35)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v32);
    }
  }
  return WebKit::AuxiliaryProcessProxy::connect((WebKit::AuxiliaryProcessProxy *)v28);
}

uint64_t WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v9;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (uint64_t *)v2[2];
      if (!*(_QWORD *)(*v2 + 8))
      {
        v9 = v2;
        v5 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>((uint64_t *)a1, &v9);
        v6 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v6 += 8 * *(unsigned int *)(v6 - 4);
        if ((_QWORD *)v6 != v5)
          WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, v5);
        WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, (WTF *)v2);
        v3 = 1;
      }
      v2 = v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
  v7 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)a1)
  {
    v7 = *(_DWORD *)(*(_QWORD *)a1 - 12);
    if (v7 > 0x7FFFFFFE)
      v7 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 28) = 2 * v7;
  return v3 & 1;
}

WTF::StringImpl **WebKit::AuxiliaryProcessProxy::connect(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl **result;
  _QWORD v8[2];
  WTF::StringImpl **v9;
  __int16 v10;

  WTF::MonotonicTime::now(this);
  *((_QWORD *)this + 24) = v2;
  v8[1] = 0;
  v9 = 0;
  v10 = 0;
  (*(void (**)(WebKit::AuxiliaryProcessProxy *, _QWORD *))(*(_QWORD *)this + 160))(this, v8);
  v3 = WTF::fastMalloc((WTF *)0x70);
  v4 = WebKit::ProcessLauncher::ProcessLauncher(v3, (uint64_t)this + 24, (uint64_t)v8);
  v6 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v4;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), v5);
  result = v9;
  if (v9)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, (WTF::StringImpl *)v5);
  return result;
}

uint64_t WebKit::ProcessLauncher::ProcessLauncher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)a1 = off_1E34B2968;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 88) = v7;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a3 + 24);
  *(_BYTE *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 108) = 0;
  kdebug_trace();
  WebKit::ProcessLauncher::launchProcess((WebKit::ProcessLauncher *)a1);
  return a1;
}

void WebKit::ProcessLauncher::launchProcess(WebKit::ProcessLauncher *this)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  _QWORD *v7;
  const __CFString *v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;

  v2 = *((_DWORD *)this + 18);
  v3 = *((_QWORD *)this + 2);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34CB830;
  if (v2 == 2)
  {
    CFRetain(CFSTR("com.apple.WebKit.GPU"));
    v9 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
    if (v9)
      v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
    else
      v10 = 0;
    v7 = malloc_type_malloc(0x48uLL, 0x10F0040C4F18851uLL);
    *v7 = MEMORY[0x1E0C809A0];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::{lambda(void *,BERenderingProcess *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(BERenderingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_2)::descriptor;
    v7[4] = v4;
    v7[5] = v10;
    v7[6] = this;
    v7[7] = "com.apple.WebKit.GPU";
    v7[8] = 21;
    v8 = CFSTR("com.apple.WebKit.GPU");
    objc_msgSend(MEMORY[0x1E0C926F8], "renderingProcessWithBundleID:interruptionHandler:completion:", CFSTR("com.apple.WebKit.GPU"), &__block_literal_global_47, v7);
  }
  else if (v2 == 1)
  {
    CFRetain(CFSTR("com.apple.WebKit.Networking"));
    v5 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
    if (v5)
      v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
    else
      v6 = 0;
    v7 = malloc_type_malloc(0x48uLL, 0x10F0040C4F18851uLL);
    *v7 = MEMORY[0x1E0C809A0];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::{lambda(void *,BENetworkingProcess *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(BENetworkingProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_1)::descriptor;
    v7[4] = v4;
    v7[5] = v6;
    v7[6] = this;
    v7[7] = "com.apple.WebKit.Networking";
    v7[8] = 28;
    v8 = CFSTR("com.apple.WebKit.Networking");
    objc_msgSend(MEMORY[0x1E0C926E8], "networkProcessWithBundleID:interruptionHandler:completion:", CFSTR("com.apple.WebKit.Networking"), &__block_literal_global_44, v7);
  }
  else
  {
    if (v3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) & 1) != 0)
      v8 = CFSTR("com.apple.WebKit.WebContent.CaptivePortal");
    else
      v8 = CFSTR("com.apple.WebKit.WebContent");
    CFRetain(v8);
    v11 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 1);
    if (v11)
      v12 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
    else
      v12 = 0;
    v7 = malloc_type_malloc(0x48uLL, 0x10F0040C4F18851uLL);
    *v7 = MEMORY[0x1E0C809A0];
    v7[1] = 50331650;
    v7[2] = WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::{lambda(void *,BEWebContentProcess *,NSError *)#1}::__invoke;
    v7[3] = &WTF::BlockPtr<void ()(BEWebContentProcess *,NSError *)>::fromCallable<WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0>(WebKit::launchWithExtensionKit(WebKit::ProcessLauncher &,WebKit::ProcessLauncher::ProcessType,WebKit::ProcessLauncher::Client *,WTF::Function<void ()(WTF::ThreadSafeWeakPtr<WebKit::ProcessLauncher>,WebKit::ExtensionProcess &&,WTF::ASCIILiteral,NSError *)> &&)::$_0)::descriptor;
    v7[4] = v4;
    v7[5] = v12;
    v7[6] = this;
    v7[7] = "com.apple.WebKit.WebContent";
    v7[8] = 28;
    objc_msgSend(MEMORY[0x1E0C92730], "webContentProcessWithBundleID:interruptionHandler:completion:", v8, &__block_literal_global_41, v7);
  }
  _Block_release(v7);
  CFRelease(v8);
}

void sub_196C7A74C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebsiteDataStore::setTrackingPreventionEnabled(uint64_t this, int a2)
{
  int v2;
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Encoder *v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2)
    v2 = 2;
  else
    v2 = 1;
  v3 = *(unsigned __int8 *)(this + 265);
  if (v3 != v2)
  {
    v5 = this;
    if (*(_BYTE *)(this + 265))
      this = v3 == 2;
    else
      this = *(unsigned __int16 *)(*(_QWORD *)(this + 208) + 536) >= 0x100u
           ? *(_WORD *)(*(_QWORD *)(this + 208) + 536) != 0
           : WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)this);
    *(_BYTE *)(v5 + 265) = v2;
    if ((_DWORD)this != a2)
    {
      v6 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(v5 + 24);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v5;
        v24 = 2048;
        v25 = v7;
        v26 = 1024;
        v27 = a2;
        _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - WebsiteDataStore::setTrackingPreventionEnabled: sessionID=%llu, enabled=%d", buf, 0x1Cu);
      }
      v8 = *(_QWORD *)(v5 + 408);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 16);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 490;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v22 = (IPC::Encoder *)v11;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, (uint64_t *)(v5 + 24));
        *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
        buf[0] = 0;
        BYTE2(v25) = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v22, 0, (uint64_t)buf, 1);
        if (BYTE2(v25))
        {
          v13 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        v14 = v22;
        v22 = 0;
        if (v14)
        {
          IPC::Encoder::~Encoder(v14, v12);
          WTF::fastFree(v15, v16);
        }
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
      }
      WebKit::WebsiteDataStore::processPools((WebKit::WebsiteDataStore *)v5, -1, (uint64_t *)buf);
      v18 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)buf);
      v19 = v17;
      this = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        v20 = *(_QWORD *)buf + 8 * *(unsigned int *)(*(_QWORD *)buf - 4);
      else
        v20 = 0;
      if ((uint64_t *)v20 != v18)
      {
        do
        {
          v21 = *v18;
          if (*v18)
          {
            CFRetain(*(CFTypeRef *)(v21 + 8));
            LOBYTE(v22) = a2;
            WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>((unsigned int *)v21, (uint64_t)&v22, *(_QWORD *)(v5 + 24));
            CFRelease(*(CFTypeRef *)(v21 + 8));
          }
          else
          {
            LOBYTE(v22) = a2;
            WebKit::WebProcessPool::sendToAllProcessesForSession<Messages::WebProcess::SetTrackingPreventionEnabled>(0, (uint64_t)&v22, *(_QWORD *)(v5 + 24));
          }
          while (++v18 != v19)
          {
            if ((unint64_t)(*v18 + 1) > 1)
              goto LABEL_32;
          }
          v18 = v19;
LABEL_32:
          ;
        }
        while (v18 != (uint64_t *)v20);
        this = *(_QWORD *)buf;
      }
      if (this)
        return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable((uint64_t *)this, v17);
    }
  }
  return this;
}

void WebKit::WebsiteDataStore::processPools(WebKit::WebsiteDataStore *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *a3 = 0;
  v6 = (char *)this + 312;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 39, &v31);
  v7 = *((_QWORD *)this + 39);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 8 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v26 = (uint64_t *)v6;
  v27 = v9;
  v28 = v9;
  v29 = v9;
  v30 = v7 + 8 * v8;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  v10 = v32;
  if (v32 == v27)
    goto LABEL_24;
  while (1)
  {
    v11 = *(unsigned int **)(*(_QWORD *)v10 + 8);
    v12 = v11 + 4;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = WebKit::WebProcessProxy::processPoolIfExists((WebKit::WebProcessProxy *)v11);
    if (v14)
      break;
LABEL_14:
    if (v11)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11 + 4);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v31);
    v10 = v32;
    if (v32 == v27)
    {
      v16 = *a3;
      goto LABEL_22;
    }
  }
  v15 = v14;
  CFRetain(*(CFTypeRef *)(v14 + 8));
  v25 = v15;
  WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)v24, a3, &v25);
  v16 = *a3;
  if (*a3)
    v17 = *(unsigned int *)(v16 - 12);
  else
    v17 = 0;
  if (v17 != a2)
  {
    if (v25)
      CFRelease(*(CFTypeRef *)(v25 + 8));
    goto LABEL_14;
  }
  if (v25)
    CFRelease(*(CFTypeRef *)(v25 + 8));
  if (v11)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11 + 4);
LABEL_22:
  if (!v16 || !*(_DWORD *)(v16 - 12))
  {
LABEL_24:
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v26);
    if (HIDWORD(v27))
    {
      v19 = v26;
      v20 = 8 * HIDWORD(v27) - 8;
      do
      {
        v21 = *v19;
        CFRetain(*(CFTypeRef *)(*v19 + 8));
        v24[0] = v21;
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)&v31, a3, v24);
        if (v24[0])
          CFRelease(*(CFTypeRef *)(v24[0] + 8));
        v22 = *a3;
        if (*a3)
          v22 = *(unsigned int *)(v22 - 12);
        if (v22 == a2)
          break;
        ++v19;
        v23 = v20;
        v20 -= 8;
      }
      while (v23);
    }
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v18);
  }
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;

  *(_DWORD *)a2 = 1;
  result = WebKit::AuxiliaryProcessProxy::getLaunchOptions(a1, a2);
  v4 = WebKit::nextNetworkProcessLaunchShouldFailForTesting;
  WebKit::nextNetworkProcessLaunchShouldFailForTesting = 0;
  if (v4 == 1)
    *(_BYTE *)(a2 + 25) = 1;
  return result;
}

unsigned int *WebKit::WebProcessPool::forEachProcessForSession(unsigned int *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = result[21];
  if ((_DWORD)v3)
  {
    v6 = (_QWORD *)*((_QWORD *)result + 9);
    v7 = &v6[v3];
    do
    {
      v8 = *v6;
      v9 = (unsigned int *)(*v6 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      if (!*(_BYTE *)(v8 + 778) && *(_QWORD *)(*(_QWORD *)(v8 + 752) + 24) == a2)
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
      result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

void WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v21;
        goto LABEL_31;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_24:
      v14 = WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(a2, v14);
      v22 = *a2;
      if (*a2)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_24;
  }
  v27 = v22 + 8 * v25;
  v26 = 1;
LABEL_31:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v26;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 8 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 8 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (_QWORD *)(v14 + 8 * v21);
          *v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *v23 = v24;
          v25 = *v12;
          *v12 = 0;
          if (v25)
            CFRelease(*(CFTypeRef *)(v25 + 8));
          if (v12 == a2)
            v11 = v23;
        }
        else
        {
          *v12 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebKit::GPUProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  return WebKit::AuxiliaryProcessProxy::getLaunchOptions(a1, a2);
}

void sub_196C7B244(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::underPageBackgroundColor@<X0>(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  const Color *v4;

  v2 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v2 + 1790) & 4) != 0)
  {
    v4 = (const Color *)(v2 + 1784);
  }
  else
  {
    if ((*(_BYTE *)(v2 + 918) & 4) == 0)
      return WebKit::WebPageProxy::platformUnderPageBackgroundColor(this, a2);
    v4 = (const Color *)(v2 + 912);
  }
  return (unsigned int *)WebCore::Color::Color((WebCore::Color *)a2, v4);
}

unsigned int *WebKit::WebPageProxy::platformUnderPageBackgroundColor@<X0>(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1128))(v4);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
  v7 = *a2;
  if ((*a2 & 0x4000000000000) == 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(result);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, result));
      if (!v9)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
      }
    }
    *a2 = 0x11040000FFFFFFFFLL;
  }
  return result;
}

void sub_196C7B368(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void sub_196C7B8CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (cf)
    CFRelease(cf);
  if ((a10 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_196C7B9E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::contentViewBackgroundColor(id *this@<X0>, _QWORD *a2@<X8>)
{
  id WeakRetained;
  void *v5;
  _QWORD v6[6];

  *a2 = 0;
  WeakRetained = objc_loadWeakRetained(this + 2);
  v5 = (void *)objc_msgSend(WeakRetained, "traitCollection");
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3321888768;
  v6[2] = ___ZN6WebKit14PageClientImpl26contentViewBackgroundColorEv_block_invoke;
  v6[3] = &__block_descriptor_48_e8_32c65_ZTSKZN6WebKit14PageClientImpl26contentViewBackgroundColorEvE3__0_e5_v8__0l;
  v6[4] = a2;
  v6[5] = this;
  objc_msgSend(v5, "performAsCurrentTraitCollection:", v6);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C7BB00(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  const void *v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (v3)
    CFRelease(v3);
  if ((*v2 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t scrollViewBackgroundColor(_QWORD *a1, void *a2, char a3)
{
  uint64_t result;
  WebCore *v6;
  UITraitCollection *v7;
  void *v8;
  _QWORD v9[7];
  char v10;
  void *v11;

  v11 = a2;
  v10 = a3;
  result = objc_msgSend(a2, "isOpaque");
  if ((result & 1) != 0)
  {
    *a1 = 0;
    v6 = (WebCore *)objc_msgSend(a2, "traitCollection");
    v8 = (void *)WebCore::traitCollectionWithAdjustedIdiomForSystemColors(v6, v7);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3321888768;
    v9[2] = ___ZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverride_block_invoke;
    v9[3] = &__block_descriptor_56_e8_32c84_ZTSKZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverrideE3__0_e5_v8__0l;
    v9[4] = a1;
    v9[5] = &v11;
    v9[6] = &v10;
    return objc_msgSend(v8, "performAsCurrentTraitCollection:", v9);
  }
  else
  {
    *a1 = 0x1104000000000000;
  }
  return result;
}

void sub_196C7BBF0(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((*v2 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::updateLayoutViewportParameters(WebKit::WebPageProxy *this, const WebKit::RemoteLayerTreeTransaction *a2)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = (_DWORD *)*((_QWORD *)this + 4);
  v3 = *((_QWORD *)a2 + 17);
  if (v2[26] == (_DWORD)v3
    && v2[27] == HIDWORD(v3)
    && v2[203] == *((_DWORD *)a2 + 36)
    && v2[204] == *((_DWORD *)a2 + 37)
    && v2[198] == *((_DWORD *)a2 + 38)
    && v2[199] == *((_DWORD *)a2 + 39))
  {
    return 0;
  }
  *((_QWORD *)v2 + 13) = v3;
  *(_QWORD *)(*((_QWORD *)this + 4) + 812) = *((_QWORD *)a2 + 18);
  *(_QWORD *)(*((_QWORD *)this + 4) + 792) = *((_QWORD *)a2 + 19);
  return 1;
}

void sub_196C7C3D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_196C7C55C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ViewGestureController::setRenderTreeSize(uint64_t this, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;

  if (*(_DWORD *)(this + 24) == 1)
  {
    v2 = *(_QWORD *)(this + 152);
    if (v2)
      v3 = v2 >= a2;
    else
      v3 = 0;
    if (!v3)
      return WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent((WebKit::ViewGestureController::SnapshotRemovalTracker *)(this + 168), (WebKit::ViewGestureController::SnapshotRemovalTracker *)2, "outstanding event occurred: ", 29, 1);
  }
  return this;
}

const WebCore::Font *WebKit::RemoteDisplayListRecorder::drawGlyphs(uint64_t a1, uint64_t *a2)
{
  const WebCore::Font *result;
  const WebCore::Font *v5;
  WebCore::GraphicsContext *v6;

  result = (const WebCore::Font *)WebCore::DisplayList::ResourceHeap::get<WebCore::Font>((uint64_t *)(*(_QWORD *)(a1 + 40) + 64), *a2);
  if (result)
  {
    v5 = result;
    ++*(_DWORD *)result;
    v6 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    WebCore::DisplayList::DrawGlyphs::apply((WebCore::DisplayList::DrawGlyphs *)a2, v6, v5);
    return (const WebCore::Font *)WTF::RefCounted<WebCore::Font>::deref(v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ResourceRequestRequester>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 0xA)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

unint64_t WebKit::WebCompiledContentRuleList::serializedActions(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5));
}

void WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy(WebKit::WebUserContentControllerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)this = &off_1E34DED30;
  *((_QWORD *)this + 2) = &unk_1E34DED60;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (uint64_t *)(v3 + 8 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (uint64_t *)*((_QWORD *)this + 10);
      if ((_DWORD)v4)
      {
        v7 = 8 * v4;
        v6 = (uint64_t *)*((_QWORD *)this + 10);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (uint64_t *)(v3 + 8 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (uint64_t *)(v3 + 8 * v4);
  if (v3)
  {
LABEL_8:
    v8 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    v46 = *v6;
    {
      API::sharedWorldIdentifierMap(void)::sharedMap = 0;
    }
    v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&API::sharedWorldIdentifierMap(void)::sharedMap, &v46);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x196C7CB68);
    }
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(v9 + 40, this);
    v10 = v6 + 1;
    v6 = v5;
    if (v10 != v5)
    {
      v6 = v10;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        if (++v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  {
    if (WebKit::webUserContentControllerProxies(void)::proxies)
    {
      v11 = *((_QWORD *)this + 4);
      v12 = *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 8);
      v13 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(_QWORD *)(WebKit::webUserContentControllerProxies(void)::proxies + 16 * v16);
      if (v17 != v11)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(_QWORD *)(WebKit::webUserContentControllerProxies(void)::proxies + 16 * v16);
          ++v18;
          if (v17 == v11)
            goto LABEL_31;
        }
        v16 = *(unsigned int *)(WebKit::webUserContentControllerProxies(void)::proxies - 4);
      }
LABEL_31:
      if (v16 != *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 4))
      {
        v19 = (_QWORD *)(WebKit::webUserContentControllerProxies(void)::proxies + 16 * v16);
        v20 = (unsigned int *)v19[1];
        *v19 = -1;
        v19[1] = 0;
        if (v20)
        {
          do
          {
            v22 = __ldaxr(v20);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v20));
          if (!v23)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, a2);
          }
        }
        ++*(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 16);
        if (WebKit::webUserContentControllerProxies(void)::proxies)
          v21 = *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 12) = v21;
        if (WebKit::webUserContentControllerProxies(void)::proxies)
        {
          v24 = *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 4);
          if (6 * *(_DWORD *)(WebKit::webUserContentControllerProxies(void)::proxies - 12) < v24 && v24 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(&WebKit::webUserContentControllerProxies(void)::proxies, v24 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
  }
  v26 = (uint64_t *)((char *)this + 40);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v46);
  v27 = *((_QWORD *)this + 5);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    v29 = v27 + 8 * v28;
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v41 = (char *)this + 40;
  v42 = v29;
  v43 = v29;
  v44 = v29;
  v45 = v27 + 8 * v28;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v41);
  while (v47 != v42)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v47 + 8);
    IPC::MessageReceiverMap::removeMessageReceiver(v30 + 152, 0xCEu, *((_QWORD *)this + 4));
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(v30 + 640, this);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v46);
  }
  v31 = (uint64_t *)((char *)this + 88);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 11, &v46);
  v32 = *((_QWORD *)this + 11);
  if (v32)
  {
    v33 = *(unsigned int *)(v32 - 4);
    v34 = v32 + 8 * v33;
  }
  else
  {
    v34 = 0;
    v33 = 0;
  }
  v41 = (char *)this + 88;
  v42 = v34;
  v43 = v34;
  v44 = v34;
  v45 = v32 + 8 * v33;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v41);
  while (v47 != v42)
  {
    WebKit::NetworkProcessProxy::didDestroyWebUserContentControllerProxy(*(WebKit::NetworkProcessProxy **)(*(_QWORD *)v47 + 8), this);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v46);
  }
  v36 = *((_QWORD *)this + 13);
  if (v36)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v35);
  if (*v31)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v31, v35);
  v37 = *((_QWORD *)this + 10);
  if (v37)
    WTF::fastFree((WTF *)(v37 - 16), v35);
  v38 = *((_QWORD *)this + 9);
  if (v38)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v38, v35);
  v39 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v39)
    CFRelease(*(CFTypeRef *)(v39 + 8));
  v40 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v40)
    CFRelease(*(CFTypeRef *)(v40 + 8));
  if (*v26)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v26, v35);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v35);
}

{
  WebKit::WebUserContentControllerProxy::~WebUserContentControllerProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *WebKit::WebUserContentControllerProxy::removeAllContentRuleLists(WebKit::WebUserContentControllerProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;
  IPC::Encoder *v38;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 13) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v34);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = v4 + 8 * v5;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v29 = (char *)this + 40;
  v30 = v6;
  v31 = v6;
  v32 = v6;
  v33 = v4 + 8 * v5;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v29);
  for (i = v35; v35 != v30; i = v35)
  {
    v8 = *(_QWORD *)(*(_QWORD *)i + 8);
    v9 = *((_QWORD *)this + 4);
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 2809;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v38 = (IPC::Encoder *)v10;
    LOBYTE(v36[0]) = 0;
    v37 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v38, 0, (uint64_t)v36, 1);
    if (v37)
    {
      v12 = v36[0];
      v36[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    v13 = v38;
    v38 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v11);
      WTF::fastFree(v14, v15);
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v34);
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 11, &v34);
  v16 = *((_QWORD *)this + 11);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 8 * v17;
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v29 = (char *)this + 88;
  v30 = v18;
  v31 = v18;
  v32 = v18;
  v33 = v16 + 8 * v17;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v29);
  for (j = v35; v35 != v30; j = v35)
  {
    v21 = *(_QWORD *)(*(_QWORD *)j + 8);
    v28 = *((_QWORD *)this + 4);
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 283;
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v38 = (IPC::Encoder *)v22;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, &v28);
    LOBYTE(v36[0]) = 0;
    v37 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v21, &v38, 0, (uint64_t)v36, 1);
    if (v37)
    {
      v24 = v36[0];
      v36[0] = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    v25 = v38;
    v38 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v23);
      WTF::fastFree(v26, v27);
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v34);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::allNetworkProcesses@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  {
    WebKit::networkProcessesSet(void)::set = 0;
    unk_1ECE73950 = 0;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)&WebKit::networkProcessesSet(void)::set, a1);
  if ((_DWORD)result)
  {
    v5 = result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::networkProcessesSet(void)::set, &v18);
  if (WebKit::networkProcessesSet(void)::set)
  {
    v7 = *(unsigned int *)(WebKit::networkProcessesSet(void)::set - 4);
    v8 = WebKit::networkProcessesSet(void)::set + 8 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v13 = &WebKit::networkProcessesSet(void)::set;
  v14 = v8;
  v15 = v8;
  v16 = v8;
  v17 = WebKit::networkProcessesSet(void)::set + 8 * v7;
  result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  while (v19 != v14)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    v10 = (unsigned int *)(v9 + 16);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(unsigned int *)(a2 + 12);
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v9;
    *(_DWORD *)(a2 + 12) = v12 + 1;
    result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C7CFF4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14[11];
  char v15;
  uint64_t v16;
  uint64_t v17;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v16 = 0;
  v17 = 0;
  if (result >= 0x2762)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserScriptData>(a1, (uint64_t)&v13);
      if (!v15)
        break;
      if (HIDWORD(v17) == (_DWORD)v17)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>((uint64_t)&v16, (unint64_t)&v13);
      }
      else
      {
        v11 = (_OWORD *)(v16 + 104 * HIDWORD(v17));
        *v11 = v13;
        WebCore::UserScript::UserScript((uint64_t)(v11 + 1), v14);
        ++HIDWORD(v17);
      }
      if (v15)
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v14, v10);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v16, HIDWORD(v17));
        *(_QWORD *)a2 = v16;
        v12 = v17;
        v16 = 0;
        v17 = 0;
        *(_QWORD *)(a2 + 8) = v12;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_5:
      v16 = 0;
      v17 = 0;
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v8;
LABEL_6:
      *(_BYTE *)(a2 + 16) = 1;
      return (unint64_t)WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v16, v5);
    }
    LODWORD(v17) = 104 * (int)result / 0x68u;
    v16 = WTF::fastMalloc((WTF *)(104 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserScriptData>(a1, (uint64_t)&v13);
      if (!v15)
        break;
      if (HIDWORD(v17) == (_DWORD)v17)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>((uint64_t)&v16, (unint64_t)&v13);
      }
      else
      {
        v9 = (_OWORD *)(v16 + 104 * HIDWORD(v17));
        *v9 = v13;
        WebCore::UserScript::UserScript((uint64_t)(v9 + 1), v14);
        ++HIDWORD(v17);
      }
      if (v15)
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v14, v5);
      if (!--v6)
      {
        v7 = v16;
        v8 = v17;
        goto LABEL_5;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return (unint64_t)WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v16, v5);
}

void sub_196C7D1FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  WebCore::UserScript *v22;
  uint64_t v23;

  if (a22)
    WebCore::UserScript::~UserScript(v22, a2);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v23 - 64), a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::WebUserScriptData>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebUserScriptData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 104))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C7D288(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 104))
    WebCore::UserScript::~UserScript((WebCore::UserScript *)(v2 + 16), a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::WebUserScriptData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t v13[11];
  uint64_t v14[11];
  char v15;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  IPC::Decoder::decode<WebCore::UserScript>(a1, v14);
  if (*a1)
  {
    if (v6)
    {
      *(_QWORD *)&v12 = v4;
      if (v9)
      {
        *((_QWORD *)&v12 + 1) = v7;
        if (v15)
        {
          WebCore::UserScript::UserScript((uint64_t)v13, v14);
          *(_OWORD *)a2 = v12;
          WebCore::UserScript::UserScript(a2 + 16, v13);
          *(_BYTE *)(a2 + 104) = 1;
          WebCore::UserScript::~UserScript((WebCore::UserScript *)v13, v11);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 104) = 0;
LABEL_6:
  if (v15)
    WebCore::UserScript::~UserScript((WebCore::UserScript *)v14, v10);
}

void sub_196C7D38C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  WebCore::UserScript *v34;
  void *v36;

  WebCore::UserScript::~UserScript(v34, a2);
  if (a34)
    WebCore::UserScript::~UserScript((WebCore::UserScript *)&a23, v36);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::UserScript>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::UserScript,void>::decode(a1, a2);
  if (!a2[88])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_196C7D40C(_Unwind_Exception *exception_object, void *a2)
{
  WebCore::UserScript *v2;

  if (*((_BYTE *)v2 + 88))
    WebCore::UserScript::~UserScript(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::UserScript,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  void *v5;
  int v6;
  int i;
  unsigned __int16 v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21[11];
  _BYTE v22[16];
  char v23;
  _BYTE v24[16];
  char v25;
  _QWORD v26[5];
  char v27;
  WTF::StringImpl *v28;
  char v29;

  IPC::Decoder::decode<WTF::String>(a1, &v28);
  IPC::Decoder::decode<WTF::URL>(a1, v26);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)v24);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)v22);
  LOWORD(v21[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v21);
  v6 = BYTE1(v21[0]);
  if (!BYTE1(v21[0]))
    goto LABEL_30;
  for (i = LOBYTE(v21[0]); ; i = 0)
  {
    v8 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(a1);
    LOWORD(v21[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v21);
    v10 = BYTE1(v21[0]);
    if (BYTE1(v21[0]))
    {
      v11 = LOBYTE(v21[0]);
    }
    else
    {
      v9 = (void *)*a1;
      v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v19 = a1[3];
      if (v19)
      {
        v20 = v10;
        if (v18)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v19 + 16))(v19, v9);
        v11 = 0;
        v10 = v20;
      }
      else
      {
        v11 = 0;
      }
    }
    if (!*a1)
      break;
    if (v29 && v27 && v25 && v23 && v6 && v8 > 0xFFu && v10)
    {
      MEMORY[0x19AEAC7C0](v21, &v28, v26, v24, v22, i != 0, v8 != 0, v11 != 0);
      WebCore::UserScript::UserScript((uint64_t)a2, v21);
      a2[88] = 1;
      WebCore::UserScript::~UserScript((WebCore::UserScript *)v21, v12);
      goto LABEL_14;
    }
    __break(1u);
LABEL_30:
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17 && v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  }
  *a2 = 0;
  a2[88] = 0;
LABEL_14:
  if (v23)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v9);
  if (v25)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v9);
  if (v27)
  {
    v13 = (WTF::StringImpl *)v26[0];
    v26[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (v29)
  {
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
}

void sub_196C7D644(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,int a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  WebCore::UserScript::~UserScript((WebCore::UserScript *)&a10, a2);
  if (a23)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v29);
  if (a27)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a25, v29);
  if (*(_BYTE *)(v27 - 72))
  {
    v30 = *(WTF::StringImpl **)(v27 - 112);
    *(_QWORD *)(v27 - 112) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (*(_BYTE *)(v27 - 56))
  {
    v31 = *(WTF::StringImpl **)(v27 - 64);
    *(_QWORD *)(v27 - 64) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(uint64_t *a1)
{
  int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;

  v9 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v9);
  v2 = HIBYTE(v9);
  if (HIBYTE(v9))
  {
    v3 = v9;
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v3 = 0;
      v2 = v8;
    }
    else
    {
      v3 = 0;
    }
  }
  return v3 | (v2 << 8);
}

void WebKit::WebUserContentController::addUserScriptMessageHandlers(WebKit *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebKit *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t)a1;
    v4 = 24 * v2;
    v5 = *(_QWORD *)a2 + 8;
    do
    {
      WebKit::worldMap(a1);
      v6 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, (_QWORD *)v5);
      WebKit::worldMap(v6);
      v7 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v7 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v7 == v6)
      {
        a1 = (WebKit *)WTFLogAlways();
      }
      else
      {
        v8 = *((_QWORD *)v6 + 1);
        CFRetain(*(CFTypeRef *)(v8 + 8));
        v9 = *(_QWORD *)(v5 - 8);
        WTF::AtomString::AtomString((WTF::AtomString *)&v12, (WTF::AtomStringImpl **)(v5 + 8));
        WebKit::WebUserContentController::addUserScriptMessageHandlerInternal(v3, v8, v9, (const AtomString *)&v12);
        v11 = v12;
        v12 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        CFRelease(*(CFTypeRef *)(v8 + 8));
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

void WebKit::WebUserContentController::addUserScripts(WebKit *a1, _DWORD *a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WebKit *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13[11];

  v3 = a2[3];
  if (v3)
  {
    v5 = (uint64_t)a1;
    v6 = 104 * v3;
    v7 = (_QWORD *)(*(_QWORD *)a2 + 8);
    do
    {
      WebKit::worldMap(a1);
      v8 = (WebKit *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_QWORD **)&qword_1ECE72ED8, v7);
      WebKit::worldMap(v8);
      v9 = qword_1ECE72ED8;
      if (qword_1ECE72ED8)
        v9 = qword_1ECE72ED8 + 24 * *(unsigned int *)(qword_1ECE72ED8 - 4);
      if ((WebKit *)v9 == v8)
      {
        a1 = (WebKit *)WTFLogAlways();
      }
      else
      {
        WebCore::UserScript::UserScript((uint64_t)v13, (uint64_t)(v7 + 1));
        v10 = *((_QWORD *)v8 + 1);
        CFRetain(*(CFTypeRef *)(v10 + 8));
        *(_QWORD *)&v12 = *(v7 - 1);
        BYTE8(v12) = 1;
        WebKit::WebUserContentController::addUserScriptInternal(v5, v10, &v12, v13, a3);
        CFRelease(*(CFTypeRef *)(v10 + 8));
        WebCore::UserScript::~UserScript((WebCore::UserScript *)v13, v11);
      }
      v7 += 13;
      v6 -= 104;
    }
    while (v6);
  }
}

uint64_t *WebKit::worldMap(WebKit *this)
{
  uint64_t v2;
  WebKit::InjectedBundleScriptWorld *v3;
  WebKit::InjectedBundleScriptWorld *v4;
  uint64_t v5;
  WebKit::InjectedBundleScriptWorld *v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_102 & 1) == 0)
  {
    {
      v2 = WebKit::pageContentWorldIdentifier(void)::identifier;
    }
    else
    {
      v2 = 1;
      WebKit::pageContentWorldIdentifier(void)::identifier = 1;
    }
    v3 = WebKit::InjectedBundleScriptWorld::normalWorld(this);
    CFRetain(*((CFTypeRef *)v3 + 1));
    v5 = v2;
    v6 = v3;
    v7 = 1;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::HashMap(&v5, 1);
    v4 = v6;
    v6 = 0;
    if (v4)
      CFRelease(*((CFTypeRef *)v4 + 1));
    _MergedGlobals_102 = 1;
  }
  return &qword_1ECE72ED8;
}

WTF::AtomString *WTF::AtomString::AtomString(WTF::AtomString *this, WTF::AtomStringImpl **a2)
{
  WTF::AtomStringImpl *v3;
  WTF::AtomStringImpl *v5;

  v3 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v3 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v3 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v3, (WTF::StringImpl *)a2);
      v3 = v5;
    }
  }
  *(_QWORD *)this = v3;
  return this;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C7DB24(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  WTF *v19;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v18 = 0;
  v19 = 0;
  if (result >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebScriptMessageHandlerData>(a1, (uint64_t)&v15);
      if (!v17)
        break;
      if (HIDWORD(v19) == (_DWORD)v19)
      {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebScriptMessageHandlerData>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        v12 = v18 + 24 * HIDWORD(v19);
        *(_OWORD *)v12 = v15;
        v13 = v16;
        v16 = 0;
        *(_QWORD *)(v12 + 16) = v13;
        ++HIDWORD(v19);
      }
      std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v18, HIDWORD(v19));
        *(_QWORD *)a2 = v18;
        v14 = v19;
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(a2 + 8) = v14;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_5:
      v18 = 0;
      v19 = 0;
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v8;
LABEL_6:
      *(_BYTE *)(a2 + 16) = 1;
      return WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
    }
    LODWORD(v19) = 24 * (int)result / 0x18u;
    v18 = WTF::fastMalloc((WTF *)(24 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebScriptMessageHandlerData>(a1, (uint64_t)&v15);
      if (!v17)
        break;
      if (HIDWORD(v19) == (_DWORD)v19)
      {
        WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebScriptMessageHandlerData>((uint64_t)&v18, (unint64_t)&v15);
      }
      else
      {
        v10 = v18 + 24 * HIDWORD(v19);
        *(_OWORD *)v10 = v15;
        v11 = v16;
        v16 = 0;
        *(_QWORD *)(v10 + 16) = v11;
        ++HIDWORD(v19);
      }
      std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
      if (!--v6)
      {
        v7 = v18;
        v8 = v19;
        goto LABEL_5;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
  return WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
}

void sub_196C7DD0C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebsiteDataStore::isBlobRegistryPartitioningEnabled(WebKit::WebsiteDataStore *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;

  v2 = (char *)this + 312;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 39, &v18);
  v3 = *((_QWORD *)this + 39);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v13 = v2;
  v14 = v5;
  v15 = v5;
  v16 = v5;
  v17 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  v6 = v19;
  if (v19 == v14)
    return 0;
  while (1)
  {
    WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(*(_QWORD *)v6 + 8), (uint64_t)&v20);
    if (v21)
      break;
LABEL_11:
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v7);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
    v6 = v19;
    if (v19 == v14)
      return 0;
  }
  v9 = v20;
  v10 = 8 * v21;
  while (1)
  {
    v11 = *v9;
    {
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(_QWORD *)(v11 + 224) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, v8))break;
    ++v9;
    v10 -= 8;
    if (!v10)
      goto LABEL_11;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v7);
  return 1;
}

void WebKit::WebUserContentControllerProxy::addUserScript(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  IPC::Encoder *v42;
  __int128 v43;
  _QWORD v44[13];

  v44[11] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 112);
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebUserContentControllerProxy::addContentWorld(a1, (API::ContentWorld *)v6);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(v7 + 28);
  if ((_DWORD)v8 == *(_DWORD *)(v7 + 24))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7 + 16, v11);
    v12 = *(unsigned int *)(v7 + 28);
    v13 = *(_QWORD *)(v7 + 16);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v14 = *(_DWORD *)(v7 + 28);
    *(_QWORD *)(v13 + 8 * v12) = a2;
  }
  else
  {
    v15 = *(_QWORD *)(v7 + 16);
    CFRetain(*(CFTypeRef *)(a2 + 8));
    *(_QWORD *)(v15 + 8 * v8) = a2;
    v14 = *(_DWORD *)(v7 + 28);
  }
  *(_DWORD *)(v7 + 28) = v14 + 1;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 40), &v38);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 8 * v17;
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v33 = a1 + 40;
  v34 = v18;
  v35 = v18;
  v36 = v18;
  v37 = v16 + 8 * v17;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v33);
  for (i = v39; v39 != v34; i = v39)
  {
    v20 = *(_QWORD *)(*(_QWORD *)i + 8);
    v21 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)&v43 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)&v43 + 1) = v21;
    WebCore::UserScript::UserScript((uint64_t)v44, a2 + 24);
    v32 = 0u;
    v22 = WTF::fastMalloc((WTF *)0x68);
    DWORD2(v32) = 1;
    *(_QWORD *)&v32 = v22;
    v23 = (_OWORD *)(v22 + 104 * HIDWORD(v32));
    *v23 = v43;
    WebCore::UserScript::UserScript((uint64_t)(v23 + 1), (uint64_t)v44);
    ++HIDWORD(v32);
    v24 = *(_QWORD *)(a1 + 32);
    v25 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v25 = 2807;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 528) = v25 + 16;
    *(_QWORD *)(v25 + 536) = v25 + 16;
    *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v25 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
    v42 = (IPC::Encoder *)v25;
    IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v25, (uint64_t)&v32);
    *IPC::Encoder::grow((IPC::Encoder *)v25, 1uLL, 1) = a3;
    LOBYTE(v40) = 0;
    v41 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v42, 0, (uint64_t)&v40, 1);
    if (v41)
    {
      v27 = v40;
      v40 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v28 = v42;
    v42 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v26);
      WTF::fastFree(v29, v30);
    }
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v32, v26);
    WebCore::UserScript::~UserScript((WebCore::UserScript *)v44, v31);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v38);
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

_DWORD *WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(_DWORD *a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  WebCore::UserScript *v7;
  uint64_t v8;

  v3 = a1[3];
  if (v3)
  {
    v6 = 104 * v3;
    v7 = (WebCore::UserScript *)(*(_QWORD *)a1 + 16);
    do
    {
      WebCore::UserScript::~UserScript(v7, a2);
      v7 = (WebCore::UserScript *)(v8 + 104);
      v6 -= 104;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::UserScript::~UserScript(WebCore::UserScript *this, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v3);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

uint64_t WebKit::WebUserContentControllerProxy::addUserScriptMessageHandler(WebKit::WebUserContentControllerProxy *this, WebKit::WebScriptMessageHandler *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  API::ContentWorld *v11;
  _QWORD *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  _DWORD *v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  IPC::Encoder *v52;
  WTF *v53;
  void *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  IPC::Encoder *v67;

  v6 = (uint64_t *)((char *)this + 72);
  v5 = *((_QWORD *)this + 9);
  if (!v5)
  {
    v9 = 0;
    v7 = 0;
LABEL_10:
    v8 = (_QWORD *)(v5 + 16 * v7);
    goto LABEL_11;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v8 = (_QWORD *)(v5 + 16 * v7);
  if (!*(_DWORD *)(v5 - 12))
  {
    v9 = (_QWORD *)(v5 + 16 * v7);
    goto LABEL_10;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 9);
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = (_QWORD *)*((_QWORD *)this + 9);
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_11:
  v11 = (API::ContentWorld *)*((_QWORD *)a2 + 5);
  if (v5)
    v12 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  else
    v12 = 0;
  if (v12 != v9)
  {
    while (1)
    {
      v13 = *(WTF **)(v9[1] + 32);
      if (v13)
        *(_DWORD *)v13 += 2;
      v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
      if (v14)
        break;
      if ((WTF::equal(v13, 0, a3) & 1) == 0)
        goto LABEL_28;
      v16 = *(_QWORD *)(*(_QWORD *)(v9[1] + 40) + 24) == *((_QWORD *)v11 + 3);
      if (v13)
        goto LABEL_25;
LABEL_32:
      if (v16)
        return 0;
LABEL_35:
      v17 = v9 + 2;
      v9 = v8;
      if (v17 != v8)
      {
        v9 = v17;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      if (v9 == v12)
        goto LABEL_45;
    }
    *(_DWORD *)v14 += 2;
    if ((WTF::equal(v13, v14, a3) & 1) == 0)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v15);
      else
        *(_DWORD *)v14 -= 2;
LABEL_28:
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v15);
        else
          *(_DWORD *)v13 -= 2;
      }
      goto LABEL_35;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v9[1] + 40) + 24) == *((_QWORD *)v11 + 3);
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v15);
      if (!v13)
        goto LABEL_32;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
      if (!v13)
        goto LABEL_32;
    }
LABEL_25:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v15);
    else
      *(_DWORD *)v13 -= 2;
    goto LABEL_32;
  }
LABEL_45:
  WebKit::WebUserContentControllerProxy::addContentWorld((uint64_t)this, v11);
  v18 = *((_QWORD *)a2 + 2);
  v19 = *((_QWORD *)this + 9);
  if (v19
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6),
        (v19 = *v6) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = v20 & ((v23 >> 31) ^ v23);
  v25 = (_QWORD *)(v19 + 16 * v24);
  v26 = *v25;
  if (*v25)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != v18)
    {
      if (v26 == -1)
        v27 = v25;
      v24 = (v24 + v28) & v20;
      v25 = (_QWORD *)(v19 + 16 * v24);
      v26 = *v25;
      ++v28;
      if (!*v25)
      {
        if (v27)
        {
          *v27 = 0;
          v27[1] = 0;
          --*(_DWORD *)(*v6 - 16);
          v25 = v27;
        }
        goto LABEL_56;
      }
    }
    goto LABEL_69;
  }
LABEL_56:
  *v25 = v18;
  ++*((_DWORD *)a2 + 2);
  v29 = (_DWORD *)v25[1];
  v25[1] = a2;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
    else
      --v29[2];
  }
  v31 = *v6;
  if (*v6)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v33 = *v6;
  if (*v6)
    v34 = *(_DWORD *)(v33 - 12);
  else
    v34 = 0;
  v35 = (*(_DWORD *)(v33 - 16) + v34);
  v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 > 2 * v35)
      goto LABEL_69;
    goto LABEL_68;
  }
  if (3 * v36 <= 4 * v35)
LABEL_68:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6);
LABEL_69:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v63);
  v37 = *((_QWORD *)this + 5);
  if (v37)
  {
    v38 = *(unsigned int *)(v37 - 4);
    v39 = v37 + 8 * v38;
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
  v58 = (char *)this + 40;
  v59 = v39;
  v60 = v39;
  v61 = v39;
  v62 = v37 + 8 * v38;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v58);
  for (i = v64; v64 != v59; i = v64)
  {
    v41 = *(_QWORD *)(*(_QWORD *)i + 8);
    v42 = *((_QWORD *)a2 + 2);
    v43 = *((_QWORD *)v11 + 3);
    v44 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
    if (v44)
      *(_DWORD *)v44 += 2;
    v56 = 0;
    v57 = 0;
    v45 = WTF::fastMalloc((WTF *)0x18);
    LODWORD(v57) = 1;
    v56 = v45;
    v46 = HIDWORD(v57);
    v47 = (_QWORD *)(v45 + 24 * HIDWORD(v57));
    *v47 = v42;
    v47[1] = v43;
    if (v44)
      *(_DWORD *)v44 += 2;
    *(_QWORD *)(v45 + 24 * v46 + 16) = v44;
    ++HIDWORD(v57);
    v48 = *((_QWORD *)this + 4);
    v49 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v49 = 2806;
    *(_QWORD *)(v49 + 8) = v48;
    *(_QWORD *)(v49 + 528) = v49 + 16;
    *(_QWORD *)(v49 + 536) = v49 + 16;
    *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v49 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
    v67 = (IPC::Encoder *)v49;
    IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v49, (uint64_t)&v56);
    LOBYTE(v65) = 0;
    v66 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v41, &v67, 0, (uint64_t)&v65, 1);
    if (v66)
    {
      v51 = v65;
      v65 = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
    v52 = v67;
    v67 = 0;
    if (v52)
    {
      IPC::Encoder::~Encoder(v52, v50);
      WTF::fastFree(v53, v54);
    }
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v50);
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v55);
      else
        *(_DWORD *)v44 -= 2;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v63);
  }
  return 1;
}

uint64_t WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::WebUserContentControllerProxy::addContentWorld(uint64_t this, API::ContentWorld *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  IPC::Encoder *v51;

  v3 = this;
  v4 = *((_QWORD *)a2 + 3);
  {
    v5 = WebKit::pageContentWorldIdentifier(void)::identifier;
  }
  else
  {
    v5 = 1;
    WebKit::pageContentWorldIdentifier(void)::identifier = 1;
  }
  if (v4 == v5)
    return this;
  v7 = (uint64_t *)(this + 80);
  v6 = *(_QWORD *)(this + 80);
  if (v6
    || (this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(this + 80)),
        (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (_QWORD *)(v6 + 8 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_15:
    *v13 = v4;
    v17 = *v7;
    if (*v7)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v7;
    if (*v7)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
      {
LABEL_24:
        WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)a2 + 40, (unsigned int *)v3, (uint64_t)&v47);
        WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v3 + 40), &v47);
        v23 = *(_QWORD *)(v3 + 40);
        if (v23)
        {
          v24 = *(unsigned int *)(v23 - 4);
          v25 = v23 + 8 * v24;
        }
        else
        {
          v25 = 0;
          v24 = 0;
        }
        v42 = v3 + 40;
        v43 = v25;
        v44 = v25;
        v45 = v25;
        v46 = v23 + 8 * v24;
        this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v42);
        for (i = v48; v48 != v43; i = v48)
        {
          v27 = *(_QWORD *)(*(_QWORD *)i + 8);
          v29 = *((_QWORD *)a2 + 3);
          v28 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
          if (v28)
            *(_DWORD *)v28 += 2;
          v40 = 0;
          v41 = 0;
          v30 = WTF::fastMalloc((WTF *)0x10);
          LODWORD(v41) = 1;
          v40 = v30;
          v31 = HIDWORD(v41);
          *(_QWORD *)(v30 + 16 * HIDWORD(v41)) = v29;
          if (v28)
            *(_DWORD *)v28 += 2;
          *(_QWORD *)(v30 + 16 * v31 + 8) = v28;
          ++HIDWORD(v41);
          v32 = *(_QWORD *)(v3 + 32);
          v33 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v33 = 2805;
          *(_QWORD *)(v33 + 8) = v32;
          *(_QWORD *)(v33 + 528) = v33 + 16;
          *(_QWORD *)(v33 + 536) = v33 + 16;
          *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v33 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
          v51 = (IPC::Encoder *)v33;
          IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v33, (uint64_t)&v40);
          LOBYTE(v49) = 0;
          v50 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v27, &v51, 0, (uint64_t)&v49, 1);
          if (v50)
          {
            v35 = v49;
            v49 = 0;
            if (v35)
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          }
          v36 = v51;
          v51 = 0;
          if (v36)
          {
            IPC::Encoder::~Encoder(v36, v34);
            WTF::fastFree(v37, v38);
          }
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v34);
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v39);
            else
              *(_DWORD *)v28 -= 2;
          }
          this = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v47);
        }
        return this;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_24;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(v3 + 80));
    goto LABEL_24;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v4)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (_QWORD *)(v6 + 8 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        --*(_DWORD *)(*v7 - 16);
        v13 = v15;
      }
      goto LABEL_15;
    }
  }
  return this;
}

_QWORD *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[2];
      v3[2] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 24 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfo,void>::encode(a1, v6);
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
}

void IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheInfo,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 2);
}

char *IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 104 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::WebUserScriptData,void>::encode(a1, v7);
      v7 += 13;
      v8 -= 104;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::UserScript,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 1);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 6));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(v2 + 8));
  v4 = *((_BYTE *)v2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)v2 + 81);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 82);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebUserScriptData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  return IPC::ArgumentCoder<WebCore::UserScript,void>::encode(a1, a2 + 2);
}

void sub_196C7EEE0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  void *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  WebCore::UserScript::~UserScript((WebCore::UserScript *)&a20, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v22);
  v24 = a14;
  a14 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = a19;
  a19 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  _Unwind_Resume(a1);
}

void API::Object::constructInWrapper<API::UserScript,WebCore::UserScript,API::ContentWorld &>(void *a1, uint64_t *a2, uint64_t a3)
{
  WebKit *v6;
  void *v7;
  _BYTE v8[88];

  v6 = (WebKit *)objc_msgSend(a1, "_apiObject");
  WebCore::UserScript::UserScript((uint64_t)v8, a2);
  API::UserScript::UserScript(v6, (uint64_t)v8, a3);
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v8, v7);
  *((_QWORD *)v6 + 1) = a1;
}

WebKit *API::UserScript::UserScript(WebKit *a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(a1);
  *(_QWORD *)a1 = &off_1E34DA0F8;
  *((_QWORD *)a1 + 2) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = &off_1E34DA0A0;
  WebCore::UserScript::UserScript((uint64_t)a1 + 24, a2);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *((_QWORD *)a1 + 14) = a3;
  return a1;
}

uint64_t WebCore::UserScript::UserScript(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  __int16 v7;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 64);
  v7 = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_WORD *)(a1 + 80) = v7;
  return a1;
}

uint64_t WebCore::UserScript::UserScript(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  *(_DWORD *)(a1 + 56) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = 0;
  *(_DWORD *)(a1 + 60) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(a1 + 72) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(a1 + 76) = v6;
  LOWORD(v6) = *((_WORD *)a2 + 40);
  *(_BYTE *)(a1 + 82) = *((_BYTE *)a2 + 82);
  *(_WORD *)(a1 + 80) = v6;
  return a1;
}

void sub_196C7F158(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebScriptMessageHandlerData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebScriptMessageHandlerData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C7F1DC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebScriptMessageHandlerData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6 = v5;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v9 = v8;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v13);
  if (*a1)
  {
    if (v6 && v9 && v14)
    {
      v12 = v13;
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void getAllLocalAuthenticatorCredentialsImpl(NSString *a1, NSString *a2, NSData *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  OSStatus v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *v26;
  char *v27;
  void *v28;
  uint64_t Map;
  _QWORD *v30;
  _QWORD *v31;
  cbor::CBORValue *v32;
  int v33;
  _QWORD *String;
  id v35;
  const __CFString *v36;
  void *v37;
  _QWORD *v38;
  cbor::CBORValue *v39;
  int v40;
  uint64_t ByteString;
  const void *v42;
  int v43;
  _QWORD *v44;
  cbor::CBORValue *v45;
  int v46;
  const __CFString *v47;
  uint64_t v48;
  CFTypeRef v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id cf;
  uint64_t v56;
  uint64_t v57;
  id obj;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[4];
  _DWORD v63[8];
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  CFTypeRef result;
  _BYTE v70[128];
  _QWORD v71[7];
  _QWORD v72[9];

  v72[7] = *MEMORY[0x1E0C80C00];
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v8 = *MEMORY[0x1E0CD6CC0];
  v9 = *MEMORY[0x1E0CD69F8];
  v71[0] = *MEMORY[0x1E0CD6C98];
  v71[1] = v9;
  v10 = *MEMORY[0x1E0CD6A00];
  v72[0] = v8;
  v72[1] = v10;
  v11 = *MEMORY[0x1E0CD7010];
  v71[2] = *MEMORY[0x1E0CD6898];
  v71[3] = v11;
  v72[2] = a2;
  v72[3] = MEMORY[0x1E0C9AAB0];
  v12 = *MEMORY[0x1E0CD6F30];
  v13 = *MEMORY[0x1E0CD6B80];
  v14 = *MEMORY[0x1E0CD6B88];
  v72[4] = *MEMORY[0x1E0CD6F38];
  v72[5] = v14;
  v71[4] = v12;
  v71[5] = v13;
  v57 = v13;
  v71[6] = *MEMORY[0x1E0CD70A8];
  v72[6] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v7, "setDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v72, v71, 7));
  v15 = (uint64_t *)MEMORY[0x1E0CD6A90];
  if (a3)
    objc_msgSend(v7, "setObject:forKey:", a3, *MEMORY[0x1E0CD6A90]);
  v16 = (uint64_t *)MEMORY[0x1E0CD6900];
  if (a4)
    objc_msgSend(v7, "setObject:forKey:", a4, *MEMORY[0x1E0CD6900]);
  result = 0;
  v17 = SecItemCopyMatching((CFDictionaryRef)v7, &result);
  if (v17 != -25300 && v17)
  {
    *a1 = 0;
    if (v7)
LABEL_58:
      CFRelease(v7);
  }
  else
  {
    v49 = result;
    v50 = v7;
    cf = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    obj = (id)result;
    v18 = objc_msgSend((id)result, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
    if (v18)
    {
      v60 = *MEMORY[0x1E0CD6908];
      v61 = *(_QWORD *)v66;
      v54 = *v16;
      v53 = *v15;
      v52 = *MEMORY[0x1E0CD6A98];
      v51 = *MEMORY[0x1E0CD6990];
      v56 = *MEMORY[0x1E0CD6B60];
      while (2)
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v66 != v61)
            objc_enumerationMutation(obj);
          v20 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v19);
          v21 = (char *)objc_msgSend(v20, "objectForKeyedSubscript:", v60);
          v22 = v21;
          if (v21 && (v23 = objc_msgSend(v21, "bytes"), v24 = objc_msgSend(v22, "length"), (v22 = (char *)v24) != 0))
          {
            if (HIDWORD(v24))
            {
              __break(0xC471u);
              return;
            }
            v25 = WTF::fastMalloc((WTF *)v24);
            v26 = (WTF *)v25;
            v27 = 0;
            do
            {
              v27[v25] = v27[v23];
              ++v27;
            }
            while (v22 != v27);
          }
          else
          {
            v26 = 0;
          }
          v62[0] = v26;
          v62[1] = v22;
          cbor::CBORReader::read();
          if (v26)
            WTF::fastFree(v26, v28);
          if (v64
            && v63[0] == 5
            && (Map = cbor::CBORValue::getMap((cbor::CBORValue *)v63),
                cbor::CBORValue::CBORValue(),
                v30 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v62), cbor::CBORValue::~CBORValue((cbor::CBORValue *)v62), v31 = (_QWORD *)(Map + 8), (_QWORD *)(Map + 8) != v30)&& (v33 = *((_DWORD *)v30 + 16), v32 = (cbor::CBORValue *)(v30 + 8), v33 == 3))
          {
            String = (_QWORD *)cbor::CBORValue::getString(v32);
            v35 = objc_alloc(MEMORY[0x1E0C99E08]);
            if (*String)
              v36 = (const __CFString *)WTF::StringImpl::operator NSString *();
            else
              v36 = &stru_1E351F1B8;
            v37 = (void *)objc_msgSend(v35, "initWithObjectsAndKeys:", v36, CFSTR("_WKLocalAuthenticatorCredentialNameKey"), objc_msgSend(v20, "objectForKeyedSubscript:", v54), CFSTR("_WKLocalAuthenticatorCredentialIDKey"), objc_msgSend(v20, "objectForKeyedSubscript:", v53), CFSTR("_WKLocalAuthenticatorCredentialRelyingPartyIDKey"), objc_msgSend(v20, "objectForKeyedSubscript:", v52), CFSTR("_WKLocalAuthenticatorCredentialLastModificationDateKey"), objc_msgSend(v20, "objectForKeyedSubscript:", v51), CFSTR("_WKLocalAuthenticatorCredentialCreationDateKey"), 0);
            cbor::CBORValue::CBORValue();
            v38 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v62);
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)v62);
            if (v31 == v38 || (v40 = *((_DWORD *)v38 + 16), v39 = (cbor::CBORValue *)(v38 + 8), v40 != 2))
            {
              objc_msgSend(v37, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99E38], "null"), CFSTR("_WKLocalAuthenticatorCredentialUserHandleKey"));
            }
            else
            {
              ByteString = cbor::CBORValue::getByteString(v39);
              v42 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *(_QWORD *)ByteString, *(unsigned int *)(ByteString + 12));
              objc_msgSend(v37, "setObject:forKey:", v42, CFSTR("_WKLocalAuthenticatorCredentialUserHandleKey"));
              if (v42)
                CFRelease(v42);
            }
            if (objc_msgSend((id)objc_msgSend(v20, "allKeys"), "containsObject:", v57))
              objc_msgSend(v37, "setObject:forKey:", objc_msgSend(v20, "objectForKeyedSubscript:", v57), CFSTR("_WKLocalAuthenticatorCredentialSynchronizableKey"));
            if (objc_msgSend((id)objc_msgSend(v20, "allKeys"), "containsObject:", v56))
              objc_msgSend(v37, "setObject:forKey:", objc_msgSend(v20, "objectForKeyedSubscript:", v56), CFSTR("_WKLocalAuthenticatorCredentialGroupKey"));
            cbor::CBORValue::CBORValue();
            v44 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)v62);
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)v62);
            if (v31 != v44)
            {
              v46 = *((_DWORD *)v44 + 16);
              v45 = (cbor::CBORValue *)(v44 + 8);
              if (v46 == 3)
              {
                if (*(_QWORD *)cbor::CBORValue::getString(v45))
                  v47 = (const __CFString *)WTF::StringImpl::operator NSString *();
                else
                  v47 = &stru_1E351F1B8;
                objc_msgSend(v37, "setObject:forKey:", v47, CFSTR("_WKLocalAuthenticatorCredentialDisplayNameKey"));
              }
            }
            objc_msgSend(cf, "addObject:", v37);
            if (v37)
              CFRelease(v37);
            v43 = 1;
          }
          else
          {
            v43 = 0;
            *a1 = 0;
          }
          if (v64)
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)v63);
          if (!v43)
          {
            if (cf)
              CFRelease(cf);
            goto LABEL_55;
          }
          ++v19;
        }
        while (v19 != v18);
        v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
        v18 = v48;
        if (v48)
          continue;
        break;
      }
    }
    *a1 = cf;
LABEL_55:
    v7 = v50;
    if (v49)
      CFRelease(v49);
    if (v50)
      goto LABEL_58;
  }
}

void sub_196C7F930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef cf,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (cf)
    CFRelease(cf);
  if (a19)
    CFRelease(a19);
  if (a20)
    CFRelease(a20);
  _Unwind_Resume(exception_object);
}

void *WebKit::newAccessibilityRemoteToken(void *this, NSUUID *a2)
{
  void *v2;
  void *v3;
  _QWORD v4[3];
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v2 = this;
    v3 = (void *)MEMORY[0x1E0CB36F8];
    v4[0] = CFSTR("ax-pid");
    v5[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", getpid());
    v4[1] = CFSTR("ax-uuid");
    v4[2] = CFSTR("ax-register");
    v5[1] = objc_msgSend(v2, "UUIDString");
    v5[2] = MEMORY[0x1E0C9AAB0];
    return (void *)objc_msgSend(v3, "archivedDataWithRootObject:requiringSecureCoding:error:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 3), 1, 0);
  }
  return this;
}

uint64_t *WebKit::AuxiliaryProcess::applyProcessCreationParameters(WebKit::AuxiliaryProcess *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebCore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::logChannels(this);
  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v13 = v3;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  v5 = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      v5 = (WebCore *)WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::logChannels(v5);
  v6 = a2[1];
  if (v6)
    *(_DWORD *)v6 += 2;
  v12 = v6;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
  }
  v8 = a2[2];
  if (v8)
    *(_DWORD *)v8 += 2;
  v11 = v8;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return WebKit::SecureCoding::applyProcessCreationParameters((WebCore *)a2);
}

WebKit::LogChannels *WebKit::LogChannels::LogChannels(WebKit::LogChannels *this)
{
  void *v2;
  WTF *v3;
  uint64_t v5[2];
  uint64_t __dst[93];

  __dst[92] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 1;
  *(_QWORD *)this = &off_1E351EA78;
  memcpy(__dst, &constinit_2, 0x2E0uLL);
  WTF::Vector<WTFLogChannel *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, __dst, 0x5CuLL);
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, v2);
  }
  *((_QWORD *)this + 1) = v5[0];
  *((_QWORD *)this + 2) = v5[1];
  return this;
}

uint64_t *WTF::Vector<WTFLogChannel *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebKit::SecureCoding::applyProcessCreationParameters(WebCore *a1)
{
  uint64_t v1;
  uint64_t *result;

  v1 = WebCore::isInAuxiliaryProcess(a1);
  if ((v1 & 1) == 0
    || (result = WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash((WebKit::SecureCoding *)v1),
        qword_1ECE73440))
  {
    __break(0xC471u);
    JUMPOUT(0x196C7FF10);
  }
  return result;
}

uint64_t *WebKit::AuxiliaryProcessProxy::auxiliaryProcessParameters@<X0>(WebKit::AuxiliaryProcessProxy *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl ****v3;
  WebKit::UIProcess *v4;
  WebKit::UIProcess *v5;
  WebKit::SecureCoding *v6;
  uint64_t *result;
  _QWORD **v8;
  uint64_t *v9;
  WTF::StringImpl ***v10;

  a2[3] = 0;
  v3 = (WTF::StringImpl ****)(a2 + 3);
  WebKit::UIProcess::wtfLogLevelString(this);
  WebKit::UIProcess::webCoreLogLevelString(v4);
  a2[1] = v10;
  WebKit::UIProcess::webKitLogLevelString(v5);
  a2[2] = v10;
  result = WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(v6);
  v8 = (_QWORD **)*result;
  if (*result)
  {
    v9 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v9, v8);
    v10 = 0;
    std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](v3, (WTF::StringImpl *)v9);
    return (uint64_t *)std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](&v10, 0);
  }
  return result;
}

void WebKit::UIProcess::webCoreLogLevelString(WebKit::UIProcess *this)
{
  _QWORD block[5];

  if ((byte_1EE3417A2 & 1) == 0)
  {
    qword_1EE3417C0 = 0;
    byte_1EE3417A2 = 1;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit9UIProcess21webCoreLogLevelStringEv_block_invoke;
  block[3] = &__block_descriptor_33_e8_32c54_ZTSKZN6WebKit9UIProcess21webCoreLogLevelStringEvE3__0_e5_v8__0l;
  if (qword_1EE3417C8 != -1)
    dispatch_once(&qword_1EE3417C8, block);
  JUMPOUT(0x19AEABCC8);
}

void WebKit::UIProcess::webKitLogLevelString(WebKit::UIProcess *this)
{
  _QWORD block[5];

  if ((byte_1EE3417A3 & 1) == 0)
  {
    qword_1EE3417D0 = 0;
    byte_1EE3417A3 = 1;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit9UIProcess20webKitLogLevelStringEv_block_invoke;
  block[3] = &__block_descriptor_33_e8_32c53_ZTSKZN6WebKit9UIProcess20webKitLogLevelStringEvE3__0_e5_v8__0l;
  if (qword_1EE3417D8 != -1)
    dispatch_once(&qword_1EE3417D8, block);
  JUMPOUT(0x19AEABCC8);
}

void WebKit::UIProcess::wtfLogLevelString(WebKit::UIProcess *this)
{
  _QWORD block[5];

  if ((byte_1EE3417A1 & 1) == 0)
  {
    qword_1EE3417B0 = 0;
    byte_1EE3417A1 = 1;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN6WebKit9UIProcess17wtfLogLevelStringEv_block_invoke;
  block[3] = &__block_descriptor_33_e8_32c50_ZTSKZN6WebKit9UIProcess17wtfLogLevelStringEvE3__0_e5_v8__0l;
  if (qword_1EE3417B8 != -1)
    dispatch_once(&qword_1EE3417B8, block);
  JUMPOUT(0x19AEABCC8);
}

char *IPC::ArgumentCoder<WebCore::ResourceRequestPlatformData,void>::encode(IPC::Encoder *a1, void **a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char *result;

  v2 = (char *)a2;
  IPC::encodeObjectDirectly<NSURLRequest>((uint64_t)a1, *a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 8);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v2 + 10);
  v4 = v2[12];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[13];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[14];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  LOBYTE(v2) = v2[15];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(uint64_t *a1, _QWORD **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  return a1;
}

uint64_t *WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v18;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
      v10 = *a2;
      if (*a2)
        v10 += *((unsigned int *)v10 - 1);
      while (v8 != v10)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = ~(*v8 << 32) + *v8;
        v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
        v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
        v16 = v12 & (((v15 + ~(v15 << 27)) >> 31) ^ ((_DWORD)v15 + ~((_DWORD)v15 << 27)));
        if (*(_QWORD *)(v11 + 8 * v16))
        {
          v18 = 1;
          do
            v16 = ((_DWORD)v16 + v18++) & v12;
          while (*(_QWORD *)(v11 + 8 * v16));
        }
        *(_QWORD *)(v11 + 8 * v16) = *v8;
        while (++v8 != v9)
        {
          if ((unint64_t)(*v8 + 1) > 1)
            goto LABEL_14;
        }
        v8 = v9;
LABEL_14:
        ;
      }
    }
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

void IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>(uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>,void>::decode(a2, a2, (uint64_t)&v15, a3);
  if (!v16)
  {
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
      if (*a2)
        goto LABEL_23;
    }
    goto LABEL_12;
  }
  if (!*a2 || (WebKit::CoreIPCNSCFObject::valueIsAllowed((uint64_t)a2, v15) & 1) == 0)
  {
LABEL_12:
    LOBYTE(v5) = 0;
    goto LABEL_13;
  }
  v5 = *a2;
  if (*a2)
  {
    if (v16)
    {
      v6 = 0;
      v5 = v15;
      v15 = 0;
      *(_QWORD *)a1 = v5;
      LOBYTE(v5) = 1;
      goto LABEL_14;
    }
LABEL_23:
    __break(1u);
    return;
  }
LABEL_13:
  *(_BYTE *)a1 = 0;
  v6 = 1;
LABEL_14:
  *(_BYTE *)(a1 + 8) = v5;
  if (v16)
  {
    v11 = v15;
    v15 = 0;
    if (v11)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v15, v11);
  }
  if (v6)
  {
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v13)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    }
  }
}

void sub_196C805E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v11;

  if (a10)
  {
    v11 = a9;
    a9 = 0;
    if (v11)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&a9, v11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::CoreIPCSecureCoding,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<WebKit::CoreIPCSecureCoding,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef cf;
  char v7;

  IPC::Decoder::decode<IPC::CoreIPCRetainPtr<NSObject  {objcproto14NSSecureCoding}>>(a1, (uint64_t)&cf);
  if (*a1)
  {
    if (!v7)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v5, (void *)cf);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v7)
  {
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
}

void sub_196C806EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::typeFromObject(IPC *this, objc_object *a2)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 8;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 13;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 11;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 12;
  NSClassFromString(CFSTR("__NSCFType"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 14;
  if (-[IPC conformsToProtocol:](this, "conformsToProtocol:", &unk_1EE345A30))
    return 10;
  return 15;
}

WebKit::CoreIPCNSCFObject *WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject(WebKit::CoreIPCNSCFObject *this, objc_object *a2)
{
  char *v3;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7[6];

  v7[5] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (char *)&loc_196C80964 + *((int *)qword_19787F2B0 + IPC::typeFromObject((IPC *)a2, a2));
    __asm { BR              X10 }
  }
  v5 = 0;
  v6 = 0;
  WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>((uint64_t)&v5, (uint64_t *)this);
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v6])(v7, &v5);
  return this;
}

void sub_196C80C64()
{
  __break(0xC471u);
}

void sub_196C80C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(char *, uint64_t))off_1E35085B0[a25])(&a20, v25);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCSecureCoding *WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding(WebKit::CoreIPCSecureCoding *this, void *cf)
{
  WebKit::CoreIPCSecureCoding *v3;
  uint64_t *v4;
  objc_class *v6;
  NSString *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WebKit *v12;
  objc_class *v13;
  WTF::StringImpl *v14;

  v3 = this;
  *(_QWORD *)this = cf;
  if (cf)
  {
    this = (WebKit::CoreIPCSecureCoding *)CFRetain(cf);
    if (*(_QWORD *)v3)
    {
      this = (WebKit::CoreIPCSecureCoding *)objc_msgSend(cf, "conformsToProtocol:", &unk_1EE345A30);
      if ((this & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196C80DA4);
      }
    }
  }
  WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(this);
  v4 = (uint64_t *)qword_1ECE73440;
  if (qword_1ECE73440)
  {
    v6 = (objc_class *)objc_opt_class();
    v7 = NSStringFromClass(v6);
    MEMORY[0x19AEABCC8](&v14, v7);
    if (*v4)
      v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(v4, &v14, v9) != 0;
    else
      v10 = 0;
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        goto LABEL_14;
      *(_DWORD *)v11 -= 2;
    }
    while (!v10)
    {
      v12 = (WebKit *)objc_opt_class();
      v11 = (WTF::StringImpl *)WebKit::crashWithClassName(v12, v13);
      __break(1u);
LABEL_14:
      WTF::StringImpl::destroy(v11, v8);
    }
  }
  return v3;
}

void sub_196C80E1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void **v10;
  const void *v12;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v12 = *v10;
  *v10 = 0;
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(WebKit::SecureCoding *this)
{
  if ((_MergedGlobals_131 & 1) == 0)
  {
    qword_1ECE73440 = 0;
    _MergedGlobals_131 = 1;
  }
  if (qword_1ECE73438 != -1)
    dispatch_once(&qword_1ECE73438, &__block_literal_global_42);
  return &qword_1ECE73440;
}

void IPC::Decoder::decode<IPC::CoreIPCRetainPtr<NSObject  {objcproto14NSSecureCoding}>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  IPC::decodeObjectDirectlyRequiringAllowedClasses<NSObject  {objcproto14NSSecureCoding}>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t WebKit::CoreIPCNSCFObject::toID@<X0>(WebKit::CoreIPCNSCFObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  *a2 = 0;
  v2 = *(_QWORD *)this;
  v5 = a2;
  v3 = *(unsigned int *)(v2 + 40);
  if ((_DWORD)v3 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(_QWORD **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit17CoreIPCNSCFObject4toIDEvE3__0JZNKS9_4toIDEvE3__1EEEEEJRKNS0_6__implIJDnNS8_12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEEEEDcOT_DpOT0____fmatrix
                                               + v3))(&v6);
  }
  return result;
}

void sub_196C80FA8(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void sub_196C811DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  const void *v16;
  const void *v17;

  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(uint64_t a1, uint64_t a2)
{
  void *v4;
  WKSecureCodingArchivingDelegate *v5;
  uint64_t v6;
  void (**v7)(void);
  uint64_t v8;
  void (**v9)(void);

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  v5 = objc_alloc_init(WKSecureCodingArchivingDelegate);
  v6 = PAL::DataDetectorsCoreLibrary((PAL *)1);
  v7 = (void (**)(void))MEMORY[0x1E0DCDFE8];
  if (v6)
  {
    ((void (*)(void))*MEMORY[0x1E0DCDFE8])();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[WKSecureCodingArchivingDelegate setRewriteMutableString:](v5, "setRewriteMutableString:", 1);
  }
  v8 = PAL::RevealCoreLibrary((PAL *)1);
  v9 = (void (**)(void))MEMORY[0x1E0DCDEF8];
  if (v8)
  {
    ((void (*)(void))*MEMORY[0x1E0DCDEF8])();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[WKSecureCodingArchivingDelegate setRewriteMutableString:](v5, "setRewriteMutableString:", 1);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[WKSecureCodingArchivingDelegate setRewriteMutableData:](v5, "setRewriteMutableData:", 1);
    -[WKSecureCodingArchivingDelegate setRewriteMutableArray:](v5, "setRewriteMutableArray:", 1);
  }
  if (PAL::RevealCoreLibrary((PAL *)1))
  {
    (*v9)();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[WKSecureCodingArchivingDelegate setTransformURLs:](v5, "setTransformURLs:", 0);
  }
  if (PAL::DataDetectorsCoreLibrary((PAL *)1))
  {
    (*v7)();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[WKSecureCodingArchivingDelegate setTransformURLs:](v5, "setTransformURLs:", 0);
  }
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    ((void (*)(void))*MEMORY[0x1E0DCE088])();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[WKSecureCodingArchivingDelegate setTransformURLs:](v5, "setTransformURLs:", 0);
      -[WKSecureCodingArchivingDelegate setRewriteMutableArray:](v5, "setRewriteMutableArray:", 1);
    }
  }
  objc_msgSend(v4, "setDelegate:", v5);
  objc_msgSend(v4, "encodeObject:forKey:", a2, *MEMORY[0x1E0CB2CD0]);
  objc_msgSend(v4, "finishEncoding");
  objc_msgSend(v4, "setDelegate:", 0);
  IPC::ArgumentCoder<__CFData const*,void>::encode(a1, (const __CFData *)objc_msgSend(v4, "encodedData"));
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
}

void sub_196C814B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<__CFData const*,void>::encode(uint64_t a1, const __CFData *cf)
{
  CFDataRef v4;

  v4 = cf;
  if (cf)
    CFRetain(cf);
  IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(a1, &v4);
  if (cf)
    CFRelease(cf);
}

void sub_196C81540(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(uint64_t a1, CFDataRef *a2)
{
  const UInt8 *BytePtr;
  size_t Length;

  BytePtr = CFDataGetBytePtr(*a2);
  Length = CFDataGetLength(*a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, BytePtr, Length);
}

id WebKit::WebProcessPool::ensureBundleParameters(WebKit::WebProcessPool *this)
{
  id result;
  const void *v3;

  result = (id)*((_QWORD *)this + 81);
  if (!result)
  {
    result = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v3 = (const void *)*((_QWORD *)this + 81);
    *((_QWORD *)this + 81) = result;
    if (v3)
    {
      CFRelease(v3);
      return (id)*((_QWORD *)this + 81);
    }
  }
  return result;
}

void WebKit::PageLoadState::Transaction::~Transaction(WebKit::PageLoadState::Transaction *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WebKit::PageLoadState *v4;
  int v5;
  uint64_t v6;

  v4 = (WebKit::PageLoadState *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 93) - 1;
    *((_DWORD *)v4 + 93) = v5;
    if (!v5)
      WebKit::PageLoadState::commitChanges(v4, a2, a3);
  }
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WebKit::PageLoadState::commitChanges(WebKit::PageLoadState *this, uint64_t a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  int hasOnlySecureContent;
  const Data *v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const WTF::StringImpl *v36;
  WTF *v37;

  if (!*((_BYTE *)this + 368))
    return;
  *((_BYTE *)this + 368) = 0;
  v34 = *((unsigned __int8 *)this + 328);
  v35 = *((unsigned __int8 *)this + 160);
  v32 = *((unsigned __int8 *)this + 329);
  v33 = *((unsigned __int8 *)this + 161);
  if (WTF::equal(*((WTF **)this + 13), *((const WTF::StringImpl **)this + 34), a3))
    v5 = WTF::equal(*((WTF **)this + 14), *((const WTF::StringImpl **)this + 35), v4) ^ 1;
  else
    v5 = 1;
  if (*((_QWORD *)this + 5))
  {
    v6 = 1;
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 24);
    if (v7 > 2)
      v6 = 0;
    else
      v6 = (3u >> (v7 & 7)) & 1;
  }
  v28 = v5;
  v26 = v6;
  if (*((_QWORD *)this + 26))
  {
    v8 = 1;
  }
  else
  {
    v9 = *((unsigned __int8 *)this + 192);
    if (v9 > 2)
      v8 = 0;
    else
      v8 = (3u >> (v9 & 7)) & 1;
  }
  WebKit::PageLoadState::activeURL((unsigned __int8 *)this + 24, &v37);
  WebKit::PageLoadState::activeURL((unsigned __int8 *)this + 192, &v36);
  v11 = v36;
  v10 = v37;
  v14 = WTF::equal(v37, v36, v12);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v13);
      if (!v10)
        goto LABEL_24;
LABEL_21:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v13);
      else
        *(_DWORD *)v10 -= 2;
      goto LABEL_24;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (v10)
    goto LABEL_21;
LABEL_24:
  hasOnlySecureContent = WebKit::PageLoadState::hasOnlySecureContent((WebKit::PageLoadState *)((char *)this + 24), (const Data *)v13);
  v17 = WebKit::PageLoadState::hasOnlySecureContent((WebKit::PageLoadState *)((char *)this + 192), v16);
  v30 = *((unsigned __int8 *)this + 194);
  v31 = *((unsigned __int8 *)this + 26);
  v18 = *((unsigned __int8 *)this + 27);
  v19 = *((unsigned __int8 *)this + 195);
  if (*((_QWORD *)this + 5))
    v20 = 0.1;
  else
    v20 = *((double *)this + 21);
  if (*((_QWORD *)this + 26))
    v21 = 0.1;
  else
    v21 = *((double *)this + 42);
  v29 = *((unsigned __int8 *)this + 176);
  v22 = *((unsigned __int8 *)this + 344);
  v27 = *((_QWORD *)this + 23);
  v25 = *((_QWORD *)this + 44);
  if (v35 != v34)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x80, 1);
  if (v33 != v32)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x90, 1);
  v23 = v26 ^ v8;
  if (v28)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x20, 1);
  if (v23)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x10, 1);
  v24 = hasOnlySecureContent ^ v17;
  if ((v14 & 1) == 0)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x30, 1);
  if (v24)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x40, 1);
  if (v31 != v30)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x50, 1);
  if (v18 != v19)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x60, 1);
  if (v20 != v21)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x70, 1);
  if (v29 != v22)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0xA0, 1);
  if (v27 == v25)
  {
    WebKit::PageLoadState::Data::operator=((uint64_t)this + 24, (uint64_t)this + 192);
    WebKit::WebPageProxy::activityStateDidChange(*((_QWORD *)this + 2), 128, 0, 0);
  }
  else
  {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0xB0, 1);
    WebKit::PageLoadState::Data::operator=((uint64_t)this + 24, (uint64_t)this + 192);
    WebKit::WebPageProxy::activityStateDidChange(*((_QWORD *)this + 2), 128, 0, 0);
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0xB8, 1);
  }
  if (v29 != v22)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0xA8, 1);
  if (v20 != v21)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x78, 1);
  if (v24)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x48, 1);
  if (v31 != v30)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x58, 1);
  if (v18 == v19)
  {
    if ((v14 & 1) != 0)
      goto LABEL_63;
  }
  else
  {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x68, 1);
    if ((v14 & 1) != 0)
    {
LABEL_63:
      if (!v23)
        goto LABEL_64;
LABEL_72:
      WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x18, 1);
      if (!v28)
        goto LABEL_66;
      goto LABEL_65;
    }
  }
  WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x38, 1);
  if (v23)
    goto LABEL_72;
LABEL_64:
  if (v28)
LABEL_65:
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x28, 1);
LABEL_66:
  if (v33 != v32)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x98, 1);
  if (v35 != v34)
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(_QWORD *))0x88, 1);
}

uint64_t WebKit::PageLoadState::hasOnlySecureContent(WebKit::PageLoadState *this, const Data *a2)
{
  if (*((_BYTE *)this + 1))
    return 0;
  else
    return WTF::protocolIs();
}

void WebKit::PageLoadState::callObserverCallback(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD *);
  uint64_t *v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 16);
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v13 = 0;
  v14 = 0;
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::PageLoadStateObserverBase&)#1},WTF::Vector<WTF::WeakPtr<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v13, (_DWORD *)a1);
  if (!HIDWORD(v14))
  {
    WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v7);
LABEL_15:
    CFRelease(*(CFTypeRef *)(v6 + 8));
    return;
  }
  v8 = v13;
  v9 = 8 * HIDWORD(v14);
  do
  {
    if (*v8)
    {
      v7 = *(void **)(*v8 + 8);
      if (v7)
      {
        if (WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(a1, (uint64_t)v7))
        {
          v10 = *v8;
          if (*v8)
            v10 = *(_QWORD *)(v10 + 8);
          v11 = (_QWORD *)(v10 + (a3 >> 1));
          v12 = a2;
          if ((a3 & 1) != 0)
            v12 = *(void (**)(_QWORD *))(*v11 + a2);
          v12(v11);
        }
      }
    }
    ++v8;
    v9 -= 8;
  }
  while (v9);
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v7);
  if (v6)
    goto LABEL_15;
}

double WebKit::RemoteLayerBackingStoreCollection::didFlushLayers@<D0>(WebKit::RemoteLayerBackingStoreCollection *this@<X0>, WebKit::RemoteLayerTreeTransaction *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  WebKit::PlatformCALayerRemote **v6;
  WebKit::PlatformCALayerRemote **v7;
  WebKit::PlatformCALayerRemote **v8;
  WebKit::PlatformCALayerRemote **v9;
  uint64_t v10;
  char v11;
  WebKit::PlatformCALayerRemote *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t i;
  uint64_t v33;
  unsigned int *v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (_QWORD *)((char *)a2 + 16);
  v6 = (WebKit::PlatformCALayerRemote **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2 + 2);
  v8 = v6;
  v9 = v7;
  if (*v5)
    v10 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
  else
    v10 = 0;
  if ((WebKit::PlatformCALayerRemote **)v10 == v6)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v8;
      if ((*((_BYTE *)*v8 + 65) & 4) != 0)
      {
        v13 = *((_QWORD *)v12 + 59);
        if (v13)
        {
          v44 = *(uint64_t **)(v13 + 200);
          v45 = *(_QWORD *)(v13 + 208);
          v46 = 0;
          *(_QWORD *)(v13 + 200) = 0;
          v47 = 0;
          *(_QWORD *)(v13 + 208) = 0;
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v7);
          v15 = HIDWORD(v45);
          v16 = *(unsigned int *)(a3 + 8);
          v17 = HIDWORD(v45) + (unint64_t)*(unsigned int *)(a3 + 12);
          if (v17 > v16)
          {
            v18 = v16 + (v16 >> 2);
            if (v18 >= 0x10)
              v19 = v18 + 1;
            else
              v19 = 16;
            if (v19 <= v17)
              v20 = HIDWORD(v45) + (unint64_t)*(unsigned int *)(a3 + 12);
            else
              v20 = v19;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v20);
            v15 = HIDWORD(v45);
          }
          if ((_DWORD)v15)
          {
            v21 = v44;
            v22 = *(_DWORD *)(a3 + 12);
            v23 = 8 * v15;
            do
            {
              v24 = *(_QWORD *)a3;
              v25 = *v21;
              *v21++ = 0;
              *(_QWORD *)(v24 + 8 * v22++) = v25;
              v23 -= 8;
            }
            while (v23);
            *(_DWORD *)(a3 + 12) = v22;
          }
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v14);
          v12 = *v8;
        }
        v11 = 1;
      }
      WebKit::PlatformCALayerRemote::didCommit(v12);
      while (++v8 != v9)
      {
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_26;
      }
      v8 = v9;
LABEL_26:
      ;
    }
    while (v8 != (WebKit::PlatformCALayerRemote **)v10);
  }
  *((_BYTE *)this + 144) = 0;
  v48 = 0;
  v49 = 0;
  v26 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v46, (uint64_t *)this + 3, v26, v27);
  v28 = *((_QWORD *)this + 3);
  if (v28)
  {
    v29 = *(unsigned int *)(v28 - 4);
    v30 = (uint64_t *)(v28 + 8 * v29);
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v44, (uint64_t *)this + 3, v30, (uint64_t *)(v28 + 8 * v29));
  for (i = v47; v47 != v45; i = v47)
  {
    v33 = *(_QWORD *)(*(_QWORD *)i + 8);
    v34 = (unsigned int *)(v33 + 8);
    if ((WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::RemoteLayerBackingStore>((uint64_t)this + 56, *(_QWORD *)(v33 + 8)) & 1) == 0)
    {
      v36 = HIDWORD(v49);
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerBackingStore&>((unsigned int *)&v48, v33);
      }
      else
      {
        v37 = v48;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v34, v33);
        v38 = *(unsigned int **)v34;
        if (*(_QWORD *)v34)
        {
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
        }
        *(_QWORD *)(v37 + 8 * v36) = v38;
        ++HIDWORD(v49);
      }
    }
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v46);
  }
  if (HIDWORD(v49))
  {
    v40 = v48;
    v41 = 8 * HIDWORD(v49);
    do
    {
      WebKit::RemoteLayerBackingStoreCollection::backingStoreBecameUnreachable(this, *(WebKit::RemoteLayerBackingStore **)(*(_QWORD *)v40 + 8));
      v40 += 8;
      v41 -= 8;
    }
    while (v41);
    v43 = (HIDWORD(v49) != 0) | v11;
    WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v42);
    if ((v43 & 1) == 0)
      return result;
  }
  else
  {
    WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v31);
    if ((v11 & 1) == 0)
      return result;
  }
  if ((*((_QWORD *)this + 15) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 15) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void sub_196C81F3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v14;
  va_list va;

  va_start(va, a12);
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::RemoteLayerBackingStore>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  ++*(_DWORD *)(a1 + 8);
  if (!a2 || !*(_QWORD *)(a2 + 8))
    return 0;
  v3 = a2;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v3);
}

WTF::StringImpl **WebKit::PlatformCALayerRemote::didCommit(WebKit::PlatformCALayerRemote *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **result;

  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 128, 0);
  result = (WTF::StringImpl **)*((_QWORD *)this + 18);
  if (result)
  {
    *((_QWORD *)this + 18) = 0;
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v2);
  }
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      v4 = a2;
      result = *(_QWORD *)result + 144 * a2;
      v5 = 144 * v3 - 144 * a2;
      do
      {
        result = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair(result, (WTF::StringImpl *)a2)+ 144;
        v5 -= 144;
      }
      while (v5);
      a2 = v4;
      *(_DWORD *)(v2 + 12) = v4;
      LODWORD(v3) = v4;
    }
    v6 = *(WTF **)v2;
    if (a2)
    {
      v8 = v3;
      v9 = *(_QWORD *)v2;
      if (a2 >= 0x1C71C72)
      {
        __break(0xC471u);
        return result;
      }
      v7 = 144 * a2;
      result = WTF::fastMalloc((WTF *)(144 * a2));
      *(_DWORD *)(v2 + 8) = (v7 & 0xFFFFFFF0) / 0x90;
      *(_QWORD *)v2 = result;
      v6 = (WTF *)v9;
      if (result != v9)
      {
        result = WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move(v9, (uint64_t *)(v9 + 144 * v8), result);
        v6 = (WTF *)v9;
      }
    }
    if (v6)
    {
      if (*(WTF **)v2 == v6)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v6, (void *)a2);
    }
  }
  return result;
}

void WebKit::RemoteLayerTreeDrawingArea::updateRendering(WebKit::RemoteLayerTreeDrawingArea *this)
{
  WebKit::RemoteLayerTreeDrawingArea *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  float v7;
  float v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WebKit::RemoteLayerBackingStoreCollection *v15;
  unsigned int v16;
  unsigned int v17;
  WebKit::RemoteLayerTreeTransaction *v18;
  void *v19;
  WebKit::RemoteLayerTreeTransaction *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebKit::PlatformCALayerRemote *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  IPC::Encoder *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  char *v57;
  IPC::Encoder *v58;
  __int128 v59;
  uint64_t v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  WebKit::RemoteLayerTreeTransaction *v77;
  WebKit::RemoteLayerTreeTransaction *v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  IPC::Encoder *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v91;
  unsigned __int8 *v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  IPC::Encoder *v101;
  unint64_t v102;
  void *v103;
  IPC::Encoder *v104;
  void *v105;
  IPC::Encoder *v106;
  WTF *v107;
  void *v108;
  IPC::Encoder *v109;
  unsigned int v110;
  unsigned int v111;
  void *v112;
  unint64_t v113;
  size_t v114;
  char *v115;
  void *v116;
  void *v117;
  size_t v118;
  uint64_t v119;
  char v120;
  WebKit::RemoteLayerBackingStoreCollection *v121;
  uint64_t *v122;
  WebKit::RemoteLayerTreeTransaction *v123;
  __int128 v124;
  uint64_t v125;
  WebKit::RemoteLayerTreeDrawingArea *v126;
  uint64_t v127;
  WebKit::RemoteLayerTreeTransaction *v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  IPC::Encoder *v133;
  char v134;
  _DWORD v135[5];
  _DWORD v136[2];
  IPC::Encoder *v137[2];
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  IPC::Encoder *v141;
  __int128 v142;
  uint64_t v143;
  _OWORD v144[6];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  char v159;
  char v160;
  char v161;
  char v162;
  uint64_t v163;
  uint64_t v164;

  v1 = this;
  v164 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 224))
  {
    *((_BYTE *)this + 225) = 1;
  }
  else if (*((_BYTE *)this + 227))
  {
    *((_BYTE *)this + 228) = 1;
  }
  else if (!*((_BYTE *)this + 226))
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 144);
      if (v5)
      {
        if (*(_DWORD *)(v5 - 12))
        {
          WebKit::DrawingArea::scaleViewToFitDocumentIfNeeded(v1);
          v6 = *((_BYTE *)v1 + 226);
          *((_BYTE *)v1 + 226) = 1;
          WebKit::WebPage::updateRendering((WebCore::Page **)v3);
          WebKit::WebPage::flushPendingIntrinsicContentSizeUpdate((IPC::Encoder *)v3);
          v7 = (float)*(int *)(v3 + 56);
          v8 = (float)*(int *)(v3 + 60);
          v130 = 0;
          v131 = v7;
          v132 = v8;
          v9 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v3);
          v126 = v1;
          if (v9)
          {
            v10 = (_DWORD *)v9;
            ++*(_DWORD *)(v9 + 8);
            *(_OWORD *)v137 = *(_OWORD *)(v9 + 1128);
            LODWORD(v138) = *(_DWORD *)(v9 + 1144);
            if ((_BYTE)v138)
              WebCore::FloatRect::intersect((WebCore::FloatRect *)&v130, (const WebCore::FloatRect *)v137);
            if (v10[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            else
              --v10[2];
          }
          v120 = v6;
          WebKit::WebPage::finalizeRenderingUpdate(v3);
          (*(void (**)(WebKit::RemoteLayerTreeDrawingArea *))(*(_QWORD *)v1 + 288))(v1);
          v12 = *((unsigned int *)v1 + 25);
          if ((_DWORD)v12)
          {
            v13 = 40 * v12;
            v14 = (_QWORD *)(*((_QWORD *)v1 + 11) + 16);
            do
            {
              if (*v14)
                (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v14 + 744))(*v14, &v130);
              v14 += 5;
              v13 -= 40;
            }
            while (v13);
          }
          v15 = *(WebKit::RemoteLayerBackingStoreCollection **)(*((_QWORD *)v1 + 10) + 88);
          *((_BYTE *)v15 + 144) = 1;
          v121 = v15;
          WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v15 + 56, v11);
          v125 = *((_QWORD *)v1 + 31) + 1;
          *((_QWORD *)v1 + 31) = v125;
          v128 = 0;
          v129 = 0;
          v16 = *((_DWORD *)v1 + 25);
          if (v16)
          {
            if (v16 >= 0x4EC4ED)
            {
              __break(0xC471u);
              JUMPOUT(0x196C82B90);
            }
            v17 = 832 * v16;
            v18 = (WebKit::RemoteLayerTreeTransaction *)WTF::fastMalloc((WTF *)(832 * v16));
            v20 = v18;
            LODWORD(v129) = v17 / 0x340;
            v128 = v18;
            v21 = *((_DWORD *)v1 + 25);
            if (v21)
            {
              v119 = v2;
              v22 = 0;
              v23 = (uint64_t *)*((_QWORD *)v1 + 11);
              v122 = &v23[5 * v21];
              __asm { FMOV            V0.2D, #1.0 }
              v124 = _Q0;
              v123 = v18;
              do
              {
                WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v121 + 72, v19);
                (*(void (**)(uint64_t))(*(_QWORD *)*v23 + 752))(*v23);
                v149 = 0u;
                v150 = 0u;
                v147 = 0u;
                v148 = 0u;
                v145 = 0u;
                v146 = 0u;
                memset(v144, 0, sizeof(v144));
                v151 = v124;
                v152 = v124;
                v156 = 0;
                v154 = 0;
                v157 = 0;
                v158 = 1;
                v159 = 0;
                v160 = 0;
                v161 = 0;
                v162 = 0;
                v163 = 0;
                v153 = 0xBFF0000000000000;
                v155 = v125;
                v29 = *((_QWORD *)v1 + 10);
                *((_QWORD *)&v145 + 1) = *((_QWORD *)v1 + 32);
                v30 = *((_QWORD *)v1 + 33);
                *((_QWORD *)v1 + 32) = 0;
                *((_QWORD *)v1 + 33) = 0;
                *(_QWORD *)&v146 = v30;
                v31 = *v23;
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v23 + 856))(*v23) & 1) == 0)
                  goto LABEL_108;
                v32 = *(WebKit::PlatformCALayerRemote **)(v31 + 632);
                if (!v32)
                  v32 = *(WebKit::PlatformCALayerRemote **)(v31 + 624);
                WebKit::RemoteLayerTreeContext::buildTransaction(v29, (uint64_t)v144, v32, v23[3], v23[4]);
                WebKit::WebPage::willCommitLayerTree(v3, (uint64_t)v144, v23[3], v23[4]);
                v33 = *((_WORD *)v1 + 140);
                *((_WORD *)v1 + 140) = 0;
                LOWORD(v157) = v33;
                v34 = *((_QWORD *)v1 + 34);
                *((_QWORD *)v1 + 34) = 0;
                v156 = v34;
                (*(void (**)(WebKit::RemoteLayerTreeDrawingArea *, _OWORD *))(*(_QWORD *)v1 + 456))(v1, v144);
                v127 = v22;
                *((_BYTE *)v1 + 227) = 1;
                v35 = v155;
                v36 = *(_QWORD *)(*((_QWORD *)v1 + 5) + 8);
                if (v36)
                  v37 = v36 - 16;
                else
                  v37 = 0;
                CFRetain(*(CFTypeRef *)(v37 + 8));
                v38 = *((_QWORD *)v1 + 4);
                v39 = WTF::fastMalloc((WTF *)0x240);
                *(_WORD *)v39 = 1109;
                *(_QWORD *)(v39 + 8) = v38;
                *(_QWORD *)(v39 + 528) = v39 + 16;
                *(_QWORD *)(v39 + 536) = v39 + 16;
                *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
                *(_OWORD *)(v39 + 560) = 0u;
                IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
                v133 = (IPC::Encoder *)v39;
                v40 = *(_QWORD *)(v39 + 544);
                v41 = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
                v42 = v41 + 8;
                v43 = *(_QWORD *)(v39 + 552);
                if (v43 < v41 + 8)
                {
                  v62 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
                  do
                  {
                    v61 = v62;
                    v62 *= 2;
                  }
                  while (v61 < v42);
                  v118 = v61;
                  v63 = (char *)mmap(0, v61, 3, 4098, -1, 0);
                  if (v63 == (char *)-1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196C82B88);
                  }
                  v44 = v63;
                  memcpy(v63, *(const void **)(v39 + 528), *(_QWORD *)(v39 + 544));
                  v64 = *(void **)(v39 + 528);
                  if (v64 != (void *)(v39 + 16))
                    munmap(v64, *(_QWORD *)(v39 + 552));
                  *(_QWORD *)(v39 + 528) = v44;
                  *(_QWORD *)(v39 + 552) = v118;
                  v40 = *(_QWORD *)(v39 + 544);
                }
                else
                {
                  v44 = *(char **)(v39 + 528);
                }
                bzero(&v44[v40], v41 - v40);
                *(_QWORD *)(v39 + 544) = v42;
                v45 = (uint64_t *)(*(_QWORD *)(v39 + 528) + v41);
                *(_QWORD *)(v39 + 536) = v45 + 1;
                *v45 = v35;
                (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v37 + 32) + 32))(v37 + 32, &v133, 0);
                v47 = v133;
                v133 = 0;
                v1 = v126;
                if (v47)
                {
                  IPC::Encoder::~Encoder(v47, v46);
                  WTF::fastFree(v48, v49);
                }
                if (v36)
                  CFRelease(*(CFTypeRef *)(v36 - 8));
                if (WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v3 + 48)))
                {
                  v50 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v3 + 48));
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50) & 1) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196C82A84);
                  }
                  WebKit::RemoteScrollingCoordinator::buildTransaction(v50, (uint64_t *)&v133);
                  v51 = v133;
                  v52 = v134;
                  v136[0] = v135[0];
                  *(_DWORD *)((char *)v136 + 3) = *(_DWORD *)((char *)v135 + 3);
                }
                else
                {
                  v52 = 0;
                  v51 = 0;
                }
                v53 = v23[3];
                v54 = v23[4];
                WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v137, (uint64_t)v144);
                v141 = v51;
                LOBYTE(v142) = v52;
                *(_DWORD *)((char *)&v142 + 1) = v136[0];
                DWORD1(v142) = *(_DWORD *)((char *)v136 + 3);
                *((_QWORD *)&v142 + 1) = v53;
                v143 = v54;
                WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v144, v55);
                WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v123 + 832 * v127, (uint64_t)v137);
                v57 = (char *)v123 + 832 * v127;
                v58 = v141;
                v141 = 0;
                *((_QWORD *)v57 + 100) = v58;
                v59 = v142;
                *((_QWORD *)v57 + 103) = v143;
                *(_OWORD *)(v57 + 808) = v59;
                v22 = v127 + 1;
                HIDWORD(v129) = v127 + 1;
                v60 = (uint64_t)v141;
                v141 = 0;
                if (v60)
                  WebCore::ScrollingStateTree::operator delete(v60, 0x50uLL);
                WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v137, v56);
                v23 += 5;
              }
              while (v23 != v122);
              v20 = v128;
              v2 = v119;
            }
          }
          else
          {
            v20 = 0;
          }
          if (HIDWORD(v129))
          {
            v65 = 832 * HIDWORD(v129);
            do
            {
              WebKit::RemoteLayerBackingStoreCollection::willCommitLayerTree(v121, v20);
              v20 = (WebKit::RemoteLayerTreeTransaction *)((char *)v20 + 832);
              v65 -= 832;
            }
            while (v65);
          }
          v66 = *((_QWORD *)v1 + 4);
          v67 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v67 = 1106;
          *(_QWORD *)(v67 + 8) = v66;
          *(_QWORD *)(v67 + 528) = v67 + 16;
          *(_QWORD *)(v67 + 536) = v67 + 16;
          *(_OWORD *)(v67 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v67 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v67);
          v68 = HIDWORD(v129);
          v69 = *(_QWORD *)(v67 + 544);
          v70 = (v69 + 7) & 0xFFFFFFFFFFFFFFF8;
          v71 = v70 + 8;
          v72 = *(_QWORD *)(v67 + 552);
          if (v72 < v70 + 8)
          {
            v113 = (2 * v72 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v114 = v113;
              v113 *= 2;
            }
            while (v114 < v71);
            v115 = (char *)mmap(0, v114, 3, 4098, -1, 0);
            if (v115 == (char *)-1)
            {
LABEL_108:
              __break(0xC471u);
              JUMPOUT(0x196C82A64);
            }
            v73 = v115;
            memcpy(v115, *(const void **)(v67 + 528), *(_QWORD *)(v67 + 544));
            v116 = *(void **)(v67 + 528);
            if (v116 != (void *)(v67 + 16))
              munmap(v116, *(_QWORD *)(v67 + 552));
            *(_QWORD *)(v67 + 528) = v73;
            *(_QWORD *)(v67 + 552) = v114;
            v69 = *(_QWORD *)(v67 + 544);
          }
          else
          {
            v73 = *(char **)(v67 + 528);
          }
          bzero(&v73[v69], v70 - v69);
          *(_QWORD *)(v67 + 544) = v71;
          v74 = (_QWORD *)(*(_QWORD *)(v67 + 528) + v70);
          *(_QWORD *)(v67 + 536) = v74 + 1;
          *v74 = v68;
          if (HIDWORD(v129))
          {
            v75 = (uint64_t *)v128;
            do
            {
              IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::encode((IPC::Encoder *)v67, v75);
              v76 = (uint64_t)(v75 + 100);
              IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::encode((IPC::Encoder *)v67, v76);
              v75 = (uint64_t *)(v76 + 32);
            }
            while (v75 != (uint64_t *)((char *)v128 + 832 * HIDWORD(v129)));
            v144[0] = 0uLL;
            v77 = v128;
            v78 = (WebKit::RemoteLayerTreeTransaction *)((char *)v128 + 832 * HIDWORD(v129));
            do
            {
              WebKit::RemoteLayerBackingStoreCollection::didFlushLayers(v121, v77, (uint64_t)v137);
              v80 = HIDWORD(v137[1]);
              v81 = HIDWORD(v137[1]) + (unint64_t)HIDWORD(v144[0]);
              if (v81 > DWORD2(v144[0]))
              {
                v82 = DWORD2(v144[0]) + ((unint64_t)DWORD2(v144[0]) >> 2);
                if (v82 >= 0x10)
                  v83 = v82 + 1;
                else
                  v83 = 16;
                if (v83 <= v81)
                  v84 = HIDWORD(v137[1]) + (unint64_t)HIDWORD(v144[0]);
                else
                  v84 = v83;
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v144, v84);
                v80 = HIDWORD(v137[1]);
              }
              if ((_DWORD)v80)
              {
                v85 = v137[0];
                v86 = HIDWORD(v144[0]);
                v87 = 8 * v80;
                do
                {
                  v88 = *(_QWORD *)&v144[0];
                  v89 = *(_QWORD *)v85;
                  *(_QWORD *)v85 = 0;
                  v85 = (IPC::Encoder *)((char *)v85 + 8);
                  *(_QWORD *)(v88 + 8 * v86++) = v89;
                  v87 -= 8;
                }
                while (v87);
                HIDWORD(v144[0]) = v86;
              }
              WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v137, v79);
              v77 = (WebKit::RemoteLayerTreeTransaction *)((char *)v77 + 832);
            }
            while (v77 != v78);
            if (HIDWORD(v144[0]))
            {
              v91 = *(uint64_t **)(v3 + 2392);
              if (v91)
              {
                WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(v91 + 8, v90);
                v91[14] = 0;
                ++v91[16];
              }
            }
          }
          else
          {
            v144[0] = 0uLL;
          }
          v92 = (unsigned __int8 *)(*((_QWORD *)v126 + 30) + 16);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(1u, v92));
          if ((v93 & 1) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196C82B1CLL);
          }
          v94 = *(_QWORD *)(v3 + 40);
          v96 = *((_QWORD *)v126 + 29);
          v95 = (unsigned int *)*((_QWORD *)v126 + 30);
          if (v95)
          {
            do
              v97 = __ldaxr(v95);
            while (__stlxr(v97 + 1, v95));
          }
          v137[0] = (IPC::Encoder *)v95;
          v137[1] = (IPC::Encoder *)v67;
          v138 = *(_QWORD *)&v144[0];
          v98 = DWORD2(v144[0]);
          v99 = HIDWORD(v144[0]);
          v144[0] = 0uLL;
          v139 = __PAIR64__(v99, v98);
          v140 = v94;
          v100 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v100 = off_1E34B36C8;
          *(IPC::Encoder **)(v100 + 8) = v137[0];
          v101 = v137[1];
          v137[0] = 0;
          v137[1] = 0;
          *(_QWORD *)(v100 + 16) = v101;
          *(_QWORD *)(v100 + 24) = v138;
          v102 = v139;
          v138 = 0;
          v139 = 0;
          *(_QWORD *)(v100 + 32) = v102;
          *(_QWORD *)(v100 + 40) = v140;
          v133 = (IPC::Encoder *)v100;
          (*(void (**)(uint64_t, IPC::Encoder **))(*(_QWORD *)v96 + 32))(v96, &v133);
          v104 = v133;
          v133 = 0;
          if (v104)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v104 + 8))(v104);
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v138, v103);
          v106 = v137[1];
          v137[1] = 0;
          if (v106)
          {
            IPC::Encoder::~Encoder(v106, v105);
            WTF::fastFree(v107, v108);
          }
          v109 = v137[0];
          v137[0] = 0;
          if (v109)
          {
            do
            {
              v110 = __ldaxr((unsigned int *)v109);
              v111 = v110 - 1;
            }
            while (__stlxr(v111, (unsigned int *)v109));
            if (!v111)
            {
              atomic_store(1u, (unsigned int *)v109);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v109 + 1);
              WTF::fastFree(v109, v117);
            }
          }
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v144, v105);
          WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v112);
          *((_BYTE *)v126 + 226) = v120;
        }
      }
    }
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 - 8));
  }
}

void sub_196C82B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char v26;
  _DWORD *v27;
  uint64_t v28;

  if (v27[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
  else
    --v27[2];
  *(_BYTE *)(a26 + 226) = v26;
  if (v28)
    CFRelease(*(CFTypeRef *)(v28 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a1 + 48) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 52) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 64) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 68) = v7;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a1 + 80) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(a1 + 84) = v8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 96) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = v9;
  *(_QWORD *)(a1 + 112) = 0;
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 112) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 116) = v10;
  v11 = *(_OWORD *)(a2 + 120);
  v12 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  WebCore::Color::Color();
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v13 = *(_OWORD *)(a2 + 208);
  v14 = *(_OWORD *)(a2 + 224);
  v15 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 240) = v15;
  *(_OWORD *)(a1 + 208) = v13;
  std::__optional_move_base<WebKit::EditorState,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 272), a2 + 272);
  v16 = *(_OWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = v16;
  return a1;
}

void sub_196C82F94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::ChangedLayers *a10)
{
  WTF **v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Color *v13;
  WebCore::Color *v14;
  WebCore::Color *v15;
  WTF **v16;
  WTF **v17;
  WTF **v18;
  void *v20;
  void *v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  void *v27;

  WebCore::Color::~Color(v15, a2);
  WebCore::Color::~Color(v14, v20);
  WebCore::Color::~Color(v13, v21);
  v23 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v11 + 104) = 0;
    *(_DWORD *)(v11 + 112) = 0;
    WTF::fastFree(v23, v22);
  }
  v24 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v11 + 88) = 0;
    *(_DWORD *)(v11 + 96) = 0;
    WTF::fastFree(v24, v22);
  }
  v25 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v11 + 72) = 0;
    *(_DWORD *)(v11 + 80) = 0;
    WTF::fastFree(v25, v22);
  }
  v26 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v11 + 56) = 0;
    *(_DWORD *)(v11 + 64) = 0;
    WTF::fastFree(v26, v22);
  }
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, v22);
  WebKit::ChangedLayers::~ChangedLayers(a10, v27);
  _Unwind_Resume(a1);
}

void sub_196C83030()
{
  JUMPOUT(0x196C82FB0);
}

void sub_196C83038()
{
  JUMPOUT(0x196C82FB8);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::didReceiveMessage(uint64_t **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  WTF *v37;
  unint64_t v38;
  int *v39;
  int v40;
  int i;
  unsigned int *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int *v46;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  WTF *v58;
  _QWORD *v59;
  int v60;
  WTF *v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  WTF *v109[2];
  char v110;
  WTF *v111;
  unint64_t v112;
  char v113;
  int v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  int v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  char v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  switch(*((_WORD *)a3 + 25))
  {
    case 0x451:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)v109);
      if (!v110
        || (IPC::Decoder::decode<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>((uint64_t *)a3, &v111),
            !v115))
      {
        LOBYTE(v116) = 0;
        LOBYTE(v122) = 0;
        goto LABEL_115;
      }
      v7 = *((_QWORD *)a3 + 1);
      v8 = *(_QWORD *)a3;
      v9 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v7 < v9 || v7 - v9 <= 7)
      {
        v103 = 0;
        v104 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v6 = (unsigned int *)*((_QWORD *)a3 + 3);
        if (v6)
          goto LABEL_180;
        goto LABEL_160;
      }
      v11 = (uint64_t *)(v8 + v9);
      *((_QWORD *)a3 + 2) = v11 + 1;
      if (!v8)
      {
        v103 = v7;
        v104 = 0;
        goto LABEL_160;
      }
      v12 = *v11;
      if ((unint64_t)(*v11 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_161;
      if (v110)
      {
        v116 = *(_OWORD *)v109;
        LOBYTE(v117) = 0;
        LODWORD(v121) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)&v117, (uint64_t)&v111);
        *((_QWORD *)&v121 + 1) = v12;
        v13 = 1;
        goto LABEL_13;
      }
      goto LABEL_179;
    case 0x452:
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v23 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v21 < v23 || v21 - v23 <= 7)
      {
        v81 = 0;
        v82 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v83 = *((_QWORD *)a3 + 3);
        if (v83)
        {
          if (v21)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v83 + 16))(v83, v22, v21);
            v82 = *(_QWORD *)a3;
            v81 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
        }
        goto LABEL_132;
      }
      v25 = (unint64_t *)(v22 + v23);
      *((_QWORD *)a3 + 2) = v25 + 1;
      if (!v22)
      {
        v81 = v21;
        v82 = 0;
LABEL_132:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v84 = *((_QWORD *)a3 + 3);
        if (v84 && v81)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v82);
LABEL_146:
        v93 = *(_QWORD *)a3;
        v94 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v95 = *((_QWORD *)a3 + 3);
        if (v95 && v94)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v93);
LABEL_147:
        v96 = *(_QWORD *)a3;
        v97 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v98 = *((_QWORD *)a3 + 3);
        if (v98 && v97)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v96);
        return;
      }
      v26 = *v25;
      v109[0] = 0;
      v109[1] = 0;
      if (v26 >= 0x4EC)
      {
        while (1)
        {
          IPC::Decoder::decode<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)&v116, (uint64_t *)a3);
          if (!v130)
            break;
          v85 = HIDWORD(v109[1]);
          if (HIDWORD(v109[1]) == LODWORD(v109[1]))
          {
            WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)v109, (unint64_t)&v116);
          }
          else
          {
            v87 = WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v109[0] + 832 * HIDWORD(v109[1]), (uint64_t)&v116);
            v88 = v127;
            v127 = 0;
            *(_QWORD *)(v87 + 800) = v88;
            v89 = v129;
            *(_OWORD *)(v87 + 808) = v128;
            *(_QWORD *)(v87 + 824) = v89;
            HIDWORD(v109[1]) = v85 + 1;
          }
          std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::RemoteLayerTreeTransaction *)&v116, v86);
          if (!--v26)
          {
            v35 = v109[1];
            v34 = HIDWORD(v109[1]);
            v33 = v109[0];
            if (LODWORD(v109[1]) > HIDWORD(v109[1]))
            {
              v90 = v109[0];
              if (HIDWORD(v109[1]))
              {
                if (HIDWORD(v109[1]) >= 0x4EC4ED)
                {
                  __break(0xC471u);
                  return;
                }
                v91 = WTF::fastMalloc((WTF *)(832 * HIDWORD(v109[1])));
                v35 = 832 * v34 / 0x340;
                if ((WTF *)v91 == v33)
                {
                  v90 = v33;
                }
                else
                {
                  v90 = (WTF *)v91;
                  WTF::VectorMover<false,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::move((uint64_t)v33, (uint64_t)v33 + 832 * v34, v91);
                }
              }
              if (v33)
              {
                if (v90 == v33)
                {
                  v35 = 0;
                  v90 = 0;
                  v109[0] = 0;
                  LODWORD(v109[1]) = 0;
                }
                WTF::fastFree(v33, a2);
              }
              v33 = v90;
            }
            goto LABEL_42;
          }
        }
LABEL_145:
        std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::RemoteLayerTreeTransaction *)&v116, v27);
        WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v109, v92);
        goto LABEL_146;
      }
      if (v26)
      {
        LODWORD(v109[1]) = 832 * (int)v26 / 0x340u;
        v109[0] = (WTF *)WTF::fastMalloc((WTF *)(832 * v26));
        do
        {
          IPC::Decoder::decode<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)&v116, (uint64_t *)a3);
          if (!v130)
            goto LABEL_145;
          v28 = HIDWORD(v109[1]);
          if (HIDWORD(v109[1]) == LODWORD(v109[1]))
          {
            WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)v109, (unint64_t)&v116);
          }
          else
          {
            v30 = WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v109[0] + 832 * HIDWORD(v109[1]), (uint64_t)&v116);
            v31 = v127;
            v127 = 0;
            *(_QWORD *)(v30 + 800) = v31;
            v32 = v129;
            *(_OWORD *)(v30 + 808) = v128;
            *(_QWORD *)(v30 + 824) = v32;
            HIDWORD(v109[1]) = v28 + 1;
          }
          std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::RemoteLayerTreeTransaction *)&v116, v29);
          --v26;
        }
        while (v26);
        v33 = v109[0];
        v35 = v109[1];
        v34 = HIDWORD(v109[1]);
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v33 = 0;
      }
LABEL_42:
      v109[0] = 0;
      v109[1] = 0;
      v111 = v33;
      v112 = __PAIR64__(v34, v35);
      v113 = 1;
      WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v109, a2);
      v36 = *((_QWORD *)a3 + 1);
      v37 = *(WTF **)a3;
      v38 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v36 < v38 || v36 - v38 <= 3)
      {
        v99 = 0;
        v100 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v101 = *((_QWORD *)a3 + 3);
        if (v101)
        {
          if (v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
            v100 = *(_QWORD *)a3;
            v99 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v99 = 0;
            v100 = 0;
          }
        }
        goto LABEL_156;
      }
      v39 = (int *)((char *)v37 + v38);
      *((_QWORD *)a3 + 2) = v39 + 1;
      if (!v37)
      {
        v99 = v36;
        v100 = 0;
LABEL_156:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v102 = *((_QWORD *)a3 + 3);
        if (v102 && v99)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, v100);
        goto LABEL_122;
      }
      v40 = *v39;
      v107 = 0;
      if (!v40)
      {
        v76 = 0;
LABEL_127:
        v111 = 0;
        v112 = 0;
        *(_QWORD *)&v116 = v33;
        *((_QWORD *)&v116 + 1) = __PAIR64__(v34, v35);
        v117 = v76;
        v118 = 1;
        WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v37);
        WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTree((uint64_t)this, a2, (uint64_t *)&v116, &v117);
        if (v118)
        {
          if (v117)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v117, v80);
          WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v80);
        }
        return;
      }
      for (i = 0; i != v40; ++i)
      {
        v6 = (unsigned int *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (!(_BYTE)v37)
        {
LABEL_120:
          if (v107)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v107, v37);
LABEL_122:
          v77 = *(void **)a3;
          v78 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v79 = *((_QWORD *)a3 + 3);
          if (v79 && v78)
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v79 + 16))(v79, v77);
          if (v113)
            WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v77);
          goto LABEL_147;
        }
        v42 = v6;
        v7 = *((_QWORD *)a3 + 1);
        v37 = *(WTF **)a3;
        v43 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
        if (v7 <= v43)
        {
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v67 = *((_QWORD *)a3 + 3);
          if (!v67 || !v7)
            goto LABEL_96;
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
          v37 = *(WTF **)a3;
          v7 = *((_QWORD *)a3 + 1);
LABEL_103:
          v71 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v71 && v7)
          {
            (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v71 + 16))(v71, v37);
            v37 = *(WTF **)a3;
            v7 = *((_QWORD *)a3 + 1);
LABEL_106:
            v72 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v72 && v7)
              (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v72 + 16))(v72, v37);
          }
          else
          {
LABEL_96:
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
          }
LABEL_98:
          LOBYTE(v109[0]) = 0;
          LOBYTE(v109[1]) = 0;
          v37 = *(WTF **)a3;
          v7 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v6 = (unsigned int *)*((_QWORD *)a3 + 3);
          if (v6 && v7)
            v6 = (unsigned int *)(*(uint64_t (**)(unsigned int *, WTF *))(*(_QWORD *)v6 + 16))(v6, v37);
          goto LABEL_61;
        }
        v44 = (unsigned __int8 *)v37 + v43;
        *((_QWORD *)a3 + 2) = v44 + 1;
        if (!v37)
          goto LABEL_103;
        v45 = *v44;
        if (v45 >= 2)
          goto LABEL_106;
        if (!v45)
        {
          v109[0] = 0;
          LOBYTE(v109[1]) = 1;
          goto LABEL_62;
        }
        IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::decode((uint64_t *)a3, (uint64_t)&v116);
        if (!v126)
        {
          v68 = *(_QWORD *)a3;
          v69 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v70 = *((_QWORD *)a3 + 3);
          if (!v70)
            goto LABEL_98;
          if (!v69)
            goto LABEL_98;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v68);
          if (!v126)
            goto LABEL_98;
        }
        v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x98);
        v46 = v6;
        *(_BYTE *)v6 = 0;
        *((_BYTE *)v6 + 72) = 0;
        if (v120)
        {
          v6[16] = -1;
          v6 = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)&v116);
          *((_BYTE *)v46 + 72) = 1;
          v47 = v120 == 0;
        }
        else
        {
          v47 = 1;
        }
        *((_OWORD *)v46 + 5) = v121;
        v48 = v122;
        v49 = v123;
        v50 = v124;
        *((_BYTE *)v46 + 144) = v125;
        *((_OWORD *)v46 + 7) = v49;
        *((_OWORD *)v46 + 8) = v50;
        *((_OWORD *)v46 + 6) = v48;
        v109[0] = (WTF *)v46;
        LOBYTE(v109[1]) = 1;
        if (v126 && !v47 && v119 != -1)
          v6 = (unsigned int *)off_1E34B3758[v119]((int)&v108, (WTF::MachSendRight *)&v116);
LABEL_61:
        if (!LOBYTE(v109[1]))
          goto LABEL_120;
LABEL_62:
        if ((unint64_t)v42 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_84;
        v51 = v107;
        if (v107
          || (v6 = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(&v107, 0), (v51 = v107) != 0))
        {
          v52 = *(_DWORD *)(v51 - 8);
        }
        else
        {
          v52 = 0;
        }
        v53 = ((unint64_t)v42 + ~((_QWORD)v42 << 32)) ^ (((unint64_t)v42 + ~((_QWORD)v42 << 32)) >> 22);
        v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
        v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
        v56 = v52 & ((v55 >> 31) ^ v55);
        v57 = (_QWORD *)(v51 + 16 * v56);
        v58 = (WTF *)*v57;
        if (*v57)
        {
          v59 = 0;
          v60 = 1;
          while (v58 != (WTF *)v42)
          {
            if (v58 == (WTF *)-1)
              v59 = v57;
            v56 = (v56 + v60) & v52;
            v57 = (_QWORD *)(v51 + 16 * v56);
            v58 = (WTF *)*v57;
            ++v60;
            if (!*v57)
            {
              if (v59)
              {
                *v59 = 0;
                v59[1] = 0;
                --*(_DWORD *)(v51 - 16);
                v57 = v59;
              }
              goto LABEL_74;
            }
          }
LABEL_84:
          v66 = 0;
          goto LABEL_85;
        }
LABEL_74:
        *v57 = v42;
        v6 = (unsigned int *)(v57 + 1);
        v37 = (WTF *)v57[1];
        v61 = v109[0];
        v109[0] = 0;
        v57[1] = v61;
        if (v37)
          v6 = (unsigned int *)std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v6, v37);
        if (v107)
          v62 = *(_DWORD *)(v107 - 12) + 1;
        else
          v62 = 1;
        *(_DWORD *)(v107 - 12) = v62;
        if (v107)
          v63 = *(_DWORD *)(v107 - 12);
        else
          v63 = 0;
        v64 = (*(_DWORD *)(v107 - 16) + v63);
        v65 = *(unsigned int *)(v107 - 4);
        if (v65 > 0x400)
        {
          if (v65 > 2 * v64)
            goto LABEL_83;
LABEL_82:
          v6 = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(&v107, (WTF **)v57);
          goto LABEL_83;
        }
        if (3 * v65 <= 4 * v64)
          goto LABEL_82;
LABEL_83:
        v66 = 1;
LABEL_85:
        if (LOBYTE(v109[1]))
        {
          v37 = v109[0];
          v109[0] = 0;
          if (v37)
            v6 = (unsigned int *)std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v109, v37);
        }
        if ((v66 & 1) == 0)
          goto LABEL_120;
      }
      if (v113)
      {
        v76 = v107;
        v33 = v111;
        v35 = v112;
        v34 = HIDWORD(v112);
        goto LABEL_127;
      }
LABEL_179:
      while (1)
      {
        __break(1u);
LABEL_180:
        if (v7)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          v104 = *(_QWORD *)a3;
          v103 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v103 = 0;
          v104 = 0;
        }
LABEL_160:
        v7 = 0;
        v8 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v105 = *((_QWORD *)a3 + 3);
        if (!v105)
          break;
        if (!v103)
        {
          v7 = 0;
          v8 = 0;
          break;
        }
        v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v105 + 16))(v105, v104, v103);
        if (!*(_QWORD *)a3)
        {
          v8 = 0;
          v7 = *((_QWORD *)a3 + 1);
          break;
        }
      }
LABEL_161:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v106 = *((_QWORD *)a3 + 3);
      if (v106 && v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v8);
      v13 = 0;
      LOBYTE(v116) = 0;
LABEL_13:
      LOBYTE(v122) = v13;
      if (v115 && v114 != -1)
      {
        off_1E34B3758[v114]((int)&v107, (WTF::MachSendRight *)&v111);
        v13 = v122;
      }
      if (!v13)
      {
LABEL_115:
        v73 = *(_QWORD *)a3;
        v74 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v75 = *((_QWORD *)a3 + 3);
        if (!v75)
          return;
        if (!v74)
          return;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73);
        if (!(_BYTE)v122)
          return;
      }
      WebKit::RemoteLayerTreeHost::asyncSetLayerContents(this[9], (const void *)v116, *((const void **)&v116 + 1), (uint64_t)&v117, (_QWORD *)&v121 + 1);
      if ((_BYTE)v122)
      {
        if ((_DWORD)v121 != -1)
          off_1E34B3758[v121]((int)&v111, (WTF::MachSendRight *)&v117);
      }
      return;
    case 0x453:
      v18 = IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>((uint64_t *)a3);
      if (v19)
        WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTreeNotTriggered((WebKit::RemoteLayerTreeDrawingAreaProxy *)this, a2, v18);
      return;
    case 0x454:
      v20 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v20 & 0xFF00000000) != 0)
        ((void (*)(uint64_t **, uint64_t))(*this)[49])(this, v20);
      return;
    case 0x455:
      v14 = IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>((uint64_t *)a3);
      if (v15)
      {
        v16 = v14;
        v17 = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)this, a2);
        if (*(_QWORD *)(v17 + 8) < v16)
          *(_QWORD *)(v17 + 16) = v16;
      }
      return;
    default:
      WebKit::DrawingAreaProxy::didReceiveMessage((uint64_t)this, a2, a3);
      return;
  }
}

uint64_t WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::destruct(*(WebKit::RemoteLayerTreeTransaction **)a1, (WebKit::RemoteLayerTreeTransaction *)(*(_QWORD *)a1 + 832 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)a1;
  if (result)
  {
    *(_QWORD *)a1 = 0;
    result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, a2);
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v4)
    {
      LODWORD(v4) = *(_DWORD *)(v4 - 12);
      if (v4 > 0x7FFFFFFE)
        LODWORD(v4) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 12) = 2 * v4;
  return result;
}

void WTF::VectorDestructor<true,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::destruct(WebKit::RemoteLayerTreeTransaction *this, WebKit::RemoteLayerTreeTransaction *a2)
{
  WebKit::RemoteLayerTreeTransaction *v3;
  uint64_t v4;

  if (this != a2)
  {
    v3 = this;
    do
    {
      v4 = *((_QWORD *)v3 + 100);
      *((_QWORD *)v3 + 100) = 0;
      if (v4)
        WebCore::ScrollingStateTree::operator delete(v4, 0x50uLL);
      WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction(v3, a2);
      v3 = (WebKit::RemoteLayerTreeTransaction *)((char *)v3 + 832);
    }
    while (v3 != a2);
  }
}

uint64_t WebKit::RemoteScrollingCoordinator::isRemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this)
{
  return 1;
}

unint64_t WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unint64_t IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>(uint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>,void>::decode(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

void WebKit::`anonymous namespace'::RemoteImageBufferSetProxyFlusher::~RemoteImageBufferSetProxyFlusher(WebKit::_anonymous_namespace_::RemoteImageBufferSetProxyFlusher *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v3, a2);
}

uint64_t WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(uint64_t result, void *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  WTF *v5;
  char v6;

  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);
    if (*(_BYTE *)(result + 160) && *(_BYTE *)(result + 80))
    {
      v4 = *(unsigned int *)(result + 72);
      if ((_DWORD)v4 != -1)
      {
        v5 = (WTF *)result;
        off_1E34E3470[v4]((int)&v6, (WTF::MachSendRight *)(result + 8));
        result = (uint64_t)v5;
      }
      *(_DWORD *)(result + 72) = -1;
    }
    return WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

IPC::Encoder *WebKit::WebPage::flushPendingIntrinsicContentSizeUpdate(IPC::Encoder *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *((_DWORD *)this + 534);
  if ((_BYTE)v1)
  {
    v2 = *((_QWORD *)this + 266);
    *((_BYTE *)this + 2136) = 0;
    v3 = v2;
    v4 = v1;
    return WebKit::WebPage::updateIntrinsicContentSizeIfNeeded(this, (const WebCore::IntSize *)&v3);
  }
  return this;
}

uint64_t WebKit::WebPage::finalizeRenderingUpdate(uint64_t a1)
{
  _QWORD *v2;

  WebCore::Page::finalizeRenderingUpdate();
  v2 = *(_QWORD **)(a1 + 2392);
  if (v2)
    WebKit::RemoteRenderingBackendProxy::finalizeRenderingUpdate(v2);
  return WebKit::WebPage::flushDeferredDidReceiveMouseEvent(a1);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WebKit::WebPage::flushDeferredDidReceiveMouseEvent(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  void *v7;
  _BYTE v8[32];
  _BYTE v9[8];
  _BYTE *v10;
  uint64_t v11;

  v1 = *(_DWORD *)(this + 860);
  if ((v1 & 0xFF000000) != 0)
  {
    *(_BYTE *)(this + 863) = 0;
    if ((v1 & 0xFF00) != 0)
    {
      v8[0] = 0;
      v8[24] = 0;
      v9[0] = v1;
      v9[1] = (*(_QWORD *)&v1 & 0xFF0000) != 0;
      v10 = v8;
      v2 = this + 32;
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 32) + 56))(this + 32);
      v4 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v4 = 1907;
      *(_QWORD *)(v4 + 8) = v3;
      *(_QWORD *)(v4 + 528) = v4 + 16;
      *(_QWORD *)(v4 + 536) = v4 + 16;
      *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v4 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
      v11 = v4;
      IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>((IPC::Encoder *)v4, (uint64_t)v9);
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 32))(v2, &v11, 0);
      this = v11;
      v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)this, v5);
        return WTF::fastFree(v6, v7);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return this;
}

_DWORD *WebKit::WebFoundTextRangeController::redraw(_DWORD *this)
{
  WebCore::PageOverlay *v1;
  uint64_t v2;
  StringImpl *v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  StringImpl *m_ptr;
  WebFoundTextRange v7;
  _BYTE v8[40];

  v1 = (WebCore::PageOverlay *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = (uint64_t)this;
    ++*((_DWORD *)v1 + 2);
    if (*((_QWORD *)this + 4))
    {
      *(_OWORD *)&v7.var0 = *(_OWORD *)(this + 6);
      v3 = (StringImpl *)*((_QWORD *)this + 5);
      if (v3)
        *(_DWORD *)v3 += 2;
      v4 = *((_QWORD *)this + 6);
      v7.var2.var0.m_impl.m_ptr = v3;
      v7.var3 = v4;
      WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange((WebKit::WebFoundTextRangeController *)this, &v7, (uint64_t)v8);
      m_ptr = v7.var2.var0.m_impl.m_ptr;
      v7.var2.var0.m_impl.m_ptr = 0;
      if (m_ptr)
      {
        if (*(_DWORD *)m_ptr == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v5);
        else
          *(_DWORD *)m_ptr -= 2;
      }
      if (v8[32])
        WebKit::WebFoundTextRangeController::setTextIndicatorWithRange(v2);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
    }
    WebCore::PageOverlay::setNeedsDisplay(v1);
    return WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)v1 + 2);
  }
  return this;
}

uint64_t WebKit::GraphicsLayerCARemote::isGraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *this)
{
  return 1;
}

_DWORD *WebKit::WebPage::updateRendering(WebCore::Page **this)
{
  WebCore::Page *v2;

  WebCore::Page::updateRendering(this[6]);
  v2 = this[56];
  if (*((_BYTE *)v2 + 24))
    WebKit::FindController::updateFindIndicator(v2, *((_QWORD *)v2 + 2) != 0, 0);
  return WebKit::WebFoundTextRangeController::redraw(this[57]);
}

void WebKit::DrawingArea::willStartRenderingUpdateDisplay(WebKit::DrawingArea *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (!*(_BYTE *)(v2 + 186))
    WebCore::Page::willStartRenderingUpdateDisplay(*(WebCore::Page **)(v2 + 48));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::DrawingArea::scaleViewToFitDocumentIfNeeded(WebKit::DrawingArea *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::LocalFrameView *v3;
  int v4;
  WebCore::LocalFrameView *v5;
  WebCore::RenderView *v6;
  int v7;
  int v8;
  int v9;
  WebCore::LocalFrameView *v11;
  WebCore::LocalFrameView *v12;
  WebCore::RenderView *v13;
  WebCore::LocalFrame *v14;
  float v15;
  int v16;
  IntSize v18;

  if (*((_BYTE *)this + 65))
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (v1)
      v2 = v1 - 16;
    else
      v2 = 0;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::layoutIfNeeded((WebKit::WebPage *)v2);
    if (!WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2))
      goto LABEL_27;
    v3 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    if (!WebCore::LocalFrameView::renderView(v3))
      goto LABEL_27;
    v4 = *(_DWORD *)(v2 + 56);
    v5 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    v6 = (WebCore::RenderView *)WebCore::LocalFrameView::renderView(v5);
    WebCore::RenderView::unscaledDocumentRect(v6);
    v8 = v7;
    v9 = *((_DWORD *)this + 14);
    if (v9 == v7 && *((_DWORD *)this + 12) == v4)
      goto LABEL_27;
    if (*((_BYTE *)this + 64))
    {
      if (v4 >= v9)
      {
        *((_BYTE *)this + 64) = 0;
      }
      else
      {
        if (v9 == v7)
        {
          *((_QWORD *)this + 6) = *(_QWORD *)(v2 + 56);
          goto LABEL_23;
        }
        if (v7 > (int)WebKit::WebPage::fixedLayoutSize((WebKit::WebPage *)v2))
        {
LABEL_27:
          if (v1)
            CFRelease(*(CFTypeRef *)(v1 - 8));
          return;
        }
      }
    }
    WebKit::WebPage::setUseFixedLayout(v2, 0);
    WebKit::WebPage::layoutIfNeeded((WebKit::WebPage *)v2);
    if (!WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2))
      goto LABEL_27;
    v11 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    if (!WebCore::LocalFrameView::renderView(v11))
      goto LABEL_27;
    v12 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    v13 = (WebCore::RenderView *)WebCore::LocalFrameView::renderView(v12);
    WebCore::RenderView::unscaledDocumentRect(v13);
    v8 = (int)v14;
    *((_QWORD *)this + 6) = *(_QWORD *)(v2 + 56);
    *((_QWORD *)this + 7) = v14;
    v15 = 1.0;
    if (!(_DWORD)v14 || (int)v14 > 1439 || v4 >= (int)v14)
      goto LABEL_26;
    *((_BYTE *)this + 64) = 1;
    WebKit::WebPage::setUseFixedLayout(v2, 1);
LABEL_23:
    v15 = (float)v4 / (float)v8;
    if (v15 < 0.1)
    {
      v8 = vcvtps_s32_f32((float)v4 / 0.1);
      v15 = 0.1;
    }
    v16 = vcvtps_s32_f32((float)((float)*(int *)(v2 + 60) - *(float *)(*(_QWORD *)(v2 + 48) + 372)) / v15);
    v18.m_width = v8;
    v18.m_height = v16;
    WebKit::WebPage::setFixedLayoutSize((WebKit::WebPage *)v2, &v18);
LABEL_26:
    WebKit::WebPage::scaleView((unsigned __int8 *)v2, v15, v14);
    goto LABEL_27;
  }
}

void IPC::Decoder::decode<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18[100];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::decode(a2, v18);
  if (!v19)
  {
    v5 = (void *)*a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v4 = a2[3];
    if (v4)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      goto LABEL_21;
LABEL_14:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 832) = 0;
LABEL_15:
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v10)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    }
    return;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::decode(a2, (uint64_t)&v14);
    if (!v17)
    {
      v5 = (void *)*a2;
      v12 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (!v13)
        break;
      if (!v12)
        break;
      v4 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v13 + 16))(v13, v5);
      if (!v17)
        break;
    }
    if (v19)
    {
      WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(a1, (uint64_t)v18);
      *(_QWORD *)(a1 + 800) = v14;
      *(_OWORD *)(a1 + 808) = v15;
      *(_QWORD *)(a1 + 824) = v16;
      v6 = 1;
      goto LABEL_5;
    }
    __break(1u);
LABEL_21:
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v4 + 16))(v4, v5);
    if (!v19)
      goto LABEL_14;
  }
  v6 = 0;
  *(_BYTE *)a1 = 0;
LABEL_5:
  *(_BYTE *)(a1 + 832) = v6;
  if (v19)
  {
    WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v18, v5);
    v6 = *(unsigned __int8 *)(a1 + 832);
  }
  if (!v6)
    goto LABEL_15;
}

void WebKit::NavigationState::didChangeEstimatedProgress(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("estimatedProgress"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C84618(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeHasOnlySecureContent(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("hasOnlySecureContent"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C84674(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeHasOnlySecureContent(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("hasOnlySecureContent"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C846D0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeIsLoading(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("loading"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C8472C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::willChangeActiveURL(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("URL"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C84788(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeActiveURL(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("URL"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196C847E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)

}

uint64_t WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a3;
  if (!WTF::StringView::startsWith())
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t *)(a1 + 8), &v6);
  if ((_DWORD)v7 == 4)
    return 1;
  if ((_DWORD)v7 != 5)
    return 0;
  if (BYTE4(v7))
    v5 = *(unsigned __int8 *)(v6 + 4);
  else
    v5 = *(unsigned __int16 *)(v6 + 8);
  return v5 == 115;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>(a1);
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void WebKit::RemoteImageBufferSet::~RemoteImageBufferSet(WebKit::RemoteImageBufferSet *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteImageBufferSet::~RemoteImageBufferSet(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::ImageBuffer *v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;

  *(_QWORD *)this = off_1E34B8268;
  v3 = (WebCore::ImageBuffer *)*((_QWORD *)this + 5);
  if (v3)
  {
    if (WebCore::ImageBuffer::volatilityState(v3) != 1)
    {
      v4 = (_QWORD *)*((_QWORD *)this + 5);
      if (v4[14])
      {
        v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
        if (*(_DWORD *)(v5 + 364))
        {
          v47 = (_DWORD *)v5;
          do
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v47 + 104))(v47, 1);
          while (v47[91]);
        }
      }
    }
  }
  v6 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
LABEL_11:
      v10 = *(_QWORD *)(v8 + 8);
      v11 = v10 - 1;
      *(_QWORD *)(v8 + 8) = v10 - 1;
      if (v10 == 1)
      {
        v43 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        v13 = v43 != 0;
      }
      else
      {
        v12 = 0;
        v13 = 1;
      }
      v14 = __ldxr((unsigned __int8 *)v8);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_15:
      if (!v11)
      {
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          WTF::fastFree((WTF *)v8, a2);
      }
      goto LABEL_16;
    }
    MEMORY[0x19AEABB3C](v8);
    goto LABEL_11;
  }
LABEL_16:
  v15 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v15)
    goto LABEL_25;
  v16 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
LABEL_19:
    MEMORY[0x19AEABB3C](v16);
    goto LABEL_20;
  }
  if (__stxr(1u, (unsigned __int8 *)v16))
    goto LABEL_19;
LABEL_20:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v44 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v44 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
      goto LABEL_24;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_24:
  if (!v19)
  {
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (!v21)
      WTF::fastFree((WTF *)v16, a2);
  }
LABEL_25:
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v23)
    goto LABEL_34;
  v24 = *(_QWORD *)(v23 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
LABEL_28:
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_29;
  }
  if (__stxr(1u, (unsigned __int8 *)v24))
    goto LABEL_28;
LABEL_29:
  v26 = *(_QWORD *)(v24 + 8);
  v27 = v26 - 1;
  *(_QWORD *)(v24 + 8) = v26 - 1;
  if (v26 == 1)
  {
    v45 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(v24 + 24) = 0;
    v29 = v45 != 0;
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  v30 = __ldxr((unsigned __int8 *)v24);
  if (v30 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v24))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_33:
  if (!v27)
  {
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (!v29)
      WTF::fastFree((WTF *)v24, a2);
  }
LABEL_34:
  v31 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v31)
    goto LABEL_43;
  v32 = *(_QWORD *)(v31 + 8);
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
LABEL_37:
    MEMORY[0x19AEABB3C](v32);
    goto LABEL_38;
  }
  if (__stxr(1u, (unsigned __int8 *)v32))
    goto LABEL_37;
LABEL_38:
  v34 = *(_QWORD *)(v32 + 8);
  v35 = v34 - 1;
  *(_QWORD *)(v32 + 8) = v34 - 1;
  if (v34 == 1)
  {
    v46 = *(_QWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(v32 + 24) = 0;
    v37 = v46 != 0;
  }
  else
  {
    v36 = 0;
    v37 = 1;
  }
  v38 = __ldxr((unsigned __int8 *)v32);
  if (v38 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v32))
      goto LABEL_42;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_42:
  if (!v35)
  {
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (!v37)
      WTF::fastFree((WTF *)v32, a2);
  }
LABEL_43:
  v39 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v39)
  {
    v40 = (unsigned int *)(v39 + 16);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)(v39 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v39 + 8) + 8))(v39 + 8);
    }
  }
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WebKit::RemoteImageBufferSet::stopListeningForIPC(*a1);
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *WebKit::RemoteImageBufferSet::stopListeningForIPC(_QWORD *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this[4];
  this[4] = 0;
  if (v1)
  {
    this = IPC::StreamServerConnection::stopReceivingMessages(*(_QWORD *)(v1 + 40), 0x55u, this[2]);
    v2 = (unsigned int *)(v1 + 16);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)(v1 + 16));
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1 + 8);
    }
  }
  return this;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>(a1);
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void WebKit::RemoteDisplayListRecorder::~RemoteDisplayListRecorder(WebKit::RemoteDisplayListRecorder *this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteDisplayListRecorder::~RemoteDisplayListRecorder(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E34B81A8;
  std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)this + 8, 0);
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v4 + 16));
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 16);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)(v5 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v5 + 8);
    }
  }
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)this + 3, v2);
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WebKit::RemoteDisplayListRecorder::stopListeningForIPC(*a1);
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *WebKit::RemoteDisplayListRecorder::stopListeningForIPC(_QWORD *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this[5];
  this[5] = 0;
  if (v1)
  {
    this = IPC::StreamServerConnection::stopReceivingMessages(*(_QWORD *)(v1 + 40), 0x4Cu, this[4]);
    v2 = (unsigned int *)(v1 + 16);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)(v1 + 16));
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1 + 8);
    }
  }
  return this;
}

void *IPC::StreamServerConnection::stopReceivingMessages(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 *v4;
  void *result;
  uint64_t v7;
  void *v8;
  int v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v4 = (unsigned __int8 *)(a1 + 113);
  if (__ldaxr((unsigned __int8 *)(a1 + 113)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 113);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>((uint64_t *)(a1 + 120), (unsigned __int8 *)v10);
  v7 = *(_QWORD *)(a1 + 120);
  if (v7)
  {
    v8 = (void *)(v7 + 24 * *(unsigned int *)(v7 - 4));
    if (v8 == result)
      goto LABEL_8;
  }
  else
  {
    if (!result)
      goto LABEL_8;
    v8 = 0;
  }
  if (v8 != result)
    result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove((uint64_t *)(a1 + 120), (uint64_t)result);
LABEL_8:
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void WebCore::NetworkLoadMetrics::~NetworkLoadMetrics(WebCore::NetworkLoadMetrics *this, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;

  v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

unsigned int *WebKit::WebResourceLoader::didReceiveData(uint64_t a1, IPC::SharedBufferReference *this, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  WebCore::SharedBuffer *v17;
  unsigned int *result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _BYTE buf[24];
  _BYTE v28[28];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 64);
  if (v7
    && (v20 = v6[93],
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7, v20)))
  {
    ++*(_DWORD *)(a1 + 8);
    v21 = *(_QWORD *)this;
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[16] = v21;
    *(_QWORD *)&v28[16] = a3;
    v25 = *(_OWORD *)((char *)this + 8);
    *(_OWORD *)((char *)this + 8) = 0u;
    v22 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v22 = &off_1E34EB530;
    *(_QWORD *)(v22 + 8) = a1;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = v21;
    *(_OWORD *)(v22 + 32) = v25;
    *(_OWORD *)v28 = 0u;
    *(_QWORD *)(v22 + 48) = a3;
    v26 = v22;
    WebKit::WebResourceInterceptController::defer(*(_QWORD *)(a1 + 64), v20, &v26);
    v24 = v26;
    v26 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    return (unsigned int *)WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0::~$_0(buf, v23);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 72);
    if (!v8)
    {
      v9 = off_1ECE713E8;
      v10 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(_QWORD *)(a1 + 56);
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
        v15 = v14 - *(double *)(a1 + 80);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)v28 = v12;
        *(_WORD *)&v28[8] = 2048;
        *(_QWORD *)&v28[10] = v13;
        *(_WORD *)&v28[18] = 2048;
        *(double *)&v28[20] = v15;
        _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveData: Started receiving data", buf, 0x34u);
        v8 = *(_QWORD *)(a1 + 72);
        v6 = *(_QWORD **)(a1 + 16);
      }
      else
      {
        v8 = 0;
      }
    }
    v16 = *(_QWORD *)this;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)this + v8;
    if (v16 || *((_QWORD *)this + 1))
    {
      IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, buf);
      v17 = *(WebCore::SharedBuffer **)buf;
    }
    else
    {
      v17 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v17);
    }
    result = (unsigned int *)(*(uint64_t (**)(_QWORD *, WebCore::SharedBuffer *, uint64_t, uint64_t))(*v6 + 216))(v6, v17, a3, 1);
    if (v17)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v17, v19);
  }
  return result;
}

unsigned int *IPC::SharedBufferReference::unsafeBuffer@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  void *v6;

  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1) || (v2 = (unsigned int *)*((_QWORD *)this + 2)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196C852D8);
    }
    goto LABEL_4;
  }
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2)
  {
    do
LABEL_4:
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    WebCore::SharedMemory::createSharedBuffer((WebCore::SharedMemory *)v2);
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WebCore::FragmentedSharedBuffer::makeContiguous((WebCore::FragmentedSharedBuffer *)v4);
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v6);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::defaultTextRecognitionInVideosEnabled(WebKit *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::defaultTextRecognitionInVideosEnabled(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::defaultTextRecognitionInVideosEnabled(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultTextRecognitionInVideosEnabled(void)::$_0 &&>>);
  }
  return WebKit::defaultTextRecognitionInVideosEnabled(void)::enabled;
}

BOOL WebKit::defaultCSSOMViewScrollingAPIEnabled(WebKit *this)
{
  int v1;

  {
    v1 = WebKit::defaultCSSOMViewScrollingAPIEnabled(void)::result;
  }
  else
  {
    if (WebCore::IOSApplication::isIMDb(this))
      v1 = WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
    else
      v1 = 0;
    WebKit::defaultCSSOMViewScrollingAPIEnabled(void)::result = v1;
  }
  return v1 == 0;
}

BOOL WebKit::defaultLiveRangeSelectionEnabled(WebKit *this)
{
  uint64_t v1;

  {
    v1 = WebKit::defaultLiveRangeSelectionEnabled(void)::enableForAllApps;
    if (WebKit::defaultLiveRangeSelectionEnabled(void)::enableForAllApps)
      return 1;
  }
  else
  {
    v1 = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultLiveRangeSelectionEnabled(void)::enableForAllApps = v1;
    if ((_DWORD)v1)
      return 1;
  }
  return (WebCore::IOSApplication::isGmail((WebCore::IOSApplication *)v1) & 1) == 0;
}

uint64_t WebKit::defaultVisualTranslationEnabled(WebKit *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::defaultVisualTranslationEnabled(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::defaultVisualTranslationEnabled(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultVisualTranslationEnabled(void)::$_0 &&>>);
  }
  return WebKit::defaultVisualTranslationEnabled(void)::enabled;
}

uint64_t WebKit::defaultRemoveBackgroundEnabled(WebKit *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::defaultRemoveBackgroundEnabled(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::defaultRemoveBackgroundEnabled(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultRemoveBackgroundEnabled(void)::$_0 &&>>);
  }
  return WebKit::defaultRemoveBackgroundEnabled(void)::enabled;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_E3__1vJEED0Ev(WTF *this, void *a2)
{
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E34B8B10;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)

  return WTF::fastFree(this, a2);
}

void WebKit::WebLocalFrameLoaderClient::notifyPageOfAppBoundBehavior(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2)
      {
        v3 = *(_QWORD *)(v2 + 24);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
            if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) == 0)
            {
              v6 = *(_QWORD *)(v5[2] + 8);
              if (v6)
              {
                CFRetain(*(CFTypeRef *)(v6 - 8));
                WebKit::WebPage::notifyPageOfAppBoundBehavior((IPC::Encoder *)(v6 - 16));
                CFRelease(*(CFTypeRef *)(v6 - 8));
              }
            }
          }
        }
      }
    }
  }
}

IPC::Encoder *WebKit::WebPage::notifyPageOfAppBoundBehavior(IPC::Encoder *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  if (!*((_BYTE *)this + 2250) && !*((_BYTE *)this + 2249))
  {
    v1 = (char *)this + 32;
    v2 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 4) + 56))((uint64_t)this + 32);
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 2037;
    *(_QWORD *)(v3 + 8) = v2;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v7 = (IPC::Encoder *)v3;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v7, 0);
    this = v7;
    v7 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  return this;
}

WebCore::ResourceLoader *WebKit::WebLoaderStrategy::startLocalLoad(WebKit::WebLoaderStrategy *this, WebCore::ResourceLoader *a2)
{
  uint64_t v4;
  WebCore::ResourceLoader *result;
  _BYTE v6[24];
  __int128 v7[2];
  uint64_t v8;
  WebCore::ResourceLoader *v9;
  _DWORD *v10;
  uint64_t v11;

  WebCore::ResourceLoader::start(a2);
  v11 = *((_QWORD *)a2 + 93);
  ++*((_DWORD *)a2 + 4);
  v9 = a2;
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v4 = WTF::fastMalloc((WTF *)0x60);
  v10 = (_DWORD *)WebKit::WebResourceLoader::WebResourceLoader(v4, (uint64_t *)&v9, v7);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>((uint64_t)v6, (uint64_t *)this + 6, &v11, (uint64_t *)&v10);
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v10 + 8))();
    else
      --v10[2];
  }
  result = v9;
  if (v9)
  {
    if (*((_DWORD *)v9 + 4) == 1)
      return (WebCore::ResourceLoader *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
    else
      --*((_DWORD *)v9 + 4);
  }
  return result;
}

void WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::ResourceLoader *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  CFTypeRef *v10;
  CFTypeRef *v11;
  WebCore::ResourceLoader *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  WebCore *Parameters;
  __int128 v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  CFTypeRef v25;
  int v26;
  int v27;
  CFTypeRef v28;
  char isAllowedToAskUserForCredentials;
  _DWORD *v30;
  __int128 v31;
  uint64_t v32;
  WebKit::NetworkResourceLoadParameters *v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::ContentSecurityPolicy *v38;
  void *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int *v60;
  unsigned int v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  WTF::StringImpl *v77;
  unsigned int v78;
  WTF *v79;
  WebCore::SecurityOrigin *v80;
  const WTF::URL *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  __int128 v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  const char *v92;
  __int16 *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  const WTF::String *v100;
  WTF::StringImpl *v101;
  WTF *v102;
  WTF *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  const void *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  const void *v113;
  CFTypeRef v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::RefCountedBase *v140;
  WTF::RefCountedBase *v141;
  const void *v142;
  CFTypeRef v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  unsigned int *v152;
  unsigned int *v153;
  WTF *v154;
  WTF *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  _DWORD *v160;
  _DWORD *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::RefCountedBase *v167;
  WTF::RefCountedBase *v168;
  const void *v169;
  CFTypeRef v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::RefCountedBase *v179;
  WTF::RefCountedBase *v180;
  const void *v181;
  CFTypeRef v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::RefCountedBase *v191;
  WTF::RefCountedBase *v192;
  const void *v193;
  CFTypeRef v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::RefCountedBase *v199;
  WTF::RefCountedBase *v200;
  const void *v201;
  CFTypeRef v202;
  WTF::StringImpl *v203;
  CFTypeRef v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  __int128 v208;
  unsigned int *v209;
  unsigned int v210;
  WTF *v211;
  unsigned int *v212;
  unsigned int v213;
  WTF *v214;
  unsigned int v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  int v225;
  WebCore::SecurityOrigin *v226;
  WTF::StringImpl *v227;
  WebCore::SecurityOrigin *v228;
  uint64_t v229;
  unsigned int *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int **v235;
  unsigned int v236;
  WTF *v237;
  uint64_t v238;
  WTF *v239;
  int v240;
  NSObject *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  WTF *v248;
  WebKit::WebProcess *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  void *v253;
  int v254;
  IPC::Encoder *v255;
  WTF *v256;
  void *v257;
  WTF::StringImpl *v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  WTF *v267;
  uint64_t v268;
  uint64_t v269;
  WebKit::WebProcess *v270;
  WebKit::WebProcess *v271;
  char v272;
  uint64_t v273;
  WebKit::WebLoaderStrategy *v274;
  uint64_t v275[17];
  char v276;
  WTF::StringImpl *v277;
  WTF *v278;
  char v279;
  char v280;
  CFTypeRef v281;
  char v282;
  uint64_t v283;
  _BYTE buf[32];
  _BYTE v285[32];
  uint64_t v286;
  WTF::StringImpl *v287;
  WTF *v288;
  uint64_t v289;
  const void *v290;
  char v291;
  int v292;
  char v293;
  uint64_t v294;
  _OWORD v295[5];
  __int16 v296;
  WTF::StringImpl *v297;
  int v298;
  uint64_t v299;
  _BYTE v300[320];
  int v301;
  char v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  _OWORD v311[2];
  __int16 v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::RefCountedBase *v316;
  uint64_t v317;
  char v318;
  const void *v319;
  uint64_t v320;
  WTF::StringImpl *v321;
  __int128 v322;
  _OWORD v323[2];
  char v324;
  _OWORD v325[2];
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  unsigned int *v329;
  WTF *v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  __int16 v333;
  uint64_t v334;
  _DWORD *v335;
  char v336;
  __int16 v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::RefCountedBase *v341;
  uint64_t v342;
  char v343;
  const void *v344;
  uint64_t v345;
  WTF::StringImpl *v346;
  __int128 v347;
  _OWORD v348[2];
  uint64_t v349;
  char v350;
  __int16 v351;
  uint64_t v352;
  WTF::StringImpl *v353;
  WTF::StringImpl *v354;
  WTF::RefCountedBase *v355;
  uint64_t v356;
  char v357;
  const void *v358;
  uint64_t v359;
  WTF::StringImpl *v360;
  __int128 v361;
  _OWORD v362[2];
  uint64_t v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::RefCountedBase *v367;
  uint64_t v368;
  char v369;
  const void *v370;
  uint64_t v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WTF::RefCountedBase *v374;
  uint64_t v375;
  char v376;
  const void *v377;
  char v378;
  WTF::StringImpl *v379[2];
  WTF::StringImpl *v380[2];
  WTF *v381;
  WTF *v382;
  int v383;
  __int128 v384;
  __int128 v385;
  char v386;
  uint64_t v387;
  CFTypeRef cf;
  char v389;
  char v390;
  char v391;
  char v392;
  char v393;
  char shouldIncludeCertificateInfo;
  unsigned __int8 v395;
  _OWORD v396[4];
  __int16 v397;
  WTF::StringImpl *v398;
  WTF *v399;
  uint64_t v400;
  CFTypeRef v401;
  char v402;
  int v403;
  char v404;
  uint64_t v405;
  _OWORD v406[5];
  __int16 v407;
  WTF::StringImpl *v408;
  int v409;
  uint64_t v410;
  _BYTE v411[312];
  unsigned __int8 v412;
  int v413;
  char v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  WTF::StringImpl *v418;
  WTF::StringImpl *v419;
  WTF::StringImpl *v420;
  WTF::StringImpl *v421;
  WTF::StringImpl *v422;
  _OWORD v423[2];
  __int16 v424;
  uint64_t v425;
  WTF::StringImpl *v426;
  WTF::StringImpl *v427;
  WTF::RefCountedBase *v428;
  uint64_t v429;
  char v430;
  CFTypeRef v431;
  uint64_t v432;
  WTF::StringImpl *v433;
  __int128 v434;
  _OWORD v435[2];
  char v436;
  _OWORD v437[2];
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  unsigned int *v441;
  WTF *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  __int16 v445;
  uint64_t v446;
  _DWORD *v447;
  char v448;
  __int16 v449;
  uint64_t v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF::RefCountedBase *v453;
  uint64_t v454;
  char v455;
  CFTypeRef v456;
  uint64_t v457;
  WTF::StringImpl *v458;
  __int128 v459;
  _OWORD v460[2];
  uint64_t v461;
  char v462;
  __int16 v463;
  uint64_t v464;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  WTF::RefCountedBase *v467;
  uint64_t v468;
  char v469;
  CFTypeRef v470;
  uint64_t v471;
  WTF::StringImpl *v472;
  __int128 v473;
  _OWORD v474[2];
  uint64_t v475;
  uint64_t v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  WTF::RefCountedBase *v479;
  uint64_t v480;
  char v481;
  CFTypeRef v482;
  uint64_t v483;
  WTF::StringImpl *v484;
  WTF::StringImpl *v485;
  WTF::RefCountedBase *v486;
  uint64_t v487;
  char v488;
  CFTypeRef v489;
  char v490;
  __int16 isTopFrameNavigatingToAppBoundDomain;
  uint64_t v492;
  uint64_t v493;
  _DWORD v494[2];
  WTF::StringImpl *v495;
  __int128 v496;
  __int128 v497;
  WTF *v498;
  uint64_t v499;
  int v500;
  char v501;
  char v502;
  WTF::StringImpl *v503;
  __int128 v504;
  __int128 v505;
  __int16 v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  uint64_t v509;
  _BYTE v510[24];
  WTF *v511;
  uint64_t v512;
  WTF::StringImpl *v513;
  __int128 v514;
  __int128 v515;
  char v516;
  char isDisplayingInitialEmptyDocument;
  int v518;
  WTF::StringImpl *v519;
  __int128 v520;
  __int128 v521;
  __int16 v522;
  WTF::StringImpl *v523;
  WTF::StringImpl *v524[3];
  WTF::StringImpl *v525;
  __int128 v526;
  __int128 v527;
  WTF *v528;
  WTF *v529;
  unsigned int v530[5];
  char v531;
  __int16 v532;
  WTF::StringImpl *v533;
  WTF::StringImpl *v534;
  __int16 v535;
  WTF::StringImpl *v536;
  WTF::StringImpl *v537;
  char v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  _OWORD v542[2];
  char v543;
  char v544;
  uint64_t v545;
  BOOL v546;
  char v547;
  uint64_t v548;
  char v549;
  WTF::StringImpl *v550;
  __int128 v551;
  __int128 v552;
  uint64_t v553;
  char v554;
  BOOL v555;
  uint64_t v556;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v6 = v5;
  v8 = v7;
  v273 = v9;
  v274 = (WebKit::WebLoaderStrategy *)v3;
  v11 = v10;
  v12 = v4;
  v556 = *MEMORY[0x1E0C80C00];
  v13 = *((_QWORD *)v4 + 93);
  v283 = v13;
  v14 = *((_QWORD *)v4 + 4);
  if (!v14)
    goto LABEL_9;
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15 || !*(_QWORD *)(v15 + 8))
    goto LABEL_9;
  if (*(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) == v14 && WebCore::ResourceLoader::frameLoader(v4))
    WebCore::ResourceLoader::frameLoader(v12);
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v11);
  v16 = WebCore::Page::allowsLoadFromURL();
  if ((v16 & 1) != 0)
  {
LABEL_9:
    v17 = *((unsigned __int8 *)v12 + 1090);
    v18 = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)v12 + 248))(v12);
    Parameters = WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v379);
    v492 = v13;
    v20 = *(_OWORD *)(v273 + 16);
    *(_OWORD *)v379 = *(_OWORD *)v273;
    *(_OWORD *)v380 = v20;
    v383 = WebCore::presentingApplicationPID(Parameters);
    {
      v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v270 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v21 = WebKit::WebProcess::WebProcess(v270);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v21;
    }
    v22 = WebKit::WebProcess::ensureNetworkProcessConnection(v21);
    v23 = *(_BYTE *)(v22 + 64);
    v24 = *(_OWORD *)(v22 + 48);
    v384 = *(_OWORD *)(v22 + 32);
    v385 = v24;
    v386 = v23;
    WebCore::ResourceRequestBase::operator=((uint64_t)&v387, (uint64_t)v11);
    v25 = v11[24];
    if (v25)
      CFRetain(v11[24]);
    v26 = (v17 >> 1) & 1;
    v27 = (v17 >> 2) & 1;
    v28 = cf;
    cf = v25;
    if (v28)
      CFRelease(v28);
    isAllowedToAskUserForCredentials = 0;
    v30 = (_DWORD *)((char *)v12 + 1090);
    v389 = v26;
    v390 = v27;
    v391 = v18;
    if (v380[0] && v379[1])
      isAllowedToAskUserForCredentials = WebCore::ResourceLoader::isAllowedToAskUserForCredentials(v12);
    v392 = isAllowedToAskUserForCredentials;
    v393 = v8;
    shouldIncludeCertificateInfo = WebCore::ResourceLoader::shouldIncludeCertificateInfo(v12);
    v493 = v6;
    *(_DWORD *)((char *)v494 + 3) = *(_DWORD *)((char *)v12 + 979);
    v494[0] = *((_DWORD *)v12 + 244);
    WTF::String::operator=(&v495, (WebCore::ResourceLoader *)((char *)v12 + 984));
    v31 = *((_OWORD *)v12 + 63);
    v496 = *((_OWORD *)v12 + 62);
    v497 = v31;
    v510[17] = (*v30 >> 20) & 3;
    v32 = *((_QWORD *)v12 + 4);
    if (v32 && *(_QWORD *)(*(_QWORD *)(v32 + 128) + 8) == v32)
      v33 = (WebKit::NetworkResourceLoadParameters *)(*((_BYTE *)v12 + 977) == 0);
    else
      v33 = 0;
    WebKit::addParametersShared((WebKit *)v14, (const WebCore::LocalFrame *)v379, v33);
    if ((*v30 & 0x400000) != 0)
      v34 = 1;
    else
      v34 = HIWORD(*v30) & 3;
    v544 = v34;
    v35 = *((_QWORD *)v12 + 128) != 0;
    v545 = *((_QWORD *)v12 + 128);
    v546 = v35;
    v547 = *((_BYTE *)v12 + 1089);
    v36 = *((_QWORD *)v12 + 137);
    if (v36)
    {
      if (!v549)
        v549 = 1;
      v548 = v36;
    }
    if (v14)
    {
      if (*(_QWORD *)(*(_QWORD *)(v14 + 128) + 8) != v14)
        v555 = (*(_QWORD *)(*(_QWORD *)(v14 + 136) + 688) & 0x20000000000) != 0;
      v37 = *(_QWORD *)(v14 + 296);
      if (*((_BYTE *)v12 + 1052))
      {
        if (v37)
        {
          if ((WebCore::Document::shouldBypassMainWorldContentSecurityPolicy(*(WebCore::Document **)(v14 + 296)) & 1) == 0
            && (*((_BYTE *)v12 + 1091) & 1) != 0)
          {
            v38 = (WebCore::ContentSecurityPolicy *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v37 + 192));
            if (v38)
            {
              WebCore::ContentSecurityPolicy::responseHeaders(v38);
              std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)&v498, (uint64_t *)buf);
LABEL_47:
              WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v39);
              goto LABEL_48;
            }
          }
        }
        goto LABEL_48;
      }
    }
    else
    {
      v37 = 0;
      if (*((_BYTE *)v12 + 1052))
        goto LABEL_48;
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)buf, (uint64_t *)v12 + 129);
    *(_DWORD *)&buf[16] = *((_DWORD *)v12 + 262);
    buf[20] = *((_BYTE *)v12 + 1052);
    buf[24] = 1;
    if (!v502)
    {
      v498 = *(WTF **)buf;
      v42 = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v499 = v42;
      v500 = *((_DWORD *)v12 + 262);
      v501 = *((_BYTE *)v12 + 1052);
      v502 = 1;
      goto LABEL_47;
    }
    if (HIDWORD(v499))
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(v498, (WTF *)((char *)v498 + 16 * HIDWORD(v499)));
    v40 = v498;
    if (v498)
    {
      v498 = 0;
      LODWORD(v499) = 0;
      WTF::fastFree(v40, v39);
    }
    v498 = *(WTF **)buf;
    v41 = *(_QWORD *)&buf[8];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v499 = v41;
    v500 = *(_DWORD *)&buf[16];
    v501 = buf[20];
    if (buf[24])
      goto LABEL_47;
LABEL_48:
    if (*((_BYTE *)v12 + 1080))
    {
      v506 = *((_WORD *)v12 + 528);
      WTF::String::operator=(&v507, (WebCore::ResourceLoader *)((char *)v12 + 1064));
      WTF::String::operator=(&v508, (WebCore::ResourceLoader *)((char *)v12 + 1072));
    }
    if (!v14
      || (v43 = *(_QWORD **)(*(_QWORD *)(v14 + 280) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v43 + 1072))(v43) & 1) != 0))
    {
      v45 = 0;
      v44 = 0;
    }
    else
    {
      v44 = v43[2];
      if (v44)
      {
        CFRetain(*(CFTypeRef *)(v44 + 8));
        v272 = 0;
        isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain((WebKit::WebFrame *)v44);
        v45 = 1;
        if (!v37)
          goto LABEL_72;
        goto LABEL_57;
      }
      v45 = 0;
    }
    v272 = 1;
    if (!v37)
      goto LABEL_72;
LABEL_57:
    WTF::String::operator=(&v503, (WTF::StringImpl *)(v37 + 736));
    v46 = *(_OWORD *)(v37 + 744);
    v505 = *(_OWORD *)(v37 + 760);
    v504 = v46;
    v47 = *(_QWORD *)(v37 + 528);
    if (v47)
    {
      v48 = *(_QWORD *)(v47 + 8);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 24);
        if (v49)
        {
          v50 = *(_OWORD **)(v49 + 8);
          if (v50)
          {
            WTF::String::operator=(&v550, (WTF::StringImpl *)((char *)v50 + 168));
            v51 = v50[12];
            v551 = v50[11];
            v552 = v51;
          }
        }
      }
    }
    if (v45)
    {
      v52 = *(_QWORD *)(v44 + 24);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 8);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 24);
          if (v54)
          {
            v55 = *(_QWORD *)(v54 + 8);
            if (v55)
            {
              v56 = *(_QWORD **)(*(_QWORD *)(v55 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v56 + 1368))(v56) & 1) == 0)
              {
                v57 = *(_QWORD *)(v56[2] + 8);
                if (v57)
                {
                  v58 = *(_QWORD *)(*(_QWORD *)(v57 + 608) + 64);
                  if (!v554)
                    v554 = 1;
                  v553 = v58;
                }
              }
            }
          }
        }
      }
    }
LABEL_72:
    if ((*(unsigned int (**)(WebCore::ResourceLoader *))(*(_QWORD *)v12 + 184))(v12))
    {
      v60 = (unsigned int *)*((_QWORD *)v12 + 171);
      if (v60)
      {
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 + 1, v60));
      }
      v62 = v382;
      v382 = (WTF *)v60;
      if (v62)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v62, v59);
      v63 = WebCore::SubresourceLoader::originalHeaders(v12);
      if (v63)
      {
        v64 = v63;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((uint64_t)&v509, v63);
        WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((uint64_t)v510, v64 + 16);
      }
    }
    v65 = (unsigned int *)v382;
    if (v37 && !v382)
    {
      v65 = (unsigned int *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v37 + 192));
      if (v65)
      {
        do
          v67 = __ldaxr(v65);
        while (__stlxr(v67 + 1, v65));
      }
      v68 = v382;
      v382 = (WTF *)v65;
      if (v68)
      {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v68, v66);
        v65 = (unsigned int *)v382;
      }
    }
    if (!v65)
    {
      v65 = (unsigned int *)WebCore::ResourceRequestBase::httpOrigin((WebCore::ResourceRequestBase *)v11);
      if (*(_QWORD *)buf)
      {
        WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)buf, v100);
        v102 = v278;
        v278 = 0;
        v103 = v382;
        v382 = v102;
        if (v103)
        {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v103, v101);
          v278 = 0;
        }
        v65 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v65)
        {
          if (*v65 == 2)
            v65 = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v65, v101);
          else
            *v65 -= 2;
        }
      }
    }
    if (!(_DWORD)v33)
    {
      if (v37)
      {
        v76 = (unsigned int *)WebCore::Document::topOrigin((WebCore::Document *)v37);
        do
          v78 = __ldaxr(v76);
        while (__stlxr(v78 + 1, v76));
        v79 = v381;
        v381 = (WTF *)v76;
        if (v79)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v79, v77);
        goto LABEL_107;
      }
LABEL_108:
      if (BYTE1(v494[0]) && !v382)
      {
        v85 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
        {
          v86 = WebCore::ResourceLoader::frameLoader(v12);
          v87 = *((_QWORD *)v12 + 4);
          v88 = *(_QWORD *)(v273 + 8);
          v89 = *(_QWORD *)(v273 + 16);
          v90 = *(_QWORD *)(v273 + 32);
          v91 = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)v12 + 336));
          *(_DWORD *)buf = 134219776;
          *(_QWORD *)&buf[4] = v274;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v86;
          *(_WORD *)v285 = 2048;
          *(_QWORD *)&v285[2] = v87;
          *(_WORD *)&v285[10] = 2048;
          *(_QWORD *)&v285[12] = v88;
          *(_WORD *)&v285[20] = 2048;
          *(_QWORD *)&v285[22] = v89;
          *(_WORD *)&v285[30] = 2048;
          v286 = v90;
          LOWORD(v287) = 1024;
          *(_DWORD *)((char *)&v287 + 2) = v91;
          v92 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoa"
                "derStrategy::scheduleLoad: no sourceOrigin (priority=%d)";
LABEL_395:
          _os_log_error_impl(&dword_196BCC000, v85, OS_LOG_TYPE_ERROR, v92, buf, 0x4Eu);
          goto LABEL_384;
        }
        goto LABEL_384;
      }
      v510[16] = *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)v65) + 22);
      v395 = v33;
      if ((_DWORD)v33 && v37)
      {
        v93 = (__int16 *)WebCore::Document::crossOriginOpenerPolicy((WebCore::Document *)v37);
        v94 = (WTF::StringImpl *)(v93 + 8);
        v522 = *v93;
        WTF::String::operator=(&v523, (WTF::StringImpl *)(v93 + 4));
        WTF::String::operator=(v524, v94);
      }
      if (!*((_QWORD *)v12 + 4)
        || *((_BYTE *)v12 + 977)
        || ((v45 ^ 1) & 1) != 0
        || !WebKit::WebFrame::frameLoaderClient((WebKit::WebFrame *)v44))
      {
LABEL_319:
        if (v490)
        {
          v205 = *((_QWORD *)v12 + 5);
          if (v205)
          {
            v524[1] = *(WTF::StringImpl **)(v205 + 2528);
            v206 = (WTF::StringImpl *)(v205 + 1632);
            if (v543 == *(_BYTE *)(v205 + 1856))
            {
              if (v543)
              {
                WTF::String::operator=(&v525, v206);
                v208 = *(_OWORD *)(v205 + 1640);
                v527 = *(_OWORD *)(v205 + 1656);
                v526 = v208;
                v209 = *(unsigned int **)(v205 + 1672);
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 + 1, v209));
                v211 = v528;
                v528 = (WTF *)v209;
                if (v211)
                  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v211, v207);
                v212 = *(unsigned int **)(v205 + 1680);
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 + 1, v212));
                v214 = v529;
                v529 = (WTF *)v212;
                if (v214)
                  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v214, v207);
                WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v530, v205 + 1688);
                v215 = *(_DWORD *)(v205 + 1704);
                v531 = *(_BYTE *)(v205 + 1708);
                v530[4] = v215;
                v532 = *(_WORD *)(v205 + 1712);
                WTF::String::operator=(&v533, (WTF::StringImpl *)(v205 + 1720));
                WTF::String::operator=(&v534, (WTF::StringImpl *)(v205 + 1728));
                v535 = *(_WORD *)(v205 + 1736);
                WTF::String::operator=(&v536, (WTF::StringImpl *)(v205 + 1744));
                WTF::String::operator=(&v537, (WTF::StringImpl *)(v205 + 1752));
                v538 = *(_BYTE *)(v205 + 1760);
                v216 = *(_OWORD *)(v205 + 1784);
                v217 = *(_OWORD *)(v205 + 1800);
                v218 = *(_OWORD *)(v205 + 1816);
                *(_OWORD *)((char *)v542 + 12) = *(_OWORD *)(v205 + 1828);
                v542[0] = v218;
                v541 = v217;
                v540 = v216;
                v539 = *(_OWORD *)(v205 + 1768);
                if (!v37)
                  goto LABEL_338;
LABEL_336:
                v219 = (*(_QWORD *)(*(_QWORD *)(v37 + 680) + 672) >> 2) & 1;
                goto LABEL_339;
              }
            }
            else
            {
              if (!v543)
              {
                std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>((uint64_t)&v525, (uint64_t)v206);
                v543 = 1;
                if (v37)
                  goto LABEL_336;
                goto LABEL_338;
              }
              WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)&v525, v206);
              v543 = 0;
            }
          }
        }
        if (v37)
          goto LABEL_336;
LABEL_338:
        LOBYTE(v219) = 0;
LABEL_339:
        v516 = v219;
        if (v14)
        {
          isDisplayingInitialEmptyDocument = WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*(_QWORD *)(v14 + 280) + 64));
          v518 = WebCore::FrameLoader::effectiveSandboxFlags(*(WebCore::FrameLoader **)(v14 + 280));
          v220 = *(_QWORD *)(v14 + 160);
          if (v220)
          {
            v221 = *(_QWORD *)(v220 + 8);
            if (v221)
            {
              if (!*(_BYTE *)(v221 + 144))
              {
                v222 = *(_QWORD *)(v221 + 296);
                if (v222)
                {
                  v223 = v222 + 736;
                  WTF::String::operator=(&v519, (WTF::StringImpl *)(v222 + 736));
                  v224 = *(_OWORD *)(v223 + 24);
                  v520 = *(_OWORD *)(v223 + 8);
                  v521 = v224;
                }
              }
            }
          }
        }
        else
        {
          isDisplayingInitialEmptyDocument = 0;
        }
        v225 = v395;
        v510[18] = v395 ^ 1;
        if (!*((_BYTE *)v12 + 977))
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v226 = (WebCore::SecurityOrigin *)WebCore::FrameTree::parent((WebCore::FrameTree *)(*((_QWORD *)v12 + 4) + 48));
          if (v226)
          {
            v228 = v226;
            do
            {
              if (*((_BYTE *)v228 + 144))
                v229 = WebCore::SecurityOrigin::opaqueOrigin(v226);
              else
                v229 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)v228 + 37)
                                                                                           + 192));
              v230 = (unsigned int *)v229;
              v231 = *(unsigned int *)&buf[12];
              if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
              {
                v232 = *(unsigned int *)&buf[12] + ((unint64_t)*(unsigned int *)&buf[12] >> 2);
                if (v232 >= 0x10)
                  v233 = v232 + 1;
                else
                  v233 = 16;
                if (v233 <= (unint64_t)*(unsigned int *)&buf[12] + 1)
                  v234 = *(unsigned int *)&buf[12] + 1;
                else
                  v234 = v233;
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)buf, v234);
                v231 = *(unsigned int *)&buf[12];
              }
              v235 = (unsigned int **)(*(_QWORD *)buf + 8 * v231);
              do
                v236 = __ldaxr(v230);
              while (__stlxr(v236 + 1, v230));
              *v235 = v230;
              ++*(_DWORD *)&buf[12];
              v226 = (WebCore::SecurityOrigin *)WebCore::FrameTree::parent((WebCore::SecurityOrigin *)((char *)v228 + 48));
              v228 = v226;
            }
            while (v226);
          }
          if (HIDWORD(v512))
          {
            v267 = v511;
            v268 = 8 * HIDWORD(v512);
            do
            {
              v269 = *(_QWORD *)v267;
              *(_QWORD *)v267 = 0;
              if (v269)
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v269, v227);
              v267 = (WTF *)((char *)v267 + 8);
              v268 -= 8;
            }
            while (v268);
          }
          v237 = v511;
          if (v511)
          {
            v511 = 0;
            LODWORD(v512) = 0;
            WTF::fastFree(v237, v227);
          }
          v511 = *(WTF **)buf;
          v238 = *(_QWORD *)&buf[8];
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v512 = v238;
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v227);
          v225 = v395;
        }
        LOBYTE(v278) = 0;
        v279 = 0;
        if (v225)
        {
          v239 = (WTF *)*((_QWORD *)v274 + 12);
          v240 = *((unsigned __int8 *)v274 + 104);
          if (*((_BYTE *)v274 + 104))
            *((_BYTE *)v274 + 104) = 0;
          v278 = v239;
          v279 = v240;
        }
        else
        {
          v240 = 0;
        }
        v241 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v242 = WebCore::ResourceLoader::frameLoader(v12);
          v243 = *((_QWORD *)v12 + 4);
          v245 = *(_QWORD *)(v273 + 8);
          v244 = *(_QWORD *)(v273 + 16);
          v246 = *(_QWORD *)(v273 + 32);
          v247 = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)v12 + 336));
          if (v240)
            v248 = v278;
          else
            v248 = 0;
          *(_DWORD *)buf = 134220032;
          *(_QWORD *)&buf[4] = v274;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v242;
          *(_WORD *)v285 = 2048;
          *(_QWORD *)&v285[2] = v243;
          *(_WORD *)&v285[10] = 2048;
          *(_QWORD *)&v285[12] = v245;
          *(_WORD *)&v285[20] = 2048;
          *(_QWORD *)&v285[22] = v244;
          *(_WORD *)&v285[30] = 2048;
          v286 = v246;
          LOWORD(v287) = 1024;
          *(_DWORD *)((char *)&v287 + 2) = v247;
          HIWORD(v287) = 2048;
          v288 = v248;
          _os_log_impl(&dword_196BCC000, v241, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: Resource is being scheduled with the NetworkProcess (priority=%d, existingNetworkResourceLoadIdentifierToResume=%llu)", buf, 0x58u);
        }
        {
          v249 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v271 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v249 = WebKit::WebProcess::WebProcess(v271);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v249;
        }
        v250 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v249) + 24);
        v251 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v251 = 264;
        *(_QWORD *)(v251 + 8) = 0;
        *(_QWORD *)(v251 + 528) = v251 + 16;
        *(_QWORD *)(v251 + 536) = v251 + 16;
        *(_OWORD *)(v251 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v251 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v251);
        *(_QWORD *)buf = v251;
        IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode((IPC::Encoder *)v251, (uint64_t *)v379);
        v252 = IPC::Encoder::grow((IPC::Encoder *)v251, 1uLL, 1);
        if (v240)
        {
          *v252 = 1;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v251, (uint64_t *)&v278);
        }
        else
        {
          *v252 = 0;
        }
        v254 = IPC::Connection::sendMessageImpl(v250, (uint64_t *)buf, 0, 0);
        v255 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v255)
        {
          IPC::Encoder::~Encoder(v255, v253);
          WTF::fastFree(v256, v257);
        }
        if (!v254)
        {
          ++*((_DWORD *)v12 + 4);
          *(_QWORD *)buf = v12;
          v260 = WTF::fastMalloc((WTF *)0x60);
          v275[0] = WebKit::WebResourceLoader::WebResourceLoader(v260, (uint64_t *)buf, (__int128 *)v273);
          if (*(_QWORD *)buf)
          {
            if (*(_DWORD *)(*(_QWORD *)buf + 16) == 1)
              (*(void (**)(void))(**(_QWORD **)buf + 8))();
            else
              --*(_DWORD *)(*(_QWORD *)buf + 16);
          }
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>((uint64_t)buf, (uint64_t *)v274 + 6, &v283, v275);
          v259 = v272;
          if (v275[0])
          {
            if (*(_DWORD *)(v275[0] + 8) == 1)
              (*(void (**)(void))(*(_QWORD *)v275[0] + 8))();
            else
              --*(_DWORD *)(v275[0] + 8);
          }
          goto LABEL_385;
        }
        v85 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
        {
          v261 = WebCore::ResourceLoader::frameLoader(v12);
          v262 = *((_QWORD *)v12 + 4);
          v263 = *(_QWORD *)(v273 + 8);
          v264 = *(_QWORD *)(v273 + 16);
          v265 = *(_QWORD *)(v273 + 32);
          v266 = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)v12 + 336));
          *(_DWORD *)buf = 134219776;
          *(_QWORD *)&buf[4] = v274;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v261;
          *(_WORD *)v285 = 2048;
          *(_QWORD *)&v285[2] = v262;
          *(_WORD *)&v285[10] = 2048;
          *(_QWORD *)&v285[12] = v263;
          *(_WORD *)&v285[20] = 2048;
          *(_QWORD *)&v285[22] = v264;
          *(_WORD *)&v285[30] = 2048;
          v286 = v265;
          LOWORD(v287) = 1024;
          *(_DWORD *)((char *)&v287 + 2) = v266;
          v92 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoa"
                "derStrategy::scheduleLoad: Unable to schedule resource with the NetworkProcess (priority=%d)";
          goto LABEL_395;
        }
LABEL_384:
        WebKit::WebLoaderStrategy::scheduleInternallyFailedLoad(v274, v12);
        v259 = v272;
LABEL_385:
        if ((v259 & 1) == 0)
          CFRelease(*(CFTypeRef *)(v44 + 8));
        WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v379, v258);
        return;
      }
      v95 = WebKit::WebFrame::frameLoaderClient((WebKit::WebFrame *)v44);
      v96 = *((_QWORD *)v12 + 5) + 1632;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v278);
      v281 = 0;
      v282 = 0;
      v280 = v280 & 0xF1 | 4;
      v277 = 0;
      LOBYTE(v275[0]) = 0;
      v276 = 0;
      WebKit::WebFrameLoaderClient::navigationActionData(v95, v96, v11, (uint64_t)&v278, (_DWORD **)&v277, 0, (uint64_t)v275, 0, buf, 0);
      if (v490 == v378)
      {
        if (!v490)
        {
LABEL_310:
          if (v276)
            MEMORY[0x19AEADBAC](v275);
          v203 = v277;
          v277 = 0;
          if (v203)
          {
            if (*(_DWORD *)v203 == 2)
              WTF::StringImpl::destroy(v203, v97);
            else
              *(_DWORD *)v203 -= 2;
          }
          v204 = v281;
          v281 = 0;
          if (v204)
            CFRelease(v204);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v278, v97);
          goto LABEL_319;
        }
        v396[2] = *(_OWORD *)v285;
        v396[3] = *(_OWORD *)&v285[16];
        v397 = v286;
        v396[0] = *(_OWORD *)buf;
        v396[1] = *(_OWORD *)&buf[16];
        v98 = v287;
        v287 = 0;
        v99 = v398;
        v398 = v98;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
            WTF::StringImpl::destroy(v99, v97);
          else
            *(_DWORD *)v99 -= 2;
        }
        v399 = v288;
        WebCore::ResourceResponseBase::operator=((uint64_t)&v400, (uint64_t)&v289);
        v113 = v290;
        v290 = 0;
        v114 = v401;
        v401 = v113;
        if (v114)
          CFRelease(v114);
        v402 = v291;
        v403 = v292;
        v404 = v293;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v405, (uint64_t)&v294);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v406, (uint64_t)v295);
        v406[2] = v295[2];
        v406[3] = v295[3];
        v406[4] = v295[4];
        v407 = v296;
        v116 = v297;
        v297 = 0;
        v117 = v408;
        v408 = v116;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
            WTF::StringImpl::destroy(v117, v115);
          else
            *(_DWORD *)v117 -= 2;
        }
        v409 = v298;
        std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)&v410, (uint64_t)&v299);
        v118 = (WTF::StringImpl *)v300;
        if (v412 == v300[312])
        {
          if (v412)
            WebCore::PrivateClickMeasurement::operator=((uint64_t)v411, (uint64_t)v300);
        }
        else if (v412)
        {
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v411, (WTF::StringImpl *)v300);
          v412 = 0;
        }
        else
        {
          std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>((uint64_t)v411, (uint64_t)v300);
          v412 = 1;
        }
        v413 = v301;
        v414 = v302;
        if (v448 == v336)
        {
          if (v448)
          {
            v119 = v303;
            v303 = 0;
            v120 = v415;
            v415 = v119;
            if (v120)
            {
              if (*(_DWORD *)v120 == 2)
                WTF::StringImpl::destroy(v120, v118);
              else
                *(_DWORD *)v120 -= 2;
            }
            v121 = v304;
            v304 = 0;
            v122 = v416;
            v416 = v121;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v118);
              else
                *(_DWORD *)v122 -= 2;
            }
            v123 = v305;
            v305 = 0;
            v124 = v417;
            v417 = v123;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, v118);
              else
                *(_DWORD *)v124 -= 2;
            }
            v125 = v306;
            v306 = 0;
            v126 = v418;
            v418 = v125;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
                WTF::StringImpl::destroy(v126, v118);
              else
                *(_DWORD *)v126 -= 2;
            }
            v127 = v307;
            v307 = 0;
            v128 = v419;
            v419 = v127;
            if (v128)
            {
              if (*(_DWORD *)v128 == 2)
                WTF::StringImpl::destroy(v128, v118);
              else
                *(_DWORD *)v128 -= 2;
            }
            v129 = v308;
            v308 = 0;
            v130 = v420;
            v420 = v129;
            if (v130)
            {
              if (*(_DWORD *)v130 == 2)
                WTF::StringImpl::destroy(v130, v118);
              else
                *(_DWORD *)v130 -= 2;
            }
            v131 = v309;
            v309 = 0;
            v132 = v421;
            v421 = v131;
            if (v132)
            {
              if (*(_DWORD *)v132 == 2)
                WTF::StringImpl::destroy(v132, v118);
              else
                *(_DWORD *)v132 -= 2;
            }
            v133 = v310;
            v310 = 0;
            v134 = v422;
            v422 = v133;
            if (v134)
            {
              if (*(_DWORD *)v134 == 2)
                WTF::StringImpl::destroy(v134, v118);
              else
                *(_DWORD *)v134 -= 2;
            }
            v423[0] = v311[0];
            *(_OWORD *)((char *)v423 + 12) = *(_OWORD *)((char *)v311 + 12);
            if (v436 == v324)
            {
              if (v436)
              {
                v424 = v312;
                WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v425, (uint64_t)&v313);
                v136 = v314;
                v314 = 0;
                v137 = v426;
                v426 = v136;
                if (v137)
                {
                  if (*(_DWORD *)v137 == 2)
                    WTF::StringImpl::destroy(v137, v135);
                  else
                    *(_DWORD *)v137 -= 2;
                }
                v138 = v315;
                v315 = 0;
                v139 = v427;
                v427 = v138;
                if (v139)
                {
                  if (*(_DWORD *)v139 == 2)
                    WTF::StringImpl::destroy(v139, v135);
                  else
                    *(_DWORD *)v139 -= 2;
                }
                v140 = v316;
                v316 = 0;
                v141 = v428;
                v428 = v140;
                if (v141)
                  WTF::RefCounted<WebCore::FormData>::deref(v141);
                v429 = v317;
                v430 = v318;
                v142 = v319;
                v319 = 0;
                v143 = v431;
                v431 = v142;
                if (v143)
                  CFRelease(v143);
                std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v432, (uint64_t)&v320);
                v144 = v321;
                v321 = 0;
                v145 = v433;
                v433 = v144;
                if (v145)
                {
                  if (*(_DWORD *)v145 == 2)
                    WTF::StringImpl::destroy(v145, v118);
                  else
                    *(_DWORD *)v145 -= 2;
                }
                *(_OWORD *)((char *)v435 + 14) = *(_OWORD *)((char *)v323 + 14);
                v434 = v322;
                v435[0] = v323[0];
              }
            }
            else if (v436)
            {
              std::__optional_destruct_base<WebKit::FrameInfoData,false>::reset[abi:sn180100]((uint64_t)&v424, v118);
            }
            else
            {
              std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData,WebKit::FrameInfoData*>(&v424, (uint64_t)&v312);
              v436 = 1;
            }
            v437[0] = v325[0];
            *(_OWORD *)((char *)v437 + 9) = *(_OWORD *)((char *)v325 + 9);
            v146 = v326;
            v326 = 0;
            v147 = v438;
            v438 = v146;
            if (v147)
            {
              if (*(_DWORD *)v147 == 2)
                WTF::StringImpl::destroy(v147, v118);
              else
                *(_DWORD *)v147 -= 2;
            }
            v148 = v327;
            v327 = 0;
            v149 = v439;
            v439 = v148;
            if (v149)
            {
              if (*(_DWORD *)v149 == 2)
                WTF::StringImpl::destroy(v149, v118);
              else
                *(_DWORD *)v149 -= 2;
            }
            v150 = v328;
            v328 = 0;
            v151 = v440;
            v440 = v150;
            if (v151)
            {
              if (*(_DWORD *)v151 == 2)
                WTF::StringImpl::destroy(v151, v118);
              else
                *(_DWORD *)v151 -= 2;
            }
            v152 = v329;
            v329 = 0;
            v153 = v441;
            v441 = v152;
            if (v153)
              WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v153);
            v154 = v330;
            v330 = 0;
            v155 = v442;
            v442 = v154;
            if (v155)
              WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v155, v118);
            v156 = v331;
            v331 = 0;
            v157 = v443;
            v443 = v156;
            if (v157)
            {
              if (*(_DWORD *)v157 == 2)
                WTF::StringImpl::destroy(v157, v118);
              else
                *(_DWORD *)v157 -= 2;
            }
            v158 = v332;
            v332 = 0;
            v159 = v444;
            v444 = v158;
            if (v159)
            {
              if (*(_DWORD *)v159 == 2)
                WTF::StringImpl::destroy(v159, v118);
              else
                *(_DWORD *)v159 -= 2;
            }
            v445 = v333;
            WebCore::DictionaryPopupInfo::operator=((uint64_t)&v446, (uint64_t)&v334);
            v160 = v335;
            v335 = 0;
            v161 = v447;
            v447 = v160;
            if (v161)
              WTF::RefCounted<WebCore::TextIndicator>::deref(v161);
          }
        }
        else if (v448)
        {
          WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&v415);
          v448 = 0;
        }
        else
        {
          WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)&v415, (uint64_t *)&v303);
          v448 = 1;
        }
        v449 = v337;
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v450, (uint64_t)&v338);
        v163 = v339;
        v339 = 0;
        v164 = v451;
        v451 = v163;
        if (v164)
        {
          if (*(_DWORD *)v164 == 2)
            WTF::StringImpl::destroy(v164, v162);
          else
            *(_DWORD *)v164 -= 2;
        }
        v165 = v340;
        v340 = 0;
        v166 = v452;
        v452 = v165;
        if (v166)
        {
          if (*(_DWORD *)v166 == 2)
            WTF::StringImpl::destroy(v166, v162);
          else
            *(_DWORD *)v166 -= 2;
        }
        v167 = v341;
        v341 = 0;
        v168 = v453;
        v453 = v167;
        if (v168)
          WTF::RefCounted<WebCore::FormData>::deref(v168);
        v454 = v342;
        v455 = v343;
        v169 = v344;
        v344 = 0;
        v170 = v456;
        v456 = v169;
        if (v170)
          CFRelease(v170);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v457, (uint64_t)&v345);
        v172 = v346;
        v346 = 0;
        v173 = v458;
        v458 = v172;
        if (v173)
        {
          if (*(_DWORD *)v173 == 2)
            WTF::StringImpl::destroy(v173, v171);
          else
            *(_DWORD *)v173 -= 2;
        }
        *(_OWORD *)((char *)v460 + 14) = *(_OWORD *)((char *)v348 + 14);
        v459 = v347;
        v460[0] = v348[0];
        v461 = v349;
        v462 = v350;
        v463 = v351;
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v464, (uint64_t)&v352);
        v175 = v353;
        v353 = 0;
        v176 = v465;
        v465 = v175;
        if (v176)
        {
          if (*(_DWORD *)v176 == 2)
            WTF::StringImpl::destroy(v176, v174);
          else
            *(_DWORD *)v176 -= 2;
        }
        v177 = v354;
        v354 = 0;
        v178 = v466;
        v466 = v177;
        if (v178)
        {
          if (*(_DWORD *)v178 == 2)
            WTF::StringImpl::destroy(v178, v174);
          else
            *(_DWORD *)v178 -= 2;
        }
        v179 = v355;
        v355 = 0;
        v180 = v467;
        v467 = v179;
        if (v180)
          WTF::RefCounted<WebCore::FormData>::deref(v180);
        v468 = v356;
        v469 = v357;
        v181 = v358;
        v358 = 0;
        v182 = v470;
        v470 = v181;
        if (v182)
          CFRelease(v182);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v471, (uint64_t)&v359);
        v184 = v360;
        v360 = 0;
        v185 = v472;
        v472 = v184;
        if (v185)
        {
          if (*(_DWORD *)v185 == 2)
            WTF::StringImpl::destroy(v185, v183);
          else
            *(_DWORD *)v185 -= 2;
        }
        v473 = v361;
        v474[0] = v362[0];
        *(_OWORD *)((char *)v474 + 14) = *(_OWORD *)((char *)v362 + 14);
        v475 = v363;
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v476, (uint64_t)&v364);
        v187 = v365;
        v365 = 0;
        v188 = v477;
        v477 = v187;
        if (v188)
        {
          if (*(_DWORD *)v188 == 2)
            WTF::StringImpl::destroy(v188, v186);
          else
            *(_DWORD *)v188 -= 2;
        }
        v189 = v366;
        v366 = 0;
        v190 = v478;
        v478 = v189;
        if (v190)
        {
          if (*(_DWORD *)v190 == 2)
            WTF::StringImpl::destroy(v190, v186);
          else
            *(_DWORD *)v190 -= 2;
        }
        v191 = v367;
        v367 = 0;
        v192 = v479;
        v479 = v191;
        if (v192)
          WTF::RefCounted<WebCore::FormData>::deref(v192);
        v480 = v368;
        v481 = v369;
        v193 = v370;
        v370 = 0;
        v194 = v482;
        v482 = v193;
        if (v194)
          CFRelease(v194);
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v483, (uint64_t)&v371);
        v195 = v372;
        v372 = 0;
        v196 = v484;
        v484 = v195;
        if (v196)
        {
          if (*(_DWORD *)v196 == 2)
            WTF::StringImpl::destroy(v196, v97);
          else
            *(_DWORD *)v196 -= 2;
        }
        v197 = v373;
        v373 = 0;
        v198 = v485;
        v485 = v197;
        if (v198)
        {
          if (*(_DWORD *)v198 == 2)
            WTF::StringImpl::destroy(v198, v97);
          else
            *(_DWORD *)v198 -= 2;
        }
        v199 = v374;
        v374 = 0;
        v200 = v486;
        v486 = v199;
        if (v200)
          WTF::RefCounted<WebCore::FormData>::deref(v200);
        v487 = v375;
        v488 = v376;
        v201 = v377;
        v377 = 0;
        v202 = v489;
        v489 = v201;
        if (v202)
          CFRelease(v202);
      }
      else if (v490)
      {
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v396);
        v490 = 0;
      }
      else
      {
        WebKit::NavigationActionData::NavigationActionData((uint64_t)v396, (uint64_t)buf);
        v490 = 1;
      }
      if (v378)
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
      goto LABEL_310;
    }
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v11);
    if (WTF::URL::protocolIs()
      && (v69 = *((_QWORD *)v12 + 5)) != 0
      && *(_BYTE *)(v69 + 1856)
      && (v70 = *(_QWORD *)(v69 + 1632)) != 0
      && *(_DWORD *)(v70 + 4)
      && (v72 = *(_QWORD *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v69 + 1872))) != 0
      && *(_DWORD *)(v72 + 4)
      && (v73 = *((_QWORD *)v12 + 5), *(_BYTE *)(v73 + 1856)))
    {
      v74 = *(unsigned int **)(v73 + 1680);
      if (v74)
      {
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 + 1, v74));
      }
      v65 = (unsigned int *)v381;
      v381 = (WTF *)v74;
      if (!v65)
      {
LABEL_106:
        if (v37)
        {
LABEL_107:
          v65 = (unsigned int *)WTF::String::operator=(&v513, (WTF::StringImpl *)(v37 + 736));
          v84 = *(_OWORD *)(v37 + 760);
          v514 = *(_OWORD *)(v37 + 744);
          v515 = v84;
          goto LABEL_108;
        }
        goto LABEL_108;
      }
    }
    else
    {
      v80 = (WebCore::SecurityOrigin *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v11);
      WebCore::SecurityOrigin::create(v80, v81);
      v83 = *(WTF **)buf;
      *(_QWORD *)buf = 0;
      v65 = (unsigned int *)v381;
      v381 = v83;
      if (!v65)
        goto LABEL_106;
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v65, v82);
      v65 = *(unsigned int **)buf;
      *(_QWORD *)buf = 0;
      if (!v65)
        goto LABEL_106;
    }
    v65 = (unsigned int *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v65, v71);
    goto LABEL_106;
  }
  WTF::RunLoop::main((WTF::RunLoop *)v16);
  ++*((_DWORD *)v12 + 4);
  v379[0] = v12;
  WebKit::blockedError((WebKit *)v11, (uint64_t)&v379[1]);
  v104 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v104 = off_1E34EB200;
  *(WTF::StringImpl **)(v104 + 8) = v379[0];
  v105 = v379[1];
  v379[0] = 0;
  v379[1] = 0;
  *(_QWORD *)(v104 + 16) = v105;
  WTF::URL::URL(v104 + 24, (uint64_t *)v380);
  *(_QWORD *)(v104 + 64) = *(_QWORD *)((char *)&v384 + 4);
  *(_WORD *)(v104 + 76) = v385;
  *(_DWORD *)(v104 + 72) = HIDWORD(v384);
  v106 = *(_QWORD *)((char *)&v385 + 4);
  *(_QWORD *)((char *)&v384 + 4) = 0;
  *(_QWORD *)((char *)&v385 + 4) = 0;
  *(_QWORD *)(v104 + 80) = v106;
  *(_BYTE *)(v104 + 88) = BYTE12(v385);
  WTF::RunLoop::dispatch();
  *(_QWORD *)buf = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v108 = *(const void **)((char *)&v385 + 4);
  *(_QWORD *)((char *)&v385 + 4) = 0;
  if (v108)
    CFRelease(v108);
  v109 = *(WTF::StringImpl **)((char *)&v384 + 4);
  *(_QWORD *)((char *)&v384 + 4) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, v107);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = v380[0];
  v380[0] = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, v107);
    else
      *(_DWORD *)v110 -= 2;
  }
  v111 = v379[1];
  v379[1] = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v107);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = v379[0];
  v379[0] = 0;
  if (v112)
  {
    if (*((_DWORD *)v112 + 4) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v112 + 8))(v112);
    else
      --*((_DWORD *)v112 + 4);
  }
}

uint64_t WebKit::WebProcess::ensureNetworkProcessConnection(WebKit::WebProcess *this)
{
  WTF::RunLoop *v2;
  uint64_t result;
  IPC::Connection **v4;
  _DWORD *v5;
  char v6;
  char v7;
  WebCore::LegacySchemeRegistry *v8;
  uint64_t v9;
  void *v10;
  WebCore::Document *v11;
  WebCore::SharedWorkerThreadProxy *v12;
  uint64_t hasInstances;
  uint64_t *v14;
  WTF::RunLoop *v15;
  IPC::Connection *v16;
  IPC::Connection *v17;
  WebCore::SWClientConnection *v18;
  IPC::Connection *v19[5];
  IPC::Connection **v20;
  _BYTE v21[9];
  _BYTE v22[31];
  char v23;
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196C87498);
  }
  result = *((_QWORD *)this + 37);
  if (!result)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v19, *((unsigned __int8 ***)this + 4));
    WebKit::getNetworkProcessConnection((WebKit *)v21, v19[0]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v19);
    LODWORD(v19[0]) = WTF::MachSendRight::leakSendRight((WTF::MachSendRight *)v21);
    v19[1] = 0;
    WebKit::NetworkProcessConnection::create((uint64_t *)&v20, (int *)v19, v21[4]);
    v4 = v20;
    v5 = (_DWORD *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v20;
    if (v5)
    {
      if (v5[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        v4 = (IPC::Connection **)*((_QWORD *)this + 37);
      }
      else
      {
        --v5[4];
      }
    }
    v6 = v23;
    if (v23)
    {
      v6 = v21[8];
      v24[0] = *(_OWORD *)v22;
      *(_OWORD *)((char *)v24 + 15) = *(_OWORD *)&v22[15];
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    *((_BYTE *)v4 + 32) = v6;
    *(_OWORD *)((char *)v4 + 33) = v24[0];
    *((_OWORD *)v4 + 3) = *(_OWORD *)((char *)v24 + 15);
    *((_BYTE *)v4 + 64) = v7;
    v8 = (WebCore::LegacySchemeRegistry *)WebKit::WebProcess::setNetworkProcessConnectionID((uint64_t)this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 37) + 24) + 24));
    v9 = *(_QWORD *)(*((_QWORD *)this + 37) + 24);
    WebCore::LegacySchemeRegistry::allURLSchemesRegisteredAsCORSEnabled(v8);
    v20 = v19;
    IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(v9, (uint64_t *)&v20, 0, 0, 0);
    v11 = (WebCore::Document *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v10);
    v12 = (WebCore::SharedWorkerThreadProxy *)WebCore::Document::allDocuments(v11);
    if (*(_QWORD *)v19[0] && *(_DWORD *)(*(_QWORD *)v19[0] - 12)
      || (hasInstances = WebCore::SharedWorkerThreadProxy::hasInstances(v12), (hasInstances & 1) != 0))
    {
      v18 = (WebCore::SWClientConnection *)WebKit::NetworkProcessConnection::serviceWorkerConnection(*((WebKit::NetworkProcessConnection **)this + 37));
      hasInstances = WebCore::SWClientConnection::registerServiceWorkerClients(v18);
    }
    v14 = WebKit::LaunchServicesDatabaseManager::singleton((WebKit::LaunchServicesDatabaseManager *)hasInstances);
    WebKit::LaunchServicesDatabaseManager::waitForDatabaseUpdate((WebKit::LaunchServicesDatabaseManager *)v14);
    WTF::RunLoop::main(v15);
    v16 = (IPC::Connection *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v16 = off_1E34E08D8;
    *((_QWORD *)v16 + 1) = this;
    v19[0] = v16;
    WTF::RunLoop::dispatch();
    v17 = v19[0];
    v19[0] = 0;
    if (v17)
      (*(void (**)(IPC::Connection *))(*(_QWORD *)v17 + 8))(v17);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v21);
    return *((_QWORD *)this + 37);
  }
  return result;
}

uint64_t WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v1 = *((_QWORD *)this + 3);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && !*(_BYTE *)(v2 + 144)
    && ((v3 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8)) != 0 ? (v4 = *(_BYTE *)(v3 + 144) == 0) : (v4 = 0), v4))
  {
    WebKit::WebFrame::fromCoreFrame(v3, &v8);
    v6 = *(unsigned __int16 *)(v8 + 104);
    v5 = v6 >> 8;
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    v5 = 0;
    LOBYTE(v6) = 0;
  }
  return v6 | (v5 << 8);
}

uint64_t WebKit::WebFrame::fromCoreFrame@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 144))
  {
    v3 = *(_QWORD **)(a1 + 264);
  }
  else
  {
    v3 = *(_QWORD **)(*(_QWORD *)(a1 + 280) + 16);
    result = (*(uint64_t (**)(_QWORD *))(*v3 + 1072))(v3);
    if ((result & 1) != 0)
    {
      v5 = 0;
      goto LABEL_4;
    }
  }
  v5 = v3[2];
  result = (uint64_t)CFRetain(*(CFTypeRef *)(v5 + 8));
LABEL_4:
  *a2 = v5;
  return result;
}

void WebKit::WebLoaderStrategy::scheduleLoad(WebKit::WebLoaderStrategy *this, WebCore::ResourceLoader *a2, WebCore::CachedResource *a3, char a4)
{
  uint64_t v8;
  WebCore::FrameLoader *v9;
  WebKit::WebFrame **v10;
  WebKit::WebFrame *v11;
  uint64_t v12;
  char v13;
  WebCore::Frame *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  WebCore *v28;
  const WTF::URL *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const WebCore::ResourceLoader *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::URL *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::ResourceLoader *v68;
  _BYTE buf[22];
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  _OWORD v80[2];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 + 93);
  v67 = v8;
  v9 = (WebCore::FrameLoader *)WebCore::ResourceLoader::frameLoader(a2);
  v10 = (WebKit::WebFrame **)*((_QWORD *)v9 + 2);
  *(_QWORD *)&v64 = 0;
  if (((*((uint64_t (**)(WebKit::WebFrame **))*v10 + 134))(v10) & 1) != 0)
  {
    if (!(*((unsigned int (**)(WebKit::WebFrame **))*v10 + 135))(v10))
      goto LABEL_8;
    v11 = v10[1];
  }
  else
  {
    v12 = WebKit::WebLocalFrameLoaderClient::webPageProxyID(v10);
    if (v13)
      v11 = (WebKit::WebFrame *)v12;
    else
      v11 = 0;
  }
  *(_QWORD *)&v64 = v11;
LABEL_8:
  v14 = (WebCore::Frame *)WebCore::FrameLoader::frame(v9);
  v15 = WebCore::Frame::pageID(v14);
  if (v16)
    v17 = v15;
  else
    v17 = 0;
  *((_QWORD *)&v64 + 1) = v17;
  v18 = WebCore::FrameLoader::frameID(v9);
  *(_QWORD *)&v65 = v18;
  *((_QWORD *)&v65 + 1) = v19;
  v66 = v8;
  if (WebCore::DocumentLoader::scheduleArchiveLoad())
  {
    v20 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = WebCore::ResourceLoader::frameLoader(a2);
      v22 = *((_QWORD *)a2 + 4);
      *(_DWORD *)buf = 134219520;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      v70 = 2048;
      v71 = v21;
      v72 = 2048;
      v73 = v22;
      v74 = 2048;
      v75 = v17;
      v76 = 2048;
      v77 = v18;
      v78 = 2048;
      v79 = v8;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: URL will be handled as an archive resource", buf, 0x48u);
    }
    ++*((_DWORD *)a2 + 4);
    v68 = a2;
    v23 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)&v80[0] = WebKit::WebResourceLoader::WebResourceLoader(v23, (uint64_t *)&v68, &v64);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>((uint64_t)buf, (uint64_t *)this + 6, &v67, (uint64_t *)v80);
    if (*(_QWORD *)&v80[0])
    {
      if (*(_DWORD *)(*(_QWORD *)&v80[0] + 8) == 1)
        (*(void (**)(void))(**(_QWORD **)&v80[0] + 8))();
      else
        --*(_DWORD *)(*(_QWORD *)&v80[0] + 8);
    }
    v32 = (uint64_t)v68;
    if (!v68)
      return;
    if (*((_DWORD *)v68 + 4) != 1)
    {
      --*((_DWORD *)v68 + 4);
      return;
    }
LABEL_54:
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    return;
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
  if (WTF::URL::protocolIs())
  {
    v24 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v25 = WebCore::ResourceLoader::frameLoader(a2);
      v26 = *((_QWORD *)a2 + 4);
      *(_DWORD *)buf = 134219520;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      v70 = 2048;
      v71 = v25;
      v72 = 2048;
      v73 = v26;
      v74 = 2048;
      v75 = v17;
      v76 = 2048;
      v77 = v18;
      v78 = 2048;
      v79 = v8;
      v27 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderS"
            "trategy::scheduleLoad: URL will be loaded as data";
LABEL_22:
      _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, v27, buf, 0x48u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  v28 = (WebCore *)WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
  if (WebCore::isQuickLookPreviewURL(v28, v29))
  {
    v24 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v30 = WebCore::ResourceLoader::frameLoader(a2);
      v31 = *((_QWORD *)a2 + 4);
      *(_DWORD *)buf = 134219520;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      v70 = 2048;
      v71 = v30;
      v72 = 2048;
      v73 = v31;
      v74 = 2048;
      v75 = v17;
      v76 = 2048;
      v77 = v18;
      v78 = 2048;
      v79 = v8;
      v27 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderS"
            "trategy::scheduleLoad: URL will be handled as a QuickLook resource";
      goto LABEL_22;
    }
LABEL_23:
    WebKit::WebLoaderStrategy::startLocalLoad(this, a2);
    return;
  }
  v68 = 0;
  v33 = *(_QWORD **)(WebCore::ResourceLoader::frameLoader(a2) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v33 + 1072))(v33) & 1) != 0)
  {
    v53 = *(_QWORD *)(WebCore::ResourceLoader::frameLoader(a2) + 16);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 1080))(v53))
      goto LABEL_45;
    if (!*(_BYTE *)(v53 + 64))
      goto LABEL_45;
    v54 = *(_OWORD *)(v53 + 48);
    v80[0] = *(_OWORD *)(v53 + 32);
    v80[1] = v54;
    v55 = WebCore::Page::serviceWorkerPage();
    if (!v55)
      goto LABEL_45;
    v56 = *(_QWORD **)(*(_QWORD *)(v55 + 48) + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v56 + 1368))(v56) & 1) != 0)
    {
      v58 = 0;
    }
    else
    {
      v57 = *(_QWORD *)(v56[2] + 8);
      if (v57)
        v58 = v57 - 16;
      else
        v58 = 0;
    }
    WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>::operator=((uint64_t *)&v68, v58);
    v42 = (uint64_t)v68;
    if (v68 && (v59 = *((_QWORD *)v68 + 6)) != 0 && (v60 = *(_QWORD *)(v59 + 160)) != 0)
    {
      WebKit::WebFrame::fromCoreFrame(v60, buf);
      v42 = (uint64_t)v68;
      v35 = *(_QWORD *)buf;
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v35 = v33[2];
    if (v35)
      CFRetain(*(CFTypeRef *)(v35 + 8));
    v36 = *(_QWORD *)(v35 + 24);
    if (v36
      && (v37 = *(_QWORD *)(v36 + 8)) != 0
      && (v38 = *(_QWORD *)(v37 + 24)) != 0
      && (v39 = *(_QWORD *)(v38 + 8)) != 0
      && (v40 = *(_QWORD **)(*(_QWORD *)(v39 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v40 + 1368))(v40) & 1) == 0)
      && (v41 = *(_QWORD *)(v40[2] + 8)) != 0)
    {
      v42 = v41 - 16;
      CFRetain(*(CFTypeRef *)(v41 - 8));
    }
    else
    {
      v42 = 0;
    }
    v68 = (WebCore::ResourceLoader *)v42;
  }
  if (v42)
  {
    if (v35)
    {
      v43 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceLoader *)((char *)a2 + 336));
      *(_QWORD *)buf = WTF::URL::protocol(v43);
      *(_QWORD *)&buf[8] = v44;
      v45 = WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::get<WTF::StringViewHashTranslator,WTF::StringView>((uint64_t *)(v42 + 2080), (uint64_t *)buf);
      if (v45)
      {
        v61 = off_1ECE713E8;
        if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
        {
          v62 = WebCore::ResourceLoader::frameLoader(a2);
          v63 = *((_QWORD *)a2 + 4);
          *(_DWORD *)buf = 134219520;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a2;
          v70 = 2048;
          v71 = v62;
          v72 = 2048;
          v73 = v63;
          v74 = 2048;
          v75 = *((_QWORD *)&v64 + 1);
          v76 = 2048;
          v77 = v65;
          v78 = 2048;
          v79 = v66;
          _os_log_impl(&dword_196BCC000, v61, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::tryLoadingUsingURLSchemeHandler: URL will be handled by a UIProcess URL scheme handler", buf, 0x48u);
        }
        WebKit::WebURLSchemeHandlerProxy::startNewTask((WebKit::WebURLSchemeHandlerProxy *)v45, a2, (CFTypeRef *)v35);
        LOBYTE(v45) = 1;
      }
LABEL_42:
      CFRelease(*(CFTypeRef *)(v35 + 8));
      v46 = (uint64_t)v68;
      v68 = 0;
      if (v46)
        CFRelease(*(CFTypeRef *)(v46 + 8));
      if ((v45 & 1) != 0)
        return;
      goto LABEL_45;
    }
    v68 = 0;
    CFRelease(*(CFTypeRef *)(v42 + 8));
  }
  else if (v35)
  {
    LOBYTE(v45) = 0;
    goto LABEL_42;
  }
LABEL_45:
  v47 = atomic_load(MEMORY[0x1E0DD42D8]);
  if (v47 && WebCore::InspectorInstrumentationWebKit::shouldInterceptRequestInternal(a2, v34))
  {
    ++*((_DWORD *)a2 + 4);
    v51 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v51 = off_1E34EB1D8;
    *(_QWORD *)(v51 + 8) = this;
    *(_QWORD *)(v51 + 16) = a2;
    v52 = v65;
    *(_OWORD *)(v51 + 24) = v64;
    *(_OWORD *)(v51 + 40) = v52;
    *(_QWORD *)(v51 + 56) = v66;
    *(_BYTE *)(v51 + 64) = a4;
    *(_QWORD *)(v51 + 72) = a3;
    *(_QWORD *)buf = v51;
    WebCore::InspectorInstrumentationWebKit::interceptRequestInternal();
    v32 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (!v32)
      return;
    goto LABEL_54;
  }
  v48 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v49 = WebCore::ResourceLoader::frameLoader(a2);
    v50 = *((_QWORD *)a2 + 4);
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a2;
    v70 = 2048;
    v71 = v49;
    v72 = 2048;
    v73 = v50;
    v74 = 2048;
    v75 = *((_QWORD *)&v64 + 1);
    v76 = 2048;
    v77 = v65;
    v78 = 2048;
    v79 = v66;
    _os_log_impl(&dword_196BCC000, v48, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: URL will be scheduled with the NetworkProcess", buf, 0x48u);
  }
  WebKit::maximumBufferingTime((uint64_t)a3);
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess((uint64_t)this, (uint64_t)a2, (uint64_t)a2 + 336);
}

uint64_t WebCore::LocalFrameLoaderClient::isEmptyFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::get<WTF::StringViewHashTranslator,WTF::StringView>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::StringViewHashTranslator::hash(*a2, a2[1]);
  for (i = 0; ; v6 = i + v8)
  {
    v8 = v6 & v5;
    v9 = (uint64_t *)(v2 + 16 * v8);
    if (*v9 != -1)
    {
      if (!*v9)
        return 0;
      if (WTF::StringViewHashTranslator::equal(v9, (unsigned __int8 *)*a2, a2[1]))
        break;
    }
    ++i;
  }
  return *(_QWORD *)(v2 + 16 * v8 + 8);
}

double WebKit::maximumBufferingTime(uint64_t a1)
{
  double result;
  uint64_t v2;

  result = 0.0;
  if (a1)
  {
    v2 = *(_BYTE *)(a1 + 556) & 0x1F;
    if (v2 <= 0x10)
      return dbl_1978D0D50[v2];
  }
  return result;
}

unsigned int *WebKit::addParametersShared(WebKit *this, const WebCore::LocalFrame *a2, WebKit::NetworkResourceLoadParameters *a3)
{
  int v3;
  uint64_t v6;
  unsigned int *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  __int128 v30;
  __int16 v31;
  WebKit::WebProcess *v32;
  WTF::RefCountedBase *v33;
  unsigned int *v34;

  v3 = (int)a3;
  v6 = WebCore::CrossOriginAccessControlCheckDisabler::singleton(this);
  *((_BYTE *)a2 + 3288) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  {
    result = (unsigned int *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = (unsigned int *)WebKit::WebProcess::WebProcess(v32);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  *((_BYTE *)a2 + 2946) = *((_BYTE *)result + 776);
  if (this)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 16) + 8);
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    WebKit::policySourceDocumentLoaderForFrame((unsigned int *)&v34, this);
    if (v34)
      v11 = *((_BYTE *)v34 + 3534) != 0;
    else
      v11 = 1;
    *((_BYTE *)a2 + 2947) = v11;
    v12 = *((_QWORD *)this + 37);
    if (v12)
    {
      *((_WORD *)a2 + 1588) = *(_WORD *)(v12 + 216);
      WTF::String::operator=((WTF::StringImpl **)a2 + 398, (WTF::StringImpl *)(v12 + 224));
      WTF::String::operator=((WTF::StringImpl **)a2 + 399, (WTF::StringImpl *)(v12 + 232));
      *((_BYTE *)a2 + 3337) = (*(_QWORD *)(*(_QWORD *)(v12 + 680) + 664) & 0x8000000000000) != 0;
    }
    v13 = *((_QWORD *)this + 3);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        *((_BYTE *)a2 + 3256) = *(_BYTE *)(v14 + 1097);
        *((_BYTE *)a2 + 2880) = *(_BYTE *)(v14 + 1683);
        WebCore::ResourceRequestBase::httpBody((const WebCore::LocalFrame *)((char *)a2 + 88));
        WebCore::Page::logMediaDiagnosticMessage();
        if (v33)
          WTF::RefCounted<WebCore::FormData>::deref(v33);
        v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16);
        if (((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) == 0)
        {
          v16 = *(_QWORD *)(v15[2] + 8);
          if (v16)
          {
            CFRetain(*(CFTypeRef *)(v16 - 8));
            v17 = *(_QWORD *)(v16 + 616);
            if (v17)
            {
              v19 = *(_DWORD *)(v17 + 16);
              v18 = v17 + 16;
              *(_DWORD *)v18 = v19 + 1;
              v20 = *(_QWORD *)(v18 + 24);
              if (v20)
                LOBYTE(v20) = *(_DWORD *)(v20 - 12) != 0;
              *((_BYTE *)a2 + 3768) = v20;
              WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)v18);
            }
            CFRelease(*(CFTypeRef *)(v16 - 8));
          }
        }
      }
    }
    v21 = *((_QWORD *)this + 15);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 8) + 528);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 8);
          if (v24)
          {
            v25 = WebCore::FrameLoader::frameID(*(WebCore::FrameLoader **)(v24 + 280));
            v26 = *((unsigned __int8 *)a2 + 3280);
            *((_QWORD *)a2 + 408) = v25;
            *((_QWORD *)a2 + 409) = v27;
            if (!v26)
              *((_BYTE *)a2 + 3280) = 1;
            v28 = *(_WORD **)(*(_QWORD *)(v22 + 40) + 8);
            *((_WORD *)a2 + 1576) = v28[108];
            WTF::String::operator=((WTF::StringImpl **)a2 + 395, (WTF::StringImpl *)(v28 + 112));
            WTF::String::operator=((WTF::StringImpl **)a2 + 396, (WTF::StringImpl *)(v28 + 116));
            v29 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8) + 736;
            WTF::String::operator=((WTF::StringImpl **)a2 + 384, (WTF::StringImpl *)v29);
            v30 = *(_OWORD *)(v29 + 24);
            *(_OWORD *)((char *)a2 + 3080) = *(_OWORD *)(v29 + 8);
            *(_OWORD *)((char *)a2 + 3096) = v30;
          }
        }
      }
    }
    result = v34;
    if (v34)
      v31 = *((_WORD *)v34 + 1757);
    else
      v31 = 0;
    *((_WORD *)a2 + 1474) = v31;
    if (v3)
      *((_BYTE *)a2 + 3769) = (*(_QWORD *)(*(_QWORD *)(v8 + 136) + 680) & 0x20000000000000) != 0;
    v34 = 0;
    if (result)
    {
      if (result[6] == 1)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
      else
        --result[6];
    }
    if (v8)
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
  }
  return result;
}

unsigned int *WebKit::policySourceDocumentLoaderForFrame(unsigned int *this, const WebCore::LocalFrame *a2)
{
  unsigned int *v2;
  uint64_t v3;
  BOOL v4;
  unsigned int *v6;
  unsigned int v7;
  WTF::URL *v8;
  _DWORD *v9;

  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 16) + 8);
  if (v3)
    v4 = *(_BYTE *)(v3 + 144) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (unsigned int *)(v3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    WebCore::FrameLoader::loaderForWebsitePolicies();
    if (v9)
    {
      ++v9[6];
      *(_QWORD *)v2 = v9;
      v8 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v9 + 218));
      if ((WTF::URL::hasSpecialScheme(v8) & 1) == 0 && (*(_BYTE *)(*((_QWORD *)a2 + 37) + 744) & 2) != 0)
        WTF::RefPtr<WebCore::DocumentLoader,WTF::RawPtrTraits<WebCore::DocumentLoader>,WTF::DefaultRefDerefTraits<WebCore::DocumentLoader>>::operator=((_DWORD **)v2, *(_DWORD **)(*((_QWORD *)a2 + 35) + 88));
      if (v9[6] == 1)
        (*(void (**)())(*(_QWORD *)v9 + 24))();
      else
        --v9[6];
    }
    else
    {
      *(_QWORD *)v2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

WebKit::NetworkResourceLoadParameters *WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(WebKit::NetworkResourceLoadParameters *this)
{
  WebKit::NetworkLoadParameters *Parameters;

  Parameters = WebKit::NetworkLoadParameters::NetworkLoadParameters(this);
  *(_OWORD *)((char *)Parameters + 2977) = 0u;
  *(_OWORD *)((char *)Parameters + 2952) = 0u;
  *(_OWORD *)((char *)Parameters + 2968) = 0u;
  *((_BYTE *)Parameters + 2993) = 2;
  *(_DWORD *)((char *)Parameters + 2994) = 0;
  *((_BYTE *)Parameters + 2998) = 0;
  *((_BYTE *)Parameters + 3064) = 0;
  *((_QWORD *)this + 384) = 0;
  *(_OWORD *)((char *)Parameters + 3000) = 0u;
  *(_OWORD *)((char *)Parameters + 3016) = 0u;
  *(_OWORD *)((char *)Parameters + 3025) = 0u;
  WTF::URL::invalidate((WebKit::NetworkLoadParameters *)((char *)Parameters + 3072));
  *((_QWORD *)this + 389) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3112));
  *((_WORD *)this + 1576) = 0;
  *((_OWORD *)this + 199) = 0u;
  *(_OWORD *)((char *)this + 3160) = 0u;
  *((_WORD *)this + 1588) = 0;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebKit::NetworkResourceLoadParameters *)((char *)this + 3200));
  *((_WORD *)this + 1616) = 0;
  *((_BYTE *)this + 3234) = 0;
  *((_BYTE *)this + 3264) = 0;
  *((_BYTE *)this + 3280) = 0;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *((_BYTE *)this + 3256) = 0;
  *((_BYTE *)this + 3288) = 1;
  *((_QWORD *)this + 412) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3296));
  *((_WORD *)this + 1668) = 0;
  *((_BYTE *)this + 3338) = 0;
  *((_DWORD *)this + 835) = 0;
  *((_QWORD *)this + 418) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3344));
  *((_WORD *)this + 1692) = 0;
  *((_BYTE *)this + 3424) = 0;
  *((_BYTE *)this + 3648) = 0;
  *((_QWORD *)this + 424) = 0;
  *((_QWORD *)this + 426) = 0;
  *((_QWORD *)this + 425) = 0;
  *((_BYTE *)this + 3664) = 1;
  *((_BYTE *)this + 3672) = 0;
  *((_BYTE *)this + 3680) = 0;
  *((_BYTE *)this + 3688) = 0;
  *((_BYTE *)this + 3696) = 0;
  *((_BYTE *)this + 3704) = 0;
  *((_QWORD *)this + 464) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3712));
  *((_BYTE *)this + 3752) = 0;
  *((_BYTE *)this + 3760) = 0;
  *((_WORD *)this + 1884) = 0;
  *((_BYTE *)this + 3770) = 0;
  return this;
}

void WebKit::NetworkLoadChecker::check(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t a3, WTF **a4)
{
  uint64_t v8;

  if (*(_BYTE *)(a1 + 529))
    WebCore::ResourceRequest::operator=(a1 + 536, (uint64_t)this);
  v8 = WebCore::ResourceRequestBase::httpHeaderFields(this);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(a1 + 128, v8);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 144, v8 + 16);
  WebKit::NetworkLoadChecker::checkRequest(a1, (uint64_t)this, a3, a4);
}

uint64_t WebCore::ResourceRequestBase::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  _DWORD *v7;
  WTF::RefCountedBase *v8;
  uint64_t v9;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(a2 + 40));
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 88), (WTF::StringImpl *)(a2 + 88));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(a1 + 96, a2 + 96);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 112, a2 + 112);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 128), a2 + 128);
  v6 = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = v6;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 152), (WTF::StringImpl *)(a2 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 160), (WTF::StringImpl *)(a2 + 160));
  v7 = *(_DWORD **)(a2 + 168);
  if (v7)
    ++*v7;
  v8 = *(WTF::RefCountedBase **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v7;
  if (v8)
    WTF::RefCounted<WebCore::FormData>::deref(v8);
  v9 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  char v14;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct((WebCore::HTTPHeaderMap::UncommonHeader *)(*(_QWORD *)a1 + 16 * v5), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(_QWORD *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    else if (v5 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
      LODWORD(v4) = *(_DWORD *)(a1 + 12);
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader*>((uint64_t)&v14, *(_QWORD *)a2, *(_QWORD *)a2 + 16 * v4, *(WTF::StringImpl ***)a1);
    v6 = *(unsigned int *)(a1 + 12);
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 != (_DWORD)v7)
    {
      v9 = *(_QWORD *)a2 + 16 * v7;
      v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
      v11 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        v12 = *(_DWORD **)v11;
        if (*(_QWORD *)v11)
          *v12 += 2;
        *v10 = v12;
        v13 = *(_DWORD **)(v11 + 8);
        if (v13)
          *v13 += 2;
        v10[1] = v13;
        v11 += 16;
        v10 += 2;
      }
      while (v11 != v9);
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v13;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      v13 = *(_DWORD *)(a2 + 12);
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct((WebCore::ExceptionData *)(*(_QWORD *)a1 + 16 * v5), (WebCore::ExceptionData *)(*(_QWORD *)a1 + 16 * v4));
      LODWORD(v4) = v13;
      *(_DWORD *)(a1 + 12) = v13;
    }
    else if (v5 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
      LODWORD(v4) = *(_DWORD *)(a1 + 12);
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader*,0>(*(__int16 **)a2, (__int16 *)(*(_QWORD *)a2 + 16 * v4), *(_WORD **)a1);
    v6 = *(unsigned int *)(a1 + 12);
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 != (_DWORD)v7)
    {
      v8 = *(_QWORD *)a2 + 16 * v7;
      v9 = *(_QWORD *)a1 + 16 * v6;
      v10 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        *(_WORD *)v9 = *(_WORD *)v10;
        v11 = *(_DWORD **)(v10 + 8);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(v9 + 8) = v11;
        v10 += 16;
        v9 += 16;
      }
      while (v10 != v8);
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (WTF *)((char *)v4 + 16 * v5);
      v9 = v4;
      do
      {
        *(_WORD *)v6 = *(_WORD *)v9;
        v10 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        *(_QWORD *)(v6 + 8) = v10;
        v11 = v6;
        WebCore::ExceptionData::~ExceptionData(v9);
        v9 = (WTF *)((char *)v9 + 16);
        v6 = v11 + 16;
      }
      while (v9 != v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::ExceptionData *v10;
  WebCore::ExceptionData *v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = *(unsigned int *)(result + 12);
    if (v2 > a2)
    {
      v3 = result;
      v4 = a2;
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct((WebCore::ExceptionData *)(*(_QWORD *)result + 16 * a2), (WebCore::ExceptionData *)(*(_QWORD *)result + 16 * v2));
      a2 = v4;
      result = v3;
      *(_DWORD *)(v3 + 12) = v4;
      LODWORD(v2) = v4;
    }
    v5 = *(WTF **)result;
    if (a2)
    {
      v6 = *(WTF **)result;
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v7 = result;
      v8 = a2;
      v9 = WTF::fastMalloc((WTF *)(16 * a2));
      result = v7;
      *(_DWORD *)(v7 + 8) = v8;
      *(_QWORD *)v7 = v9;
      v5 = v6;
      if ((_DWORD)v2 && (WTF *)v9 != v6)
      {
        v10 = (WTF *)((char *)v6 + 16 * v2);
        v11 = v6;
        do
        {
          *(_WORD *)v9 = *(_WORD *)v11;
          v12 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          *(_QWORD *)(v9 + 8) = v12;
          WebCore::ExceptionData::~ExceptionData(v11);
          v5 = v6;
          result = v7;
          v11 = (WebCore::ExceptionData *)((char *)v11 + 16);
          v9 += 16;
        }
        while (v11 != v10);
      }
    }
    if (v5)
    {
      if (*(WTF **)result == v5)
      {
        *(_QWORD *)result = 0;
        *(_DWORD *)(result + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  WTF **v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  int v9;
  uint64_t result;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
  v6 = (WTF **)(v2 + 8 * v5);
  if ((WTF::equal(*v6, 0, v7) & 1) != 0)
    return 0;
  v9 = 1;
  while (*v6 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v6, *a2, v8) & 1) == 0)
  {
    v5 = (v5 + v9) & v4;
    v6 = (WTF **)(v2 + 8 * v5);
    v11 = WTF::equal(*v6, 0, v8);
    result = 0;
    ++v9;
    if (v11)
      return result;
  }
  return 1;
}

uint64_t *WebKit::LaunchServicesDatabaseManager::singleton(WebKit::LaunchServicesDatabaseManager *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&_MergedGlobals_48);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&_MergedGlobals_48, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LaunchServicesDatabaseManager::singleton(void)::$_0 &&>>);
  }
  return &qword_1ECE72078;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = v4;
      do
      {
        v10 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        *v8 = v10;
        v11 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        v8[1] = v11;
        WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(v9);
        v9 = (WTF *)(v12 + 16);
        v8 += 2;
      }
      while (v9 != (WTF *)((char *)v4 + 16 * v5));
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct((WebCore::HTTPHeaderMap::UncommonHeader *)(*(_QWORD *)a1 + 16 * a2), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(_QWORD *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v6 = (WTF *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4 && v6 != v5)
      {
        v7 = (WTF *)((char *)v5 + 16 * v4);
        v8 = v5;
        do
        {
          v9 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)v6 = v9;
          v10 = *((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v6 + 1) = v10;
          v11 = v6;
          WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(v8);
          v8 = (WTF *)((char *)v8 + 16);
          v6 = (WTF *)((char *)v11 + 16);
        }
        while (v8 != v7);
      }
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, (void *)a2);
    }
  }
}

void WebKit::getNetworkProcessConnection(WebKit *this, IPC::Connection *a2)
{
  char v2;
  int v3;
  NSObject *v4;
  int v5;
  uint8_t v6[16];
  uint64_t v7[2];

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 40) = 0;
  v7[0] = (uint64_t)a2;
  v7[1] = (uint64_t)this;
  WebKit::getNetworkProcessConnection(IPC::Connection &)::$_0::operator()(v7);
  if ((v2 & 1) == 0)
  {
    v3 = 30;
    while (--v3)
    {
      v4 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v6 = 0;
        _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will retry...", v6, 2u);
      }
      WTF::sleep();
      WebKit::getNetworkProcessConnection(IPC::Connection &)::$_0::operator()(v7);
      if (v5)
        return;
    }
    __break(0xC471u);
  }
}

void WebKit::LaunchServicesDatabaseManager::waitForDatabaseUpdate(WebKit::LaunchServicesDatabaseManager *this)
{
  WTF::MonotonicTime *v2;
  double v3;
  double v4;
  unsigned __int8 v5;
  char v6;
  double v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
  v4 = v3;
  v5 = atomic_load((unsigned __int8 *)this + 24);
  if ((v5 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v2 = (WTF::MonotonicTime *)WTF::BinarySemaphore::waitFor((WebKit::LaunchServicesDatabaseManager *)((char *)this + 25));
    v6 = (char)v2;
  }
  WTF::MonotonicTime::now(v2);
  v8 = v7 - v4;
  if (v8 > 0.5)
  {
    v9 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
    {
      v11 = 134217984;
      v12 = v8;
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Waiting for Launch Services database update took %f seconds", (uint8_t *)&v11, 0xCu);
    }
  }
  if ((v6 & 1) == 0)
  {
    v10 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v11) = 0;
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "Timed out waiting for Launch Services database update.", (uint8_t *)&v11, 2u);
    }
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::WebProcessProxy::GetNetworkProcessConnection>::takeReply(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 56))
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(v4);
  }
  else
  {
    result = WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(result + 4) = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(result + 20) = *(_OWORD *)(a2 + 28);
    *(_QWORD *)(result + 33) = *(_QWORD *)(a2 + 41);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 256;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WTF::BinarySemaphore::waitFor(WTF::MonotonicTime *a1)
{
  WTF::MonotonicTime::now(a1);
  return WTF::BinarySemaphore::waitUntil();
}

uint64_t WebKit::defaultShouldEnableScreenOrientationAPI(WebKit *this)
{
  uint64_t result;
  char v2;

    return WebKit::defaultShouldEnableScreenOrientationAPI(void)::shouldEnableScreenOrientationAPI != 0;
  v2 = WTF::linkedOnOrAfterSDKWithBehavior();
  result = 1;
  if ((v2 & 1) == 0)
    result = WebCore::IOSApplication::isHoYoLAB((WebCore::IOSApplication *)1);
  WebKit::defaultShouldEnableScreenOrientationAPI(void)::shouldEnableScreenOrientationAPI = result;
  return result;
}

void sub_196C89070(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196C89140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

API::ContentRuleListStore *API::ContentRuleListStore::ContentRuleListStore(API::ContentRuleListStore *this, const WTF::String *a2)
{
  _DWORD *v4;
  const WTF::String *v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D9258;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *((_QWORD *)this + 2) = v4;
  WTF::ConcurrentWorkQueue::create();
  WTF::WorkQueue::create();
  WTF::WorkQueue::create();
  WTF::FileSystemImpl::makeAllDirectories(a2, v5);
  return this;
}

void sub_196C89450(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKitL36defaultWebsiteDataStoreRootDirectoryEv_block_invoke()
{
  void *v0;
  WebKit *v1;
  _BOOL8 HasContainer;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  if (v0)
  {
    v1 = (WebKit *)objc_msgSend(v0, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebKit"), 1);
    HasContainer = WebKit::processHasContainer(v1);
    if (!HasContainer)
      v1 = (WebKit *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer), 1);
    v3 = (const void *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebsiteDataStore"), 1);
    v4 = (uint64_t)v3;
    if (v3)
      CFRetain(v3);
    v5 = (const void *)qword_1ECE72C10;
    qword_1ECE72C10 = v4;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

void sub_196C8961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Block_release(v10);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WebKit::WebsiteDataStore *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;

  v2 = WebKit::WebsiteDataStore::websiteDataStoreIOQueue(a1);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  v12 = v3;
  WebKit::defaultWebsiteDataStoreRootDirectory((WebKit *)&v11);
  WTF::String::isolatedCopy();
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34CCC88;
  v4[1] = v12;
  v5 = v13;
  v12 = 0;
  v13 = 0;
  v4[2] = v5;
  v14 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 32))(v2, &v14);
  v7 = v14;
  v14 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196C8976C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *(_QWORD *)(v12 - 24);
  *(_QWORD *)(v12 - 24) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::defaultWebsiteDataStoreRootDirectory(WebKit *this)
{
  if ((byte_1ECE72BD3 & 1) == 0)
  {
    qword_1ECE72C10 = 0;
    byte_1ECE72BD3 = 1;
  }
  if (qword_1ECE72C08 != -1)
    dispatch_once(&qword_1ECE72C08, &__block_literal_global_221);
  objc_msgSend((id)objc_msgSend((id)qword_1ECE72C10, "absoluteURL"), "path");
  JUMPOUT(0x19AEABCC8);
}

uint64_t WebKit::WebsiteDataStore::websiteDataStoreIOQueue(WebKit::WebsiteDataStore *this)
{
  uint64_t result;
  uint64_t v2;

    return WebKit::WebsiteDataStore::websiteDataStoreIOQueue(void)::queue;
  WTF::WorkQueue::create();
  result = v2;
  WebKit::WebsiteDataStore::websiteDataStoreIOQueue(void)::queue = v2;
  return result;
}

void ___ZN6WebKit16WebsiteDataStore44websiteDataDirectoryFileSystemRepresentationERKN3WTF6StringES4_NS0_21ShouldCreateDirectoryE_block_invoke()
{
  void *v0;
  WebKit *v1;
  _BOOL8 HasContainer;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  if (v0)
  {
    v1 = (WebKit *)objc_msgSend(v0, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebKit"), 1);
    HasContainer = WebKit::processHasContainer(v1);
    if (!HasContainer)
      v1 = (WebKit *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer), 1);
    v3 = (const void *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebsiteData"), 1);
    v4 = (uint64_t)v3;
    if (v3)
      CFRetain(v3);
    v5 = (const void *)qword_1ECE72C00;
    qword_1ECE72C00 = v4;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

void ___ZN6WebKit16WebsiteDataStore38cacheDirectoryFileSystemRepresentationERKN3WTF6StringES4_NS0_21ShouldCreateDirectoryE_block_invoke()
{
  WebKit *v0;
  WebKit *v1;
  _BOOL8 HasContainer;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v0 = (WebKit *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 13, 1, 0, 0, 0);
  if (v0)
  {
    v1 = v0;
    HasContainer = WebKit::processHasContainer(v0);
    if (!HasContainer)
      v1 = (WebKit *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer), 1);
    v3 = (const void *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebKit"), 1);
    v4 = (uint64_t)v3;
    if (v3)
      CFRetain(v3);
    v5 = (const void *)qword_1ECE72BF0;
    qword_1ECE72BF0 = v4;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

void ___ZN6WebKit16WebsiteDataStore37tempDirectoryFileSystemRepresentationERKN3WTF6StringENS0_21ShouldCreateDirectoryE_block_invoke()
{
  WebKit *v0;
  WebKit *v1;
  _BOOL8 HasContainer;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v0 = (WebKit *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", NSTemporaryDirectory(), 1);
  if (v0)
  {
    v1 = v0;
    HasContainer = WebKit::processHasContainer(v0);
    if (!HasContainer)
      v1 = (WebKit *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer), 1);
    v3 = (const void *)-[WebKit URLByAppendingPathComponent:isDirectory:](v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebKit"), 1);
    v4 = (uint64_t)v3;
    if (v3)
      CFRetain(v3);
    v5 = (const void *)qword_1ECE72BE0;
    qword_1ECE72BE0 = v4;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

BOOL WebKit::processHasContainer(WebKit *this)
{
  _BOOL8 result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  int v4;
  _BOOL4 v5;
  WTF::StringImpl *v6;

    return WebKit::processHasContainer(void)::hasContainer != 0;
  WebKit::pathForProcessContainer((uint64_t *)&v6, this);
  v3 = v6;
  if (v6)
  {
    v4 = *(_DWORD *)v6;
    v5 = *((_DWORD *)v6 + 1) != 0;
    v6 = 0;
    if (v4 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 = v4 - 2;
  }
  else
  {
    v5 = 0;
  }
  result = v5;
  WebKit::processHasContainer(void)::hasContainer = v5;
  return result;
}

void WebKit::WebsiteDataStore::defaultMediaCacheDirectory(WebKit::WebsiteDataStore *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v2 = v5;
    v4 = v5;
    WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(&v4, 1);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v3);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void sub_196C89CCC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(_QWORD *a1, int a2)
{
  void *v4;
  const __CFString *v5;
  void *v6;

  if ((_MergedGlobals_84 & 1) == 0)
  {
    qword_1ECE72BE0 = 0;
    _MergedGlobals_84 = 1;
  }
  if (qword_1ECE72BD8 != -1)
    dispatch_once(&qword_1ECE72BD8, &__block_literal_global_193);
  v4 = (void *)qword_1ECE72BE0;
  if (*a1)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v6 = (void *)objc_msgSend(v4, "URLByAppendingPathComponent:isDirectory:", v5, 1);
  if (a2)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v6, 1, 0, 0);
  objc_msgSend((id)objc_msgSend(v6, "absoluteURL"), "path");
  JUMPOUT(0x19AEABCC8);
}

void sub_196C89E7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  uint64_t v10;

  if ((WTF *)(v10 + 16) != a9 && a9 != 0)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(_QWORD *a1, uint64_t a2, int a3)
{
  void *v5;
  const __CFString *v6;
  void *v7;

  if ((byte_1ECE72BD1 & 1) == 0)
  {
    qword_1ECE72BF0 = 0;
    byte_1ECE72BD1 = 1;
  }
  if (qword_1ECE72BE8 != -1)
    dispatch_once(&qword_1ECE72BE8, &__block_literal_global_198);
  v5 = (void *)qword_1ECE72BF0;
  if (*a1)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = (void *)objc_msgSend(v5, "URLByAppendingPathComponent:isDirectory:", v6, 1);
  if (a3)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v7, 1, 0, 0);
  objc_msgSend((id)objc_msgSend(v7, "absoluteURL"), "path");
  JUMPOUT(0x19AEABCC8);
}

void WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(_QWORD *a1, uint64_t a2, int a3)
{
  void *v5;
  const __CFString *v6;
  void *v7;

  if ((byte_1ECE72BD2 & 1) == 0)
  {
    qword_1ECE72C00 = 0;
    byte_1ECE72BD2 = 1;
  }
  if (qword_1ECE72BF8 != -1)
    dispatch_once(&qword_1ECE72BF8, &__block_literal_global_199);
  v5 = (void *)qword_1ECE72C00;
  if (*a1)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = (void *)objc_msgSend(v5, "URLByAppendingPathComponent:isDirectory:", v6, 1);
  if (a3)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v7, 1, 0, 0);
  objc_msgSend((id)objc_msgSend(v7, "absoluteURL"), "path");
  JUMPOUT(0x19AEABCC8);
}

void WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  CFTypeRef cf;
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  v5 = 0;
  WTF::StringView::createNSStringWithoutCopying((WTF::StringView *)v6);
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", cf, 1, 0, &v5) & 1) != 0)
  {
    WebKit::resolvePathForSandboxExtension(a3);
  }
  else
  {
    NSLog(CFSTR("could not create directory \"%@\" for future sandbox extension, error %@"), cf, v5);
    *a3 = 0;
  }
  if (cf)
    CFRelease(cf);
}

void sub_196C8A108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::stringByResolvingSymlinksInPath()
{
  const char *v0;
  void *v1;
  WTF *v3;
  char __s[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  WTF::StringView::utf8();
  if (v3)
    v0 = (char *)v3 + 16;
  else
    v0 = 0;
  realpath_DARWIN_EXTSN(v0, __s);
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, v1);
    else
      --*(_DWORD *)v3;
  }
  strlen(__s);
  return WTF::String::fromUTF8();
}

void sub_196C8A1E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::fastFree(a9, a2);
    else
      --*(_DWORD *)a9;
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit33LinkDecorationFilteringController13updateStringsEON3WTF17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  const __CFString *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  unsigned int v40;
  WTF *v41;
  unint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint8_t buf[8];
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v67 = 0;
  v68 = 0;
  if (a3)
  {
    v4 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Failed to request query parameters from WebPrivacy.", buf, 2u);
    }
  }
  else
  {
    v5 = (void *)objc_msgSend(a2, "rules");
    v53 = v3;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v64;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v64 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * v9);
          MEMORY[0x19AEABCC8](&v57, objc_msgSend(v10, "domain"));
          v54 = (WTF::StringImpl *)"http://";
          v55 = 8;
          result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v54, (uint64_t *)&v57, &v58);
          if (!v58)
          {
            __break(0xC471u);
            return result;
          }
          MEMORY[0x19AEABB0C](buf, &v58, 0);
          WebCore::RegistrableDomain::RegistrableDomain(&v62, (const WTF::URL *)buf);
          v13 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v58;
          v58 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v12);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v57;
          v57 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v12);
            else
              *(_DWORD *)v15 -= 2;
          }
          if (objc_msgSend((id)objc_msgSend(v10, "domain"), "hasPrefix:", CFSTR("http://")))
          {
            MEMORY[0x19AEABCC8](&v58, objc_msgSend(v10, "domain"));
            MEMORY[0x19AEABB0C](buf, &v58, 0);
            WebCore::RegistrableDomain::RegistrableDomain(&v54, (const WTF::URL *)buf);
            v17 = v54;
            v54 = 0;
            v18 = v62;
            v62 = v17;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
              {
                WTF::StringImpl::destroy(v18, v16);
                v19 = v54;
                v54 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                    WTF::StringImpl::destroy(v19, v16);
                  else
                    *(_DWORD *)v19 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v18 -= 2;
                v54 = 0;
              }
            }
            v20 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v16);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = v58;
            v58 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v16);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
          v22 = objc_opt_respondsToSelector();
          v23 = &stru_1E351F1B8;
          if ((v22 & 1) != 0)
            v23 = (const __CFString *)objc_msgSend(v10, "path");
          MEMORY[0x19AEABCC8](&v54, v23);
          MEMORY[0x19AEABCC8](&v58, objc_msgSend(v10, "queryParameter"));
          v25 = v62;
          v62 = 0;
          v26 = v54;
          v54 = 0;
          *(_QWORD *)buf = v25;
          v60 = v26;
          v27 = v58;
          v58 = 0;
          v61 = v27;
          if (HIDWORD(v68) == (_DWORD)v68)
          {
            WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v67, (unint64_t)buf);
          }
          else
          {
            v28 = HIDWORD(v68) + 1;
            v29 = (WTF::StringImpl **)(v67 + 24 * HIDWORD(v68));
            *(_QWORD *)buf = 0;
            *v29 = v25;
            v30 = v60;
            v60 = 0;
            v29[1] = v30;
            v31 = v61;
            v61 = 0;
            v29[2] = v31;
            HIDWORD(v68) = v28;
          }
          v32 = v61;
          v61 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v24);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = v60;
          v60 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v24);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v24);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = v58;
          v58 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v24);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = v54;
          v54 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v24);
            else
              *(_DWORD *)v36 -= 2;
          }
          v37 = v62;
          v62 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v24);
            else
              *(_DWORD *)v37 -= 2;
          }
          ++v9;
        }
        while (v7 != v9);
        v38 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
        v7 = v38;
      }
      while (v38);
    }
    v39 = (WTF::StringImpl **)(v53 + 8);
    v40 = *(_DWORD *)(v53 + 20);
    if (v40)
      WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(*v39, (WTF::StringImpl *)((char *)*v39 + 24 * v40));
    v41 = *v39;
    if (*v39)
    {
      *(_QWORD *)(v53 + 8) = 0;
      *(_DWORD *)(v53 + 16) = 0;
      WTF::fastFree(v41, v6);
    }
    *(_QWORD *)(v53 + 8) = v67;
    v43 = v68;
    v42 = HIDWORD(v68);
    v67 = 0;
    v68 = 0;
    *(_DWORD *)(v53 + 16) = v43;
    *(_DWORD *)(v53 + 20) = v42;
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v39, v42);
  }
  v54 = (WTF::StringImpl *)&v56;
  v55 = 1;
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer((uint64_t)buf, (uint64_t)&WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers);
  if (HIDWORD(qword_1ECE73530))
  {
    v44 = (uint64_t *)WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers;
    v45 = 8 * HIDWORD(qword_1ECE73530);
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      ++v44;
      v45 -= 8;
    }
    while (v45);
  }
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt((uint64_t)&WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers, &v54);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v47);
  if (HIDWORD(v60))
  {
    v49 = *(WTF::StringImpl **)buf;
    v50 = 8 * HIDWORD(v60);
    do
    {
      v51 = *(_QWORD *)v49;
      *(_QWORD *)v49 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      v49 = (WTF::StringImpl *)((char *)v49 + 8);
      v50 -= 8;
    }
    while (v50);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v48);
  return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v52);
}

void sub_196C8A7D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a29, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v4);
  v7 = *v3;
  *v3 = 0;
  *v6 = v7;
  v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  v9 = v3[2];
  v3[2] = 0;
  v6[2] = v9;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196C8AB98);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = (WTF::StringImpl **)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[2];
      v5[2] = 0;
      a3[2] = v8;
      v9 = v5[2];
      v5[2] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v5[1];
      v5[1] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > this)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 24 * this), (WTF::StringImpl *)(*(_QWORD *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(24 * this);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (WTF::StringImpl **)result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v5 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *v5;
        *v5 = 0;
        *v4 = v9;
        v10 = *v5;
        *v5 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        ++v4;
        ++v5;
        v8 -= 8;
      }
      while (v8);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)a1 = v5;
    v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_DWORD *)(a1 + 8) = v6;
  }
  v11 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v11;
  return a1;
}

WTF *WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  WTF *result;
  WTF *v5;
  WTF **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;

  v5 = (WTF *)(a1 + 16);
  result = *(WTF **)a1;
  if (result != v5)
  {
    if (result)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    *(_QWORD *)a1 = v5;
  }
  v6 = *(WTF ***)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v8 = a2[3];
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *v6;
        *v6 = 0;
        *(_QWORD *)v5 = v10;
        result = *v6;
        *v6 = 0;
        if (result)
          result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
        v5 = (WTF *)((char *)v5 + 8);
        ++v6;
        v9 -= 8;
      }
      while (v9);
    }
    v7 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v6;
    v7 = a2[2];
    a2[2] = 1;
  }
  *(_DWORD *)(a1 + 8) = v7;
  v11 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v11;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetInlineFillColor,void>::decode(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = IPC::ArgumentCoder<WebCore::DisplayList::Rotate,void>::decode(a1);
  if ((v2 & 0xFF00000000) != 0)
  {
    if (*a1)
      return v2 | 0x100000000;
    else
      return 0;
  }
  else
  {
    result = 0;
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(a1[3], v4);
        if (*a1)
          __break(1u);
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setInspectionForServiceWorkersAllowed(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v5);
  if (result && *(unsigned __int8 *)(result + 784) != a3)
  {
    *(_BYTE *)(result + 784) = a3;
    result = *(_QWORD *)(result + 768);
    if (result)
      return WebCore::SWServer::setInspectable();
  }
  return result;
}

void WebKit::NetworkResourceLoader::~NetworkResourceLoader(WebKit::NetworkResourceLoader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  const void *v7;
  WebKit::NetworkResourceLoader *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const void *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebKit::ServiceWorkerFetchTask *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  WebKit::NetworkCache::Cache *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int *v30;
  const void *v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  void *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  v3 = *((_QWORD *)this + 540);
  if (v3)
  {
    *((_QWORD *)this + 540) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = (WebCore::ResourceResponseBase *)*((_QWORD *)this + 617);
  *((_QWORD *)this + 617) = 0;
  if (v4)
    std::default_delete<WebCore::ResourceResponse>::operator()[abi:sn180100](v4, a2);
  v5 = (WTF *)*((_QWORD *)this + 614);
  if (v5)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (WTF::StringImpl *)*((unsigned int *)this + 1230));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 612);
  *((_QWORD *)this + 612) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)*((_QWORD *)this + 610);
  *((_QWORD *)this + 610) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (WebKit::NetworkResourceLoader *)*((_QWORD *)this + 609);
  if (v8 == (WebKit::NetworkResourceLoader *)((char *)this + 4848))
  {
    v9 = 4;
    v8 = (WebKit::NetworkResourceLoader *)((char *)this + 4848);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_16:
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 601);
  *((_QWORD *)this + 601) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 600);
  *((_QWORD *)this + 600) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  std::unique_ptr<WebCore::ContentFilter>::reset[abi:sn180100]((uint64_t *)this + 599, 0);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 4704, v12);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (const void *)*((_QWORD *)this + 581);
  *((_QWORD *)this + 581) = 0;
  if (v15)
    CFRelease(v15);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkResourceLoader *)((char *)this + 4408), v13);
  v17 = (unsigned int *)*((_QWORD *)this + 548);
  *((_QWORD *)this + 548) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
  }
  v20 = (WebKit::ServiceWorkerFetchTask *)*((_QWORD *)this + 547);
  *((_QWORD *)this + 547) = 0;
  if (v20)
    WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v20);
  if (*((_BYTE *)this + 4368))
  {
    v21 = (const void *)*((_QWORD *)this + 545);
    *((_QWORD *)this + 545) = 0;
    if (v21)
      CFRelease(v21);
  }
  v22 = *((_QWORD *)this + 542);
  *((_QWORD *)this + 542) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v23 = *((_QWORD *)this + 540);
  *((_QWORD *)this + 540) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)this + 538, 0);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 537, 0);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 535, 0);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 534, 0);
  v25 = (unsigned int *)*((_QWORD *)this + 533);
  *((_QWORD *)this + 533) = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v25, v24);
  v26 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 532);
  *((_QWORD *)this + 532) = 0;
  if (v26)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v26, (WTF::StringImpl *)v24);
  *((_QWORD *)this + 525) = off_1E34B3740;
  v27 = *((_QWORD *)this + 531);
  *((_QWORD *)this + 531) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  WebCore::TimerBase::~TimerBase((WebKit::NetworkResourceLoader *)((char *)this + 4200));
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 4160, v28);
  std::unique_ptr<WebKit::NetworkResourceLoader::SynchronousLoadData>::reset[abi:sn180100]((WTF::StringImpl **)this + 519, 0);
  v30 = (unsigned int *)*((_QWORD *)this + 517);
  *((_QWORD *)this + 517) = 0;
  if (v30)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v30, v29);
  v31 = (const void *)*((_QWORD *)this + 514);
  *((_QWORD *)this + 514) = 0;
  if (v31)
    CFRelease(v31);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkResourceLoader *)((char *)this + 3872), (WTF::StringImpl *)v29);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 483, 0);
  v33 = (_DWORD *)*((_QWORD *)this + 482);
  *((_QWORD *)this + 482) = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoader *)((char *)this + 80), v32);
  v35 = *((_QWORD *)this + 7);
  if (v35)
  {
    *(_QWORD *)(v35 + 8) = 0;
    v36 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v34);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkResourceLoader::~NetworkResourceLoader(this, a2);
  WTF::fastFree(v2, v3);
}

_DWORD *WebKit::NetworkResourceLoader::retrieveCacheEntry(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  _BOOL4 v20;
  WebKit::NetworkCache::Cache *v21;
  __int128 v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef v38;
  WebKit::NetworkCache::Entry *v39;
  CFTypeRef v40;
  WebCore::ResourceRequest *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  const WTF::StringImpl **v50;
  WebCore::ResourceRequest *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int isNull;
  unsigned __int8 *v58;
  unsigned int *v59;
  WebKit::NetworkCache::Cache *v60;
  int v61;
  unsigned int v62;
  void *v63;
  unsigned int *v64;
  WebKit::NetworkCache::Storage **v65;
  char v66;
  WTF::StringImpl *v67;
  WebKit::NetworkCache::Entry *v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  unsigned int *v72;
  WebKit::NetworkCache::Entry *v73;
  WTF *v74;
  void *v75;
  const WebCore::ResourceResponse *v76;
  unint64_t v77;
  char v78;
  WTF *v79;
  void *v80;
  _BOOL4 v81;
  _BOOL4 v82;
  int v83;
  WebCore::ResourceRequest *v84[2];
  __int128 v85;
  uint64_t v86;
  WebKit::NetworkCache::Entry *v87;
  WebKit::NetworkCache::Entry *v88;
  WebKit::NetworkCache::Entry *v89;
  _BYTE buf[22];
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  _BOOL4 v98;
  __int16 v99;
  int v100;
  __int16 v101;
  _BOOL4 v102;
  __int16 v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  char v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  CFTypeRef cf;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 10);
    v5 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v8 = *((_QWORD *)this + 379);
    v9 = *((_QWORD *)this + 519) != 0;
    v10 = *((unsigned __int8 *)this + 3072);
    v11 = *((unsigned __int8 *)this + 315) == 1;
    v12 = *((_BYTE *)this + 315) == 1 && *((_DWORD *)this + 833) == 0;
    *(_DWORD *)buf = 134220032;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    v91 = 2048;
    v92 = v5;
    v93 = 2048;
    v94 = v7;
    v95 = 2048;
    v96 = v8;
    v97 = 1024;
    v98 = v11;
    v99 = 1024;
    v100 = v10;
    v101 = 1024;
    v102 = v9;
    v103 = 1024;
    v104 = v12;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: isMainFrameLoad=%d", buf, 0x4Cu);
  }
  ++*((_DWORD *)this + 2);
  if (*((_BYTE *)this + 315) != 1)
    goto LABEL_6;
  if (*((_DWORD *)this + 833))
    goto LABEL_6;
  v46 = *((_QWORD *)this + 482);
  v47 = *(_QWORD *)(v46 + 72);
  *(_QWORD *)buf = *(_QWORD *)(v46 + 80);
  v48 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v47 + 208), buf);
  if (!v48)
    goto LABEL_6;
  v49 = (uint64_t **)(v48 + 512);
  v50 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url(a2);
  WebKit::PrefetchCache::take(v49, v50, v84);
  v51 = v84[0];
  if (v84[0])
  {
    v52 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v53 = *((_QWORD *)this + 10);
      v54 = *((_QWORD *)this + 11);
      v55 = *((_QWORD *)this + 12);
      v56 = *((_QWORD *)this + 379);
      v82 = *((unsigned __int8 *)this + 315) == 1;
      v83 = *((unsigned __int8 *)this + 3072);
      v81 = *((_QWORD *)this + 519) != 0;
      isNull = WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequest *)((char *)v51 + 272));
      *(_DWORD *)buf = 134220032;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v53;
      v91 = 2048;
      v92 = v54;
      v93 = 2048;
      v94 = v55;
      v95 = 2048;
      v96 = v56;
      v97 = 1024;
      v98 = v82;
      v99 = 1024;
      v100 = v83;
      v101 = 1024;
      v102 = v81;
      v103 = 1024;
      v104 = isNull ^ 1;
      _os_log_impl(&dword_196BCC000, v52, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: retrieved an entry from the prefetch cache (isRedirect=%d)", buf, 0x4Cu);
      v51 = v84[0];
    }
    if ((WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequest *)((char *)v51 + 272)) & 1) != 0)
    {
      v58 = (unsigned __int8 *)v84[0];
      v59 = (unsigned int *)*((_QWORD *)v84[0] + 33);
      *((_QWORD *)v84[0] + 33) = 0;
      v60 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 532);
      v61 = v58[256];
      do
        v62 = __ldaxr(v59);
      while (__stlxr(v62 + 1, v59));
      *(_QWORD *)buf = v59;
      WebKit::NetworkCache::Cache::makeEntry(v60, a2, (const WebCore::ResourceRequest *)v58, v61 != 0, (uint64_t *)buf, (uint64_t *)&v89);
      v64 = *(unsigned int **)buf;
      *(_QWORD *)buf = 0;
      if (v64)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v64, v63);
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
      WebKit::NetworkResourceLoader::retrieveCacheEntryInternal((uint64_t)this, (uint64_t *)&v89, (WebCore::ResourceRequestBase *)buf);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
      v65 = (WebKit::NetworkCache::Storage **)*((_QWORD *)this + 532);
      v66 = *((_BYTE *)v84[0] + 256);
      *(_QWORD *)buf = v59;
      v86 = 0;
      WebKit::NetworkCache::Cache::store(a2, v84[0], v65, v66, (uint64_t *)buf, &v86, (uint64_t *)&v87);
      v68 = v87;
      v87 = 0;
      if (v68)
      {
        WebKit::NetworkCache::Entry::~Entry(v68, v67);
        WTF::fastFree(v69, v70);
      }
      v71 = v86;
      v86 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      v72 = *(unsigned int **)buf;
      *(_QWORD *)buf = 0;
      if (v72)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v72, v67);
    }
    else
    {
      WebKit::NetworkCache::Cache::makeRedirectEntry(*((WebKit::NetworkCache::Cache **)this + 532), a2, v84[0], (WebCore::ResourceRequest *)((char *)v84[0] + 272), (uint64_t *)&v89);
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
      WebKit::NetworkResourceLoader::retrieveCacheEntryInternal((uint64_t)this, (uint64_t *)&v89, (WebCore::ResourceRequestBase *)buf);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
      v77 = WebKit::NetworkResourceLoader::validateCacheEntryForMaxAgeCapValidation(this, a2, v84[0], v76);
      WebKit::NetworkCache::Cache::storeRedirect(a2, v84[0], *((WebKit::NetworkCache::Cache **)this + 532), (WebCore::ResourceRequest *)((char *)v84[0] + 272), v77, v78, (uint64_t *)&v88);
      if (v88)
      {
        WebKit::NetworkCache::Entry::~Entry(v88, v67);
        WTF::fastFree(v79, v80);
      }
    }
    v73 = v89;
    v89 = 0;
    if (v73)
    {
      WebKit::NetworkCache::Entry::~Entry(v73, v67);
      WTF::fastFree(v74, v75);
    }
    v41 = v84[0];
    v84[0] = 0;
    if (v41)
      std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v84, v41);
  }
  else
  {
LABEL_6:
    v13 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((_QWORD *)this + 10);
      v15 = *((_QWORD *)this + 11);
      v16 = *((_QWORD *)this + 12);
      v17 = *((_QWORD *)this + 379);
      v18 = *((unsigned __int8 *)this + 315) == 1;
      v19 = *((unsigned __int8 *)this + 3072);
      v20 = *((_QWORD *)this + 519) != 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      v91 = 2048;
      v92 = v15;
      v93 = 2048;
      v94 = v16;
      v95 = 2048;
      v96 = v17;
      v97 = 1024;
      v98 = v18;
      v99 = 1024;
      v100 = v19;
      v101 = 1024;
      v102 = v20;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::retrieveCacheEntry: Checking the HTTP disk cache", buf, 0x46u);
    }
    v21 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 532);
    v22 = *((_OWORD *)this + 6);
    *(_OWORD *)v84 = *((_OWORD *)this + 5);
    v85 = v22;
    v23 = *((_WORD *)this + 1512);
    v24 = *((unsigned __int8 *)this + 3027);
    v25 = *((_WORD *)this + 1514);
    *(_QWORD *)buf = this;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this + 48);
    v26 = (unsigned int *)*((_QWORD *)this + 7);
    if (v26)
    {
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
    }
    *(_QWORD *)&buf[8] = v26;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[16], a2);
    v28 = WTF::fastMalloc((WTF *)0xE0);
    *(_QWORD *)v28 = off_1E34C0230;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)(v28 + 16) = v29;
    WTF::URL::URL(v28 + 24, (uint64_t *)&buf[16]);
    WTF::URL::URL(v28 + 64, (uint64_t *)((char *)&v98 + 2));
    *(_QWORD *)(v28 + 104) = v105;
    *(_QWORD *)(v28 + 112) = v106;
    v30 = *((_QWORD *)&v106 + 1);
    v106 = 0u;
    *(_QWORD *)(v28 + 120) = v30;
    v31 = v107;
    v107 = 0;
    *(_QWORD *)(v28 + 128) = v31;
    v32 = v108;
    v108 = 0;
    *(_QWORD *)(v28 + 136) = v32;
    v33 = v109;
    v109 = 0;
    *(_QWORD *)(v28 + 144) = v33;
    v34 = v110;
    v110 = 0;
    *(_QWORD *)(v28 + 152) = v34;
    v35 = v111;
    v111 = 0;
    *(_QWORD *)(v28 + 160) = v35;
    LODWORD(v34) = v112;
    *(_BYTE *)(v28 + 172) = v113;
    *(_DWORD *)(v28 + 168) = v34;
    *(_QWORD *)(v28 + 176) = v114;
    v36 = *((_QWORD *)&v114 + 1);
    v114 = 0u;
    *(_QWORD *)(v28 + 184) = v36;
    *(_QWORD *)(v28 + 192) = v115;
    v37 = v116;
    *(_BYTE *)(v28 + 208) = v117;
    *(_QWORD *)(v28 + 200) = v37;
    v38 = cf;
    v115 = 0;
    cf = 0;
    *(_QWORD *)(v28 + 216) = v38;
    v89 = (WebKit::NetworkCache::Entry *)v28;
    WebKit::NetworkCache::Cache::retrieve(v21, a2, (const WebCore::ResourceRequest *)v84, v23, v24 != 0, v25, (WTF::MonotonicTime *)&v89);
    v39 = v89;
    v89 = 0;
    if (v39)
      (*(void (**)(WebKit::NetworkCache::Entry *))(*(_QWORD *)v39 + 8))(v39);
    v40 = cf;
    cf = 0;
    if (v40)
      CFRelease(v40);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[16]);
    v42 = *(unsigned int **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v42)
    {
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v42);
        WTF::fastFree((WTF *)v42, v41);
      }
    }
  }
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)this + 2, v41);
}

uint64_t WebKit::NetworkLoadChecker::isSameOrigin(WebKit::NetworkLoadChecker *this, const WTF::URL *a2, const WebCore::SecurityOrigin *a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((WTF::URL::protocolIs() & 1) != 0)
    return 1;
  v5 = WTF::URL::protocolIs();
  if (!a3 || (v5 & 1) != 0)
    return 1;
  v6 = *((_QWORD *)this + 144);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    WebCore::EmptyOriginAccessPatterns::singleton((WebCore::EmptyOriginAccessPatterns *)v5);
  return WebCore::SecurityOrigin::canRequest();
}

void WebKit::NetworkResourceLoader::startWithServiceWorker(WebKit::NetworkResourceLoader *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  WebKit::ServiceWorkerFetchTask *v11;
  WebKit::ServiceWorkerFetchTask *v12;
  CFTypeRef v13;
  WebCore::ContentFilter **v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WebCore::ContentFilter *v19;
  const WTF::URL *v20;
  WTF::StringImpl *v21;
  char v22;
  CFTypeRef v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  CFTypeRef v33[24];
  CFTypeRef cf;
  _BYTE buf[12];
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  uint64_t v51;
  char v52;
  CFTypeRef v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    v5 = *((_QWORD *)this + 12);
    v6 = *((_QWORD *)this + 379);
    v7 = *((unsigned __int8 *)this + 315) == 1;
    v8 = *((unsigned __int8 *)this + 3072);
    v9 = *((_QWORD *)this + 519) != 0;
    *(_DWORD *)buf = 134219776;
    *(_QWORD *)&buf[4] = this;
    v36 = 2048;
    v37 = v3;
    v38 = 2048;
    v39 = v4;
    v40 = 2048;
    v41 = v5;
    v42 = 2048;
    v43 = v6;
    v44 = 1024;
    v45 = v7;
    v46 = 1024;
    v47 = v8;
    v48 = 1024;
    v49 = v9;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startWithServiceWorker:", buf, 0x46u);
  }
  WebCore::ResourceRequest::ResourceRequest(v33, (WebKit::NetworkResourceLoader *)((char *)this + 168));
  if (*((_BYTE *)this + 315) != 1)
    goto LABEL_4;
  WebCore::ContentFilter::create();
  v14 = (WebCore::ContentFilter **)((char *)this + 4792);
  v15 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  std::unique_ptr<WebCore::ContentFilter>::reset[abi:sn180100]((uint64_t *)this + 599, v15);
  v16 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEADA8C]();
    WTF::fastFree(v17, v18);
  }
  v19 = *v14;
  v20 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v33);
  WebCore::ContentFilter::startFilteringMainResource(v19, v20);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  v53 = 0;
  v54 = 0;
  v52 = v52 & 0xF1 | 4;
  v22 = WebCore::ContentFilter::continueAfterWillSendRequest();
  v23 = v53;
  v53 = 0;
  if (v23)
    CFRelease(v23);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v21);
  if ((v22 & 1) != 0)
  {
LABEL_4:
    WebKit::NetworkConnectionToWebProcess::createFetchTask((uint64_t *)buf, *((WebKit::NetworkConnectionToWebProcess **)this + 482), this, (const WebCore::ResourceRequest *)v33);
    v10 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v11 = (WebKit::ServiceWorkerFetchTask *)*((_QWORD *)this + 547);
    *((_QWORD *)this + 547) = v10;
    if (v11)
    {
      WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v11);
      v12 = *(WebKit::ServiceWorkerFetchTask **)buf;
      *(_QWORD *)buf = 0;
      if (v12)
        WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v12);
      v10 = *((_QWORD *)this + 547);
    }
    if (v10)
    {
      v24 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *((_QWORD *)this + 10);
        v26 = *((_QWORD *)this + 11);
        v27 = *((_QWORD *)this + 12);
        v28 = *((_QWORD *)this + 379);
        v29 = *((unsigned __int8 *)this + 315) == 1;
        v30 = *((unsigned __int8 *)this + 3072);
        v31 = *((_QWORD *)this + 519) != 0;
        v32 = *(_QWORD *)(v10 + 40);
        *(_DWORD *)buf = 134220032;
        *(_QWORD *)&buf[4] = this;
        v36 = 2048;
        v37 = v25;
        v38 = 2048;
        v39 = v26;
        v40 = 2048;
        v41 = v27;
        v42 = 2048;
        v43 = v28;
        v44 = 1024;
        v45 = v29;
        v46 = 1024;
        v47 = v30;
        v48 = 1024;
        v49 = v31;
        v50 = 2048;
        v51 = v32;
        _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startWithServiceWorker: Created a ServiceWorkerFetchTask (fetchIdentifier=%llu)", buf, 0x50u);
      }
    }
    else if (!WebKit::NetworkResourceLoader::abortIfServiceWorkersOnly(this))
    {
      WebKit::NetworkResourceLoader::startRequest(this, (const WebCore::ResourceRequest *)v33);
    }
  }
  else
  {
    WebCore::ContentFilter::stopFilteringMainResource(*v14);
  }
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v33);
}

void WebKit::NetworkConnectionToWebProcess::createFetchTask(uint64_t *__return_ptr a1@<X8>, WebKit::NetworkConnectionToWebProcess *this@<X0>, WebKit::NetworkResourceLoader *a3@<X1>, const WebCore::ResourceRequest *a4@<X2>)
{
  WebKit::WebSWServerConnection *v7;

  v7 = (WebKit::WebSWServerConnection *)WebKit::NetworkConnectionToWebProcess::swConnection(this);
  if (v7)
    WebKit::WebSWServerConnection::createFetchTask(v7, a3, a4, a1);
  else
    *a1 = 0;
}

uint64_t WebKit::NetworkConnectionToWebProcess::swConnection(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 26);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    WebKit::NetworkConnectionToWebProcess::establishSWServerConnection(this);
    v2 = *((_QWORD *)this + 26);
    if (v2)
      return *(_QWORD *)(v2 + 8);
  }
  return v2;
}

void WebKit::WebSWServerConnection::createFetchTask(WebKit::WebSWServerConnection *this@<X0>, WebKit::NetworkResourceLoader *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v8;
  WTF::URL *v9;
  char canHandleScheme;
  uint64_t v11;
  const WTF::URL *v12;
  WebCore::SWServerRegistration *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *Registration;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  const WebCore::ResourceRequest *v37;
  int v38;
  WebCore::SecurityOriginData *v39;
  const WTF::URL *v40;
  WebCore::SWServerRegistration *v41;
  NSObject *v42;
  WebCore::SWServerRegistration *v43;
  _BYTE buf[12];
  __int16 v45;
  uint64_t v46;
  int v47;
  CFTypeRef cf;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 3744) == 1)
  {
    if (*((_BYTE *)a2 + 315) == 3)
    {
      v33 = *((unsigned __int8 *)a2 + 3072);
      v34 = v33 > 0xA;
      v35 = (1 << v33) & 0x498;
      if (!v34 && v35 != 0)
      {
        v37 = (const WebCore::ResourceRequest *)WebKit::WebSWServerConnection::session(this);
        WebKit::ServiceWorkerFetchTask::fromNavigationPreloader(this, a2, v37, a4);
        if (*a4)
          return;
      }
    }
    goto LABEL_5;
  }
  v8 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
  ++*v8;
  v9 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkResourceLoader *)((char *)a2 + 168));
  WTF::URL::protocol(v9);
  canHandleScheme = WebCore::SWServer::canHandleScheme();
  WTF::RefCounted<WebCore::SWServer>::deref(v8);
  if ((canHandleScheme & 1) == 0)
    goto LABEL_5;
  if (*((_OWORD *)a2 + 194) != 0)
  {
    if (*((_BYTE *)a2 + 374))
    {
      v39 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url(a3);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v39, v40);
    }
    else
    {
      v11 = *((_QWORD *)a2 + 14) + 8;
      buf[0] = 0;
      v47 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v11);
    }
    v12 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    WebCore::SWServer::Connection::doRegistrationMatching(this, (const WebCore::SecurityOriginData *)buf, v12);
    v13 = v43;
    if (v43)
    {
      v14 = *((_QWORD *)v43 + 2);
      WebKit::WebSWServerConnection::controlClient((uint64_t)this, (uint64_t)a2 + 80, v43, a3, *(_QWORD *)(*((_QWORD *)a2 + 482) + 256));
      WebKit::NetworkResourceLoader::setServiceWorkerRegistration(a2, v43);
      v41 = v43;
      v43 = 0;
      WTF::RefCounted<WebCore::SWServerRegistration>::deref(v41);
    }
    else
    {
      v14 = 0;
      *a4 = 0;
    }
    if (v47 != -1)
      ((void (*)(WebCore::SWServerRegistration **, _BYTE *))off_1E3505E48[v47])(&v43, buf);
    if (!v13)
      return;
    goto LABEL_14;
  }
  if (!*((_BYTE *)a2 + 3760) || (v38 = *((unsigned __int8 *)a2 + 3072), v38 == 10) || v38 == 4)
  {
LABEL_5:
    *a4 = 0;
    return;
  }
  v14 = *((_QWORD *)a2 + 469);
LABEL_14:
  v15 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
  ++*v15;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  v17 = (uint64_t)Registration;
  if (Registration)
  {
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v15);
    v18 = *(_QWORD *)(v17 + 264);
    if (v18)
    {
      ++*(_DWORD *)v18;
      if (*(_BYTE *)(v18 + 376))
      {
        if (WebCore::SWServerRegistration::shouldSoftUpdate())
          WebCore::SWServerRegistration::scheduleSoftUpdate();
      }
      else
      {
        if (!*(_BYTE *)(v18 + 377))
        {
          if (*(_DWORD *)(v18 + 244))
            v22 = 0;
          else
            v22 = *(_BYTE *)(v18 + 160) == 4;
          WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a3);
          v23 = *((_QWORD *)this + 4);
          v24 = *(_QWORD *)(v18 + 104);
          v25 = WebKit::WebSWServerConnection::session(this);
          v19 = WTF::fastMalloc((WTF *)0x128);
          WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(v19, (uint64_t)this, (uint64_t)a2, (uint64_t)buf, v23, v24, v17, v25, v22);
          v26 = cf;
          cf = 0;
          if (v26)
            CFRelease(v26);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
          v27 = (unsigned int *)*((_QWORD *)this + 1);
          if (v27)
          {
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 + 1, v27));
          }
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v19 + 8), v19);
          v29 = *(unsigned int **)(v19 + 8);
          if (v29)
          {
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 + 1, v29));
          }
          v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v31 = &off_1E3505F08;
          v31[1] = v27;
          v31[2] = this;
          v31[3] = v29;
          *(_QWORD *)buf = v31;
          WebCore::SWServerWorker::whenActivated();
          v32 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          goto LABEL_20;
        }
        v20 = qword_1ECE71848;
        if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
        {
          v21 = *(_QWORD *)(v18 + 104);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = this;
          v45 = 2048;
          v46 = v21;
          _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: DidNotHandle because worker %llu has some timeouts", buf, 0x16u);
        }
      }
      v19 = 0;
LABEL_20:
      *a4 = v19;
      WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v18);
LABEL_21:
      WTF::RefCounted<WebCore::SWServerRegistration>::deref((_DWORD *)v17);
      return;
    }
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v15);
  }
  v42 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    v45 = 2048;
    v46 = v14;
    _os_log_error_impl(&dword_196BCC000, v42, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: DidNotHandle because no active worker for registration %llu", buf, 0x16u);
  }
  *a4 = 0;
  if (v17)
    goto LABEL_21;
}

BOOL WebKit::NetworkResourceLoader::abortIfServiceWorkersOnly(WebKit::NetworkResourceLoader *this)
{
  int v1;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v12;
  WebKit::NetworkResourceLoader *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BOOL4 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned __int8 *)this + 3744);
  if (v1 == 2)
  {
    v4 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
    {
      v5 = *((_QWORD *)this + 10);
      v6 = *((_QWORD *)this + 11);
      v7 = *((_QWORD *)this + 12);
      v8 = *((_QWORD *)this + 379);
      v9 = *((unsigned __int8 *)this + 315) == 1;
      v10 = *((unsigned __int8 *)this + 3072);
      v11 = *((_QWORD *)this + 519) != 0;
      v12 = 134219776;
      v13 = this;
      v14 = 2048;
      v15 = v5;
      v16 = 2048;
      v17 = v6;
      v18 = 2048;
      v19 = v7;
      v20 = 2048;
      v21 = v8;
      v22 = 1024;
      v23 = v9;
      v24 = 1024;
      v25 = v10;
      v26 = 1024;
      v27 = v11;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::abortIfServiceWorkersOnly: Aborting load because the service worker did not handle the load and serviceWorkerMode only allows service workers", (uint8_t *)&v12, 0x46u);
    }
    IPC::MessageSender::send<Messages::WebResourceLoader::ServiceWorkerDidNotHandle,WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)this + 16, *((_QWORD *)this + 379));
    WebKit::NetworkResourceLoader::abort(this);
  }
  return v1 == 2;
}

void WebKit::NetworkResourceLoader::startRequest(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2)
{
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  WTF *v23;
  CFTypeRef v24;
  const void *v25;
  WTF *v26;
  _BYTE buf[12];
  __int16 v28;
  _BYTE cf[10];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  _BOOL4 v42;
  CFTypeRef v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 4176;
  v5 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 10);
    v7 = *((_QWORD *)this + 11);
    v8 = *((_QWORD *)this + 12);
    v9 = *((_QWORD *)this + 379);
    v10 = *((unsigned __int8 *)this + 315) == 1;
    v11 = *((unsigned __int8 *)this + 3072);
    v12 = *((_QWORD *)this + 519) != 0;
    v13 = *((_QWORD *)this + 538) != 0;
    *(_DWORD *)buf = 134220032;
    *(_QWORD *)&buf[4] = this;
    v28 = 2048;
    *(_QWORD *)cf = v6;
    *(_WORD *)&cf[8] = 2048;
    v30 = v7;
    v31 = 2048;
    v32 = v8;
    v33 = 2048;
    v34 = v9;
    v35 = 1024;
    v36 = v10;
    v37 = 1024;
    v38 = v11;
    v39 = 1024;
    v40 = v12;
    v41 = 1024;
    v42 = v13;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::startRequest: hasNetworkLoadChecker=%d", buf, 0x4Cu);
  }
  v14 = *((_BYTE *)this + 315) == 1 && *((_DWORD *)this + 833) == 0;
  WebKit::NetworkConnectionToWebProcess::startTrackingResourceLoad(*((_QWORD **)this + 482), *((_QWORD *)this + 11), *((_QWORD *)this + 379), v14, (uint64_t)buf);
  v15 = (_QWORD *)((char *)this + 4344);
  if (v4[192] == v30)
  {
    if (!v4[192])
      goto LABEL_18;
    *v15 = *(_QWORD *)buf;
    *((_BYTE *)this + 4352) = buf[8];
    v16 = *(_QWORD *)&cf[2];
    if (*(_QWORD *)&cf[2])
      CFRetain(*(CFTypeRef *)&cf[2]);
    v17 = (const void *)*((_QWORD *)this + 545);
    *((_QWORD *)this + 545) = v16;
    if (v17)
      CFRelease(v17);
  }
  else if (v4[192])
  {
    v18 = (const void *)*((_QWORD *)this + 545);
    *((_QWORD *)this + 545) = 0;
    if (v18)
      CFRelease(v18);
    v4[192] = 0;
  }
  else
  {
    *v15 = *(_QWORD *)buf;
    *((_BYTE *)this + 4352) = buf[8];
    v25 = *(const void **)&cf[2];
    *((_QWORD *)this + 545) = *(_QWORD *)&cf[2];
    if (v25)
      CFRetain(v25);
    v4[192] = 1;
  }
  if ((_BYTE)v30)
  {
    v19 = *(const void **)&cf[2];
    *(_QWORD *)&cf[2] = 0;
    if (v19)
      CFRelease(v19);
  }
LABEL_18:
  *v4 = 1;
  v20 = *((_QWORD *)this + 538);
  if (v20)
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this + 48);
    v21 = (unsigned int *)*((_QWORD *)this + 7);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v23 = &off_1E34C01C8;
    *((_QWORD *)v23 + 1) = this;
    *((_QWORD *)v23 + 2) = v21;
    v26 = v23;
    WebKit::NetworkLoadChecker::check(v20, (WebCore::ResourceRequestBase *)buf, (uint64_t)this + 24, &v26);
    if (v26)
      (*(void (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
    v24 = v43;
    v43 = 0;
    if (v24)
      CFRelease(v24);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  }
  else if (WebKit::NetworkResourceLoader::canUseCache(this, a2))
  {
    WebKit::NetworkResourceLoader::retrieveCacheEntry(this, (WebKit::NetworkResourceLoader *)((char *)this + 168));
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
    WebKit::NetworkResourceLoader::startNetworkLoad((uint64_t)this, (uint64_t)buf, 1);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf);
  }
}

void WebKit::NetworkLoadChecker::checkRequest(uint64_t a1, uint64_t a2, uint64_t a3, WTF **a4)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::SecurityOrigin *v11;
  WebCore::SecurityOrigin *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  WTF::StringImpl *v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  WebCore::SecurityOrigin *v25;
  unsigned int v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  CFTypeRef v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  CFTypeRef v57;
  void *v58;
  void *v59;
  void *v60;
  CFTypeRef v61;
  void *v62;
  WTF *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  CFTypeRef v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  WTF *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  WebCore::SecurityOrigin *v77;
  unsigned int v78;
  unsigned int *v79;
  WTF *v80[2];
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  CFTypeRef v100;
  WTF::StringImpl *v101;
  _OWORD v102[12];
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  CFTypeRef cf;
  unsigned int *v126[5];
  _QWORD v127[6];
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  CFTypeRef v140;
  int *v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  char v146;

  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v106, (const WebCore::ResourceRequest *)a2);
  v8 = (unsigned int *)WebKit::NetworkLoadChecker::contentSecurityPolicy((WebCore::SecurityOrigin **)a1);
  if (!v8)
  {
LABEL_23:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    v25 = *(WebCore::SecurityOrigin **)a1;
    if (*(_QWORD *)a1)
    {
      do
        v26 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v26 + 1, (unsigned int *)v25));
    }
    v27 = *a4;
    *a4 = 0;
    v80[0] = v25;
    v80[1] = v27;
    v28 = v106;
    v29 = v109;
    v106 = 0;
    v81 = v28;
    v82 = v107;
    v83 = v108;
    LODWORD(v107) = v107 & 0xFFFFFFFE;
    v109 = 0;
    v84 = v29;
    v85 = v110;
    v86 = v111;
    LODWORD(v110) = v110 & 0xFFFFFFFE;
    v30 = v114;
    v87 = v112;
    v31 = v113;
    v113 = 0u;
    v88 = v31;
    v114 = 0;
    v89 = v30;
    v32 = v115;
    v115 = 0;
    v90 = v32;
    *(_QWORD *)&v31 = v116;
    v116 = 0;
    v91 = v31;
    v33 = v117;
    v117 = 0;
    v92 = v33;
    *(_QWORD *)&v31 = v118;
    v118 = 0;
    v93 = v31;
    v95 = v120;
    v94 = v119;
    v34 = v121;
    v121 = 0u;
    v96 = v34;
    v99 = v124;
    v97 = v122;
    v98 = v123;
    v35 = cf;
    v122 = 0;
    cf = 0;
    v100 = v35;
    v36 = WTF::fastMalloc((WTF *)0xE0);
    *(_QWORD *)v36 = off_1E34BE100;
    *(WTF **)(v36 + 8) = v80[0];
    v37 = v80[1];
    *(_OWORD *)v80 = 0u;
    *(_QWORD *)(v36 + 16) = v37;
    WTF::URL::URL(v36 + 24, &v81);
    WTF::URL::URL(v36 + 64, &v84);
    *(_QWORD *)(v36 + 104) = v87;
    *(_QWORD *)(v36 + 112) = v88;
    v38 = *((_QWORD *)&v88 + 1);
    v88 = 0u;
    *(_QWORD *)(v36 + 120) = v38;
    v39 = v89;
    v89 = 0;
    *(_QWORD *)(v36 + 128) = v39;
    v40 = v90;
    v90 = 0;
    *(_QWORD *)(v36 + 136) = v40;
    v41 = v91;
    v91 = 0;
    *(_QWORD *)(v36 + 144) = v41;
    v42 = v92;
    v92 = 0;
    *(_QWORD *)(v36 + 152) = v42;
    v43 = v93;
    v93 = 0;
    *(_QWORD *)(v36 + 160) = v43;
    LODWORD(v42) = v94;
    *(_BYTE *)(v36 + 172) = v95;
    *(_DWORD *)(v36 + 168) = v42;
    *(_QWORD *)(v36 + 176) = v96;
    v44 = *((_QWORD *)&v96 + 1);
    v96 = 0u;
    *(_QWORD *)(v36 + 184) = v44;
    *(_QWORD *)(v36 + 192) = v97;
    v45 = v98;
    *(_BYTE *)(v36 + 208) = v99;
    *(_QWORD *)(v36 + 200) = v45;
    v46 = v100;
    v97 = 0;
    v100 = 0;
    *(_QWORD *)(v36 + 216) = v46;
    if (*(_BYTE *)(a1 + 528) && *(_BYTE *)(a1 + 432) && *(_BYTE *)(a1 + 17))
    {
      v75 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 240);
      v76 = *(_QWORD *)(a1 + 424);
      v101 = (WTF::StringImpl *)a1;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      v77 = *(WebCore::SecurityOrigin **)a1;
      if (*(_QWORD *)a1)
      {
        do
          v78 = __ldaxr((unsigned int *)v77);
        while (__stlxr(v78 + 1, (unsigned int *)v77));
      }
      *(_QWORD *)&v102[0] = v77;
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v102 + 8, a2);
      v104 = v36;
      WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>::CompletionHandler<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void>((uint64_t *)v126, (uint64_t *)&v101);
      WebKit::NetworkContentRuleListManager::contentExtensionsBackend(v75, v76, v126);
      v79 = v126[0];
      v126[0] = 0;
      if (v79)
        (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
      WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0::~$_0(&v101);
    }
    else
    {
      v142 = 0;
      v143 = 0uLL;
      v144 = 0uLL;
      v145 = 0uLL;
      WTF::URL::URL((uint64_t)v126, (uint64_t *)a2);
      WTF::URL::URL((uint64_t)v127, (uint64_t *)(a2 + 40));
      v47 = *(_QWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 88) = 0u;
      v128 = v48;
      *(_QWORD *)&v48 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v127[5] = v47;
      v129 = v48;
      v49 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      v130 = v49;
      v50 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 120) = 0;
      v131 = v50;
      v51 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a2 + 128) = 0;
      v132 = v51;
      v52 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      v133 = v52;
      LODWORD(v51) = *(_DWORD *)(a2 + 144);
      v135 = *(_BYTE *)(a2 + 148);
      v134 = v51;
      v53 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 152) = 0u;
      v136 = v53;
      v54 = *(_QWORD *)(a2 + 168);
      v55 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 168) = 0;
      v139 = *(_BYTE *)(a2 + 184);
      v137 = v54;
      v138 = v55;
      v56 = *(const void **)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      v140 = v56;
      v141 = &v142;
      std::__variant_detail::__alt<0ul,WebKit::NetworkLoadChecker::ContentExtensionResult>::__alt[abi:sn180100]<WebKit::NetworkLoadChecker::ContentExtensionResult>((uint64_t)&v101, (uint64_t)v126);
      v103 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v36 + 16))(v36, &v101);
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      if (v103 != -1)
        (*(&off_1E34BDFD8 + v103))((int)&v146, (WebCore::ResourceRequestBase *)&v101);
      v103 = -1;
      v57 = v140;
      v140 = 0;
      if (v57)
        CFRelease(v57);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v126);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v145, v58);
      WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v144, v59);
      WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v143, v60);
    }
    v61 = v100;
    v100 = 0;
    if (v61)
      CFRelease(v61);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v81);
    v63 = v80[1];
    v80[1] = 0;
    if (v63)
      (*(void (**)(WTF *))(*(_QWORD *)v63 + 8))(v63);
    v64 = (unsigned int *)v80[0];
    v80[0] = 0;
    if (v64)
    {
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v64);
        WTF::fastFree((WTF *)v64, v62);
      }
    }
    goto LABEL_39;
  }
  v9 = v8;
  do
    v10 = __ldaxr(v8);
  while (__stlxr(v10 + 1, v8));
  if (*(_QWORD *)(a1 + 464))
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded();
  v11 = WebKit::NetworkLoadChecker::contentSecurityPolicy((WebCore::SecurityOrigin **)a1);
  v12 = v11;
  if (v11)
  {
    do
      v13 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v13 + 1, (unsigned int *)v11));
  }
  *((_QWORD *)v11 + 2) = a3;
  v14 = *(_QWORD *)(a1 + 1152);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    v72 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v15 + 120));
    v73 = *(WTF::StringImpl **)v72;
    if (*(_QWORD *)v72)
      *(_DWORD *)v73 += 2;
    v101 = v73;
    v74 = *(_OWORD *)(v72 + 24);
    v102[0] = *(_OWORD *)(v72 + 8);
    v102[1] = v74;
  }
  else
  {
    v101 = 0;
    WTF::URL::invalidate((WTF::URL *)&v101);
  }
  v17 = *(unsigned __int8 *)(a1 + 16);
  v18 = 1;
  if (v17 <= 0x13)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      v19 = WebCore::ContentSecurityPolicy::allowConnectToSource();
LABEL_14:
      v18 = v19;
      goto LABEL_15;
    }
    if (v17 == 13)
    {
      v18 = 1;
      if (*(_BYTE *)(a2 + 147) == 6)
      {
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
        if (!WebCore::ContentSecurityPolicy::allowScriptFromSource())
          v18 = 0;
      }
      goto LABEL_15;
    }
    if (((1 << v17) & 0x8C804) != 0)
    {
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
      v19 = WebCore::ContentSecurityPolicy::allowWorkerFromSource();
      goto LABEL_14;
    }
  }
LABEL_15:
  v20 = v101;
  v101 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  *((_QWORD *)v12 + 2) = 0;
  if (!atomic_load((unsigned int *)v12))
    goto LABEL_70;
  do
    v22 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v22 - 1, (unsigned int *)v12));
  v23 = atomic_load(v9);
  if (v18)
  {
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x196C8CEC8);
    }
    do
      v24 = __ldaxr(v9);
    while (__stlxr(v24 - 1, v9));
    goto LABEL_23;
  }
  if (!v23)
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x196C8CEA8);
  }
  do
    v68 = __ldaxr(v9);
  while (__stlxr(v68 - 1, v9));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v101;
  WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler((uint64_t)&v101, a1, v101);
  v70 = *a4;
  *a4 = 0;
  (*(void (**)(WTF *, WTF::StringImpl **))(*(_QWORD *)v70 + 16))(v70, &v101);
  (*(void (**)(WTF *))(*(_QWORD *)v70 + 8))(v70);
  if (v105 != -1)
    (*(&off_1E34BDF98 + v105))((int)v80, (WebCore::ResourceRequestBase *)&v101);
  v105 = -1;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v71);
    else
      *(_DWORD *)v69 -= 2;
  }
LABEL_39:
  v67 = cf;
  cf = 0;
  if (v67)
    CFRelease(v67);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v106);
}

WebCore::SecurityOrigin *WebKit::NetworkLoadChecker::contentSecurityPolicy(WebCore::SecurityOrigin **this)
{
  WebCore::SecurityOrigin *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::SecurityOrigin *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::SecurityOrigin *v16;
  WebCore::SecurityOrigin *v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];

  if (!this[57] && *((_BYTE *)this + 288))
  {
    WebCore::SecurityOrigin::toRawString(this[30]);
    MEMORY[0x19AEABB0C](v21, &v20, 0);
    v3 = this[144];
    if (!v3)
      goto LABEL_34;
    v4 = *((_QWORD *)v3 + 1);
    if (v4)
      v5 = v4 - 48;
    else
      v5 = 0;
    while (1)
    {
      v6 = WTF::fastMalloc((WTF *)0xF0);
      v7 = (WebCore::SecurityOrigin *)v6;
      if (v5)
        v8 = v5 + 64;
      else
        v8 = 0;
      MEMORY[0x19AEB0E58](v6, v21, 0, v8);
      v10 = (uint64_t)this[57];
      this[57] = v7;
      if (v10)
        WebCore::ContentSecurityPolicy::operator delete(v10, 0xF0uLL);
      v11 = v21[0];
      v21[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (*((_BYTE *)this + 288))
        break;
      __break(1u);
LABEL_34:
      v5 = 0;
    }
    v13 = this[65];
    if (v13)
      *(_DWORD *)v13 += 2;
    v21[0] = v13;
    WebCore::ContentSecurityPolicy::didReceiveHeaders();
    v15 = v21[0];
    v21[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = this[25];
    if (v16 && *((_DWORD *)v16 + 1))
    {
      v17 = this[57];
      if (*((_BYTE *)v17 + 112))
      {
        WTF::String::operator=((WTF::StringImpl **)v17 + 9, (WTF::StringImpl *)(this + 25));
        v18 = *((_OWORD *)this + 14);
        *((_OWORD *)v17 + 5) = *((_OWORD *)this + 13);
        *((_OWORD *)v17 + 6) = v18;
      }
      else
      {
        *(_DWORD *)v16 += 2;
        *((_QWORD *)v17 + 9) = v16;
        v19 = *((_OWORD *)this + 14);
        *((_OWORD *)v17 + 5) = *((_OWORD *)this + 13);
        *((_OWORD *)v17 + 6) = v19;
        *((_BYTE *)v17 + 112) = 1;
      }
    }
  }
  return this[57];
}

uint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::destruct(*(WTF::StringImpl **)a1, (void *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 152 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ContentExtensions::ModifyHeadersAction>::destruct(*(_QWORD *)a1, (char *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

BOOL WebKit::NetworkResourceLoader::canUseCache(WebKit::NetworkResourceLoader *this, const WebCore::ResourceRequest *a2)
{
  return *((_QWORD *)this + 532)
      && (*(_BYTE *)(WebCore::ResourceRequestBase::url(a2) + 8) & 2) != 0
      && WebCore::ResourceRequestBase::cachePolicy((WebKit::NetworkResourceLoader *)((char *)this + 168)) != 4;
}

void WebKit::NetworkLoadChecker::checkCORSRequest(uint64_t a1, WebCore::ResourceRequestBase *this, const void **a3)
{
  int v6;
  WebCore *v7;
  const WebCore::HTTPHeaderMap *v8;
  unsigned int *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  const void *v12;
  _BYTE v13[656];
  unsigned int v14;
  char v15;

  v6 = *(unsigned __int8 *)(a1 + 512);
  if (!*(_BYTE *)(a1 + 512))
  {
    if (!*(_BYTE *)(a1 + 449))
      goto LABEL_12;
    v7 = (WebCore *)WebCore::ResourceRequestBase::httpMethod(this);
    if ((WebCore::isSimpleCrossOriginAccessRequest(v7, (const WTF::String *)(a1 + 96), v8) & 1) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  if (v6 == 2)
  {
LABEL_7:
    v9 = *(unsigned int **)(a1 + 240);
    if (v9)
    {
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    WebCore::updateRequestForAccessControl();
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v9, v11);
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v13, (uint64_t)this);
    v14 = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(const void *, _BYTE *))(*(_QWORD *)v12 + 16))(v12, v13);
    (*(void (**)(const void *))(*(_QWORD *)v12 + 8))(v12);
    if (v14 != -1)
      (*(&off_1E34BDF98 + v14))((int)&v15, (WebCore::ResourceRequestBase *)v13);
    return;
  }
  if (v6 == 1)
LABEL_12:
    WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(a1, (uint64_t)this, a3);
}

uint64_t WebCore::GraphicsLayer::setAppliesPageScale(WebCore::GraphicsLayer *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)((char *)this + 177);
  result = (uint64_t)this + 177;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 2048;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFF7FF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::LocalFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canShowMIMEType(WebKit::WebLocalFrameLoaderClient *this, const WTF::String *a2)
{
  return 1;
}

uint64_t WebKit::WebStorageNamespaceProvider::createLocalStorageNamespace@<X0>(int a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34F2360;
  *(_BYTE *)(result + 12) = 1;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = a1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *a2 = result;
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setRemovedOnCompletion(uint64_t this, char a2)
{
  *(_BYTE *)(this + 81) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setAutoreverses(uint64_t this, char a2)
{
  *(_BYTE *)(this + 80) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setRepeatCount(uint64_t this, float a2)
{
  *(float *)(this + 56) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setKeyTimes(uint64_t a1, const void **a2)
{
  return WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 104, a2);
}

uint64_t WebKit::PlatformCAAnimationRemote::setFillMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void (*)(void),void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::volatilityTimerFired(WebKit::RemoteLayerBackingStoreCollection *this)
{
  return (*(uint64_t (**)(WebKit::RemoteLayerBackingStoreCollection *))(*(_QWORD *)this + 72))(this);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1358;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t IPC::Connection::SyncMessageState::dispatchMessages(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  WTF *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Decoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  IPC::Decoder *v22;
  WTF *v23;
  void *v24;
  IPC::Decoder *v25[2];
  uint64_t v26;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 3);
  if (__ldaxr((unsigned __int8 *)(result + 3)))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEABB3C](result + 3);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *(_QWORD *)(v3 + 16);
  if (v6 == *(_QWORD *)(v3 + 24))
  {
    v7 = *(_QWORD *)(v3 + 64);
    v8 = *(_DWORD *)(v3 + 72);
    v9 = *(_OWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 72) = 0;
    *(_OWORD *)(v3 + 16) = v9;
    v10 = *(WTF **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = v7;
    *(_DWORD *)(v3 + 40) = v8;
    result = (uint64_t)WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((unsigned __int8 ***)v10 + 3 * v6, (unsigned __int8 ***)v10 + 3 * v6);
    if (v10)
      result = WTF::fastFree(v10, v11);
  }
  else
  {
    while (1)
    {
      v21 = *(_QWORD *)(v3 + 48);
      if (v21 == *(_QWORD *)(v3 + 56))
        break;
      v13 = 3 * v21;
      v14 = *(_QWORD *)(v3 + 64) + 8 * v13;
      v15 = *(_OWORD *)v14;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_OWORD *)v25 = v15;
      v26 = *(_QWORD *)(v14 + 16);
      WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((unsigned __int8 ***)(*(_QWORD *)(v3 + 64) + 8 * v13), (unsigned __int8 ***)(*(_QWORD *)(v3 + 64) + 8 * v13 + 24));
      v16 = *(_QWORD *)(v3 + 48);
      if (v16 == *(unsigned int *)(v3 + 72) - 1)
        v17 = 0;
      else
        v17 = v16 + 1;
      *(_QWORD *)(v3 + 48) = v17;
      WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(v3 + 16, (uint64_t *)v25);
      v18 = v25[1];
      v25[1] = 0;
      if (v18)
      {
        IPC::Decoder::~Decoder(v18);
        WTF::fastFree(v19, v20);
      }
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v25);
    }
  }
  v12 = __ldxr(v4);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  while (*(_QWORD *)(v3 + 16) != *(_QWORD *)(v3 + 24))
  {
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::takeFirst((uint64_t)v25, v3 + 16);
    if (*a2)
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *((unsigned __int16 *)v25[1] + 25), *((_QWORD *)v25[1] + 8));
    IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch((uint64_t **)v25);
    v22 = v25[1];
    v25[1] = 0;
    if (v22)
    {
      IPC::Decoder::~Decoder(v22);
      WTF::fastFree(v23, v24);
    }
    result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v25);
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::prepareImageBufferSetsForDisplay@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  unsigned int *v6;
  double v7;
  uint64_t v9;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::RemoteRenderingBackendProxy *v22;
  unsigned __int8 *v23;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  uint64_t v30;
  WebKit::RemoteRenderingBackendProxy *v31;
  int v32;
  WTF::ApproximateTime *v33;
  unsigned int *v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  const void *v64;
  CFTypeRef v65;
  uint64_t *v66;
  uint64_t v67;
  CFTypeRef v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  WTF::ApproximateTime *v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  size_t v93;
  size_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unsigned int v108;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  IPC::Encoder *v119;
  int v120;
  void *v121;
  IPC::Encoder *v122;
  WTF *v123;
  void *v124;
  NSObject *v125;
  const char *v126;
  uint64_t v127;
  _BYTE *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  int v142;
  unsigned int v144;
  WTF *v145;
  void *v146;
  unsigned int v147;
  WTF *v148;
  void *v149;
  WTF *v150;
  void *v151;
  NSObject *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  WTF *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  unsigned __int8 v168;
  _BYTE v169[3];
  IPC::StreamClientConnection *v170;
  unsigned int *v171;
  uint64_t *v172[2];
  CFTypeRef cf;
  unsigned int *v174;
  unint64_t v175;
  CFTypeRef v176;
  char v177;
  char v178;
  _BYTE buf[24];
  const char *v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v9)
  {
    v165 = 0;
    if (v9 >= 0x6666667)
    {
      __break(0xC471u);
      goto LABEL_225;
    }
    v6 = result;
    v11 = 40 * v9;
    v12 = WTF::fastMalloc((WTF *)(40 * v9));
    LODWORD(v165) = (v11 & 0xFFFFFFF8) / 0x28;
    v164 = v12;
    v13 = *(_DWORD *)(a2 + 12);
    if (v13)
    {
      v14 = v12;
      v159 = a3;
      v15 = 0;
      v16 = 0;
      a3 = *(_QWORD *)a2;
      v17 = *(_QWORD *)a2 + 40 * v13;
      v162 = v17;
      v163 = v12;
      v160 = (uint64_t *)v6;
      while (1)
      {
        v18 = *(_QWORD *)a3;
        if ((*(_BYTE *)(*(_QWORD *)a3 + 64) & 1) != 0)
          v16 = 1;
        v19 = *((_QWORD *)v6 + 25);
        *(_WORD *)(v18 + 64) = 0;
        *(_QWORD *)(v18 + 56) = v19;
        v20 = *(_QWORD *)a3;
        v21 = *(_QWORD *)(*(_QWORD *)a3 + 32);
        if (!v21)
          goto LABEL_24;
        v22 = *(WebKit::RemoteRenderingBackendProxy **)(v21 + 8);
        if (!v22)
          goto LABEL_24;
        WebKit::RemoteRenderingBackendProxy::connection(v22, (unsigned int **)&v170);
        if (!v170)
          goto LABEL_24;
        if (*(_BYTE *)(v20 + 96))
          break;
LABEL_11:
        *(_BYTE *)(v20 + 96) = 0;
        v23 = (unsigned __int8 *)(v20 + 97);
        if (__ldaxr((unsigned __int8 *)(v20 + 97)))
        {
          __clrex();
LABEL_13:
          MEMORY[0x19AEABB3C](v20 + 97);
          goto LABEL_14;
        }
        if (__stxr(1u, v23))
          goto LABEL_13;
LABEL_14:
        if (!*(_QWORD *)(v20 + 112))
        {
          v70 = (unsigned int *)v170;
          if (v170)
          {
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 + 1, v70));
            v72 = *(unsigned int **)(v20 + 112);
            *(_QWORD *)(v20 + 112) = v70;
            if (v72)
            {
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
              {
                atomic_store(1u, v72);
                IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v72);
                WTF::fastFree(v150, v151);
              }
            }
          }
          else
          {
            *(_QWORD *)(v20 + 112) = 0;
          }
          v75 = *(_QWORD *)(v20 + 112);
          v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 8) + 224);
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 48))(v76);
          IPC::StreamClientConnection::addWorkQueueMessageReceiver(v75, 0x56u, v76, v20, *(_QWORD *)(v20 + 24));
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 56))(v76);
          v17 = v162;
          v14 = v163;
        }
        *(_BYTE *)(v20 + 120) = 1;
        v25 = __ldxr(v23);
        if (v25 == 1)
        {
          if (!__stlxr(0, v23))
            goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 97));
LABEL_20:
        v26 = (unsigned int *)v170;
        v170 = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v26);
            WTF::fastFree(v145, v146);
          }
        }
LABEL_24:
        v166 = *(uint64_t **)(*(_QWORD *)a3 + 24);
        WebCore::Region::Region((WebCore::Region *)&v167, (const WebCore::Region *)(a3 + 8));
        v169[0] = *(_BYTE *)(a3 + 32);
        *(_WORD *)&v169[1] = *(_WORD *)(a3 + 33);
        v4 = v14 + 40 * v15;
        *(_QWORD *)v4 = v166;
        WebCore::Region::Region();
        v29 = *(_WORD *)v169;
        *(_BYTE *)(v4 + 34) = v169[2];
        *(_WORD *)(v4 + 32) = v29;
        ++v15;
        WebCore::Region::~Region((WebCore::Region *)&v167);
        a3 += 40;
        if (a3 == v17)
        {
          HIDWORD(v165) = v15;
          a3 = v159;
          *(_QWORD *)v159 = 0;
          *(_QWORD *)(v159 + 8) = 0;
          if (!(_BYTE)v16)
            goto LABEL_87;
          v166 = &v164;
          WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)buf, (WebKit::RemoteRenderingBackendProxy *)v6, (uint64_t *)&v166, *((_QWORD *)v6 + 7));
          if ((_DWORD)v180)
          {
            WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(v159, (WTF *)HIDWORD(v165));
            v93 = *(unsigned int *)(v159 + 12);
            if ((_DWORD)v93)
              bzero(*(void **)v159, v93);
          }
          else
          {
            v155 = *(_QWORD *)&buf[8];
            v156 = *(_QWORD *)&buf[16];
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            v157 = *(WTF **)v159;
            if (*(_QWORD *)v159)
            {
              *(_QWORD *)v159 = 0;
              *(_DWORD *)(v159 + 8) = 0;
              WTF::fastFree(v157, (void *)v93);
            }
            *(_QWORD *)v159 = v155;
            *(_QWORD *)(v159 + 8) = v156;
          }
          if ((_DWORD)v180 != -1)
            ((void (*)(uint64_t **, _BYTE *))off_1E34E3568[v180])(&v166, buf);
          return WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v164, (void *)v93);
        }
      }
      v5 = (uint64_t **)(v20 + 68);
      v30 = *(_QWORD *)(v20 + 32);
      v161 = v16;
      if (!v30)
      {
        v58 = v20 + 80;
        v59 = 0;
        v57 = *(unsigned __int8 *)(v20 + 89);
LABEL_64:
        v60 = *(_QWORD *)(v20 + 40);
        v61 = *(_BYTE *)(v20 + 90);
        v62 = *(_DWORD *)(v20 + 76);
        v63 = *(_BYTE *)(v20 + 88);
        v174 = *(unsigned int **)(v20 + 68);
        LODWORD(v175) = v62;
        v64 = *(const void **)(v20 + 80);
        v176 = v64;
        if (v64)
          CFRetain(v64);
        v177 = v63;
        v178 = v61;
        WebCore::ImageBuffer::backendParameters();
        WebCore::ImageBufferBackend::calculateBaseTransform();
        v65 = cf;
        cf = 0;
        if (v65)
          CFRelease(v65);
        v66 = *v5;
        v172[0] = 0;
        v172[1] = v66;
        v67 = WTF::fastMalloc((WTF *)0xF20);
        WebKit::RemoteDisplayListRecorderProxy::RemoteDisplayListRecorderProxy(v67, v59, v60, v58, v57 != 0);
        v68 = v176;
        v176 = 0;
        if (v68)
          CFRelease(v68);
        v69 = *(_QWORD *)(v20 + 48);
        *(_QWORD *)(v20 + 48) = v67;
        v6 = (unsigned int *)v160;
        v17 = v162;
        v14 = v163;
        v16 = v161;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        goto LABEL_11;
      }
      v31 = *(WebKit::RemoteRenderingBackendProxy **)(v30 + 8);
      if (!v31
        || (v32 = *(_DWORD *)(v20 + 76),
            v6 = (unsigned int *)*(unsigned __int8 *)(v20 + 88),
            v33 = WebKit::RemoteRenderingBackendProxy::connection(v31, &v171),
            (v34 = v171) == 0))
      {
LABEL_62:
        v56 = *(_QWORD *)(v20 + 32);
        v57 = *(unsigned __int8 *)(v20 + 89);
        v58 = v20 + 80;
        if (v56)
          v59 = *(_QWORD *)(v56 + 8);
        else
          v59 = 0;
        goto LABEL_64;
      }
      v35 = *(_QWORD *)(v20 + 24);
      WTF::ApproximateTime::now(v33);
      v7 = v36 + 15.0;
      if (*((_QWORD *)v34 + 6) != v35)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v34 + 14), buf, v36 + 15.0);
        if (!buf[16])
          goto LABEL_201;
        v95 = *(_QWORD *)buf;
        v96 = *(_QWORD *)&buf[8];
        v97 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v98 = v97 - *(_QWORD *)buf;
        if (v97 < *(_QWORD *)buf)
        {
          v100 = 0;
          v99 = *(_QWORD *)&buf[8];
        }
        else
        {
          v99 = 0;
          if (v98 > 0xFFFFFFFFFFFFFFFDLL)
          {
            v100 = 0;
          }
          else
          {
            v100 = 0;
            if (v98 + 2 <= *(_QWORD *)&buf[8])
            {
              *(_WORD *)(*(_QWORD *)buf + v98) = 2822;
              v99 = v96;
              v100 = v98 + 2;
            }
          }
        }
        v101 = (_QWORD *)((v95 + v100 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v101 >= v95 + v100)
        {
          v102 = (char *)v101 - v95;
          v4 = 17;
          if ((unint64_t)v101 - v95 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_159;
          v100 = (unint64_t)(v102 + 8);
          if ((unint64_t)(v102 + 8) > v99)
            goto LABEL_159;
          *v101 = v35;
        }
        if (!v99)
        {
          LODWORD(v4) = 17;
          goto LABEL_159;
        }
        v103 = (*((_QWORD *)v34 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v104 = *((_QWORD *)v34 + 7);
        if (v103 + 16 >= v104)
          v103 = 0;
        if (v100 <= 0x10)
          v100 = 16;
        v105 = v103 + v100;
        if (v104 <= v105)
          v106 = 0;
        else
          v106 = v105;
        *((_QWORD *)v34 + 9) = v106;
        v107 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v34 + 8) + 16) + 128);
        do
          v77 = __ldaxr(v107);
        while (__stlxr(v106, v107));
        v108 = v34[27];
        if (v77 == 0x80000000 || v108 != 0)
        {
          v144 = v108 + 1;
          v34[27] = v144;
          if (v144 >= v34[26])
          {
            if (*((_BYTE *)v34 + 96))
              MEMORY[0x19AEBA1A0](v34[21]);
            v34[27] = 0;
          }
        }
        *((_QWORD *)v34 + 6) = v35;
      }
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v34 + 14), &v174, v7);
      if ((_BYTE)v176)
      {
        *(_QWORD *)buf = v174;
        *(_QWORD *)&buf[8] = v175;
        *(_QWORD *)&buf[16] = 0;
        v37 = ((unint64_t)v174 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v38 = v37 >= (unint64_t)v174;
        v39 = v37 - (_QWORD)v174;
        if (v38)
        {
          if (v39 > 0xFFFFFFFFFFFFFFFDLL || v39 + 2 > v175)
          {
            *(_QWORD *)&buf[8] = 0;
          }
          else
          {
            *(_WORD *)((char *)v174 + v39) = 1096;
            *(_QWORD *)&buf[16] = v39 + 2;
          }
        }
        IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, (_DWORD *)(v20 + 68));
        v41 = *(_QWORD *)&buf[8];
        v42 = *(_QWORD *)&buf[16];
        if (*(_QWORD *)&buf[16] >= *(_QWORD *)&buf[8])
        {
          v41 = 0;
          *(_QWORD *)&buf[8] = 0;
          v43 = *(_QWORD *)buf;
        }
        else
        {
          v43 = *(_QWORD *)buf;
          *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = *(_BYTE *)(v20 + 89);
          *(_QWORD *)&buf[16] = ++v42;
        }
        v44 = (_DWORD *)((v43 + v42 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v44 >= v43 + v42)
        {
          v45 = (char *)v44 - v43;
          if ((unint64_t)v44 - v43 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v45 + 4) > v41)
          {
            *(_QWORD *)&buf[8] = 0;
          }
          else
          {
            *v44 = v32;
            *(_QWORD *)&buf[16] = v45 + 4;
          }
        }
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)buf, (CFTypeRef *)(v20 + 80));
        v46 = *(_QWORD *)&buf[16];
        if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
        {
          v47 = *(_QWORD *)&buf[16] + 1;
          *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = (_BYTE)v6;
          *(_QWORD *)&buf[16] = v46 + 1;
          if (*(_QWORD *)&buf[8])
          {
            v48 = *((_QWORD *)v34 + 8);
            v49 = (*((_QWORD *)v34 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v50 = *((_QWORD *)v34 + 7);
            if (v49 + 16 >= v50)
              v49 = 0;
            if (v47 <= 0x10)
              v47 = 16;
            v51 = v49 + v47;
            if (v50 <= v51)
              v51 = 0;
            *((_QWORD *)v34 + 9) = v51;
            v52 = (unint64_t *)(*(_QWORD *)(v48 + 16) + 128);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v51, v52));
            if (v53 == 0x80000000 || v34[27])
            {
              if (*((_BYTE *)v34 + 96))
                MEMORY[0x19AEBA1A0](v34[21]);
              v34[27] = 0;
            }
LABEL_58:
            v171 = 0;
            do
            {
              v54 = __ldaxr(v34);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v34));
            if (!v55)
            {
              atomic_store(1u, v34);
              IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v34);
              WTF::fastFree(v148, v149);
            }
            goto LABEL_62;
          }
        }
        v9 = v176;
        if (!(_BYTE)v176)
          goto LABEL_225;
        v110 = ((unint64_t)v174 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v111 = v110 - (_QWORD)v174;
        if (v110 < (unint64_t)v174)
        {
          v112 = 0;
        }
        else
        {
          v112 = 0;
          if (v111 <= 0xFFFFFFFFFFFFFFFDLL && v111 + 2 <= v175)
          {
            *(_WORD *)((char *)v174 + v111) = 2821;
            v112 = v111 + 2;
          }
        }
        v113 = *((_QWORD *)v34 + 8);
        v114 = (*((_QWORD *)v34 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v115 = *((_QWORD *)v34 + 7);
        if (v114 + 16 >= v115)
          v114 = 0;
        if (v112 <= 0x10)
          v112 = 16;
        v116 = v114 + v112;
        if (v115 <= v116)
          v116 = 0;
        *((_QWORD *)v34 + 9) = v116;
        v117 = (unint64_t *)(*(_QWORD *)(v113 + 16) + 128);
        do
          __ldaxr(v117);
        while (__stlxr(v116, v117));
        v34[27] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v172, (uint64_t **)v34 + 1);
        v158 = v172[0];
        v118 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v118 = 1096;
        *(_QWORD *)(v118 + 8) = v35;
        *(_QWORD *)(v118 + 528) = v118 + 16;
        *(_QWORD *)(v118 + 536) = v118 + 16;
        *(_OWORD *)(v118 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v118 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v118);
        *(_QWORD *)buf = v118;
        v119 = (IPC::Encoder *)v118;
        IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v118, (int *)(v20 + 68));
        LOBYTE(v118) = *(_BYTE *)(v20 + 89);
        *IPC::Encoder::grow(v119, 1uLL, 1) = v118;
        *(_DWORD *)IPC::Encoder::grow(v119, 4uLL, 4) = v32;
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v119, (CFTypeRef *)(v20 + 80));
        *IPC::Encoder::grow(v119, 1uLL, 1) = (char)v6;
        v120 = IPC::Connection::sendMessageImpl((uint64_t)v158, (uint64_t *)buf, 1, 0);
        LODWORD(v4) = v120;
        v122 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v122)
        {
          IPC::Encoder::~Encoder(v122, v121);
          WTF::fastFree(v123, v124);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v172);
        if (!(_DWORD)v4)
          goto LABEL_58;
LABEL_159:
        v125 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v126 = IPC::errorAsString(v4);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteImageBufferSet_UpdateConfiguration";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v126;
          _os_log_impl(&dword_196BCC000, v125, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferSetProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v127 = *(_QWORD *)(v20 + 32);
        if (v127)
        {
          v128 = *(_BYTE **)(v127 + 8);
          if (v128)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v128);
        }
        goto LABEL_58;
      }
LABEL_201:
      LODWORD(v4) = 15;
      goto LABEL_159;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_87:
    v172[0] = &v164;
    v5 = (uint64_t **)*((_QWORD *)v6 + 7);
    v78 = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)v6, &v174);
    v4 = (uint64_t)v174;
    if (v174)
    {
      WTF::ApproximateTime::now(v78);
      v7 = v79 + 15.0;
      if (*(uint64_t ***)(v4 + 48) == v5)
      {
        while (1)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v166, v7);
          if (!v168)
            break;
          *(_QWORD *)buf = v166;
          *(_QWORD *)&buf[8] = v167;
          *(_QWORD *)&buf[16] = 0;
          v80 = ((unint64_t)v166 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v38 = v80 >= (unint64_t)v166;
          v81 = v80 - (_QWORD)v166;
          if (v38)
          {
            if (v81 > 0xFFFFFFFFFFFFFFFDLL || v81 + 2 > v167)
            {
              *(_QWORD *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)((char *)v166 + v81) = 1315;
              *(_QWORD *)&buf[16] = v81 + 2;
            }
          }
          IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t *)buf, (uint64_t)v172[0]);
          if (*(_QWORD *)&buf[8])
          {
            v83 = *(_QWORD *)&buf[16];
            v84 = *(_QWORD *)(v4 + 64);
            v85 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v86 = *(_QWORD *)(v4 + 56);
            if (v85 + 16 >= v86)
              v85 = 0;
            if (*(_QWORD *)&buf[16] <= 0x10uLL)
              v83 = 16;
            v87 = v85 + v83;
            if (v86 <= v87)
              v88 = 0;
            else
              v88 = v87;
            *(_QWORD *)(v4 + 72) = v88;
            v89 = (unint64_t *)(*(_QWORD *)(v84 + 16) + 128);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v88, v89));
            if (v90 == 0x80000000 || *(_DWORD *)(v4 + 108))
            {
              if (*(_BYTE *)(v4 + 96))
                MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
              *(_DWORD *)(v4 + 108) = 0;
            }
            goto LABEL_109;
          }
          v9 = v168;
          if (v168)
          {
            IPC::StreamClientConnection::sendProcessOutOfStreamMessage(v4, (unint64_t)v166, v167);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(v4 + 8));
            v135 = IPC::Connection::send<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplay>(*(uint64_t *)buf, (uint64_t *)v172, (uint64_t)v5);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
            if (!v135)
              goto LABEL_109;
            goto LABEL_205;
          }
LABEL_225:
          __break(1u);
LABEL_226:
          v132 = 0;
          v131 = v3;
LABEL_169:
          v133 = (_QWORD *)((v9 + v132 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v133 >= v9 + v132)
          {
            v134 = (char *)v133 - v9;
            v135 = 17;
            if ((unint64_t)v133 - v9 > 0xFFFFFFFFFFFFFFF7)
              goto LABEL_205;
            v132 = (unint64_t)(v134 + 8);
            if ((unint64_t)(v134 + 8) > v131)
              goto LABEL_205;
            *v133 = v5;
          }
          if (!v131)
          {
            v135 = 17;
            goto LABEL_205;
          }
          v136 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v137 = *(_QWORD *)(v4 + 56);
          if (v136 + 16 >= v137)
            v136 = 0;
          if (v132 <= 0x10)
            v132 = 16;
          v138 = v136 + v132;
          if (v137 <= v138)
            v139 = 0;
          else
            v139 = v138;
          *(_QWORD *)(v4 + 72) = v139;
          v140 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v139, v140));
          v142 = *(_DWORD *)(v4 + 108);
          if (v141 == 0x80000000 || v142 != 0)
          {
            v147 = v142 + 1;
            *(_DWORD *)(v4 + 108) = v147;
            if (v147 >= *(_DWORD *)(v4 + 104))
            {
              if (*(_BYTE *)(v4 + 96))
                MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
              *(_DWORD *)(v4 + 108) = 0;
            }
          }
          *(_QWORD *)(v4 + 48) = v5;
        }
      }
      else
      {
        IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, buf, v79 + 15.0);
        if (buf[16])
        {
          v9 = *(_QWORD *)buf;
          v3 = *(_QWORD *)&buf[8];
          v129 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v130 = v129 - *(_QWORD *)buf;
          if (v129 < *(_QWORD *)buf)
            goto LABEL_226;
          v131 = 0;
          if (v130 > 0xFFFFFFFFFFFFFFFDLL)
          {
            v132 = 0;
          }
          else
          {
            v132 = 0;
            if (v130 + 2 <= *(_QWORD *)&buf[8])
            {
              *(_WORD *)(*(_QWORD *)buf + v130) = 2822;
              v131 = v3;
              v132 = v130 + 2;
            }
          }
          goto LABEL_169;
        }
      }
      v135 = 15;
LABEL_205:
      v152 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v153 = *((_QWORD *)v6 + 7);
        v154 = IPC::errorAsString(v135);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v153;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "RemoteRenderingBackend_PrepareImageBufferSetsForDisplay";
        *(_WORD *)&buf[22] = 2082;
        v180 = v154;
        _os_log_impl(&dword_196BCC000, v152, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v6);
LABEL_109:
      v174 = 0;
      do
      {
        v91 = __ldaxr((unsigned int *)v4);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, (unsigned int *)v4));
      if (!v92)
      {
        atomic_store(1u, (unsigned int *)v4);
        *(_QWORD *)buf = v4;
        WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
      }
    }
    WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a3, (WTF *)HIDWORD(v165));
    v94 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v94)
      memset(*(void **)a3, 1, v94);
    return WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v164, (void *)v93);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void IPC::Connection::addWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12[8];
  uint64_t v13;
  char v14;

  if (a5)
  {
    v13 = a5;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    LOBYTE(v13) = 0;
  }
  v12[0] = a2;
  v12[1] = 1;
  v14 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E351E9C8;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  v9[1] = a3;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a4 + 16));
  v9[2] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue(a1, v9, v12);
  v11 = v9;
  IPC::MessageReceiveQueueMap::add((uint64_t *)(a1 + 144), (uint64_t *)&v11, v12);
  v10 = (uint64_t)v11;
  v11 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
}

void IPC::Connection::addMessageReceiver(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  char v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12[8];
  uint64_t v13;
  char v14;

  if (a5)
  {
    v13 = a5;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    LOBYTE(v13) = 0;
  }
  v12[0] = a4;
  v12[1] = 1;
  v14 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E351EA18;
  v9[1] = a2;
  v9[2] = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue(a1, v9, v12);
  v11 = v9;
  IPC::MessageReceiveQueueMap::add((uint64_t *)(a1 + 144), (uint64_t *)&v11, v12);
  v10 = (uint64_t)v11;
  v11 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
}

uint64_t IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue(uint64_t result, void *a2, unsigned __int8 *a3)
{
  unsigned __int8 v3;
  uint64_t v6;
  unint64_t *v7;
  unsigned __int8 *v8;
  int v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  IPC::Decoder **v20;
  IPC::Decoder **v21;
  uint64_t v22;
  uint64_t v23;
  IPC::Decoder **v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v3 = atomic_load((unsigned __int8 *)(result + 33));
  if ((v3 & 1) != 0)
  {
    v6 = result;
    v7 = *(unint64_t **)(result + 16);
    if (!v7)
      goto LABEL_11;
    *(_QWORD *)&v26 = result;
    *((_QWORD *)&v26 + 1) = a3;
    *(_QWORD *)&v27 = a2;
    v8 = (unsigned __int8 *)v7 + 3;
    if (__ldaxr((unsigned __int8 *)v7 + 3))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
LABEL_6:
      IPC::Connection::SyncMessageState::enqueueMatchingMessages(IPC::Connection&,IPC::MessageReceiveQueue &,IPC::ReceiverMatcher const&)::$_0::operator()((uint64_t)&v26, v7 + 2);
      result = (uint64_t)IPC::Connection::SyncMessageState::enqueueMatchingMessages(IPC::Connection&,IPC::MessageReceiveQueue &,IPC::ReceiverMatcher const&)::$_0::operator()((uint64_t)&v26, v7 + 6);
      v10 = __ldxr(v8);
      if (v10 == 1)
      {
        if (!__stlxr(0, v8))
        {
LABEL_11:
          v11 = 0uLL;
          v26 = 0u;
          v27 = 0u;
          v12 = *(_QWORD *)(v6 + 112);
          v13 = *(_QWORD *)(v6 + 120);
          if (v12 == v13)
          {
            v14 = 0;
            v15 = 0;
            LODWORD(v16) = *(_DWORD *)(v6 + 136);
            v17 = *(_QWORD *)(v6 + 112);
          }
          else
          {
            do
            {
              v18 = *(_QWORD *)(v6 + 128) + 8 * v12;
              if (!a3[1])
                goto LABEL_42;
              v19 = *(unsigned __int16 *)(*(_QWORD *)v18 + 50);
              if (v19 >= 0xE98)
                v19 = 3736;
              if (*a3 != LOBYTE((&IPC::Detail::messageDescriptions)[3 * v19 + 2])
                || a3[16] && *((_QWORD *)a3 + 1) != *(_QWORD *)(*(_QWORD *)v18 + 64))
              {
                result = (uint64_t)WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append((uint64_t *)&v26, (uint64_t *)(*(_QWORD *)(v6 + 128) + 8 * v12));
              }
              else
              {
LABEL_42:
                result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6, v18);
              }
              v16 = *(unsigned int *)(v6 + 136);
              v12 += v16 + 1;
              do
                v12 -= v16;
              while (v12 >= v16);
            }
            while (v13 != v12);
            v17 = *(_QWORD *)(v6 + 112);
            v12 = *(_QWORD *)(v6 + 120);
            v11 = v26;
            v15 = v27;
            v14 = DWORD2(v27);
          }
          *(_OWORD *)(v6 + 112) = v11;
          *(_QWORD *)&v26 = v17;
          *((_QWORD *)&v26 + 1) = v12;
          v20 = *(IPC::Decoder ***)(v6 + 128);
          *(_QWORD *)(v6 + 128) = v15;
          *(_QWORD *)&v27 = v20;
          *(_DWORD *)(v6 + 136) = v14;
          DWORD2(v27) = v16;
          if (v17 > v12)
          {
            if (v12)
            {
              v23 = 8 * v12;
              do
              {
                result = (uint64_t)std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v20++, 0);
                v23 -= 8;
              }
              while (v23);
              v20 = (IPC::Decoder **)v27;
              v17 = v26;
              LODWORD(v16) = DWORD2(v27);
            }
            if (v17 != v16)
            {
              v24 = &v20[v17];
              v25 = 8 * v16 - 8 * v17;
              do
              {
                result = (uint64_t)std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v24++, 0);
                v25 -= 8;
              }
              while (v25);
            }
          }
          else
          {
            if (v17 == v12)
              goto LABEL_27;
            v21 = &v20[v17];
            v22 = 8 * v12 - 8 * v17;
            do
            {
              result = (uint64_t)std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v21++, 0);
              v22 -= 8;
            }
            while (v22);
          }
          v20 = (IPC::Decoder **)v27;
LABEL_27:
          if (v20)
          {
            *(_QWORD *)&v27 = 0;
            DWORD2(v27) = 0;
            return WTF::fastFree((WTF *)v20, a2);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)((char *)v7 + 3));
      goto LABEL_11;
    }
    MEMORY[0x19AEABB3C]((char *)v7 + 3);
    goto LABEL_6;
  }
  return result;
}

uint64_t *IPC::MessageReceiveQueueMap::add(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  int v6;
  char v7;

  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  v6 = 1;
  result = IPC::MessageReceiveQueueMap::addImpl(a1, (uint64_t)&v5, a3);
  if (v6 != -1)
    return (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v6])(&v7, &v5);
  return result;
}

uint64_t *IPC::MessageReceiveQueueMap::addImpl(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _BYTE v7[31];
  char v8;

  if (!a3[1])
    return (uint64_t *)std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,void>((uint64_t)(a1 + 2), a2);
  v3 = *a3;
  v8 = *a3;
  if (!a3[16])
    return WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>(a1 + 1, &v8, a2, (uint64_t)v7);
  v4 = *((_QWORD *)a3 + 1);
  v6[0] = v3;
  v6[1] = v4;
  return WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>(a1, (unsigned __int8 *)v6, a2, (uint64_t)v7);
}

uint64_t *WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (unsigned __int8 *)(v8 + 24 * v14);
  v16 = *v15;
  if (*v15)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(_DWORD *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 24 * v27;
        goto LABEL_12;
      }
      if (v16 == 255)
        v25 = v15;
      v14 = (v14 + v26) & v10;
      v15 = (unsigned __int8 *)(v8 + 24 * v14);
      v16 = *v15;
      ++v26;
    }
    while (*v15);
    if (v25)
    {
      *v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_DWORD *)v25 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      LOBYTE(v11) = *a2;
      v15 = v25;
    }
  }
  *v15 = v11;
  result = (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v15 + 8), a3);
  v17 = *v6;
  if (*v6)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_23:
    result = (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::expand(v6, v15);
    v15 = (unsigned __int8 *)result;
    v19 = *v6;
    if (*v6)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_23;
LABEL_11:
  v23 = v19 + 24 * v22;
  v24 = 1;
LABEL_12:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

_BYTE *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  _BYTE *result;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  char v21;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 32);
    do
    {
      *((_BYTE *)v12 - 16) = 0;
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (unsigned __int8 *)v6;
    do
    {
      if (*v16 != 255)
      {
        if (*v16)
        {
          v18 = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::reinsert(*a1, v16);
          v19 = *((unsigned int *)v16 + 4);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v19])(&v21, v16 + 8);
          *((_DWORD *)v16 + 4) = -1;
          if (v16 == a3)
            v13 = v18;
        }
        else
        {
          v17 = *((unsigned int *)v16 + 4);
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v17])(&v20, v16 + 8);
          *((_DWORD *)v16 + 4) = -1;
        }
      }
      v16 += 24;
      --v15;
    }
    while (v15);
    goto LABEL_21;
  }
  result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_BYTE *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::rehash(a1, v5, a2);
}

uint64_t WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 ***v8;
  int v9;
  unsigned __int8 ***v10;
  unint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_11;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_11;
    }
    else if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_11;
    }
  }
  v6 = v5;
  v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0xAAAAAAA)
  {
    __break(0xC471u);
    JUMPOUT(0x196C8F020);
  }
  v8 = *(unsigned __int8 ****)(result + 16);
  v9 = 24 * v7 + 24;
  v10 = (unsigned __int8 ***)WTF::fastMalloc((WTF *)(24 * v7 + 24));
  *(_DWORD *)(v3 + 24) = (v9 & 0xFFFFFFF8) / 0x18;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v11)
  {
    WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(v8, &v8[3 * v11], v10);
    v18 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(&v8[3 * *(_QWORD *)v3], &v8[3 * v6], (unsigned __int8 ***)(*(_QWORD *)(v3 + 16) + 24 * v18));
    *(_QWORD *)v3 = v18;
  }
  else
  {
    result = (uint64_t)WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(&v8[3 * *(_QWORD *)v3], &v8[3 * v11], &v10[3 * *(_QWORD *)v3]);
  }
  if (v8)
  {
    if (*(unsigned __int8 ****)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v12);
  }
  v4 = *(_QWORD *)(v3 + 8);
LABEL_11:
  v13 = (_QWORD *)(*(_QWORD *)(v3 + 16) + 24 * v4);
  v14 = *a2;
  *a2 = 0;
  *v13 = v14;
  v15 = a2[1];
  a2[1] = 0;
  v13[1] = v15;
  v13[2] = a2[2];
  v16 = *(_QWORD *)(v3 + 8);
  if (v16 == *(unsigned int *)(v3 + 24) - 1)
    v17 = 0;
  else
    v17 = v16 + 1;
  *(_QWORD *)(v3 + 8) = v17;
  return result;
}

unsigned __int8 ***WTF::VectorMover<false,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::move(unsigned __int8 ***result, unsigned __int8 ***a2, unsigned __int8 ***a3)
{
  unsigned __int8 ***v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      a3[2] = v5[2];
      std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)v5 + 1, 0);
      result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned __int8 ***WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(unsigned __int8 ***result, unsigned __int8 ***a2)
{
  unsigned __int8 ***v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)v3 + 1, 0);
      result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v3);
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned __int8 ***IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch(uint64_t **this)
{
  uint64_t *v2;
  IPC::Decoder *v3;
  IPC::Decoder *v4;
  WTF *v5;
  void *v6;
  IPC::Decoder *v8;
  uint64_t *v9;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, this);
  v2 = v9;
  v3 = (IPC::Decoder *)this[1];
  this[1] = 0;
  v8 = v3;
  IPC::Connection::dispatchMessage((uint64_t)v2, (uint64_t *)&v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    IPC::Decoder::~Decoder(v4);
    WTF::fastFree(v5, v6);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
}

void IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(WTF::StringImpl *a1, CFTypeRef *a2)
{
  CGColorSpace *v3;

  v3 = (CGColorSpace *)*a2;
  if (*a2)
    CFRetain(*a2);
  IPC::ArgumentCoder<CGColorSpace *,void>::encode(a1, v3);
  if (v3)
    CFRelease(v3);
}

void sub_196C8F19C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::add<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>@<X0>(uint64_t *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  int v31;
  BOOL v32;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 1);
  v12 = 9 * ((~(v10 << 15) + v10) ^ ((~(v10 << 15) + v10) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v9 & ((0xD7862706ELL
                           * (unint64_t)(277951225 * (v13 ^ HIWORD(v13))
                                              + 95187966 * ((v16 >> 31) ^ v16))) >> 4);
  v18 = (uint64_t *)(v8 + 32 * v17);
  v19 = *(unsigned __int8 *)v18;
  v20 = v18[1];
  if (*(_BYTE *)v18)
    v21 = 0;
  else
    v21 = v20 == 0;
  if (!v21)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v19 == v10 && v20 == v11)
      {
        v29 = 0;
        v28 = v8 + 32 * *(unsigned int *)(v8 - 4);
        goto LABEL_15;
      }
      if (v19 == 255)
        v30 = v18;
      v17 = ((_DWORD)v17 + v31) & v9;
      v18 = (uint64_t *)(v8 + 32 * v17);
      v19 = *(unsigned __int8 *)v18;
      v20 = v18[1];
      ++v31;
      if (*(_BYTE *)v18)
        v32 = 0;
      else
        v32 = v20 == 0;
    }
    while (!v32);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      *((_DWORD *)v30 + 6) = 0;
      v30[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      LOBYTE(v10) = *a2;
      v11 = *((_QWORD *)a2 + 1);
      v18 = v30;
    }
  }
  *(_BYTE *)v18 = v10;
  v18[1] = v11;
  result = (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v18 + 2), a3);
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_14;
LABEL_28:
    result = (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(v6, (unsigned __int8 *)v18);
    v18 = result;
    v24 = *v6;
    if (*v6)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_14;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_28;
LABEL_14:
  v28 = v24 + 32 * v27;
  v29 = 1;
LABEL_15:
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 < (unint64_t)a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > (unint64_t)a2)
      a2 = (WTF *)v6;
    result = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, a2);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *this)
{
  int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= (unint64_t)this)
    return 1;
  v2 = (int)this;
  if (!((unint64_t)this >> 32))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc(this);
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a2 + 12);
  v4 = a1[2];
  v5 = *a1 + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_QWORD *)(*a1 + v9) = v3;
      a1[2] = v10;
      v3 = *(unsigned int *)(a2 + 12);
    }
  }
  if ((_DWORD)v3)
  {
    v12 = *(_QWORD *)a2;
    v13 = 40 * v3;
    do
    {
      IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(a1, v12);
      v12 += 40;
      v13 -= 40;
    }
    while (v13);
  }
}

void IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, (_QWORD *)a2);
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, a2 + 8);
  v4 = a1[2];
  if (v4 >= a1[1]
    || (*(_BYTE *)(*a1 + v4) = *(_BYTE *)(a2 + 32), a1[2] = v4 + 1, v4 + 1 >= a1[1])
    || (*(_BYTE *)(*a1 + v4 + 1) = *(_BYTE *)(a2 + 33), a1[2] = v4 + 2, v4 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v4 + 2) = *(_BYTE *)(a2 + 34);
    a1[2] = v4 + 3;
  }
}

void IPC::ArgumentCoder<WebCore::Region,void>::encode(uint64_t *a1, uint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v4 = *(WTF **)(a2 + 8);
  v7 = *(WTF **)a2;
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v7);
  v7 = v4;
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v7);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
    std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>(v5, (uint64_t *)&v7);
  else
    v7 = 0;
  IPC::ArgumentCoder<std::unique_ptr<WebCore::Region::Shape>,void>::encode<IPC::StreamConnectionEncoder,std::unique_ptr<WebCore::Region::Shape>>(a1, (uint64_t *)&v7);
  v6 = v7;
  v7 = 0;
  if (v6)
    std::default_delete<WebCore::Region::Shape>::operator()[abi:sn180100]((int)&v7, v6);
}

void sub_196C8F678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  WTF *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<WebCore::Region::Shape>::operator()[abi:sn180100]((int)&a10, v11);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<std::unique_ptr<WebCore::Region::Shape>,void>::encode<IPC::StreamConnectionEncoder,std::unique_ptr<WebCore::Region::Shape>>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = result;
  v3 = *a2;
  v5 = result[1];
  v4 = result[2];
  if (*a2)
  {
    if (v4 >= v5)
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v4) = 1;
      result[2] = v4 + 1;
      v3 = *a2;
    }
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, *(const void **)v3, *(unsigned int *)(v3 + 12));
    return IPC::VectorArgumentCoder<false,WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v2, (uint64_t *)(v3 + 144));
  }
  else if (v4 >= v5)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v4) = 0;
    result[2] = v4 + 1;
  }
  return result;
}

uint64_t *IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v11;
  unint64_t v12;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v11 >= v2 + v3)
  {
    v12 = (unint64_t)v11 - v2 + 4;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFFBLL || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v11 = a2[1];
      result[2] = v12;
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(a1, v4, a2);
}

uint64_t WebKit::WebLoaderStrategy::shouldPerformSecurityChecks(WebKit::WebLoaderStrategy *this)
{
  return *(unsigned __int8 *)(WebCore::DeprecatedGlobalSettings::shared(this) + 22);
}

uint64_t __copy_helper_block_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned __int8 ***IPC::StreamServerConnection::open(IPC::StreamServerConnection *this, IPC::StreamConnectionWorkQueue *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[3];
  IPC::Connection *v9;

  v4 = (unsigned int *)((char *)a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = a2;
  if (v6)
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 8), a2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v9, (uint64_t **)this + 4);
  memset(v8, 0, sizeof(v8));
  IPC::Connection::addMessageReceiveQueue((uint64_t)v9, this, (unsigned __int8 *)v8);
  IPC::Connection::open(v9, (uint64_t)this + 16, (uint64_t)a2);
  IPC::StreamConnectionWorkQueue::addStreamConnection(a2, this);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
}

uint64_t *IPC::StreamConnectionWorkQueue::addStreamConnection(IPC::StreamConnectionWorkQueue *this, IPC::StreamServerConnection *a2)
{
  unsigned __int8 *v4;
  uint64_t *result;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v4 = (unsigned __int8 *)this + 41;
  if (__ldaxr((unsigned __int8 *)this + 41))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C]((char *)this + 41);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  result = (uint64_t *)((char *)this + 96);
  v7 = *((unsigned int *)this + 27);
  if ((_DWORD)v7 == *((_DWORD *)this + 26))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::StreamServerConnection&>((uint64_t)result, (uint64_t)a2);
  }
  else
  {
    v11 = *result;
    v12 = (unsigned int *)((char *)a2 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    *(_QWORD *)(v11 + 8 * v7) = a2;
    ++*((_DWORD *)this + 27);
  }
  v8 = atomic_load((unsigned __int8 *)this + 40);
  if ((v8 & 1) != 0 || *((_QWORD *)this + 6))
  {
    v9 = 1;
  }
  else
  {
    result = (uint64_t *)IPC::StreamConnectionWorkQueue::startProcessingThread((unsigned int **)this);
    v9 = 0;
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  if (v9)
    JUMPOUT(0x19AEBA1A0);
  return result;
}

void IPC::Connection::addMessageReceiveQueue(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  os_unfair_lock_s *v6;

  v6 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::Connection::enqueueMatchingMessagesToMessageReceiveQueue(a1, a2, a3);
  IPC::MessageReceiveQueueMap::add((uint64_t *)(a1 + 144), (uint64_t)a2, a3);
  os_unfair_lock_unlock(v6);
}

uint64_t *IPC::MessageReceiveQueueMap::add(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  char v6;

  v4 = a2;
  v5 = 0;
  result = IPC::MessageReceiveQueueMap::addImpl(a1, (uint64_t)&v4, a3);
  if (v5 != -1)
    return (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v6, &v4);
  return result;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t result;
  char v39;
  char v40;
  char v41;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v10 = v8 + 16;
    do
    {
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      v10 += 32;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (unsigned __int8 *)(v4 + 32 * v11);
      v15 = *v14;
      if (v15 != 255)
      {
        v9 = (void *)*((_QWORD *)v14 + 1);
        if (*v14)
          v16 = 0;
        else
          v16 = v9 == 0;
        if (v16)
        {
          v17 = v4 + 32 * v11;
          v20 = *(_DWORD *)(v17 + 24);
          v19 = (_DWORD *)(v17 + 24);
          v18 = v20;
          if (v20 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v18])(&v39, v4 + 32 * v11 + 16);
          *v19 = -1;
        }
        else
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v15, (uint64_t)v9);
          v24 = 0;
          do
          {
            v25 = v23 & v22;
            v26 = v21 + 32 * v25;
            v23 = ++v24 + v25;
            if (*(_BYTE *)v26)
              v27 = 0;
            else
              v27 = *(_QWORD *)(v26 + 8) == 0;
          }
          while (!v27);
          v29 = (_DWORD *)(v26 + 24);
          v28 = *(unsigned int *)(v26 + 24);
          if ((_DWORD)v28 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v28])(&v40, v21 + 32 * v25 + 16);
          *v29 = -1;
          *(_OWORD *)v26 = *(_OWORD *)v14;
          v30 = v21 + 32 * v25;
          v31 = v4 + 32 * v11;
          v32 = v31 + 16;
          *(_BYTE *)(v30 + 16) = 0;
          *v29 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(v30 + 16, v31 + 16);
          v35 = *(_DWORD *)(v31 + 24);
          v34 = (_DWORD *)(v31 + 24);
          v33 = v35;
          if (v35 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v33])(&v41, v32);
          *v34 = -1;
          if (v14 == a3)
            v12 = v26;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

unint64_t WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(unsigned __int8 a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = ~(a1 << 15) + a1;
  v3 = (9 * (v2 ^ (v2 >> 10))) ^ ((9 * (v2 ^ (v2 >> 10))) >> 6);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v3 + ~(v3 << 11)) ^ ((v3 + ~(v3 << 11)) >> 16))
                           + 95187966 * ((v6 >> 31) ^ v6))) >> 4;
}

void WebKit::ImageBufferShareableMappedIOSurfaceBackend::~ImageBufferShareableMappedIOSurfaceBackend(WebKit::ImageBufferShareableMappedIOSurfaceBackend *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

BOOL WebKit::WebLocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD **)(*(_QWORD *)(v4 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 1368))(v5) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(v5[2] + 8);
  if (!v6)
    return 0;
  CFRetain(*(CFTypeRef *)(v6 - 8));
  v7 = *(_BYTE *)(v6 + 2232) != 0;
  CFRelease(*(CFTypeRef *)(v6 - 8));
  return v7;
}

uint64_t IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  unsigned __int16 v5;
  unsigned __int16 v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  char v10;
  char v11;

  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v9);
  ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a1);
  v5 = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a1);
  v6 = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a1);
  result = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a1);
  if (!*a1)
    goto LABEL_10;
  if (!v11
    || (*(_QWORD *)&v8 = v9, BYTE8(v8) = v10, ShouldRelaxThirdPartyCookie <= 0xFFu)
    || v5 <= 0xFFu
    || v6 <= 0xFFu
    || (unsigned __int16)result <= 0xFFu)
  {
    __break(1u);
LABEL_10:
    *a2 = 0;
    a2[24] = 0;
    return result;
  }
  *(_OWORD *)a2 = v8;
  a2[16] = (2 * v5) & 0x72 | ShouldRelaxThirdPartyCookie & 0xF1 | (4 * v6) & 0x77 | (8 * result);
  a2[24] = 1;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::BackForwardListItemState>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[312])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  _BYTE v5[312];
  char v6;

  IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v5);
  v3 = v6;
  if (v6)
  {
    std::__tuple_leaf<1ul,WebKit::BackForwardListItemState,false>::__tuple_leaf[abi:sn180100]<WebKit::BackForwardListItemState,void>((uint64_t)a2, (uint64_t)v5);
    v3 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[312] = v3;
  return std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

uint64_t IPC::Decoder::decode<WebKit::BackForwardListItemState>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 312))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C90080(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::setHasLaunchedWebContentProcess(WebKit::WebPage *this)
{
  unint64_t v1;
  WebKit::WebProcess *v2;
  unint64_t v3;
  WebKit::WebProcess *v4;
  __int128 v5;
  unsigned __int8 v6;

  if ((WebKit::WebPage::setHasLaunchedWebContentProcess(void)::hasSetLaunchVariable & 1) == 0)
  {
    v1 = (unint64_t)&_MergedGlobals_106;
      goto LABEL_10;
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    while (1)
    {
      WebKit::WebProcess::auditTokenForSelf(v2, (uint64_t)&v5);
      if (+[WKProcessExtension sharedInstance](WKProcessExtension, "sharedInstance"))
        -[WKProcessExtension lockdownSandbox:](+[WKProcessExtension sharedInstance](WKProcessExtension, "sharedInstance"), "lockdownSandbox:", CFSTR("1.0"));
      v1 = v6;
      if (v6)
        break;
      __break(1u);
LABEL_10:
      v3 = v1;
      v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v2 = WebKit::WebProcess::WebProcess(v4);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
      *(_BYTE *)(v3 + 2488) = 1;
    }
    sandbox_enable_state_flag();
    WebKit::WebPage::setHasLaunchedWebContentProcess(void)::hasSetLaunchVariable = 1;
  }
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BYTE v11[24];
  _BYTE v12[16];
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl **v15;

  result = IPC::Decoder::decode<unsigned int>(a1);
  if ((result & 0xFF00000000) != 0)
  {
    v5 = result;
    v6 = 0;
    v15 = 0;
    if ((_DWORD)result)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::String>(a1, &v13);
        if (!v14)
          break;
        result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, v12);
        if (!v12[8])
          goto LABEL_13;
        if (!v14)
        {
          __break(1u);
          return result;
        }
        if ((unint64_t)v13 + 1 < 2
          || (WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t *)&v15, &v13, (WTF::StringImpl *)v12, (uint64_t)v11), !v11[16]))
        {
LABEL_13:
          *a2 = 0;
          a2[8] = 0;
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v8);
          goto LABEL_14;
        }
        std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v8);
        result = std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v9);
        if (!--v5)
        {
          v6 = v15;
          goto LABEL_3;
        }
      }
      *a2 = 0;
      a2[8] = 0;
LABEL_14:
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v7);
      result = (uint64_t)v15;
      if (v15)
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v10);
    }
    else
    {
LABEL_3:
      *(_QWORD *)a2 = v6;
      a2[8] = 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

void sub_196C90284(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v7);
  v9 = *(WTF::StringImpl ***)(v5 - 40);
  if (v9)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
  _Unwind_Resume(a1);
}

void sub_196C902B8()
{
  JUMPOUT(0x196C902A0);
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    result = (uint64_t)WTF::String::operator=(v15 + 1, a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF::StringImpl **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    v26 = v22 + 16 * v25;
    v27 = 1;
    goto LABEL_31;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v27 = 0;
  v26 = v20 + 16 * v21;
LABEL_31:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

void WebKit::AuxiliaryProcess::initialize(WebKit::AuxiliaryProcess *this, const WebKit::AuxiliaryProcessInitializationParameters *a2)
{
  WTF *v4;
  WebCore *v5;
  PAL::SessionID *v6;
  void *v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  WTF::RunLoop *v17;
  IPC::Connection *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *object;
  unsigned __int8 **v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  WebCore::setAuxiliaryProcessType();
  if (!*((_BYTE *)a2 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x196C9074CLL);
  }
  WebCore::Process::setIdentifier();
  WebKit::AuxiliaryProcess::platformInitialize(this, (uint64_t)a2);
  v34 = 0;
  memset(v33, 0, 41);
  (*(void (**)(WebKit::AuxiliaryProcess *, const WebKit::AuxiliaryProcessInitializationParameters *, _OWORD *))(*(_QWORD *)this + 88))(this, a2, v33);
  v4 = (WTF *)(*(uint64_t (**)(WebKit::AuxiliaryProcess *, const WebKit::AuxiliaryProcessInitializationParameters *))(*(_QWORD *)this + 72))(this, a2);
  WTF::logChannels(v4);
  LOBYTE(v31) = 0;
  v32 = 0;
  v5 = (WebCore *)WTF::LogChannels::initializeLogChannelsIfNecessary();
  WebCore::logChannels(v5);
  LOBYTE(v29) = 0;
  v30 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
  }
  LOBYTE(v27) = 0;
  v28 = 0;
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  v6 = (PAL::SessionID *)(*(uint64_t (**)(WebKit::AuxiliaryProcess *, const WebKit::AuxiliaryProcessInitializationParameters *))(*(_QWORD *)this + 80))(this, a2);
  PAL::SessionID::enableGenerationProtection(v6);
  WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected = 1;
  WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected = 1;
  v24 = *((_DWORD *)a2 + 10);
  v7 = (void *)*((_QWORD *)a2 + 6);
  object = v7;
  if (v7)
    os_retain(v7);
  IPC::Connection::createClientConnection((uint64_t)&v24, (mach_port_context_t *)&v26);
  v8 = v26;
  v26 = 0;
  v9 = (unsigned __int8 **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v8;
  if (v9)
  {
    v10 = *v9;
    if (__ldaxr(*v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_10:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v23 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v23 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
LABEL_14:
          if (!v13)
          {
            v21 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v21 = off_1E34ACA48;
            *(_QWORD *)(v21 + 8) = v10;
            *(_QWORD *)(v21 + 16) = v15;
            *(_BYTE *)(v21 + 24) = v14;
            v35 = v21;
            WTF::ensureOnMainRunLoop();
            v22 = v35;
            v35 = 0;
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
          goto LABEL_15;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_14;
    }
    MEMORY[0x19AEABB3C](v10);
    goto LABEL_10;
  }
LABEL_15:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v26);
  if (object)
    os_release(object);
  v17 = (WTF::RunLoop *)(*(uint64_t (**)(WebKit::AuxiliaryProcess *, _QWORD))(*(_QWORD *)this + 96))(this, *((_QWORD *)this + 4));
  v18 = (IPC::Connection *)*((_QWORD *)this + 4);
  v19 = WTF::RunLoop::current(v17);
  IPC::Connection::open(v18, (uint64_t)this, v19);
  WebKit::SandboxInitializationParameters::~SandboxInitializationParameters((WebKit::SandboxInitializationParameters *)v33, v20);
}

uint64_t IPC::Connection::open(IPC::Connection *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *((_QWORD *)a1 + 1) = a2;
  v4 = IPC::Connection::SyncMessageState::get(a3, &v7);
  v5 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v7;
  if (v5)
    IPC::Connection::SyncMessageStateRelease::operator()(v4, v5);
  IPC::Connection::platformOpen(a1);
  return 1;
}

uint64_t IPC::Connection::SyncMessageState::get@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v2 = result;
  if (__ldaxr(IPC::Connection::SyncMessageState::syncMessageStateMapLock))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEABB3C](IPC::Connection::SyncMessageState::syncMessageStateMapLock);
    goto LABEL_4;
  }
  if (__stxr(1u, IPC::Connection::SyncMessageState::syncMessageStateMapLock))
    goto LABEL_3;
LABEL_4:
  {
    v5 = IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map;
    if (IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map)
    {
LABEL_7:
      v6 = *(_DWORD *)(v5 - 8);
      goto LABEL_8;
    }
  }
  else
  {
    IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map = 0;
  }
  result = (uint64_t)WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::expand(0);
  v5 = IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map;
  if (IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map)
    goto LABEL_7;
  v6 = 0;
LABEL_8:
  v7 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v5 + 16 * v10);
  v12 = (void *)*v11;
  if (*v11)
  {
    v17 = 0;
    v18 = 1;
    while (v12 != (void *)v2)
    {
      if (v12 == (void *)-1)
        v17 = v11;
      v10 = (v10 + v18) & v6;
      v11 = (_QWORD *)(v5 + 16 * v10);
      v12 = (void *)*v11;
      ++v18;
      if (!*v11)
      {
        if (v17)
        {
          *v17 = 0;
          v17[1] = 0;
          --*(_DWORD *)(v5 - 16);
          v11 = v17;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    *v11 = v2;
    result = operator new();
    *(_DWORD *)result = 0;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = v2;
    *(_DWORD *)(result + 88) = 0;
    v11[1] = result;
    if (IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map)
      v13 = *(_DWORD *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 12) + 1;
    else
      v13 = 1;
    *(_DWORD *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 12) = v13;
    if (IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map)
      v14 = *(_DWORD *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 12);
    else
      v14 = 0;
    v15 = (*(_DWORD *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 16) + v14);
    v16 = *(unsigned int *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 4);
    if (v16 <= 0x400)
    {
      if (3 * v16 > 4 * v15)
        goto LABEL_18;
      goto LABEL_15;
    }
    if (v16 <= 2 * v15)
    {
LABEL_15:
      result = (uint64_t)WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::expand((void **)v11);
      v11 = (_QWORD *)result;
    }
  }
LABEL_18:
  v19 = v11[1];
  ++*(_DWORD *)(v19 + 88);
  *a2 = v19;
  LODWORD(v19) = __ldxr(IPC::Connection::SyncMessageState::syncMessageStateMapLock);
  if ((_DWORD)v19 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)IPC::Connection::SyncMessageState::syncMessageStateMapLock);
  }
  if (__stlxr(0, IPC::Connection::SyncMessageState::syncMessageStateMapLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)IPC::Connection::SyncMessageState::syncMessageStateMapLock);
  return result;
}

_OWORD *WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _OWORD *result;
  void **v13;
  _OWORD *v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (void **)v6;
    do
    {
      v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(*a1, (uint64_t)v10);
        *v14 = *(_OWORD *)v13;
        if (v13 == a3)
          v11 = v14;
      }
      v13 += 2;
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  result = 0;
  if (v6)
  {
LABEL_12:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::expand(void **a1)
{
  int v1;
  unsigned int v2;

  if (IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map
    && (v1 = *(_DWORD *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 4)) != 0)
  {
    v2 = v1 << (6 * *(_DWORD *)(IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map - 12) >= (2 * v1));
  }
  else
  {
    v2 = 8;
  }
  return WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::rehash(&IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map, v2, a1);
}

void IPC::Connection::createClientConnection(uint64_t a1@<X0>, mach_port_context_t *a2@<X8>)
{
  mach_port_context_t v4;
  mach_port_context_t v5;
  void *v6;
  int v7;
  void *v8;

  v4 = WTF::fastMalloc((WTF *)0x170);
  v5 = v4;
  v7 = *(_DWORD *)a1;
  v6 = *(void **)(a1 + 8);
  v8 = v6;
  if (v6)
  {
    os_retain(v6);
    IPC::Connection::Connection(v5, &v7, 0);
    os_release(v6);
  }
  else
  {
    IPC::Connection::Connection(v4, &v7, 0);
  }
  *a2 = v5;
}

void IPC::Connection::platformInitialize(mach_port_context_t guard, uint64_t a2)
{
  mach_port_name_t v4;
  void *v5;
  id v6;
  void *v7;

  v4 = *(_DWORD *)a2;
  if (!*(_BYTE *)(guard + 32))
  {
    if (v4)
    {
      *(_DWORD *)(guard + 312) = v4;
      goto LABEL_4;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x196C90C4CLL);
  }
  if (v4 + 1 <= 1)
    goto LABEL_10;
  *(_DWORD *)(guard + 328) = v4;
  mach_port_guard(*MEMORY[0x1E0C83DA0], v4, guard, 1);
LABEL_4:
  v5 = *(void **)(a2 + 8);
  if (v5)
    v6 = v5;
  v7 = *(void **)(guard + 352);
  *(_QWORD *)(guard + 352) = v5;
  if (v7)

}

void WebKit::SandboxInitializationParameters::~SandboxInitializationParameters(WebKit::SandboxInitializationParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  v6 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v6, v5);
  }
}

uint64_t WebKit::AuxiliaryProcess::platformInitialize(WebCore::FloatingPointEnvironment *a1, uint64_t a2)
{
  WebCore::FloatingPointEnvironment *v3;
  void *v4;
  const WTF::String *v5;

  v3 = (WebCore::FloatingPointEnvironment *)WebCore::FloatingPointEnvironment::singleton(a1);
  WebCore::FloatingPointEnvironment::enableDenormalSupport(v3);
  WebCore::FloatingPointEnvironment::saveMainThreadEnvironment(v3);
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  objc_msgSend(v4, "changeCurrentDirectoryPath:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundlePath"));
  WebCore::setApplicationBundleIdentifier((WebCore *)(a2 + 16), v5);
  WTF::setSDKAlignedBehaviors();
  return WTF::setProcessIsExtension((WTF *)(+[WKProcessExtension sharedInstance](WKProcessExtension, "sharedInstance") != 0));
}

_QWORD *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(_QWORD *result, WTF::Lock *this, uint64_t a3)
{
  _QWORD *v5;
  int v7;

  v5 = result;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  result = (_QWORD *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  if (*((_QWORD *)this + 3))
    ++*((_QWORD *)this + 1);
  else
    a3 = 0;
  *v5 = a3;
  v7 = __ldxr((unsigned __int8 *)this);
  if (v7 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow(this);
  }
  if (__stlxr(0, (unsigned __int8 *)this))
    return (_QWORD *)WTF::Lock::unlockSlow(this);
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

void WebKit::ProcessLauncher::Client::xpcEventHandler(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::getLaunchOptions(uint64_t a1, uint64_t a2)
{
  char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];
  _BYTE v9[24];
  const char *v10;
  uint64_t v11;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 176);
  v4 = getenv("DIRHELPER_USER_DIR_SUFFIX");
  if (v4)
  {
    strlen(v4);
    WTF::String::fromUTF8();
    if (v8[0])
    {
      v10 = "user-directory-suffix";
      v11 = 22;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::String&>((uint64_t *)(a2 + 16), (uint64_t *)&v10, (WTF::StringImpl *)v8, (uint64_t)v9);
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 168))
  {
    v10 = "always-runs-at-background-priority";
    v11 = 35;
    v8[0] = (WTF::StringImpl *)"true";
    v8[1] = (WTF::StringImpl *)5;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t *)(a2 + 16), (uint64_t *)&v10, (uint64_t)v8, (uint64_t)v9);
  }
  WebKit::AuxiliaryProcessProxy::populateOverrideLanguagesLaunchOptions(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::populateOverrideLanguagesLaunchOptions(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  void *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  WTF::StringImpl **v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  char v46;
  WTF *v47;
  WTF::StringImpl *v48;
  char v49;

  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1EE341DE8 = 0;
  }
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v47, (uint64_t)&WebKit::overrideLanguagesStorage(void)::storage);
  v4 = HIDWORD(v48);
  if (HIDWORD(v48))
    goto LABEL_9;
  WebKit::AuxiliaryProcessProxy::platformOverrideLanguages((uint64_t)&v43);
  if (HIDWORD(v48))
    WTF::VectorDestructor<true,WTF::String>::destruct(v47, (WTF *)((char *)v47 + 8 * HIDWORD(v48)));
  v6 = v47;
  if (v47)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v6, v5);
  }
  v47 = v43;
  v7 = v44;
  v43 = 0;
  v44 = 0;
  v48 = v7;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v5);
  v4 = HIDWORD(v48);
  if (HIDWORD(v48))
  {
LABEL_9:
    v9 = 0;
    v10 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 1;
    do
    {
      if (v10)
      {
        v49 = 44;
        if (v44 && ((v11 = v45, v45 < *((_DWORD *)v44 + 1)) ? (v12 = v43 == 0) : (v12 = 0), v12))
        {
          v13 = *((_DWORD *)v44 + 4);
          v14 = *((_QWORD *)v44 + 1);
          ++v45;
          if ((v13 & 4) != 0)
            *(_BYTE *)(v14 + v11) = 44;
          else
            *(_WORD *)(v14 + 2 * v11) = 44;
        }
        else
        {
          result = WTF::StringBuilder::append();
        }
        v4 = HIDWORD(v48);
      }
      if (v10 >= v4)
      {
        __break(0xC471u);
        return result;
      }
      v15 = (uint64_t *)((char *)v47 + v9);
      if (v45)
        v16 = 0;
      else
        v16 = v44 == 0;
      if (v16)
      {
        result = (uint64_t)WTF::String::operator=(&v43, (WTF *)((char *)v47 + v9));
        v17 = *v15;
        if (*v15)
          LODWORD(v17) = *(_DWORD *)(v17 + 4);
        v45 = v17;
      }
      else
      {
        v18 = *v15;
        if (*v15)
        {
          v19 = *(_QWORD *)(v18 + 8);
          v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v19 = 0;
          v20 = 0x100000000;
        }
        result = WTF::StringBuilder::append((uint64_t)&v43, v19, v20);
      }
      ++v10;
      v4 = HIDWORD(v48);
      v9 += 8;
    }
    while (v10 < HIDWORD(v48));
    v21 = v43;
    v22 = (uint64_t *)(a2 + 16);
    if (v43
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v43),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v43),
          (v21 = v43) != 0))
    {
      *(_DWORD *)v21 += 2;
    }
    v23 = *v22;
    if (*v22
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v22, 0), (v23 = *v22) != 0))
    {
      v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = WTF::HashTranslatorASCIILiteral::hash((uint64_t)"OverrideLanguages", 18);
    v26 = 0;
    v27 = 0;
    v28 = v25;
    while (1)
    {
      v29 = v28 & v24;
      v30 = (WTF::StringImpl **)(v23 + 16 * (v28 & v24));
      v31 = *v30;
      if (*v30 != (WTF::StringImpl *)-1)
      {
        if (!v31)
        {
          if (v27)
            v33 = v27;
          else
            v33 = (WTF::StringImpl **)(v23 + 16 * v29);
          if (*v33 == (WTF::StringImpl *)-1)
          {
            *v33 = 0;
            v33[1] = 0;
            --*(_DWORD *)(*v22 - 16);
          }
          WTF::HashTranslatorASCIILiteral::translate(v33, (WTF::StringImpl *)"OverrideLanguages", 18, v25);
          v34 = v33[1];
          v33[1] = v21;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v8);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = *v22;
          if (*v22)
            v36 = *(_DWORD *)(v35 - 12) + 1;
          else
            v36 = 1;
          *(_DWORD *)(v35 - 12) = v36;
          v37 = *v22;
          if (*v22)
            v38 = *(_DWORD *)(v37 - 12);
          else
            v38 = 0;
          v39 = (*(_DWORD *)(v37 - 16) + v38);
          v40 = *(unsigned int *)(v37 - 4);
          if (v40 > 0x400)
          {
            if (v40 > 2 * v39)
              goto LABEL_70;
          }
          else if (3 * v40 > 4 * v39)
          {
            goto LABEL_70;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v22, v33);
          goto LABEL_70;
        }
        v32 = MEMORY[0x19AEABBCC](v31, "OverrideLanguages", 17);
        v30 = v27;
        if ((v32 & 1) != 0)
          break;
      }
      v28 = ++v26 + v29;
      v27 = v30;
    }
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v8);
      else
        *(_DWORD *)v21 -= 2;
    }
LABEL_70:
    v41 = v44;
    v44 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v8);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v43;
    v43 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v8);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
}

uint64_t WTF::HashTranslatorASCIILiteral::hash(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  if (a2)
    v2 = a2 - 1;
  else
    v2 = 0;
  v3 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>(a1, v2);
  v4 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
  v5 = (v4 ^ (4 * v4)) + ((v4 ^ (4 * v4)) >> 15);
  v6 = (v5 ^ (v5 << 10)) & 0xFFFFFF;
  if (v6)
    return v6;
  else
    return 0x800000;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(a1, (uint64_t)v14);
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)a2);
  v5 = *(WTF::StringImpl **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)v4;
  *(_QWORD *)v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v4 = v7;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v8;
  return v4;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100)
    v5 = v4 >> 8;
  else
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(v2 + 16 * v7));
  return v2 + 16 * v7;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl *WTF::HashTranslatorASCIILiteral::translate(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a3)
  {
    if (a3 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
  result = *a1;
  *a1 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      v6 = *a1;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *((_DWORD *)v6 + 4) |= a4 << 8;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::platformOverrideLanguages@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1;
  if ((_MergedGlobals_44 & 1) == 0)
  {
    WTF::makeVector<WTF::String>((void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "valueForKey:", CFSTR("AppleLanguages")), (uint64_t)&v7);
    qword_1ECE71FD0 = v7;
    v4 = v8;
    v7 = 0;
    v8 = 0;
    qword_1ECE71FD8 = v4;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
    v2 = a1;
    _MergedGlobals_44 = 1;
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v2, (uint64_t)&qword_1ECE71FD0);
}

uint64_t WebKit::ProcessLauncher::Client::shouldEnableSharedArrayBuffer(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::ProcessLauncher::Client::shouldConfigureJSCForTesting(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::ProcessLauncher::Client::shouldEnableLockdownMode(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::ProcessLauncher::Client::isJITEnabled(WebKit::ProcessLauncher::Client *this)
{
  return 1;
}

void WebKit::WebProcess::auditTokenForSelf(WebKit::WebProcess *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  __int128 v4;
  kern_return_t v6;
  int v7;
  __int128 v8;
  mach_error_t v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v15;
  uint8_t buf[4];
  WebKit::WebProcess *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  mach_error_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 712;
  if (*((_BYTE *)this + 744))
    goto LABEL_2;
  *(_OWORD *)task_info_out = 0u;
  v15 = 0u;
  task_info_outCnt = 8;
  v6 = task_info(*MEMORY[0x1E0C83DA0], 0xFu, task_info_out, &task_info_outCnt);
  if (!v6)
  {
    v7 = *((unsigned __int8 *)this + 744);
    v8 = v15;
    *(_OWORD *)v3 = *(_OWORD *)task_info_out;
    *((_OWORD *)v3 + 1) = v8;
    if (!v7)
      *((_BYTE *)this + 744) = 1;
LABEL_2:
    v4 = *((_OWORD *)v3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
    return;
  }
  v9 = v6;
  v10 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    if (*((_BYTE *)this + 672))
      v11 = *((_QWORD *)this + 83);
    else
      v11 = 0;
    v12 = mach_error_string(v9);
    *(_DWORD *)buf = 134218754;
    v17 = this;
    v18 = 2048;
    v19 = v11;
    v20 = 2082;
    v21 = v12;
    v22 = 1024;
    v23 = v9;
    _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] WebProcess::Unable to get audit token for self. Error: %{public}s (%x)", buf, 0x26u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
}

_QWORD *WebKit::NetworkProcess::initializeConnection(WebKit::NetworkProcess *this, IPC::Connection *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  WebKit::AuxiliaryProcess::initializeConnection(this, a2);
  IPC::Connection::setDidCloseOnConnectionWorkQueueCallback((uint64_t)a2, (void (*)(Connection *))WebKit::callExitSoon);
  v4 = (_QWORD *)*((_QWORD *)this + 24);
  result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v4);
  v6 = (uint64_t)result;
  v8 = v7;
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 != result)
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, IPC::Connection *))(**(_QWORD **)(v6 + 16) + 16))(*(_QWORD *)(v6 + 16), a2);
      while (1)
      {
        v6 += 24;
        if (v6 == v8)
          break;
        if (*(_QWORD *)v6)
          v9 = *(_QWORD *)v6 == -1;
        else
          v9 = 1;
        if (!v9)
          goto LABEL_10;
      }
      v6 = v8;
LABEL_10:
      ;
    }
    while ((_QWORD *)v6 != v4);
  }
  return result;
}

_QWORD *WebKit::WebProcess::initializeConnection(WebKit::WebProcess *this, IPC::Connection *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  *((_QWORD *)a2 + 5) = WebKit::callExit;
  *((_BYTE *)a2 + 35) = 1;
  IPC::Connection::addMessageReceiver((uint64_t)a2, *((_QWORD *)this + 19) + 32, (uint64_t)this + 136, 7u, 0);
  IPC::Connection::addMessageReceiver((uint64_t)a2, *((_QWORD *)this + 25) + 32, (uint64_t)this + 184, 0x96u, 0);
  IPC::Connection::addMessageReceiver((uint64_t)a2, *((_QWORD *)this + 30) + 32, (uint64_t)this + 224, 0xABu, 0);
  v4 = (_QWORD *)*((_QWORD *)this + 34);
  result = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v4);
  v6 = (uint64_t)result;
  v8 = v7;
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 != result)
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, IPC::Connection *))(**(_QWORD **)(v6 + 16) + 16))(*(_QWORD *)(v6 + 16), a2);
      while (1)
      {
        v6 += 24;
        if (v6 == v8)
          break;
        if (*(_QWORD *)v6)
          v9 = *(_QWORD *)v6 == -1;
        else
          v9 = 1;
        if (!v9)
          goto LABEL_10;
      }
      v6 = v8;
LABEL_10:
      ;
    }
    while ((_QWORD *)v6 != v4);
  }
  return result;
}

uint64_t IPC::Connection::setDidCloseOnConnectionWorkQueueCallback(uint64_t this, void (*a2)(Connection *))
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t WebKit::WebProcess::platformInitializeProcess(WebCore::PublicSuffixStore *a1, uint64_t a2)
{
  WebCore::PublicSuffixStore *v4;
  WebCore::PublicSuffixStore *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const char **v8;
  os_log_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  char *(*v27)(uint64_t, uint64_t);
  void *v28;
  WebCore::PublicSuffixStore *v29;
  const char *v30;
  uint64_t v31;

  v4 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton(a1);
  v5 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::enablePublicSuffixCache(v4);
  WebCore::PublicSuffixStore::singleton(v5);
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
  v7 = v25;
  v25 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (const char **)&WebKit::prewarmLogs(void)::logs;
  do
  {
    v9 = os_log_create(*v8, v8[2]);
    if (v9)

    v8 += 4;
  }
  while (v8 != (const char **)&__block_descriptor_32_e78_v20__0C8__os_log_message_s_QQQ___timeval_qi__timezone_ii_QQI__Q_Q__ICBQ_CC__12l);
  if (os_trace_get_mode() == 256 || os_trace_get_mode() == 1024)
  {
    qword_1ECE72E10 = os_log_set_hook();
    *MEMORY[0x1E0CBE150] = 1;
  }
  v25 = (WTF::StringImpl *)"inspector-process";
  v26 = 18;
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v24, *(_QWORD *)(a2 + 56), (uint64_t *)&v25);
  v10 = v24;
  v11 = MEMORY[0x19AEABBCC](v24, "1", 1);
  v13 = v11;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v12);
      if (v13)
        goto LABEL_16;
LABEL_18:
      v25 = (WTF::StringImpl *)"service-worker-process";
      v26 = 23;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v24, *(_QWORD *)(a2 + 56), (uint64_t *)&v25);
      v14 = v24;
      v15 = MEMORY[0x19AEABBCC](v24, "1", 1);
      v17 = v15;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v16);
          if (v17)
            goto LABEL_22;
          goto LABEL_24;
        }
        *(_DWORD *)v14 -= 2;
      }
      if (v15)
      {
LABEL_22:
        v18 = 1;
LABEL_31:
        *((_DWORD *)a1 + 149) = v18;
        goto LABEL_32;
      }
LABEL_24:
      v25 = (WTF::StringImpl *)"is-prewarmed";
      v26 = 13;
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v24, *(_QWORD *)(a2 + 56), (uint64_t *)&v25);
      v19 = v24;
      v20 = MEMORY[0x19AEABBCC](v24, "1", 1);
      v22 = v20;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v21);
          if (v22)
            goto LABEL_28;
          goto LABEL_30;
        }
        *(_DWORD *)v19 -= 2;
      }
      if (v20)
      {
LABEL_28:
        v18 = 2;
        goto LABEL_31;
      }
LABEL_30:
      v18 = 4;
      goto LABEL_31;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v11)
    goto LABEL_18;
LABEL_16:
  *((_DWORD *)a1 + 149) = 0;
LABEL_32:
  v25 = (WTF::StringImpl *)MEMORY[0x1E0C809B0];
  v26 = 3321888768;
  v27 = ___ZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralE_block_invoke;
  v28 = &__block_descriptor_56_e8_32c83_ZTSKZN6WebKit16AuxiliaryProcess23registerWithStateDumperEN3WTF12ASCIILiteralEE3__0_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  v29 = a1;
  v30 = "WebContent state";
  v31 = 17;
  os_state_add_handler();
  return objc_msgSend(MEMORY[0x1E0C92C98], "_disableAppSSO");
}

void sub_196C91D74(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  _DWORD *v9;

  v3 = (_QWORD *)result;
  if (a2)
  {
    v5 = *(_DWORD *)(a2 - 8);
    v6 = WTF::HashTranslatorASCIILiteral::hash(*a3, a3[1]);
    for (i = 0; ; v6 = i + v8)
    {
      v8 = v6 & v5;
      result = *(_QWORD *)(a2 + 16 * v8);
      if (!result)
        break;
      if (result != -1)
      {
        result = MEMORY[0x19AEABBCC]();
        if ((result & 1) != 0)
        {
          v9 = *(_DWORD **)(a2 + 16 * v8 + 8);
          if (v9)
            *v9 += 2;
          goto LABEL_9;
        }
      }
      ++i;
    }
  }
  v9 = 0;
LABEL_9:
  *v3 = v9;
  return result;
}

uint64_t WebKit::AuxiliaryProcess::registerWithStateDumper()
{
  return os_state_add_handler();
}

uint64_t WebKit::WebProcess::initializeProcess(WebCore::PublicSuffixStore *a1, uint64_t a2)
{
  JSC::Options *v4;
  _QWORD *v6;

  v4 = (JSC::Options *)WTF::setProcessPrivileges();
  *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1718) = 0;
  JSC::Options::notifyOptionsChanged(v4);
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = off_1E34EF690;
    WebKit::WebMessagePortChannelProvider::singleton(void)::provider = (uint64_t)v6;
  }
  WebCore::MessagePortChannelProvider::setSharedProvider();
  return WebKit::WebProcess::platformInitializeProcess(a1, a2);
}

uint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct(WTF *result, WTF *a2)
{
  WebCore::SerializedScriptValue *v2;
  WebCore::SerializedScriptValue *v3;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebCore::SerializedScriptValue *v9[7];

  if (result != a2)
  {
    v9[5] = v2;
    v9[6] = v3;
    v5 = result;
    do
    {
      result = (WTF *)*((_QWORD *)v5 + 1);
      if (result)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          v9[0] = (WebCore::SerializedScriptValue *)v6;
          result = WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v9);
        }
      }
      v5 = (WTF *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

void `non-virtual thunk to'WebKit::LaunchServicesDatabaseObserver::initializeConnection(xpc_object_t *this, _xpc_connection_s **a2)
{
  WebKit::XPCEndpoint::sendEndpointToConnection(this - 3, a2[44]);
}

unsigned int *WebKit::NetworkProcessProxy::xpcEventHandler@<X0>(WebKit::NetworkProcessProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E34CB480;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

void sub_196C920D0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuthenticationManager::initializeConnection(WebKit::AuthenticationManager *this, IPC::Connection *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  _xpc_connection_s *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t handler;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, void *);
  void *v17;
  WTF *v18;

  result = WTF::isMainRunLoop(this);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196C921E4);
  }
  if (a2 && *((_QWORD *)a2 + 44))
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this + 8);
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = (_xpc_connection_s *)*((_QWORD *)a2 + 44);
      handler = MEMORY[0x1E0C809B0];
      v15 = 3321888768;
      v16 = ___ZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionE_block_invoke;
      v17 = &__block_descriptor_40_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e33_v16__0__NSObject_OS_xpc_object__8l;
      do
        v8 = __ldaxr(v5);
      while (__stlxr(v8 + 1, v5));
    }
    else
    {
      v7 = (_xpc_connection_s *)*((_QWORD *)a2 + 44);
      handler = MEMORY[0x1E0C809B0];
      v15 = 3321888768;
      v16 = ___ZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionE_block_invoke;
      v17 = &__block_descriptor_40_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e33_v16__0__NSObject_OS_xpc_object__8l;
    }
    v18 = (WTF *)v5;
    xpc_connection_set_event_handler(v7, &handler);
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)result);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)result));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v9);
      }
    }
    if (v5)
    {
      do
      {
        v12 = __ldaxr(v5);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v5));
      if (!v13)
      {
        atomic_store(1u, v5);
        return WTF::fastFree((WTF *)v5, v9);
      }
    }
  }
  return result;
}

void sub_196C92240(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (a14)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)a14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)a14));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)a14);
      WTF::fastFree(a14, a2);
    }
  }
  if (v14)
  {
    do
    {
      v18 = __ldaxr(v14);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v14));
    if (!v19)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196C92374);
    }
    v2 = result;
    v3 = (uint64_t *)*result;
    v4 = (uint64_t *)(*result + 24 * *((unsigned int *)result + 3));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *v2 = v6;
    result = WTF::VectorMover<false,WebCore::MessageWithMessagePorts>::move(v3, v4, v6);
    if (v3)
    {
      if ((uint64_t *)*v2 == v3)
      {
        *v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v3, v7);
    }
  }
  return result;
}

uint64_t *WTF::VectorMover<false,WebCore::MessageWithMessagePorts>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  for (; result != a2; a3 += 24)
  {
    v5 = *result;
    *result = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = v5;
    v6 = result[1];
    result[1] = 0;
    *(_QWORD *)(a3 + 8) = v6;
    LODWORD(v6) = *((_DWORD *)result + 4);
    *((_DWORD *)result + 4) = 0;
    *(_DWORD *)(a3 + 16) = v6;
    LODWORD(v6) = *((_DWORD *)result + 5);
    *((_DWORD *)result + 5) = 0;
    *(_DWORD *)(a3 + 20) = v6;
    WebCore::MessageWithMessagePorts::~MessageWithMessagePorts((WebCore::MessageWithMessagePorts *)result, a2);
    result = (uint64_t *)(v7 + 24);
  }
  return result;
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196C9254CLL);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const void *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      v7 = *(const void **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v7)
        CFRelease(v7);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
}

_QWORD *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>((uint64_t)a1, a2, (uint64_t)v5);
  *a1 = 0;
  a1[32] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  v6 = v9;
  if (!v9)
  {
    *(_BYTE *)a1 = 0;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a3 + 16))
  {
    v7 = v8;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    v6 = 1;
LABEL_4:
    *(_BYTE *)(a1 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

void IPC::Connection::initializeSendSource(IPC::Connection *this)
{
  uintptr_t v1;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  NSObject *v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  NSObject *v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  IPC::Connection *v46;
  uint64_t v47;
  IPC::Connection *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];
  int v54;
  _QWORD v55[5];
  unsigned __int8 **v56;
  IPC::Connection *v57;
  unsigned __int8 **v58;
  _QWORD handler[5];
  unsigned __int8 **v60;
  uint64_t v61;

  v1 = *((unsigned int *)this + 78);
  if ((_DWORD)v1 == -1)
    return;
  if (!(_DWORD)v1)
  {
    __break(0xC471u);
    JUMPOUT(0x196C92B20);
  }
  v3 = dispatch_source_create(MEMORY[0x1E0C80DA0], v1, 8uLL, *(dispatch_queue_t *)(*((_QWORD *)this + 8) + 16));
  v4 = (void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = v3;
  if (v4)
  {

    v3 = *((_QWORD *)this + 40);
  }
  v5 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke;
  handler[3] = &__block_descriptor_48_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__0_e5_v8__0l;
  v57 = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (unsigned __int8 **)this);
  handler[4] = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v60, (uint64_t **)&v58);
  dispatch_source_set_registration_handler(v3, handler);
  v6 = v58;
  v58 = 0;
  if (v6)
  {
    v7 = *v6;
    if (__ldaxr(*v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
LABEL_9:
      v9 = *((_QWORD *)v7 + 1);
      v10 = v9 - 1;
      *((_QWORD *)v7 + 1) = v9 - 1;
      if (v9 == 1)
      {
        v49 = *((_QWORD *)v7 + 2);
        v11 = *((_QWORD *)v7 + 3);
        *((_QWORD *)v7 + 3) = 0;
        v12 = v49 == 0;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      v13 = __ldxr(v7);
      if (v13 == 1)
      {
        if (!__stlxr(0, v7))
        {
LABEL_13:
          if (!v10)
          {
            v41 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v41 = off_1E34ACA48;
            *(_QWORD *)(v41 + 8) = v7;
            *(_QWORD *)(v41 + 16) = v11;
            *(_BYTE *)(v41 + 24) = v12;
            v61 = v41;
            WTF::ensureOnMainRunLoop();
            v42 = v61;
            v61 = 0;
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          }
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_13;
    }
    MEMORY[0x19AEABB3C](v7);
    goto LABEL_9;
  }
LABEL_14:
  v14 = *((_QWORD *)this + 40);
  v55[0] = v5;
  v55[1] = 3321888768;
  v55[2] = ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_8;
  v55[3] = &__block_descriptor_48_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__1_e5_v8__0l;
  v57 = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (unsigned __int8 **)this);
  v55[4] = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v56, (uint64_t **)&v58);
  dispatch_source_set_event_handler(v14, v55);
  v15 = v58;
  v58 = 0;
  if (!v15)
    goto LABEL_23;
  v16 = *v15;
  if (__ldaxr(*v15))
  {
    __clrex();
LABEL_17:
    MEMORY[0x19AEABB3C](v16);
    goto LABEL_18;
  }
  if (__stxr(1u, v16))
    goto LABEL_17;
LABEL_18:
  v18 = *((_QWORD *)v16 + 1);
  v19 = v18 - 1;
  *((_QWORD *)v16 + 1) = v18 - 1;
  if (v18 == 1)
  {
    v50 = *((_QWORD *)v16 + 2);
    v20 = *((_QWORD *)v16 + 3);
    *((_QWORD *)v16 + 3) = 0;
    v21 = v50 == 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v22 = __ldxr(v16);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_45;
  }
  if (__stlxr(0, v16))
LABEL_45:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  if (!v19)
  {
    v43 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v43 = off_1E34ACA48;
    *(_QWORD *)(v43 + 8) = v16;
    *(_QWORD *)(v43 + 16) = v20;
    *(_BYTE *)(v43 + 24) = v21;
    v61 = v43;
    WTF::ensureOnMainRunLoop();
    v44 = v61;
    v61 = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
LABEL_23:
  v23 = *((_DWORD *)this + 78);
  v24 = *((_QWORD *)this + 40);
  v53[0] = v5;
  v53[1] = 3221225472;
  v53[2] = ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_10;
  v53[3] = &__block_descriptor_36_e5_v8__0l;
  v54 = v23;
  dispatch_source_set_cancel_handler(v24, v53);
  dispatch_resume(*((dispatch_object_t *)this + 40));
  v25 = v56;
  v56 = 0;
  if (!v25)
    goto LABEL_32;
  v26 = *v25;
  if (__ldaxr(*v25))
  {
    __clrex();
LABEL_26:
    MEMORY[0x19AEABB3C](v26);
    goto LABEL_27;
  }
  if (__stxr(1u, v26))
    goto LABEL_26;
LABEL_27:
  v28 = *((_QWORD *)v26 + 1);
  v29 = v28 - 1;
  *((_QWORD *)v26 + 1) = v28 - 1;
  if (v28 == 1)
  {
    v51 = *((_QWORD *)v26 + 2);
    v30 = *((_QWORD *)v26 + 3);
    *((_QWORD *)v26 + 3) = 0;
    v31 = v51 == 0;
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v32 = __ldxr(v26);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, v26))
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
  if (!v29)
  {
    v45 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v45 = off_1E34ACA48;
    *(_QWORD *)(v45 + 8) = v26;
    *(_QWORD *)(v45 + 16) = v30;
    *(_BYTE *)(v45 + 24) = v31;
    v57 = (IPC::Connection *)v45;
    WTF::ensureOnMainRunLoop();
    v46 = v57;
    v57 = 0;
    if (v46)
      (*(void (**)(IPC::Connection *))(*(_QWORD *)v46 + 8))(v46);
  }
LABEL_32:
  v33 = v60;
  v60 = 0;
  if (!v33)
    return;
  v34 = *v33;
  if (__ldaxr(*v33))
  {
    __clrex();
LABEL_35:
    MEMORY[0x19AEABB3C](v34);
    goto LABEL_36;
  }
  if (__stxr(1u, v34))
    goto LABEL_35;
LABEL_36:
  v36 = *((_QWORD *)v34 + 1);
  v37 = v36 - 1;
  *((_QWORD *)v34 + 1) = v36 - 1;
  if (v36 == 1)
  {
    v52 = *((_QWORD *)v34 + 2);
    v38 = *((_QWORD *)v34 + 3);
    *((_QWORD *)v34 + 3) = 0;
    v39 = v52 == 0;
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  v40 = __ldxr(v34);
  if (v40 == 1)
  {
    if (!__stlxr(0, v34))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_40:
  if (!v37)
  {
    v47 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v47 = off_1E34ACA48;
    *(_QWORD *)(v47 + 8) = v34;
    *(_QWORD *)(v47 + 16) = v38;
    *(_BYTE *)(v47 + 24) = v39;
    v57 = (IPC::Connection *)v47;
    WTF::ensureOnMainRunLoop();
    v48 = v57;
    v57 = 0;
    if (v48)
      (*(void (**)(IPC::Connection *))(*(_QWORD *)v48 + 8))(v48);
  }
}

void sub_196C92B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

void sub_196C92BD4()
{
  JUMPOUT(0x196C92BC8);
}

void IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;

  IPC::ArgumentCoder<WebKit::AuxiliaryProcessCreationParameters,void>::encode((uint64_t)a1, a2);
  v4 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 33);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 40);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<__CFData const*,void>::encode((uint64_t)a1, *(const __CFData **)(a2 + 64));
  v6 = *(_BYTE *)(a2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 80);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 112);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 128);
  v7 = *(_BYTE *)(a2 + 144);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = *(_BYTE *)(a2 + 145);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 146);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  IPC::VectorArgumentCoder<false,WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 152);
  IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 168);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 184));
  IPC::VectorArgumentCoder<false,WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 192);
}

char *IPC::VectorArgumentCoder<false,WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 704 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::encode(a1, v7);
      v7 += 704;
      v8 -= 704;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<std::unique_ptr<WebCore::ScrollingStateTree>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::ScrollingStateTree> const&>(a1, (WebCore::ScrollingStateTree **)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

void IPC::ArgumentCoder<std::unique_ptr<WebCore::ScrollingStateTree>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::ScrollingStateTree> const&>(IPC::Encoder *a1, WebCore::ScrollingStateTree **a2)
{
  WebCore::ScrollingStateTree *v4;
  char *v5;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    IPC::ArgumentCoder<WebCore::ScrollingStateTree,void>::encode(a1, *a2);
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<WebCore::ScrollingStateTree,void>::encode(IPC::Encoder *a1, WebCore::ScrollingStateTree *a2)
{
  char v4;
  char v5;
  void *v6;
  WebCore::ScrollingStateFrameScrollingNode *v7;
  WebCore::ScrollingStateFrameScrollingNode *v8;

  v4 = *((_BYTE *)a2 + 73);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *((_BYTE *)a2 + 72);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  WebCore::ScrollingStateTree::rootStateNode(a2);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ScrollingStateFrameScrollingNode,WTF::RawPtrTraits<WebCore::ScrollingStateFrameScrollingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateFrameScrollingNode>>,void>::encode<IPC::Encoder,WebCore::ScrollingStateFrameScrollingNode>(a1, &v8);
  v7 = v8;
  v8 = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*((unsigned __int8 **)v7 + 1), v6);
}

void sub_196C92EDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a10 + 8), a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::encode(IPC::Encoder *a1, WebCore::ScrollingStateFrameScrollingNode *this)
{
  char isMainFrame;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  __int16 v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  char v39;
  int v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  char v55;

  isMainFrame = WebCore::ScrollingStateFrameScrollingNode::isMainFrame(this);
  *IPC::Encoder::grow(a1, 1uLL, 1) = isMainFrame;
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)this + 72);
  v7 = *((_QWORD *)this + 5);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
    {
      v54 = *(_OWORD *)((char *)this + 104);
      v10 = 1;
    }
    else
    {
      v10 = 0;
      LOBYTE(v54) = 0;
    }
    v55 = v10;
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
    v8 = *((_QWORD *)this + 5);
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_3;
  }
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)this + 32);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 4) == 0)
  {
LABEL_4:
    if ((v8 & 8) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)this + 34);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 8) == 0)
  {
LABEL_5:
    if ((v8 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)this + 36);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x10) == 0)
  {
LABEL_6:
    if ((v8 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  v11 = *((_DWORD *)this + 38);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *((_DWORD *)this + 39);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x20) == 0)
  {
LABEL_7:
    if ((v8 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  v13 = *((_DWORD *)this + 40);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  v14 = *((_DWORD *)this + 41);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v14;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x40) == 0)
  {
LABEL_8:
    if ((v8 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(a1, (char *)this + 438);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x80) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(a1, (uint64_t)this + 452);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(a1, (uint64_t)this + 168);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x200) == 0)
  {
LABEL_11:
    if ((v8 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  *(_QWORD *)&v54 = *((_QWORD *)this + 30);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x400) == 0)
  {
LABEL_12:
    if ((v8 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  *(_QWORD *)&v54 = *((_QWORD *)this + 31);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x800) == 0)
  {
LABEL_13:
    if ((v8 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  v15 = *((_BYTE *)this + 533);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x1000) == 0)
  {
LABEL_14:
    if ((v8 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_59:
  v16 = *((_QWORD *)this + 34);
  if (v16)
  {
    v54 = *((_OWORD *)this + 17);
    LOBYTE(v16) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v16;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x2000) == 0)
  {
LABEL_15:
    if ((v8 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_65;
  }
LABEL_62:
  v17 = *((_QWORD *)this + 39);
  if (v17)
  {
    v54 = *(_OWORD *)((char *)this + 312);
    LOBYTE(v17) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v17;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x4000) == 0)
  {
LABEL_16:
    if ((v8 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_68;
  }
LABEL_65:
  v18 = *((_QWORD *)this + 44);
  if (v18)
  {
    v54 = *((_OWORD *)this + 22);
    LOBYTE(v18) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v18;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x8000) == 0)
  {
LABEL_17:
    if ((v8 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_71;
  }
LABEL_68:
  v19 = *((_QWORD *)this + 49);
  if (v19)
  {
    v54 = *(_OWORD *)((char *)this + 392);
    LOBYTE(v19) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v19;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x10000) == 0)
  {
LABEL_18:
    if ((v8 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_72;
  }
LABEL_71:
  v20 = *((_BYTE *)this + 534);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x20000) == 0)
  {
LABEL_19:
    if ((v8 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_73;
  }
LABEL_72:
  IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(a1, (_DWORD *)this + 105);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x40000) == 0)
  {
LABEL_20:
    if ((v8 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_74;
  }
LABEL_73:
  v21 = *((_WORD *)this + 208);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v21;
  *IPC::Encoder::grow(a1, 1uLL, 1) = HIBYTE(v21);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x80000) == 0)
  {
LABEL_21:
    if ((v8 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_75;
  }
LABEL_74:
  v22 = *((_WORD *)this + 218);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v22;
  *IPC::Encoder::grow(a1, 1uLL, 1) = HIBYTE(v22);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x100000) == 0)
  {
LABEL_22:
    if ((v8 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_76;
  }
LABEL_75:
  v23 = *((_BYTE *)this + 532);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v23;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x200000) == 0)
  {
LABEL_23:
    if ((v8 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_77;
  }
LABEL_76:
  v24 = *((_BYTE *)this + 496);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v24;
  IPC::ArgumentCoder<std::optional<WebCore::KeyboardScroll>,void>::encode<IPC::Encoder,std::optional<WebCore::KeyboardScroll> const&>(a1, (uint64_t)this + 500);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x400000) == 0)
  {
LABEL_24:
    if ((v8 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_78;
  }
LABEL_77:
  v25 = *((_DWORD *)this + 213);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v25;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x800000) == 0)
  {
LABEL_25:
    if ((v8 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_87;
  }
LABEL_78:
  IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)this + 776);
  v26 = *((_QWORD *)this + 100);
  if (v26)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v27;
  v28 = *((_QWORD *)this + 100);
  if (!v28)
  {
    v29 = 0;
    v30 = 0;
LABEL_82:
    v31 = (char *)(v28 + 32 * v30);
    goto LABEL_83;
  }
  v30 = *(unsigned int *)(v28 - 4);
  v31 = (char *)(v28 + 32 * v30);
  if (!*(_DWORD *)(v28 - 12))
  {
    v29 = (char *)(v28 + 32 * v30);
    goto LABEL_82;
  }
  v29 = (char *)*((_QWORD *)this + 100);
  if ((_DWORD)v30)
  {
    v53 = 32 * v30;
    v29 = (char *)*((_QWORD *)this + 100);
    while (*v29 >= 0xFEu)
    {
      v29 += 32;
      v53 -= 32;
      if (!v53)
      {
        v29 = v31;
        break;
      }
    }
  }
LABEL_83:
  if (v28)
    v32 = (char *)(v28 + 32 * *(unsigned int *)(v28 - 4));
  else
    v32 = 0;
  while (v29 != v32)
  {
    v51 = v29 + 32;
    v52 = *v29;
    *IPC::Encoder::grow(a1, 1uLL, 1) = v52;
    IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, (uint64_t)(v29 + 8));
    v29 = v31;
    if (v51 != v31)
    {
      v29 = v51;
      while (*v29 >= 0xFEu)
      {
        v29 += 32;
        if (v29 == v31)
        {
          v29 = v31;
          break;
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v8 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_90;
  }
LABEL_87:
  v33 = *((_QWORD *)this + 69);
  if (v33)
  {
    v54 = *(_OWORD *)((char *)this + 552);
    LOBYTE(v33) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v33;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v8 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_93;
  }
LABEL_90:
  v34 = *((_QWORD *)this + 74);
  if (v34)
  {
    v54 = *((_OWORD *)this + 37);
    LOBYTE(v34) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v34;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_96;
  }
LABEL_93:
  v35 = *((_QWORD *)this + 79);
  if (v35)
  {
    v54 = *(_OWORD *)((char *)this + 632);
    LOBYTE(v35) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v35;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_99;
  }
LABEL_96:
  v36 = *((_QWORD *)this + 84);
  if (v36)
  {
    v54 = *((_OWORD *)this + 42);
    LOBYTE(v36) = 1;
  }
  else
  {
    LOBYTE(v54) = 0;
  }
  v55 = v36;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, (uint64_t *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_100;
  }
LABEL_99:
  v37 = *((_DWORD *)this + 215);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v37;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_101;
  }
LABEL_100:
  v38 = *((_DWORD *)this + 216);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v38;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v8 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_102;
  }
LABEL_101:
  v39 = *((_BYTE *)this + 868);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v39;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_103;
  }
LABEL_102:
  v40 = *((_DWORD *)this + 214);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v40;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v8 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_104;
  }
LABEL_103:
  v41 = *((_BYTE *)this + 869);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v41;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v8 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_105;
  }
LABEL_104:
  v42 = *((_BYTE *)this + 870);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v42;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v8 & 0x800000000) == 0)
      goto LABEL_37;
    goto LABEL_106;
  }
LABEL_105:
  v43 = *((_BYTE *)this + 871);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v43;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v8 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_107;
  }
LABEL_106:
  v44 = *((_BYTE *)this + 872);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v44;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x2000000000) == 0)
      goto LABEL_39;
    goto LABEL_108;
  }
LABEL_107:
  v45 = *((_BYTE *)this + 873);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v45;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v8 & 0x4000000000) == 0)
      goto LABEL_40;
    goto LABEL_109;
  }
LABEL_108:
  v54 = *(_OWORD *)((char *)this + 808);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)&v54);
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v8 & 0x8000000000) == 0)
      goto LABEL_41;
    goto LABEL_110;
  }
LABEL_109:
  v46 = *((_DWORD *)this + 206);
  v47 = *((_DWORD *)this + 207);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v46;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v47;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v8 & 0x10000000000) == 0)
      goto LABEL_42;
    goto LABEL_111;
  }
LABEL_110:
  v48 = *((_DWORD *)this + 208);
  v49 = *((_DWORD *)this + 209);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v48;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v49;
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v8 & 0x20000000000) == 0)
      return;
    goto LABEL_43;
  }
LABEL_111:
  v50 = *((_DWORD *)this + 212);
  *(_QWORD *)&v54 = *((_QWORD *)this + 105);
  DWORD2(v54) = v50;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(a1, (uint64_t)&v54);
  if ((*((_QWORD *)this + 5) & 0x20000000000) != 0)
  {
LABEL_43:
    v9 = *((_BYTE *)this + 874);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  }
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::FloatPoint const&>(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  return a1;
}

void IPC::ArgumentCoder<WTF::RefPtr<WebCore::ScrollingStateFrameScrollingNode,WTF::RawPtrTraits<WebCore::ScrollingStateFrameScrollingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateFrameScrollingNode>>,void>::encode<IPC::Encoder,WebCore::ScrollingStateFrameScrollingNode>(IPC::Encoder *a1, WebCore::ScrollingStateFrameScrollingNode **a2)
{
  WebCore::ScrollingStateFrameScrollingNode *v4;
  char *v5;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::encode(a1, *a2);
  }
  else
  {
    *v5 = 0;
  }
}

void WebKit::RemoteScrollingCoordinatorProxyIOS::connectStateNodeLayers(WebKit::RemoteScrollingCoordinatorProxyIOS *this, WebCore::ScrollingStateTree *a2, const WebKit::RemoteLayerTreeHost *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  CALayer *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  CALayer *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  CALayer *v33;
  void *v34;
  uint64_t v35;
  CALayer *v36;
  void *v37;
  uint64_t v38;
  CALayer *v39;
  void *v40;
  uint64_t v41;
  _OWORD v43[3];
  __int128 v44;

  v3 = *((_QWORD *)a2 + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 24 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *((_QWORD *)a2 + 5);
      if ((_DWORD)v4)
      {
        v7 = 24 * v4;
        v6 = *((_QWORD *)a2 + 5);
        while (*(_OWORD *)v6 == 0 || *(_QWORD *)(v6 + 8) == -1)
        {
          v6 += 24;
          v7 -= 24;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v6 = v3 + 24 * v4;
  }
  else
  {
    v6 = 0;
    LODWORD(v4) = 0;
  }
  v5 = v3 + 24 * v4;
  if (v3)
  {
LABEL_12:
    v9 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_17;
  }
  v9 = 0;
LABEL_17:
  if (v9 != v6)
  {
    v10 = (uint64_t *)((char *)a3 + 16);
    do
    {
      v11 = *(_QWORD *)(v6 + 16);
      if ((*(_BYTE *)(v11 + 40) & 1) != 0)
      {
        v43[0] = *(_OWORD *)(v11 + 104);
        if (*(_QWORD *)&v43[0])
        {
          v12 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, v43);
          v11 = *(_QWORD *)(v6 + 16);
          if (v12)
          {
            WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, *(CALayer **)(v12 + 40));
            WebCore::ScrollingStateNode::setLayer();
            WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v13);
            v11 = *(_QWORD *)(v6 + 16);
          }
        }
      }
      v14 = (__int128 *)(v11 + 312);
      v15 = *(unsigned __int8 *)(v11 + 16);
      if (v15 < 2)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v11 + 8));
        if (*(unsigned __int8 *)(v11 + 16) >= 2u)
          goto LABEL_90;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 8), v21);
        if ((*(_BYTE *)(v11 + 41) & 0x10) != 0)
        {
          v43[0] = *(_OWORD *)(v11 + 272);
          if (*(_QWORD *)&v43[0])
          {
            v22 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, v43);
            if (v22)
            {
              WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, *(CALayer **)(v22 + 40));
              WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
              WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v23);
            }
          }
        }
        v24 = *(_QWORD *)(v11 + 40);
        if ((v24 & 0x2000) != 0)
        {
          v44 = *v14;
          if ((_QWORD)v44
            && (v25 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, &v44)) != 0)
          {
            v26 = *(CALayer **)(v25 + 40);
          }
          else
          {
            v26 = 0;
          }
          WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, v26);
          WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
          WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v31);
          v24 = *(_QWORD *)(v11 + 40);
        }
        if ((v24 & 0x2000000) != 0)
        {
          v44 = *(_OWORD *)(v11 + 592);
          if ((_QWORD)v44
            && (v32 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, &v44)) != 0)
          {
            v33 = *(CALayer **)(v32 + 40);
          }
          else
          {
            v33 = 0;
          }
          WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, v33);
          WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((WebCore::ScrollingStateFrameScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
          WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v34);
          v24 = *(_QWORD *)(v11 + 40);
        }
        if ((v24 & 0x2000000000000) != 0)
        {
          v44 = *(_OWORD *)(v11 + 712);
          if ((_QWORD)v44
            && (v35 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, &v44)) != 0)
          {
            v36 = *(CALayer **)(v35 + 40);
          }
          else
          {
            v36 = 0;
          }
          WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, v36);
          WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer((WebCore::ScrollingStateFrameScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
          WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v37);
          v24 = *(_QWORD *)(v11 + 40);
        }
        if ((v24 & 0x40000000000) == 0)
          goto LABEL_77;
        v44 = *(_OWORD *)(v11 + 752);
        if ((_QWORD)v44
          && (v38 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, &v44)) != 0)
        {
          v39 = *(CALayer **)(v38 + 40);
        }
        else
        {
          v39 = 0;
        }
        WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, v39);
        WebCore::ScrollingStateFrameScrollingNode::setFooterLayer((WebCore::ScrollingStateFrameScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
      }
      else
      {
        if (v15 == 3)
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v11 + 8));
          if (*(_BYTE *)(v11 + 16) != 3)
          {
LABEL_90:
            __break(0xC471u);
            JUMPOUT(0x196C93D00);
          }
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 8), v27);
          if ((*(_BYTE *)(v11 + 41) & 0x10) != 0)
          {
            v43[0] = *(_OWORD *)(v11 + 272);
            if (*(_QWORD *)&v43[0])
            {
              v28 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, v43);
              if (v28)
              {
                WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, *(CALayer **)(v28 + 40));
                WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v29);
              }
            }
          }
          if ((*(_BYTE *)(v11 + 41) & 0x20) == 0)
            goto LABEL_77;
          v44 = *v14;
          if ((_QWORD)v44
            && (v30 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, &v44)) != 0)
          {
            v20 = *(CALayer **)(v30 + 40);
          }
          else
          {
            v20 = 0;
          }
        }
        else
        {
          if (v15 != 5)
            goto LABEL_77;
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v11 + 8));
          if (*(_BYTE *)(v11 + 16) != 5)
          {
            __break(0xC471u);
            JUMPOUT(0x196C93D20);
          }
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 8), v16);
          if ((*(_BYTE *)(v11 + 41) & 0x10) != 0)
          {
            v43[0] = *(_OWORD *)(v11 + 272);
            if (*(_QWORD *)&v43[0])
            {
              v17 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, v43);
              if (v17)
              {
                WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, *(CALayer **)(v17 + 40));
                WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
                WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v18);
              }
            }
          }
          if ((*(_BYTE *)(v11 + 41) & 0x20) == 0)
            goto LABEL_77;
          v44 = *v14;
          if ((_QWORD)v44
            && (v19 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v10, &v44)) != 0)
          {
            v20 = *(CALayer **)(v19 + 40);
          }
          else
          {
            v20 = 0;
          }
        }
        WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v43, v20);
        WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v43);
      }
      WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)v43, v40);
LABEL_77:
      v41 = v6 + 24;
      v6 = v5;
      if (v41 != v5)
      {
        v6 = v41;
        while (*(_OWORD *)v6 == 0 || *(_QWORD *)(v6 + 8) == -1)
        {
          v6 += 24;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v9);
  }
}

void sub_196C93D44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebCore::LayerRepresentation *a9)
{
  WebCore::LayerRepresentation::~LayerRepresentation(&a9, a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  int v3;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

void WebCore::LayerRepresentation::~LayerRepresentation(WebCore::LayerRepresentation **this, void *a2)
{
  WebCore::LayerRepresentation *v3;

  if (*((_DWORD *)this + 8) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(this[1], a2);
  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
      (*(void (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v3 + 16))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
}

void sub_196C93E50(_Unwind_Exception *exception_object)
{
  _DWORD **v1;
  _DWORD *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  _Unwind_Resume(exception_object);
}

WebCore::LayerRepresentation *WebCore::LayerRepresentation::LayerRepresentation(WebCore::LayerRepresentation *this, CALayer *a2)
{
  WebCore::LayerRepresentation *PlatformLayerTypeless;
  void *v4;

  *(_QWORD *)this = 0;
  PlatformLayerTypeless = (WebCore::LayerRepresentation *)WebCore::LayerRepresentation::makePlatformLayerTypeless((WebCore::LayerRepresentation *)a2, a2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = PlatformLayerTypeless;
  *((_DWORD *)this + 8) = 2;
  WebCore::LayerRepresentation::retainPlatformLayer(PlatformLayerTypeless, v4);
  return this;
}

void sub_196C93EC8(_Unwind_Exception *exception_object)
{
  _DWORD **v1;
  _DWORD *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::preferencesDidChange(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WebKit::WebPageProxy *v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebPageProxy *v8;
  WebKit::WebPageProxy *v9;

  if (!*((_BYTE *)this + 729))
  {
    v3 = this;
    if (*((_BYTE *)this + 728))
    {
      WebKit::WebPageProxy::updateThrottleState(this, a2, a3);
      WebKit::WebPageProxy::updateHiddenPageThrottlingAutoIncreases(v3, v4, v5);
      v6 = *((_QWORD *)v3 + 5);
      if (v6)
        v7 = *(_QWORD *)(v6 + 8);
      else
        v7 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 168))(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
      v8 = (WebKit::WebPageProxy *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = off_1E34D4FD8;
      *((_QWORD *)v8 + 1) = v3;
      v9 = v8;
      WebKit::WebPageProxy::forEachWebContentProcess(v3, &v9);
      this = v9;
      v9 = 0;
      if (this)
        return (WebKit::WebPageProxy *)(*(uint64_t (**)(WebKit::WebPageProxy *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

const char **IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v9;
  IPC::Encoder *v10;
  IPC::Encoder *v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  IPC::Encoder *v46;
  uint64_t v47;
  uint64_t v48;
  IPC::Encoder *v49;
  int v50;
  char *v51;
  IPC::Encoder *v52;
  IPC::Encoder *v53;
  IPC::Encoder *v54;
  IPC::Encoder *v55;
  int v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  char *v80;
  char v81;
  char v82;
  int v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  char *v90;
  __int16 v91;
  __int16 v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  int v115;
  char *v116;
  int v117;
  uint64_t v119;
  IPC::Encoder *v120;
  _DWORD *v121;

  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, (_DWORD *)a2);
  v4 = *(_WORD *)(a2 + 8);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(a1, a2 + 40);
  v5 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 88));
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  LOBYTE(v8) = *(_BYTE *)(a2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 112));
  LOBYTE(v8) = *(_BYTE *)(a2 + 120);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, (_DWORD *)(a2 + 124));
  v9 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 132));
  v10 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v9, (int *)(a2 + 140));
  v11 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v10, (int *)(a2 + 148));
  LODWORD(v8) = *(unsigned __int8 *)(a2 + 172);
  v12 = IPC::Encoder::grow(v11, 1uLL, 1);
  if ((_DWORD)v8)
  {
    *v12 = 1;
    if (!*(_BYTE *)(a2 + 172))
      goto LABEL_67;
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)(a2 + 156));
  }
  else
  {
    *v12 = 0;
  }
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 176));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 184));
  v13 = *(_BYTE *)(a2 + 192);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = *(_BYTE *)(a2 + 193);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  v15 = *(_BYTE *)(a2 + 194);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v16 = *(_BYTE *)(a2 + 195);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v16;
  v17 = *(_BYTE *)(a2 + 196);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v17;
  v18 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v18;
  v19 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v19;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 216));
  v20 = *(_BYTE *)(a2 + 224);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v20;
  v21 = *(unsigned int *)(a2 + 244);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v21;
  v22 = *(_DWORD *)(a2 + 244);
  if (v22)
  {
    v23 = *(_QWORD **)(a2 + 232);
    v24 = 312 * v22;
    do
    {
      IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(a1, v23);
      v23 += 39;
      v24 -= 312;
    }
    while (v24);
  }
  v25 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v25;
  v26 = *(_BYTE *)(a2 + 256);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v26;
  v27 = *(_BYTE *)(a2 + 257);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v27;
  v28 = *(_DWORD *)(a2 + 260);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v28;
  v29 = *(_DWORD *)(a2 + 264);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v29;
  v30 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v30;
  v31 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v31;
  LODWORD(v31) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v31;
  LODWORD(v31) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v31;
  v32 = *(_BYTE *)(a2 + 296);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v32;
  v33 = *(_BYTE *)(a2 + 297);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v33;
  v34 = *(_BYTE *)(a2 + 298);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v34;
  v35 = *(_BYTE *)(a2 + 299);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v35;
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, (_DWORD *)(a2 + 300));
  IPC::Encoder::operator<<<WebCore::IntPoint>(a1, (_DWORD *)(a2 + 308));
  v36 = *(_BYTE *)(a2 + 316);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v36;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(a1, a2 + 320);
  v37 = *(_BYTE *)(a2 + 332);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v37;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (int *)(a2 + 336));
  v38 = *(_BYTE *)(a2 + 344);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v38;
  v39 = *(_BYTE *)(a2 + 345);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v39;
  v40 = *(_BYTE *)(a2 + 346);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v40;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 352);
  v41 = *(_BYTE *)(a2 + 368);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v41;
  v42 = *(_BYTE *)(a2 + 369);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v42;
  v43 = *(_BYTE *)(a2 + 370);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v43;
  v44 = *(_BYTE *)(a2 + 371);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v44;
  v45 = *(_BYTE *)(a2 + 372);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v45;
  v46 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 376));
  v47 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)IPC::Encoder::grow(v46, 8uLL, 8) = v47;
  v48 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v48;
  v49 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 400));
  v50 = *(unsigned __int8 *)(a2 + 464);
  v51 = IPC::Encoder::grow(v49, 1uLL, 1);
  if (v50)
  {
    *v51 = 1;
    if (!*(_BYTE *)(a2 + 464))
      goto LABEL_67;
    IPC::ArgumentCoder<WebCore::ViewportArguments,void>::encode(a1, (char *)(a2 + 408));
  }
  else
  {
    *v51 = 0;
  }
  v52 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)(a2 + 468));
  v53 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v52, (int *)(a2 + 476));
  v54 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v53, (int *)(a2 + 484));
  v55 = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(v54, (int *)(a2 + 492));
  v56 = *(_DWORD *)(a2 + 500);
  *(_DWORD *)IPC::Encoder::grow(v55, 4uLL, 4) = v56;
  v57 = *(_DWORD *)(a2 + 504);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v57;
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(a1, (char *)(a2 + 508));
  LOBYTE(v57) = *(_BYTE *)(a2 + 511);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v57;
  LOBYTE(v57) = *(_BYTE *)(a2 + 512);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v57;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 520));
  LOBYTE(v57) = *(_BYTE *)(a2 + 528);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v57;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 536);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 552);
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 568);
  LOBYTE(v57) = *(_BYTE *)(a2 + 584);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v57;
  LOBYTE(v57) = *(_BYTE *)(a2 + 585);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v57;
  LOWORD(v57) = *(_WORD *)(a2 + 586);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v57;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 592));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 600));
  v58 = (_QWORD *)(a2 + 616);
  v59 = *(_QWORD *)(a2 + 616);
  if (v59)
    v60 = *(_DWORD *)(v59 - 12);
  else
    v60 = 0;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v60;
  v61 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a2 + 616));
  v62 = v61;
  v64 = v63;
  if (*v58)
    v65 = *v58 + 16 * *(unsigned int *)(*v58 - 4);
  else
    v65 = 0;
  if ((uint64_t *)v65 != v61)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v62);
      v66 = v62[1];
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v66;
      while (1)
      {
        v62 += 2;
        if (v62 == v64)
          break;
        if ((unint64_t)(*v62 + 1) > 1)
          goto LABEL_22;
      }
      v62 = v64;
LABEL_22:
      ;
    }
    while (v62 != (uint64_t *)v65);
  }
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 624);
  v67 = *(unsigned __int8 *)(a2 + 904);
  v68 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v67)
  {
    *v68 = 1;
    if (!*(_BYTE *)(a2 + 904))
      goto LABEL_67;
    IPC::ArgumentCoder<WebCore::ApplicationManifest,void>::encode(a1, a2 + 640);
  }
  else
  {
    *v68 = 0;
  }
  v69 = *(_BYTE *)(a2 + 912);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v69;
  v70 = *(_BYTE *)(a2 + 913);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v70;
  v71 = *(_BYTE *)(a2 + 914);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v71;
  v72 = *(_QWORD *)(a2 + 920);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v72;
  IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 928);
  IPC::VectorArgumentCoder<false,WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 944);
  IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 960);
  IPC::VectorArgumentCoder<false,WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 976);
  IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 992);
  LODWORD(v72) = *(unsigned __int8 *)(a2 + 1040);
  v73 = IPC::Encoder::grow(a1, 1uLL, 1);
  if ((_DWORD)v72)
  {
    *v73 = 1;
    if (!*(_BYTE *)(a2 + 1040))
      goto LABEL_67;
    v74 = *(_QWORD *)(a2 + 1008);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v74;
    LOBYTE(v74) = *(_BYTE *)(a2 + 1016);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v74;
    v75 = *(unsigned int *)(a2 + 1036);
    *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v75;
    v76 = *(_DWORD *)(a2 + 1036);
    if (v76)
    {
      v77 = *(uint64_t **)(a2 + 1024);
      v78 = 152 * v76;
      do
      {
        IPC::ArgumentCoder<WebKit::WebExtensionContextParameters,void>::encode(a1, v77);
        v77 += 19;
        v78 -= 152;
      }
      while (v78);
    }
  }
  else
  {
    *v73 = 0;
  }
  v79 = *(unsigned __int8 *)(a2 + 1056);
  v80 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v79)
  {
    *v80 = 1;
    if (!*(_BYTE *)(a2 + 1056))
      goto LABEL_67;
    IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 1048));
  }
  else
  {
    *v80 = 0;
  }
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 1064));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 1080));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 1088);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 1104));
  v81 = *(_BYTE *)(a2 + 1112);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v81;
  v82 = *(_BYTE *)(a2 + 1113);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v82;
  v83 = *(unsigned __int8 *)(a2 + 1144);
  v84 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v83)
  {
    *v84 = 1;
    if (!*(_BYTE *)(a2 + 1144))
      goto LABEL_67;
    v85 = *(_DWORD *)(a2 + 1132);
    *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v85;
    if (*(_DWORD *)(a2 + 1132))
    {
      v86 = *(unsigned int *)(a2 + 1128);
      if ((_DWORD)v86)
      {
        v87 = 8 * v86;
        v88 = *(uint64_t **)(a2 + 1120);
        while (!*v88)
        {
          ++v88;
          v87 -= 8;
          if (!v87)
            goto LABEL_47;
        }
      }
      else
      {
        v88 = *(uint64_t **)(a2 + 1120);
      }
      v119 = *(_QWORD *)(a2 + 1120) + 8 * v86;
LABEL_60:
      if (v88 != (uint64_t *)v119)
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v88);
        while (++v88 != (uint64_t *)v119)
        {
          if (*v88)
            goto LABEL_60;
        }
      }
    }
  }
  else
  {
    *v84 = 0;
  }
LABEL_47:
  v89 = *(unsigned __int8 *)(a2 + 1156);
  v90 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v89)
  {
    *v90 = 1;
    if (!*(_BYTE *)(a2 + 1156))
      goto LABEL_67;
    v91 = *(_WORD *)(a2 + 1152);
    *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v91;
    v92 = *(_WORD *)(a2 + 1154);
    *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v92;
  }
  else
  {
    *v90 = 0;
  }
  v93 = *(_BYTE *)(a2 + 1158);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v93;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 1160));
  v94 = *(_BYTE *)(a2 + 1168);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v94;
  v95 = *(_BYTE *)(a2 + 1169);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v95;
  v96 = *(_BYTE *)(a2 + 1170);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v96;
  v97 = *(_BYTE *)(a2 + 1171);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v97;
  v98 = *(_BYTE *)(a2 + 1172);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v98;
  v99 = *(_BYTE *)(a2 + 1173);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v99;
  v100 = *(_BYTE *)(a2 + 1174);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v100;
  v101 = *(_BYTE *)(a2 + 1175);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v101;
  v102 = *(_BYTE *)(a2 + 1176);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v102;
  v103 = *(_BYTE *)(a2 + 1177);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v103;
  v104 = *(_BYTE *)(a2 + 1178);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v104;
  v105 = *(_BYTE *)(a2 + 1179);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v105;
  v106 = *(_BYTE *)(a2 + 1180);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v106;
  v107 = *(_BYTE *)(a2 + 1181);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v107;
  v108 = *(_BYTE *)(a2 + 1182);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v108;
  v109 = *(_BYTE *)(a2 + 1183);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v109;
  v110 = *(_BYTE *)(a2 + 1184);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v110;
  v111 = *(_BYTE *)(a2 + 1185);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v111;
  v112 = *(_BYTE *)(a2 + 1186);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v112;
  v113 = *(_BYTE *)(a2 + 1187);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v113;
  v114 = *(_BYTE *)(a2 + 1188);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v114;
  v115 = *(unsigned __int8 *)(a2 + 1392);
  v116 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v115)
    goto LABEL_56;
  *v116 = 1;
  if (!*(_BYTE *)(a2 + 1392))
    goto LABEL_67;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 1192));
  IPC::ArgumentCoder<WebKit::FrameTreeCreationParameters,void>::encode(a1, (uint64_t *)(a2 + 1232));
  v117 = *(unsigned __int8 *)(a2 + 1384);
  v116 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v117)
  {
LABEL_56:
    *v116 = 0;
    goto LABEL_57;
  }
  *v116 = 1;
  if (*(_BYTE *)(a2 + 1384))
  {
    IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode(a1, (uint64_t *)(a2 + 1272));
LABEL_57:
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t *)(a2 + 1400));
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t *)(a2 + 1424));
    IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 1448);
    IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 1464);
    return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 1480));
  }
LABEL_67:
  v120 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
  return (const char **)IPC::Encoder::operator<<<WebCore::IntPoint>(v120, v121);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::IntPoint>(IPC::Encoder *a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;

  v2 = a2;
  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LODWORD(v2) = v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = (_DWORD)v2;
  return a1;
}

void IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  _QWORD *v9;

  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  if (*(_DWORD *)(a2 + 12))
  {
    v5 = *(_QWORD **)a2;
    v6 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      for (i = *(_QWORD **)a2; !*i; i += 3)
      {
        v7 -= 24;
        if (!v7)
          return;
      }
    }
    else
    {
      i = *(_QWORD **)a2;
    }
    v9 = &v5[3 * v6];
LABEL_9:
    if (i != v9)
    {
      IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,void>::encode<IPC::Encoder,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>> const&>(a1, (uint64_t)i);
      while (1)
      {
        i += 3;
        if (i == v9)
          break;
        if (*i)
          goto LABEL_9;
      }
    }
  }
}

void IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      v3 = *(_BYTE *)a2;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
    }
    else
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&>(v4);
    }
  }
  else
  {
    IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&,0ul,1ul>(a1, (uint64_t *)a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&,0ul>(a1, a2, a3);
  }
  else if (*(_DWORD *)(a2 + 8))
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,void>::encode<IPC::Encoder,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>> const&>(v3);
  }
  else
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  }
}

void IPC::ArgumentCoder<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,void>::encode<IPC::Encoder,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_DWORD *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&>(a1, a2 + 8, v4);
}

void IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 24 * v5;
    do
    {
      IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode((uint64_t)a1, v6);
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
}

void IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2, uint64_t a3)
{
  int v3;

  if (a3 == 2)
  {
    if (*((_DWORD *)a2 + 2) == 2)
    {
      v3 = *(_DWORD *)a2;
      *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v3;
      return;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&,0ul,1ul,2ul>(a1, a2, a3);
}

void IPC::ArgumentCoder<std::variant<WTF::String,BOOL,unsigned int,double>,void>::encode<IPC::Encoder,std::variant<WTF::String,BOOL,unsigned int,double> const&,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  IPC::Encoder *v4;
  int *v5;

  if (a3 == 3)
  {
    if (*((_DWORD *)a2 + 2) == 3)
    {
      v3 = *a2;
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v3;
    }
    else
    {
      v4 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(v4, v5);
    }
  }
}

void IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(IPC::Encoder *a1, int *a2)
{
  int v4;
  char *v5;
  int v6;
  IPC::Encoder *v7;
  _QWORD **v8;

  v4 = *((unsigned __int8 *)a2 + 4);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*((_BYTE *)a2 + 4))
    {
      v6 = *a2;
      *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
    }
    else
    {
      v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v7, v8);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(IPC::Encoder *this, _QWORD **a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (*a2)
    v4 = *((_DWORD *)*a2 - 3);
  else
    v4 = 0;
  *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v4;
  v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v6 = v5;
  v8 = v7;
  if (*a2)
    v9 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if ((uint64_t *)v9 != v5)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v6);
      while (++v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_11;
      }
      v6 = v8;
LABEL_11:
      ;
    }
    while (v6 != (uint64_t *)v9);
  }
}

char *IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return (char *)IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (int *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = &v6[15 * v5];
    do
    {
      IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::encode(a1, v6);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v6 + 10);
      v6 += 15;
    }
    while (v6 != v7);
  }
}

char *IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 120 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::WebUserStyleSheetData,void>::encode(a1, v7);
      v7 += 15;
      v8 -= 120;
    }
    while (v8);
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::encode(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
}

char *IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(IPC::Encoder *a1, char *a2)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char *result;

  v2 = a2;
  v4 = *a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = v2[1];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = v2[2];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  v8 = v2[4];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = v2[5];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = v2[6];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = v2[7];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
  v12 = v2[8];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
  v13 = v2[9];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = v2[10];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  LOBYTE(v2) = v2[11];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::VectorArgumentCoder<false,WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  IPC::VectorArgumentCoder<false,WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  v5 = *(unsigned int *)(a2 + 68);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  v7 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a2 + 56);
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      result = IPC::Encoder::grow(a1, 8uLL, 8);
      *(_QWORD *)result = v10;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  int *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(int **)a2;
    v8 = 40 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::SnapOffset<float>,void>::encode(a1, v7);
      v7 += 10;
      v8 -= 40;
    }
    while (v8);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  int *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(int **)a2;
    v8 = 16 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, v7);
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  _BYTE v13[24];

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  WebCore::SharedMemory::createHandle();
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, (unint64_t)v13);
  if (v13[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
  v4 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = a2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = a2[6];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = a2[7];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
  v10 = a2[8];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  v11 = a2[9];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v11;
  return result;
}

void sub_196C95684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = a2[1];
    v7 = *a2;
    v8 = a2[2] - *a2;
    if (v6 <= v8)
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          v12 = *a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    else
    {
      v9 = (unsigned __int8 *)(v7 + v8);
      a2[2] = (uint64_t)(v9 + 1);
      if (v7)
      {
        v10 = *v9;
        if (v10 < 2)
        {
          *(_QWORD *)a1 = result;
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_9;
      }
      v11 = v6;
      v12 = 0;
    }
    v6 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v7 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
LABEL_9:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v7);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22TakeAllMessagesForPortEN6WebKit29NetworkConnectionToWebProcessES8_FvRKN7WebCore21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS9_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_yEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0A18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WebKit::WebPageDebuggable::url@<X0>(unsigned __int8 **this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  *a2 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34DD040;
  v4[1] = this;
  v4[2] = this;
  v4[3] = a2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v7);
  v5 = v9;
  if (v9)
  {
    *(_QWORD *)a1 = v7;
    v6 = v8;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 8) = v6;
    result = WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  uint64_t v3;

  v3 = IPC::Decoder::decode<unsigned int>(a1);
  if ((v3 & 0xFF00000000) != 0)
    return IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v3);
  else
    return 0;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder,unsigned int>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;

  result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (!v4)
    return 0;
  if (*(_BYTE *)(a2 + 4))
  {
    LODWORD(v5) = *(_DWORD *)a2;
    HIDWORD(v5) = result;
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::GPUProcess::AddSession,WebKit::GPUProcess,WebKit::GPUProcess,void ()(PAL::SessionID,WebKit::GPUProcessSessionParameters &&)>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  _BYTE v5[40];

  IPC::Decoder::decode<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>>(&v4, a1);
  if (v5[32])
    WebKit::GPUProcess::addSession(a2, v4, (uint64_t)v5);
  return std::__optional_destruct_base<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v4);
}

WTF::StringImpl **WebKit::GPUProcess::addSession(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  const WebKit::SandboxExtensionHandle *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  WTF::StringImpl *v11[2];
  WTF::StringImpl *v12;

  v12 = a2;
  WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 8), a2);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 24), v5);
  v6 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v7 = *(WTF::StringImpl **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  v11[0] = v6;
  v11[1] = v7;
  WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::add<WebKit::GPUProcess::GPUSession>((uint64_t)&v10, (uint64_t *)(a1 + 192), &v12, (uint64_t)v11);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v11, v8);
}

uint64_t WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::add<WebKit::GPUProcess::GPUSession>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  WTF::StringImpl **v23;
  int v24;
  uint64_t v25;
  unsigned int v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v11 = result & v9;
  v12 = (WTF::StringImpl **)(v8 + 24 * (result & v9));
  v13 = *v12;
  v14 = *a3;
  if (*v12)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v13 == v14)
      {
        v25 = *a2;
        if (*a2)
          v26 = *(_DWORD *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 24 * v26;
        goto LABEL_12;
      }
      if (v13 == (WTF::StringImpl *)-1)
        v23 = v12;
      v11 = (v11 + v24) & v9;
      v12 = (WTF::StringImpl **)(v8 + 24 * v11);
      v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v12 = v23;
    }
  }
  *v12 = v14;
  WTF::String::operator=(v12 + 1, (WTF::StringImpl *)a4);
  result = (uint64_t)WTF::String::operator=(v12 + 2, (WTF::StringImpl *)(a4 + 8));
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_24:
    result = (uint64_t)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, (WTF::StringImpl *)v12);
    v12 = (WTF::StringImpl **)result;
    v17 = *a2;
    if (*a2)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_24;
LABEL_11:
  v21 = v17 + 24 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (WTF::StringImpl *)v6;
    do
    {
      if (*(_QWORD *)v16 != -1)
      {
        if (*(_QWORD *)v16)
        {
          v17 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy(v16, v18);
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy(v16, v10);
        }
      }
      v16 = (WTF::StringImpl *)((char *)v16 + 24);
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

unint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[40])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder,PAL::SessionID>((uint64_t)a1, a2, (uint64_t)v6);
  *a1 = 0;
  a1[40] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder,PAL::SessionID>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  result = IPC::Decoder::decode<WebKit::GPUProcessSessionParameters>((uint64_t)&v8, a2);
  v6 = v10;
  if (!v10)
  {
    *(_BYTE *)a1 = 0;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a3 + 8))
  {
    *(_QWORD *)a1 = *(_QWORD *)a3;
    v7 = v9;
    *(_OWORD *)(a1 + 8) = v8;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)(a1 + 24) = v7;
    v6 = 1;
LABEL_4:
    *(_BYTE *)(a1 + 40) = v6;
    return std::__optional_destruct_base<WebKit::GPUProcessSessionParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8);
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::GPUProcessSessionParameters>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const char **v6;
  uint64_t v7;
  const char **v8;
  WTF::StringImpl *v9;
  _OWORD v11[2];
  const char **v12;
  char v13;
  uint64_t v14;
  char v15;
  const char **v16;
  char v17;
  uint64_t v18;
  char v19;

  IPC::Decoder::decode<WTF::String>(a1, &v18);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::String>(a1, &v14);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v12);
  if (*a1)
  {
    if (v19)
    {
      v5 = v18;
      v18 = 0;
      if (v17)
      {
        v6 = v16;
        v16 = 0;
        if (v15)
        {
          v7 = v14;
          v14 = 0;
          if (v13)
          {
            v8 = v12;
            v12 = 0;
            *(_QWORD *)a2 = v5;
            *(_QWORD *)(a2 + 8) = v6;
            memset(v11, 0, sizeof(v11));
            *(_QWORD *)(a2 + 16) = v7;
            *(_QWORD *)(a2 + 24) = v8;
            *(_BYTE *)(a2 + 32) = 1;
            WebKit::GPUProcessSessionParameters::~GPUProcessSessionParameters((const char ***)v11);
            goto LABEL_7;
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
LABEL_7:
  if (v13)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v12);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v4);
  if (v17)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v9);
}

void sub_196C96238(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  WTF::StringImpl *v10;
  va_list va;

  va_start(va, a8);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (*(_BYTE *)(v8 - 40))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v8 - 48));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v8 - 32, v10);
  _Unwind_Resume(a1);
}

void WebKit::GPUProcessSessionParameters::~GPUProcessSessionParameters(const char ***this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const char **v5;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 3);
  v3 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 1);
  v5 = *this;
  *this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t IPC::ArgumentCoder<WebKit::LoadParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  void *v4;
  uint64_t v5;
  WTF::RefCountedBase *v6;
  WTF::RefCountedBase *v7;
  unsigned __int16 ShouldOpenExternalURLs;
  unsigned __int16 v9;
  unsigned __int16 ShouldRelaxThirdPartyCookie;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned __int16 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  _QWORD v51[14];
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  char v65;
  const char **v66;
  char v67;
  _BYTE v68[192];
  uint64_t v69;
  char v70;
  __int128 v71;
  char v72;
  char v73;
  uint64_t v74;
  char v75;
  WTF::RefCountedBase *v76;
  uint64_t v77;
  __int128 v78;
  char v79;
  _QWORD v80[26];
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[128];
  uint64_t v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  int v93;
  _WORD v94[32];
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  char v99;
  char v100;
  __int16 v101;
  char v102;
  _BYTE v103[56];
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::PublicSuffix>(&v74, a1);
  v39 = IPC::Decoder::decode<unsigned long long>(a1);
  v40 = v3;
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)&v71);
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v68);
  if (v70)
  {
    IPC::Decoder::decode<IPC::FormDataReference>(a1, &v76);
    if ((_BYTE)v77)
    {
      if (!v70)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      v5 = (uint64_t)v76;
      v76 = 0;
      v51[0] = v5;
      WebCore::ResourceRequestBase::setHTTPBody();
      v6 = (WTF::RefCountedBase *)v51[0];
      v51[0] = 0;
      if (v6)
        WTF::RefCounted<WebCore::FormData>::deref(v6);
      if ((_BYTE)v77)
      {
        v7 = v76;
        v76 = 0;
        if (v7)
          WTF::RefCounted<WebCore::FormData>::deref(v7);
      }
    }
  }
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v66);
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v64);
  IPC::Decoder::decode<WTF::String>(a1, &v62);
  IPC::Decoder::decode<WTF::String>(a1, &v60);
  IPC::Decoder::decode<WTF::String>(a1, &v58);
  IPC::Decoder::decode<WTF::String>(a1, &v56);
  IPC::Decoder::decode<WTF::String>(a1, &v54);
  IPC::Decoder::decode<std::optional<WebKit::WebsitePoliciesData>>((uint64_t)v51, a1);
  ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(a1);
  v9 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(a1);
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v49);
  v38 = IPC::Decoder::decode<WebCore::LockHistory>(a1);
  ShouldRelaxThirdPartyCookie = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(a1);
  v11 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v47);
  v12 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<std::optional<WebCore::OwnerPermissionsPolicyData>>(v103, a1);
  v13 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(a1);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v44);
  v14 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<std::optional<double>>(a1, &v41);
  v15 = IPC::Decoder::decode<BOOL>(a1);
  v16 = IPC::Decoder::decode<std::optional<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>>(a1);
  if (*a1)
  {
    if (v75)
    {
      v17 = v74;
      v74 = 0;
      v76 = (WTF::RefCountedBase *)v17;
      if (v40)
      {
        v77 = v39;
        if (v73)
        {
          v78 = v71;
          v79 = v72;
          if (v70)
          {
            v18 = v16;
            WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v80, (uint64_t)v68);
            v19 = v69;
            v69 = 0;
            v80[24] = v19;
            if (v67)
            {
              v20 = v66;
              v66 = 0;
              v80[25] = v20;
              if (v65)
              {
                v81 = v64;
                if (v63)
                {
                  v21 = v62;
                  v62 = 0;
                  v82 = v21;
                  if (v61)
                  {
                    v22 = v60;
                    v60 = 0;
                    v83 = v22;
                    if (v59)
                    {
                      v23 = v58;
                      v58 = 0;
                      v84 = v23;
                      if (v57)
                      {
                        v24 = v56;
                        v56 = 0;
                        v85 = v24;
                        if (v55)
                        {
                          v25 = v54;
                          v54 = 0;
                          v86 = v25;
                          if (v53)
                          {
                            std::__optional_move_base<WebKit::WebsitePoliciesData,false>::__optional_move_base[abi:sn180100](v87, (uint64_t)v51);
                            if (ShouldOpenExternalURLs > 0xFFu)
                            {
                              v87[120] = ShouldOpenExternalURLs;
                              if (v9 > 0xFFu)
                              {
                                v87[121] = v9;
                                if (v50)
                                {
                                  v26 = v49;
                                  if (v49)
                                    CFRetain(*(CFTypeRef *)(v49 + 8));
                                  v88 = v26;
                                  if (v38 > 0xFFu)
                                  {
                                    v89 = v38;
                                    if (ShouldRelaxThirdPartyCookie > 0xFFu)
                                    {
                                      v90 = ShouldRelaxThirdPartyCookie;
                                      if (v11 > 0xFFu)
                                      {
                                        v91 = v11;
                                        if (v48)
                                        {
                                          v27 = v47;
                                          v47 = 0;
                                          v92 = v27;
                                          if ((v12 & 0xFF00000000) != 0)
                                          {
                                            v93 = v12;
                                            if (v104)
                                            {
                                              std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100]((uint64_t)v94, (uint64_t)v103);
                                              if ((v13 & 0xFF0000) != 0)
                                              {
                                                v94[28] = v13;
                                                if (v46)
                                                {
                                                  v95 = v44;
                                                  v96 = v45;
                                                  if (v14 > 0xFFu)
                                                  {
                                                    v97 = v14;
                                                    if (v43)
                                                    {
                                                      v98 = v41;
                                                      v99 = v42;
                                                      if (v15 > 0xFFu)
                                                      {
                                                        v100 = v15;
                                                        if (WORD2(v18))
                                                        {
                                                          v101 = v18;
                                                          v102 = BYTE2(v18);
                                                          *(_BYTE *)(WebKit::LoadParameters::LoadParameters((uint64_t)a2, (uint64_t *)&v76)+ 576) = 1;
                                                          WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)&v76, v28);
                                                          goto LABEL_40;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_51;
  }
LABEL_52:
  *a2 = 0;
  a2[576] = 0;
LABEL_40:
  if (v104)
    std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v103, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v4);
  if (v50)
  {
    v30 = v49;
    v49 = 0;
    if (v30)
      CFRelease(*(CFTypeRef *)(v30 + 8));
  }
  if (v53 && v52)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v51, v29);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v29);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v31);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v32);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v33);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v34);
  if (v67)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v66);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v68);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v74, v35);
}

void sub_196C96804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::ResourceRequest *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::RefCountedBase *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,__int16 a55)
{
  WTF::RefCountedBase *v56;
  WTF::StringImpl *v57;

  if (a24)
    WTF::RefCounted<WebCore::FormData>::deref(a24);
  if (LOBYTE(STACK[0x278]))
  {
    v56 = (WTF::RefCountedBase *)STACK[0x270];
    STACK[0x270] = 0;
    if (v56)
      WTF::RefCounted<WebCore::FormData>::deref(v56);
  }
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a55);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x260], v57);
  _Unwind_Resume(a1);
}

void sub_196C96A54()
{
  JUMPOUT(0x196C969C8);
}

void sub_196C96A60()
{
  JUMPOUT(0x196C969D0);
}

void sub_196C96A74()
{
  JUMPOUT(0x196C969ECLL);
}

void sub_196C96A84()
{
  JUMPOUT(0x196C96A04);
}

void sub_196C96A8C()
{
  JUMPOUT(0x196C96A0CLL);
}

void sub_196C96A94()
{
  JUMPOUT(0x196C96A14);
}

void sub_196C96A9C()
{
  JUMPOUT(0x196C96A1CLL);
}

void sub_196C96AA4()
{
  JUMPOUT(0x196C96A24);
}

void sub_196C96AAC()
{
  JUMPOUT(0x196C96A2CLL);
}

void sub_196C96AC0()
{
  JUMPOUT(0x196C96A44);
}

void sub_196C96AD0()
{
  JUMPOUT(0x196C96A4CLL);
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::decode(_BYTE *a1, uint64_t *a2)
{
  char v3;
  char v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  char v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char **v35;
  uint64_t v36;
  const char **v37;
  uint64_t v38;
  const char **v39;
  uint64_t v40;
  const char **v41;
  uint64_t v42;
  const char **v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  CFTypeRef v66;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned __int16 v73;
  unsigned int v74;
  unsigned __int16 v75;
  unsigned __int16 v76;
  unsigned __int16 v77;
  uint64_t v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  unsigned __int16 v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  unint64_t v87;
  char v88;
  __int128 v90;
  _BYTE v91[7];
  __int128 v92;
  __int128 v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  const char **v99;
  char v100;
  uint64_t v101;
  char v102;
  const char **v103;
  char v104;
  uint64_t v105;
  char v106;
  const char **v107;
  char v108;
  uint64_t v109;
  char v110;
  const char **v111;
  char v112;
  uint64_t v113;
  char v114;
  const char **v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  const char **v139;
  char v140;
  uint64_t v141;
  char v142;
  const char **v143;
  char v144;
  uint64_t v145;
  char v146;
  const char **v147;
  char v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  char v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  CFTypeRef cf;
  char v164;
  uint64_t v165;
  char v166;
  _QWORD v167[2];
  __int128 v168;
  uint64_t v169;
  char v170;
  CFTypeRef v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  const char **v182;
  uint64_t v183;
  const char **v184;
  char v185;
  char v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  const char **v195;
  uint64_t v196;
  char v197;
  char v198;
  char v199;
  char v200;
  int v201;
  char v202;
  char v203;
  char v204;
  char v205;
  int v206;
  char v207;
  char v208;
  __int16 v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  char v215;
  char v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  const char **v228;
  uint64_t v229;
  const char **v230;
  uint64_t v231;
  const char **v232;
  uint64_t v233;
  const char **v234;
  uint64_t v235;
  const char **v236;
  char v237;
  char v238;
  char v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  __int128 v244;
  _DWORD v245[2];
  __int128 v246;
  __int128 v247;
  _BYTE v248[8];
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  char v255;
  __int128 v256;
  char v257;
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  v87 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v88 = v3;
  IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(&v256, a2);
  IPC::Decoder::decode<WTF::String>(a2, &v165);
  v86 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2);
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a2, (uint64_t)&cf);
  IPC::Decoder::decode<WTF::String>(a2, &v161);
  IPC::Decoder::decode<WTF::String>(a2, &v159);
  v85 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<WTF::URL>(a2, &v155);
  IPC::Decoder::decode<WTF::URL>(a2, &v151);
  IPC::Decoder::decode<WTF::String>(a2, &v149);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v147);
  IPC::Decoder::decode<WTF::String>(a2, &v145);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v143);
  v84 = IPC::Decoder::decode<BOOL>(a2);
  v83 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>(a2, (uint64_t)v248);
  IPC::Decoder::decode<WTF::String>(a2, &v141);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v139);
  IPC::Decoder::decode<WTF::String>(a2, &v137);
  v82 = IPC::Decoder::decode<BOOL>(a2);
  v81 = IPC::Decoder::decode<BOOL>(a2);
  v80 = IPC::Decoder::decode<BOOL>(a2);
  v79 = IPC::Decoder::decode<BOOL>(a2);
  v78 = IPC::Decoder::decode<unsigned int>(a2);
  v77 = IPC::Decoder::decode<BOOL>(a2);
  v76 = IPC::Decoder::decode<BOOL>(a2);
  v75 = IPC::Decoder::decode<BOOL>(a2);
  v74 = IPC::Decoder::decode<BOOL>(a2);
  v70 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  v71 = v4;
  v73 = IPC::Decoder::decode<BOOL>(a2);
  v72 = IPC::Decoder::decode<std::optional<BOOL>>(a2);
  v5 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<WTF::String>(a2, &v135);
  IPC::Decoder::decode<WTF::String>(a2, &v133);
  IPC::Decoder::decode<WTF::String>(a2, &v131);
  v6 = IPC::Decoder::decode<BOOL>(a2);
  v7 = IPC::Decoder::decode<BOOL>(a2);
  v8 = IPC::Decoder::decode<BOOL>(a2);
  v9 = IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(a2);
  v68 = IPC::Decoder::decode<unsigned long long>(a2);
  v69 = v10;
  IPC::Decoder::decode<std::optional<double>>(a2, &v128);
  IPC::Decoder::decode<std::optional<double>>(a2, &v125);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v122);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v119);
  IPC::Decoder::decode<WTF::String>(a2, &v117);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v115);
  IPC::Decoder::decode<WTF::String>(a2, &v113);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v111);
  IPC::Decoder::decode<WTF::String>(a2, &v109);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v107);
  IPC::Decoder::decode<WTF::String>(a2, &v105);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v103);
  IPC::Decoder::decode<WTF::String>(a2, &v101);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v99);
  v11 = IPC::Decoder::decode<BOOL>(a2);
  v12 = IPC::Decoder::decode<BOOL>(a2);
  v13 = IPC::Decoder::decode<BOOL>(a2);
  v14 = IPC::Decoder::decode<BOOL>(a2);
  IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v95, a2);
  IPC::Decoder::decode<WebKit::ResourceLoadStatisticsParameters>((uint64_t)&v90, a2);
  if (*a2)
  {
    if (v88)
    {
      v167[0] = v87;
      if (v257)
      {
        v168 = v256;
        if (v166)
        {
          v16 = v165;
          v165 = 0;
          v169 = v16;
          if (v86 > 0xFFu)
          {
            v170 = v86;
            if (v164)
            {
              v17 = cf;
              cf = 0;
              v171 = v17;
              if (v162)
              {
                v18 = v161;
                v161 = 0;
                v172 = v18;
                if (v160)
                {
                  v19 = v159;
                  v159 = 0;
                  v173 = v19;
                  if (v85 > 0xFFu)
                  {
                    v174 = v85;
                    if (v158)
                    {
                      v20 = v155;
                      v155 = 0;
                      v175 = v20;
                      v176 = v156;
                      v177 = v157;
                      LODWORD(v156) = v156 & 0xFFFFFFFE;
                      if (v154)
                      {
                        v21 = v151;
                        v151 = 0;
                        v178 = v21;
                        v179 = v152;
                        v180 = v153;
                        LODWORD(v152) = v152 & 0xFFFFFFFE;
                        if (v150)
                        {
                          v22 = v149;
                          v149 = 0;
                          v181 = v22;
                          if (v148)
                          {
                            v23 = v147;
                            v147 = 0;
                            v182 = v23;
                            if (v146)
                            {
                              v24 = v145;
                              v145 = 0;
                              v183 = v24;
                              if (v144)
                              {
                                v25 = v143;
                                v143 = 0;
                                v184 = v25;
                                if (v84 > 0xFFu)
                                {
                                  v185 = v84;
                                  if (v83 > 0xFFu)
                                  {
                                    v186 = v83;
                                    if (v255)
                                    {
                                      v187 = v248[0];
                                      LOBYTE(v188) = 0;
                                      v190 = 0;
                                      if (v251)
                                      {
                                        v188 = v249;
                                        v26 = v250;
                                        v249 = 0;
                                        v250 = 0;
                                        v189 = v26;
                                        v190 = 1;
                                      }
                                      v27 = v252;
                                      v252 = 0;
                                      v191 = v27;
                                      v192 = v253;
                                      v193 = v254;
                                      v15 = (WTF::StringImpl *)v74;
                                      if (v142)
                                      {
                                        v28 = v141;
                                        v141 = 0;
                                        v194 = v28;
                                        if (v140)
                                        {
                                          v29 = v139;
                                          v139 = 0;
                                          v195 = v29;
                                          if (v138)
                                          {
                                            v30 = v137;
                                            v137 = 0;
                                            v196 = v30;
                                            if (v82 > 0xFFu)
                                            {
                                              v197 = v82;
                                              if (v81 > 0xFFu)
                                              {
                                                v198 = v81;
                                                if (v80 > 0xFFu)
                                                {
                                                  v199 = v80;
                                                  if (v79 > 0xFFu)
                                                  {
                                                    v200 = v79;
                                                    if ((v78 & 0xFF00000000) != 0)
                                                    {
                                                      v201 = v78;
                                                      if (v77 > 0xFFu)
                                                      {
                                                        v202 = v77;
                                                        if (v76 > 0xFFu)
                                                        {
                                                          v203 = v76;
                                                          if (v75 > 0xFFu)
                                                          {
                                                            v204 = v75;
                                                            if ((unsigned __int16)v74 > 0xFFu)
                                                            {
                                                              v205 = v74;
                                                              if (v71)
                                                              {
                                                                v206 = v70;
                                                                v207 = BYTE4(v70);
                                                                if (v73 > 0xFFu)
                                                                {
                                                                  v208 = v73;
                                                                  if ((v72 & 0xFF0000) != 0)
                                                                  {
                                                                    v209 = v72;
                                                                    if (v5 > 0xFFu)
                                                                    {
                                                                      v210 = v5;
                                                                      if (v136)
                                                                      {
                                                                        v31 = v135;
                                                                        v135 = 0;
                                                                        v211 = v31;
                                                                        if (v134)
                                                                        {
                                                                          v32 = v133;
                                                                          v133 = 0;
                                                                          v212 = v32;
                                                                          if (v132)
                                                                          {
                                                                            v33 = v131;
                                                                            v131 = 0;
                                                                            v213 = v33;
                                                                            if (v6 > 0xFFu)
                                                                            {
                                                                              v214 = v6;
                                                                              if (v7 > 0xFFu)
                                                                              {
                                                                                v215 = v7;
                                                                                if (v8 > 0xFFu)
                                                                                {
                                                                                  v216 = v8;
                                                                                  if (v9 > 0xFFu)
                                                                                  {
                                                                                    v217 = v9;
                                                                                    if (v69)
                                                                                    {
                                                                                      v218 = v68;
                                                                                      if (v130)
                                                                                      {
                                                                                        v219 = v128;
                                                                                        v220 = v129;
                                                                                        if (v127)
                                                                                        {
                                                                                          v221 = v125;
                                                                                          v222 = v126;
                                                                                          if (v124)
                                                                                          {
                                                                                            v223 = v122;
                                                                                            v224 = v123;
                                                                                            if (v121)
                                                                                            {
                                                                                              v225 = v119;
                                                                                              v226 = v120;
                                                                                              if (v118)
                                                                                              {
                                                                                                v34 = v117;
                                                                                                v117 = 0;
                                                                                                v227 = v34;
                                                                                                if (v116)
                                                                                                {
                                                                                                  v35 = v115;
                                                                                                  v115 = 0;
                                                                                                  v228 = v35;
                                                                                                  if (v114)
                                                                                                  {
                                                                                                    v36 = v113;
                                                                                                    v113 = 0;
                                                                                                    v229 = v36;
                                                                                                    if (v112)
                                                                                                    {
                                                                                                      v37 = v111;
                                                                                                      v111 = 0;
                                                                                                      v230 = v37;
                                                                                                      if (v110)
                                                                                                      {
                                                                                                        v38 = v109;
                                                                                                        v109 = 0;
                                                                                                        v231 = v38;
                                                                                                        if (v108)
                                                                                                        {
                                                                                                          v39 = v107;
                                                                                                          v107 = 0;
                                                                                                          v232 = v39;
                                                                                                          if (v106)
                                                                                                          {
                                                                                                            v40 = v105;
                                                                                                            v105 = 0;
                                                                                                            v233 = v40;
                                                                                                            if (v104)
                                                                                                            {
                                                                                                              v41 = v103;
                                                                                                              v103 = 0;
                                                                                                              v234 = v41;
                                                                                                              if (v102)
                                                                                                              {
                                                                                                                v42 = v101;
                                                                                                                v101 = 0;
                                                                                                                v235 = v42;
                                                                                                                if (v100)
                                                                                                                {
                                                                                                                  v43 = v99;
                                                                                                                  v99 = 0;
                                                                                                                  v236 = v43;
                                                                                                                  if (v11 > 0xFFu)
                                                                                                                  {
                                                                                                                    v237 = v11;
                                                                                                                    if (v12 > 0xFFu)
                                                                                                                    {
                                                                                                                      v238 = v12;
                                                                                                                      if (v13 > 0xFFu)
                                                                                                                      {
                                                                                                                        v239 = v13;
                                                                                                                        if (v14 > 0xFFu)
                                                                                                                        {
                                                                                                                          v240 = v14;
                                                                                                                          if (v98)
                                                                                                                          {
                                                                                                                            LOBYTE(v241) = 0;
                                                                                                                            v243 = 0;
                                                                                                                            if (v97)
                                                                                                                            {
                                                                                                                              v241 = v95;
                                                                                                                              v44 = v96;
                                                                                                                              v95 = 0;
                                                                                                                              v96 = 0;
                                                                                                                              v242 = v44;
                                                                                                                              v243 = 1;
                                                                                                                            }
                                                                                                                            if (v94)
                                                                                                                            {
                                                                                                                              v45 = v90;
                                                                                                                              v90 = 0u;
                                                                                                                              v244 = v45;
                                                                                                                              v46 = v92;
                                                                                                                              v92 = 0u;
                                                                                                                              v47 = v93;
                                                                                                                              v93 = 0u;
                                                                                                                              *(_DWORD *)((char *)v245 + 3) = *(_DWORD *)&v91[3];
                                                                                                                              v245[0] = *(_DWORD *)v91;
                                                                                                                              v246 = v46;
                                                                                                                              v247 = v47;
                                                                                                                              *(_BYTE *)(WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters((uint64_t)a1, (uint64_t)v167) + 608) = 1;
                                                                                                                              WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v167, v48);
                                                                                                                              goto LABEL_68;
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a1 = 0;
  a1[608] = 0;
LABEL_68:
  if (v94)
    WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&v90, v15);
  if (v98 && v97)
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v15);
  if (v100)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v99);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v101, v15);
  if (v104)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v103);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v105, v49);
  if (v108)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v107);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v109, v50);
  if (v112)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v111);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v51);
  if (v116)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v115);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v117, v52);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v131, v53);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v133, v54);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v135, v55);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v137, v56);
  if (v140)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v139);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v141, v57);
  std::__optional_destruct_base<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v248, v58);
  if (v144)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v143);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v145, v59);
  if (v148)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v147);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v149, v60);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v151, v61);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v155, v62);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v159, v63);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v161, v64);
  if (v164)
  {
    v66 = cf;
    cf = 0;
    if (v66)
      CFRelease(v66);
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v165, v65);
}

void sub_196C9751C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,uint64_t a35,char a36,int a37,__int16 a38,const char **a39,__int16 a40,int a41,__int16 a42,uint64_t a43,const char **a44,__int16 a45,int a46,__int16 a47,uint64_t a48,const char **a49,__int16 a50,int a51,__int16 a52,uint64_t a53,const char **a54,__int16 a55,int a56,__int16 a57,uint64_t a58,const char **a59,__int16 a60,int a61,__int16 a62,uint64_t a63)
{
  char a71;
  char a72;
  uint64_t v72;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  const void *v92;

  WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&STACK[0x320], a2);
  if (a32)
    WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&a25, v74);
  if ((_BYTE)a38 && a36)
    WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a34, v74);
  if ((_BYTE)a40)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a39);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a42, v74);
  if ((_BYTE)a45)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a44);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a47, v75);
  if ((_BYTE)a50)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a49);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a52, v76);
  if ((_BYTE)a55)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a54);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a57, v77);
  if ((_BYTE)a60)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a59);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a62, v78);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a71, v79);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a72, v80);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x200], v81);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x210], v82);
  if (LOBYTE(STACK[0x228]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x220]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x230], v83);
  std::__optional_destruct_base<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,false>::~__optional_destruct_base[abi:sn180100](v72 - 240, v84);
  if (LOBYTE(STACK[0x248]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x240]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x250], v85);
  if (LOBYTE(STACK[0x268]))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x260]);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x270], v86);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x280], v87);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2B0], v88);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2E0], v89);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x2F0], v90);
  if (LOBYTE(STACK[0x308]))
  {
    v92 = (const void *)STACK[0x300];
    STACK[0x300] = 0;
    if (v92)
      CFRelease(v92);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x310], v91);
  _Unwind_Resume(a1);
}

void sub_196C976A0()
{
  JUMPOUT(0x196C97580);
}

void sub_196C976A8()
{
  JUMPOUT(0x196C97588);
}

void sub_196C976B0()
{
  JUMPOUT(0x196C97598);
}

void sub_196C976B8()
{
  JUMPOUT(0x196C975A0);
}

void sub_196C976C0()
{
  JUMPOUT(0x196C975B0);
}

void sub_196C976C8()
{
  JUMPOUT(0x196C975B8);
}

void sub_196C976D0()
{
  JUMPOUT(0x196C975C8);
}

void sub_196C976D8()
{
  JUMPOUT(0x196C975D0);
}

void sub_196C976E0()
{
  JUMPOUT(0x196C975E0);
}

void sub_196C976E8()
{
  JUMPOUT(0x196C975E8);
}

void sub_196C97714()
{
  JUMPOUT(0x196C975F0);
}

void sub_196C9771C()
{
  JUMPOUT(0x196C975F8);
}

void sub_196C97724()
{
  JUMPOUT(0x196C97600);
}

void sub_196C97760()
{
  JUMPOUT(0x196C97608);
}

void sub_196C97768()
{
  JUMPOUT(0x196C97618);
}

void sub_196C97770()
{
  JUMPOUT(0x196C97620);
}

void sub_196C97778()
{
  JUMPOUT(0x196C97628);
}

void sub_196C97788()
{
  JUMPOUT(0x196C97638);
}

void sub_196C97790()
{
  JUMPOUT(0x196C97640);
}

void sub_196C97798()
{
  JUMPOUT(0x196C97650);
}

void sub_196C977A0()
{
  JUMPOUT(0x196C97658);
}

void sub_196C977A8()
{
  JUMPOUT(0x196C97660);
}

void sub_196C977B0()
{
  JUMPOUT(0x196C97668);
}

void sub_196C977BC()
{
  JUMPOUT(0x196C97670);
}

void sub_196C977C4()
{
  JUMPOUT(0x196C97678);
}

void sub_196C977CC()
{
  JUMPOUT(0x196C97690);
}

void sub_196C977D8()
{
  JUMPOUT(0x196C97698);
}

uint64_t IPC::Decoder::decode<std::optional<unsigned int>>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<unsigned int>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v26 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        a1 = v26;
        v16 = *v26;
        v15 = v26[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_14;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    v15 = v1;
    v16 = 0;
LABEL_14:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      v25 = a1;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        a1 = v25;
        v2 = *v25;
        v1 = v25[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_15;
  }
  v6 = *v4;
  if (v6 >= 2)
  {
LABEL_15:
    v13 = 0;
    v12 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v1)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v2);
      v13 = 0;
      v12 = 0;
      v11 = 0;
    }
    return v12 | v13 | v11;
  }
  if (v6)
  {
    v7 = ((v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v7 && v1 - v7 > 3)
    {
      v9 = (int *)(v2 + v7);
      v10 = *v9;
      a1[2] = v9 + 1;
      v11 = v10 & 0xFFFFFF00;
      v12 = v10;
      v13 = 0x100000000;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      v20 = a1[3];
      if (!v20)
      {
LABEL_20:
        v12 = 0;
        v11 = 0;
        v13 = 0x100000000;
        return v12 | v13 | v11;
      }
      v21 = a1;
      (*(void (**)(_QWORD))(*(_QWORD *)v20 + 16))(a1[3]);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[3];
      v13 = 0x100000000;
      *v21 = 0;
      v21[1] = 0;
      v12 = 0;
      v11 = 0;
      if (v24 && v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
        goto LABEL_20;
      }
    }
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
  }
  return v12 | v13 | v11;
}

uint64_t IPC::Decoder::decode<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C97AF0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::ResourceLoadStatisticsParameters>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::ResourceLoadStatisticsParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a1 + 56))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::UnifiedOriginStorageLevel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;
  WTF *result;
  void *v13;
  uint64_t v14;
  char v15;
  WTF *v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  _BYTE v20[8];
  WTF *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::String>(a1, &v14);
  IPC::Decoder::decode<std::optional<WTF::UUID>>(a1, (uint64_t)&v27);
  if (!*a1)
    goto LABEL_18;
  if (v4 <= 0xFFu)
    goto LABEL_17;
  v20[0] = v4;
  v7 = v19;
  if (!v19)
    goto LABEL_17;
  LOBYTE(v21) = 0;
  v23 = 0;
  v8 = v18;
  if (v18)
  {
    v21 = v16;
    v7 = v17;
    v6 = HIDWORD(v17);
    v16 = 0;
    v17 = 0;
    v22 = __PAIR64__(v6, v7);
    v23 = 1;
  }
  if (!v15 || (v9 = v14, v14 = 0, !v29))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    goto LABEL_11;
  }
  v25 = v27;
  LOBYTE(v26) = v28;
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v8)
  {
    v10 = v21;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 20) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  v24 = 0;
  *(_QWORD *)(a2 + 32) = v9;
  v11 = v26;
  *(_OWORD *)(a2 + 48) = v25;
  *(_OWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 80) = 1;
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)v20, v5);
LABEL_11:
  result = (WTF *)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v5);
  if (v19 && v18)
  {
    result = v16;
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      return (WTF *)WTF::fastFree(result, v13);
    }
  }
  return result;
}

void sub_196C97D44(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  void *v19;
  WTF *v20;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  if ((_BYTE)a16 && a14)
  {
    v20 = a11;
    if (a11)
    {
      a11 = 0;
      a12 = 0;
      WTF::fastFree(v20, v19);
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration(WebKit::WebPushD::WebPushDaemonConnectionConfiguration *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 24))
  {
    v4 = (WTF *)*((_QWORD *)this + 1);
    if (v4)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v4, a2);
    }
  }
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::UUID>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = IPC::Decoder::decode<WTF::UUID>(result, (uint64_t)&v15);
      v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 32) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::ResourceLoadStatisticsParameters,void>::decode(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 PartyWebsiteDataRemoval;
  WTF::StringImpl *v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v21;
  _BYTE v22[7];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl **v27;
  char v28;
  WTF::StringImpl **v29;
  char v30;
  uint64_t v31;
  char v32;
  const char **v33;
  char v34;
  uint64_t v35;
  char v36;

  IPC::Decoder::decode<WTF::String>(a2, &v35);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v33);
  v4 = IPC::Decoder::decode<BOOL>(a2);
  v5 = IPC::Decoder::decode<BOOL>(a2);
  v6 = IPC::Decoder::decode<BOOL>(a2);
  v7 = IPC::Decoder::decode<BOOL>(a2);
  v8 = IPC::Decoder::decode<JSC::MessageLevel>(a2);
  v9 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2);
  PartyWebsiteDataRemoval = IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(a2);
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v31);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v29);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v27);
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v25);
  if (!*a2)
    goto LABEL_26;
  if (!v36)
    goto LABEL_25;
  v12 = v35;
  v35 = 0;
  if (!v34)
    goto LABEL_25;
  v13 = v33;
  v33 = 0;
  if (v4 <= 0xFFu)
    goto LABEL_25;
  v22[0] = v4;
  if (v5 <= 0xFFu)
    goto LABEL_25;
  v22[1] = v5;
  if (v6 <= 0xFFu)
    goto LABEL_25;
  v22[2] = v6;
  if (v7 <= 0xFFu)
    goto LABEL_25;
  v22[3] = v7;
  if (v8 <= 0xFFu)
    goto LABEL_25;
  v22[4] = v8;
  if (v9 <= 0xFFu)
    goto LABEL_25;
  v22[5] = v9;
  if (PartyWebsiteDataRemoval <= 0xFFu
    || (v22[6] = PartyWebsiteDataRemoval, !v32)
    || (v14 = v31, v31 = 0, !v30)
    || (v15 = v29, v29 = 0, !v28)
    || (v16 = v27, v27 = 0, !v26))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    goto LABEL_16;
  }
  v17 = v25;
  v25 = 0;
  v21 = 0u;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)v22;
  *(_DWORD *)(a1 + 19) = *(_DWORD *)&v22[3];
  v23 = 0u;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  v24 = 0u;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = 1;
  WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&v21, v11);
LABEL_16:
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v11);
  if (v28 && v27)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v18);
  if (v30 && v29)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v18);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v18);
  if (v34)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v33);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v19);
}

void sub_196C98238(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13, char a14, WTF::StringImpl **a15, char a16, ...)
{
  uint64_t v16;
  WTF::StringImpl *v18;
  va_list va;

  va_start(va, a16);
  if (a14 && a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  if (a16 && a15)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a15, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (*(_BYTE *)(v16 - 104))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v16 - 112));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v16 - 96, v18);
  _Unwind_Resume(a1);
}

void sub_196C982C0()
{
  JUMPOUT(0x196C982B0);
}

uint64_t IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C9831C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 8))
  {
    if (*(_QWORD *)v2)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  WTF::StringImpl **v9;
  int v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _BYTE v16[24];
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl **v19;

  v2 = (uint64_t *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)result;
  v6 = ((*(_QWORD *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v13 = 0;
    v11 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v15 = *(_QWORD *)(result + 24);
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v5, v4);
        v11 = (WTF::StringImpl *)*v2;
        v13 = v2[1];
      }
      else
      {
        v13 = 0;
        v11 = 0;
      }
    }
    goto LABEL_25;
  }
  v8 = (int *)(v5 + v6);
  *(_QWORD *)(result + 16) = v8 + 1;
  if (!v5)
  {
    v13 = v4;
    v11 = 0;
LABEL_25:
    *v2 = 0;
    v2[1] = 0;
    result = v2[3];
    if (result)
    {
LABEL_28:
      if (v13)
        result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v11);
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  v9 = 0;
  v10 = *v8;
  v19 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v17);
      if (!v18)
        break;
      if (v17 == (WTF::StringImpl *)-1)
        break;
      result = WTF::equal(v17, 0, v12);
      if ((result & 1) != 0)
        break;
      if (!v18)
      {
        __break(1u);
        goto LABEL_28;
      }
      result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v19, &v17, (uint64_t)v16);
      if (!v16[16])
        break;
      if (v18)
      {
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (!--v10)
      {
        v9 = v19;
        goto LABEL_8;
      }
    }
    *a2 = 0;
    a2[8] = 0;
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v11);
    result = (uint64_t)v19;
    if (v19)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v14);
  }
  else
  {
LABEL_8:
    *(_QWORD *)a2 = v9;
    a2[8] = 1;
  }
  return result;
}

void sub_196C984E0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl **a14)
{
  WTF::StringImpl *v15;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12, a2);
  if (a14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, v15);
  _Unwind_Resume(a1);
}

void sub_196C98508()
{
  JUMPOUT(0x196C984F0);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C98564(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  WTF *v26;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v25 = 0;
  v26 = 0;
  if (result >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::LinkDecorationFilteringData>(a1, (uint64_t)&v21);
      if (!v24)
        break;
      if (HIDWORD(v26) == (_DWORD)v26)
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        v15 = HIDWORD(v26) + 1;
        v16 = (_QWORD *)(v25 + 24 * HIDWORD(v26));
        v17 = v21;
        v21 = 0;
        *v16 = v17;
        v18 = v22;
        v22 = 0;
        v16[1] = v18;
        v19 = v23;
        v23 = 0;
        v16[2] = v19;
        HIDWORD(v26) = v15;
      }
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
      if (!--v6)
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v25, HIDWORD(v26));
        *(_QWORD *)a2 = v25;
        v20 = v26;
        v25 = 0;
        v26 = 0;
        *(_QWORD *)(a2 + 8) = v20;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_5:
      v25 = 0;
      v26 = 0;
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v8;
LABEL_6:
      *(_BYTE *)(a2 + 16) = 1;
      return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
    }
    LODWORD(v26) = 24 * (int)result / 0x18u;
    v25 = WTF::fastMalloc((WTF *)(24 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::LinkDecorationFilteringData>(a1, (uint64_t)&v21);
      if (!v24)
        break;
      if (HIDWORD(v26) == (_DWORD)v26)
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v25, (unint64_t)&v21);
      }
      else
      {
        v10 = HIDWORD(v26) + 1;
        v11 = (_QWORD *)(v25 + 24 * HIDWORD(v26));
        v12 = v21;
        v21 = 0;
        *v11 = v12;
        v13 = v22;
        v22 = 0;
        v11[1] = v13;
        v14 = v23;
        v23 = 0;
        v11[2] = v14;
        HIDWORD(v26) = v10;
      }
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
      if (!--v6)
      {
        v7 = v25;
        v8 = v26;
        goto LABEL_5;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
  return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
}

void sub_196C98764(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::LinkDecorationFilteringData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::LinkDecorationFilteringData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C987E8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::LinkDecorationFilteringData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::String>(a1, &v11);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v9);
  if (*a1)
  {
    if (v14 && v12 && v10)
    {
      v6 = v13;
      v13 = 0;
      v7 = v11;
      v11 = 0;
      v8 = v9;
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v8;
      *(_BYTE *)(a2 + 24) = 1;
      goto LABEL_6;
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_6:
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C9891C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::RegistrableDomain>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::RegistrableDomain,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196C98994(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RegistrableDomain,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  uint64_t v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v7);
  v6 = *a1;
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    v6 = (uint64_t)v7;
    if (v7 && *((_DWORD *)v7 + 1))
    {
      v7 = 0;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v9;
    }
    *(_QWORD *)a2 = v6;
    LOBYTE(v6) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v6;
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196C98A5C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<JSC::MessageLevel>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  unsigned int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      v5 = *v4;
      v6 = 1;
      goto LABEL_4;
    }
    v10 = v1;
    v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  v5 = 0;
  v6 = 0;
LABEL_4:
  v7 = v5 < 5;
  v8 = v5 | 0x100;
  if ((v6 & v7) != 0)
    return v8;
  else
    return 0;
}

uint64_t IPC::ArgumentCoder<WebKit::UnifiedOriginStorageLevel,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  __int16 v3;

  v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 3u || HIBYTE(v3) == 0)
    return 0;
  else
    return v3 | 0x100u;
}

unint64_t WebKit::WebCompiledContentRuleList::urlFiltersBytecode(WebKit::WebCompiledContentRuleList *this)
{
  return WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(*((_QWORD *)this + 3), *((_QWORD *)this + 6), *((_QWORD *)this + 7));
}

_QWORD *IPC::VectorArgumentCoder<false,WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = v8 + v4;
    v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(*result + v9) = v3;
      result[2] = v10;
      v3 = *((unsigned int *)a2 + 3);
    }
  }
  if ((_DWORD)v3)
  {
    v12 = *a2;
    v13 = *a2 + 16 * v3;
    do
    {
      result = IPC::StreamConnectionEncoder::operator<<<int const&>(v2, (_DWORD *)v12);
      v14 = v2[2];
      v15 = *v2 + v14;
      v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
      v7 = v16 >= v15;
      v17 = v16 - v15;
      if (v7)
      {
        v18 = v17 + v14;
        v19 = v18 + 8;
        if (v18 > 0xFFFFFFFFFFFFFFF7 || v19 > v2[1])
        {
          v2[1] = 0;
        }
        else
        {
          *(_QWORD *)(*v2 + v18) = *(_QWORD *)(v12 + 8);
          v2[2] = v19;
        }
      }
      v12 += 16;
    }
    while (v12 != v13);
  }
  return result;
}

_QWORD *IPC::StreamConnectionEncoder::operator<<<int const&>(_QWORD *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v4 >= v3;
  v5 = v4 - v3;
  if (v9)
  {
    v6 = v5 + v2;
    v7 = v6 + 4;
    v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v9 = v7 >= v8;
      v10 = v7 == v8;
    }
    else
    {
      v9 = 1;
      v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v6) = *a2;
      result[2] = v7;
    }
  }
  return result;
}

uint64_t ___ZN6WebKit10TCCLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
  _MergedGlobals_54 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::RunLoop::Timer::fired(WTF::RunLoop::Timer *this)
{
  return WTF::Function<void ()(void)>::operator()();
}

uint64_t WTF::Function<void ()(void)>::operator()()
{
  uint64_t v0;

  v0 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

WebCore::Page *WebKit::WebPage::setCanStartMediaTimerFired(WebKit::WebPage *this)
{
  WebCore::Page *result;

  result = (WebCore::Page *)*((_QWORD *)this + 6);
  if (result)
    return (WebCore::Page *)WebCore::Page::setCanStartMedia(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebPage::*&)(void),WebKit::WebPage*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::commitStateAfterChildren(uint64_t a1, WebCore::ScrollingStateScrollingNode *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*((unsigned __int8 *)a2 + 16) > 1u)
      return 0;
    WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(v2, a2);
  }
  return WebCore::ScrollingTreeScrollingNode::commitStateAfterChildren();
}

uint64_t WebKit::ScrollingTreeOverflowScrollingNodeIOS::commitStateAfterChildren(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = a2[16];
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0)
    return 0;
  WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(*(_QWORD *)(a1 + 96), (const WebCore::ScrollingStateScrollingNode *)a2);
  return WebCore::ScrollingTreeScrollingNode::commitStateAfterChildren();
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::commitStateAfterChildren(uint64_t this, const WebCore::ScrollingStateScrollingNode *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  WKScrollingNodeScrollViewDelegate *v6;
  const void *v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  double v13;
  unint64_t v14;
  double v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _BOOL8 v26;

  v3 = this;
  v4 = *(_BYTE *)(this + 49);
  *(_BYTE *)(this + 49) = 1;
  if ((*((_WORD *)a2 + 20) & 0x107C) == 0)
    goto LABEL_22;
  v5 = (void *)objc_msgSend(*(id *)(this + 24), "delegate");
  objc_opt_class();
  this = objc_opt_isKindOfClass();
  if ((this & 1) == 0)
    v5 = 0;
  if ((*((_BYTE *)a2 + 41) & 0x10) != 0)
  {
    if (!*(_QWORD *)(v3 + 40))
    {
      v6 = -[WKScrollingNodeScrollViewDelegate initWithScrollingTreeNodeDelegate:]([WKScrollingNodeScrollViewDelegate alloc], "initWithScrollingTreeNodeDelegate:", v3);
      v7 = *(const void **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v6;
      if (v7)
        CFRelease(v7);
    }
    objc_msgSend(v5, "setScrollsToTop:", 0);
    objc_msgSend(v5, "setDelegate:", *(_QWORD *)(v3 + 40));
    objc_msgSend(v5, "setBaseScrollViewDelegate:", *(_QWORD *)(v3 + 40));
    this = objc_opt_respondsToSelector();
    if ((this & 1) != 0)
    {
      objc_msgSend(v5, "setTracksImmediatelyWhileDecelerating:", 0);
      this = objc_msgSend(v5, "_setAvoidsJumpOnInterruptedBounce:", 1);
    }
  }
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 8) != 0)
  {
    WebCore::FloatSize::operator CGSize();
    this = objc_msgSend(v5, "setContentSize:");
    v8 = *((_QWORD *)a2 + 5);
    LODWORD(v9) = 1;
    if ((v8 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  v9 = (v8 >> 2) & 1;
  if ((v8 & 0x40) != 0)
  {
LABEL_14:
    this = WebKit::ScrollingTreeScrollingNodeDelegateIOS::updateScrollViewForOverscrollBehavior(v5, *((unsigned __int8 *)a2 + 442), *((unsigned __int8 *)a2 + 443), 1);
    v8 = *((_QWORD *)a2 + 5);
  }
LABEL_15:
  if ((((v8 & 0x20) == 0) & ~(_DWORD)v9) == 0)
  {
    if (WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin((WebCore::ScrollingTreeScrollingNodeDelegate *)v3))
    {
      WebCore::ScrollingTreeScrollingNodeDelegate::reachableContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      v11 = v10;
      WebCore::ScrollingTreeScrollingNodeDelegate::totalContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      v13 = (float)(v11 - v12);
    }
    else
    {
      v13 = 0.0;
    }
    v14 = WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
    v15 = 0.0;
    if (HIDWORD(v14))
    {
      WebCore::ScrollingTreeScrollingNodeDelegate::reachableContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      v17 = v16;
      WebCore::ScrollingTreeScrollingNodeDelegate::totalContentsSize((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
      v15 = (float)(v17 - v18);
    }
    this = objc_msgSend(v5, "setContentInset:", v15, v13, 0.0, 0.0);
  }
LABEL_22:
  if ((*((_BYTE *)a2 + 41) & 1) != 0)
  {
    v19 = WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v3 + 8));
    v20 = (double *)MEMORY[0x1E0CEBBA0];
    if (!*(_DWORD *)(v19 + 20)
      && !*(_DWORD *)(WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(*(WebCore::ScrollingTreeScrollingNode **)(v3 + 8))
                    + 36))
    {
      v20 = (double *)MEMORY[0x1E0CEBBA8];
    }
    v21 = *v20;
    v22 = objc_msgSend(*(id *)(v3 + 24), "delegate");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v23 = (void *)v22;
    else
      v23 = 0;
    this = objc_msgSend(v23, "setDecelerationRate:", v21);
  }
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
  {
    v24 = (void *)objc_msgSend(*(id *)(v3 + 24), "delegate");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      v24 = 0;
    objc_msgSend(v24, "setShowsHorizontalScrollIndicator:", *(unsigned __int8 *)(*(_QWORD *)(v3 + 8) + 256) != 1);
    objc_msgSend(v24, "setShowsVerticalScrollIndicator:", *(unsigned __int8 *)(*(_QWORD *)(v3 + 8) + 257) != 1);
    v25 = *(_QWORD *)(v3 + 8);
    v26 = *(_BYTE *)(v25 + 250) != 1 || *(unsigned __int8 *)(v25 + 251) != 1;
    this = objc_msgSend(v24, "setScrollEnabled:", v26);
  }
  if ((*((_BYTE *)a2 + 40) & 0x80) != 0)
  {
    WebCore::ScrollingTreeScrollingNode::handleScrollPositionRequest();
    this = WebCore::ScrollingTreeScrollingNodeDelegate::scrollingTree((WebCore::ScrollingTreeScrollingNodeDelegate *)v3);
    *(_BYTE *)(this + 342) = 1;
  }
  *(_BYTE *)(v3 + 49) = v4;
  return this;
}

void sub_196C993B4(_Unwind_Exception *exc_buf, int a2)
{
  uint64_t v2;
  char v3;
  NSException *v4;

  if (a2 == 1)
  {
    v4 = (NSException *)objc_begin_catch(exc_buf);
    ReportBlockedObjCException(v4);
    objc_end_catch();
    JUMPOUT(0x196C99278);
  }
  *(_BYTE *)(v2 + 49) = v3;
  _Unwind_Resume(exc_buf);
}

uint64_t WebKit::ScrollingTreeScrollingNodeDelegateIOS::repositionScrollingLayers(id *this)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  void *v5;
  char *v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;

  v2 = objc_msgSend(this[3], "delegate");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = (void *)v2;
  else
    v3 = 0;
  result = objc_msgSend(v3, "_wk_isScrollAnimating");
  if ((result & 1) == 0)
  {
    v5 = (void *)objc_msgSend(this[3], "delegate");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      v5 = 0;
    v6 = (char *)this[1];
    v7 = *(float32x2_t *)(v6 + 144);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v9, (const IntPoint *)v6 + 19);
    v8 = vadd_f32(v7, v9);
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v5, "setContentOffset:", *(_QWORD *)&v8);
  }
  return result;
}

void sub_196C99520(_Unwind_Exception *exception_object, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x196C99508);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebLoaderStrategy::loadResource(uint64_t a1, uint64_t a2, WebCore::CachedResource *a3, WebCore::ResourceRequestBase *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  WebCore::Document *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8);
  if (((*((_BYTE *)a3 + 556) & 0x1F) != 0 || v12 != a2) && v12 && *(_BYTE *)(v12 + 144) == 0)
  {
    v15 = *(WebCore::Document **)(v12 + 296);
    if (v15)
    {
      if (WebCore::Document::loader(*(WebCore::Document **)(v12 + 296)))
      {
        WebCore::Document::loader(v15);
        WebCore::ResourceRequestBase::setIsAppInitiated(a4);
      }
    }
  }
  v24 = a1;
  v25 = *(_BYTE *)(a5 + 5);
  v16 = *a6;
  *a6 = 0;
  v26 = v16;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27, a3);
  v17 = (unsigned int *)(a2 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v28 = a2;
  v19 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v19 = off_1E34EB188;
  *(_QWORD *)(v19 + 8) = v24;
  *(_BYTE *)(v19 + 16) = v25;
  *(_QWORD *)(v19 + 24) = v26;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(v19 + 32), (const WebCore::CachedResourceHandleBase *)&v27);
  v20 = v28;
  v28 = 0;
  v29 = v19;
  *(_QWORD *)(v19 + 40) = v20;
  WebCore::SubresourceLoader::create();
  v21 = v29;
  v29 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v28;
  v28 = 0;
  if (v22)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v22 + 8));
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27);
  return 0;
}

void API::Data::~Data(API::Data *this)
{
  *(_QWORD *)this = &off_1E34AE750;
  (*((void (**)(_QWORD, _QWORD))this + 4))(*((_QWORD *)this + 2), *((_QWORD *)this + 5));
}

{
  *(_QWORD *)this = &off_1E34AE750;
  (*((void (**)(_QWORD, _QWORD))this + 4))(*((_QWORD *)this + 2), *((_QWORD *)this + 5));
  JUMPOUT(0x19AEB936CLL);
}

int8x16_t WebKit::PlatformCALayerRemote::setOpacity(WebKit::PlatformCALayerRemote *this, float a2)
{
  int8x16_t result;

  *((float *)this + 156) = a2;
  result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x100000uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

void WebKit::PlatformCALayerRemote::setEventRegion(int8x16_t *this, const WebCore::EventRegion *a2)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  BOOL v11;
  BOOL v12;
  int *v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (this[42].i32[0] != *(_DWORD *)a2 || this[42].i32[1] != *((_DWORD *)a2 + 1))
    goto LABEL_10;
  if (this[42].i32[2] != *((_DWORD *)a2 + 2) || this[42].i32[3] != *((_DWORD *)a2 + 3))
    goto LABEL_10;
  v6 = this[43].i64[0];
  v7 = *((_QWORD *)a2 + 2);
  if (v6 != v7 && (!v6 || !v7 || !WebCore::operator==(v6, v7)))
    goto LABEL_10;
  v8 = this[44].u32[1];
  if ((_DWORD)v8 != *((_DWORD *)a2 + 9))
    goto LABEL_10;
  if ((_DWORD)v8)
  {
    v9 = (_DWORD *)this[43].i64[1];
    v10 = (_DWORD *)*((_QWORD *)a2 + 3);
    v11 = *v9 == *v10 && v9[1] == v10[1];
    if (!v11 || v9[2] != v10[2] || v9[3] != v10[3])
      goto LABEL_10;
    v12 = 0;
    v13 = v9 + 9;
    v14 = v10 + 9;
    v15 = 1;
    do
    {
      v16 = *(_QWORD *)(v13 - 5);
      v17 = *(_QWORD *)(v14 - 5);
      if (v16 != v17)
      {
        v22 = !v16 || v17 == 0;
        if (v22 || !WebCore::operator==(v16, v17))
          break;
      }
      v12 = v15 >= v8;
      if (v8 == v15)
        break;
      if (*(v13 - 3) != *(v14 - 3) || *(v13 - 2) != *(v14 - 2))
        break;
      if (*(v13 - 1) != *(v14 - 1))
        break;
      v20 = *v13;
      v13 += 6;
      v19 = v20;
      v21 = *v14;
      v14 += 6;
      ++v15;
    }
    while (v19 == v21);
    if (!v12)
      goto LABEL_10;
  }
  if (!WebCore::operator==((uint64_t)&this[44].i64[1], (uint64_t)a2 + 40)
    || !WebCore::operator==((uint64_t)this[46].i64, (uint64_t)a2 + 64))
  {
    goto LABEL_10;
  }
  if (!this[49].i8[0] || !*((_BYTE *)a2 + 112))
  {
    if ((this[49].i8[0] != 0) == (*((_BYTE *)a2 + 112) != 0))
      return;
    goto LABEL_10;
  }
  if (this[47].i32[2] != *((_DWORD *)a2 + 22)
    || this[47].i32[3] != *((_DWORD *)a2 + 23)
    || this[48].i32[0] != *((_DWORD *)a2 + 24)
    || this[48].i32[1] != *((_DWORD *)a2 + 25)
    || (v23 = this[48].i64[1], v24 = *((_QWORD *)a2 + 13), v23 != v24)
    && (!v23 || !v24 || (WebCore::operator==(v23, v24) & 1) == 0))
  {
LABEL_10:
    WebCore::Region::operator=();
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&this[43].i64[1], (uint64_t)a2 + 24);
    WebCore::Region::operator=();
    WebCore::Region::operator=();
    std::__optional_storage_base<WebCore::Region,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Region,false> const&>((WebCore::Region *)&this[47].u64[1], (unsigned __int8 *)a2 + 88);
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10000000000uLL));
  }
}

void WebKit::RemoteLayerTreeNode::setEventRegion(WebKit::RemoteLayerTreeNode *this, const WebCore::EventRegion *a2)
{
  WebCore::Region::operator=();
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 80, (uint64_t)a2 + 24);
  WebCore::Region::operator=();
  WebCore::Region::operator=();
  std::__optional_storage_base<WebCore::Region,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Region,false> const&>((WebKit::RemoteLayerTreeNode *)((char *)this + 144), (unsigned __int8 *)a2 + 88);
}

uint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  WebCore::Region *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::Region *v13;
  const WebCore::Region *v14;
  uint64_t v15;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      v9 = v5 > *(_DWORD *)(a1 + 8);
      LODWORD(v5) = *(_DWORD *)(a1 + 12);
      if (v9)
      {
        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v5) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v6 = (WebCore::Region *)(*(_QWORD *)a1 + 24 * v5);
      v7 = 24 * v4 - 24 * v5;
      do
      {
        WebCore::Region::~Region(v6);
        v6 = (WebCore::Region *)(v8 + 24);
        v7 -= 24;
      }
      while (v7);
      *(_DWORD *)(a1 + 12) = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::Region const*,WebCore::Region const*,WebCore::Region*,0>(*(_QWORD *)a2, *(_QWORD *)a2 + 24 * v5, *(_QWORD *)a1);
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v10 != v11)
    {
      v12 = 3 * v10;
      v13 = (WebCore::Region *)(*(_QWORD *)a1 + 8 * v12);
      v14 = (const WebCore::Region *)(*(_QWORD *)a2 + 8 * v12);
      v15 = 24 * v11 - 8 * v12;
      do
      {
        v13 = (WebCore::Region *)(WebCore::Region::Region(v13, v14) + 24);
        v14 = (const WebCore::Region *)((char *)v14 + 24);
        v15 -= 24;
      }
      while (v15);
      LODWORD(v10) = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  return a1;
}

uint64_t WebCore::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v6)
    return 1;
  result = 0;
  if (v5)
  {
    if (v6)
      return WebCore::operator==(v5, v6);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 12))
    return 0;
  if (memcmp(*(const void **)a1, *(const void **)a2, 4 * v2))
    return 0;
  v5 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 156))
    return 0;
  if (!(_DWORD)v5)
    return 1;
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a2 + 144);
  if (*(_DWORD *)v6 != *(_DWORD *)v7 || *(_QWORD *)(v6 + 8) != *(_QWORD *)(v7 + 8))
    return 0;
  v10 = 0;
  v11 = (_QWORD *)(v7 + 24);
  v12 = (_QWORD *)(v6 + 24);
  while (v5 - 1 != v10)
  {
    v13 = *((_DWORD *)v12 - 2);
    v14 = *((_DWORD *)v11 - 2);
    v16 = *v12;
    v12 += 2;
    v15 = v16;
    v18 = *v11;
    v11 += 2;
    v17 = v18;
    ++v10;
    if (v13 != v14 || v15 != v17)
      return v10 >= v5;
  }
  v10 = *(unsigned int *)(a1 + 156);
  return v10 >= v5;
}

{
  uint64_t result;
  const WTF::StringImpl *v5;

  result = WebCore::operator==();
  if ((_DWORD)result)
    return WTF::equal(*(WTF **)(a1 + 32), *(const WTF::StringImpl **)(a2 + 32), v5);
  return result;
}

{
  const WTF::StringImpl *v4;
  const WTF::StringImpl *v5;

  if (WebCore::operator==()
    && WebCore::operator==()
    && WTF::equal(*(WTF **)(a1 + 64), *(const WTF::StringImpl **)(a2 + 64), v4))
  {
    return WTF::equal(*(WTF **)(a1 + 104), *(const WTF::StringImpl **)(a2 + 104), v5);
  }
  else
  {
    return 0;
  }
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer<WebKit::AuthenticatorManager>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10[2];
  _QWORD v11[5];

  v11[3] = a4;
  v11[4] = a5;
  v11[2] = a1;
  v11[1] = a2;
  v11[0] = a3;
  v10[1] = a5;
  v10[0] = a4;
  std::bind[abi:sn180100]<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>(v8, v10, v11);
  WTF::Function<void ()(void)>::Function<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>(&v9, v8);
  WTF::RunLoop::Timer::Timer(a1, a2, (uint64_t)&v9);
  WTF::Function<void ()(void)>::~Function((uint64_t)&v9);
  return a1;
}

uint64_t WTF::Function<void ()(void)>::~Function(uint64_t a1)
{
  WTF::Function<void ()(void)>::~Function(a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

_QWORD *WTF::Function<void ()(void)>::Function<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>(_QWORD *a1, _QWORD *a2)
{
  WTF::Function<void ()(void)>::Function<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::RunLoop::TimerBase *WTF::RunLoop::Timer::Timer(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  WTF::RunLoop::Timer::Timer(a1, a2, a3);
  return a1;
}

{
  WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  WTF::Function<void ()(WTF::String const&)>::Function((_QWORD *)a1 + 3, a3);
  return a1;
}

_QWORD *WTF::Function<void ()(WTF::String const&)>::Function(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::unique_ptr[abi:sn180100](a1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::CallableWrapper(_QWORD *a1, _QWORD *a2)
{
  WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34ABA30;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  return a1;
}

_QWORD *WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34ABA58;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::InspectorTargetProxy **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::InspectorTargetProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::InspectorTargetProxy *)-1)
      {
        std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](v4, 0);
        v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::InspectorTargetProxy::~InspectorTargetProxy(WebKit::InspectorTargetProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v3 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = &unk_1E34D6048;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::InspectorTargetProxy::~InspectorTargetProxy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t i;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v28 = 0;
    v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    v30 = a1[3];
    if (v30)
    {
      v113 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        a1 = v113;
        v29 = *v113;
        v28 = v113[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    goto LABEL_29;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    v28 = v1;
    v29 = 0;
LABEL_29:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (v31)
    {
      v112 = a1;
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28);
        a1 = v112;
        v2 = *v112;
        v1 = v112[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_30;
  }
  v6 = *v4;
  if (v6 < 0xE)
  {
    v7 = 0;
    goto LABEL_5;
  }
LABEL_30:
  *a1 = 0;
  a1[1] = 0;
  v32 = a1[3];
  if (!v32)
  {
    v6 = 0;
    v2 = 0;
    v7 = 1;
    goto LABEL_32;
  }
  v111 = a1;
  if (!v1)
  {
    v6 = 0;
    v32 = 0;
    v2 = 0;
    v7 = 1;
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      v86 = v6;
      v98 = v7;
      v110 = a1;
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v2, v32);
        a1 = v110;
        v2 = *v110;
        v1 = v110[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v6 = v86;
      v7 = v98;
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
    goto LABEL_34;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v2);
  v6 = 0;
  a1 = v111;
  v2 = *v111;
  v1 = v111[1];
  v7 = 1;
  v5 = v111[2];
LABEL_5:
  v8 = v5 - v2;
  if (v1 <= v8)
  {
    v87 = v6;
    v99 = v7;
    v32 = 0;
    v39 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v114 = a1;
    if (v39 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      a1 = v114;
      v2 = *v114;
      v32 = v114[1];
    }
    else
    {
      v2 = 0;
    }
    v6 = v87;
    v7 = v99;
    goto LABEL_32;
  }
  v9 = (unsigned __int8 *)(v2 + v8);
  v10 = v2 + v8 + 1;
  a1[2] = v10;
  if (!v2)
  {
    v32 = v1;
    goto LABEL_32;
  }
  v11 = *v9;
  if ((v11 - 1) < 0x12)
  {
    v12 = 0;
    goto LABEL_9;
  }
LABEL_34:
  *a1 = 0;
  a1[1] = 0;
  v34 = a1[3];
  if (!v34)
  {
    v11 = 0;
    v2 = 0;
    v12 = 1;
    goto LABEL_36;
  }
  v85 = v6;
  v97 = v7;
  v109 = a1;
  if (!v1)
  {
    v11 = 0;
    v34 = 0;
    v2 = 0;
    v12 = 1;
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      v66 = v12;
      v75 = v11;
      v84 = v6;
      v96 = v7;
      v108 = a1;
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v2, v34);
        a1 = v108;
        v2 = *v108;
        v1 = v108[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v6 = v84;
      v7 = v96;
      v11 = v75;
      v12 = v66;
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
    goto LABEL_38;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v2);
  v11 = 0;
  a1 = v109;
  v2 = *v109;
  v1 = v109[1];
  v12 = 1;
  v10 = v109[2];
  v6 = v85;
  v7 = v97;
LABEL_9:
  v13 = v10 - v2;
  if (v1 <= v13)
  {
    v67 = v12;
    v76 = v11;
    v88 = v6;
    v100 = v7;
    v34 = 0;
    v40 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v115 = a1;
    if (v40 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
      a1 = v115;
      v2 = *v115;
      v34 = v115[1];
    }
    else
    {
      v2 = 0;
    }
    v6 = v88;
    v7 = v100;
    v11 = v76;
    v12 = v67;
    goto LABEL_36;
  }
  v14 = (unsigned __int8 *)(v2 + v13);
  v15 = v2 + v13 + 1;
  a1[2] = v15;
  if (!v2)
  {
    v34 = v1;
    goto LABEL_36;
  }
  v16 = *v14;
  if (v16 < 3)
  {
    v17 = 0;
    goto LABEL_13;
  }
LABEL_38:
  *a1 = 0;
  a1[1] = 0;
  v36 = a1[3];
  if (!v36)
  {
    v16 = 0;
    v2 = 0;
    v17 = 1;
    goto LABEL_40;
  }
  v65 = v12;
  v74 = v11;
  v83 = v6;
  v95 = v7;
  v107 = a1;
  if (!v1)
  {
    v16 = 0;
    v36 = 0;
    v2 = 0;
    v17 = 1;
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      v52 = v17;
      v58 = v16;
      v64 = v12;
      v73 = v11;
      v82 = v6;
      v94 = v7;
      v106 = a1;
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v2, v36);
        a1 = v106;
        v2 = *v106;
        v1 = v106[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v6 = v82;
      v7 = v94;
      v11 = v73;
      v16 = v58;
      v12 = v64;
      v17 = v52;
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
    goto LABEL_42;
  }
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v2);
  v16 = 0;
  a1 = v107;
  v2 = *v107;
  v1 = v107[1];
  v17 = 1;
  v15 = v107[2];
  v6 = v83;
  v7 = v95;
  v11 = v74;
  v12 = v65;
LABEL_13:
  v18 = v15 - v2;
  if (v1 <= v18)
  {
    v53 = v17;
    v59 = v16;
    v68 = v12;
    v77 = v11;
    v89 = v6;
    v101 = v7;
    v36 = 0;
    v41 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v116 = a1;
    if (v41 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
      a1 = v116;
      v2 = *v116;
      v36 = v116[1];
    }
    else
    {
      v2 = 0;
    }
    v6 = v89;
    v7 = v101;
    v11 = v77;
    v16 = v59;
    v12 = v68;
    v17 = v53;
    goto LABEL_40;
  }
  v19 = (unsigned __int8 *)(v2 + v18);
  v20 = v2 + v18 + 1;
  a1[2] = v20;
  if (!v2)
  {
    v36 = v1;
    goto LABEL_40;
  }
  v21 = *v19;
  if (v21 < 9)
  {
    v22 = 0;
    goto LABEL_17;
  }
LABEL_42:
  *a1 = 0;
  a1[1] = 0;
  v26 = a1[3];
  if (!v26)
  {
    v21 = 0;
    v2 = 0;
    v22 = 1;
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    i = a1[3];
    if (i)
      goto LABEL_53;
    v1 = 0;
    v2 = 0;
    goto LABEL_46;
  }
  v51 = v17;
  v57 = v16;
  v63 = v12;
  v72 = v11;
  v81 = v6;
  v93 = v7;
  v105 = a1;
  if (!v1)
  {
    v21 = 0;
    v26 = 0;
    v2 = 0;
    v22 = 1;
    goto LABEL_44;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v2);
  v21 = 0;
  a1 = v105;
  v2 = *v105;
  v1 = v105[1];
  v22 = 1;
  v20 = v105[2];
  v6 = v81;
  v7 = v93;
  v11 = v72;
  v16 = v57;
  v12 = v63;
  v17 = v51;
LABEL_17:
  v23 = v20 - v2;
  if (v1 <= v23)
  {
    v45 = v22;
    v48 = v21;
    v54 = v17;
    v60 = v16;
    v69 = v12;
    v78 = v11;
    v90 = v6;
    v102 = v7;
    v26 = 0;
    v42 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    v117 = a1;
    if (v42 && v1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
      a1 = v117;
      v2 = *v117;
      v26 = v117[1];
    }
    else
    {
      v2 = 0;
    }
    v6 = v90;
    v7 = v102;
    v11 = v78;
    v16 = v60;
    v12 = v69;
    v21 = v48;
    v17 = v54;
    v22 = v45;
    goto LABEL_44;
  }
  v24 = (unsigned __int8 *)(v2 + v23);
  i = (uint64_t)(v24 + 1);
  a1[2] = v24 + 1;
  if (!v2)
  {
    v26 = v1;
    goto LABEL_44;
  }
  v26 = *v24;
  if (v26 > 4)
    goto LABEL_46;
  if ((v7 & 1) != 0)
    goto LABEL_52;
  for (i = 0; v12 || v17 || v22 || (_DWORD)i; i = 1)
  {
    do
    {
LABEL_52:
      __break(1u);
LABEL_53:
      v44 = v22;
      v47 = v21;
      v50 = v17;
      v56 = v16;
      v62 = v12;
      v71 = v11;
      v80 = v6;
      v92 = v7;
      v104 = a1;
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)i + 16))(i, v2, v26);
        a1 = v104;
        v2 = *v104;
        v1 = v104[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      v6 = v80;
      v7 = v92;
      v11 = v71;
      v16 = v56;
      v12 = v62;
      v21 = v47;
      v17 = v50;
      v22 = v44;
LABEL_46:
      *a1 = 0;
      a1[1] = 0;
      v38 = a1[3];
      if (!v38)
        return 0;
      v43 = v22;
      v46 = v21;
      v49 = v17;
      v55 = v16;
      v61 = v12;
      v70 = v11;
      v79 = v6;
      v91 = v7;
      v103 = a1;
      if (!v1)
        return 0;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v2);
      if (!*v103)
        return 0;
      v11 = v70;
      v6 = v79;
      v16 = v55;
      v12 = v61;
      v21 = v46;
      v17 = v49;
      v22 = v43;
      v26 = v91;
    }
    while (v91);
  }
  return v11 | (v6 << 8) | (v21 << 12) | (32 * v16) | ((_DWORD)v26 << 16) | 0x1000000;
}

void WebKit::XPCServiceEventHandler(void *a1)
{
  id v2;
  NSObject *global_queue;
  id v4;
  _QWORD handler[4];
  id v6;

  if (a1)
    v2 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  xpc_connection_set_target_queue((xpc_connection_t)a1, global_queue);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
  handler[3] = &__block_descriptor_40_e8_32c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE_e33_v16__0__NSObject_OS_xpc_object__8l;
  v6 = a1;
  if (a1)
    v4 = a1;
  xpc_connection_set_event_handler((xpc_connection_t)a1, handler);
  xpc_connection_resume((xpc_connection_t)a1);
  if (v6)

  if (a1)
}

void sub_196C9AB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  if (a14)

  if (v14)
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessCreationParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  const char **v14;
  const char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _OWORD v26[2];
  char v27;
  char v28;
  int v29;
  const char **v30;
  const char **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char **v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  const char **v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  const char **v63;
  char v64;
  const char **v65;
  char v66;
  __int128 v67;
  __int128 v68;
  char v69;

  IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>((uint64_t)&v67, a1);
  v4 = IPC::Decoder::decode<BOOL>(a1);
  v5 = IPC::Decoder::decode<BOOL>(a1);
  v6 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v65);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v63);
  IPC::Decoder::decode<WTF::String>(a1, &v61);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v7, (uint64_t)&v58);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v8, (uint64_t)&v55);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v52);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)&v49);
  IPC::Decoder::decode<WTF::String>(a1, &v47);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v44);
  if (*a1)
  {
    if (v69)
    {
      v12 = v67;
      v13 = v68;
      v67 = 0u;
      v68 = 0u;
      v26[0] = v12;
      v26[1] = v13;
      if (v4 > 0xFFu)
      {
        v27 = v4;
        if (v5 > 0xFFu)
        {
          v28 = v5;
          if ((v6 & 0xFF00000000) != 0)
          {
            v29 = v6;
            if (v66)
            {
              v14 = v65;
              v65 = 0;
              v30 = v14;
              if (v64)
              {
                v15 = v63;
                v63 = 0;
                v31 = v15;
                if (v62)
                {
                  v16 = v61;
                  v61 = 0;
                  v32 = v16;
                  if (v60)
                  {
                    v33 = v58;
                    v17 = v59;
                    v58 = 0;
                    v59 = 0;
                    v34 = v17;
                    if (v57)
                    {
                      v35 = v55;
                      v18 = v56;
                      v55 = 0;
                      v56 = 0;
                      v36 = v18;
                      if (v54)
                      {
                        LOBYTE(v37) = 0;
                        v38 = 0;
                        if (v53)
                        {
                          v19 = v52;
                          v52 = 0;
                          v37 = v19;
                          v38 = 1;
                        }
                        if (v51)
                        {
                          v39 = v49;
                          v20 = v50;
                          v49 = 0;
                          v50 = 0;
                          v40 = v20;
                          if (v48)
                          {
                            v21 = v47;
                            v47 = 0;
                            v41 = v21;
                            if (v46)
                            {
                              v42 = v44;
                              v22 = v45;
                              v44 = 0;
                              v45 = 0;
                              v43 = v22;
                              WebKit::GPUProcessCreationParameters::GPUProcessCreationParameters((uint64_t)a2, (uint64_t *)v26);
                              a2[152] = 1;
                              WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)v26, v23);
                              goto LABEL_18;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[152] = 0;
LABEL_18:
  if (v46)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v11);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, (WTF::StringImpl *)v11);
  if (v51)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v24);
  if (v54 && v53)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v52);
  if (v57)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v24);
  if (v60)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v24);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, (WTF::StringImpl *)v24);
  if (v64)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v63);
  if (v66)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v65);
  return std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v67);
}

void sub_196C9AE8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,int a39,const char **a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v49;
  void *v50;

  WebKit::GPUProcessCreationParameters::~GPUProcessCreationParameters((WebKit::GPUProcessCreationParameters *)&a9, a2);
  if (a30)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, v49);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32, (WTF::StringImpl *)v49);
  if (a38)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a36, v50);
  if ((_BYTE)a45 && (_BYTE)a41)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a40);
  if (*(_BYTE *)(v47 - 176))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v47 - 192, v50);
  if (*(_BYTE *)(v47 - 152))
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v47 - 168, v50);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v47 - 144, (WTF::StringImpl *)v50);
  if (*(_BYTE *)(v47 - 120))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v47 - 128));
  if (*(_BYTE *)(v47 - 104))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v47 - 112));
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v47 - 96);
  _Unwind_Resume(a1);
}

void sub_196C9AF38()
{
  JUMPOUT(0x196C9AEB8);
}

void sub_196C9AF40()
{
  JUMPOUT(0x196C9AEC8);
}

void sub_196C9AF48()
{
  JUMPOUT(0x196C9AEE0);
}

void sub_196C9AF50()
{
  JUMPOUT(0x196C9AEF0);
}

void sub_196C9AF58()
{
  JUMPOUT(0x196C9AF00);
}

void sub_196C9AF60()
{
  JUMPOUT(0x196C9AF08);
}

void sub_196C9AF68()
{
  JUMPOUT(0x196C9AF18);
}

void sub_196C9AF70()
{
  JUMPOUT(0x196C9AF28);
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  void *v6;
  unsigned __int16 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  void *v32;
  _OWORD v34[2];
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  WTF::StringImpl **v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  const void *v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  char v92;

  IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>((uint64_t)&v90, a1);
  v4 = IPC::Decoder::decode<WebKit::CacheModel>(a1);
  v5 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v87);
  IPC::Decoder::decode<WTF::String>(a1, &v85);
  IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(a1, (uint64_t)&v83);
  v7 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v8, (uint64_t)&v80);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)&v77);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v74);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v11, (uint64_t)&v71);
  v12 = IPC::Decoder::decode<BOOL>(a1);
  v13 = IPC::Decoder::decode<BOOL>(a1);
  v14 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v68, a1);
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v65, a1);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v63);
  IPC::Decoder::decode<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v15, (uint64_t)&v60);
  if (*a1)
  {
    if (v92)
    {
      v17 = v90;
      v18 = v91;
      v90 = 0u;
      v91 = 0u;
      v34[0] = v17;
      v34[1] = v18;
      if (v4 > 0xFFu)
      {
        v35 = v4;
        if (v5 > 0xFFu)
        {
          v36 = v5;
          if (v89)
          {
            v37 = v87;
            v19 = v88;
            v87 = 0;
            v88 = 0;
            v38 = v19;
            if (v86)
            {
              v20 = v85;
              v85 = 0;
              v39 = v20;
              if (v84)
              {
                v21 = v83;
                v83 = 0;
                v40 = v21;
                if (v7 > 0xFFu)
                {
                  v41 = v7;
                  if (v82)
                  {
                    v42 = v80;
                    v22 = v81;
                    v80 = 0;
                    v81 = 0;
                    v43 = v22;
                    if (v79)
                    {
                      v44 = v77;
                      v23 = v78;
                      v77 = 0;
                      v78 = 0;
                      v45 = v23;
                      if (v76)
                      {
                        v46 = v74;
                        v24 = v75;
                        v74 = 0;
                        v75 = 0;
                        v47 = v24;
                        if (v73)
                        {
                          v48 = v71;
                          v25 = v72;
                          v71 = 0;
                          v72 = 0;
                          v49 = v25;
                          if (v12 > 0xFFu)
                          {
                            v50 = v12;
                            if (v13 > 0xFFu)
                            {
                              v51 = v13;
                              if (v14 > 0xFFu)
                              {
                                v52 = v14;
                                if (v70)
                                {
                                  v53 = v68;
                                  v26 = v69;
                                  v68 = 0;
                                  v69 = 0;
                                  v54 = v26;
                                  if (v67)
                                  {
                                    v55 = v65;
                                    v27 = v66;
                                    v65 = 0;
                                    v66 = 0;
                                    v56 = v27;
                                    if (v64)
                                    {
                                      v28 = v63;
                                      v63 = 0;
                                      v57 = v28;
                                      if (v62)
                                      {
                                        v58 = v60;
                                        v29 = v61;
                                        v60 = 0;
                                        v61 = 0;
                                        v59 = v29;
                                        WebKit::NetworkProcessCreationParameters::NetworkProcessCreationParameters((uint64_t)a2, (uint64_t *)v34);
                                        a2[208] = 1;
                                        WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v34, v30);
                                        goto LABEL_21;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a2 = 0;
  a2[208] = 0;
LABEL_21:
  if (v62)
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v16);
  if (v64 && v63)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v63, (WTF::StringImpl *)v16);
  if (v67)
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v16);
  if (v70)
    WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, (WTF::StringImpl *)v16);
  if (v73)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v16);
  if (v76)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v16);
  if (v79)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v16);
  if (v82)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v16);
  if (v84)
  {
    v31 = v83;
    v83 = 0;
    if (v31)
      CFRelease(v31);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v85, (WTF::StringImpl *)v16);
  if (v89)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v32);
  return std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90);
}

void sub_196C9B330(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,WTF::StringImpl **a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  uint64_t v57;
  void *v59;
  const void *v60;
  void *v61;

  WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)&a9, a2);
  if (a37)
    WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a35, v59);
  if (a39 && a38)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a38, (WTF::StringImpl *)v59);
  if (a45)
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a41, v59);
  if (a51)
    WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a47, (WTF::StringImpl *)v59);
  if (a57)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a53, v59);
  if (*(_BYTE *)(v57 - 240))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 256, v59);
  if (*(_BYTE *)(v57 - 216))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 232, v59);
  if (*(_BYTE *)(v57 - 192))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 208, v59);
  if (*(_BYTE *)(v57 - 176))
  {
    v60 = *(const void **)(v57 - 184);
    *(_QWORD *)(v57 - 184) = 0;
    if (v60)
      CFRelease(v60);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v57 - 168, (WTF::StringImpl *)v59);
  if (*(_BYTE *)(v57 - 136))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v57 - 152, v61);
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v57 - 128);
  _Unwind_Resume(a1);
}

void sub_196C9B430()
{
  JUMPOUT(0x196C9B3BCLL);
}

void sub_196C9B438()
{
  JUMPOUT(0x196C9B3CCLL);
}

void sub_196C9B440()
{
  JUMPOUT(0x196C9B3DCLL);
}

void sub_196C9B448()
{
  JUMPOUT(0x196C9B3ECLL);
}

void sub_196C9B454()
{
  JUMPOUT(0x196C9B400);
}

void sub_196C9B45C()
{
  JUMPOUT(0x196C9B408);
}

void sub_196C9B464()
{
  JUMPOUT(0x196C9B418);
}

void WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters(WebKit::NetworkProcessCreationParameters *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  WTF::StringImpl *v10;
  const void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 23);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 168, v3);
  WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, v6);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v9);
  v11 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v10);
  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)this + 3, 0);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
}

uint64_t WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  const char ***v9;
  const char ***v10;
  char *v11;
  WTF *v12;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = 0;
    v7 = *(WTF **)a1;
    v8 = 704 * v3;
    do
    {
      v9 = (const char ***)((char *)v7 + v6);
      if (*((_BYTE *)v7 + v6 + 696))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v9 + 86);
      if (*((_BYTE *)v9 + 680))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)((char *)v7 + v6 + 672));
      v10 = (const char ***)((char *)v7 + v6);
      if (*((_BYTE *)v7 + v6 + 664))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v10 + 82);
      if (*((_BYTE *)v10 + 648))
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)((char *)v7 + v6 + 640));
      v11 = (char *)v7 + v6;
      WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WTF *)((char *)v7 + v6 + 32), a2);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)((char *)v7 + v6 + 16));
      v12 = *(WTF **)((char *)v7 + v6);
      if (v12)
      {
        *(_QWORD *)v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree(v12, a2);
      }
      v6 += 704;
    }
    while (v8 != v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)a1 + 16;
    v7 = 32 * v3;
    do
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      v8 = *(_QWORD *)(v6 - 8);
      if (v8)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v8, a2);
      v9 = *(WTF::StringImpl **)(v6 - 16);
      *(_QWORD *)(v6 - 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters(const char ***this, WTF::StringImpl *a2)
{
  void *v3;
  const char **v4;

  if (*((_BYTE *)this + 696))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 86);
  if (*((_BYTE *)this + 680))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 84);
  if (*((_BYTE *)this + 664))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 82);
  if (*((_BYTE *)this + 648))
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 80);
  WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)(this + 4), a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(this + 2);
  v4 = *this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((WTF *)v4, v3);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  WTF::StringImpl ***v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29[2];
  WTF::StringImpl *v30[2];
  WTF::StringImpl ***v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl ***v39;

  IPC::Decoder::decode<WTF::String>(a2, &v37);
  IPC::Decoder::decode<WTF::String>(a2, &v35);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v33);
  v5 = a2[1];
  v6 = (WTF::StringImpl *)*a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
    goto LABEL_48;
  v8 = (unsigned __int8 *)v6 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v22 = v5;
    v23 = 0;
    goto LABEL_49;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_50;
  if (v9)
  {
    IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a2, v29);
    if (!LOBYTE(v29[1]))
      goto LABEL_51;
    v20 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
    *v20 = 0;
    v21 = v29[0];
    v29[0] = 0;
    *v20 = (WTF::StringImpl **)v21;
    v39 = 0;
    v31 = v20;
    v32 = 1;
    result = (WTF::StringImpl *)std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](&v39, 0);
    if (LOBYTE(v29[1]))
    {
      result = v29[0];
      if (v29[0])
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v29[0], v6);
    }
    v9 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 1;
  }
  while (*a2)
  {
    if (v38)
    {
      v10 = v37;
      v37 = 0;
      if (v36)
      {
        v11 = v35;
        v35 = 0;
        if (v34)
        {
          v12 = v33;
          v33 = 0;
          if (!v9)
          {
            v13 = v31;
            v31 = 0;
            *(_QWORD *)a1 = v10;
            *(_QWORD *)(a1 + 8) = v11;
            *(_OWORD *)v29 = 0u;
            *(_OWORD *)v30 = 0u;
            *(_QWORD *)(a1 + 16) = v12;
            *(_QWORD *)(a1 + 24) = v13;
            *(_BYTE *)(a1 + 32) = 1;
            std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100]((WTF::StringImpl ****)&v30[1], 0);
            v15 = v30[0];
            v30[0] = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = v29[1];
            v29[1] = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v14);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v29[0];
            v29[0] = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v14);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = 1;
            goto LABEL_21;
          }
        }
      }
    }
    __break(1u);
LABEL_48:
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a2;
        v22 = a2[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
LABEL_49:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
        v6 = (WTF::StringImpl *)*a2;
        v5 = a2[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_50:
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26 && v5)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v26 + 16))(v26, v6);
LABEL_51:
    LOBYTE(v31) = 0;
    v32 = 0;
    v6 = (WTF::StringImpl *)*a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result && v5)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v6);
    v9 = 1;
  }
  v18 = 0;
  v19 = 0;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if ((v9 & 1) == 0)
  {
LABEL_21:
    result = (WTF::StringImpl *)std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](&v31, 0);
    v19 = v18;
  }
  if (v34)
  {
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v36)
  {
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v38)
  {
    result = v37;
    v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v19)
  {
    v27 = *a2;
    v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v28)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v27);
    }
  }
  return result;
}

void sub_196C9BB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void sub_196C9BB7C()
{
  JUMPOUT(0x196C9BB6CLL);
}

void WebKit::AuxiliaryProcessCreationParameters::~AuxiliaryProcessCreationParameters(WTF::StringImpl ****this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl ***v5;

  std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::reset[abi:sn180100](this + 3, 0);
  v3 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)this[1];
  this[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *this;
  *this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebKit::NetworkProcessCreationParameters::NetworkProcessCreationParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v5;
  *(_WORD *)(result + 32) = *((_WORD *)a2 + 16);
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(result + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(result + 52) = v6;
  v7 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 56) = v7;
  v8 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(result + 64) = v8;
  *(_BYTE *)(result + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v9 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(result + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = 0;
  *(_DWORD *)(result + 88) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = 0;
  *(_DWORD *)(result + 92) = v9;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  v10 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(result + 96) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = 0;
  *(_DWORD *)(result + 104) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = 0;
  *(_DWORD *)(result + 108) = v10;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  v11 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(result + 112) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(result + 120) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(result + 124) = v11;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  v12 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(result + 128) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(result + 136) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(result + 140) = v12;
  LOWORD(v12) = *((_WORD *)a2 + 72);
  *(_BYTE *)(result + 146) = *((_BYTE *)a2 + 146);
  *(_WORD *)(result + 144) = v12;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  v13 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(result + 152) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(result + 160) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = 0;
  *(_DWORD *)(result + 164) = v13;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  v14 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(result + 168) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = 0;
  *(_DWORD *)(result + 176) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = 0;
  *(_DWORD *)(result + 180) = v14;
  *(_QWORD *)(result + 184) = 0;
  v15 = a2[23];
  a2[23] = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 184) = v15;
  v16 = a2[24];
  a2[24] = 0;
  *(_QWORD *)(result + 192) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = 0;
  *(_DWORD *)(result + 200) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = 0;
  *(_DWORD *)(result + 204) = v16;
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CacheModel>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  unsigned int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      v5 = *v4;
      v6 = 1;
      goto LABEL_4;
    }
    v10 = v1;
    v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  v5 = 0;
  v6 = 0;
LABEL_4:
  v7 = v5 < 3;
  v8 = v5 | 0x100;
  if ((v6 & v7) != 0)
    return v8;
  else
    return 0;
}

uint64_t IPC::ArgumentCoder<WebKit::WebProcessCreationParameters,void>::decode@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int16 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char ****v25;
  int v26;
  const char ***v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  _DWORD *v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  char v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  unint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  char v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  unint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned int v79;
  char v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  char v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  unint64_t v104;
  unsigned __int8 *v105;
  unsigned int v106;
  char v107;
  unsigned __int8 *v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  void *v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  unsigned int v120;
  char v121;
  unsigned __int8 *v122;
  unsigned int v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  unsigned int v129;
  char v130;
  unint64_t v131;
  char *v132;
  unsigned int v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  char v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unsigned int v144;
  char v145;
  WTF *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  char v152;
  unint64_t v153;
  int *v154;
  int v155;
  int v156;
  unint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  _DWORD *v161;
  uint64_t v162;
  unint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  int v168;
  unint64_t v169;
  unsigned __int8 *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  int v174;
  _OWORD *v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  _OWORD *v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  void *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  char v215;
  uint64_t v216;
  char v217;
  char v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  char v226;
  __int128 v227;
  __int128 v228;
  WTF::StringImpl *v229;
  const char **v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  const char **v266;
  CFTypeRef v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  const char **v281;
  const char **v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl **v287;
  WTF::StringImpl **v288;
  uint64_t v289;
  void *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  void *v294;
  char v295;
  CFTypeRef v296;
  char v297;
  char v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  uint64_t v302;
  WTF::StringImpl *v303;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  BOOL v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char v420;
  char v421;
  uint64_t v422;
  char v423;
  _BYTE *v424;
  char v425;
  int v426;
  char v427;
  char v428;
  int v429;
  int v430;
  char v431;
  int v432;
  char v433;
  int v434;
  char v435;
  int v436;
  char v437;
  uint64_t v438;
  int v439;
  char v440;
  int v441;
  char v442;
  int v443;
  unsigned __int16 v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  char v448;
  int v449;
  int v450;
  char v451;
  int v452;
  char v453;
  int v454;
  char v455;
  int v456;
  char v457;
  int v458;
  char v459;
  int v460;
  char v461;
  int v462;
  char v463;
  int v464;
  char v465;
  int v466;
  char v467;
  int v468;
  char v469;
  int v470;
  int v471;
  int v472;
  int v473;
  const char ***v474;
  int v475;
  unsigned __int16 v476;
  unint64_t v477;
  int v478;
  int v479;
  WTF *v480;
  uint64_t v481;
  char v482;
  WTF::StringImpl **v483;
  char v484;
  WTF::StringImpl **v485;
  char v486;
  WTF::StringImpl *v487;
  char v488;
  _BYTE v489[23];
  char v490;
  WTF::StringImpl *v491;
  char v492;
  WTF::StringImpl *v493;
  char v494;
  char v495[8];
  char v496;
  uint64_t v497;
  uint64_t v498;
  char v499;
  const char **v500;
  char v501;
  char v502;
  const char **v503;
  char v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  char v508;
  int v509;
  uint64_t v510;
  char v511;
  uint64_t v512;
  uint64_t v513;
  char v514;
  CFTypeRef cf;
  char v516;
  const char **v517;
  char v518;
  WTF::StringImpl *v519;
  char v520;
  _BYTE v521[4];
  char v522;
  WTF::StringImpl *v523;
  char v524;
  WTF::StringImpl *v525;
  char v526;
  uint64_t v527;
  uint64_t v528;
  char v529;
  uint64_t v530;
  uint64_t v531;
  char v532;
  uint64_t v533;
  uint64_t v534;
  char v535;
  uint64_t v536;
  uint64_t v537;
  char v538;
  uint64_t v539;
  uint64_t v540;
  char v541;
  uint64_t v542;
  uint64_t v543;
  char v544;
  uint64_t v545;
  uint64_t v546;
  char v547;
  uint64_t v548;
  uint64_t v549;
  char v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  uint64_t v554;
  uint64_t v555;
  char v556;
  uint64_t v557;
  uint64_t v558;
  char v559;
  uint64_t v560;
  uint64_t v561;
  char v562;
  uint64_t v563;
  uint64_t v564;
  char v565;
  uint64_t v566;
  uint64_t v567;
  char v568;
  uint64_t v569;
  uint64_t v570;
  char v571;
  uint64_t v572;
  char v573;
  uint64_t v574;
  uint64_t v575;
  char v576;
  const char **v577;
  char v578;
  WTF::StringImpl *v579;
  char v580;
  __int128 v581;
  __int128 v582;
  char v583;
  _BYTE v584[32];
  WTF::StringImpl *v585;
  __int128 v586;
  uint64_t v587;
  __int128 v588;
  __int128 v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  char v617;
  const char ***v618;
  int v619;
  char v620;
  char v621;
  char v622;
  char v623;
  char v624;
  char v625;
  char v626;
  char v627;
  char v628;
  char v629;
  char v630;
  char v631;
  __int16 v632;
  WTF::StringImpl *v633;
  int v634;
  int v635;
  WTF::StringImpl *v636;
  int v637;
  WTF::StringImpl *v638;
  const char **v639;
  char v640;
  char v641;
  char v642;
  uint64_t v643;
  unint64_t v644;
  CFTypeRef v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  char v650;
  const char **v651;
  __int128 v652;
  uint64_t v653;
  WTF::StringImpl *v654;
  __int128 v655;
  char v656;
  __int128 v657;
  __int128 v658;
  uint64_t v659;
  char v660;
  uint64_t v661;
  char v662;
  uint64_t v663;
  char v664;
  char v665;
  char v666;
  uint64_t v667;
  uint64_t v668;
  const char **v669;
  char v670;
  const char **v671;
  char v672;
  char v673;
  char v674;
  _QWORD v675[2];
  char v676;
  char v677;
  char v678;
  char v679;
  uint64_t v680;
  WTF::StringImpl *v681;
  WTF::StringImpl *v682;
  unint64_t v683;
  uint64_t v684;
  _BYTE v685[23];
  char v686;
  WTF::StringImpl *v687;
  WTF::StringImpl **v688;
  WTF::StringImpl **v689;
  uint64_t v690;
  WTF *v691;
  uint64_t v692;
  const char **v693;
  __int128 v694;
  uint64_t v695;
  WTF::StringImpl *v696;
  __int128 v697;
  char v698;
  __int128 v699;
  __int128 v700;
  uint64_t v701;
  char v702;
  uint64_t v703;
  char v704;
  uint64_t v705;
  char v706;
  char v707;
  char v708;
  char v709;
  uint64_t v710;

  v710 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::AuxiliaryProcessCreationParameters>((uint64_t)&v581, a1);
  IPC::Decoder::decode<WTF::String>(a1, &v579);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v577);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v574);
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v572);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v569);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v7, (uint64_t)&v566);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v8, (uint64_t)&v563);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)&v560);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v557);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v11, (uint64_t)&v554);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v12, (uint64_t)&v551);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v13, (uint64_t)&v548);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v14, (uint64_t)&v545);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v15, (uint64_t)&v542);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v16, (uint64_t)&v539);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v17, (uint64_t)&v536);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v18, (uint64_t)&v533);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v19, (uint64_t)&v530);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v20, (uint64_t)&v527);
  v21 = IPC::Decoder::decode<WebKit::CacheModel>(a1);
  v22 = a1[1];
  v23 = *a1;
  v24 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  v476 = v21;
  if (v22 < v24 || v22 - v24 <= 7)
  {
    v28 = 0;
    v311 = 0;
    *a1 = 0;
    a1[1] = 0;
    v312 = a1[3];
    if (v312)
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v312 + 16))(v312);
        v311 = *a1;
        v28 = a1[1];
      }
      else
      {
        v28 = 0;
        v311 = 0;
      }
    }
  }
  else
  {
    v25 = (const char ****)(v23 + v24);
    a1[2] = (uint64_t)(v25 + 1);
    if (v23)
    {
      v26 = 0;
      v27 = *v25;
      v28 = v23;
      goto LABEL_5;
    }
    v28 = v22;
    v311 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v313 = a1[3];
  if (v313)
  {
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v313 + 16))(v313, v311, v28);
      v27 = 0;
      v28 = *a1;
      v22 = a1[1];
      v26 = 1;
      v23 = *a1;
      goto LABEL_5;
    }
  }
  else
  {
    v28 = 0;
  }
  v22 = 0;
  v23 = 0;
  v27 = 0;
  v26 = 1;
LABEL_5:
  v29 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v23;
  if (v22 < v29 || v22 - v29 <= 3)
  {
    v314 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v315 = a1[3];
    if (v315)
    {
      if (v22)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v315 + 16))(v315);
        v28 = *a1;
        v314 = a1[1];
      }
      else
      {
        v314 = 0;
        v28 = 0;
      }
    }
  }
  else
  {
    v30 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v31 = v30 + 1;
    a1[2] = (uint64_t)(v30 + 1);
    if (v23)
    {
      v32 = 0;
      v33 = *v30;
      goto LABEL_9;
    }
    v314 = v22;
  }
  *a1 = 0;
  a1[1] = 0;
  v316 = a1[3];
  if (!v316 || !v314)
  {
    v33 = 0;
    v28 = 0;
    v23 = 0;
    v32 = 1;
    goto LABEL_496;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v316 + 16))(v316, v28, v314);
  v33 = 0;
  v23 = *a1;
  v22 = a1[1];
  v31 = (_DWORD *)a1[2];
  v32 = 1;
  v28 = *a1;
LABEL_9:
  v34 = (char *)v31 - v23;
  if (v22 <= (unint64_t)v34)
  {
    v28 = 0;
    v406 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v406 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v406 + 16))(v406);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_496:
    *a1 = 0;
    a1[1] = 0;
    v317 = a1[3];
    if (v317)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, v23, v28);
        v37 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_499;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v37 = 0;
    goto LABEL_499;
  }
  v35 = &v34[v23];
  v36 = (uint64_t)&v34[v23 + 1];
  a1[2] = v36;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_496;
  }
  v37 = *v35;
  if (v37 < 2)
  {
    v38 = 0;
    v39 = 1;
    goto LABEL_13;
  }
LABEL_499:
  *a1 = 0;
  a1[1] = 0;
  v318 = a1[3];
  if (!v318 || !v22)
  {
    v40 = 0;
    v28 = 0;
    v23 = 0;
    v38 = 1;
    goto LABEL_501;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v318 + 16))(v318, v28);
  v39 = 0;
  v23 = *a1;
  v22 = a1[1];
  v36 = a1[2];
  v38 = 1;
  v28 = *a1;
LABEL_13:
  if (v37)
    v40 = v39;
  else
    v40 = 0;
  v41 = v36 - v23;
  if (v22 <= v41)
  {
    v28 = 0;
    v415 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v415 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v415 + 16))(v415);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_501:
    *a1 = 0;
    a1[1] = 0;
    v319 = a1[3];
    if (v319)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v319 + 16))(v319, v23, v28);
        v44 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_504;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v44 = 0;
    goto LABEL_504;
  }
  v42 = (unsigned __int8 *)(v23 + v41);
  v43 = v23 + v41 + 1;
  a1[2] = v43;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_501;
  }
  v44 = *v42;
  if (v44 < 2)
  {
    v470 = 0;
    v45 = 1;
    goto LABEL_20;
  }
LABEL_504:
  *a1 = 0;
  a1[1] = 0;
  v320 = a1[3];
  if (!v320 || !v22)
  {
    v469 = 0;
    v28 = 0;
    v23 = 0;
    v470 = 1;
    goto LABEL_506;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v320 + 16))(v320, v28);
  v45 = 0;
  v23 = *a1;
  v22 = a1[1];
  v43 = a1[2];
  v470 = 1;
  v28 = *a1;
LABEL_20:
  if (!v44)
    v45 = 0;
  v469 = v45;
  v46 = v43 - v23;
  if (v22 <= v46)
  {
    v28 = 0;
    v414 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v414 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v414 + 16))(v414);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_506:
    *a1 = 0;
    a1[1] = 0;
    v321 = a1[3];
    if (v321)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v321 + 16))(v321, v23, v28);
        v49 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_509;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v49 = 0;
    goto LABEL_509;
  }
  v47 = (unsigned __int8 *)(v23 + v46);
  v48 = v23 + v46 + 1;
  a1[2] = v48;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_506;
  }
  v49 = *v47;
  if (v49 < 2)
  {
    v468 = 0;
    v50 = 1;
    goto LABEL_26;
  }
LABEL_509:
  *a1 = 0;
  a1[1] = 0;
  v322 = a1[3];
  if (!v322 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v467 = 0;
    v468 = 1;
    goto LABEL_511;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v322 + 16))(v322, v28);
  v50 = 0;
  v23 = *a1;
  v22 = a1[1];
  v48 = a1[2];
  v468 = 1;
  v28 = *a1;
LABEL_26:
  if (!v49)
    v50 = 0;
  v467 = v50;
  v51 = v48 - v23;
  if (v22 <= v51)
  {
    v28 = 0;
    v413 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v413 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v413 + 16))(v413);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_511:
    *a1 = 0;
    a1[1] = 0;
    v323 = a1[3];
    if (v323)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v323 + 16))(v323, v23, v28);
        v54 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_514;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v54 = 0;
    goto LABEL_514;
  }
  v52 = (unsigned __int8 *)(v23 + v51);
  v53 = v23 + v51 + 1;
  a1[2] = v53;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_511;
  }
  v54 = *v52;
  if (v54 < 2)
  {
    v466 = 0;
    v55 = 1;
    goto LABEL_32;
  }
LABEL_514:
  *a1 = 0;
  a1[1] = 0;
  v324 = a1[3];
  if (!v324 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v465 = 0;
    v466 = 1;
    goto LABEL_516;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v324 + 16))(v324, v28);
  v55 = 0;
  v23 = *a1;
  v22 = a1[1];
  v53 = a1[2];
  v466 = 1;
  v28 = *a1;
LABEL_32:
  if (!v54)
    v55 = 0;
  v465 = v55;
  v56 = v53 - v23;
  if (v22 <= v56)
  {
    v28 = 0;
    v412 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v412 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v412 + 16))(v412);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_516:
    *a1 = 0;
    a1[1] = 0;
    v325 = a1[3];
    if (v325)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v325 + 16))(v325, v23, v28);
        v59 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_519;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v59 = 0;
    goto LABEL_519;
  }
  v57 = (unsigned __int8 *)(v23 + v56);
  v58 = v23 + v56 + 1;
  a1[2] = v58;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_516;
  }
  v59 = *v57;
  if (v59 < 2)
  {
    v464 = 0;
    v60 = 1;
    goto LABEL_38;
  }
LABEL_519:
  *a1 = 0;
  a1[1] = 0;
  v326 = a1[3];
  if (!v326 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v463 = 0;
    v464 = 1;
    goto LABEL_521;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v326 + 16))(v326, v28);
  v60 = 0;
  v23 = *a1;
  v22 = a1[1];
  v58 = a1[2];
  v464 = 1;
  v28 = *a1;
LABEL_38:
  if (!v59)
    v60 = 0;
  v463 = v60;
  v61 = v58 - v23;
  if (v22 <= v61)
  {
    v28 = 0;
    v411 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v411 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v411 + 16))(v411);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_521:
    *a1 = 0;
    a1[1] = 0;
    v327 = a1[3];
    if (v327)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v327 + 16))(v327, v23, v28);
        v64 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_524;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v64 = 0;
    goto LABEL_524;
  }
  v62 = (unsigned __int8 *)(v23 + v61);
  v63 = v23 + v61 + 1;
  a1[2] = v63;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_521;
  }
  v64 = *v62;
  if (v64 < 2)
  {
    v462 = 0;
    v65 = 1;
    goto LABEL_44;
  }
LABEL_524:
  *a1 = 0;
  a1[1] = 0;
  v328 = a1[3];
  if (!v328 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v461 = 0;
    v462 = 1;
    goto LABEL_526;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v328 + 16))(v328, v28);
  v65 = 0;
  v23 = *a1;
  v22 = a1[1];
  v63 = a1[2];
  v462 = 1;
  v28 = *a1;
LABEL_44:
  if (!v64)
    v65 = 0;
  v461 = v65;
  v66 = v63 - v23;
  if (v22 <= v66)
  {
    v28 = 0;
    v410 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v410 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v410 + 16))(v410);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_526:
    *a1 = 0;
    a1[1] = 0;
    v329 = a1[3];
    if (v329)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v329 + 16))(v329, v23, v28);
        v69 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_529;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v69 = 0;
    goto LABEL_529;
  }
  v67 = (unsigned __int8 *)(v23 + v66);
  v68 = v23 + v66 + 1;
  a1[2] = v68;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_526;
  }
  v69 = *v67;
  if (v69 < 2)
  {
    v460 = 0;
    v70 = 1;
    goto LABEL_50;
  }
LABEL_529:
  *a1 = 0;
  a1[1] = 0;
  v330 = a1[3];
  if (!v330 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v459 = 0;
    v460 = 1;
    goto LABEL_531;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v330 + 16))(v330, v28);
  v70 = 0;
  v23 = *a1;
  v22 = a1[1];
  v68 = a1[2];
  v460 = 1;
  v28 = *a1;
LABEL_50:
  if (!v69)
    v70 = 0;
  v459 = v70;
  v71 = v68 - v23;
  if (v22 <= v71)
  {
    v28 = 0;
    v409 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v409 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v409 + 16))(v409);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_531:
    *a1 = 0;
    a1[1] = 0;
    v331 = a1[3];
    if (v331)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v331 + 16))(v331, v23, v28);
        v74 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_534;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v74 = 0;
    goto LABEL_534;
  }
  v72 = (unsigned __int8 *)(v23 + v71);
  v73 = v23 + v71 + 1;
  a1[2] = v73;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_531;
  }
  v74 = *v72;
  if (v74 < 2)
  {
    v458 = 0;
    v75 = 1;
    goto LABEL_56;
  }
LABEL_534:
  *a1 = 0;
  a1[1] = 0;
  v332 = a1[3];
  if (!v332 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v457 = 0;
    v458 = 1;
    goto LABEL_536;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v332 + 16))(v332, v28);
  v75 = 0;
  v23 = *a1;
  v22 = a1[1];
  v73 = a1[2];
  v458 = 1;
  v28 = *a1;
LABEL_56:
  if (!v74)
    v75 = 0;
  v457 = v75;
  v76 = v73 - v23;
  if (v22 <= v76)
  {
    v28 = 0;
    v408 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v408 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v408 + 16))(v408);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_536:
    *a1 = 0;
    a1[1] = 0;
    v333 = a1[3];
    if (v333)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v333 + 16))(v333, v23, v28);
        v79 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_539;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v79 = 0;
    goto LABEL_539;
  }
  v77 = (unsigned __int8 *)(v23 + v76);
  v78 = v23 + v76 + 1;
  a1[2] = v78;
  if (!v23)
  {
    v28 = v22;
    goto LABEL_536;
  }
  v79 = *v77;
  if (v79 < 2)
  {
    v456 = 0;
    v80 = 1;
    goto LABEL_62;
  }
LABEL_539:
  *a1 = 0;
  a1[1] = 0;
  v334 = a1[3];
  if (!v334 || !v22)
  {
    v28 = 0;
    v23 = 0;
    v455 = 0;
    v456 = 1;
    goto LABEL_541;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v334 + 16))(v334, v28);
  v80 = 0;
  v23 = *a1;
  v22 = a1[1];
  v78 = a1[2];
  v456 = 1;
  v28 = *a1;
LABEL_62:
  if (!v79)
    v80 = 0;
  v455 = v80;
  v81 = v78 - v23;
  if (v22 <= v81)
  {
    v28 = 0;
    v407 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v407 && v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v407 + 16))(v407);
      v23 = *a1;
      v28 = a1[1];
    }
    else
    {
      v23 = 0;
    }
LABEL_541:
    *a1 = 0;
    a1[1] = 0;
    v335 = a1[3];
    if (v335)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v335 + 16))(v335, v23, v28);
        v83 = 0;
        v28 = *a1;
        v22 = a1[1];
        goto LABEL_544;
      }
      v22 = 0;
    }
    else
    {
      v22 = 0;
      v28 = 0;
    }
    v83 = 0;
    goto LABEL_544;
  }
  v82 = (unsigned __int8 *)(v23 + v81);
  a1[2] = (uint64_t)(v82 + 1);
  if (!v23)
  {
    v28 = v22;
    goto LABEL_541;
  }
  v83 = *v82;
  if (v83 < 2)
  {
    v454 = 0;
    v84 = 1;
    goto LABEL_68;
  }
LABEL_544:
  *a1 = 0;
  a1[1] = 0;
  v336 = a1[3];
  if (v336 && v22)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v336 + 16))(v336, v28);
  v84 = 0;
  v454 = 1;
LABEL_68:
  if (!v83)
    v84 = 0;
  v453 = v84;
  *(_WORD *)v584 = 0;
  IPC::Decoder::operator>><BOOL>(a1, v584);
  v85 = a1[1];
  v452 = v584[1];
  if (v584[1])
  {
    v451 = v584[0];
  }
  else
  {
    v305 = *a1;
    *a1 = 0;
    a1[1] = 0;
    v306 = a1[3];
    if (!v306 || !v85)
    {
      v451 = 0;
      v85 = 0;
      v86 = *a1;
LABEL_482:
      *a1 = 0;
      a1[1] = 0;
      v307 = a1[3];
      if (v307)
      {
        if (v85)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v307 + 16))(v307, v86);
          v308 = *a1;
          v85 = a1[1];
        }
        else
        {
          v308 = 0;
        }
      }
      else
      {
        v308 = 0;
        v85 = 0;
      }
LABEL_484:
      *a1 = 0;
      a1[1] = 0;
      v309 = a1[3];
      if (v309)
      {
        if (v85)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v309 + 16))(v309, v308);
          v89 = 0;
          v86 = *a1;
          v85 = a1[1];
          goto LABEL_487;
        }
      }
      else
      {
        v85 = 0;
      }
      v86 = 0;
      v89 = 0;
      goto LABEL_487;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v306 + 16))(v306, v305);
    v451 = 0;
    v85 = a1[1];
  }
  v86 = *a1;
  v87 = a1[2] - *a1;
  if (v85 <= v87)
    goto LABEL_482;
  v88 = (unsigned __int8 *)(v86 + v87);
  a1[2] = (uint64_t)(v88 + 1);
  if (!v86)
  {
    v308 = 0;
    goto LABEL_484;
  }
  v89 = *v88;
  if (v89 < 2)
  {
    v450 = 0;
    v90 = 1;
    goto LABEL_76;
  }
LABEL_487:
  *a1 = 0;
  a1[1] = 0;
  v310 = a1[3];
  if (v310 && v85)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v310 + 16))(v310, v86);
  v90 = 0;
  v450 = 1;
LABEL_76:
  if (v89)
    v91 = v90;
  else
    v91 = 0;
  v449 = IPC::Decoder::decode<WebKit::TextCheckerState>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v525);
  v447 = IPC::Decoder::decode<unsigned int>(a1);
  v446 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v523);
  v445 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::takeLastAttachment((IPC::Decoder *)a1, v521);
  IPC::Decoder::decode<WTF::String>(a1, &v519);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v517);
  v92 = a1[1];
  v93 = *a1;
  v94 = a1[2] - *a1;
  v448 = v91;
  if (v92 <= v94)
  {
    v337 = 0;
    v338 = 0;
    *a1 = 0;
    a1[1] = 0;
    v339 = a1[3];
    if (v339)
    {
      if (v92)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v339 + 16))(v339);
        v338 = *a1;
        v337 = a1[1];
      }
      else
      {
        v337 = 0;
        v338 = 0;
      }
    }
    goto LABEL_547;
  }
  v95 = (unsigned __int8 *)(v93 + v94);
  v96 = v93 + v94 + 1;
  a1[2] = v96;
  if (!v93)
  {
    v337 = v92;
    v338 = 0;
LABEL_547:
    *a1 = 0;
    a1[1] = 0;
    v340 = a1[3];
    if (v340 && v337)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340 + 16))(v340, v338, v337);
      v97 = 0;
      v93 = *a1;
      v92 = a1[1];
    }
    else
    {
      v92 = 0;
      v93 = 0;
      v97 = 0;
    }
    goto LABEL_549;
  }
  v97 = *v95;
  if (v97 < 2)
  {
    v443 = 0;
    v98 = 1;
    goto LABEL_83;
  }
LABEL_549:
  *a1 = 0;
  a1[1] = 0;
  v341 = a1[3];
  if (!v341 || !v92)
  {
    v342 = 0;
    v93 = 0;
    v442 = 0;
    v443 = 1;
LABEL_551:
    *a1 = 0;
    a1[1] = 0;
    v343 = a1[3];
    if (v343 && v342)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v343 + 16))(v343, v93, v342);
      v102 = 0;
      v93 = *a1;
      v92 = a1[1];
    }
    else
    {
      v92 = 0;
      v93 = 0;
      v102 = 0;
    }
    goto LABEL_553;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v341 + 16))(v341, v93);
  v98 = 0;
  v93 = *a1;
  v92 = a1[1];
  v443 = 1;
  v96 = a1[2];
LABEL_83:
  if (!v97)
    v98 = 0;
  v442 = v98;
  v99 = v96 - v93;
  if (v92 <= v99)
  {
    v342 = 0;
    v417 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v417 && v92)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v417 + 16))(v417);
      v93 = *a1;
      v342 = a1[1];
    }
    else
    {
      v93 = 0;
    }
    goto LABEL_551;
  }
  v100 = (unsigned __int8 *)(v93 + v99);
  v101 = v93 + v99 + 1;
  a1[2] = v101;
  if (!v93)
  {
    v342 = v92;
    goto LABEL_551;
  }
  v102 = *v100;
  if (v102 < 2)
  {
    v441 = 0;
    v103 = 1;
    goto LABEL_89;
  }
LABEL_553:
  *a1 = 0;
  a1[1] = 0;
  v344 = a1[3];
  if (!v344 || !v92)
  {
    v345 = 0;
    v93 = 0;
    v440 = 0;
    v441 = 1;
LABEL_555:
    *a1 = 0;
    a1[1] = 0;
    v346 = a1[3];
    if (v346 && v345)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v346 + 16))(v346, v93, v345);
      v106 = 0;
      v93 = *a1;
      v92 = a1[1];
    }
    else
    {
      v92 = 0;
      v93 = 0;
      v106 = 0;
    }
    goto LABEL_557;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v344 + 16))(v344, v93);
  v103 = 0;
  v93 = *a1;
  v92 = a1[1];
  v441 = 1;
  v101 = a1[2];
LABEL_89:
  if (!v102)
    v103 = 0;
  v440 = v103;
  v104 = v101 - v93;
  if (v92 <= v104)
  {
    v345 = 0;
    v416 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v416 && v92)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v416 + 16))(v416);
      v93 = *a1;
      v345 = a1[1];
    }
    else
    {
      v93 = 0;
    }
    goto LABEL_555;
  }
  v105 = (unsigned __int8 *)(v93 + v104);
  a1[2] = (uint64_t)(v105 + 1);
  if (!v93)
  {
    v345 = v92;
    goto LABEL_555;
  }
  v106 = *v105;
  if (v106 < 2)
  {
    v439 = 0;
    v107 = 1;
    goto LABEL_95;
  }
LABEL_557:
  *a1 = 0;
  a1[1] = 0;
  v347 = a1[3];
  if (!v347)
  {
    v93 = 0;
    v437 = 0;
    v92 = 0;
LABEL_559:
    v439 = 1;
LABEL_560:
    *a1 = 0;
    a1[1] = 0;
    v348 = a1[3];
    if (v348)
    {
      if (v92)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v348 + 16))(v348, v93);
        v349 = *a1;
        v92 = a1[1];
      }
      else
      {
        v349 = 0;
      }
    }
    else
    {
      v349 = 0;
      v92 = 0;
    }
    goto LABEL_562;
  }
  if (!v92)
  {
    v93 = 0;
    v437 = 0;
    goto LABEL_559;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v347 + 16))(v347, v93);
  v107 = 0;
  v93 = *a1;
  v92 = a1[1];
  v439 = 1;
LABEL_95:
  if (!v106)
    v107 = 0;
  v437 = v107;
  if (v92 <= a1[2] - v93)
    goto LABEL_560;
  v108 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v108 + 1);
  if (!v93)
  {
    v349 = 0;
LABEL_562:
    *a1 = 0;
    a1[1] = 0;
    v350 = a1[3];
    if (v350)
    {
      if (v92)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v350 + 16))(v350, v349);
        v93 = *a1;
        v92 = a1[1];
      }
      else
      {
        v93 = 0;
      }
    }
    else
    {
      v93 = 0;
      v92 = 0;
    }
LABEL_564:
    *a1 = 0;
    a1[1] = 0;
    v351 = a1[3];
    if (v351 && v92)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v351 + 16))(v351, v93);
    goto LABEL_565;
  }
  v109 = *v108;
  if (v109 >= 2)
    goto LABEL_564;
  if (!v109)
  {
    v438 = 0;
    v479 = 0;
    goto LABEL_103;
  }
  IPC::ArgumentCoder<API::Data,void>::decode((uint64_t)v584, a1);
  if (v584[8])
  {
    v479 = 0;
    v438 = *(_QWORD *)v584;
    goto LABEL_103;
  }
LABEL_565:
  v352 = *a1;
  v353 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v354 = a1[3];
  if (v354 && v353)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v354 + 16))(v354, v352);
  v438 = 0;
  v479 = 1;
LABEL_103:
  v110 = a1[1];
  v111 = *a1;
  v112 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v110 < v112 || v110 - v112 <= 3)
  {
    v355 = 0;
    v356 = 0;
    *a1 = 0;
    a1[1] = 0;
    v357 = a1[3];
    if (v357)
    {
      if (v110)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v357 + 16))(v357);
        v356 = *a1;
        v355 = a1[1];
      }
      else
      {
        v355 = 0;
        v356 = 0;
      }
    }
    goto LABEL_570;
  }
  v113 = (unsigned int *)(v111 + v112);
  a1[2] = (uint64_t)(v113 + 1);
  if (!v111)
  {
    v355 = v110;
    v356 = 0;
LABEL_570:
    *a1 = 0;
    a1[1] = 0;
    v358 = a1[3];
    if (v358 && v355)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v358 + 16))(v358, v356);
    goto LABEL_232;
  }
  v477 = 0;
  v114 = *v113;
  *(_QWORD *)v489 = 0;
  if (!(_DWORD)v114)
  {
LABEL_107:
    v478 = 0;
    goto LABEL_108;
  }
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(a1, &v693);
    if (!(_BYTE)v694)
      break;
    v146 = (WTF *)IPC::Decoder::decode<BOOL>(a1);
    LOWORD(v512) = (_WORD)v146;
    if ((unsigned __int16)v146 < 0x100u)
      break;
    if (!(_BYTE)v694)
      goto LABEL_476;
    if ((unint64_t)v693 + 1 < 2)
      break;
    WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>((uint64_t)v584, (uint64_t *)v489, (WTF::StringImpl **)&v693, &v512);
    if (!v584[16])
      break;
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v693, v158);
    v114 = (v114 - 1);
    if (!(_DWORD)v114)
    {
      v477 = *(_QWORD *)v489;
      goto LABEL_107;
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v693, v158);
  if (*(_QWORD *)v489)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v489, v196);
LABEL_232:
  v197 = *a1;
  v198 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v199 = a1[3];
  if (v199 && v198)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v199 + 16))(v199, v197);
  v477 = 0;
  v478 = 1;
LABEL_108:
  IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(a1, (uint64_t)&cf);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v115, (uint64_t)&v512);
  IPC::Decoder::decode<WebCore::ScreenProperties>((unint64_t *)a1, (uint64_t)&v509);
  v116 = a1[1];
  v117 = (char *)*a1;
  v118 = a1[2] - *a1;
  if (v116 <= v118)
  {
    v359 = 0;
    v360 = 0;
    *a1 = 0;
    a1[1] = 0;
    v361 = a1[3];
    if (v361)
    {
      if (v116)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v361 + 16))(v361);
        v360 = *a1;
        v359 = a1[1];
      }
      else
      {
        v359 = 0;
        v360 = 0;
      }
    }
    goto LABEL_574;
  }
  v119 = &v117[v118];
  a1[2] = (uint64_t)(v119 + 1);
  if (!v117)
  {
    v359 = v116;
    v360 = 0;
LABEL_574:
    *a1 = 0;
    a1[1] = 0;
    v362 = a1[3];
    if (v362 && v359)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v362 + 16))(v362, v360, v359);
      v120 = 0;
      v117 = (char *)*a1;
      v116 = a1[1];
    }
    else
    {
      v116 = 0;
      v117 = 0;
      v120 = 0;
    }
    goto LABEL_576;
  }
  v120 = *v119;
  if (v120 < 2)
  {
    v436 = 0;
    v121 = 1;
    goto LABEL_112;
  }
LABEL_576:
  *a1 = 0;
  a1[1] = 0;
  v363 = a1[3];
  if (!v363 || !v116)
  {
    v117 = 0;
    v116 = 0;
    v435 = 0;
    v436 = 1;
LABEL_578:
    *a1 = 0;
    a1[1] = 0;
    v364 = a1[3];
    if (v364)
    {
      if (v116)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v364 + 16))(v364, v117);
        v365 = *a1;
        v116 = a1[1];
      }
      else
      {
        v365 = 0;
      }
    }
    else
    {
      v365 = 0;
      v116 = 0;
    }
    goto LABEL_580;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v363 + 16))(v363, v117);
  v121 = 0;
  v117 = (char *)*a1;
  v116 = a1[1];
  v436 = 1;
LABEL_112:
  if (!v120)
    v121 = 0;
  v435 = v121;
  if (v116 <= a1[2] - (uint64_t)v117)
    goto LABEL_578;
  v122 = (unsigned __int8 *)a1[2];
  a1[2] = (uint64_t)(v122 + 1);
  if (!v117)
  {
    v365 = 0;
LABEL_580:
    *a1 = 0;
    a1[1] = 0;
    v366 = a1[3];
    if (v366)
    {
      if (v116)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v366 + 16))(v366, v365);
        v117 = (char *)*a1;
        v116 = a1[1];
      }
      else
      {
        v117 = 0;
      }
    }
    else
    {
      v117 = 0;
      v116 = 0;
    }
LABEL_582:
    *a1 = 0;
    a1[1] = 0;
    v367 = a1[3];
    if (v367 && v116)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v367 + 16))(v367, v117);
LABEL_583:
    LOBYTE(v693) = 0;
    v709 = 0;
LABEL_584:
    v117 = (char *)*a1;
    v368 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v369 = a1[3];
    if (v369 && v368)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v369 + 16))(v369, v117);
    goto LABEL_119;
  }
  v123 = *v122;
  if (v123 >= 2)
    goto LABEL_582;
  if (!v123)
  {
    LOBYTE(v693) = 0;
    v708 = 0;
    v709 = 1;
    goto LABEL_119;
  }
  IPC::Decoder::decode<WebKit::WebProcessDataStoreParameters>(a1, v584);
  if (!(_BYTE)v597)
    goto LABEL_583;
  v189 = *(_OWORD *)&v584[8];
  memset(&v584[8], 0, 24);
  v694 = v189;
  v190 = v586;
  v586 = 0u;
  v697 = v190;
  v191 = v588;
  v192 = v589;
  v588 = 0u;
  v589 = 0u;
  v693 = *(const char ***)v584;
  v695 = *(_QWORD *)&v584[24];
  v696 = v585;
  v698 = v587;
  v699 = v191;
  v700 = v192;
  LOBYTE(v701) = 0;
  v702 = 0;
  if ((_BYTE)v591)
  {
    v193 = v590;
    v590 = 0;
    v701 = v193;
    v702 = 1;
  }
  LOBYTE(v703) = 0;
  v704 = 0;
  if ((_BYTE)v593)
  {
    v194 = v592;
    v592 = 0;
    v703 = v194;
    v704 = 1;
  }
  LOBYTE(v705) = 0;
  v706 = 0;
  if ((_BYTE)v595)
  {
    v195 = v594;
    v594 = 0;
    v705 = v195;
    v706 = 1;
  }
  v707 = v596;
  v708 = 1;
  v709 = 1;
  WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)v584);
  if (!v709)
    goto LABEL_584;
LABEL_119:
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v117, (uint64_t)&v506);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v503);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v500);
  v124 = a1[1];
  v125 = (char *)*a1;
  v126 = a1[2] - *a1;
  if (v124 <= v126)
  {
    v370 = 0;
    v371 = 0;
    *a1 = 0;
    a1[1] = 0;
    v372 = a1[3];
    if (v372)
    {
      if (v124)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v372 + 16))(v372);
        v371 = *a1;
        v370 = a1[1];
      }
      else
      {
        v370 = 0;
        v371 = 0;
      }
    }
    goto LABEL_588;
  }
  v127 = &v125[v126];
  v128 = (uint64_t)&v125[v126 + 1];
  a1[2] = v128;
  if (!v125)
  {
    v370 = v124;
    v371 = 0;
LABEL_588:
    *a1 = 0;
    a1[1] = 0;
    v373 = a1[3];
    if (v373 && v370)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v373 + 16))(v373, v371, v370);
      v129 = 0;
      v125 = (char *)*a1;
      v124 = a1[1];
    }
    else
    {
      v124 = 0;
      v125 = 0;
      v129 = 0;
    }
    goto LABEL_590;
  }
  v129 = *v127;
  if (v129 < 2)
  {
    v434 = 0;
    v130 = 1;
    goto LABEL_123;
  }
LABEL_590:
  *a1 = 0;
  a1[1] = 0;
  v374 = a1[3];
  if (!v374 || !v124)
  {
    v375 = 0;
    v125 = 0;
    v433 = 0;
    v434 = 1;
LABEL_592:
    *a1 = 0;
    a1[1] = 0;
    v376 = a1[3];
    if (v376 && v375)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v376 + 16))(v376, v125, v375);
      v133 = 0;
      v125 = (char *)*a1;
      v124 = a1[1];
    }
    else
    {
      v124 = 0;
      v125 = 0;
      v133 = 0;
    }
    goto LABEL_594;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v374 + 16))(v374, v125);
  v130 = 0;
  v125 = (char *)*a1;
  v124 = a1[1];
  v434 = 1;
  v128 = a1[2];
LABEL_123:
  if (!v129)
    v130 = 0;
  v433 = v130;
  v131 = v128 - (_QWORD)v125;
  if (v124 <= v131)
  {
    v375 = 0;
    v418 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v418 && v124)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v418 + 16))(v418);
      v125 = (char *)*a1;
      v375 = a1[1];
    }
    else
    {
      v125 = 0;
    }
    goto LABEL_592;
  }
  v132 = &v125[v131];
  a1[2] = (uint64_t)(v132 + 1);
  if (!v125)
  {
    v375 = v124;
    goto LABEL_592;
  }
  v133 = *v132;
  if (v133 < 2)
  {
    v432 = 0;
    v134 = 1;
    goto LABEL_129;
  }
LABEL_594:
  *a1 = 0;
  a1[1] = 0;
  v377 = a1[3];
  if (v377 && v124)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v377 + 16))(v377, v125);
  v134 = 0;
  v432 = 1;
LABEL_129:
  if (!v133)
    v134 = 0;
  v431 = v134;
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v125, (uint64_t)&v497);
  v135 = a1[1];
  v136 = *a1;
  v137 = a1[2] - *a1;
  v424 = (_BYTE *)a2;
  v474 = v27;
  v475 = v26;
  v472 = v33;
  v473 = v32;
  v471 = v38;
  if (v135 <= v137)
  {
    v378 = 0;
    v379 = 0;
    *a1 = 0;
    a1[1] = 0;
    v380 = a1[3];
    if (v380)
    {
      if (v135)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v380 + 16))(v380);
        v379 = *a1;
        v378 = a1[1];
      }
      else
      {
        v378 = 0;
        v379 = 0;
      }
    }
    goto LABEL_597;
  }
  v138 = (unsigned __int8 *)(v136 + v137);
  v139 = v136 + v137 + 1;
  a1[2] = v139;
  if (!v136)
  {
    v378 = v135;
    v379 = 0;
LABEL_597:
    *a1 = 0;
    a1[1] = 0;
    v381 = a1[3];
    if (v381 && v378)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v381 + 16))(v381, v379, v378);
      v140 = 0;
      v136 = *a1;
      v135 = a1[1];
    }
    else
    {
      v135 = 0;
      v136 = 0;
      v140 = 0;
    }
    goto LABEL_599;
  }
  v140 = *v138;
  if (v140 < 2)
  {
    v430 = 0;
    v141 = 1;
    goto LABEL_135;
  }
LABEL_599:
  *a1 = 0;
  a1[1] = 0;
  v382 = a1[3];
  if (!v382 || !v135)
  {
    v428 = 0;
    v383 = 0;
    v136 = 0;
    v430 = 1;
LABEL_601:
    *a1 = 0;
    a1[1] = 0;
    v384 = a1[3];
    if (v384 && v383)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v384 + 16))(v384, v136, v383);
      v144 = 0;
      v136 = *a1;
      v135 = a1[1];
    }
    else
    {
      v135 = 0;
      v136 = 0;
      v144 = 0;
    }
    goto LABEL_603;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v382 + 16))(v382, v136);
  v141 = 0;
  v136 = *a1;
  v135 = a1[1];
  v430 = 1;
  v139 = a1[2];
LABEL_135:
  if (!v140)
    v141 = 0;
  v428 = v141;
  v142 = v139 - v136;
  if (v135 <= v142)
  {
    v383 = 0;
    v419 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v419 && v135)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v419 + 16))(v419);
      v136 = *a1;
      v383 = a1[1];
    }
    else
    {
      v136 = 0;
    }
    goto LABEL_601;
  }
  v143 = (unsigned __int8 *)(v136 + v142);
  a1[2] = (uint64_t)(v143 + 1);
  if (!v136)
  {
    v383 = v135;
    goto LABEL_601;
  }
  v144 = *v143;
  if (v144 < 2)
  {
    v429 = 0;
    v145 = 1;
    goto LABEL_141;
  }
LABEL_603:
  *a1 = 0;
  a1[1] = 0;
  v385 = a1[3];
  if (v385 && v135)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v385 + 16))(v385, v136);
  v145 = 0;
  v429 = 1;
LABEL_141:
  if (!v144)
    v145 = 0;
  v427 = v145;
  v146 = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v147 = a1[1];
  v148 = *a1;
  v149 = a1[2] - *a1;
  v444 = (unsigned __int16)v146;
  if (v147 <= v149)
  {
    v386 = 0;
    v387 = 0;
    *a1 = 0;
    a1[1] = 0;
    v388 = a1[3];
    if (v388)
    {
      if (v147)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v388 + 16))(v388);
        v387 = *a1;
        v386 = a1[1];
      }
      else
      {
        v386 = 0;
        v387 = 0;
      }
    }
    goto LABEL_606;
  }
  v150 = (unsigned __int8 *)(v148 + v149);
  a1[2] = (uint64_t)(v150 + 1);
  if (!v148)
  {
    v386 = v147;
    v387 = 0;
LABEL_606:
    *a1 = 0;
    a1[1] = 0;
    v389 = a1[3];
    if (v389 && v386)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v389 + 16))(v389, v387, v386);
      v151 = 0;
      v148 = *a1;
      v147 = a1[1];
    }
    else
    {
      v147 = 0;
      v148 = 0;
      v151 = 0;
    }
    goto LABEL_608;
  }
  v151 = *v150;
  if (v151 < 2)
  {
    v426 = 0;
    v152 = 1;
    goto LABEL_147;
  }
LABEL_608:
  *a1 = 0;
  a1[1] = 0;
  v146 = (WTF *)a1[3];
  if (v146)
  {
    if (v147)
    {
      v146 = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)v146 + 16))(v146, v148);
      v152 = 0;
      v148 = *a1;
      v147 = a1[1];
      goto LABEL_611;
    }
  }
  else
  {
    v147 = 0;
  }
  v148 = 0;
  v152 = 0;
LABEL_611:
  v426 = 1;
LABEL_147:
  if (!v151)
    v152 = 0;
  v425 = v152;
  v153 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v148;
  if (v147 < v153 || v147 - v153 <= 3)
  {
    v390 = 0;
    v391 = 0;
    *a1 = 0;
    a1[1] = 0;
    v392 = a1[3];
    if (v392)
    {
      if (v147)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v392 + 16))(v392);
        v391 = *a1;
        v390 = a1[1];
      }
      else
      {
        v390 = 0;
        v391 = 0;
      }
    }
    goto LABEL_613;
  }
  v154 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (uint64_t)(v154 + 1);
  if (!v148)
  {
    v390 = v147;
    v391 = 0;
LABEL_613:
    *a1 = 0;
    a1[1] = 0;
    v393 = a1[3];
    if (v393 && v390)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v393 + 16))(v393, v391, v390);
    goto LABEL_254;
  }
  v155 = *v154;
  *(_QWORD *)v489 = 0;
  if (!v155)
  {
    v2 = 0;
LABEL_219:
    LODWORD(v27) = 0;
    goto LABEL_256;
  }
  v156 = 0;
  v2 = 0x100000000;
  while (1)
  {
    v157 = a1[1];
    v158 = (WTF::StringImpl *)*a1;
    v159 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v157 >= v159 && v157 - v159 > 3)
    {
      v161 = (_DWORD *)((char *)v158 + v159);
      v162 = (uint64_t)v158 + v159 + 4;
      a1[2] = v162;
      if (v158)
      {
        v114 = 0;
        LODWORD(v27) = *v161;
        goto LABEL_161;
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      v200 = a1[3];
      if (!v200 || !v157)
        goto LABEL_237;
      (*(void (**)(uint64_t))(*(_QWORD *)v200 + 16))(v200);
      v158 = (WTF::StringImpl *)*a1;
      v157 = a1[1];
    }
    v402 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v402)
      v403 = v157 == 0;
    else
      v403 = 1;
    if (v403)
    {
LABEL_237:
      LODWORD(v27) = 0;
      v201 = 0;
      v158 = 0;
      v114 = 1;
LABEL_238:
      *a1 = 0;
      a1[1] = 0;
      v202 = a1[3];
      if (v202 && v201)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v202 + 16))(v202, v158, v201);
        v166 = 0;
        v158 = (WTF::StringImpl *)*a1;
        v157 = a1[1];
      }
      else
      {
        v157 = 0;
        v158 = 0;
        v166 = 0;
      }
      goto LABEL_240;
    }
    v146 = (WTF *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(_QWORD *)v402 + 16))(v402, v158, v157);
    LODWORD(v27) = 0;
    v158 = (WTF::StringImpl *)*a1;
    v157 = a1[1];
    v114 = 1;
    v162 = a1[2];
LABEL_161:
    v163 = v162 - (_QWORD)v158;
    if (v157 <= v163)
    {
      v201 = 0;
      v404 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v157 && v404)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v404 + 16))(v404);
        v158 = (WTF::StringImpl *)*a1;
        v201 = a1[1];
      }
      else
      {
        v158 = 0;
      }
      goto LABEL_238;
    }
    v164 = (unsigned __int8 *)v158 + v163;
    v165 = (uint64_t)v158 + v163 + 1;
    a1[2] = v165;
    if (!v158)
    {
      v201 = v157;
      goto LABEL_238;
    }
    v166 = *v164;
    if (v166 < 2)
    {
      v167 = 0;
      v168 = 1;
      goto LABEL_165;
    }
LABEL_240:
    *a1 = 0;
    a1[1] = 0;
    v203 = a1[3];
    if (!v203 || !v157)
    {
      v204 = 0;
      v158 = 0;
      goto LABEL_242;
    }
    v146 = (WTF *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v203 + 16))(v203, v158);
    v168 = 0;
    v158 = (WTF::StringImpl *)*a1;
    v157 = a1[1];
    v167 = 1;
    v165 = a1[2];
LABEL_165:
    if (!v166)
      v168 = 0;
    v169 = v165 - (_QWORD)v158;
    if (v157 <= v169)
      break;
    v170 = (unsigned __int8 *)v158 + v169;
    a1[2] = (uint64_t)(v170 + 1);
    if (!v158)
    {
      v204 = v157;
      goto LABEL_242;
    }
    a2 = *v170;
    if (a2 > 1)
      goto LABEL_244;
    if ((v114 & 1) != 0 || v167)
      goto LABEL_476;
    if (v168)
      v171 = 0x100000000;
    else
      v171 = 0;
    IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v584);
    if (!v584[8])
    {
      v172 = (void *)*a1;
      v209 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v210 = a1[3];
      if (!v210 || !v209 || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v210 + 16))(v210, v172), !v584[8]))
      {
LABEL_251:
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v584, v172);
        goto LABEL_252;
      }
    }
    if ((_DWORD)v27 || !HIDWORD(v171))
    {
      if (!(v27 | a2 | HIDWORD(v171)))
        goto LABEL_251;
    }
    else if ((_DWORD)a2)
    {
      goto LABEL_251;
    }
    v173 = *(_QWORD *)v489;
    if (*(_QWORD *)v489
      || (WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::expand((uint64_t *)v489),
          (v173 = *(_QWORD *)v489) != 0))
    {
      v174 = *(_DWORD *)(v173 - 8);
    }
    else
    {
      v174 = 0;
    }
    v175 = 0;
    v176 = 1;
    v177 = v27;
    while (1)
    {
      v178 = v177 & v174;
      v179 = (_OWORD *)(v173 + 16 * v178);
      v180 = *(_DWORD *)v179;
      v181 = *((unsigned __int8 *)v179 + 4);
      if (!(*(_DWORD *)v179 | v181) && !*((_BYTE *)v179 + 5))
        break;
      v182 = v180 == (_DWORD)v27 && v181 == HIDWORD(v171);
      if (v182 && *((_BYTE *)v179 + 5) == ((_DWORD)a2 != 0))
        goto LABEL_251;
      if (v180)
        v183 = 1;
      else
        v183 = v181 == 0;
      if (!v183 && *((_BYTE *)v179 + 5))
        v175 = (_OWORD *)(v173 + 16 * v178);
      v177 = v176 + v178;
      ++v176;
    }
    if (v175)
    {
      *v175 = xmmword_1978CE580;
      --*(_DWORD *)(*(_QWORD *)v489 - 16);
      v179 = v175;
    }
    *(_QWORD *)v179 = (v171 | v27) & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)((_DWORD)a2 != 0) << 40);
    WebCore::Color::operator=();
    v185 = *(_QWORD *)v489;
    if (*(_QWORD *)v489)
      v186 = *(_DWORD *)(*(_QWORD *)v489 - 12) + 1;
    else
      v186 = 1;
    *(_DWORD *)(*(_QWORD *)v489 - 12) = v186;
    v187 = (*(_DWORD *)(v185 - 16) + v186);
    v188 = *(unsigned int *)(v185 - 4);
    if (v188 > 0x400)
    {
      if (v188 > 2 * v187)
        goto LABEL_206;
LABEL_205:
      WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::expand((uint64_t *)v489);
      goto LABEL_206;
    }
    if (3 * v188 <= 4 * v187)
      goto LABEL_205;
LABEL_206:
    v146 = (WTF *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v584, v184);
    if (++v156 == v155)
    {
      v2 = *(_QWORD *)v489;
      goto LABEL_219;
    }
  }
  v204 = 0;
  v405 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v157 && v405)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 16))(v405);
    v158 = (WTF::StringImpl *)*a1;
    v204 = a1[1];
  }
  else
  {
    v158 = 0;
  }
LABEL_242:
  *a1 = 0;
  a1[1] = 0;
  v205 = a1[3];
  if (v205 && v204)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(_QWORD *)v205 + 16))(v205, v158, v204);
    v158 = (WTF::StringImpl *)*a1;
    v157 = a1[1];
  }
  else
  {
    v157 = 0;
    v158 = 0;
  }
LABEL_244:
  *a1 = 0;
  a1[1] = 0;
  v206 = a1[3];
  if (v206 && v157)
  {
    v146 = (WTF *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v206 + 16))(v206, v158);
    if (*a1)
      goto LABEL_476;
    v207 = a1[1];
    v208 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v208 && v207)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v208 + 16))(v208, 0);
  }
LABEL_252:
  if (*(_QWORD *)v489)
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(*(uint64_t *)v489, v158);
LABEL_254:
  v211 = *a1;
  v212 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v213 = a1[3];
  if (v213 && v212)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v213 + 16))(v213, v211);
  v2 = 0;
  LODWORD(v27) = 1;
LABEL_256:
  v421 = (char)v27;
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v495);
  if (!v496)
  {
    v394 = *a1;
    v395 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v396 = a1[3];
    if (v396)
    {
      if (v395)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v396 + 16))(v396, v394);
    }
  }
  IPC::Decoder::decode<WTF::String>(a1, &v493);
  IPC::Decoder::decode<WTF::String>(a1, &v491);
  a2 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1);
  v215 = v214;
  v216 = IPC::Decoder::decode<unsigned long long>(a1);
  v218 = v217;
  IPC::Decoder::decode<WebKit::AccessibilityPreferences>(a1, (uint64_t)v489);
  v219 = a1[1];
  v220 = *a1;
  v221 = a1[2] - *a1;
  if (v219 <= v221)
  {
    v397 = 0;
    v398 = 0;
    *a1 = 0;
    a1[1] = 0;
    v399 = a1[3];
    if (v399)
    {
      if (v219)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v399 + 16))(v399);
        v398 = *a1;
        v397 = a1[1];
      }
      else
      {
        v397 = 0;
        v398 = 0;
      }
    }
    goto LABEL_620;
  }
  v222 = (unsigned __int8 *)(v220 + v221);
  a1[2] = (uint64_t)(v222 + 1);
  if (!v220)
  {
    v397 = v219;
    v398 = 0;
LABEL_620:
    *a1 = 0;
    a1[1] = 0;
    v400 = a1[3];
    if (v400)
    {
      if (v397)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v400 + 16))(v400, v398, v397);
        v223 = 0;
        v220 = *a1;
        v219 = a1[1];
      }
      else
      {
        v219 = 0;
        v220 = 0;
        v223 = 0;
      }
    }
    else
    {
      v219 = 0;
      v220 = 0;
      v223 = 0;
    }
    goto LABEL_622;
  }
  v223 = *v222;
  if (v223 < 2)
  {
    v224 = 0;
    v225 = 1;
    goto LABEL_261;
  }
LABEL_622:
  *a1 = 0;
  a1[1] = 0;
  v401 = a1[3];
  if (v401)
  {
    if (v219)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v401 + 16))(v401, v220);
    v225 = 0;
    v224 = 1;
  }
  else
  {
    v225 = 0;
    v224 = 1;
  }
LABEL_261:
  if (v223)
    v114 = v225;
  else
    v114 = 0;
  IPC::Decoder::decode<WTF::String>(a1, &v487);
  IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a1, &v485);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v483);
  v422 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v423 = v226;
  v146 = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v480, a1);
  if (!*a1)
  {
    *v424 = 0;
    v424[840] = 0;
    v114 = v438;
    a2 = v477;
    goto LABEL_357;
  }
  if (!v583)
    goto LABEL_476;
  v227 = v581;
  v228 = v582;
  v581 = 0u;
  v582 = 0u;
  *(_OWORD *)v584 = v227;
  *(_OWORD *)&v584[16] = v228;
  if (!v580)
    goto LABEL_476;
  v229 = v579;
  v579 = 0;
  v585 = v229;
  if (!v578)
    goto LABEL_476;
  v230 = v577;
  v577 = 0;
  *(_QWORD *)&v586 = v230;
  if (!v576)
    goto LABEL_476;
  v231 = v574;
  v574 = 0;
  *((_QWORD *)&v586 + 1) = v231;
  v232 = v575;
  v575 = 0;
  v587 = v232;
  if (!v573)
    goto LABEL_476;
  v420 = v114;
  v114 = v572;
  if (v572)
    v146 = (WTF *)CFRetain(*(CFTypeRef *)(v572 + 8));
  *(_QWORD *)&v588 = v114;
  if (!v571)
    goto LABEL_476;
  v233 = v569;
  v569 = 0;
  *((_QWORD *)&v588 + 1) = v233;
  v234 = v570;
  v570 = 0;
  *(_QWORD *)&v589 = v234;
  if (!v568)
    goto LABEL_476;
  v235 = v566;
  v566 = 0;
  *((_QWORD *)&v589 + 1) = v235;
  v236 = v567;
  v567 = 0;
  v590 = v236;
  if (!v565)
    goto LABEL_476;
  v237 = v563;
  v563 = 0;
  v591 = v237;
  v238 = v564;
  v564 = 0;
  v592 = v238;
  if (!v562)
    goto LABEL_476;
  v239 = v560;
  v560 = 0;
  v593 = v239;
  v240 = v561;
  v561 = 0;
  v594 = v240;
  if (!v559)
    goto LABEL_476;
  v241 = v557;
  v557 = 0;
  v595 = v241;
  v242 = v558;
  v558 = 0;
  v596 = v242;
  if (!v556)
    goto LABEL_476;
  v243 = v554;
  v554 = 0;
  v597 = v243;
  v244 = v555;
  v555 = 0;
  v598 = v244;
  if (!v553)
    goto LABEL_476;
  v245 = v551;
  v551 = 0;
  v599 = v245;
  v246 = v552;
  v552 = 0;
  v600 = v246;
  if (!v550)
    goto LABEL_476;
  v247 = v548;
  v548 = 0;
  v601 = v247;
  v248 = v549;
  v549 = 0;
  v602 = v248;
  if (!v547)
    goto LABEL_476;
  v249 = v545;
  v545 = 0;
  v603 = v249;
  v250 = v546;
  v546 = 0;
  v604 = v250;
  if (!v544)
    goto LABEL_476;
  v251 = v542;
  v542 = 0;
  v605 = v251;
  v252 = v543;
  v543 = 0;
  v606 = v252;
  if (!v541)
    goto LABEL_476;
  v253 = v539;
  v539 = 0;
  v607 = v253;
  v254 = v540;
  v540 = 0;
  v608 = v254;
  if (!v538)
    goto LABEL_476;
  v255 = v536;
  v536 = 0;
  v609 = v255;
  v256 = v537;
  v537 = 0;
  v610 = v256;
  if (!v535)
    goto LABEL_476;
  v257 = v533;
  v533 = 0;
  v611 = v257;
  v258 = v534;
  v534 = 0;
  v612 = v258;
  if (!v532)
    goto LABEL_476;
  v259 = v530;
  v530 = 0;
  v613 = v259;
  v260 = v531;
  v531 = 0;
  v614 = v260;
  if (!v529)
    goto LABEL_476;
  v261 = v527;
  v527 = 0;
  v615 = v261;
  v262 = v528;
  v528 = 0;
  v616 = v262;
  if (v476 <= 0xFFu)
    goto LABEL_476;
  v617 = v476;
  if (v475)
    goto LABEL_476;
  v618 = v474;
  if (v473)
    goto LABEL_476;
  v619 = v472;
  if (v471)
    goto LABEL_476;
  v620 = v40;
  if (v470)
    goto LABEL_476;
  v621 = v469;
  if (v468)
    goto LABEL_476;
  v622 = v467;
  if (v466)
    goto LABEL_476;
  v623 = v465;
  if (v464)
    goto LABEL_476;
  v624 = v463;
  if (v462)
    goto LABEL_476;
  v625 = v461;
  if (v460)
    goto LABEL_476;
  v626 = v459;
  if (v458)
    goto LABEL_476;
  v627 = v457;
  if (v456)
    goto LABEL_476;
  v628 = v455;
  if (v454)
    goto LABEL_476;
  v629 = v453;
  if (!v452)
    goto LABEL_476;
  v630 = v451;
  if (v450)
    goto LABEL_476;
  v631 = v448;
  if ((v449 & 0xFF0000) == 0)
    goto LABEL_476;
  v632 = v449;
  if (!v526)
    goto LABEL_476;
  v263 = v525;
  v525 = 0;
  v633 = v263;
  if ((v447 & 0xFF00000000) == 0)
    goto LABEL_476;
  v634 = v447;
  if ((v446 & 0xFF00000000) == 0)
    goto LABEL_476;
  v635 = v446;
  if (!v524)
    goto LABEL_476;
  v264 = v523;
  v523 = 0;
  v636 = v264;
  if ((v445 & 0xFF00000000) == 0)
    goto LABEL_476;
  v637 = v445;
  if (!v522)
    goto LABEL_476;
  v146 = (WTF *)WTF::MachSendRight::MachSendRight();
  if (!v520)
    goto LABEL_476;
  v265 = v519;
  v519 = 0;
  v638 = v265;
  if (!v518)
    goto LABEL_476;
  v266 = v517;
  v517 = 0;
  v639 = v266;
  if (v443)
    goto LABEL_476;
  v640 = v442;
  if (v441)
    goto LABEL_476;
  v641 = v440;
  if (v439)
    goto LABEL_476;
  v642 = v437;
  if (v479)
    goto LABEL_476;
  v643 = v438;
  if (v478)
    goto LABEL_476;
  v644 = v477;
  if (!v516)
    goto LABEL_476;
  v267 = cf;
  cf = 0;
  v645 = v267;
  if (!v514)
    goto LABEL_476;
  v268 = v512;
  v512 = 0;
  v646 = v268;
  v269 = v513;
  v513 = 0;
  v647 = v269;
  if (!v511)
    goto LABEL_476;
  v648 = v509;
  v270 = v510;
  v510 = 0;
  v649 = v270;
  if (v436)
    goto LABEL_476;
  v650 = v435;
  if (!v709)
    goto LABEL_476;
  LOBYTE(v651) = 0;
  v666 = 0;
  if (v708)
  {
    v271 = v694;
    v694 = 0u;
    v652 = v271;
    v272 = v697;
    v697 = 0u;
    v655 = v272;
    v273 = v699;
    v274 = v700;
    v699 = 0u;
    v700 = 0u;
    v275 = v695;
    v651 = v693;
    v695 = 0;
    v653 = v275;
    v654 = v696;
    v656 = v698;
    v657 = v273;
    v658 = v274;
    LOBYTE(v659) = 0;
    v660 = 0;
    if (v702)
    {
      v276 = v701;
      v701 = 0;
      v659 = v276;
      v660 = 1;
    }
    LOBYTE(v661) = 0;
    v662 = 0;
    if (v704)
    {
      v277 = v703;
      v703 = 0;
      v661 = v277;
      v662 = 1;
    }
    LOBYTE(v663) = 0;
    v664 = 0;
    if (v706)
    {
      v278 = v705;
      v705 = 0;
      v663 = v278;
      v664 = 1;
    }
    v665 = v707;
    v666 = 1;
  }
  if (!v508)
    goto LABEL_476;
  v279 = v506;
  v506 = 0;
  v667 = v279;
  v280 = v507;
  v507 = 0;
  v668 = v280;
  if (!v505)
    goto LABEL_476;
  LOBYTE(v669) = 0;
  v670 = 0;
  if (v504)
  {
    v281 = v503;
    v503 = 0;
    v669 = v281;
    v670 = 1;
  }
  if (!v502)
    goto LABEL_476;
  LOBYTE(v671) = 0;
  v672 = 0;
  if (v501)
  {
    v282 = v500;
    v500 = 0;
    v671 = v282;
    v672 = 1;
  }
  if (v434)
    goto LABEL_476;
  v673 = v433;
  if (v432)
    goto LABEL_476;
  v674 = v431;
  if (!v499)
    goto LABEL_476;
  v675[0] = v497;
  v283 = v498;
  v497 = 0;
  v498 = 0;
  v675[1] = v283;
  if (v430)
    goto LABEL_476;
  v676 = v428;
  if (v429)
    goto LABEL_476;
  v677 = v427;
  if (v444 <= 0xFFu)
    goto LABEL_476;
  v678 = v444;
  if (v426)
    goto LABEL_476;
  v679 = v425;
  if ((_DWORD)v27)
    goto LABEL_476;
  v680 = v2;
  if (!v496)
    goto LABEL_476;
  v114 = v224;
  v27 = &v669;
  v2 = (uint64_t)v675;
  v146 = (WTF *)WebCore::Color::Color();
  if (!v494)
    goto LABEL_476;
  v284 = v493;
  v493 = 0;
  v681 = v284;
  if (!v492)
    goto LABEL_476;
  v285 = v491;
  v491 = 0;
  v682 = v285;
  if (!v215)
    goto LABEL_476;
  v683 = a2;
  if (!v218)
    goto LABEL_476;
  v684 = v216;
  if (!v490)
    goto LABEL_476;
  *(_OWORD *)v685 = *(_OWORD *)v489;
  *(_QWORD *)&v685[15] = *(_QWORD *)&v489[15];
  if ((_DWORD)v224)
    goto LABEL_476;
  v686 = v420;
  if (!v488)
    goto LABEL_476;
  v286 = v487;
  v487 = 0;
  v687 = v286;
  if (!v486
    || (v287 = v485, v485 = 0, v688 = v287, !v484)
    || (v288 = v483, v483 = 0, v689 = v288, !v423)
    || (v690 = v422, !v482))
  {
LABEL_476:
    __break(1u);
LABEL_477:
    v480 = 0;
    LODWORD(v481) = 0;
    WTF::fastFree(v146, v158);
    goto LABEL_359;
  }
  v691 = v480;
  v289 = v481;
  v480 = 0;
  v481 = 0;
  v692 = v289;
  *(_BYTE *)(WebKit::WebProcessCreationParameters::WebProcessCreationParameters((uint64_t)v424, (uint64_t *)v584) + 840) = 1;
  WebKit::WebProcessCreationParameters::~WebProcessCreationParameters((WebKit::WebProcessCreationParameters *)v584, v290);
  v114 = 0;
  a2 = 0;
  v2 = 0;
  LOBYTE(v27) = v421;
LABEL_357:
  if (v482)
  {
    v146 = v480;
    if (v480)
      goto LABEL_477;
  }
LABEL_359:
  if (v484 && v483)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v483, v158);
  if (v486 && v485)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v485, v158);
  if (v488)
  {
    v291 = v487;
    v487 = 0;
    if (v291)
    {
      if (*(_DWORD *)v291 == 2)
        WTF::StringImpl::destroy(v291, v158);
      else
        *(_DWORD *)v291 -= 2;
    }
  }
  if (v492)
  {
    v292 = v491;
    v491 = 0;
    if (v292)
    {
      if (*(_DWORD *)v292 == 2)
        WTF::StringImpl::destroy(v292, v158);
      else
        *(_DWORD *)v292 -= 2;
    }
  }
  if (v494)
  {
    v293 = v493;
    v493 = 0;
    if (v293)
    {
      if (*(_DWORD *)v293 == 2)
        WTF::StringImpl::destroy(v293, v158);
      else
        *(_DWORD *)v293 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v495, v158);
  if (v2)
    v295 = (char)v27;
  else
    v295 = 1;
  if ((v295 & 1) == 0)
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v2, v294);
  if (v499)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v497, v294);
  if (v502 && v501)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v500);
  if (v505 && v504)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v503);
  if (v508)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v506, v294);
  if (v709 && v708)
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(&v693);
  if (v511 && v510)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v510, v294);
  if (v514)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v512, v294);
  if (v516)
  {
    v296 = cf;
    cf = 0;
    if (v296)
      CFRelease(v296);
  }
  v297 = v478;
  if (!a2)
    v297 = 1;
  if ((v297 & 1) == 0)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)a2, (WTF::StringImpl *)v294);
  v298 = v479;
  if (!v114)
    v298 = 1;
  if ((v298 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v114 + 8));
  if (v518)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v517);
  if (v520)
  {
    v299 = v519;
    v519 = 0;
    if (v299)
    {
      if (*(_DWORD *)v299 == 2)
        WTF::StringImpl::destroy(v299, (WTF::StringImpl *)v294);
      else
        *(_DWORD *)v299 -= 2;
    }
  }
  if (v522)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v521);
  if (v524)
  {
    v300 = v523;
    v523 = 0;
    if (v300)
    {
      if (*(_DWORD *)v300 == 2)
        WTF::StringImpl::destroy(v300, (WTF::StringImpl *)v294);
      else
        *(_DWORD *)v300 -= 2;
    }
  }
  if (v526)
  {
    v301 = v525;
    v525 = 0;
    if (v301)
    {
      if (*(_DWORD *)v301 == 2)
        WTF::StringImpl::destroy(v301, (WTF::StringImpl *)v294);
      else
        *(_DWORD *)v301 -= 2;
    }
  }
  if (v529)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v527, v294);
  if (v532)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v530, v294);
  if (v535)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v533, v294);
  if (v538)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v536, v294);
  if (v541)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v539, v294);
  if (v544)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v542, v294);
  if (v547)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v545, v294);
  if (v550)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v548, v294);
  if (v553)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v551, v294);
  if (v556)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v554, v294);
  if (v559)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v557, v294);
  if (v562)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v560, v294);
  if (v565)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v563, v294);
  if (v568)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v566, v294);
  if (v571)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v569, v294);
  if (v573)
  {
    v302 = v572;
    v572 = 0;
    if (v302)
      CFRelease(*(CFTypeRef *)(v302 + 8));
  }
  if (v576)
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v574, v294);
  if (v578)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v577);
  if (v580)
  {
    v303 = v579;
    v579 = 0;
    if (v303)
    {
      if (*(_DWORD *)v303 == 2)
        WTF::StringImpl::destroy(v303, (WTF::StringImpl *)v294);
      else
        *(_DWORD *)v303 -= 2;
    }
  }
  return std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v581);
}

